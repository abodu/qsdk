--- a/net/ipv4/netfilter/nf_nat_sip.c	2013-05-10 11:26:32.549350015 +0800
+++ b/net/ipv4/netfilter/nf_nat_sip.c	2013-05-10 16:56:09.249968739 +0800
@@ -79,15 +79,19 @@
 	__be32 newaddr;
 	__be16 newport;
 
-	if (ct->tuplehash[dir].tuple.src.u3.ip == addr->ip &&
-	    ct->tuplehash[dir].tuple.src.u.udp.port == port) {
+	if (ct->tuplehash[dir].tuple.src.u3.ip == addr->ip) {
 		newaddr = ct->tuplehash[!dir].tuple.dst.u3.ip;
-		newport = ct->tuplehash[!dir].tuple.dst.u.udp.port;
-	} else if (ct->tuplehash[dir].tuple.dst.u3.ip == addr->ip &&
-		   ct->tuplehash[dir].tuple.dst.u.udp.port == port) {
+		if(ct->tuplehash[dir].tuple.src.u.udp.port == port)
+			newport = ct->tuplehash[!dir].tuple.dst.u.udp.port;
+		else
+			newport = ct->tuplehash[dir].tuple.src.u.udp.port;
+	} else if (ct->tuplehash[dir].tuple.dst.u3.ip == addr->ip ) {
 		newaddr = ct->tuplehash[!dir].tuple.src.u3.ip;
-		newport = help->help.ct_sip_info.forced_dport ? :
+		if(ct->tuplehash[dir].tuple.dst.u.udp.port == port)
+			newport = help->help.ct_sip_info.forced_dport ? :
 			  ct->tuplehash[!dir].tuple.src.u.udp.port;
+		else
+			newport = ct->tuplehash[dir].tuple.dst.u.udp.port;
 	} else
 		return 1;
 
@@ -155,14 +159,12 @@
 		char buffer[sizeof("nnn.nnn.nnn.nnn:nnnnn")];
 
 		/* We're only interested in headers related to this
-		 * connection */
+		 * host,support VIA info port different with session source port*/
 		if (request) {
-			if (addr.ip != ct->tuplehash[dir].tuple.src.u3.ip ||
-			    port != ct->tuplehash[dir].tuple.src.u.udp.port)
+			if (addr.ip != ct->tuplehash[dir].tuple.src.u3.ip )
 				goto next;
 		} else {
-			if (addr.ip != ct->tuplehash[dir].tuple.dst.u3.ip ||
-			    port != ct->tuplehash[dir].tuple.dst.u.udp.port)
+			if (addr.ip != ct->tuplehash[dir].tuple.dst.u3.ip)
 				goto next;
 		}
 
@@ -484,6 +486,7 @@
 	struct nf_conn *ct = nf_ct_get(skb, &ctinfo);
 	enum ip_conntrack_dir dir = CTINFO2DIR(ctinfo);
 	u_int16_t port;
+	int portloop = 0;
 
 	/* Connection will come from reply */
 	if (ct->tuplehash[dir].tuple.src.u3.ip ==
@@ -506,8 +509,13 @@
 
 	/* Try to get same pair of ports: if not, try to change them. */
 	for (port = ntohs(rtp_exp->tuple.dst.u.udp.port);
-	     port != 0; port += 2) {
+	     port != 0 || 0 == portloop; port += 2) {
 		int ret;
+		/* support edge case port 65534/65535 */
+		if(0 == port) {
+			portloop = 1;
+			port +=	2;
+		}
 
 		rtp_exp->tuple.dst.u.udp.port = htons(port);
 		ret = nf_ct_expect_related(rtp_exp);
