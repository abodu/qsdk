--- a/arch/mips/ath79/dev-wmac.c
+++ b/arch/mips/ath79/dev-wmac.c
@@ -280,6 +280,11 @@ void __init ath79_wmac_disable_5ghz(void
 	ath79_wmac_data.disable_5ghz = true;
 }
 
+__init struct ath9k_platform_data *ath79_get_wmac_data(void)
+{
+	return &ath79_wmac_data;
+}
+
 void __init ath79_register_wmac(u8 *cal_data, u8 *mac_addr)
 {
 	if (soc_is_ar913x())
--- a/arch/mips/ath79/dev-wmac.h
+++ b/arch/mips/ath79/dev-wmac.h
@@ -12,10 +12,13 @@
 #ifndef _ATH79_DEV_WMAC_H
 #define _ATH79_DEV_WMAC_H
 
+#include <linux/ath9k_platform.h>
+
 void ath79_register_wmac(u8 *cal_data, u8 *mac_addr);
 void ath79_wmac_disable_2ghz(void);
 void ath79_wmac_disable_5ghz(void);
 
 bool ar93xx_wmac_read_mac_address(u8 *dest);
+struct ath9k_platform_data *ath79_get_wmac_data(void);
 
 #endif /* _ATH79_DEV_WMAC_H */
--- /dev/null
+++ b/arch/mips/ath79/nand-caldata-fixup.c
@@ -0,0 +1,127 @@
+/*
+ *  Atheros AR71XX/AR724X/AR913X Calibration data in NAND flash fixup
+ *
+ *  Copyright (C) 2012 Qualcomm Atheros Inc.
+ *
+ *  Permission to use, copy, modify, and/or distribute this software for any
+ *  purpose with or without fee is hereby granted, provided that the above
+ *  copyright notice and this permission notice appear in all copies.
+ *
+ *  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
+ *  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
+ *  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
+ *  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+ *  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
+ *  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
+ *  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ */
+
+#include <linux/types.h>
+#include <linux/ath9k_platform.h>
+#include <linux/mtd/mtd.h>
+
+#include "dev-ap9x-pci.h"
+#include "dev-wmac.h"
+#include "dev-eth.h"
+#include "nand-caldata-fixup.h"
+
+static struct ath79_caldata_fixup *ath79_caldata;
+
+static void mtd_caldata_add(struct mtd_info *mtd)
+{
+	int i, ret;
+	size_t retlen;
+	struct ath9k_platform_data *wmac_pdata;
+	struct ag71xx_platform_data *eth_pdata;
+
+	/* If the device added doesn't match the name of the device containing
+	 * caldata, then we do nothing; just return */
+	if (strcmp(mtd->name, ath79_caldata->name))
+		return;
+
+	/* If the caldata PCIe address provided by the platform is non-null,
+	 * then fetch the data from MTD and fill it into the platform
+	 * structure */
+	for (i = 0;
+	     i < sizeof(ath79_caldata->pcie_caldata_addr) / sizeof(loff_t);
+	     i++) {
+		if (ath79_caldata->pcie_caldata_addr[i] == FIXUP_UNDEFINED)
+			continue;
+
+		wmac_pdata = ap9x_pci_get_wmac_data(i);
+
+		ret =
+		    mtd_read(mtd, ath79_caldata->pcie_caldata_addr[i],
+			     sizeof(wmac_pdata->eeprom_data), &retlen,
+			     (u_char *) wmac_pdata->eeprom_data);
+		if (retlen != sizeof(wmac_pdata->eeprom_data) || ret < 0) {
+			pr_err("%s: Error while reading %dB at offset 0x%08x\n",
+			       mtd->name, sizeof(wmac_pdata->eeprom_data),
+			       (u_int) ath79_caldata->pcie_caldata_addr[i]);
+		}
+	}
+
+	/* Same here for WMAC caldata */
+	if (ath79_caldata->wmac_caldata_addr != FIXUP_UNDEFINED) {
+		wmac_pdata = ath79_get_wmac_data();
+
+		ret =
+		    mtd_read(mtd, ath79_caldata->wmac_caldata_addr,
+			     sizeof(wmac_pdata->eeprom_data), &retlen,
+			     (u_char *) wmac_pdata->eeprom_data);
+		if (retlen != sizeof(wmac_pdata->eeprom_data) || ret < 0) {
+			pr_err("%s: Error while reading %dB at offset 0x%08x\n",
+			       mtd->name, sizeof(wmac_pdata->eeprom_data),
+			       (u_int) ath79_caldata->wmac_caldata_addr);
+		}
+	}
+
+	/* Same here for Ethernet MAC@ */
+	for (i = 0; i < sizeof(ath79_caldata->mac_addr) / sizeof(loff_t); i++) {
+		switch (i) {
+		case 0:
+			eth_pdata = &ath79_eth0_data;
+			break;
+		case 1:
+			eth_pdata = &ath79_eth1_data;
+			break;
+		default:
+			eth_pdata = NULL;
+		}
+
+		if (ath79_caldata->mac_addr[i] == FIXUP_UNDEFINED)
+			continue;
+
+		ret =
+		    mtd_read(mtd, ath79_caldata->mac_addr[i],
+			     sizeof(eth_pdata->mac_addr), &retlen,
+			     (u_char *) eth_pdata->mac_addr);
+		if (retlen != sizeof(eth_pdata->mac_addr) || ret < 0) {
+			pr_err("%s: Error while reading %dB at offset 0x%08x\n",
+			       mtd->name, sizeof(eth_pdata->mac_addr),
+			       (u_int) ath79_caldata->mac_addr[i]);
+		}
+	}
+}
+
+static void mtd_caldata_remove(struct mtd_info *mtd)
+{
+	return;
+}
+
+static void add_mtd_caldata_notifier(void)
+{
+	static struct mtd_notifier not = {
+		.add = mtd_caldata_add,
+		.remove = mtd_caldata_remove,
+	};
+
+	register_mtd_user(&not);
+}
+
+void __init ath79_mtd_caldata_fixup(struct ath79_caldata_fixup
+				    *platform_caldata)
+{
+	ath79_caldata = platform_caldata;
+	add_mtd_caldata_notifier();
+}
--- /dev/null
+++ b/arch/mips/ath79/nand-caldata-fixup.h
@@ -0,0 +1,31 @@
+/*
+ *  Atheros AR71XX/AR724X/AR913X Calibration data in NAND flash fixup
+ *
+ *  Copyright (C) 2012 Qualcomm Atheros Inc.
+ *
+ *  Permission to use, copy, modify, and/or distribute this software for any
+ *  purpose with or without fee is hereby granted, provided that the above
+ *  copyright notice and this permission notice appear in all copies.
+ *
+ *  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
+ *  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
+ *  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
+ *  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+ *  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
+ *  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
+ *  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ */
+
+/* 0 is a valid value for an MTD offset. So we'll use -1 as an undefined value
+ * That means that all the fields in the structure below have to be initialized
+ * in the platform code when the fixup is used */
+#define FIXUP_UNDEFINED		-1LL
+
+struct ath79_caldata_fixup {
+	char *name;		/* Name of the MTD dev to read from */
+	loff_t pcie_caldata_addr[2];	/* Addr (in flash) of radios caldata */
+	loff_t wmac_caldata_addr;
+	loff_t mac_addr[2];	/* Addr (in flash) of mac addresses */
+};
+
+void __init ath79_mtd_caldata_fixup(struct ath79_caldata_fixup *);
--- a/arch/mips/ath79/Kconfig
+++ b/arch/mips/ath79/Kconfig
@@ -757,6 +757,7 @@ config ATH79_DEV_NFC
 	def_bool n
 
 config ATH79_DEV_NAND
+	select ATH79_NAND_CALDATA_FIXUP
 	def_bool n
 
 config ATH79_DEV_SPI
@@ -769,6 +770,9 @@ config ATH79_DEV_WMAC
 	depends on (SOC_AR913X || SOC_AR933X || SOC_AR934X || SOC_QCA955X)
 	def_bool n
 
+config ATH79_NAND_CALDATA_FIXUP
+	def_bool n
+
 config ATH79_NVRAM
 	def_bool n
 
--- a/arch/mips/ath79/Makefile
+++ b/arch/mips/ath79/Makefile
@@ -33,6 +33,7 @@ obj-$(CONFIG_ATH79_DEV_WMAC)		+= dev-wma
 #
 # Miscellaneous objects
 #
+obj-$(CONFIG_ATH79_NAND_CALDATA_FIXUP)	+= nand-caldata-fixup.o
 obj-$(CONFIG_ATH79_NVRAM)		+= nvram.o
 obj-$(CONFIG_ATH79_PCI_ATH9K_FIXUP)	+= pci-ath9k-fixup.o
 obj-$(CONFIG_ATH79_ROUTERBOOT)		+= routerboot.o
