Index: linux-3.3.8/arch/mips/kernel/setup.c
===================================================================
--- linux-3.3.8.orig/arch/mips/kernel/setup.c	2013-02-19 15:43:57.187949415 -0800
+++ linux-3.3.8/arch/mips/kernel/setup.c	2013-02-19 15:44:00.963949584 -0800
@@ -35,6 +35,8 @@
 #include <asm/system.h>
 #include <asm/prom.h>
 
+#include <linux/of_fdt.h>
+
 struct cpuinfo_mips cpu_data[NR_CPUS] __read_mostly;
 
 EXPORT_SYMBOL(cpu_data);
@@ -467,6 +469,24 @@
 }
 early_param("mem", early_parse_mem);
 
+static int __init fdt_early(char *p)
+{
+	unsigned long fdtp = memparse(p, &p);
+	struct boot_param_header *devtree = (void *)fdtp;
+
+	printk("fdt addr: %p\n", devtree);
+
+	if (be32_to_cpu(devtree->magic) != OF_DT_HEADER) {
+		printk("not a devtree @ %p\n", devtree);
+		return 0;
+	}
+
+	initial_boot_params = (void *)devtree;
+
+	return 0;
+}
+early_param("fdt", fdt_early);
+
 static void __init arch_mem_init(char **cmdline_p)
 {
 	phys_t init_mem, init_end, init_size;
Index: linux-3.3.8/arch/mips/ath79/gpio.c
===================================================================
--- linux-3.3.8.orig/arch/mips/ath79/gpio.c	2013-02-19 15:44:00.451949561 -0800
+++ linux-3.3.8/arch/mips/ath79/gpio.c	2013-02-19 16:51:16.572128498 -0800
@@ -20,9 +20,14 @@
 #include <linux/io.h>
 #include <linux/ioport.h>
 #include <linux/gpio.h>
+#include <linux/irq.h>
+#include <linux/interrupt.h>
+
+#include <linux/of.h>
 
 #include <asm/mach-ath79/ar71xx_regs.h>
 #include <asm/mach-ath79/ath79.h>
+#include <asm/mach-ath79/irq.h>
 #include "common.h"
 
 void __iomem *ath79_gpio_base;
@@ -31,6 +36,13 @@
 static unsigned long ath79_gpio_count;
 static DEFINE_SPINLOCK(ath79_gpio_lock);
 
+/*
+ * gpio_both_edge is a bitmask of which gpio pins need to have
+ * the detect priority flipped from the interrupt handler to
+ * emulate IRQ_TYPE_EDGE_BOTH.
+ */
+static unsigned long gpio_both_edge = 0;
+
 static void __ath79_gpio_set_value(unsigned gpio, int value)
 {
 	void __iomem *base = ath79_gpio_base;
@@ -240,6 +252,137 @@
 	spin_unlock_irqrestore(&ath79_gpio_lock, flags);
 }
 
+static int ath79_gpio_irq_type(struct irq_data *d, unsigned type)
+{
+	int offset = d->irq - ATH79_GPIO_IRQ_BASE;
+	void __iomem *base = ath79_gpio_base;
+	unsigned long flags;
+	unsigned long int_type;
+	unsigned long int_polarity;
+	unsigned long bit = (1 << offset);
+
+	spin_lock_irqsave(&ath79_gpio_lock, flags);
+
+	int_type = __raw_readl(base + AR71XX_GPIO_REG_INT_TYPE);
+	int_polarity = __raw_readl(base + AR71XX_GPIO_REG_INT_POLARITY);
+
+	gpio_both_edge &= ~bit;
+
+	switch (type) {
+	case IRQ_TYPE_EDGE_RISING:
+		int_type &= ~bit;
+		int_polarity |= bit;
+		break;
+
+	case IRQ_TYPE_EDGE_FALLING:
+		int_type &= ~bit;
+		int_polarity &= ~bit;
+		break;
+
+	case IRQ_TYPE_LEVEL_HIGH:
+		int_type |= bit;
+		int_polarity |= bit;
+		break;
+
+	case IRQ_TYPE_LEVEL_LOW:
+		int_type |= bit;
+		int_polarity &= ~bit;
+		break;
+
+	case IRQ_TYPE_EDGE_BOTH:
+		int_type |= bit;
+		/* set polarity based on current value */
+		if (gpio_get_value(offset)) {
+			int_polarity &= ~bit;
+		} else {
+			int_polarity |= bit;
+		}
+		/* flip this gpio in the interrupt handler */
+		gpio_both_edge |= bit;
+		break;
+
+	default:
+		spin_unlock_irqrestore(&ath79_gpio_lock, flags);
+		return -EINVAL;
+	}
+
+	__raw_writel(int_type, base + AR71XX_GPIO_REG_INT_TYPE);
+	__raw_writel(int_polarity, base + AR71XX_GPIO_REG_INT_POLARITY);
+
+	__raw_writel(__raw_readl(base + AR71XX_GPIO_REG_INT_MODE) | (1 << offset),
+		     base + AR71XX_GPIO_REG_INT_MODE);
+
+	__raw_writel(__raw_readl(base + AR71XX_GPIO_REG_INT_ENABLE) & ~(1 << offset),
+		     base + AR71XX_GPIO_REG_INT_ENABLE);
+
+	spin_unlock_irqrestore(&ath79_gpio_lock, flags);
+	return 0;
+}
+
+static void ath79_gpio_irq_enable(struct irq_data *d)
+{
+	int offset = d->irq - ATH79_GPIO_IRQ_BASE;
+	void __iomem *base = ath79_gpio_base;
+
+	__raw_writel(__raw_readl(base + AR71XX_GPIO_REG_INT_ENABLE) | (1 << offset),
+		     base + AR71XX_GPIO_REG_INT_ENABLE);
+}
+
+static void ath79_gpio_irq_disable(struct irq_data *d)
+{
+	int offset = d->irq - ATH79_GPIO_IRQ_BASE;
+	void __iomem *base = ath79_gpio_base;
+
+	__raw_writel(__raw_readl(base + AR71XX_GPIO_REG_INT_ENABLE) & ~(1 << offset),
+		     base + AR71XX_GPIO_REG_INT_ENABLE);
+}
+
+static struct irq_chip ath79_gpio_irqchip = {
+	.name = "GPIO",
+	.irq_enable = ath79_gpio_irq_enable,
+	.irq_disable = ath79_gpio_irq_disable,
+	.irq_set_type = ath79_gpio_irq_type,
+};
+
+static irqreturn_t ath79_gpio_irq(int irq, void *dev)
+{
+	void __iomem *base = ath79_gpio_base;
+	unsigned int stat = __raw_readl(base + AR71XX_GPIO_REG_INT_PENDING);
+
+	int irq_base = ATH79_GPIO_IRQ_BASE;
+
+	while (stat) {
+		int bit_num = __ffs(stat);
+		unsigned long bit = (1<<bit_num);
+
+		if (bit & gpio_both_edge) {
+			__raw_writel(__raw_readl(base + AR71XX_GPIO_REG_INT_POLARITY) ^ bit,
+				base + AR71XX_GPIO_REG_INT_POLARITY);
+		}
+
+		handle_nested_irq(irq_base + bit_num);
+		stat &= ~bit;
+	}
+
+	return IRQ_HANDLED;
+}
+
+static int __devinit ath79_gpio_irq_init(struct gpio_chip *chip)
+{
+	int irq;
+	int irq_base = ATH79_GPIO_IRQ_BASE;
+
+	for (irq = irq_base; irq < irq_base + chip->ngpio; irq++) {
+		irq_set_chip_data(irq, chip);
+		irq_set_chip_and_handler(irq, &ath79_gpio_irqchip, handle_simple_irq);
+		irq_set_nested_thread(irq, 1);
+		irq_set_noprobe(irq);
+	}
+
+	return 0;
+}
+
+
 void __init ath79_gpio_init(void)
 {
 	int err;
@@ -266,9 +409,15 @@
 		ath79_gpio_chip.direction_output = ar934x_gpio_direction_output;
 	}
 
+	ath79_gpio_chip.of_node = of_find_node_by_path("/ath79-gpio");
+
 	err = gpiochip_add(&ath79_gpio_chip);
 	if (err)
 		panic("cannot add AR71xx GPIO chip, error=%d", err);
+
+	ath79_gpio_irq_init(&ath79_gpio_chip);
+
+	request_threaded_irq(ATH79_MISC_IRQ_GPIO, NULL, ath79_gpio_irq, IRQF_ONESHOT, "ath79-gpio", NULL);
 }
 
 int gpio_get_value(unsigned gpio)
@@ -291,14 +440,22 @@
 
 int gpio_to_irq(unsigned gpio)
 {
-	/* FIXME */
-	return -EINVAL;
+	if (gpio > ath79_gpio_count) {
+		return -EINVAL;
+	}
+
+	return ATH79_GPIO_IRQ_BASE + gpio;
 }
 EXPORT_SYMBOL(gpio_to_irq);
 
 int irq_to_gpio(unsigned irq)
 {
-	/* FIXME */
-	return -EINVAL;
+	unsigned gpio = irq - ATH79_GPIO_IRQ_BASE;
+
+	if (gpio > ath79_gpio_count) {
+		return -EINVAL;
+	}
+
+	return gpio;
 }
 EXPORT_SYMBOL(irq_to_gpio);
Index: linux-3.3.8/arch/mips/ath79/mach-cus227.c
===================================================================
--- linux-3.3.8.orig/arch/mips/ath79/mach-cus227.c	2013-01-23 09:40:05.027620271 -0800
+++ linux-3.3.8/arch/mips/ath79/mach-cus227.c	2013-02-19 16:47:32.592118568 -0800
@@ -48,6 +48,8 @@
 #include <asm/mach-ath79/ar71xx_regs.h>
 #include <asm/mach-ath79/ath79.h>
 
+#include <linux/of_platform.h>
+
 #include "common.h"
 #include "dev-ap9x-pci.h"
 #include "dev-audio.h"
@@ -90,36 +92,11 @@
 	.mac_addr = { FIXUP_UNDEFINED, CUS227_MAC0_OFFSET },
 };
 
-static struct gpio_led cus227_leds_gpio[] __initdata = {
-	{
-		.name		= "cus227:green:s3",
-		.gpio		= CUS227_GPIO_S3,
-		.active_low	= 1,
-	},
-	{
-		.name		= "cus227:green:s4",
-		.gpio		= CUS227_GPIO_S4,
-		.active_low	= 1,
-	},
-};
-
-static struct gpio_keys_button cus227_gpio_keys[] __initdata = {
-	{
-		.desc		= "WPS button",
-		.type		= EV_KEY,
-		.code		= KEY_WPS_BUTTON,
-		.debounce_interval = CUS227_KEYS_DEBOUNCE_INTERVAL,
-		.gpio		= CUS227_GPIO_S1,
-		.active_low	= 1,
-	},
-	{
-		.desc		= "s2",
-		.type		= EV_KEY,
-		.code		= BTN_2,
-		.debounce_interval = CUS227_KEYS_DEBOUNCE_INTERVAL,
-		.gpio		= CUS227_GPIO_S2,
-		.active_low	= 1,
-	},
+static struct of_device_id __initdata cus227_common_ids[] = {
+	{ .type = "soc", },
+	{ .compatible = "gpio-keys", },
+	{ .compatible = "gpio-leds", },
+	{},
 };
 
 /* Because CUS227 doesn't have a NOR flash on the SPI bus, we cannot
@@ -202,11 +179,8 @@
 
 static void __init cus227_setup(void)
 {
-	ath79_register_leds_gpio(-1, ARRAY_SIZE(cus227_leds_gpio),
-				 cus227_leds_gpio);
-	ath79_register_gpio_keys_polled(-1, CUS227_KEYS_POLL_INTERVAL,
-					ARRAY_SIZE(cus227_gpio_keys),
-					cus227_gpio_keys);
+	of_platform_bus_probe(NULL, cus227_common_ids, NULL);
+
 	ath79_register_usb();
 
 	ath79_register_nand();
@@ -226,6 +200,7 @@
 	/* Audio initialization: PCM/I2S and CODEC */
 	cus227_audio_setup();
 	ath79_audio_device_register();
+
 }
 MIPS_MACHINE(ATH79_MACH_CUS227, "CUS227", "Qualcomm Atheros CUS227",
 	     cus227_setup);
Index: linux-3.3.8/arch/mips/include/asm/mach-ath79/irq.h
===================================================================
--- linux-3.3.8.orig/arch/mips/include/asm/mach-ath79/irq.h	2013-02-19 15:43:59.707949529 -0800
+++ linux-3.3.8/arch/mips/include/asm/mach-ath79/irq.h	2013-02-19 15:44:00.963949584 -0800
@@ -10,7 +10,7 @@
 #define __ASM_MACH_ATH79_IRQ_H
 
 #define MIPS_CPU_IRQ_BASE	0
-#define NR_IRQS			51
+#define NR_IRQS			64
 
 #define ATH79_MISC_IRQ_BASE	8
 #define ATH79_MISC_IRQ_COUNT	32
@@ -48,6 +48,8 @@
 #define ATH79_MISC_IRQ_TIMER4	(ATH79_MISC_IRQ_BASE + 10)
 #define ATH79_MISC_IRQ_ETHSW	(ATH79_MISC_IRQ_BASE + 12)
 
+#define ATH79_GPIO_IRQ_BASE	(ATH79_MISC_IRQ_BASE + ATH79_MISC_IRQ_COUNT)
+
 #include_next <irq.h>
 
 #endif /* __ASM_MACH_ATH79_IRQ_H */
Index: linux-3.3.8/arch/mips/ath79/Kconfig
===================================================================
--- linux-3.3.8.orig/arch/mips/ath79/Kconfig	2013-02-19 15:44:00.947949584 -0800
+++ linux-3.3.8/arch/mips/ath79/Kconfig	2013-02-19 16:47:41.676118972 -0800
@@ -138,6 +138,7 @@
 	select ATH79_DEV_NAND
 	select ATH79_DEV_USB
 	select ATH79_DEV_WMAC
+	select USE_OF
 	help
 	  Say 'Y' here if you want your kernel to support the
 	  Qualcomm Atheros CUS227 board.
