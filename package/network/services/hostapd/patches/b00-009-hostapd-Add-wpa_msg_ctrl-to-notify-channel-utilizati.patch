From aa494783f6c8bacee3cb3da0f89158cb88276599 Mon Sep 17 00:00:00 2001
From: Bhagavathi Perumal S <bperumal@codeaurora.org>
Date: Thu, 19 Oct 2017 17:06:10 +0530
Subject: [PATCH] hostapd: Add wpa_msg_ctrl to notify channel utilization

This allows external user to get channel utilization value. And
reload the bss_load_update_timeout with bss_load_update_period in
update_channel_utilization timer and add beacon interval in status
command output, these help user to dynamically configure the
channel utilization update period.

Signed-off-by: Bhagavathi Perumal S <bperumal@codeaurora.org>
---
 hostapd/ctrl_iface.c             | 36 ++++++++++++++++++++++++++----------
 src/ap/beacon.c                  |  1 +
 src/ap/bss_load.c                |  6 ++++++
 src/ap/ctrl_iface_ap.c           |  6 ++++++
 src/ap/drv_callbacks.c           |  4 ++++
 src/common/ctrl_iface_common.c   | 33 +++++++++++++++++++++++++++++++--
 src/common/ctrl_iface_common.h   |  3 ++-
 src/common/wpa_ctrl.h            |  8 ++++++++
 wpa_supplicant/ctrl_iface_unix.c |  2 +-
 9 files changed, 85 insertions(+), 14 deletions(-)

--- a/hostapd/ctrl_iface.c
+++ b/hostapd/ctrl_iface.c
@@ -57,6 +57,7 @@
 #include "config_file.h"
 #include "ctrl_iface.h"
 #include "config_file.h"
+#include "common/wpa_ctrl.h"
 
 
 #define HOSTAPD_CLI_DUP_VALUE_MAX_LEN 256
@@ -79,9 +80,9 @@ static char *reload_opts = NULL;
 
 static int hostapd_ctrl_iface_attach(struct hostapd_data *hapd,
 				     struct sockaddr_storage *from,
-				     socklen_t fromlen)
+				     socklen_t fromlen, char *input)
 {
-	return ctrl_iface_attach(&hapd->ctrl_dst, from, fromlen);
+	return ctrl_iface_attach(&hapd->ctrl_dst, from, fromlen, input);
 }
 
 
@@ -2823,8 +2824,8 @@ static int hostapd_ctrl_iface_receive_pr
 		reply_len = hostapd_ctrl_iface_sta_next(hapd, buf + 9, reply,
 							reply_size);
 #endif
-	} else if (os_strcmp(buf, "ATTACH") == 0) {
-		if (hostapd_ctrl_iface_attach(hapd, from, fromlen))
+	} else if (os_strncmp(buf, "ATTACH", 6) == 0) {
+		if (hostapd_ctrl_iface_attach(hapd, from, fromlen, buf + 6))
 			reply_len = -1;
 	} else if (os_strcmp(buf, "DETACH") == 0) {
 		if (hostapd_ctrl_iface_detach(hapd, from, fromlen))
@@ -3586,9 +3587,9 @@ static int hostapd_ctrl_iface_remove(str
 
 static int hostapd_global_ctrl_iface_attach(struct hapd_interfaces *interfaces,
 					    struct sockaddr_storage *from,
-					    socklen_t fromlen)
+					    socklen_t fromlen, char *input)
 {
-	return ctrl_iface_attach(&interfaces->global_ctrl_dst, from, fromlen);
+	return ctrl_iface_attach(&interfaces->global_ctrl_dst, from, fromlen, input);
 }
 
 
@@ -3956,9 +3957,9 @@ static void hostapd_global_ctrl_iface_re
 	} else if (os_strncmp(buf, "REMOVE ", 7) == 0) {
 		if (hostapd_ctrl_iface_remove(interfaces, buf + 7) < 0)
 			reply_len = -1;
-	} else if (os_strcmp(buf, "ATTACH") == 0) {
+	} else if (os_strncmp(buf, "ATTACH", 6) == 0) {
 		if (hostapd_global_ctrl_iface_attach(interfaces, &from,
-						     fromlen))
+						     fromlen, buf + 6))
 			reply_len = -1;
 	} else if (os_strcmp(buf, "DETACH") == 0) {
 		if (hostapd_global_ctrl_iface_detach(interfaces, &from,
@@ -4273,6 +4274,20 @@ void hostapd_global_ctrl_iface_deinit(st
 		os_free(dst);
 }
 
+static int hostapd_ctrl_check_event_enabled(struct wpa_ctrl_dst *dst,
+					    const char *buf)
+{
+	/* Enabled bss load events based on user request.
+	 * Other Events as default enabled.
+	 */
+	if (str_starts(buf, AP_BSS_LOAD)) {
+		if (dst->events & WPA_EVENT_AP_BSS_LOAD)
+			return 1;
+		else
+			return 0;
+	}
+	return 1;
+}
 
 static void hostapd_ctrl_iface_send(struct hostapd_data *hapd, int level,
 				    enum wpa_msg_type type,
@@ -4308,7 +4323,8 @@ static void hostapd_ctrl_iface_send(stru
 
 	idx = 0;
 	dl_list_for_each_safe(dst, next, ctrl_dst, struct wpa_ctrl_dst, list) {
-		if (level >= dst->debug_level) {
+		if ((level >= dst->debug_level) &&
+		     hostapd_ctrl_check_event_enabled(dst, buf)) {
 			sockaddr_print(MSG_DEBUG, "CTRL_IFACE monitor send",
 				       &dst->addr, dst->addrlen);
 			msg.msg_name = &dst->addr;
--- a/src/ap/bss_load.c
+++ b/src/ap/bss_load.c
@@ -21,10 +21,16 @@ static void update_channel_utilization(v
 	struct hostapd_data *hapd = eloop_data;
 	unsigned int sec, usec;
 	int err;
+	int bss_load_update_period = hapd->conf->bss_load_update_period;
+	int beacon_int = hapd->iconf->beacon_int;
 
 	if (!(hapd->beacon_set_done && hapd->started))
 		return;
 
+	if (bss_load_update_period && beacon_int)
+		hapd->bss_load_update_timeout = bss_load_update_period *
+						beacon_int;
+
 	err = hostapd_drv_get_survey(hapd, hapd->iface->freq);
 	if (err) {
 		wpa_printf(MSG_ERROR, "BSS Load: Failed to get survey data");
--- a/src/ap/ctrl_iface_ap.c
+++ b/src/ap/ctrl_iface_ap.c
@@ -730,6 +730,12 @@ int hostapd_ctrl_iface_status(struct hos
 			return len;
 		len += ret;
 	}
+	ret = os_snprintf(buf + len, buflen - len,
+			  "beacon_int=%d\n",
+			  hapd->iconf->beacon_int);
+	if(os_snprintf_error(buflen - len, ret))
+		return len;
+	len += ret;
 
 	for (i = 0; i < mode->num_channels; i++){
 		if (mode->channels[i].freq == iface->freq) {
--- a/src/ap/drv_callbacks.c
+++ b/src/ap/drv_callbacks.c
@@ -1289,6 +1289,10 @@ static void hostapd_single_channel_get_s
 		iface->channel_utilization = dividend * 255 / divisor;
 		wpa_printf(MSG_DEBUG, "Channel Utilization: %d",
 			   iface->channel_utilization);
+		wpa_msg_ctrl(iface->bss[0]->msg_ctx, MSG_INFO, AP_BSS_LOAD
+			     "freq=%d chan_util=%u",
+			     survey->freq,
+			     iface->channel_utilization);
 	}
 	iface->last_channel_time = survey->channel_time;
 	iface->last_channel_time_busy = survey->channel_time_busy;
--- a/src/common/ctrl_iface_common.c
+++ b/src/common/ctrl_iface_common.c
@@ -13,6 +13,7 @@
 
 #include "utils/common.h"
 #include "ctrl_iface_common.h"
+#include "wpa_ctrl.h"
 
 static int sockaddr_compare(struct sockaddr_storage *a, socklen_t a_len,
 			    struct sockaddr_storage *b, socklen_t b_len)
@@ -112,20 +113,48 @@ void sockaddr_print(int level, const cha
 	}
 }
 
+static int ctrl_set_events(struct wpa_ctrl_dst *dst, char *input)
+{
+	char *value;
+	int val;
+	if((input == NULL) || (*input == '\0'))
+		return -1;
+	input++;
+	value = os_strchr(input, '=');
+	if (value == NULL)
+		return -1;
+	*value++ = '\0';
+	val = atoi(value);
+	if (val < 0 || val > 1)
+		return -1;
+	if(os_strncmp(input, "bss_load_events", 15) == 0) {
+		if(val)
+			dst->events |= WPA_EVENT_AP_BSS_LOAD;
+		else
+			dst->events &= ~WPA_EVENT_AP_BSS_LOAD;
+	}
+	return 0;
+}
 
 int ctrl_iface_attach(struct dl_list *ctrl_dst, struct sockaddr_storage *from,
-		      socklen_t fromlen)
+		      socklen_t fromlen, char *input)
 {
 	struct wpa_ctrl_dst *dst;
 
+	dl_list_for_each(dst, ctrl_dst, struct wpa_ctrl_dst, list) {
+		if (!sockaddr_compare(from, fromlen,
+				      &dst->addr, dst->addrlen)) {
+			return ctrl_set_events(dst, input);
+		}
+	}
 	dst = os_zalloc(sizeof(*dst));
 	if (dst == NULL)
 		return -1;
 	os_memcpy(&dst->addr, from, fromlen);
 	dst->addrlen = fromlen;
 	dst->debug_level = MSG_INFO;
+	ctrl_set_events(dst, input);
 	dl_list_add(ctrl_dst, &dst->list);
-
 	sockaddr_print(MSG_DEBUG, "CTRL_IFACE monitor attached", from, fromlen);
 	return 0;
 }
--- a/src/common/ctrl_iface_common.h
+++ b/src/common/ctrl_iface_common.h
@@ -23,13 +23,14 @@ struct wpa_ctrl_dst {
 	socklen_t addrlen;
 	int debug_level;
 	int errors;
+	u32 events;
 };
 
 void sockaddr_print(int level, const char *msg, struct sockaddr_storage *sock,
 		    socklen_t socklen);
 
 int ctrl_iface_attach(struct dl_list *ctrl_dst, struct sockaddr_storage *from,
-		       socklen_t fromlen);
+		       socklen_t fromlen, char *input);
 int ctrl_iface_detach(struct dl_list *ctrl_dst, struct sockaddr_storage *from,
 		      socklen_t fromlen);
 int ctrl_iface_level(struct dl_list *ctrl_dst, struct sockaddr_storage *from,
--- a/src/common/wpa_ctrl.h
+++ b/src/common/wpa_ctrl.h
@@ -332,6 +332,11 @@ extern "C" {
 #define STA_RX_NSS_MODIFIED    "STA-RX-NSS-MODIFIED "
 #define STA_SMPS_MODE_MODIFIED	"STA-SMPS-MODE-MODIFIED "
 
+/*bss load notification; parameters: freq=<freq> chan_util=<channel utilization>
+ */
+#define AP_BSS_LOAD "AP-BSS-LOAD "
+
+
 /* BSS command information masks */
 
 #define WPA_BSS_MASK_ALL		0xFFFDFFFF
@@ -361,6 +366,9 @@ extern "C" {
 #define WPA_BSS_MASK_BEACON_IE		BIT(23)
 #define WPA_BSS_MASK_FILS_INDICATION	BIT(24)
 
+/* Events enable bits*/
+
+#define WPA_EVENT_AP_BSS_LOAD BIT(1)
 
 /* VENDOR_ELEM_* frame id values */
 enum wpa_vendor_elem_frame {
--- a/wpa_supplicant/ctrl_iface_unix.c
+++ b/wpa_supplicant/ctrl_iface_unix.c
@@ -103,7 +103,7 @@ static int wpa_supplicant_ctrl_iface_att
 					    struct sockaddr_storage *from,
 					    socklen_t fromlen, int global)
 {
-	return ctrl_iface_attach(ctrl_dst, from, fromlen);
+	return ctrl_iface_attach(ctrl_dst, from, fromlen, NULL);
 }
 
 
