Index: busybox-1.28.3/networking/arping.c
===================================================================
--- busybox-1.28.3.orig/networking/arping.c	2019-11-23 15:47:43.314696293 -0800
+++ busybox-1.28.3/networking/arping.c	2019-11-23 15:48:18.711686798 -0800
@@ -30,6 +30,7 @@
 //usage:     "\n	-c N		Stop after sending N ARP requests"
 //usage:     "\n	-w TIMEOUT	Seconds to wait for ARP reply"
 //usage:     "\n	-I IFACE	Interface to use (default eth0)"
+//usage:     "\n	-B IFACE	Bridge interface use for receive (default none)"
 //usage:     "\n	-s SRC_IP	Sender IP address"
 //usage:     "\n	DST_IP		Target IP address"
 
@@ -58,8 +59,10 @@
 	struct in_addr src;
 	struct in_addr dst;
 	struct sockaddr_ll me;
+	struct sockaddr_ll me_br;   // bridge interface
 	struct sockaddr_ll he;
 	int sock_fd;
+	int sock_br;  // socket for receiving on bridge
 
 	int count; // = -1;
 	unsigned last;
@@ -76,8 +79,10 @@
 #define src        (G.src       )
 #define dst        (G.dst       )
 #define me         (G.me        )
+#define me_br      (G.me_br     )
 #define he         (G.he        )
 #define sock_fd    (G.sock_fd   )
+#define sock_br    (G.sock_br   )
 #define count      (G.count     )
 #define last       (G.last      )
 #define timeout_us (G.timeout_us)
@@ -282,10 +287,52 @@
 	}
 }
 
+static int init_sock_ll(int sock, const char *device,
+                        struct sockaddr_ll *addr,
+                        const char *err_str) {
+	struct ifreq ifr;
+
+	memset(&ifr, 0, sizeof(ifr));
+	strncpy_IFNAMSIZ(ifr.ifr_name, device);
+	/* We use ifr.ifr_name in error msg so that problem
+	 * with truncated name will be visible */
+	ioctl_or_perror_and_die(sock, SIOCGIFINDEX, &ifr, err_str, "not found");
+	addr->sll_ifindex = ifr.ifr_ifindex;
+	addr->sll_family = AF_PACKET;
+	addr->sll_protocol = htons(ETH_P_ARP);
+
+	xbind(sock, (struct sockaddr *) addr, sizeof(*addr));
+
+	{
+		socklen_t alen = sizeof(*addr);
+		getsockname(sock_fd, (struct sockaddr *) addr, &alen);
+		//never happens:
+		//if (getsockname(sock_fd, (struct sockaddr *) &me, &alen) == -1)
+		//	bb_perror_msg_and_die("getsockname");
+	}
+	if (addr->sll_halen == 0) {
+		bb_error_msg(err_str, "is not ARPable (no ll address)");
+		return (option_mask32 & DAD ? 0 : 2);
+	}
+
+	xioctl(sock, SIOCGIFFLAGS, (char *) &ifr);
+
+	if (!(ifr.ifr_flags & IFF_UP)) {
+		bb_error_msg_and_die(err_str, "is down");
+	}
+	if (ifr.ifr_flags & (IFF_NOARP | IFF_LOOPBACK)) {
+		bb_error_msg(err_str, "is not ARPable");
+		return -1;
+	}
+
+	return 0;
+}
+
 int arping_main(int argc, char **argv) MAIN_EXTERNALLY_VISIBLE;
 int arping_main(int argc UNUSED_PARAM, char **argv)
 {
 	const char *device = "eth0";
+	const char *bridge_device = NULL;
 	char *source = NULL;
 	char *target;
 	unsigned char *packet;
@@ -306,8 +353,8 @@
 		/* Dad also sets quit_on_reply.
 		 * Advert also sets unsolicited.
 		 */
-		opt = getopt32(argv, "^" "DUAqfbc:+w:I:s:" "\0" "=1:Df:AU",
-				&count, &str_timeout, &device, &source
+		opt = getopt32(argv, "^" "DUAqfbc:+w:I:s:B:" "\0" "=1:Df:AU",
+				&count, &str_timeout, &device, &source, &bridge_device
 		);
 		if (opt & 0x80) /* -w: timeout */
 			timeout_us = xatou_range(str_timeout, 0, INT_MAX/2000000) * 1000000 + 500000;
@@ -319,23 +366,15 @@
 	err_str = xasprintf("interface %s %%s", device);
 	xfunc_error_retval = 2;
 
-	{
-		struct ifreq ifr;
-
-		memset(&ifr, 0, sizeof(ifr));
-		strncpy_IFNAMSIZ(ifr.ifr_name, device);
-		/* We use ifr.ifr_name in error msg so that problem
-		 * with truncated name will be visible */
-		ioctl_or_perror_and_die(sock_fd, SIOCGIFINDEX, &ifr, err_str, "not found");
-		me.sll_ifindex = ifr.ifr_ifindex;
+	if (init_sock_ll(sock_fd, device, &me, err_str) == -1) {
+		return (option_mask32 & DAD ? 0 : 2);
+	}
 
-		xioctl(sock_fd, SIOCGIFFLAGS, (char *) &ifr);
+	if (bridge_device) {
+		sock_br = xsocket(AF_PACKET, SOCK_DGRAM, 0);
 
-		if (!(ifr.ifr_flags & IFF_UP)) {
-			bb_error_msg_and_die(err_str, "is down");
-		}
-		if (ifr.ifr_flags & (IFF_NOARP | IFF_LOOPBACK)) {
-			bb_error_msg(err_str, "is not ARPable");
+		err_str = xasprintf("interface %s %%s", bridge_device);
+		if (init_sock_ll(sock_br, bridge_device, &me_br, err_str) == -1) {
 			return (option_mask32 & DAD ? 0 : 2);
 		}
 	}
@@ -387,22 +426,6 @@
 		close(probe_fd);
 	}
 
-	me.sll_family = AF_PACKET;
-	//me.sll_ifindex = ifindex; - done before
-	me.sll_protocol = htons(ETH_P_ARP);
-	xbind(sock_fd, (struct sockaddr *) &me, sizeof(me));
-
-	{
-		socklen_t alen = sizeof(me);
-		getsockname(sock_fd, (struct sockaddr *) &me, &alen);
-		//never happens:
-		//if (getsockname(sock_fd, (struct sockaddr *) &me, &alen) == -1)
-		//	bb_perror_msg_and_die("getsockname");
-	}
-	if (me.sll_halen == 0) {
-		bb_error_msg(err_str, "is not ARPable (no ll address)");
-		return (option_mask32 & DAD ? 0 : 2);
-	}
 	he = me;
 	memset(he.sll_addr, -1, he.sll_halen);
 
@@ -424,7 +447,8 @@
 		socklen_t alen = sizeof(from);
 		int cc;
 
-		cc = recvfrom(sock_fd, packet, 4096, 0, (struct sockaddr *) &from, &alen);
+		cc = recvfrom(bridge_device ? sock_br : sock_fd, packet, 4096,
+		              0, (struct sockaddr *) &from, &alen);
 		if (cc < 0) {
 			bb_perror_msg("recvfrom");
 			continue;
