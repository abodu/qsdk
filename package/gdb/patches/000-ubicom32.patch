--- a/bfd/Makefile.am
+++ b/bfd/Makefile.am
@@ -114,6 +114,7 @@ ALL_MACHINES = \
 	cpu-tic4x.lo \
 	cpu-tic54x.lo \
 	cpu-tic80.lo \
+	cpu-ubicom32.lo \
 	cpu-v850.lo \
 	cpu-vax.lo \
 	cpu-we32k.lo \
@@ -180,6 +181,7 @@ ALL_MACHINES_CFILES = \
 	cpu-tic4x.c \
 	cpu-tic54x.c \
 	cpu-tic80.c \
+	cpu-ubicom32.c \
 	cpu-v850.c \
 	cpu-vax.c \
 	cpu-we32k.c \
@@ -292,6 +294,7 @@ BFD32_BACKENDS = \
 	elfxx-sparc.lo \
 	elf32-sparc.lo \
 	elf32-spu.lo \
+	elf32-ubicom32.lo \
 	elf32-v850.lo \
 	elf32-vax.lo \
 	elf32-xstormy16.lo \
@@ -473,6 +476,7 @@ BFD32_BACKENDS_CFILES = \
 	elfxx-sparc.c \
 	elf32-sparc.c \
 	elf32-spu.c \
+	elf32-ubicom32.c \
 	elf32-v850.c \
 	elf32-vax.c \
 	elf32-xstormy16.c \
@@ -1130,6 +1134,7 @@ cpu-tic30.lo: cpu-tic30.c $(INCDIR)/file
 cpu-tic4x.lo: cpu-tic4x.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
 cpu-tic54x.lo: cpu-tic54x.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
 cpu-tic80.lo: cpu-tic80.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
+cpu-ubicom32.lo: cpu-ubicom32.c $(INCDIR)/filenames.h
 cpu-v850.lo: cpu-v850.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
   $(INCDIR)/safe-ctype.h
 cpu-vax.lo: cpu-vax.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
@@ -1556,6 +1561,10 @@ elf32-spu.lo: elf32-spu.c $(INCDIR)/file
   $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
   $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/spu.h \
   $(INCDIR)/elf/reloc-macros.h elf32-spu.h elf32-target.h
+elf32-ubicom32.lo: elf32-ubicom32.c $(INCDIR)/filenames.h elf-bfd.h \
+  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
+  $(INCDIR)/bfdlink.h $(INCDIR)/elf/ubicom32.h $(INCDIR)/elf/reloc-macros.h \
+  elf32-target.h
 elf32-v850.lo: elf32-v850.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
   $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
   $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/v850.h \
--- a/bfd/Makefile.in
+++ b/bfd/Makefile.in
@@ -364,6 +364,7 @@ ALL_MACHINES = \
 	cpu-tic4x.lo \
 	cpu-tic54x.lo \
 	cpu-tic80.lo \
+	cpu-ubicom32.lo \
 	cpu-v850.lo \
 	cpu-vax.lo \
 	cpu-we32k.lo \
@@ -430,6 +431,7 @@ ALL_MACHINES_CFILES = \
 	cpu-tic4x.c \
 	cpu-tic54x.c \
 	cpu-tic80.c \
+	cpu-ubicom32.c \
 	cpu-v850.c \
 	cpu-vax.c \
 	cpu-we32k.c \
@@ -543,6 +545,7 @@ BFD32_BACKENDS = \
 	elfxx-sparc.lo \
 	elf32-sparc.lo \
 	elf32-spu.lo \
+	elf32-ubicom32.lo \
 	elf32-v850.lo \
 	elf32-vax.lo \
 	elf32-xstormy16.lo \
@@ -724,6 +727,7 @@ BFD32_BACKENDS_CFILES = \
 	elfxx-sparc.c \
 	elf32-sparc.c \
 	elf32-spu.c \
+	elf32-ubicom32.c \
 	elf32-v850.c \
 	elf32-vax.c \
 	elf32-xstormy16.c \
@@ -1711,6 +1715,7 @@ cpu-tic30.lo: cpu-tic30.c $(INCDIR)/file
 cpu-tic4x.lo: cpu-tic4x.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
 cpu-tic54x.lo: cpu-tic54x.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
 cpu-tic80.lo: cpu-tic80.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
+cpu-ubicom32.lo: cpu-ubicom32.c $(INCDIR)/filenames.h
 cpu-v850.lo: cpu-v850.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h \
   $(INCDIR)/safe-ctype.h
 cpu-vax.lo: cpu-vax.c $(INCDIR)/filenames.h $(INCDIR)/hashtab.h
@@ -2137,6 +2142,10 @@ elf32-spu.lo: elf32-spu.c $(INCDIR)/file
   $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
   $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/spu.h \
   $(INCDIR)/elf/reloc-macros.h elf32-spu.h elf32-target.h
+elf32-ubicom32.lo: elf32-ubicom32.c $(INCDIR)/filenames.h elf-bfd.h \
+  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
+  $(INCDIR)/bfdlink.h $(INCDIR)/elf/ubicom32.h $(INCDIR)/elf/reloc-macros.h \
+  elf32-target.h
 elf32-v850.lo: elf32-v850.c $(INCDIR)/filenames.h $(INCDIR)/bfdlink.h \
   $(INCDIR)/hashtab.h elf-bfd.h $(INCDIR)/elf/common.h \
   $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/elf/v850.h \
--- a/bfd/archures.c
+++ b/bfd/archures.c
@@ -370,6 +370,12 @@ DESCRIPTION
 .  bfd_arch_score,     {* Sunplus score *} 
 .  bfd_arch_openrisc,  {* OpenRISC *}
 .  bfd_arch_mmix,      {* Donald Knuth's educational processor.  *}
+.  bfd_arch_ubicom32,
+.#define bfd_mach_ubicom32	    0
+.#define bfd_mach_ubicom32dsp	    1
+.#define bfd_mach_ubicom32ver4      2
+.#define bfd_mach_ubicom32posix     3
+.#define bfd_mach_ubicom32ver5      4
 .  bfd_arch_xstormy16,
 .#define bfd_mach_xstormy16	1
 .  bfd_arch_msp430,    {* Texas Instruments MSP430 architecture.  *}
@@ -496,6 +502,7 @@ extern const bfd_arch_info_type bfd_tic3
 extern const bfd_arch_info_type bfd_tic4x_arch;
 extern const bfd_arch_info_type bfd_tic54x_arch;
 extern const bfd_arch_info_type bfd_tic80_arch;
+extern const bfd_arch_info_type bfd_ubicom32_arch;
 extern const bfd_arch_info_type bfd_v850_arch;
 extern const bfd_arch_info_type bfd_vax_arch;
 extern const bfd_arch_info_type bfd_we32k_arch;
@@ -565,6 +572,7 @@ static const bfd_arch_info_type * const 
     &bfd_tic4x_arch,
     &bfd_tic54x_arch,
     &bfd_tic80_arch,
+    &bfd_ubicom32_arch,
     &bfd_v850_arch,
     &bfd_vax_arch,
     &bfd_w65_arch,
--- a/bfd/bfd-in2.h
+++ b/bfd/bfd-in2.h
@@ -2047,6 +2047,12 @@ enum bfd_architecture
   bfd_arch_score,     /* Sunplus score */ 
   bfd_arch_openrisc,  /* OpenRISC */
   bfd_arch_mmix,      /* Donald Knuth's educational processor.  */
+  bfd_arch_ubicom32,
+#define bfd_mach_ubicom32          0
+#define bfd_mach_ubicom32dsp       1
+#define bfd_mach_ubicom32ver4      2
+#define bfd_mach_ubicom32posix     3
+#define bfd_mach_ubicom32ver5      4
   bfd_arch_xstormy16,
 #define bfd_mach_xstormy16     1
   bfd_arch_msp430,    /* Texas Instruments MSP430 architecture.  */
@@ -3948,6 +3954,41 @@ instructions  */
   BFD_RELOC_VPE4KMATH_DATA,
   BFD_RELOC_VPE4KMATH_INSN,
 
+/* Ubicom UBICOM32 Relocations.  */
+  BFD_RELOC_UBICOM32_21_PCREL,
+  BFD_RELOC_UBICOM32_24_PCREL,
+  BFD_RELOC_UBICOM32_HI24,
+  BFD_RELOC_UBICOM32_LO7_S,
+  BFD_RELOC_UBICOM32_LO7_2_S,
+  BFD_RELOC_UBICOM32_LO7_4_S,
+  BFD_RELOC_UBICOM32_LO7_D,
+  BFD_RELOC_UBICOM32_LO7_2_D,
+  BFD_RELOC_UBICOM32_LO7_4_D,
+  BFD_RELOC_UBICOM32_LO7_CALLI,
+  BFD_RELOC_UBICOM32_LO16_CALLI,
+  BFD_RELOC_UBICOM32_GOT_HI24,
+  BFD_RELOC_UBICOM32_GOT_LO7_S,
+  BFD_RELOC_UBICOM32_GOT_LO7_2_S,
+  BFD_RELOC_UBICOM32_GOT_LO7_4_S,
+  BFD_RELOC_UBICOM32_GOT_LO7_D,
+  BFD_RELOC_UBICOM32_GOT_LO7_2_D,
+  BFD_RELOC_UBICOM32_GOT_LO7_4_D,
+  BFD_RELOC_UBICOM32_FUNCDESC_GOT_HI24,
+  BFD_RELOC_UBICOM32_FUNCDESC_GOT_LO7_S,
+  BFD_RELOC_UBICOM32_FUNCDESC_GOT_LO7_2_S,
+  BFD_RELOC_UBICOM32_FUNCDESC_GOT_LO7_4_S,
+  BFD_RELOC_UBICOM32_FUNCDESC_GOT_LO7_D,
+  BFD_RELOC_UBICOM32_FUNCDESC_GOT_LO7_2_D,
+  BFD_RELOC_UBICOM32_FUNCDESC_GOT_LO7_4_D,
+  BFD_RELOC_UBICOM32_GOT_LO7_CALLI,
+  BFD_RELOC_UBICOM32_FUNCDESC_GOT_LO7_CALLI,
+  BFD_RELOC_UBICOM32_FUNCDESC_VALUE,
+  BFD_RELOC_UBICOM32_FUNCDESC,
+  BFD_RELOC_UBICOM32_GOTOFFSET_LO,
+  BFD_RELOC_UBICOM32_GOTOFFSET_HI,
+  BFD_RELOC_UBICOM32_FUNCDESC_GOTOFFSET_LO,
+  BFD_RELOC_UBICOM32_FUNCDESC_GOTOFFSET_HI,
+
 /* These two relocations are used by the linker to determine which of
 the entries in a C++ virtual function table are actually used.  When
 the --gc-sections option is given, the linker will zero out the entries
--- a/bfd/config.bfd
+++ b/bfd/config.bfd
@@ -1423,6 +1423,11 @@ case "${targ}" in
     targ_underscore=yes
     ;;
 
+  ubicom32-*)
+    targ_defvec=bfd_elf32_ubicom32_vec
+    targ_selvecs=bfd_elf32_ubicom32fdpic_vec
+    ;;
+
   v850-*-*)
     targ_defvec=bfd_elf32_v850_vec
     ;;
--- a/bfd/configure
+++ b/bfd/configure
@@ -19132,6 +19132,8 @@ do
     bfd_elf32_tradbigmips_vec)  tb="$tb elf32-mips.lo elfxx-mips.lo elf-vxworks.lo elf32.lo $elf ecofflink.lo" ;;
     bfd_elf32_tradlittlemips_vec) tb="$tb elf32-mips.lo elfxx-mips.lo elf-vxworks.lo elf32.lo $elf ecofflink.lo" ;;
     bfd_elf32_us_cris_vec)	tb="$tb elf32-cris.lo elf32.lo $elf" ;;
+    bfd_elf32_ubicom32_vec)	tb="$tb elf32-ubicom32.lo elf32.lo $elf" ;;
+    bfd_elf32_ubicom32fdpic_vec)	tb="$tb elf32-ubicom32.lo elf32.lo $elf" ;;
     bfd_elf32_v850_vec)		tb="$tb elf32-v850.lo elf32.lo $elf" ;;
     bfd_elf32_vax_vec)		tb="$tb elf32-vax.lo elf32.lo $elf" ;;
     bfd_elf32_xstormy16_vec)	tb="$tb elf32-xstormy16.lo elf32.lo $elf" ;;
--- a/bfd/configure.in
+++ b/bfd/configure.in
@@ -741,6 +741,8 @@ do
     bfd_elf32_tradbigmips_vec)  tb="$tb elf32-mips.lo elfxx-mips.lo elf-vxworks.lo elf32.lo $elf ecofflink.lo" ;;
     bfd_elf32_tradlittlemips_vec) tb="$tb elf32-mips.lo elfxx-mips.lo elf-vxworks.lo elf32.lo $elf ecofflink.lo" ;;
     bfd_elf32_us_cris_vec)	tb="$tb elf32-cris.lo elf32.lo $elf" ;;
+    bfd_elf32_ubicom32_vec)	tb="$tb elf32-ubicom32.lo elf32.lo $elf" ;;
+    bfd_elf32_ubicom32fdpic_vec) tb="$tb elf32-ubicom32.lo elf32.lo $elf" ;;
     bfd_elf32_v850_vec)		tb="$tb elf32-v850.lo elf32.lo $elf" ;;
     bfd_elf32_vax_vec)		tb="$tb elf32-vax.lo elf32.lo $elf" ;;
     bfd_elf32_xstormy16_vec)	tb="$tb elf32-xstormy16.lo elf32.lo $elf" ;;
--- /dev/null
+++ b/bfd/cpu-ubicom32.c
@@ -0,0 +1,142 @@
+/* BFD support for the Ubicom32 processor.
+   Copyright (C) 2000 Free Software Foundation, Inc.
+
+This file is part of BFD, the Binary File Descriptor library.
+
+This program is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2 of the License, or
+(at your option) any later version.
+
+This program is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with this program; if not, write to the Free Software
+Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
+
+#include "bfd.h"
+#include "sysdep.h"
+#include "libbfd.h"
+
+static const bfd_arch_info_type *
+ubicom32_arch_compatible (const bfd_arch_info_type *a,
+			const bfd_arch_info_type *b)
+{
+  if (a->arch != b->arch)
+    return NULL;
+
+  if (a->bits_per_word != b->bits_per_word)
+    return NULL;
+
+  if (a->mach > b->mach)
+    return a;
+
+  if (b->mach > a->mach)
+    return b;
+
+  if (b->mach == bfd_mach_ubicom32ver4 &&
+      strcmp("ubicom32uclinux", b->printable_name) == 0) {
+	  return b;
+  }
+  
+  return a;
+}
+
+const bfd_arch_info_type bfd_ubicom32_ver5_arch =
+{
+  32,				/* bits per word */
+  32,				/* bits per address */
+  8,				/* bits per byte */
+  bfd_arch_ubicom32,		/* architecture */
+  bfd_mach_ubicom32ver5,	/* machine */
+  "ubicom32",			/* architecture name */
+  "ubicom32ver5",		/* printable name */
+  3,				/* section align power */
+  FALSE,			/* the default ? */
+  ubicom32_arch_compatible,	/* architecture comparison fn */
+  bfd_default_scan,		/* string to architecture convert fn */
+  NULL				/* next in list */
+};
+
+const bfd_arch_info_type bfd_ubicom32_uclinux_arch =
+{
+  32,				/* bits per word */
+  32,				/* bits per address */
+  8,				/* bits per byte */
+  bfd_arch_ubicom32,		/* architecture */
+  bfd_mach_ubicom32ver4,	/* machine */
+  "ubicom32",			/* architecture name */
+  "ubicom32uclinux",		/* printable name */
+  3,				/* section align power */
+  FALSE,			/* the default ? */
+  ubicom32_arch_compatible,	/* architecture comparison fn */
+  bfd_default_scan,		/* string to architecture convert fn */
+  &bfd_ubicom32_ver5_arch	/* next in list */
+};
+
+const bfd_arch_info_type bfd_ubicom32_posix_arch =
+{
+  32,				/* bits per word */
+  32,				/* bits per address */
+  8,				/* bits per byte */
+  bfd_arch_ubicom32,		/* architecture */
+  bfd_mach_ubicom32ver4,	/* machine */
+  "ubicom32",			/* architecture name */
+  "ubicom32posix",		/* printable name */
+  3,			        /* section align power */
+  FALSE,			/* the default ? */
+  bfd_default_compatible,	/* architecture comparison fn */
+  bfd_default_scan,		/* string to architecture convert fn */
+  &bfd_ubicom32_uclinux_arch,	/* next in list */
+};
+
+const bfd_arch_info_type bfd_ubicom32_ver4_arch =
+{
+  32,				/* bits per word */
+  32,				/* bits per address */
+  8,				/* bits per byte */
+  bfd_arch_ubicom32,		/* architecture */
+  bfd_mach_ubicom32ver4,	/* machine */
+  "ubicom32",			/* architecture name */
+  "ubicom32ver4",		/* printable name */
+  3,				/* section align power */
+  FALSE,			/* the default ? */
+  ubicom32_arch_compatible,	/* architecture comparison fn */
+  bfd_default_scan,		/* string to architecture convert fn */
+  &bfd_ubicom32_posix_arch	/* next in list */
+};
+
+const bfd_arch_info_type bfd_ubicom32_nonext_arch =
+{
+  32,				/* bits per word */
+  32,				/* bits per address */
+  8,				/* bits per byte */
+  bfd_arch_ubicom32,		/* architecture */
+  bfd_mach_ubicom32dsp,		/* machine */
+  "ubicom32",			/* architecture name */
+  "ubicom32dsp",		/* printable name */
+  3,				/* section align power */
+  FALSE,			/* the default ? */
+  bfd_default_compatible,	/* architecture comparison fn */
+  bfd_default_scan,		/* string to architecture convert fn */
+  & bfd_ubicom32_ver4_arch	/* next in list */
+};
+
+const bfd_arch_info_type bfd_ubicom32_arch =
+{
+  32,				/* bits per word */
+  32,				/* bits per address */
+  8,				/* bits per byte */
+  bfd_arch_ubicom32,		/* architecture */
+  bfd_mach_ubicom32,		/* machine */
+  "ubicom32",			/* architecture name */
+  "ubicom32",			/* printable name */
+  3,				/* section align power */
+  TRUE,				/* the default ? */
+  bfd_default_compatible,	/* architecture comparison fn */
+  bfd_default_scan,		/* string to architecture convert fn */
+  & bfd_ubicom32_nonext_arch	/* next in list */
+};
--- a/bfd/doc/archures.texi
+++ b/bfd/doc/archures.texi
@@ -302,6 +302,11 @@ enum bfd_architecture
   bfd_arch_ip2k,      /* Ubicom IP2K microcontrollers. */
 #define bfd_mach_ip2022        1
 #define bfd_mach_ip2022ext     2
+  bfd_arch_ubicom32,
+#define bfd_mach_ubicom32          0
+#define bfd_mach_ubicom32dsp       1
+#define bfd_mach_ubicom32ver4      2
+#define bfd_mach_ubicom32posix     3
  bfd_arch_iq2000,     /* Vitesse IQ2000.  */
 #define bfd_mach_iq2000        1
 #define bfd_mach_iq10          2
--- /dev/null
+++ b/bfd/elf32-ubicom32.c
@@ -0,0 +1,5046 @@
+/* Ubicom32 specific support for 32-bit ELF
+   Copyright 2000 Free Software Foundation, Inc.
+
+This file is part of BFD, the Binary File Descriptor library.
+
+This program is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2 of the License, or
+(at your option) any later version.
+
+This program is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with this program; if not, write to the Free Software
+Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
+
+#include <string.h>
+#include "bfd.h"
+#include "sysdep.h"
+#include "libbfd.h"
+#include "elf-bfd.h"
+#include "elf/ubicom32.h"
+#include "elf/dwarf2.h"
+
+/* Call offset = signed 24bit word offset
+   => 26bit signed byte offset.  */
+#define UBICOM32_CALL_MAX_POS_OFFS ((1 << 25) - 1)
+#define UBICOM32_CALL_MAX_NEG_OFFS (-(1 << 25))
+
+#define UNDEFINED_SYMBOL (~(bfd_vma)0)
+#define BASEADDR(SEC) ((SEC)->output_section->vma + (SEC)->output_offset)
+
+#if 0
+#define DPRINTF(fmt, ...) { printf("DBG %4d:"  fmt, __LINE__, __VA_ARGS__); fflush(stdout); }
+#else
+#define DPRINTF(fmt, ...) {}
+#endif
+struct debugLineInfo {
+  unsigned int startOffset;
+  unsigned int length;
+  char *sectionName;
+  unsigned int startRelocIndex;
+  unsigned int endRelocIndex;
+  unsigned int discard;
+};
+
+struct debugLineInfoHeader {
+  unsigned int numEntries;
+  struct debugLineInfo linfo[1];
+};
+
+/* we want RELA relocations, not REL */
+#undef USE_REL
+#define USE_RELA
+
+static bfd_reloc_status_type ubicom32_elf_generic_reloc
+  PARAMS ((bfd *abfd, arelent *reloc_entry, asymbol *symbol, PTR data,
+	   asection *input_section, bfd *output_bfd, char **error_message));
+static bfd_reloc_status_type ubicom32_elf_relocate_hi16
+  PARAMS ((bfd *,  Elf_Internal_Rela *, bfd_byte *, bfd_vma));
+static bfd_reloc_status_type ubicom32_elf_relocate_lo16
+  PARAMS ((bfd *,  Elf_Internal_Rela *, bfd_byte *, bfd_vma));
+static bfd_reloc_status_type ubicom32_elf_relocate_hi24
+  PARAMS ((bfd *,  Elf_Internal_Rela *,   bfd_byte *, bfd_vma));
+static bfd_reloc_status_type ubicom32_elf_relocate_lo7_s
+  PARAMS ((bfd *,  Elf_Internal_Rela *,   bfd_byte *, bfd_vma));
+static bfd_reloc_status_type ubicom32_elf_relocate_lo7_2_s
+  PARAMS ((bfd *,  Elf_Internal_Rela *,   bfd_byte *, bfd_vma));
+static bfd_reloc_status_type ubicom32_elf_relocate_lo7_4_s
+  PARAMS ((bfd *,  Elf_Internal_Rela *,   bfd_byte *, bfd_vma));
+static bfd_reloc_status_type ubicom32_elf_relocate_lo7_d
+  PARAMS ((bfd *,  Elf_Internal_Rela *,   bfd_byte *, bfd_vma));
+static bfd_reloc_status_type ubicom32_elf_relocate_lo7_2_d
+  PARAMS ((bfd *,  Elf_Internal_Rela *,   bfd_byte *, bfd_vma));
+static bfd_reloc_status_type ubicom32_elf_relocate_lo7_4_d
+  PARAMS ((bfd *,  Elf_Internal_Rela *,   bfd_byte *, bfd_vma));
+static bfd_reloc_status_type ubicom32_elf_relocate_pcrel24
+  PARAMS ((bfd *, asection *, Elf_Internal_Rela *, bfd_byte *, bfd_vma));
+static bfd_reloc_status_type ubicom32_elf_relocate_gotoffset_lo
+  PARAMS ((bfd *, asection *, Elf_Internal_Rela *, bfd_byte *, bfd_vma));
+static bfd_reloc_status_type ubicom32_elf_relocate_funcdesc_gotoffset_lo
+  PARAMS ((bfd *, asection *, Elf_Internal_Rela *, bfd_byte *, bfd_vma));
+
+#if 0
+static bfd_reloc_status_type ubicom32_elf_relocate_funcdesc
+  PARAMS ((bfd *, asection *, Elf_Internal_Rela *, bfd_byte *, bfd_vma));
+#endif
+
+static bfd_reloc_status_type ubicom32_elf_relocate_lo_calli
+  PARAMS ((bfd *,  Elf_Internal_Rela *,   bfd_byte *, bfd_vma, int));
+
+static void ubicom32_info_to_howto_rela
+  PARAMS ((bfd *, arelent *, Elf_Internal_Rela *));
+
+static reloc_howto_type * ubicom32_reloc_type_lookup
+  PARAMS ((bfd *abfd, bfd_reloc_code_real_type code));
+
+static bfd_vma symbol_value
+  PARAMS ((bfd *, Elf_Internal_Rela *));
+static Elf_Internal_Shdr *file_symtab_hdr
+  PARAMS ((bfd *));
+static Elf_Internal_Sym *file_isymbuf
+  PARAMS ((bfd *));
+static Elf_Internal_Rela *section_relocs
+  PARAMS ((bfd *, asection *));
+static bfd_byte *section_contents
+  PARAMS ((bfd *, asection *));
+static bfd_boolean ubicom32_elf_relax_section
+  PARAMS ((bfd *, asection *, struct bfd_link_info *, bfd_boolean *));
+static bfd_boolean ubicom32_elf_relax_calli
+  PARAMS ((bfd *, asection *, bfd_boolean *));
+static bfd_boolean ubicom32_elf_relax_delete_bytes
+  PARAMS ((bfd *, asection *, bfd_vma, int));
+static void adjust_sec_relocations
+  PARAMS ((bfd *, asection *, asection *, bfd_vma, int));
+static void adjust_all_relocations
+  PARAMS ((bfd *, asection *, bfd_vma, int));
+
+static bfd_reloc_status_type ubicom32_final_link_relocate
+  PARAMS ((reloc_howto_type *, bfd *, asection *, bfd_byte *,
+	   Elf_Internal_Rela *, bfd_vma));
+static bfd_boolean ubicom32_elf_relocate_section
+  PARAMS ((bfd *, struct bfd_link_info *, bfd *, asection *,
+	   bfd_byte *, Elf_Internal_Rela *, Elf_Internal_Sym *,
+	   asection **));
+
+static bfd_boolean ubicom32_elf_gc_sweep_hook
+  PARAMS ((bfd *, struct bfd_link_info *, asection *, const
+	   Elf_Internal_Rela *));
+static asection * ubicom32_elf_gc_mark_hook
+  PARAMS ((asection *, struct bfd_link_info *, Elf_Internal_Rela *, struct
+	   elf_link_hash_entry *, Elf_Internal_Sym *));
+static bfd_boolean ubicom32_elf_check_relocs
+  PARAMS ((bfd *, struct bfd_link_info *, asection *,
+	   const Elf_Internal_Rela *));
+extern bfd_boolean ubicom32_elf_discard_info
+  PARAMS ((bfd *, struct elf_reloc_cookie *, struct bfd_link_info *));
+
+static bfd_boolean ubicom32_elf_object_p PARAMS ((bfd *));
+static bfd_boolean ubicom32_elf_set_private_flags PARAMS ((bfd *, flagword));
+static bfd_boolean ubicom32_elf_copy_private_bfd_data PARAMS ((bfd *, bfd *));
+static bfd_boolean ubicom32_elf_merge_private_bfd_data PARAMS ((bfd *, bfd *));
+static bfd_boolean ubicom32_elf_print_private_bfd_data PARAMS ((bfd *, PTR));
+
+//static unsigned long read_unsigned_leb128 (bfd *, char *, unsigned int *);
+
+//static long read_signed_leb128 (bfd *, char *, unsigned int *);
+
+/* read dwarf information from a buffer */
+
+#define UBICOM32_HOWTO(t,rs,s,bs,pr,bp,name,sm,dm) \
+    HOWTO(t,			/* type */ \
+	  rs,			/* rightshift */ \
+	  s,			/* size (0 = byte, 1 = short, 2 = long) */ \
+	  bs,			/* bitsize */ \
+	  pr,			/* pc_relative */ \
+	  bp,			/* bitpos */ \
+	  complain_overflow_bitfield,	/* complain_on_overflow */ \
+	  ubicom32_elf_generic_reloc,	/* special_function */ \
+	  name,			/* name */ \
+	  FALSE,		/* partial_inplace */ \
+	  sm,			/* src_mask */ \
+	  dm,			/* dst_mask */ \
+	  pr)			/* pcrel_offset */
+
+/* Special Note:  For addresses, we must always zero out the top byte of a
+		  address because the harvard address space is represented as
+		  a single virtual address space that uses the top byte to denote
+		  whether the address belongs in the data or program space.  This is
+		  done to accomodate GDB which cannot handle program and data addresses
+		  overlapping.                                                       */
+
+static reloc_howto_type ubicom32_elf_howto_table [] =
+{
+  /* This reloc does nothing.  */
+  UBICOM32_HOWTO (R_UBICOM32_NONE, 0,	2, 32, FALSE, 0, "R_UBICOM32_NONE", 0, 0),
+
+  /* A 16 bit absolute relocation.  */
+  UBICOM32_HOWTO (R_UBICOM32_16, 0, 1, 16, FALSE, 0,	"R_UBICOM32_16", 0, 0xffff),
+
+  /* A 32 bit absolute relocation.  Must zero top byte of virtual address. */
+  UBICOM32_HOWTO (R_UBICOM32_32, 0, 2, 32, FALSE, 0, "R_UBICOM32_32", 0, 0xffffffff),
+
+  /* A 16 bit indirect relocation, low 16 bits of 32 */
+  UBICOM32_HOWTO (R_UBICOM32_LO16, 0, 2, 16, FALSE, 0, "R_UBICOM32_LO16", 0x0, 0x0000ffff),
+
+  /* A 16 bit indirect relocation, high 16 bits of 32 - must zero top byte of virtual address */
+  UBICOM32_HOWTO (R_UBICOM32_HI16, 0, 2, 16, FALSE, 0, "R_UBICOM32_HI16", 0x0, 0x0000ffff),
+
+  /* A 21 bit relative relocation.  */
+  UBICOM32_HOWTO (R_UBICOM32_21_PCREL, 2, 2, 21, TRUE, 0, "R_UBICOM32_21_PCREL", 0x0, 0x001fffff),
+
+  /* A 24 bit relative relocation.  */
+  UBICOM32_HOWTO (R_UBICOM32_24_PCREL, 2, 2, 24, TRUE, 0, "R_UBICOM32_24_PCREL", 0x0, 0x071fffff),
+
+  /* A 24 bit indirect relocation, bits 31:7 - assume top byte zero. */
+  UBICOM32_HOWTO (R_UBICOM32_HI24, 7, 2, 24, FALSE, 0, "R_UBICOM32_HI24", 0x0, 0x0001ffff),
+
+  /* A source operand low 7 bit indirect relocation. */
+  UBICOM32_HOWTO (R_UBICOM32_LO7_S, 0, 2, 7, FALSE, 0, "R_UBICOM32_LO7_S", 0x0, 0x0000031f),
+
+  /* A source operand low 7 bit .2 insn indirect relocation. */
+  UBICOM32_HOWTO (R_UBICOM32_LO7_2_S, 1, 2, 7, FALSE, 0, "R_UBICOM32_LO7_2_S", 0x0, 0x0000031f),
+
+  /* A source operand low 7 bit .4 insn indirect relocation. */
+  UBICOM32_HOWTO (R_UBICOM32_LO7_4_S, 2, 2, 7, FALSE, 0, "R_UBICOM32_LO7_4_S", 0x0, 0x0000031f),
+
+  /* A destination operand low 7 bit indirect relocation. */
+  UBICOM32_HOWTO (R_UBICOM32_LO7_D, 0, 2, 7, FALSE, 0, "R_UBICOM32_LO7_D", 0x0, 0x031f0000),
+
+  /* A destination operand low 7 bit .2 insn indirect relocation. */
+  UBICOM32_HOWTO (R_UBICOM32_LO7_2_D, 1, 2, 7, FALSE, 0, "R_UBICOM32_LO7_2_D", 0x0, 0x031f0000),
+
+  /* A destination operand low 7 bit .2 insn indirect relocation. */
+  UBICOM32_HOWTO (R_UBICOM32_LO7_4_D, 2, 2, 7, FALSE, 0, "R_UBICOM32_LO7_4_D", 0x0, 0x031f0000),
+
+  /* A 32 bit absolute relocation in debug section.  Must retain top byte of virtual address. */
+  UBICOM32_HOWTO (R_UBICOM32_32_HARVARD, 0, 2, 32, FALSE, 0, "R_UBICOM32_32_HARVARD", 0, 0xffffffff),
+
+  /* A calli offset operand low 7 bit .4 insn indirect relocation. */
+  UBICOM32_HOWTO (R_UBICOM32_LO7_CALLI, 2, 2, 7, FALSE, 0, "R_UBICOM32_LO7_CALLI", 0x0, 0x071f071f),
+
+  /* A calli offset operand low 18 bit .4 insn indirect relocation. */
+  UBICOM32_HOWTO (R_UBICOM32_LO16_CALLI, 2, 2, 16, FALSE, 0, "R_UBICOM32_LO16_CALLI", 0x0, 0x071f071f),
+
+  /* A 24 bit indirect relocation, bits 31:7 - assume top byte zero. */
+  UBICOM32_HOWTO (R_UBICOM32_GOT_HI24, 7, 2, 24, FALSE, 0, "R_UBICOM32_GOT_HI24", 0x0, 0x0001ffff),
+
+  /* A source operand low 7 bit indirect relocation. */
+  UBICOM32_HOWTO (R_UBICOM32_GOT_LO7_S, 0, 2, 7, FALSE, 0, "R_UBICOM32_GOT_LO7_S", 0x0, 0x0000031f),
+
+  /* A source operand low 7 bit .2 insn indirect relocation. */
+  UBICOM32_HOWTO (R_UBICOM32_GOT_LO7_2_S, 1, 2, 7, FALSE, 0, "R_UBICOM32_GOT_LO7_2_S", 0x0, 0x0000031f),
+
+  /* A source operand low 7 bit .4 insn indirect relocation. */
+  UBICOM32_HOWTO (R_UBICOM32_GOT_LO7_4_S, 2, 2, 7, FALSE, 0, "R_UBICOM32_GOT_LO7_4_S", 0x0, 0x0000031f),
+
+  /* A destination operand low 7 bit indirect relocation. */
+  UBICOM32_HOWTO (R_UBICOM32_GOT_LO7_D, 0, 2, 7, FALSE, 0, "R_UBICOM32_GOT_LO7_D", 0x0, 0x031f0000),
+
+  /* A destination operand low 7 bit .2 insn indirect relocation. */
+  UBICOM32_HOWTO (R_UBICOM32_GOT_LO7_2_D, 1, 2, 7, FALSE, 0, "R_UBICOM32_GOT_LO7_2_D", 0x0, 0x031f0000),
+
+  /* A destination operand low 7 bit .2 insn indirect relocation. */
+  UBICOM32_HOWTO (R_UBICOM32_GOT_LO7_4_D, 2, 2, 7, FALSE, 0, "R_UBICOM32_GOT_LO7_4_D", 0x0, 0x031f0000),
+
+  /* A 24 bit indirect relocation, bits 31:7 - assume top byte zero. */
+  UBICOM32_HOWTO (R_UBICOM32_FUNCDESC_GOT_HI24, 7, 2, 24, FALSE, 0, "R_UBICOM32_FUNCDESC_GOT_HI24", 0x0, 0x0001ffff),
+
+  /* A source operand low 7 bit indirect relocation. */
+  UBICOM32_HOWTO (R_UBICOM32_FUNCDESC_GOT_LO7_S, 0, 2, 7, FALSE, 0, "R_UBICOM32_FUNCDESC_GOT_LO7_S", 0x0, 0x0000031f),
+
+  /* A source operand low 7 bit .2 insn indirect relocation. */
+  UBICOM32_HOWTO (R_UBICOM32_FUNCDESC_GOT_LO7_2_S, 1, 2, 7, FALSE, 0, "R_UBICOM32_FUNCDESC_GOT_LO7_2_S", 0x0, 0x0000031f),
+
+  /* A source operand low 7 bit .4 insn indirect relocation. */
+  UBICOM32_HOWTO (R_UBICOM32_FUNCDESC_GOT_LO7_4_S, 2, 2, 7, FALSE, 0, "R_UBICOM32_FUNCDESC_GOT_LO7_4_S", 0x0, 0x0000031f),
+
+  /* A destination operand low 7 bit indirect relocation. */
+  UBICOM32_HOWTO (R_UBICOM32_FUNCDESC_GOT_LO7_D, 0, 2, 7, FALSE, 0, "R_UBICOM32_FUNCDESC_GOT_LO7_D", 0x0, 0x031f0000),
+
+  /* A destination operand low 7 bit .2 insn indirect relocation. */
+  UBICOM32_HOWTO (R_UBICOM32_FUNCDESC_GOT_LO7_2_D, 1, 2, 7, FALSE, 0, "R_UBICOM32_FUNCDESC_GOT_LO7_2_D", 0x0, 0x031f0000),
+
+  /* A destination operand low 7 bit .2 insn indirect relocation. */
+  UBICOM32_HOWTO (R_UBICOM32_FUNCDESC_GOT_LO7_4_D, 2, 2, 7, FALSE, 0, "R_UBICOM32_FUNCDESC_GOT_LO7_4_D", 0x0, 0x031f0000),
+
+  /* A calli offset operand low 7 bit .4 insn indirect relocation. */
+  UBICOM32_HOWTO (R_UBICOM32_GOT_LO7_CALLI, 2, 2, 7, FALSE, 0, "R_UBICOM32_GOT_LO7_CALLI", 0x0, 0x071f071f),
+
+  /* A calli offset operand low 7 bit .4 insn indirect relocation. */
+  UBICOM32_HOWTO (R_UBICOM32_FUNCDESC_GOT_LO7_CALLI, 2, 2, 7, FALSE, 0, "R_UBICOM32_FUNCDESC_GOT_LO7_CALLI", 0x0, 0x071f071f),
+
+  /* A 32 bit absolute relocation.  Must zero top byte of virtual address. */
+  UBICOM32_HOWTO (R_UBICOM32_FUNCDESC_VALUE, 0, 2, 32, FALSE, 0, "R_UBICOM32_FUNCDESC_VALUE", 0, 0xffffffff),
+
+  /* A 32 bit absolute relocation.  Must zero top byte of virtual address. */
+  UBICOM32_HOWTO (R_UBICOM32_FUNCDESC, 0, 2, 32, FALSE, 0, "R_UBICOM32_FUNCDESC", 0, 0xffffffff),
+
+  /* A 16 bit absolute relocation.  */
+  UBICOM32_HOWTO (R_UBICOM32_GOTOFFSET_LO, 0, 1, 16, FALSE, 0,	"R_UBICOM32_GOTOFFSET_LO", 0, 0xffff),
+
+  /* A 16 bit absolute relocation.  */
+  UBICOM32_HOWTO (R_UBICOM32_GOTOFFSET_HI, 0, 1, 16, FALSE, 0,	"R_UBICOM32_GOTOFFSET_HI", 0, 0xffff),
+
+  /* A 16 bit absolute relocation.  */
+  UBICOM32_HOWTO (R_UBICOM32_FUNCDESC_GOTOFFSET_LO, 0, 1, 16, FALSE, 0,	"R_UBICOM32_FUNCDESC_GOTOFFSET_LO", 0, 0xffff),
+
+  /* A 16 bit absolute relocation.  */
+  UBICOM32_HOWTO (R_UBICOM32_FUNCDESC_GOTOFFSET_HI, 0, 1, 16, FALSE, 0,	"R_UBICOM32_FUNCDESC_GOTOFFSET_HI", 0, 0xffff),
+};
+
+/* GNU extension to record C++ vtable hierarchy */
+static reloc_howto_type ubicom32_elf_vtinherit_howto =
+  HOWTO (R_UBICOM32_GNU_VTINHERIT,   /* type */
+	 0,                     /* rightshift */
+	 2,                     /* size (0 = byte, 1 = short, 2 = long) */
+	 0,                     /* bitsize */
+	 FALSE,                 /* pc_relative */
+	 0,                     /* bitpos */
+	 complain_overflow_dont, /* complain_on_overflow */
+	 NULL,                  /* special_function */
+	 "R_UBICOM32_GNU_VTINHERIT", /* name */
+	 FALSE,                 /* partial_inplace */
+	 0,                     /* src_mask */
+	 0,                     /* dst_mask */
+	 FALSE);                /* pcrel_offset */
+
+  /* GNU extension to record C++ vtable member usage */
+static reloc_howto_type ubicom32_elf_vtentry_howto =
+  HOWTO (R_UBICOM32_GNU_VTENTRY,     /* type */
+	 0,                     /* rightshift */
+	 2,                     /* size (0 = byte, 1 = short, 2 = long) */
+	 0,                     /* bitsize */
+	 FALSE,                 /* pc_relative */
+	 0,                     /* bitpos */
+	 complain_overflow_dont, /* complain_on_overflow */
+	 _bfd_elf_rel_vtable_reloc_fn,  /* special_function */
+	 "R_UBICOM32_GNU_VTENTRY",   /* name */
+	 FALSE,                 /* partial_inplace */
+	 0,                     /* src_mask */
+	 0,                     /* dst_mask */
+	 FALSE);                /* pcrel_offset */
+
+extern const bfd_target bfd_elf32_ubicom32fdpic_vec;
+#define IS_FDPIC(bfd) ((bfd)->xvec == &bfd_elf32_ubicom32fdpic_vec)
+
+/* Relocation helpers */
+bfd_reloc_status_type
+ubicom32_elf_generic_reloc (abfd,
+			    reloc_entry,
+			    symbol,
+			    data,
+			    input_section,
+			    output_bfd,
+			    error_message)
+     bfd *abfd ATTRIBUTE_UNUSED;
+     arelent *reloc_entry;
+     asymbol *symbol;
+     PTR data ATTRIBUTE_UNUSED;
+     asection *input_section;
+     bfd *output_bfd;
+     char **error_message ATTRIBUTE_UNUSED;
+{
+  if (output_bfd != (bfd *) NULL
+      && (symbol->flags & BSF_SECTION_SYM) == 0
+      && (! reloc_entry->howto->partial_inplace
+	  || reloc_entry->addend == 0))
+    {
+      reloc_entry->address += input_section->output_offset;
+      symbol = *reloc_entry->sym_ptr_ptr;
+
+      if((symbol->flags & BSF_OBJECT) == 0)
+	{
+	  reloc_entry->addend -= symbol->value;
+	}
+      else
+	{
+	  if (reloc_entry->addend >= symbol->value)
+	    reloc_entry->addend -= symbol->value;
+	}
+      return bfd_reloc_ok;
+    }
+
+  return bfd_reloc_continue;
+}
+
+bfd_reloc_status_type
+ubicom32_elf_relocate_hi16 (input_bfd, relhi, contents, value)
+     bfd *input_bfd;
+     Elf_Internal_Rela *relhi;
+     bfd_byte *contents;
+     bfd_vma value;
+{
+  bfd_vma insn;
+
+  insn = bfd_get_32 (input_bfd, contents + relhi->r_offset);
+
+  value += relhi->r_addend;
+  value >>= 16;
+  value &= 0xffff;  /* take off top byte of virtual address */
+  insn = ((insn & ~0xFFFF) | value);
+
+  bfd_put_32 (input_bfd, insn, contents + relhi->r_offset);
+  return bfd_reloc_ok;
+}
+
+bfd_reloc_status_type
+ubicom32_elf_relocate_lo16 (input_bfd, relhi, contents, value)
+     bfd *input_bfd;
+     Elf_Internal_Rela *relhi;
+     bfd_byte *contents;
+     bfd_vma value;
+{
+  bfd_vma insn;
+
+  insn = bfd_get_32 (input_bfd, contents + relhi->r_offset);
+
+  value += relhi->r_addend;
+  value &= 0xFFFF;
+  insn = ((insn & ~0xFFFF) | value);
+
+  bfd_put_32 (input_bfd, insn, contents + relhi->r_offset);
+  return bfd_reloc_ok;
+}
+
+bfd_reloc_status_type
+ubicom32_elf_relocate_hi24 (input_bfd, relhi, contents, value)
+     bfd *input_bfd;
+     Elf_Internal_Rela *relhi;
+     bfd_byte *contents;
+     bfd_vma value;
+{
+  bfd_vma insn;
+
+  insn = bfd_get_32 (input_bfd, contents + relhi->r_offset);
+
+  value += relhi->r_addend;
+
+  if ((elf_elfheader (input_bfd)->e_flags & 0xffff) < bfd_mach_ubicom32ver5)
+    {
+      /* We are dealing with Ubicom cpus that are version 4 or earlier. The moveai instruction assumes that the msb of the address is zero. */
+      if (value & 0x80000000)
+	fprintf (stderr,"@@@: You are trying load the address of something at %08lx\n  This is >= 0x80000000 and the moveai instruction does not support it!\n",value);
+
+      value &= 0x7fffffff; /* zero off top bit of virtual address */
+      value >>= 7;
+      insn = (insn & ~0x071FFFFF);
+
+      insn |= (value & 0x1FFFFF);
+      insn |= (value & 0xe00000) << 3;
+    }
+  else
+    {
+      /* Cpu versions 5+. The address value is 25 bits in width. */
+      value >>= 7;
+      insn = (insn & ~0x0f1FFFFF);
+
+      insn |= (value & 0x1FFFFF);
+      insn |= (value & 0x1e00000) << 3;
+    }
+
+  bfd_put_32 (input_bfd, insn, contents + relhi->r_offset);
+  return bfd_reloc_ok;
+}
+
+bfd_reloc_status_type
+ubicom32_elf_relocate_lo7_s (input_bfd, relhi, contents, value)
+     bfd *input_bfd;
+     Elf_Internal_Rela *relhi;
+     bfd_byte *contents;
+     bfd_vma value;
+{
+  bfd_vma insn;
+  bfd_vma top;
+  bfd_vma bottom;
+
+  insn = bfd_get_32 (input_bfd, contents + relhi->r_offset);
+
+  value += relhi->r_addend;
+  value &= 0x7f;
+
+  /* must split up value into top 2 bits and bottom 5 bits */
+  top = value >> 5;
+  bottom = value & 0x1f;
+  insn = ((insn & ~0x31f) | (top << 8) | bottom);
+
+  bfd_put_32 (input_bfd, insn, contents + relhi->r_offset);
+  return bfd_reloc_ok;
+}
+
+bfd_reloc_status_type
+ubicom32_elf_relocate_lo7_2_s (input_bfd, relhi, contents, value)
+     bfd *input_bfd;
+     Elf_Internal_Rela *relhi;
+     bfd_byte *contents;
+     bfd_vma value;
+{
+  bfd_vma insn;
+  bfd_vma top;
+  bfd_vma bottom;
+
+  insn = bfd_get_32 (input_bfd, contents + relhi->r_offset);
+
+  value += relhi->r_addend;
+  value &= 0x7f;
+  value >>= 1;  /* must shift by 1 because this is .2 insn */
+
+  /* must split up value into top 2 bits and bottom 5 bits */
+  top = value >> 5;
+  bottom = value & 0x1f;
+  insn = ((insn & ~0x31f) | (top << 8) | bottom);
+
+  bfd_put_32 (input_bfd, insn, contents + relhi->r_offset);
+  return bfd_reloc_ok;
+}
+
+bfd_reloc_status_type
+ubicom32_elf_relocate_lo7_4_s (input_bfd, relhi, contents, value)
+     bfd *input_bfd;
+     Elf_Internal_Rela *relhi;
+     bfd_byte *contents;
+     bfd_vma value;
+{
+  bfd_vma insn;
+  bfd_vma top;
+  bfd_vma bottom;
+
+  insn = bfd_get_32 (input_bfd, contents + relhi->r_offset);
+
+  value += relhi->r_addend;
+  value &= 0x7f;
+  value >>= 2;  /* must shift by 1 because this is .4 insn */
+
+  /* must split up value into top 2 bits and bottom 5 bits */
+  top = value >> 5;
+  bottom = value & 0x1f;
+  insn = ((insn & ~0x31f) | (top << 8) | bottom);
+
+  bfd_put_32 (input_bfd, insn, contents + relhi->r_offset);
+  return bfd_reloc_ok;
+}
+
+bfd_reloc_status_type
+ubicom32_elf_relocate_lo7_d (input_bfd, relhi, contents, value)
+     bfd *input_bfd;
+     Elf_Internal_Rela *relhi;
+     bfd_byte *contents;
+     bfd_vma value;
+{
+  bfd_vma insn;
+  bfd_vma top;
+  bfd_vma bottom;
+
+  insn = bfd_get_32 (input_bfd, contents + relhi->r_offset);
+
+  value += relhi->r_addend;
+  value &= 0x7f;
+
+  /* must split up value into top 2 bits and bottom 5 bits */
+  top = value >> 5;
+  bottom = value & 0x1f;
+  insn = ((insn & ~0x031f0000) | (top << 24) | (bottom << 16));
+
+  bfd_put_32 (input_bfd, insn, contents + relhi->r_offset);
+  return bfd_reloc_ok;
+}
+
+bfd_reloc_status_type
+ubicom32_elf_relocate_lo7_2_d (input_bfd, relhi, contents, value)
+     bfd *input_bfd;
+     Elf_Internal_Rela *relhi;
+     bfd_byte *contents;
+     bfd_vma value;
+{
+  bfd_vma insn;
+  bfd_vma top;
+  bfd_vma bottom;
+
+  insn = bfd_get_32 (input_bfd, contents + relhi->r_offset);
+
+  value += relhi->r_addend;
+  value &= 0x7f;
+  value >>= 1; /* must shift by 1 because this is for a .2 insn */
+
+  /* must split up value into top 2 bits and bottom 5 bits */
+  top = value >> 5;
+  bottom = value & 0x1f;
+  insn = ((insn & ~0x031f0000) | (top << 24) | (bottom << 16));
+
+  bfd_put_32 (input_bfd, insn, contents + relhi->r_offset);
+  return bfd_reloc_ok;
+}
+
+bfd_reloc_status_type
+ubicom32_elf_relocate_lo7_4_d (input_bfd, relhi, contents, value)
+     bfd *input_bfd;
+     Elf_Internal_Rela *relhi;
+     bfd_byte *contents;
+     bfd_vma value;
+{
+  bfd_vma insn;
+  bfd_vma top;
+  bfd_vma bottom;
+
+  insn = bfd_get_32 (input_bfd, contents + relhi->r_offset);
+
+  value += relhi->r_addend;
+  value &= 0x7f;
+  value >>= 2; /* must shift by 2 because this is for a .4 insn */
+
+  /* must split up value into top 2 bits and bottom 5 bits */
+  top = value >> 5;
+  bottom = value & 0x1f;
+  insn = ((insn & ~0x031f0000) | (top << 24) | (bottom << 16));
+
+  bfd_put_32 (input_bfd, insn, contents + relhi->r_offset);
+  return bfd_reloc_ok;
+}
+
+/* Perform the relocation for call instructions */
+static bfd_reloc_status_type
+ubicom32_elf_relocate_pcrel24 (input_bfd, input_section, rello, contents, value)
+     bfd *input_bfd;
+     asection *input_section;
+     Elf_Internal_Rela *rello;
+     bfd_byte *contents;
+     bfd_vma value;
+{
+  bfd_vma insn;
+  bfd_vma value_top;
+  bfd_vma value_bottom;
+
+  /* Grab the instruction */
+  insn = bfd_get_32 (input_bfd, contents + rello->r_offset);
+
+  value -= input_section->output_section->vma + input_section->output_offset;
+  value -= rello->r_offset;
+  value += rello->r_addend;
+
+  /* insn uses bottom 24 bits of relocation value times 4 */
+  if (value & 0x03)
+    return bfd_reloc_dangerous;
+
+  value = (value & 0x3ffffff) >> 2;
+
+  if ((long) value > 0xffffff)
+    return bfd_reloc_overflow;
+
+  value_top = (value >> 21) << 24;
+  value_bottom = value & 0x1fffff;
+
+  insn = insn & 0xf8e00000;
+  insn = insn | value_top | value_bottom;
+
+  bfd_put_32 (input_bfd, insn, contents + rello->r_offset);
+
+  return bfd_reloc_ok;
+}
+
+static bfd_reloc_status_type
+ubicom32_elf_relocate_gotoffset_lo (input_bfd, input_section, rello, contents, value)
+     bfd *input_bfd;
+     asection *input_section ATTRIBUTE_UNUSED;
+     Elf_Internal_Rela *rello;
+     bfd_byte *contents;
+     bfd_vma value;
+{
+  bfd_vma insn;
+
+  /* Grab the instruction */
+  insn = bfd_get_32 (input_bfd, contents + rello->r_offset);
+
+  /* Truncte to 16 and store. */
+  value &= 0xffff;
+
+  insn = (insn & 0xffff0000) | value;
+
+  /* output it. */
+  bfd_put_32 (input_bfd, insn, contents + rello->r_offset);
+
+  return bfd_reloc_ok;
+}
+
+static bfd_reloc_status_type
+ubicom32_elf_relocate_funcdesc_gotoffset_lo (input_bfd, input_section, rello, contents, value)
+     bfd *input_bfd;
+     asection *input_section ATTRIBUTE_UNUSED;
+     Elf_Internal_Rela *rello;
+     bfd_byte *contents;
+     bfd_vma value;
+{
+  bfd_vma insn;
+
+  /* Grab the instruction */
+  insn = bfd_get_32 (input_bfd, contents + rello->r_offset);
+
+  /* Truncte to 16 and store. */
+  value &= 0xffff;
+
+  insn = (insn & 0xffff0000) | value;
+
+  /* output it. */
+  bfd_put_32 (input_bfd, insn, contents + rello->r_offset);
+
+  return bfd_reloc_ok;
+}
+#if 0
+static bfd_reloc_status_type
+ubicom32_elf_relocate_funcdesc (input_bfd, input_section, rello, contents, value)
+     bfd *input_bfd;
+     asection *input_section ATTRIBUTE_UNUSED;
+     Elf_Internal_Rela *rello;
+     bfd_byte *contents;
+     bfd_vma value;
+{
+  bfd_vma insn;
+
+  /* Grab the instruction */
+  insn = bfd_get_32 (input_bfd, contents + rello->r_offset);
+
+  /* Truncte to 16 and store. */
+  value &= 0xffff;
+
+  insn = (insn & 0xffff0000) | value;
+
+  /* output it. */
+  bfd_put_32 (input_bfd, insn, contents + rello->r_offset);
+
+  return bfd_reloc_ok;
+}
+#endif
+bfd_reloc_status_type
+ubicom32_elf_relocate_lo_calli (input_bfd, relhi, contents, value, bits)
+     bfd *input_bfd;
+     Elf_Internal_Rela *relhi;
+     bfd_byte *contents;
+     bfd_vma value;
+     int bits;
+{
+  bfd_vma insn;
+
+  insn = bfd_get_32 (input_bfd, contents + relhi->r_offset);
+
+  value += relhi->r_addend;
+  value &= (1 << bits) - 1;
+  value >>= 2;  /* must shift by 2 because this is .4 insn */
+
+  /* must split up value into top 2 bits and bottom 5 bits */
+  insn &= ~0x071f071f;
+  insn |= (value & 0x1f) << 0;
+  value >>= 5;
+  insn |= (value & 0x07) << 8;
+  value >>= 3;
+  insn |= (value & 0x1f) << 16;
+  value >>= 5;
+  insn |= (value & 0x07) << 24;
+
+  bfd_put_32 (input_bfd, insn, contents + relhi->r_offset);
+  return bfd_reloc_ok;
+}
+
+
+/* Set the howto pointer for a UBICOM32 ELF reloc.  */
+
+static void
+ubicom32_info_to_howto_rela (abfd, cache_ptr, dst)
+     bfd * abfd ATTRIBUTE_UNUSED;
+     arelent * cache_ptr;
+     Elf_Internal_Rela * dst;
+{
+  unsigned int r_type;
+
+  r_type = ELF32_R_TYPE (dst->r_info);
+  switch (r_type)
+    {
+    case R_UBICOM32_GNU_VTINHERIT:
+      cache_ptr->howto = &ubicom32_elf_vtinherit_howto;
+      break;
+
+    case R_UBICOM32_GNU_VTENTRY:
+      cache_ptr->howto = &ubicom32_elf_vtentry_howto;
+      break;
+
+    default:
+      cache_ptr->howto = &ubicom32_elf_howto_table[r_type];
+      break;
+    }
+}
+
+
+static reloc_howto_type *
+ubicom32_reloc_type_lookup (abfd, code)
+     bfd * abfd ATTRIBUTE_UNUSED;
+     bfd_reloc_code_real_type code;
+{
+  switch (code)
+    {
+    case BFD_RELOC_NONE:
+      return &ubicom32_elf_howto_table[(int)R_UBICOM32_NONE];
+
+    case BFD_RELOC_16:
+      return &ubicom32_elf_howto_table[(int)R_UBICOM32_16];
+
+    case BFD_RELOC_32:
+      return &ubicom32_elf_howto_table[(int)R_UBICOM32_32];
+
+    case BFD_RELOC_LO16:
+      return &ubicom32_elf_howto_table[(int)R_UBICOM32_LO16];
+
+    case BFD_RELOC_HI16:
+      return &ubicom32_elf_howto_table[(int)R_UBICOM32_HI16];
+
+    case BFD_RELOC_UBICOM32_HI24:
+      return &ubicom32_elf_howto_table[(int)R_UBICOM32_HI24];
+
+    case BFD_RELOC_UBICOM32_LO7_S:
+      return &ubicom32_elf_howto_table[(int)R_UBICOM32_LO7_S];
+
+    case BFD_RELOC_UBICOM32_LO7_2_S:
+      return &ubicom32_elf_howto_table[(int)R_UBICOM32_LO7_2_S];
+
+    case BFD_RELOC_UBICOM32_LO7_4_S:
+      return &ubicom32_elf_howto_table[(int)R_UBICOM32_LO7_4_S];
+
+    case BFD_RELOC_UBICOM32_LO7_D:
+      return &ubicom32_elf_howto_table[(int)R_UBICOM32_LO7_D];
+
+    case BFD_RELOC_UBICOM32_LO7_2_D:
+      return &ubicom32_elf_howto_table[(int)R_UBICOM32_LO7_2_D];
+
+    case BFD_RELOC_UBICOM32_LO7_4_D:
+      return &ubicom32_elf_howto_table[(int)R_UBICOM32_LO7_4_D];
+
+    case BFD_RELOC_UBICOM32_21_PCREL:
+      return &ubicom32_elf_howto_table[(int)R_UBICOM32_21_PCREL];
+
+    case BFD_RELOC_UBICOM32_24_PCREL:
+      return &ubicom32_elf_howto_table[(int)R_UBICOM32_24_PCREL];
+
+    case BFD_RELOC_UBICOM32_GOT_HI24:
+      return &ubicom32_elf_howto_table[(int)R_UBICOM32_GOT_HI24];
+
+    case BFD_RELOC_UBICOM32_GOT_LO7_S:
+      return &ubicom32_elf_howto_table[(int)R_UBICOM32_GOT_LO7_S];
+
+    case BFD_RELOC_UBICOM32_GOT_LO7_2_S:
+      return &ubicom32_elf_howto_table[(int)R_UBICOM32_GOT_LO7_2_S];
+
+    case BFD_RELOC_UBICOM32_GOT_LO7_4_S:
+      return &ubicom32_elf_howto_table[(int)R_UBICOM32_GOT_LO7_4_S];
+
+    case BFD_RELOC_UBICOM32_GOT_LO7_D:
+      return &ubicom32_elf_howto_table[(int)R_UBICOM32_GOT_LO7_D];
+
+    case BFD_RELOC_UBICOM32_GOT_LO7_2_D:
+      return &ubicom32_elf_howto_table[(int)R_UBICOM32_GOT_LO7_2_D];
+
+    case BFD_RELOC_UBICOM32_GOT_LO7_4_D:
+      return &ubicom32_elf_howto_table[(int)R_UBICOM32_GOT_LO7_4_D];
+
+    case BFD_RELOC_UBICOM32_FUNCDESC_GOT_HI24:
+      return &ubicom32_elf_howto_table[(int)R_UBICOM32_FUNCDESC_GOT_HI24];
+
+    case BFD_RELOC_UBICOM32_FUNCDESC_GOT_LO7_S:
+      return &ubicom32_elf_howto_table[(int)R_UBICOM32_FUNCDESC_GOT_LO7_S];
+
+    case BFD_RELOC_UBICOM32_FUNCDESC_GOT_LO7_2_S:
+      return &ubicom32_elf_howto_table[(int)R_UBICOM32_FUNCDESC_GOT_LO7_2_S];
+
+    case BFD_RELOC_UBICOM32_FUNCDESC_GOT_LO7_4_S:
+      return &ubicom32_elf_howto_table[(int)R_UBICOM32_FUNCDESC_GOT_LO7_4_S];
+
+    case BFD_RELOC_UBICOM32_FUNCDESC_GOT_LO7_D:
+      return &ubicom32_elf_howto_table[(int)R_UBICOM32_FUNCDESC_GOT_LO7_D];
+
+    case BFD_RELOC_UBICOM32_FUNCDESC_GOT_LO7_2_D:
+      return &ubicom32_elf_howto_table[(int)R_UBICOM32_FUNCDESC_GOT_LO7_2_D];
+
+    case BFD_RELOC_UBICOM32_FUNCDESC_GOT_LO7_4_D:
+      return &ubicom32_elf_howto_table[(int)R_UBICOM32_FUNCDESC_GOT_LO7_4_D];
+
+    case BFD_RELOC_UBICOM32_LO7_CALLI:
+      return &ubicom32_elf_howto_table[(int)R_UBICOM32_LO7_CALLI];
+
+    case BFD_RELOC_UBICOM32_GOT_LO7_CALLI:
+      return &ubicom32_elf_howto_table[(int)R_UBICOM32_GOT_LO7_CALLI];
+
+    case BFD_RELOC_UBICOM32_FUNCDESC_GOT_LO7_CALLI:
+      return &ubicom32_elf_howto_table[(int)R_UBICOM32_FUNCDESC_GOT_LO7_CALLI];
+
+    case BFD_RELOC_UBICOM32_LO16_CALLI:
+      return &ubicom32_elf_howto_table[(int)R_UBICOM32_LO16_CALLI];
+
+    case BFD_RELOC_UBICOM32_FUNCDESC_VALUE:
+      return &ubicom32_elf_howto_table[(int)R_UBICOM32_FUNCDESC_VALUE];
+
+    case BFD_RELOC_UBICOM32_FUNCDESC:
+      return &ubicom32_elf_howto_table[(int)R_UBICOM32_FUNCDESC];
+
+    case BFD_RELOC_UBICOM32_GOTOFFSET_LO:
+      return &ubicom32_elf_howto_table[(int)R_UBICOM32_GOTOFFSET_LO];
+
+    case BFD_RELOC_UBICOM32_GOTOFFSET_HI:
+      return &ubicom32_elf_howto_table[(int)R_UBICOM32_GOTOFFSET_HI];
+
+    case BFD_RELOC_UBICOM32_FUNCDESC_GOTOFFSET_LO:
+      return &ubicom32_elf_howto_table[(int)R_UBICOM32_FUNCDESC_GOTOFFSET_LO];
+
+    case BFD_RELOC_UBICOM32_FUNCDESC_GOTOFFSET_HI:
+      return &ubicom32_elf_howto_table[(int)R_UBICOM32_FUNCDESC_GOTOFFSET_HI];
+
+    case BFD_RELOC_VTABLE_INHERIT:
+      return &ubicom32_elf_vtinherit_howto;
+
+    case BFD_RELOC_VTABLE_ENTRY:
+      return &ubicom32_elf_vtentry_howto;
+
+    default:
+      /* Pacify gcc -Wall. */
+      return NULL;
+    }
+
+  return NULL;
+}
+
+static reloc_howto_type *
+ubicom32_reloc_name_lookup (bfd *abfd ATTRIBUTE_UNUSED,
+			    const char *r_name)
+{
+  unsigned int i;
+
+  for (i = 0;
+       i < (sizeof (ubicom32_elf_howto_table)
+	    / sizeof (ubicom32_elf_howto_table[0]));
+       i++)
+    if (ubicom32_elf_howto_table[i].name != NULL
+	&& strcasecmp (ubicom32_elf_howto_table[i].name, r_name) == 0)
+      return &ubicom32_elf_howto_table[i];
+
+  return NULL;
+}
+
+/* Return the value of the symbol associated with the relocation IREL.  */
+
+static bfd_vma
+symbol_value (abfd, irel)
+     bfd *abfd;
+     Elf_Internal_Rela *irel;
+{
+  Elf_Internal_Shdr *symtab_hdr = file_symtab_hdr (abfd);
+  Elf_Internal_Sym *isymbuf = file_isymbuf (abfd);
+
+  if (ELF32_R_SYM (irel->r_info) < symtab_hdr->sh_info)
+    {
+      Elf_Internal_Sym *isym;
+      asection *sym_sec;
+
+      isym = isymbuf + ELF32_R_SYM (irel->r_info);
+      if (isym->st_shndx == SHN_UNDEF)
+	sym_sec = bfd_und_section_ptr;
+      else if (isym->st_shndx == SHN_ABS)
+	sym_sec = bfd_abs_section_ptr;
+      else if (isym->st_shndx == SHN_COMMON)
+	sym_sec = bfd_com_section_ptr;
+      else
+	sym_sec = bfd_section_from_elf_index (abfd, isym->st_shndx);
+
+      return isym->st_value + BASEADDR (sym_sec);
+    }
+  else
+    {
+      unsigned long indx;
+      struct elf_link_hash_entry *h;
+
+      indx = ELF32_R_SYM (irel->r_info) - symtab_hdr->sh_info;
+      h = elf_sym_hashes (abfd)[indx];
+      BFD_ASSERT (h != NULL);
+
+      if (h->root.type != bfd_link_hash_defined
+	  && h->root.type != bfd_link_hash_defweak)
+	return UNDEFINED_SYMBOL;
+
+      return (h->root.u.def.value + BASEADDR (h->root.u.def.section));
+    }
+}
+
+
+static Elf_Internal_Shdr *
+file_symtab_hdr (abfd)
+     bfd *abfd;
+{
+  return &elf_tdata (abfd)->symtab_hdr;
+}
+
+static Elf_Internal_Sym *
+file_isymbuf (abfd)
+     bfd *abfd;
+{
+  Elf_Internal_Shdr *symtab_hdr;
+
+  symtab_hdr = file_symtab_hdr (abfd);
+  if (symtab_hdr->sh_info == 0)
+    return NULL;
+
+  if (symtab_hdr->contents == NULL)
+    {
+      Elf_Internal_Sym * contents = bfd_elf_get_elf_syms (abfd, symtab_hdr, symtab_hdr->sh_info, 0,
+							  NULL, NULL, NULL);
+      symtab_hdr->contents = (unsigned char *) contents;
+    }
+
+  return (Elf_Internal_Sym *) symtab_hdr->contents;
+}
+
+static Elf_Internal_Rela *
+section_relocs (abfd, sec)
+     bfd *abfd;
+     asection *sec;
+{
+  if ((sec->flags & SEC_RELOC) == 0)
+    return NULL;
+
+  if (sec->reloc_count == 0)
+    return NULL;
+
+  if (elf_section_data (sec)->relocs == NULL)
+    elf_section_data (sec)->relocs =
+      _bfd_elf_link_read_relocs (abfd, sec, NULL, NULL, 1);
+
+  return elf_section_data (sec)->relocs;
+}
+
+static bfd_byte *
+section_contents (abfd, sec)
+     bfd *abfd;
+     asection *sec;
+{
+  bfd_byte *contents;
+
+  sec->rawsize = sec->rawsize ? sec->rawsize: sec->size;
+
+  if (elf_section_data (sec)->this_hdr.contents)
+    return elf_section_data (sec)->this_hdr.contents;
+
+  contents = (bfd_byte *) bfd_malloc (sec->rawsize);
+  if (contents == NULL)
+    return NULL;
+
+  if (! bfd_get_section_contents (abfd, sec, contents,
+				  (file_ptr) 0, sec->rawsize))
+    {
+      free (contents);
+      return NULL;
+    }
+
+  elf_section_data (sec)->this_hdr.contents = contents;
+  return contents;
+}
+
+/* This function handles relaxing for the ubicom32.
+
+   Principle: Start with the first page and remove page instructions that
+   are not require on this first page. By removing page instructions more
+   code will fit into this page - repeat until nothing more can be achieved
+   for this page. Move on to the next page.
+
+   Processing the pages one at a time from the lowest page allows a removal
+   only policy to be used - pages can be removed but are never reinserted.  */
+
+static bfd_boolean
+ubicom32_elf_relax_section (abfd, sec, link_info, again)
+     bfd *abfd;
+     asection *sec;
+     struct bfd_link_info *link_info;
+     bfd_boolean *again;
+{
+  /* Assume nothing changes.  */
+  *again = FALSE;
+
+  /* We don't have to do anything for a relocatable link,
+     if this section does not have relocs, or if this is
+     not a code section.  */
+  if (link_info->relocatable
+      || (sec->flags & SEC_RELOC) == 0
+      || sec->reloc_count == 0
+      || (sec->flags & SEC_CODE) == 0)
+    return TRUE;
+
+  /* If this is the first time we have been called
+      for this section, initialise the cooked size.
+  if (sec->_cooked_size == 0)
+    sec->_cooked_size = sec->rawsize;
+  */
+
+  /* This is where all the relaxation actually get done.  */
+  if (!ubicom32_elf_relax_calli (abfd, sec, again))
+    return FALSE;
+
+  if (sec->rawsize != sec->size)
+    sec->size = sec->rawsize;
+
+  /* Success!  */
+  return TRUE;
+}
+
+static bfd_boolean
+ubicom32_elf_relax_calli (abfd, sec, again)
+     bfd *abfd;
+     asection *sec;
+     bfd_boolean *again;
+{
+  bfd_byte *contents = section_contents (abfd, sec);
+  Elf_Internal_Rela *irelbase = section_relocs (abfd, sec);
+  Elf_Internal_Rela *irelend = irelbase + sec->reloc_count;
+  Elf_Internal_Rela *irel_moveai = NULL;
+  Elf_Internal_Rela *irel;
+  unsigned long insn;
+  bfd_vma symval;
+  bfd_vma pc;
+  bfd_vma dest;
+  signed long offs;
+
+  /* Walk thru the section looking for relaxation opertunities.  */
+  for (irel = irelbase; irel < irelend; irel++)
+    {
+      /* Remember last moveai instruction */
+      if (ELF32_R_TYPE (irel->r_info) == (int) R_UBICOM32_HI24)
+	{
+	  irel_moveai = irel;
+	  continue;
+	}
+
+      /* Ignore non calli instructions */
+      if (ELF32_R_TYPE (irel->r_info) != (int) R_UBICOM32_LO7_CALLI)
+	continue;
+
+      /* calli instruction => verify it is a calli instruction
+	 using a5 with a 5 bit positive offset */
+      insn = bfd_get_32 (abfd, (bfd_byte *)(contents + irel->r_offset));
+      if ((insn & 0xffffffe0) != 0xf0a000a0)
+	continue;
+      symval = symbol_value (abfd, irel);
+      if (symval == UNDEFINED_SYMBOL)
+	continue;
+      dest = symval + irel->r_addend;
+
+      /* Check proceeding instruction for a valid moveai */
+      if (!irel_moveai)
+	continue;
+      if (irel_moveai->r_offset != (irel->r_offset - 4))
+	continue;
+      insn = bfd_get_32 (abfd, (bfd_byte *)(contents + irel_moveai->r_offset));
+      if ((insn & 0xf8e00000) !=  0xe0a00000)
+	continue;
+      symval = symbol_value (abfd, irel_moveai);
+      if (symval == UNDEFINED_SYMBOL)
+	continue;
+      symval += irel_moveai->r_addend;
+      if (symval != dest)
+	continue;
+
+      /* Check offset required */
+      pc = BASEADDR (sec) + irel_moveai->r_offset;
+      offs = dest - pc;
+      if (offs > (UBICOM32_CALL_MAX_POS_OFFS + 4))
+	continue;
+      if (offs < UBICOM32_CALL_MAX_NEG_OFFS)
+	continue;
+
+      /* Replace calli with a call instruction */
+      irel->r_info = ELF32_R_INFO (ELF32_R_SYM (irel->r_info), R_UBICOM32_24_PCREL);
+      bfd_put_32 (abfd, 0xd8a00000, contents + irel->r_offset);
+
+      /* Delete moveai instruction */
+      irel_moveai->r_info = ELF32_R_INFO (ELF32_R_SYM (irel_moveai->r_info), R_UBICOM32_NONE);
+      if (!ubicom32_elf_relax_delete_bytes (abfd, sec, irel_moveai->r_offset, 4))
+	return FALSE;
+
+      /* Modified => will need to iterate relaxation again.  */
+      *again = TRUE;
+    }
+
+  return TRUE;
+}
+
+/* Delete some bytes from a section while relaxing.  */
+
+static bfd_boolean
+ubicom32_elf_relax_delete_bytes (abfd, sec, addr, count)
+     bfd *abfd;
+     asection *sec;
+     bfd_vma addr;
+     int count;
+{
+  bfd_byte *contents = elf_section_data (sec)->this_hdr.contents;
+  bfd_vma endaddr = sec->rawsize;
+
+  /* Actually delete the bytes.  */
+  memmove (contents + addr, contents + addr + count,
+	   endaddr - addr - count);
+
+  sec->rawsize -= count;
+
+  adjust_all_relocations (abfd, sec, addr + count, -count);
+  return TRUE;
+}
+
+/* Adjust all the relocations entries after adding or inserting instructions.  */
+
+static void
+adjust_sec_relocations (abfd, sec_to_process, addr_sec, addr, count)
+     bfd *abfd;
+     asection *sec_to_process;
+     asection *addr_sec;
+     bfd_vma addr;
+     int count;
+{
+  Elf_Internal_Shdr *symtab_hdr;
+  Elf_Internal_Sym *isymbuf, *isym;
+  Elf_Internal_Rela *irel, *irelend, *irelbase;
+  unsigned int addr_shndx;
+
+  irelbase = section_relocs (abfd, sec_to_process);
+  if (irelbase == NULL)
+    return;
+  irelend = irelbase + sec_to_process->reloc_count;
+
+  symtab_hdr = file_symtab_hdr (abfd);
+  isymbuf = file_isymbuf (abfd);
+
+  addr_shndx = _bfd_elf_section_from_bfd_section (abfd, addr_sec);
+
+  for (irel = irelbase; irel < irelend; irel++)
+    {
+      if (ELF32_R_TYPE (irel->r_info) != R_UBICOM32_NONE)
+	{
+	  /* Get the value of the symbol referred to by the reloc.  */
+	  if (ELF32_R_SYM (irel->r_info) < symtab_hdr->sh_info)
+	    {
+	      asection *sym_sec;
+	      bfd_vma xaddr, symval, relval;
+
+	      /* A local symbol.  */
+	      isym = isymbuf + ELF32_R_SYM (irel->r_info);
+	      sym_sec = bfd_section_from_elf_index (abfd, isym->st_shndx);
+	      xaddr = BASEADDR (addr_sec) + addr;
+	      symval = BASEADDR (sym_sec) + isym->st_value;
+	      relval = symval + irel->r_addend;
+
+	      if ((isym->st_shndx == addr_shndx)
+		  && (xaddr > symval)
+		  && (xaddr <= relval))
+		irel->r_addend += count;
+	    }
+	}
+
+      /* Adjust irel base address for PC space relocations after a deleted instruction.  */
+      if (sec_to_process == addr_sec)
+	{
+	  if (addr <= irel->r_offset)
+	    irel->r_offset += count;
+	}
+    }
+}
+
+static void
+adjust_all_relocations (abfd, sec, addr, count)
+     bfd *abfd;
+     asection *sec;
+     bfd_vma addr;
+     int count;
+{
+  Elf_Internal_Shdr *symtab_hdr;
+  Elf_Internal_Sym *isymbuf, *isym, *isymend;
+  struct elf_link_hash_entry **sym_hashes;
+  struct elf_link_hash_entry **end_hashes;
+  unsigned int symcount;
+  asection *section;
+  unsigned int shndx;
+
+  symtab_hdr = file_symtab_hdr (abfd);
+  isymbuf = file_isymbuf (abfd);
+
+  shndx = _bfd_elf_section_from_bfd_section (abfd, sec);
+
+  /* Adjust all relocations that are affected.  */
+  for (section = abfd->sections; section != NULL; section = section->next)
+    adjust_sec_relocations (abfd, section, sec, addr, count);
+
+  /* Adjust the local symbols defined in this section.  */
+  isymend = isymbuf + symtab_hdr->sh_info;
+  for (isym = isymbuf; isym < isymend; isym++)
+    {
+      if (isym->st_shndx == shndx
+	  && addr <= isym->st_value)
+	isym->st_value += count;
+    }
+
+  /* Now adjust the global symbols defined in this section.  */
+  symcount = (symtab_hdr->sh_size / sizeof (Elf32_External_Sym)
+	      - symtab_hdr->sh_info);
+  sym_hashes = elf_sym_hashes (abfd);
+  end_hashes = sym_hashes + symcount;
+  for (; sym_hashes < end_hashes; sym_hashes++)
+    {
+      struct elf_link_hash_entry *sym_hash = *sym_hashes;
+
+      if ((sym_hash->root.type == bfd_link_hash_defined
+	   || sym_hash->root.type == bfd_link_hash_defweak)
+	  && sym_hash->root.u.def.section == sec)
+	{
+	  if (addr <= sym_hash->root.u.def.value)
+	    sym_hash->root.u.def.value += count;
+	}
+    }
+}
+
+/* Perform a single relocation.  By default we use the standard BFD
+   routines. */
+
+static bfd_reloc_status_type
+ubicom32_final_link_relocate (howto, input_bfd, input_section, contents, rel, relocation)
+     reloc_howto_type *  howto;
+     bfd *               input_bfd;
+     asection *          input_section;
+     bfd_byte *          contents;
+     Elf_Internal_Rela * rel;
+     bfd_vma             relocation;
+{
+  bfd_reloc_status_type r = bfd_reloc_ok;
+
+  switch (howto->type)
+    {
+    default:
+      r = _bfd_final_link_relocate (howto, input_bfd, input_section,
+				    contents, rel->r_offset,
+				    relocation, rel->r_addend);
+    }
+
+  return r;
+}
+
+/* Relocate a UBICOM32 ELF section.
+   There is some attempt to make this function usable for many architectures,
+   both USE_REL and USE_RELA ['twould be nice if such a critter existed],
+   if only to serve as a learning tool.
+
+   The RELOCATE_SECTION function is called by the new ELF backend linker
+   to handle the relocations for a section.
+
+   The relocs are always passed as Rela structures; if the section
+   actually uses Rel structures, the r_addend field will always be
+   zero.
+
+   This function is responsible for adjusting the section contents as
+   necessary, and (if using Rela relocs and generating a relocatable
+   output file) adjusting the reloc addend as necessary.
+
+   This function does not have to worry about setting the reloc
+   address or the reloc symbol index.
+
+   LOCAL_SYMS is a pointer to the swapped in local symbols.
+
+   LOCAL_SECTIONS is an array giving the section in the input file
+   corresponding to the st_shndx field of each local symbol.
+
+   The global hash table entry for the global symbols can be found
+   via elf_sym_hashes (input_bfd).
+
+   When generating relocatable output, this function must handle
+   STB_LOCAL/STT_SECTION symbols specially.  The output symbol is
+   going to be the section symbol corresponding to the output
+   section, which means that the addend must be adjusted
+   accordingly.  */
+
+static bfd_boolean
+ubicom32_elf_relocate_section (output_bfd, info, input_bfd, input_section,
+			       contents, relocs, local_syms, local_sections)
+     bfd *                   output_bfd ATTRIBUTE_UNUSED;
+     struct bfd_link_info *  info;
+     bfd *                   input_bfd;
+     asection *              input_section;
+     bfd_byte *              contents;
+     Elf_Internal_Rela *     relocs;
+     Elf_Internal_Sym *      local_syms;
+     asection **             local_sections;
+{
+  Elf_Internal_Shdr *           symtab_hdr;
+  struct elf_link_hash_entry ** sym_hashes;
+  Elf_Internal_Rela *           rel;
+  Elf_Internal_Rela *           relend;
+  struct debugLineInfoHeader *lh = NULL;
+  int cooked_size, discard_size;
+  bfd_byte *src, *dest, *content_end;
+  unsigned int i;
+
+  symtab_hdr = & elf_tdata (input_bfd)->symtab_hdr;
+  sym_hashes = elf_sym_hashes (input_bfd);
+  relend     = relocs + input_section->reloc_count;
+
+  for (rel = relocs; rel < relend; rel ++)
+    {
+      reloc_howto_type *           howto;
+      unsigned long                r_symndx;
+      Elf_Internal_Sym *           sym;
+      asection *                   sec;
+      struct elf_link_hash_entry * h;
+      bfd_vma                      relocation;
+      bfd_reloc_status_type        r;
+      const char *                 name = NULL;
+      int                          r_type;
+
+      r_type = ELF32_R_TYPE (rel->r_info);
+
+      if ( r_type == R_UBICOM32_GNU_VTINHERIT
+	   || r_type == R_UBICOM32_GNU_VTENTRY)
+	continue;
+
+      r_symndx = ELF32_R_SYM (rel->r_info);
+
+      if (info->relocatable)
+	{
+	  /* This is a relocatable link.  We don't have to change
+	     anything, unless the reloc is against a section symbol,
+	     in which case we have to adjust according to where the
+	     section symbol winds up in the output section.  */
+	  if (r_symndx < symtab_hdr->sh_info)
+	    {
+	      sym = local_syms + r_symndx;
+
+	      if (ELF_ST_TYPE (sym->st_info) == STT_SECTION)
+		{
+		  sec = local_sections [r_symndx];
+		  rel->r_addend += sec->output_offset + sym->st_value;
+		}
+	    }
+
+	  continue;
+	}
+
+      /* This is a final link.  */
+      howto  = ubicom32_elf_howto_table + ELF32_R_TYPE (rel->r_info);
+      h      = NULL;
+      sym    = NULL;
+      sec    = NULL;
+
+      if (r_symndx < symtab_hdr->sh_info)
+	{
+	  sym = local_syms + r_symndx;
+	  sec = local_sections [r_symndx];
+	  relocation = (sec->output_section->vma
+			+ sec->output_offset
+			+ sym->st_value);
+
+	  name = bfd_elf_string_from_elf_section
+	    (input_bfd, symtab_hdr->sh_link, sym->st_name);
+	  name = (name == NULL) ? bfd_section_name (input_bfd, sec) : name;
+	}
+      else
+	{
+	  h = sym_hashes [r_symndx - symtab_hdr->sh_info];
+
+	  while (h->root.type == bfd_link_hash_indirect
+		 || h->root.type == bfd_link_hash_warning)
+	    h = (struct elf_link_hash_entry *) h->root.u.i.link;
+
+	  name = h->root.root.string;
+
+	  if (h->root.type == bfd_link_hash_defined
+	      || h->root.type == bfd_link_hash_defweak)
+	    {
+	      sec = h->root.u.def.section;
+	      relocation = (h->root.u.def.value
+			    + sec->output_section->vma
+			    + sec->output_offset);
+	    }
+	  else if (h->root.type == bfd_link_hash_undefweak)
+	    {
+	      relocation = 0;
+	    }
+	  else
+	    {
+	      if (! ((*info->callbacks->undefined_symbol)
+		     (info, h->root.root.string, input_bfd,
+		      input_section, rel->r_offset,
+		      (!info->shared ))))
+		return FALSE;
+	      relocation = 0;
+	    }
+	}
+
+      switch (r_type)
+	{
+	case R_UBICOM32_LO16:
+	  r = ubicom32_elf_relocate_lo16 (input_bfd, rel, contents, relocation);
+	  break;
+
+	case R_UBICOM32_HI16:
+	  r = ubicom32_elf_relocate_hi16 (input_bfd, rel, contents, relocation);
+	  break;
+
+	case R_UBICOM32_HI24:
+	  r = ubicom32_elf_relocate_hi24 (input_bfd, rel, contents, relocation);
+	  break;
+
+	case R_UBICOM32_LO7_S:
+	  r = ubicom32_elf_relocate_lo7_s (input_bfd, rel, contents, relocation);
+	  break;
+
+	case R_UBICOM32_LO7_2_S:
+	  r = ubicom32_elf_relocate_lo7_2_s (input_bfd, rel, contents, relocation);
+	  break;
+
+	case R_UBICOM32_LO7_4_S:
+	  r = ubicom32_elf_relocate_lo7_4_s (input_bfd, rel, contents, relocation);
+	  break;
+
+	case R_UBICOM32_LO7_D:
+	  r = ubicom32_elf_relocate_lo7_d (input_bfd, rel, contents, relocation);
+	  break;
+
+	case R_UBICOM32_LO7_2_D:
+	  r = ubicom32_elf_relocate_lo7_2_d (input_bfd, rel, contents, relocation);
+	  break;
+
+	case R_UBICOM32_LO7_4_D:
+	  r = ubicom32_elf_relocate_lo7_4_d (input_bfd, rel, contents, relocation);
+	  break;
+
+	case R_UBICOM32_24_PCREL:
+	  r = ubicom32_elf_relocate_pcrel24 (input_bfd, input_section, rel, contents, relocation);
+	  break;
+
+	case R_UBICOM32_LO7_CALLI:
+	  r = ubicom32_elf_relocate_lo_calli (input_bfd, rel, contents, relocation, 7);
+	  break;
+
+	case R_UBICOM32_LO16_CALLI:
+	  r = ubicom32_elf_relocate_lo_calli (input_bfd, rel, contents, relocation, 18);
+	  break;
+
+	case R_UBICOM32_32:
+	  /* relocation &= ~(0xff << 24); */
+	  /* FALLTHROUGH */
+
+	default:
+	  r = ubicom32_final_link_relocate (howto, input_bfd, input_section,
+					    contents, rel, relocation);
+	  break;
+	}
+
+      if (r != bfd_reloc_ok)
+	{
+	  const char * msg = (const char *) NULL;
+
+	  switch (r)
+	    {
+	    case bfd_reloc_overflow:
+	      r = info->callbacks->reloc_overflow
+		(info, NULL, name, howto->name, (bfd_vma) 0,
+		 input_bfd, input_section, rel->r_offset);
+	      break;
+
+	    case bfd_reloc_undefined:
+	      r = info->callbacks->undefined_symbol
+		(info, name, input_bfd, input_section, rel->r_offset, TRUE);
+	      break;
+
+	    case bfd_reloc_outofrange:
+	      msg = _("internal error: out of range error");
+	      break;
+
+	    case bfd_reloc_notsupported:
+	      msg = _("internal error: unsupported relocation error");
+	      break;
+
+	    case bfd_reloc_dangerous:
+	      msg = _("internal error: dangerous relocation");
+	      break;
+
+	    default:
+	      msg = _("internal error: unknown error");
+	      break;
+	    }
+
+	  if (msg)
+	    r = info->callbacks->warning
+	      (info, msg, name, input_bfd, input_section, rel->r_offset);
+
+	  if (! r)
+	    return FALSE;
+	}
+    }
+
+  /*
+   * now we have to collapse the .debug_line section if it has a
+   * sec_info section
+   */
+
+  if(strcmp(input_section->name, ".debug_line"))
+    return TRUE;
+
+  /* this is a .debug_line section. See it has a sec_info entry */
+  if(elf_section_data(input_section)->sec_info == NULL)
+    return TRUE;
+
+  lh = (struct debugLineInfoHeader *) elf_section_data(input_section)->sec_info;
+
+  if(lh->numEntries == 0)
+    return TRUE;
+
+  dest = contents + lh->linfo[0].startOffset;
+
+  cooked_size = input_section->rawsize;
+  content_end = contents + cooked_size;
+  discard_size = 0;
+
+  for(i=0; i< lh->numEntries; i++)
+    {
+      if(lh->linfo[i].discard)
+	discard_size += lh->linfo[i].length;
+      else
+	{
+	  src = contents + lh->linfo[i].startOffset;
+	  (void) memcpy(dest, src, lh->linfo[i].length);
+	  dest += lh->linfo[i].length;
+	}
+    }
+
+  src = contents + lh->linfo[lh->numEntries-1].startOffset + lh->linfo[lh->numEntries-1].length;
+  if(src < content_end)
+    (void) memcpy(dest, src, content_end - src);
+
+  i = bfd_get_32(input_bfd, contents);
+  i -= discard_size;
+  bfd_put_32(input_bfd, i, contents);
+  //input_section->rawsize -= discard_size;
+  return TRUE;
+}
+
+
+/* Update the got entry reference counts for the section being
+   removed.  */
+
+static bfd_boolean
+ubicom32_elf_gc_sweep_hook (abfd, info, sec, relocs)
+     bfd *                     abfd ATTRIBUTE_UNUSED;
+     struct bfd_link_info *    info ATTRIBUTE_UNUSED;
+     asection *                sec ATTRIBUTE_UNUSED;
+     const Elf_Internal_Rela * relocs ATTRIBUTE_UNUSED;
+{
+  return TRUE;
+}
+
+/* Return the section that should be marked against GC for a given
+   relocation.  */
+
+static asection *
+ubicom32_elf_gc_mark_hook (sec, info, rel, h, sym)
+     asection *                   sec;
+     struct bfd_link_info *       info ATTRIBUTE_UNUSED;
+     Elf_Internal_Rela *          rel;
+     struct elf_link_hash_entry * h;
+     Elf_Internal_Sym *           sym;
+{
+  if (h != NULL)
+    {
+      switch (ELF32_R_TYPE (rel->r_info))
+	{
+	case R_UBICOM32_GNU_VTINHERIT:
+	case R_UBICOM32_GNU_VTENTRY:
+	  break;
+
+	default:
+	  switch (h->root.type)
+	    {
+	    case bfd_link_hash_defined:
+	    case bfd_link_hash_defweak:
+	      return h->root.u.def.section;
+
+	    case bfd_link_hash_common:
+	      return h->root.u.c.p->section;
+
+	    default:
+	      break;
+	    }
+	}
+    }
+  else
+    {
+      if (!(elf_bad_symtab (sec->owner)
+	    && ELF_ST_BIND (sym->st_info) != STB_LOCAL)
+	  && ! ((sym->st_shndx <= 0 || sym->st_shndx >= SHN_LORESERVE)
+		&& sym->st_shndx != SHN_COMMON))
+	{
+	  return bfd_section_from_elf_index (sec->owner, sym->st_shndx);
+	}
+    }
+
+  return NULL;
+}
+
+/* Look through the relocs for a section during the first phase.
+   Since we don't do .gots or .plts, we just need to consider the
+   virtual table relocs for gc.  */
+
+static bfd_boolean
+ubicom32_elf_check_relocs (abfd, info, sec, relocs)
+     bfd *abfd;
+     struct bfd_link_info *info;
+     asection *sec;
+     const Elf_Internal_Rela *relocs;
+{
+  Elf_Internal_Shdr *symtab_hdr;
+  struct elf_link_hash_entry **sym_hashes, **sym_hashes_end;
+  Elf_Internal_Rela *rel;
+  Elf_Internal_Rela *rel_end;
+  Elf_Internal_Rela *my_rel = ( Elf_Internal_Rela*)relocs;
+  if (info->relocatable)
+    return TRUE;
+
+  symtab_hdr = &elf_tdata (abfd)->symtab_hdr;
+  sym_hashes = elf_sym_hashes (abfd);
+  sym_hashes_end = sym_hashes + symtab_hdr->sh_size/sizeof(Elf32_External_Sym);
+  if (!elf_bad_symtab (abfd))
+    sym_hashes_end -= symtab_hdr->sh_info;
+
+  rel_end = my_rel + sec->reloc_count;
+  for (rel = my_rel; rel < rel_end; rel++)
+    {
+      struct elf_link_hash_entry *h;
+      unsigned long r_symndx;
+
+      r_symndx = ELF32_R_SYM (rel->r_info);
+      if (r_symndx < symtab_hdr->sh_info)
+	h = NULL;
+      else
+	h = sym_hashes [r_symndx - symtab_hdr->sh_info];
+
+      switch (ELF32_R_TYPE (rel->r_info))
+	{
+	  /* This relocation describes the C++ object vtable hierarchy.
+	     Reconstruct it for later use during GC.  */
+	case R_UBICOM32_GNU_VTINHERIT:
+	  if (!bfd_elf_gc_record_vtinherit (abfd, sec, h, rel->r_offset))
+	    return FALSE;
+	  break;
+
+	  /* This relocation describes which C++ vtable entries are actually
+	     used.  Record for later use during GC.  */
+	case R_UBICOM32_GNU_VTENTRY:
+	  if (!bfd_elf_gc_record_vtentry (abfd, sec, h, rel->r_addend))
+	    return FALSE;
+	  break;
+
+	case R_UBICOM32_32:
+	  /* For debug section, change to harvard relocations */
+	  if (memcmp (sec->name, ".debug", 6) == 0
+	      || memcmp (sec->name, ".stab", 5) == 0)
+	    rel->r_info = ELF32_R_INFO (ELF32_R_SYM (rel->r_info), R_UBICOM32_32_HARVARD);
+	  break;
+	}
+    }
+  return TRUE;
+}
+
+static bfd_boolean
+ubicom32_elf_object_p (abfd)
+     bfd *abfd;
+{
+  flagword  mach = elf_elfheader (abfd)->e_flags & 0xffff;
+  bfd_default_set_arch_mach (abfd, bfd_arch_ubicom32, mach);
+  return (((elf_elfheader (abfd)->e_flags & EF_UBICOM32_FDPIC) != 0)
+	  == (IS_FDPIC (abfd)));
+}
+
+
+/* Function to set the ELF flag bits */
+
+static bfd_boolean
+ubicom32_elf_set_private_flags (abfd, flags)
+     bfd *abfd;
+     flagword flags;
+{
+  elf_elfheader (abfd)->e_flags = flags;
+  elf_flags_init (abfd) = TRUE;
+  return TRUE;
+}
+
+static bfd_boolean
+ubicom32_elf_copy_private_bfd_data (ibfd, obfd)
+     bfd *ibfd;
+     bfd *obfd;
+{
+  if (bfd_get_flavour (ibfd) != bfd_target_elf_flavour
+      || bfd_get_flavour (obfd) != bfd_target_elf_flavour)
+    return TRUE;
+
+  BFD_ASSERT (!elf_flags_init (obfd)
+	      || elf_elfheader (obfd)->e_flags == elf_elfheader (ibfd)->e_flags);
+
+  elf_elfheader (obfd)->e_flags = elf_elfheader (ibfd)->e_flags;
+  elf_flags_init (obfd) = TRUE;
+  return TRUE;
+}
+
+/* Merge backend specific data from an object file to the output
+   object file when linking. */
+static bfd_boolean
+ubicom32_elf_merge_private_bfd_data (ibfd, obfd)
+     bfd *ibfd;
+     bfd *obfd;
+{
+  flagword old_flags, new_flags;
+  bfd_boolean error = FALSE;
+
+  new_flags = elf_elfheader (ibfd)->e_flags;
+  old_flags = elf_elfheader (obfd)->e_flags;
+
+#ifdef DEBUG
+  (*_bfd_error_handler) ("old_flags = 0x%.8lx, new_flags = 0x%.8lx, init = %s, filename = %s",
+			 old_flags, new_flags, elf_flags_init (obfd) ? "yes" : "no",
+			 bfd_get_filename (ibfd));
+#endif
+
+  if (!elf_flags_init (obfd))			/* First call, no flags set */
+    {
+      elf_flags_init (obfd) = TRUE;
+      elf_elfheader (obfd)->e_flags = new_flags;
+    }
+  else
+    {
+      if (new_flags != old_flags)
+	{
+	  /* Mismatched flags. */
+	  char *output_cpu_version = ((old_flags &0xffff) == 1) ? "V3" : (((old_flags &0xffff) == 2) ? "V4" : "unknown");
+	  char *input_cpu_version = ((new_flags &0xffff) == 1) ? "V3" : (((new_flags &0xffff) == 2) ? "V4" : "unknown");
+	  char *output_filename = bfd_get_filename (obfd);
+	  char *input_filename = bfd_get_filename (ibfd);
+	  char *output_pic = (old_flags & EF_UBICOM32_PIC_FLAGS) ? ((old_flags & EF_UBICOM32_PIC) ? "FPIC" : "FDPIC") : NULL;
+	  char *input_pic = (new_flags & EF_UBICOM32_PIC_FLAGS) ? ((new_flags & EF_UBICOM32_PIC) ? "FPIC" : "FDPIC") : NULL;
+
+	  (*_bfd_error_handler) ("Linking mismatched file types. Output file = %s file type 0x%.8lx, input file = %s file type 0x%.8lx",
+				 output_filename, old_flags, input_filename, new_flags);
+
+	  if (output_pic)
+	    {
+	      (*_bfd_error_handler)("Output file %s %s for cpu version %s", output_filename, output_pic, output_cpu_version);
+	    }
+	  else
+	    {
+	      (*_bfd_error_handler)("Output file %s for cpu version %s", output_filename, output_cpu_version);
+	    }
+
+	  if (input_pic)
+	    {
+	      (*_bfd_error_handler)("Input file %s %s for cpu version %s", input_filename, input_pic, input_cpu_version);
+	    }
+	  else
+	    {
+	      (*_bfd_error_handler)("Input file %s for cpu version %s", input_filename, input_cpu_version);
+	    }
+
+	  (*_bfd_error_handler) ("Link ABORTED.");
+	  _exit(EXIT_FAILURE);
+	}
+    }
+  if (error)
+    bfd_set_error (bfd_error_bad_value);
+
+  return !error;
+}
+
+static bfd_boolean
+ubicom32_elf_print_private_bfd_data (abfd, ptr)
+     bfd *abfd;
+     PTR ptr;
+{
+  FILE *file = (FILE *) ptr;
+  flagword flags;
+
+  BFD_ASSERT (abfd != NULL && ptr != NULL);
+
+  /* Print normal ELF private data.  */
+  _bfd_elf_print_private_bfd_data (abfd, ptr);
+
+  flags = elf_elfheader (abfd)->e_flags;
+  fprintf (file, _("private flags = 0x%lx:"), (long)flags);
+
+  fputc ('\n', file);
+
+  return TRUE;
+}
+
+bfd_boolean
+ubicom32_elf_discard_info(abfd, cookie, info)
+     bfd *abfd;
+     struct elf_reloc_cookie *cookie ATTRIBUTE_UNUSED;
+     struct bfd_link_info *info;
+
+{
+  unsigned int hasDebugLine=0;
+  unsigned needExclude = 0;
+  asection *o;
+  asection *sec= NULL;
+  bfd_byte *contents = NULL;
+  bfd_byte *contentsEnd;
+  Elf_Internal_Rela *irel, *irelend, *irelbase;
+  Elf_Internal_Shdr *symtab_hdr;
+  Elf_Internal_Sym *isym;
+  Elf_Internal_Sym *isymbuf = NULL;
+  struct debugLineInfoHeader *lh = NULL;
+  unsigned int maxLineInfoEntries = 10;
+  unsigned int offset, contentLength;
+  unsigned char *ptr, *sequence_start;
+  unsigned int setupEntry=1;
+  unsigned int opcode_base, op_code;
+  unsigned int bytes_read;
+
+  for (o = abfd->sections; o != NULL; o = o->next)
+    {
+      if(!hasDebugLine)
+	if(!strcmp(o->name, ".debug_line"))
+	  {
+	    hasDebugLine =1;
+	    sec = o;
+	  }
+
+      /* Keep special sections.  Keep .debug sections.  */
+      if (o->flags & SEC_EXCLUDE)
+	{
+	  needExclude = 1;
+	}
+    }
+
+  if(needExclude == 0 || hasDebugLine ==0)
+    return FALSE;
+
+  /*
+   * you can be here only if we have .debug_line section and some
+   * section is being excudled
+   */
+
+  /*
+   * We need to extract .debug_line section contents and its
+   * relocation contents.
+   */
+
+  /* We don't have to do anything for a relocatable link,
+     if this section does not have relocs */
+  if (info->relocatable
+      || (sec->flags & SEC_RELOC) == 0
+      || sec->reloc_count == 0)
+    return FALSE;
+
+  /* If this is the first time we have been called
+     for this section, initialise the cooked size.
+     if (sec->_cooked_size == 0)
+     sec->_cooked_size = sec->rawsize;
+  */
+
+  symtab_hdr = &elf_tdata (abfd)->symtab_hdr;
+
+  irelbase = _bfd_elf_link_read_relocs (abfd, sec, NULL,
+					(Elf_Internal_Rela *)NULL,
+					info->keep_memory);
+
+  if(irelbase == NULL)
+    return FALSE;
+
+  irelend = irelbase +sec->reloc_count;
+
+  /* Get section contents cached copy if it exists.  */
+  if (contents == NULL)
+    {
+      contents = section_contents(abfd, sec);
+    }
+
+  if (isymbuf == NULL && symtab_hdr->sh_info != 0)
+    {
+      isymbuf = (Elf_Internal_Sym *) symtab_hdr->contents;
+      if (isymbuf == NULL)
+	isymbuf = bfd_elf_get_elf_syms (abfd, symtab_hdr,
+					symtab_hdr->sh_info, 0,
+					NULL, NULL, NULL);
+      if (isymbuf == NULL)
+	return FALSE;
+    }
+
+  /* allocate the line header and initialize it */
+  lh = (struct debugLineInfoHeader *)
+    realloc( (void *)lh, sizeof (struct debugLineInfo)*maxLineInfoEntries +
+	     sizeof(unsigned int));
+
+  lh->numEntries = 0;
+
+  /* the first 4 bytes contains the length */
+  contentLength = bfd_get_32 (abfd, (bfd_byte *)contents);
+  contentsEnd = contents + contentLength + 4;
+
+  ptr = (unsigned char *)contents;
+  ptr +=6;
+  /* read the header length */
+  offset = bfd_get_32(abfd, (bfd_byte *)ptr);
+  ptr += 4;
+  ptr += offset;
+
+  /* extract the base opcode */
+  opcode_base = (unsigned char)contents[14];
+  sequence_start = NULL;
+  while(ptr < (unsigned char *) contentsEnd)
+    {
+      if(setupEntry)
+	{
+	  if(lh->numEntries == maxLineInfoEntries)
+	    {
+	      /* need to do some reallocing. Bump up the entries by 10 */
+	      maxLineInfoEntries += 10;
+	      lh = (struct debugLineInfoHeader *)
+		realloc( (void *)lh,
+			 sizeof (struct debugLineInfo)*maxLineInfoEntries +
+			 sizeof(unsigned int));
+	    }
+
+	  /* zero out the entry */
+	  memset((void *) &lh->linfo[lh->numEntries],
+		 0,
+		 sizeof(struct debugLineInfo));
+	  lh->linfo[lh->numEntries].startOffset = (bfd_byte *)ptr - contents;
+	  setupEntry = 0;
+	  sequence_start = ptr;
+	}
+
+      /* We need to run the state machine */
+      op_code = bfd_get_8 (abfd, (bfd_byte *)ptr);
+      ptr += 1;
+
+      if(op_code >= opcode_base)
+	continue;
+
+      switch(op_code)
+	{
+	case DW_LNS_extended_op:
+	  ptr += 1;	/* ignore length */
+	  op_code = bfd_get_8 (abfd, (bfd_byte *)ptr);
+	  ptr += 1;
+	  switch (op_code)
+	    {
+	    case DW_LNE_end_sequence:
+	      /* end of sequence. Time to record stuff */
+	      lh->linfo[lh->numEntries++].length =
+		(bfd_byte *)ptr - sequence_start;
+	      setupEntry = 1;
+	      break;
+	    case DW_LNE_set_address:
+	      ptr += 4;
+	      break;
+	    case DW_LNE_define_file:
+	      {
+		ptr += (strlen((char *)ptr) + 1);
+		(void) read_unsigned_leb128(abfd, ptr, &bytes_read);
+		ptr += bytes_read;
+		(void) read_unsigned_leb128(abfd, ptr, &bytes_read);
+		ptr += bytes_read;
+		(void) read_unsigned_leb128(abfd, ptr, &bytes_read);
+		ptr += bytes_read;
+		break;
+	      }
+	    }
+	case DW_LNS_negate_stmt:
+	case DW_LNS_set_basic_block:
+	case DW_LNS_const_add_pc:
+	case DW_LNS_copy:
+	  break;
+	case DW_LNS_advance_pc:
+	case DW_LNS_set_file:
+	case DW_LNS_set_column:
+	  (void) read_unsigned_leb128 (abfd, ptr, &bytes_read);
+	  ptr += bytes_read;
+	  break;
+	case DW_LNS_advance_line:
+	  (void) read_signed_leb128 (abfd, ptr, &bytes_read);
+	  ptr += bytes_read;
+	  break;
+	case DW_LNS_fixed_advance_pc:
+	  ptr += 2;
+	  break;
+	}
+    }
+
+  /*
+   * now scan through the relocations and match the
+   * lineinfo to a section name
+   */
+  for(irel = irelbase; irel< irelend; irel++)
+    {
+      bfd_vma offset;
+      asection *sym_sec;
+      int i;
+
+      offset = irel->r_offset;
+      isym = isymbuf + ELF32_R_SYM (irel->r_info);
+
+      sym_sec = bfd_section_from_elf_index (abfd, isym->st_shndx);
+
+      /* find which line section this rel entry belongs to */
+      for(i=0; i< (int) lh->numEntries; i++)
+	{
+	  if(lh->linfo[i].startOffset <= offset &&
+	     offset < lh->linfo[i].startOffset + lh->linfo[i].length)
+	    break;
+	}
+
+      if(lh->linfo[i].sectionName == NULL)
+	lh->linfo[i].sectionName = strdup(sym_sec->name);
+    }
+
+  /* now scan through and find the exclude sections */
+  for (o = abfd->sections; o != NULL; o = o->next)
+    {
+      if (o->flags & SEC_EXCLUDE)
+	{
+	  /* go through the lh entries and mark as discard */
+	  int i;
+	  for(i=0; i< (int) lh->numEntries; i++)
+	    {
+	      if(!strcmp(o->name, lh->linfo[i].sectionName))
+		lh->linfo[i].discard = 1;
+	    }
+	}
+    }
+
+  elf_section_data(sec)->sec_info = (PTR)(lh);
+
+  return TRUE;
+}
+
+
+/* An extension of the elf hash table data structure, containing some
+   additional Blackfin-specific data.  */
+struct ubicom32fdpic_elf_link_hash_table
+{
+  struct elf_link_hash_table elf;
+
+  /* A pointer to the .got section.  */
+  asection *sgot;
+  /* A pointer to the .rel.got section.  */
+  asection *sgotrel;
+  /* A pointer to the .rofixup section.  */
+  asection *sgotfixup;
+  /* A pointer to the .plt section.  */
+  asection *splt;
+  /* A pointer to the .rel.plt section.  */
+  asection *spltrel;
+  /* GOT base offset.  */
+  bfd_vma got0;
+  /* Location of the first non-lazy PLT entry, i.e., the number of
+     bytes taken by lazy PLT entries.  */
+  bfd_vma plt0;
+  /* A hash table holding information about which symbols were
+     referenced with which PIC-related relocations.  */
+  struct htab *relocs_info;
+};
+
+/* Get the Ubicom32 ELF linker hash table from a link_info structure.  */
+
+#define ubicom32fdpic_hash_table(info) \
+  ((struct ubicom32fdpic_elf_link_hash_table *) ((info)->hash))
+
+#define ubicom32fdpic_got_section(info) \
+  (ubicom32fdpic_hash_table (info)->sgot)
+#define ubicom32fdpic_gotrel_section(info) \
+  (ubicom32fdpic_hash_table (info)->sgotrel)
+#define ubicom32fdpic_gotfixup_section(info) \
+  (ubicom32fdpic_hash_table (info)->sgotfixup)
+#define ubicom32fdpic_plt_section(info) \
+  (ubicom32fdpic_hash_table (info)->splt)
+#define ubicom32fdpic_pltrel_section(info) \
+  (ubicom32fdpic_hash_table (info)->spltrel)
+#define ubicom32fdpic_relocs_info(info) \
+  (ubicom32fdpic_hash_table (info)->relocs_info)
+#define ubicom32fdpic_got_initial_offset(info) \
+  (ubicom32fdpic_hash_table (info)->got0)
+#define ubicom32fdpic_plt_initial_offset(info) \
+  (ubicom32fdpic_hash_table (info)->plt0)
+
+/* The name of the dynamic interpreter.  This is put in the .interp
+   section.  */
+
+#define ELF_DYNAMIC_INTERPRETER "/lib/ld.so.1"
+
+#define DEFAULT_STACK_SIZE 0x20000
+long ubicom32fdpic_stack_size = DEFAULT_STACK_SIZE;
+
+/* This structure is used to collect the number of entries present in
+   each addressable range of the got.  */
+struct _ubicom32fdpic_dynamic_got_info
+{
+  /* Several bits of information about the current link.  */
+  struct bfd_link_info *info;
+  /* Total size needed for GOT entries. */
+  bfd_vma gotoffset_lo, gotoffset_hi;
+  /* Total size needed for function descriptor entries. */
+  bfd_vma fd_gotoffset_lo, fd_gotoffset_hi;
+  /* Total size needed function descriptor entries referenced in PLT
+     entries, that would be profitable to place in offsets close to
+     the PIC register.  */
+  bfd_vma fdplt, privfdplt;
+  /* Total size needed by lazy PLT entries.  */
+  bfd_vma lzplt;
+  bfd_vma num_plts;
+
+  /* Number of relocations carried over from input object files.  */
+  unsigned long relocs;
+  /* Number of fixups introduced by relocations in input object files.  */
+  unsigned long fixups;
+};
+
+/* This structure is used to assign offsets to got entries, function
+   descriptors, plt entries and lazy plt entries.  */
+struct ubicom32fdpic_dynamic_got_plt_info
+{
+  /* Summary information collected with _bfinfdpic_count_got_plt_entries.  */
+  struct _ubicom32fdpic_dynamic_got_info g;
+
+  bfd_signed_vma current_got;	/* This will be used during got entry allocation */
+  bfd_signed_vma current_fd;	/* This will be used for function descriptro allocation. The numbers will go negative */
+  bfd_signed_vma current_privfd;	/* This will be used for function descriptro allocation. The numbers will go negative */
+  bfd_vma current_plt;		/* This is the offset to the PLT entry. We will need this to resolve the call entries. */
+  bfd_vma current_plt_trampoline; /* This is the offset to the PLT trampoline entry. */
+  bfd_vma total_fdplt;		/* Total size of function descriptors. This is the memory above GOT pointer. */
+  bfd_vma total_got;		/* This is the total of got entries for got_lo and got_funcdesc_lo references. */
+  bfd_vma total_lzplt;		/* This is the total area for the PLT entries. This does not have the trampoline entry. */
+  bfd_vma total_trampoline;	/* This is the total area for the PLT trampoline entries. */
+};
+
+/* Decide whether a reference to a symbol can be resolved locally or
+   not.  If the symbol is protected, we want the local address, but
+   its function descriptor must be assigned by the dynamic linker.  */
+#define UBICOM32FDPIC_SYM_LOCAL(INFO, H) \
+  (_bfd_elf_symbol_refs_local_p ((H), (INFO), 1) \
+   || ! elf_hash_table (INFO)->dynamic_sections_created)
+#define UBICOM32FDPIC_FUNCDESC_LOCAL(INFO, H) \
+  ((H)->dynindx == -1 || ! elf_hash_table (INFO)->dynamic_sections_created)
+
+/* This structure collects information on what kind of GOT, PLT or
+   function descriptors are required by relocations that reference a
+   certain symbol.  */
+struct ubicom32fdpic_relocs_info
+{
+  /* The index of the symbol, as stored in the relocation r_info, if
+     we have a local symbol; -1 otherwise.  */
+  long symndx;
+  union
+  {
+    /* The input bfd in which the symbol is defined, if it's a local
+       symbol.  */
+    bfd *abfd;
+    /* If symndx == -1, the hash table entry corresponding to a global
+       symbol (even if it turns out to bind locally, in which case it
+       should ideally be replaced with section's symndx + addend).  */
+    struct elf_link_hash_entry *h;
+  } d;
+  /* The addend of the relocation that references the symbol.  */
+  bfd_vma addend;
+
+  /* The fields above are used to identify an entry.  The fields below
+     contain information on how an entry is used and, later on, which
+     locations it was assigned.  */
+  /* The following 2 fields record whether the symbol+addend above was
+     ever referenced with a GOT relocation.  The 17M4 suffix indicates a
+     GOT17M4 relocation; hilo is used for GOTLO/GOTHI pairs.  */
+  unsigned gotoffset_lo;
+  unsigned gotoffset_hi;
+  /* Whether a FUNCDESC relocation references symbol+addend.  */
+  unsigned fd;
+  /* Whether a FUNCDESC_GOT relocation references symbol+addend.  */
+  unsigned fd_gotoffset_lo;
+  unsigned fd_gotoffset_hi;
+  /* Whether symbol+addend is referenced with GOTOFF17M4, GOTOFFLO or
+     GOTOFFHI relocations.  The addend doesn't really matter, since we
+     envision that this will only be used to check whether the symbol
+     is mapped to the same segment as the got.  */
+  unsigned gotoff;
+  /* Whether symbol+addend is referenced by a LABEL24 relocation.  */
+  unsigned call;
+  /* Whether symbol+addend is referenced by a 32 or FUNCDESC_VALUE
+     relocation.  */
+  unsigned sym;
+  /* Whether we need a PLT entry for a symbol.  Should be implied by
+     something like:
+     (call && symndx == -1 && ! BFINFDPIC_SYM_LOCAL (info, d.h))  */
+  unsigned plt:1;
+  /* Whether a function descriptor should be created in this link unit
+     for symbol+addend.  Should be implied by something like:
+     (plt || fd_gotoffset_lo || fd_gotoffset_hi
+     || ((fd || fdgot17m4 || fdgothilo)
+     && (symndx != -1 || BFINFDPIC_FUNCDESC_LOCAL (info, d.h))))  */
+  unsigned privfd:1;
+  /* Whether a lazy PLT entry is needed for this symbol+addend.
+     Should be implied by something like:
+     (privfd && symndx == -1 && ! BFINFDPIC_SYM_LOCAL (info, d.h)
+     && ! (info->flags & DF_BIND_NOW))  */
+  unsigned lazyplt:1;
+  /* Whether we've already emitted GOT relocations and PLT entries as
+     needed for this symbol.  */
+  unsigned done:1;
+
+  /* The number of R_byte4_data, R_BFIN_FUNCDESC and R_BFIN_FUNCDESC_VALUE
+     relocations referencing the symbol.  */
+  unsigned relocs32, relocsfd, relocsfdv;
+
+  /* The number of .rofixups entries and dynamic relocations allocated
+     for this symbol, minus any that might have already been used.  */
+  unsigned fixups, dynrelocs;
+
+  /* The offsets of the GOT entries assigned to symbol+addend, to the
+     function descriptor's address, and to a function descriptor,
+     respectively.  Should be zero if unassigned.  The offsets are
+     counted from the value that will be assigned to the PIC register,
+     not from the beginning of the .got section.  */
+  bfd_signed_vma got_entry, fdgot_entry, fd_entry;
+  /* The offsets of the PLT entries assigned to symbol+addend,
+     non-lazy and lazy, respectively.  If unassigned, should be
+     (bfd_vma)-1.  */
+  bfd_vma plt_entry;
+  bfd_vma plt_trampoline_entry;
+
+  /* plt_type is 1 for Sequence type 2 (0 - 255) it is 2 for > 255 */
+  bfd_vma plt_type;
+
+  /* rel_offset. Plt relocation offset need to be encoded into the plt entry. */
+  bfd_vma rel_offset;
+
+  /* bfd_vma lzplt_entry; not used in ubicom32 */
+};
+
+/* Compute the total GOT size required by each symbol in each range.
+   Symbols may require up to 4 words in the GOT: an entry pointing to
+   the symbol, an entry pointing to its function descriptor, and a
+   private function descriptors taking two words.  */
+
+#if 0
+static bfd_vma plt_code[] = {
+  0xc90f0000,	//movei d15,#0
+  0x0123e30f,	//lea.4 a3,(a0,d15)
+  0x0124630f,	//move.4 a4,(a0,d15)
+  0x01206461,	//move.4 a0,4(a3)
+  0xf0800080,	//calli a4,0(a4)
+};
+#endif
+
+static bfd_vma plt_trampoline[] = {
+  0xc9280000,   //	movei mac_hi,#0
+  0x00002400,   //	ret (a0)
+};
+
+static bfd_vma plt_code_seq1[] = {
+  0xc90fffe8,	//movei d15,#-24
+  0x0123e30f,	//lea.4 a3,(a0,d15)
+  0x01206461,	//move.4 a0,4(a3)
+  0x00002460,	//ret (a3)
+};
+
+static bfd_vma plt_code_seq2[] = {
+  0x0123f71f,   //	pdec a3,4(a0)
+  0x01206461,   //	move.4 a0,4(a3)
+  0x00002460,   //	ret (a3)
+};
+
+#define NUM_PLT_CODE_WORDS (sizeof (plt_code) / sizeof (bfd_vma))
+#define LZPLT_NORMAL_SIZE (sizeof(plt_code))
+
+#define NUM_PLT_CODE_WORDS_SEQ1 (sizeof (plt_code_seq1) / sizeof (bfd_vma))
+#define LZPLT_SIZE_SEQ1 (sizeof(plt_code_seq1))
+
+#define NUM_PLT_CODE_WORDS_SEQ2 (sizeof (plt_code_seq2) / sizeof (bfd_vma))
+#define LZPLT_SIZE_SEQ2 (sizeof(plt_code_seq2))
+
+#define NUM_PLT_TRAMPOLINE_WORDS (sizeof (plt_trampoline) / sizeof (bfd_vma))
+#define PLT_TRAMPOLINE_SIZE (sizeof(plt_trampoline))
+
+//#define FUNCTION_DESCRIPTOR_SIZE 12
+#define FUNCTION_DESCRIPTOR_SIZE 8
+/* Decide whether a reference to a symbol can be resolved locally or
+   not.  If the symbol is protected, we want the local address, but
+   its function descriptor must be assigned by the dynamic linker.  */
+#define UBICOM32FPIC_SYM_LOCAL(INFO, H) \
+  (_bfd_elf_symbol_refs_local_p ((H), (INFO), 1) \
+   || ! elf_hash_table (INFO)->dynamic_sections_created)
+#define UBICOM32FPIC_FUNCDESC_LOCAL(INFO, H) \
+  ((H)->dynindx == -1 || ! elf_hash_table (INFO)->dynamic_sections_created)
+
+
+static int
+ubicom32fdpic_count_got_plt_entries (void **entryp, void *dinfo_)
+{
+  struct ubicom32fdpic_relocs_info *entry = *entryp;
+  struct _ubicom32fdpic_dynamic_got_info *dinfo = dinfo_;
+  unsigned relocs = 0, fixups = 0;
+
+  /* Allocate space for a GOT entry pointing to the symbol.  */
+  if (entry->gotoffset_lo)
+    {
+      dinfo->gotoffset_lo += 4;
+      entry->relocs32++;
+    }
+
+  /* Allocate space for a GOT entry pointing to the function
+     descriptor.  */
+  if (entry->fd_gotoffset_lo)
+    {
+      dinfo->gotoffset_lo += 4;
+      entry->relocsfd++;
+    }
+  else if (entry->fd_gotoffset_hi)
+    {
+      dinfo->gotoffset_lo += 4;
+      entry->relocsfd++;
+    }
+
+  /* Decide whether we need a PLT entry, a function descriptor in the
+     GOT, and a lazy PLT entry for this symbol.  */
+  entry->plt = entry->call
+    && entry->symndx == -1 && ! UBICOM32FPIC_SYM_LOCAL (dinfo->info, entry->d.h)
+    && elf_hash_table (dinfo->info)->dynamic_sections_created;
+  entry->privfd = entry->plt
+    || ((entry->fd_gotoffset_lo || entry->fd_gotoffset_hi || entry->fd)
+	&& (entry->symndx != -1
+	    || UBICOM32FPIC_FUNCDESC_LOCAL (dinfo->info, entry->d.h)));
+  entry->lazyplt = entry->privfd
+    && entry->symndx == -1 && ! UBICOM32FPIC_SYM_LOCAL (dinfo->info, entry->d.h)
+    && ! (dinfo->info->flags & DF_BIND_NOW)
+    && elf_hash_table (dinfo->info)->dynamic_sections_created;
+
+  /* Allocate space for a function descriptor.  */
+  if (entry->privfd && entry->plt)
+    {
+      dinfo->fdplt += FUNCTION_DESCRIPTOR_SIZE;
+      entry->relocsfdv++;
+    }
+  else if (entry->privfd)
+    {
+      /* privfd with plt = 0 */
+      //printf("Privfd set with plt 0 gotoff_lo = %d fd_gotoffset_lo = %d entry = 0x%x\n", entry->gotoffset_lo, entry->fd_gotoffset_lo, entry);
+      //printf("symnxd = 0x%x sym_local = %d funcdesc_local = %d\n", entry->symndx,
+      //     UBICOM32FPIC_SYM_LOCAL (dinfo->info, entry->d.h),
+      //     UBICOM32FPIC_FUNCDESC_LOCAL (dinfo->info, entry->d.h));
+      //printf("Name = %s\n\n", entry->d.h->root.root.string);
+      dinfo->privfdplt += FUNCTION_DESCRIPTOR_SIZE;
+      entry->relocsfdv++;
+    }
+
+
+  if (entry->lazyplt)
+    {
+      //dinfo->lzplt += LZPLT_NORMAL_SIZE;
+      dinfo->num_plts++;
+
+#if 0
+      if (dinfo->num_plts > 256)
+	dinfo->lzplt += LZPLT_SIZE_SEQ1;
+      else
+	dinfo->lzplt += LZPLT_SIZE_SEQ2;
+
+      DPRINTF("lzplt %d num_plt %d\n",  dinfo->lzplt, dinfo->num_plts);
+#endif
+    }
+
+  if (!dinfo->info->executable || dinfo->info->pie)
+    relocs = entry->relocs32 + entry->relocsfd + entry->relocsfdv;
+  else
+    {
+      if (entry->symndx != -1 || UBICOM32FPIC_SYM_LOCAL (dinfo->info, entry->d.h))
+	{
+	  if (entry->symndx != -1
+	      || entry->d.h->root.type != bfd_link_hash_undefweak)
+	    fixups += entry->relocs32 + 2 * entry->relocsfdv;
+	}
+      else
+	relocs += entry->relocs32 + entry->relocsfdv;
+
+      if (entry->symndx != -1
+	  || UBICOM32FPIC_FUNCDESC_LOCAL (dinfo->info, entry->d.h))
+	{
+	  if (entry->symndx != -1
+	      || entry->d.h->root.type != bfd_link_hash_undefweak)
+	    fixups += entry->relocsfd;
+	}
+      else
+	relocs += entry->relocsfd;
+    }
+
+  entry->dynrelocs += relocs;
+  entry->fixups += fixups;
+  dinfo->relocs += relocs;
+  dinfo->fixups += fixups;
+
+  return 1;
+}
+
+/* Create a Ubicom32 ELF linker hash table.  */
+static struct bfd_link_hash_table *
+ubicom32fdpic_elf_link_hash_table_create (bfd *abfd)
+{
+  struct ubicom32fdpic_elf_link_hash_table *ret;
+  bfd_size_type amt = sizeof (struct ubicom32fdpic_elf_link_hash_table);
+
+  ret = bfd_zalloc (abfd, amt);
+  if (ret == NULL)
+    return NULL;
+
+  if (!_bfd_elf_link_hash_table_init (&ret->elf, abfd,
+				      _bfd_elf_link_hash_newfunc,
+				      sizeof (struct elf_link_hash_entry)))
+    {
+      free (ret);
+      return NULL;
+    }
+
+  return &ret->elf.root;
+}
+
+/* Compute a hash with the key fields of an ubicom32fdpic_relocs_info entry.  */
+static hashval_t
+ubicom32fdpic_relocs_info_hash (const void *entry_)
+{
+  const struct ubicom32fdpic_relocs_info *entry = entry_;
+
+  return (entry->symndx == -1
+	  ? (long) entry->d.h->root.root.hash
+	  : entry->symndx + (long) entry->d.abfd->id * 257) + entry->addend;
+}
+
+/* Test whether the key fields of two ubicom32fdpic_relocs_info entries are
+   identical.  */
+static int
+ubicom32fdpic_relocs_info_eq (const void *entry1, const void *entry2)
+{
+  const struct ubicom32fdpic_relocs_info *e1 = entry1;
+  const struct ubicom32fdpic_relocs_info *e2 = entry2;
+
+  return e1->symndx == e2->symndx && e1->addend == e2->addend
+    && (e1->symndx == -1 ? e1->d.h == e2->d.h : e1->d.abfd == e2->d.abfd);
+}
+
+/* Find or create an entry in a hash table HT that matches the key
+   fields of the given ENTRY.  If it's not found, memory for a new
+   entry is allocated in ABFD's obstack.  */
+static struct ubicom32fdpic_relocs_info *
+ubicom32fdpic_relocs_info_find (struct htab *ht,
+				bfd *abfd,
+				const struct ubicom32fdpic_relocs_info *entry,
+				enum insert_option insert)
+{
+  struct ubicom32fdpic_relocs_info **loc =
+    (struct ubicom32fdpic_relocs_info **) htab_find_slot (ht, entry, insert);
+
+  if (! loc)
+    return NULL;
+
+  if (*loc)
+    return *loc;
+
+  *loc = bfd_zalloc (abfd, sizeof (**loc));
+
+  if (! *loc)
+    return *loc;
+
+  (*loc)->symndx = entry->symndx;
+  (*loc)->d = entry->d;
+  (*loc)->addend = entry->addend;
+  (*loc)->plt_entry = (bfd_vma)-1;
+  /* (*loc)->lzplt_entry = (bfd_vma)-1; */
+
+  return *loc;
+}
+
+/* Obtain the address of the entry in HT associated with H's symbol +
+   addend, creating a new entry if none existed.  ABFD is only used
+   for memory allocation purposes.  */
+inline static struct ubicom32fdpic_relocs_info *
+ubicom32fdpic_relocs_info_for_global (struct htab *ht,
+				      bfd *abfd,
+				      struct elf_link_hash_entry *h,
+				      bfd_vma addend,
+				      enum insert_option insert)
+{
+  struct ubicom32fdpic_relocs_info entry;
+
+  entry.symndx = -1;
+  entry.d.h = h;
+  entry.addend = addend;
+
+  return ubicom32fdpic_relocs_info_find (ht, abfd, &entry, insert);
+}
+
+/* Obtain the address of the entry in HT associated with the SYMNDXth
+   local symbol of the input bfd ABFD, plus the addend, creating a new
+   entry if none existed.  */
+inline static struct ubicom32fdpic_relocs_info *
+ubicom32fdpic_relocs_info_for_local (struct htab *ht,
+				     bfd *abfd,
+				     long symndx,
+				     bfd_vma addend,
+				     enum insert_option insert)
+{
+  struct ubicom32fdpic_relocs_info entry;
+
+  entry.symndx = symndx;
+  entry.d.abfd = abfd;
+  entry.addend = addend;
+
+  return ubicom32fdpic_relocs_info_find (ht, abfd, &entry, insert);
+}
+
+/* Merge fields set by check_relocs() of two entries that end up being
+   mapped to the same (presumably global) symbol.  */
+
+inline static void
+ubicom32fdpic_pic_merge_early_relocs_info (struct ubicom32fdpic_relocs_info *e2,
+					   struct ubicom32fdpic_relocs_info const *e1)
+{
+  e2->gotoffset_lo |= e1->gotoffset_lo;
+  e2->gotoffset_hi |= e1->gotoffset_hi;
+  e2->fd_gotoffset_lo |= e1->fd_gotoffset_lo;
+  e2->fd_gotoffset_hi |= e1->fd_gotoffset_hi;
+  e2->fd |= e1->fd;
+  e2->gotoff |= e1->gotoff;
+  e2->call |= e1->call;
+  e2->sym |= e1->sym;
+}
+
+/* Add a dynamic relocation to the SRELOC section.  */
+
+inline static bfd_vma
+ubicom32fdpic_add_dyn_reloc (bfd *output_bfd, asection *sreloc, bfd_vma offset,
+			     int reloc_type, long dynindx, bfd_vma addend,
+			     struct ubicom32fdpic_relocs_info *entry)
+{
+  Elf_Internal_Rela outrel;
+  bfd_vma reloc_offset;
+
+  outrel.r_offset = offset;
+  outrel.r_info = ELF32_R_INFO (dynindx, reloc_type);
+  outrel.r_addend = addend;
+
+  reloc_offset = sreloc->reloc_count * sizeof (Elf32_External_Rel);
+  BFD_ASSERT (reloc_offset < sreloc->size);
+  bfd_elf32_swap_reloc_out (output_bfd, &outrel,
+			    sreloc->contents + reloc_offset);
+  sreloc->reloc_count++;
+
+  /* If the entry's index is zero, this relocation was probably to a
+     linkonce section that got discarded.  We reserved a dynamic
+     relocation, but it was for another entry than the one we got at
+     the time of emitting the relocation.  Unfortunately there's no
+     simple way for us to catch this situation, since the relocation
+     is cleared right before calling relocate_section, at which point
+     we no longer know what the relocation used to point to.  */
+  if (entry->symndx)
+    {
+      BFD_ASSERT (entry->dynrelocs > 0);
+      entry->dynrelocs--;
+    }
+
+  return reloc_offset;
+}
+
+/* Add a fixup to the ROFIXUP section.  */
+
+static bfd_vma
+ubicom32fdpic_add_rofixup (bfd *output_bfd, asection *rofixup, bfd_vma offset,
+			   struct ubicom32fdpic_relocs_info *entry)
+{
+  bfd_vma fixup_offset;
+
+  if (rofixup->flags & SEC_EXCLUDE)
+    return -1;
+
+  fixup_offset = rofixup->reloc_count * 4;
+  if (rofixup->contents)
+    {
+      BFD_ASSERT (fixup_offset < rofixup->size);
+      bfd_put_32 (output_bfd, offset, rofixup->contents + fixup_offset);
+    }
+  rofixup->reloc_count++;
+
+  if (entry && entry->symndx)
+    {
+      /* See discussion about symndx == 0 in _ubicom32fdpic_add_dyn_reloc
+	 above.  */
+      BFD_ASSERT (entry->fixups > 0);
+      entry->fixups--;
+    }
+
+  return fixup_offset;
+}
+
+/* Find the segment number in which OSEC, and output section, is
+   located.  */
+
+static unsigned
+ubicom32fdpic_osec_to_segment (bfd *output_bfd, asection *osec)
+{
+  Elf_Internal_Phdr *p = _bfd_elf_find_segment_containing_section (output_bfd, osec);
+
+  return (p != NULL) ? p - elf_tdata (output_bfd)->phdr : -1;
+}
+
+inline static bfd_boolean
+ubicom32fdpic_osec_readonly_p (bfd *output_bfd, asection *osec)
+{
+  unsigned seg = ubicom32fdpic_osec_to_segment (output_bfd, osec);
+
+  return ! (elf_tdata (output_bfd)->phdr[seg].p_flags & PF_W);
+}
+
+#if 0
+static bfd_vma plt_trampoline[] = {
+  0x00002400,	//ret (a0)
+};
+#endif
+
+/* Generate relocations for GOT entries, function descriptors, and
+   code for PLT and lazy PLT entries.  */
+
+static bfd_boolean
+ubicom32fdpic_emit_got_relocs_plt_entries (struct ubicom32fdpic_relocs_info *entry,
+					   bfd *output_bfd,
+					   struct bfd_link_info *info,
+					   asection *sec,
+					   Elf_Internal_Sym *sym,
+					   bfd_vma addend)
+
+{
+  bfd_vma fd_lazy_rel_offset = (bfd_vma)-1;
+  int dynindx = -1;
+
+  if (entry->done)
+    return TRUE;
+  entry->done = 1;
+
+  if (entry->got_entry || entry->fdgot_entry || entry->fd_entry)
+    {
+      DPRINTF(" emit %p got %d fdgot %d fd %d addend %d\n", entry, entry->got_entry, entry->fdgot_entry, entry->fd_entry, addend);
+      /* If the symbol is dynamic, consider it for dynamic
+	 relocations, otherwise decay to section + offset.  */
+      if (entry->symndx == -1 && entry->d.h->dynindx != -1)
+	dynindx = entry->d.h->dynindx;
+      else
+	{
+	  if (sec->output_section
+	      && ! bfd_is_abs_section (sec->output_section)
+	      && ! bfd_is_und_section (sec->output_section))
+	    dynindx = elf_section_data (sec->output_section)->dynindx;
+	  else
+	    dynindx = 0;
+	}
+    }
+
+  /* Generate relocation for GOT entry pointing to the symbol.  */
+  if (entry->got_entry)
+    {
+      DPRINTF(" emit got entry %d:%p\n", entry->got_entry, entry);
+
+      int idx = dynindx;
+      bfd_vma ad = addend;
+
+      /* If the symbol is dynamic but binds locally, use
+	 section+offset.  */
+      if (sec && (entry->symndx != -1
+		  || UBICOM32FDPIC_SYM_LOCAL (info, entry->d.h)))
+	{
+	  if (entry->symndx == -1)
+	    ad += entry->d.h->root.u.def.value;
+	  else
+	    ad += sym->st_value;
+	  ad += sec->output_offset;
+	  if (sec->output_section && elf_section_data (sec->output_section))
+	    idx = elf_section_data (sec->output_section)->dynindx;
+	  else
+	    idx = 0;
+	}
+
+      /* If we're linking an executable at a fixed address, we can
+	 omit the dynamic relocation as long as the symbol is local to
+	 this module.  */
+      if (info->executable && !info->pie
+	  && (entry->symndx != -1
+	      || UBICOM32FDPIC_SYM_LOCAL (info, entry->d.h)))
+	{
+	  if (sec)
+	    ad += sec->output_section->vma;
+	  if (entry->symndx != -1
+	      || entry->d.h->root.type != bfd_link_hash_undefweak)
+	    ubicom32fdpic_add_rofixup (output_bfd,
+				       ubicom32fdpic_gotfixup_section (info),
+				       ubicom32fdpic_got_section (info)->output_section->vma
+				       + ubicom32fdpic_got_section (info)->output_offset
+				       + ubicom32fdpic_got_initial_offset (info)
+				       + entry->got_entry, entry);
+	}
+      else
+	ubicom32fdpic_add_dyn_reloc (output_bfd, ubicom32fdpic_gotrel_section (info),
+				     _bfd_elf_section_offset
+				     (output_bfd, info,
+				      ubicom32fdpic_got_section (info),
+				      ubicom32fdpic_got_initial_offset (info)
+				      + entry->got_entry)
+				     + ubicom32fdpic_got_section (info)
+				     ->output_section->vma
+				     + ubicom32fdpic_got_section (info)->output_offset,
+				     R_UBICOM32_32, idx, ad, entry);
+
+      bfd_put_32 (output_bfd, ad,
+		  ubicom32fdpic_got_section (info)->contents
+		  + ubicom32fdpic_got_initial_offset (info)
+		  + entry->got_entry);
+    }
+
+  /* Generate relocation for GOT entry pointing to a canonical
+     function descriptor.  */
+  if (entry->fdgot_entry)
+    {
+      DPRINTF(" emit got fdgot entry %d:%p\n", entry->fdgot_entry, entry);
+
+      int reloc, idx;
+      bfd_vma ad = 0;
+
+      if (! (entry->symndx == -1
+	     && entry->d.h->root.type == bfd_link_hash_undefweak
+	     && UBICOM32FDPIC_SYM_LOCAL (info, entry->d.h)))
+	{
+	  /* If the symbol is dynamic and there may be dynamic symbol
+	     resolution because we are, or are linked with, a shared
+	     library, emit a FUNCDESC relocation such that the dynamic
+	     linker will allocate the function descriptor.  If the
+	     symbol needs a non-local function descriptor but binds
+	     locally (e.g., its visibility is protected, emit a
+	     dynamic relocation decayed to section+offset.  */
+	  if (entry->symndx == -1
+	      && ! UBICOM32FDPIC_FUNCDESC_LOCAL (info, entry->d.h)
+	      && UBICOM32FDPIC_SYM_LOCAL (info, entry->d.h)
+	      && !(info->executable && !info->pie))
+	    {
+	      reloc = R_UBICOM32_FUNCDESC;
+	      idx = elf_section_data (entry->d.h->root.u.def.section
+				      ->output_section)->dynindx;
+	      ad = entry->d.h->root.u.def.section->output_offset
+		+ entry->d.h->root.u.def.value;
+	    }
+	  else if (entry->symndx == -1
+		   && ! UBICOM32FDPIC_FUNCDESC_LOCAL (info, entry->d.h))
+	    {
+	      reloc = R_UBICOM32_FUNCDESC;
+	      idx = dynindx;
+	      ad = addend;
+	      if (ad)
+		return FALSE;
+	    }
+	  else
+	    {
+	      /* Otherwise, we know we have a private function descriptor,
+		 so reference it directly.  */
+	      if (elf_hash_table (info)->dynamic_sections_created)
+		BFD_ASSERT (entry->privfd);
+	      reloc = R_UBICOM32_32;
+	      idx = elf_section_data (ubicom32fdpic_got_section (info)
+				      ->output_section)->dynindx;
+	      ad = ubicom32fdpic_got_section (info)->output_offset
+		+ ubicom32fdpic_got_initial_offset (info) + entry->fd_entry;
+	    }
+
+	  /* If there is room for dynamic symbol resolution, emit the
+	     dynamic relocation.  However, if we're linking an
+	     executable at a fixed location, we won't have emitted a
+	     dynamic symbol entry for the got section, so idx will be
+	     zero, which means we can and should compute the address
+	     of the private descriptor ourselves.  */
+	  if (info->executable && !info->pie
+	      && (entry->symndx != -1
+		  || UBICOM32FDPIC_FUNCDESC_LOCAL (info, entry->d.h)))
+	    {
+	      ad += ubicom32fdpic_got_section (info)->output_section->vma;
+	      ubicom32fdpic_add_rofixup (output_bfd,
+					 ubicom32fdpic_gotfixup_section (info),
+					 ubicom32fdpic_got_section (info)
+					 ->output_section->vma
+					 + ubicom32fdpic_got_section (info)
+					 ->output_offset
+					 + ubicom32fdpic_got_initial_offset (info)
+					 + entry->fdgot_entry, entry);
+	    }
+	  else
+	    ubicom32fdpic_add_dyn_reloc (output_bfd,
+					 ubicom32fdpic_gotrel_section (info),
+					 _bfd_elf_section_offset
+					 (output_bfd, info,
+					  ubicom32fdpic_got_section (info),
+					  ubicom32fdpic_got_initial_offset (info)
+					  + entry->fdgot_entry)
+					 + ubicom32fdpic_got_section (info)
+					 ->output_section->vma
+					 + ubicom32fdpic_got_section (info)
+					 ->output_offset,
+					 reloc, idx, ad, entry);
+	}
+
+      bfd_put_32 (output_bfd, ad,
+		  ubicom32fdpic_got_section (info)->contents
+		  + ubicom32fdpic_got_initial_offset (info)
+		  + entry->fdgot_entry);
+    }
+
+  /* Generate relocation to fill in a private function descriptor in
+     the GOT.  */
+  if (entry->fd_entry)
+    {
+
+      int idx = dynindx;
+      bfd_vma ad = addend;
+      bfd_vma ofst;
+      long lowword, highword;
+
+      /* If the symbol is dynamic but binds locally, use
+	 section+offset.  */
+      if (sec && (entry->symndx != -1
+		  || UBICOM32FDPIC_SYM_LOCAL (info, entry->d.h)))
+	{
+	  if (entry->symndx == -1)
+	    ad += entry->d.h->root.u.def.value;
+	  else
+	    ad += sym->st_value;
+	  ad += sec->output_offset;
+	  if (sec->output_section && elf_section_data (sec->output_section))
+	    idx = elf_section_data (sec->output_section)->dynindx;
+	  else
+	    idx = 0;
+	}
+
+      /* If we're linking an executable at a fixed address, we can
+	 omit the dynamic relocation as long as the symbol is local to
+	 this module.  */
+      if (info->executable && !info->pie
+	  && (entry->symndx != -1 || UBICOM32FDPIC_SYM_LOCAL (info, entry->d.h)))
+	{
+	  if (sec)
+	    ad += sec->output_section->vma;
+	  ofst = 0;
+	  if (entry->symndx != -1
+	      || entry->d.h->root.type != bfd_link_hash_undefweak)
+	    {
+	      ubicom32fdpic_add_rofixup (output_bfd,
+					 ubicom32fdpic_gotfixup_section (info),
+					 ubicom32fdpic_got_section (info)
+					 ->output_section->vma
+					 + ubicom32fdpic_got_section (info)
+					 ->output_offset
+					 + ubicom32fdpic_got_initial_offset (info)
+					 + entry->fd_entry, entry);
+	      ubicom32fdpic_add_rofixup (output_bfd,
+					 ubicom32fdpic_gotfixup_section (info),
+					 ubicom32fdpic_got_section (info)
+					 ->output_section->vma
+					 + ubicom32fdpic_got_section (info)
+					 ->output_offset
+					 + ubicom32fdpic_got_initial_offset (info)
+					 + entry->fd_entry + 4, entry);
+	    }
+	}
+      else
+	{
+	  ofst
+	    = ubicom32fdpic_add_dyn_reloc (output_bfd,
+					   entry->lazyplt
+					   ? ubicom32fdpic_pltrel_section (info)
+					   : ubicom32fdpic_gotrel_section (info),
+					   _bfd_elf_section_offset
+					   (output_bfd, info,
+					    ubicom32fdpic_got_section (info),
+					    ubicom32fdpic_got_initial_offset (info)
+					    + entry->fd_entry)
+					   + ubicom32fdpic_got_section (info)
+					   ->output_section->vma
+					   + ubicom32fdpic_got_section (info)
+					   ->output_offset,
+					   R_UBICOM32_FUNCDESC_VALUE, idx, ad, entry);
+	}
+
+      /* If we've omitted the dynamic relocation, just emit the fixed
+	 addresses of the symbol and of the local GOT base offset.  */
+      if (info->executable && !info->pie && sec && sec->output_section)
+	{
+	  lowword = ad;
+	  highword = ubicom32fdpic_got_section (info)->output_section->vma
+	    + ubicom32fdpic_got_section (info)->output_offset
+	    + ubicom32fdpic_got_initial_offset (info);
+	}
+      else if (entry->lazyplt)
+	{
+	  if (ad)
+	    return FALSE;
+
+	  fd_lazy_rel_offset = ofst;
+
+	  /* A function descriptor used for lazy or local resolving is
+	     initialized such that its high word contains the output
+	     section index in which the PLT entries are located, and
+	     the low word contains the address to the base of the PLT.
+	     That location contains the PLT trampoline instruction ret 0(a0).
+	     assigned to that section.  */
+	  lowword =  ubicom32fdpic_plt_section (info)->output_offset
+	    + ubicom32fdpic_plt_section (info)->output_section->vma + entry->plt_trampoline_entry;
+	  highword = ubicom32fdpic_osec_to_segment
+	    (output_bfd, ubicom32fdpic_plt_section (info)->output_section);
+	}
+      else
+	{
+	  /* A function descriptor for a local function gets the index
+	     of the section.  For a non-local function, it's
+	     disregarded.  */
+	  lowword = ad;
+	  if (entry->symndx == -1 && entry->d.h->dynindx != -1
+	      && entry->d.h->dynindx == idx)
+	    highword = 0;
+	  else
+	    highword = ubicom32fdpic_osec_to_segment
+	      (output_bfd, sec->output_section);
+	}
+
+      DPRINTF(" emit got fd_entry %d:%p lw 0x%x hw 0x%x fd_l_r_off 0x%x\n", entry->fd_entry, entry, lowword, highword, fd_lazy_rel_offset);
+
+
+      bfd_put_32 (output_bfd, lowword,
+		  ubicom32fdpic_got_section (info)->contents
+		  + ubicom32fdpic_got_initial_offset (info)
+		  + entry->fd_entry);
+      bfd_put_32 (output_bfd, highword,
+		  ubicom32fdpic_got_section (info)->contents
+		  + ubicom32fdpic_got_initial_offset (info)
+		  + entry->fd_entry + 4);
+
+#if 0
+      /* Load the fixup offset here. */
+      bfd_put_32 (output_bfd, fd_lazy_rel_offset,
+		  ubicom32fdpic_got_section (info)->contents
+		  + ubicom32fdpic_got_initial_offset (info)
+		  + entry->fd_entry + 8);
+#endif
+
+      entry->rel_offset = fd_lazy_rel_offset;
+    }
+
+  /* Generate code for the PLT entry.  */
+  if (entry->plt_entry != (bfd_vma) -1)
+    {
+#if 0
+      static int output_trampoline_code = 1;
+#endif
+      bfd_byte *plt_output_code = ubicom32fdpic_plt_section (info)->contents;
+      unsigned int i;
+      bfd_vma *plt_code;
+
+      DPRINTF(" emit fd entry %x:%p plt=%2x code=%p\n", entry->fd_entry, entry, entry->plt_entry, plt_output_code);
+
+#if 0
+      if (output_trampoline_code)
+	{
+	  /* output the trampoline code.*/
+	  bfd_put_32 (output_bfd, plt_trampoline[0], plt_output_code);
+	}
+#endif
+
+      /* output the trampoline entry. */
+
+      plt_output_code += entry->plt_trampoline_entry;
+      plt_code = plt_trampoline;
+      plt_code[0] = (plt_code[0] & 0xFFFF0000) | (entry->rel_offset &0xffff);
+      bfd_put_32 (output_bfd, plt_code[0], plt_output_code);
+      bfd_put_32 (output_bfd, plt_code[1], plt_output_code + 4);
+
+
+      /* output the plt itself. */
+      plt_output_code = ubicom32fdpic_plt_section (info)->contents;
+      plt_output_code += entry->plt_entry;
+      BFD_ASSERT (entry->fd_entry);
+
+      if (entry->plt_type == 2)
+	{
+	  bfd_vma data_lo = (entry->fd_entry >> 2) & 0xff;
+
+	  /* Output seqence 2. */
+	  plt_code = plt_code_seq2;
+
+	  /* Code the entry into the PDEC instruction. */
+	  plt_code[0] &= 0xFFFFF8E0;
+	  plt_code[0] |= (data_lo & 0x1F);
+	  plt_code[0] |= (data_lo & 0xE0) << 3;
+
+	  /* Write out the sequence. */
+	  for (i = 0; i < NUM_PLT_CODE_WORDS_SEQ2; i++)
+	    {
+	      bfd_put_32 (output_bfd, plt_code[i], plt_output_code);
+	      plt_output_code += 4;
+	    }
+	}
+      else if (entry->plt_type == 1)
+	{
+	  /* Outupt sequence 1 */
+	  plt_code = plt_code_seq1;
+
+	  /* Code the entry into the movei instruction. */
+	  plt_code[0] = (plt_code[0] & 0xFFFF0000) | ((entry->fd_entry >> 2) & 0xFFFF);
+
+	  /* Write out the sequence. */
+	  for (i = 0; i < NUM_PLT_CODE_WORDS_SEQ1; i++)
+	    {
+	      bfd_put_32 (output_bfd, plt_code[i], plt_output_code);
+	      plt_output_code += 4;
+	    }
+	}
+      else
+	BFD_ASSERT(0);
+
+#if 0
+      /* We have to output 5 words. The very first movei has to be modified with whatever is in fd_entry. */
+      plt_code[0] = (plt_code[0] & 0xFFFF0000) | ((entry->fd_entry >> 2) & 0xFFFF);
+
+      for (i = 0; i < NUM_PLT_CODE_WORDS; i++)
+	{
+	  bfd_put_32 (output_bfd, plt_code[i], plt_output_code);
+	  plt_output_code += 4;
+	}
+#endif
+    }
+
+  return TRUE;
+}
+
+
+/* Create  a .got section, as well as its additional info field.  This
+   is almost entirely copied from
+   elflink.c:_bfd_elf_create_got_section().  */
+
+static bfd_boolean
+ubicom32fdpic_elf_create_got_section (bfd *abfd, struct bfd_link_info *info)
+{
+  flagword flags, pltflags;
+  asection *s;
+  struct elf_link_hash_entry *h;
+  const struct elf_backend_data *bed = get_elf_backend_data (abfd);
+  int ptralign;
+  int offset;
+
+  /* This function may be called more than once.  */
+  s = bfd_get_section_by_name (abfd, ".got");
+  if (s != NULL && (s->flags & SEC_LINKER_CREATED) != 0)
+    return TRUE;
+
+  /* Machine specific: although pointers are 32-bits wide, we want the
+     GOT to be aligned to a 64-bit boundary, such that function
+     descriptors in it can be accessed with 64-bit loads and
+     stores.  */
+  ptralign = 3;
+
+  flags = (SEC_ALLOC | SEC_LOAD | SEC_HAS_CONTENTS | SEC_IN_MEMORY
+	   | SEC_LINKER_CREATED);
+  pltflags = flags;
+
+  s = bfd_make_section_with_flags (abfd, ".got", flags);
+  if (s == NULL
+      || !bfd_set_section_alignment (abfd, s, ptralign))
+    return FALSE;
+
+  if (bed->want_got_plt)
+    {
+      s = bfd_make_section_with_flags (abfd, ".got.plt", flags);
+      if (s == NULL
+	  || !bfd_set_section_alignment (abfd, s, ptralign))
+	return FALSE;
+    }
+
+  if (bed->want_got_sym)
+    {
+      /* Define the symbol _GLOBAL_OFFSET_TABLE_ at the start of the .got
+	 (or .got.plt) section.  We don't do this in the linker script
+	 because we don't want to define the symbol if we are not creating
+	 a global offset table.  */
+      h = _bfd_elf_define_linkage_sym (abfd, info, s, "_GLOBAL_OFFSET_TABLE_");
+      elf_hash_table (info)->hgot = h;
+      if (h == NULL)
+	return FALSE;
+
+      /* Machine-specific: we want the symbol for executables as
+	 well.  */
+      if (! bfd_elf_link_record_dynamic_symbol (info, h))
+	return FALSE;
+    }
+
+  /* The first bit of the global offset table is the header.  */
+  s->size += bed->got_header_size;
+
+  /* This is the machine-specific part.  Create and initialize section
+     data for the got.  */
+  if (IS_FDPIC (abfd))
+    {
+      ubicom32fdpic_got_section (info) = s;
+      ubicom32fdpic_relocs_info (info) = htab_try_create (1,
+							  ubicom32fdpic_relocs_info_hash,
+							  ubicom32fdpic_relocs_info_eq,
+							  (htab_del) NULL);
+      if (! ubicom32fdpic_relocs_info (info))
+	return FALSE;
+
+      s = bfd_make_section_with_flags (abfd, ".rel.got",
+				       (flags | SEC_READONLY));
+      if (s == NULL
+	  || ! bfd_set_section_alignment (abfd, s, 2))
+	return FALSE;
+
+      ubicom32fdpic_gotrel_section (info) = s;
+
+      /* Machine-specific.  */
+      s = bfd_make_section_with_flags (abfd, ".rofixup",
+				       (flags | SEC_READONLY));
+      if (s == NULL
+	  || ! bfd_set_section_alignment (abfd, s, 2))
+	return FALSE;
+
+      ubicom32fdpic_gotfixup_section (info) = s;
+      offset = -2048;
+      flags = BSF_GLOBAL;
+    }
+  else
+    {
+      offset = 2048;
+      flags = BSF_GLOBAL | BSF_WEAK;
+    }
+
+  return TRUE;
+}
+
+/* Make sure the got and plt sections exist, and that our pointers in
+   the link hash table point to them.  */
+
+static bfd_boolean
+ubicom32fdpic_elf_create_dynamic_sections (bfd *abfd, struct bfd_link_info *info)
+{  flagword flags, pltflags;
+  asection *s;
+  const struct elf_backend_data *bed = get_elf_backend_data (abfd);
+
+  /* We need to create .plt, .rel[a].plt, .got, .got.plt, .dynbss, and
+     .rel[a].bss sections.  */
+  DPRINTF(" ubicom32fdpic_elf_create_dynamic_sections %p %p\n", abfd, info);
+
+  flags = (SEC_ALLOC | SEC_LOAD | SEC_HAS_CONTENTS | SEC_IN_MEMORY
+	   | SEC_LINKER_CREATED);
+
+  pltflags = flags;
+  pltflags |= SEC_CODE;
+  if (bed->plt_not_loaded)
+    pltflags &= ~ (SEC_CODE | SEC_LOAD | SEC_HAS_CONTENTS);
+  if (bed->plt_readonly)
+    pltflags |= SEC_READONLY;
+
+  s = bfd_make_section_with_flags (abfd, ".plt", pltflags);
+  if (s == NULL
+      || ! bfd_set_section_alignment (abfd, s, bed->plt_alignment))
+    return FALSE;
+  /* Blackfin-specific: remember it.  */
+  ubicom32fdpic_plt_section (info) = s;
+
+  if (bed->want_plt_sym)
+    {
+      /* Define the symbol _PROCEDURE_LINKAGE_TABLE_ at the start of the
+	 .plt section.  */
+      struct elf_link_hash_entry *h;
+      struct bfd_link_hash_entry *bh = NULL;
+
+      if (! (_bfd_generic_link_add_one_symbol
+	     (info, abfd, "_PROCEDURE_LINKAGE_TABLE_", BSF_GLOBAL, s, 0, NULL,
+	      FALSE, get_elf_backend_data (abfd)->collect, &bh)))
+	return FALSE;
+      h = (struct elf_link_hash_entry *) bh;
+      h->def_regular = 1;
+      h->type = STT_OBJECT;
+
+      if (! info->executable
+	  && ! bfd_elf_link_record_dynamic_symbol (info, h))
+	return FALSE;
+    }
+
+  /* Blackfin-specific: we want rel relocations for the plt.  */
+  s = bfd_make_section_with_flags (abfd, ".rel.plt", flags | SEC_READONLY);
+  if (s == NULL
+      || ! bfd_set_section_alignment (abfd, s, bed->s->log_file_align))
+    return FALSE;
+  /* Blackfin-specific: remember it.  */
+  ubicom32fdpic_pltrel_section (info) = s;
+
+  /* Blackfin-specific: we want to create the GOT in the Blackfin way.  */
+  if (! ubicom32fdpic_elf_create_got_section (abfd, info))
+    return FALSE;
+
+  /* Blackfin-specific: make sure we created everything we wanted.  */
+  BFD_ASSERT (ubicom32fdpic_got_section (info) && ubicom32fdpic_gotrel_section (info)
+	      /* && ubicom32fdpic_gotfixup_section (info) */
+	      && ubicom32fdpic_plt_section (info)
+	      && ubicom32fdpic_pltrel_section (info));
+
+  if (bed->want_dynbss)
+    {
+      /* The .dynbss section is a place to put symbols which are defined
+	 by dynamic objects, are referenced by regular objects, and are
+	 not functions.  We must allocate space for them in the process
+	 image and use a R_*_COPY reloc to tell the dynamic linker to
+	 initialize them at run time.  The linker script puts the .dynbss
+	 section into the .bss section of the final image.  */
+      s = bfd_make_section_with_flags (abfd, ".dynbss",
+				       SEC_ALLOC | SEC_LINKER_CREATED);
+      if (s == NULL)
+	return FALSE;
+
+      /* The .rel[a].bss section holds copy relocs.  This section is not
+     normally needed.  We need to create it here, though, so that the
+     linker will map it to an output section.  We can't just create it
+     only if we need it, because we will not know whether we need it
+     until we have seen all the input files, and the first time the
+     main linker code calls BFD after examining all the input files
+     (size_dynamic_sections) the input sections have already been
+     mapped to the output sections.  If the section turns out not to
+     be needed, we can discard it later.  We will never need this
+     section when generating a shared object, since they do not use
+     copy relocs.  */
+      if (! info->shared)
+	{
+	  s = bfd_make_section_with_flags (abfd,
+					   (bed->default_use_rela_p
+					    ? ".rela.bss" : ".rel.bss"),
+					   flags | SEC_READONLY);
+	  if (s == NULL
+	      || ! bfd_set_section_alignment (abfd, s, bed->s->log_file_align))
+	    return FALSE;
+	}
+    }
+
+  return TRUE;
+}
+
+/* We need dynamic symbols for every section, since segments can
+   relocate independently.  */
+static bfd_boolean
+ubicom32fdpic_elf_link_omit_section_dynsym (bfd *output_bfd ATTRIBUTE_UNUSED,
+					    struct bfd_link_info *info
+					    ATTRIBUTE_UNUSED,
+					    asection *p ATTRIBUTE_UNUSED)
+{
+  switch (elf_section_data (p)->this_hdr.sh_type)
+    {
+    case SHT_PROGBITS:
+    case SHT_NOBITS:
+      /* If sh_type is yet undecided, assume it could be
+	 SHT_PROGBITS/SHT_NOBITS.  */
+    case SHT_NULL:
+      return FALSE;
+
+      /* There shouldn't be section relative relocations
+	 against any other section.  */
+    default:
+      return TRUE;
+    }
+}
+
+/* Look through the relocs for a section during the first phase.
+
+   Besides handling virtual table relocs for gc, we have to deal with
+   all sorts of PIC-related relocations.  We describe below the
+   general plan on how to handle such relocations, even though we only
+   collect information at this point, storing them in hash tables for
+   perusal of later passes.
+
+*/
+static bfd_boolean
+ubicom32fdpic_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,
+				asection *sec, const Elf_Internal_Rela *relocs)
+{
+  Elf_Internal_Shdr *symtab_hdr;
+  struct elf_link_hash_entry **sym_hashes, **sym_hashes_end;
+  const Elf_Internal_Rela *rel;
+  const Elf_Internal_Rela *rel_end;
+  bfd *dynobj;
+  struct ubicom32fdpic_relocs_info *picrel;
+
+  if (info->relocatable)
+    return TRUE;
+
+  symtab_hdr = &elf_tdata (abfd)->symtab_hdr;
+  sym_hashes = elf_sym_hashes (abfd);
+  sym_hashes_end = sym_hashes + symtab_hdr->sh_size/sizeof(Elf32_External_Sym);
+  if (!elf_bad_symtab (abfd))
+    sym_hashes_end -= symtab_hdr->sh_info;
+
+  dynobj = elf_hash_table (info)->dynobj;
+  rel_end = relocs + sec->reloc_count;
+  for (rel = relocs; rel < rel_end; rel++)
+    {
+      struct elf_link_hash_entry *h;
+      unsigned long r_symndx;
+
+      r_symndx = ELF32_R_SYM (rel->r_info);
+      if (r_symndx < symtab_hdr->sh_info)
+	h = NULL;
+      else
+	h = sym_hashes[r_symndx - symtab_hdr->sh_info];
+
+      switch (ELF32_R_TYPE (rel->r_info))
+	{
+	case R_UBICOM32_GOTOFFSET_HI:
+	case R_UBICOM32_GOTOFFSET_LO:
+	case R_UBICOM32_FUNCDESC_GOTOFFSET_HI:
+	case R_UBICOM32_FUNCDESC_GOTOFFSET_LO:
+	case R_UBICOM32_FUNCDESC:
+	case R_UBICOM32_FUNCDESC_VALUE:
+	  if (! IS_FDPIC (abfd))
+	    goto bad_reloc;
+	  /* Fall through.  */
+	case R_UBICOM32_24_PCREL:
+	case R_UBICOM32_32:
+	  if (IS_FDPIC (abfd) && ! dynobj)
+	    {
+	      elf_hash_table (info)->dynobj = dynobj = abfd;
+	      if (! ubicom32fdpic_elf_create_got_section (abfd, info))
+		return FALSE;
+	    }
+	  if (! IS_FDPIC (abfd))
+	    {
+	      picrel = NULL;
+	      break;
+	    }
+	  if (h != NULL)
+	    {
+	      if (h->dynindx == -1)
+		switch (ELF_ST_VISIBILITY (h->other))
+		  {
+		  case STV_INTERNAL:
+		  case STV_HIDDEN:
+		    break;
+		  default:
+		    bfd_elf_link_record_dynamic_symbol (info, h);
+		    break;
+		  }
+	      picrel
+		= ubicom32fdpic_relocs_info_for_global (ubicom32fdpic_relocs_info (info),
+							abfd, h,
+							rel->r_addend, INSERT);
+	    }
+	  else
+	    picrel = ubicom32fdpic_relocs_info_for_local (ubicom32fdpic_relocs_info (info),
+							  abfd, r_symndx,
+							  rel->r_addend, INSERT);
+	  if (! picrel)
+	    return FALSE;
+	  break;
+
+	default:
+	  picrel = NULL;
+	  break;
+	}
+
+      switch (ELF32_R_TYPE (rel->r_info))
+	{
+	case R_UBICOM32_24_PCREL:
+	  if (IS_FDPIC (abfd))
+	    picrel->call++;
+	  break;
+
+	case R_UBICOM32_FUNCDESC_VALUE:
+	  picrel->relocsfdv++;
+	  picrel->sym++;
+	  break;
+
+	case R_UBICOM32_32:
+	  if (! IS_FDPIC (abfd))
+	    break;
+
+	  picrel->sym++;
+	  if (bfd_get_section_flags (abfd, sec) & SEC_ALLOC)
+	    picrel->relocs32++;
+	  break;
+
+	case R_UBICOM32_GOTOFFSET_HI:
+	  picrel->gotoffset_hi++;
+	  break;
+
+	case R_UBICOM32_GOTOFFSET_LO:
+	  picrel->gotoffset_lo++;
+	  break;
+
+	case R_UBICOM32_FUNCDESC_GOTOFFSET_HI:
+	  picrel->fd_gotoffset_hi++;
+	  break;
+
+	case R_UBICOM32_FUNCDESC_GOTOFFSET_LO:
+	  picrel->fd_gotoffset_lo++;
+	  break;
+
+	case R_UBICOM32_FUNCDESC:
+	  picrel->fd++;
+	  picrel->relocsfd++;
+	  break;
+
+	  /* This relocation describes the C++ object vtable hierarchy.
+	     Reconstruct it for later use during GC.  */
+	case R_UBICOM32_GNU_VTINHERIT:
+	  if (!bfd_elf_gc_record_vtinherit (abfd, sec, h, rel->r_offset))
+	    return FALSE;
+	  break;
+
+	  /* This relocation describes which C++ vtable entries are actually
+	     used.  Record for later use during GC.  */
+	case R_UBICOM32_GNU_VTENTRY:
+	  if (!bfd_elf_gc_record_vtentry (abfd, sec, h, rel->r_addend))
+	    return FALSE;
+	  break;
+
+	case R_UBICOM32_21_PCREL:
+	case R_UBICOM32_HI24:
+	case R_UBICOM32_LO7_S:
+	  break;
+
+	default:
+	bad_reloc:
+	  (*_bfd_error_handler)
+	    (_("%B: unsupported (ubicom32) relocation type %i"),
+	     abfd, ELF32_R_TYPE (rel->r_info));
+	  return FALSE;
+	}
+    }
+
+  return TRUE;
+}
+
+/* Follow indirect and warning hash entries so that each got entry
+   points to the final symbol definition.  P must point to a pointer
+   to the hash table we're traversing.  Since this traversal may
+   modify the hash table, we set this pointer to NULL to indicate
+   we've made a potentially-destructive change to the hash table, so
+   the traversal must be restarted.  */
+static int
+ubicom32fdpic_resolve_final_relocs_info (void **entryp, void *p)
+{
+  struct ubicom32fdpic_relocs_info *entry = *entryp;
+  htab_t *htab = p;
+
+  if (entry->symndx == -1)
+    {
+      struct elf_link_hash_entry *h = entry->d.h;
+      struct ubicom32fdpic_relocs_info *oentry;
+
+      while (h->root.type == bfd_link_hash_indirect
+	     || h->root.type == bfd_link_hash_warning)
+	h = (struct elf_link_hash_entry *)h->root.u.i.link;
+
+      if (entry->d.h == h)
+	return 1;
+
+      oentry = ubicom32fdpic_relocs_info_for_global (*htab, 0, h, entry->addend,
+						     NO_INSERT);
+
+      if (oentry)
+	{
+	  /* Merge the two entries.  */
+	  ubicom32fdpic_pic_merge_early_relocs_info (oentry, entry);
+	  htab_clear_slot (*htab, entryp);
+	  return 1;
+	}
+
+      entry->d.h = h;
+
+      /* If we can't find this entry with the new bfd hash, re-insert
+	 it, and get the traversal restarted.  */
+      if (! htab_find (*htab, entry))
+	{
+	  htab_clear_slot (*htab, entryp);
+	  entryp = htab_find_slot (*htab, entry, INSERT);
+	  if (! *entryp)
+	    *entryp = entry;
+	  /* Abort the traversal, since the whole table may have
+	     moved, and leave it up to the parent to restart the
+	     process.  */
+	  *(htab_t *)p = NULL;
+	  return 0;
+	}
+    }
+
+  return 1;
+}
+
+/* Assign GOT offsets to private function descriptors used by PLT
+   entries (or referenced by 32-bit offsets), as well as PLT entries
+   and lazy PLT entries.  */
+static int
+ubicom32fdpic_assign_plt_entries (void **entryp, void *info_)
+{
+  struct ubicom32fdpic_relocs_info *entry = *entryp;
+  struct ubicom32fdpic_dynamic_got_plt_info *dinfo = info_;
+
+  if (entry->privfd && entry->fd_entry == 0)
+    {
+      //      dinfo->current_fd -= FUNCTION_DESCRIPTOR_SIZE;
+      //      entry->fd_entry = dinfo->current_fd;
+      DPRINTF(" late assign fd  % 5d:%p \n", entry->fd_entry, entry);
+    }
+
+  if (entry->plt)
+    {
+      /* We use the section's raw size to mark the location of the
+	 next PLT entry.  */
+      entry->plt_entry = dinfo->current_plt;
+      entry->plt_trampoline_entry = dinfo->current_plt_trampoline;
+      dinfo->current_plt_trampoline += PLT_TRAMPOLINE_SIZE;
+
+      if (entry->fd_entry >= (-512))
+	{
+	  /* This entry is going to be of type seq2 */
+	  dinfo->current_plt += LZPLT_SIZE_SEQ2;
+	  entry->plt_type = 2;
+	}
+      else
+	{
+	  /* This entry is going to be of type seq1 */
+	  dinfo->current_plt += LZPLT_SIZE_SEQ1;
+	  entry->plt_type = 1;
+	}
+      DPRINTF(" assign plt % 4d for fd=% 4d:%p next %d plttype %d\n", entry->plt_entry, entry->fd_entry, entry,  dinfo->current_plt, entry->plt_type);
+
+    }
+
+  return 1;
+}
+
+/* Assign GOT offsets for every GOT entry and function descriptor.
+   Doing everything in a single pass is tricky.  */
+static int
+ubicom32fdpic_assign_got_entries (void **entryp, void *info_)
+{
+  struct ubicom32fdpic_relocs_info *entry = *entryp;
+  struct ubicom32fdpic_dynamic_got_plt_info *dinfo = info_;
+
+  if (entry->gotoffset_lo || entry->gotoffset_hi)
+    {
+      entry->got_entry = dinfo->current_got;
+      DPRINTF(" assign got % 5d:%p \n", entry->got_entry, entry);
+      dinfo->current_got += 4;
+    }
+
+  if (entry->fd_gotoffset_lo || entry->fd_gotoffset_hi)
+    {
+      entry->fdgot_entry = dinfo->current_got;
+      DPRINTF(" assign fdgot % 5d:%p \n", entry->fdgot_entry, entry);
+      dinfo->current_got += 4;
+    }
+
+  if (entry->plt)
+    {
+      dinfo->current_fd -= FUNCTION_DESCRIPTOR_SIZE;
+      entry->fd_entry = dinfo->current_fd;
+
+      dinfo->total_trampoline += PLT_TRAMPOLINE_SIZE;
+
+      if (entry->fd_entry >= (-512))
+	{
+	  /* This entry is going to be of type seq2 */
+	  dinfo->total_lzplt += LZPLT_SIZE_SEQ2;
+	  entry->plt_type = 2;
+	}
+      else
+	{
+	  /* This entry is going to be of type seq1 */
+	  dinfo->total_lzplt += LZPLT_SIZE_SEQ1;
+	  entry->plt_type = 1;
+	}
+
+      DPRINTF(" assign fd  % 5d:%p \n", entry->fd_entry, entry);
+    }
+  else if (entry->privfd)
+    {
+      dinfo->current_privfd -= FUNCTION_DESCRIPTOR_SIZE;
+      entry->fd_entry = dinfo->current_privfd;
+      DPRINTF(" assign private fd  % 5d:%p %p \n", entry->fd_entry, entry, entry->plt);
+    }
+
+  return 1;
+}
+
+/* Set the sizes of the dynamic sections.  */
+
+static bfd_boolean
+ubicom32fdpic_elf_size_dynamic_sections (bfd *output_bfd,
+					 struct bfd_link_info *info)
+{
+  bfd *dynobj;
+  asection *s;
+  struct ubicom32fdpic_dynamic_got_plt_info gpinfo;
+  bfd_vma total_plt_size;
+
+  dynobj = elf_hash_table (info)->dynobj;
+  BFD_ASSERT (dynobj != NULL);
+
+  if (elf_hash_table (info)->dynamic_sections_created)
+    {
+      /* Set the contents of the .interp section to the interpreter.  */
+      if (info->executable)
+	{
+	  s = bfd_get_section_by_name (dynobj, ".interp");
+	  BFD_ASSERT (s != NULL);
+	  s->size = sizeof ELF_DYNAMIC_INTERPRETER;
+	  s->contents = (bfd_byte *) ELF_DYNAMIC_INTERPRETER;
+	}
+    }
+
+  memset (&gpinfo, 0, sizeof (gpinfo));
+  gpinfo.g.info = info;
+
+  for (;;)
+    {
+      htab_t relocs = ubicom32fdpic_relocs_info (info);
+
+      htab_traverse (relocs, ubicom32fdpic_resolve_final_relocs_info, &relocs);
+
+      if (relocs == ubicom32fdpic_relocs_info (info))
+	break;
+    }
+
+  htab_traverse (ubicom32fdpic_relocs_info (info), ubicom32fdpic_count_got_plt_entries,
+		 &gpinfo.g);
+
+  /* At this point we know how many PLT entries we need. We know how many got entries we need and the total number of function descriptors in this link. */
+  gpinfo.total_fdplt = gpinfo.g.fdplt + gpinfo.g.privfdplt;
+  gpinfo.total_got = gpinfo.g.gotoffset_lo;
+  gpinfo.total_lzplt = 0;
+
+  gpinfo.current_got = 12;	/* The first 12 bytes are reserved to get to resolver. */
+  gpinfo.current_fd = 0;	/* We will decrement this by FUNCTION_DESCRIPTOR_SIZE for each allocation. */
+  gpinfo.current_privfd = -gpinfo.g.fdplt;	/* We will decrement this by FUNCTION_DESCRIPTOR_SIZE for each allocation. */
+  gpinfo.current_plt = 0;	/* Initialize this to 0. The trampoline code is at the start of the plt section.
+				   We will decrement this by LZPLT_NORMAL_SIZE each time we allocate. */
+  gpinfo.current_plt_trampoline = 0;
+
+  DPRINTF("Total plts = %d \n", gpinfo.g.num_plts);
+
+  /* Now assign (most) GOT offsets.  */
+  htab_traverse (ubicom32fdpic_relocs_info (info), ubicom32fdpic_assign_got_entries,
+		 &gpinfo);
+
+
+  ubicom32fdpic_got_section (info)->size = gpinfo.total_fdplt + gpinfo.total_got + 12;
+
+  DPRINTF("GOT size = fd=%d, got=%d\n", gpinfo.total_fdplt, gpinfo.total_got);
+
+  if (ubicom32fdpic_got_section (info)->size == 0)
+    ubicom32fdpic_got_section (info)->flags |= SEC_EXCLUDE;
+  else if (ubicom32fdpic_got_section (info)->size == 12
+	   && ! elf_hash_table (info)->dynamic_sections_created)
+    {
+      ubicom32fdpic_got_section (info)->flags |= SEC_EXCLUDE;
+      ubicom32fdpic_got_section (info)->size = 0;
+    }
+  else
+    {
+      DPRINTF(" Alloc GOT size = %d\n", ubicom32fdpic_got_section (info)->size);
+      ubicom32fdpic_got_section (info)->contents =
+	(bfd_byte *) bfd_zalloc (dynobj,
+				 ubicom32fdpic_got_section (info)->size);
+      if (ubicom32fdpic_got_section (info)->contents == NULL)
+	return FALSE;
+    }
+
+  if (elf_hash_table (info)->dynamic_sections_created)
+    /* Subtract the number of lzplt entries, since those will generate
+       relocations in the pltrel section.  */
+    ubicom32fdpic_gotrel_section (info)->size =
+      (gpinfo.g.relocs - gpinfo.g.num_plts)
+      * get_elf_backend_data (output_bfd)->s->sizeof_rel;
+  else
+    BFD_ASSERT (gpinfo.g.relocs == 0);
+  if (ubicom32fdpic_gotrel_section (info)->size == 0)
+    ubicom32fdpic_gotrel_section (info)->flags |= SEC_EXCLUDE;
+  else
+    {
+      ubicom32fdpic_gotrel_section (info)->contents =
+	(bfd_byte *) bfd_zalloc (dynobj,
+				 ubicom32fdpic_gotrel_section (info)->size);
+      if (ubicom32fdpic_gotrel_section (info)->contents == NULL)
+	return FALSE;
+    }
+
+  ubicom32fdpic_gotfixup_section (info)->size = (gpinfo.g.fixups + 1) * 4;
+  if (ubicom32fdpic_gotfixup_section (info)->size == 0)
+    ubicom32fdpic_gotfixup_section (info)->flags |= SEC_EXCLUDE;
+  else
+    {
+      ubicom32fdpic_gotfixup_section (info)->contents =
+	(bfd_byte *) bfd_zalloc (dynobj,
+				 ubicom32fdpic_gotfixup_section (info)->size);
+      if (ubicom32fdpic_gotfixup_section (info)->contents == NULL)
+	return FALSE;
+    }
+
+  if (elf_hash_table (info)->dynamic_sections_created)
+    {
+      ubicom32fdpic_pltrel_section (info)->size =
+	gpinfo.g.num_plts * get_elf_backend_data (output_bfd)->s->sizeof_rel;
+      if (ubicom32fdpic_pltrel_section (info)->size == 0)
+	ubicom32fdpic_pltrel_section (info)->flags |= SEC_EXCLUDE;
+      else
+	{
+	  ubicom32fdpic_pltrel_section (info)->contents =
+	    (bfd_byte *) bfd_zalloc (dynobj,
+				     ubicom32fdpic_pltrel_section (info)->size);
+	  if (ubicom32fdpic_pltrel_section (info)->contents == NULL)
+	    return FALSE;
+	}
+    }
+
+  /* The Pltsection is g.lzplt . The 4 is for the trampoline code. */
+  total_plt_size = gpinfo.total_lzplt + gpinfo.total_trampoline;
+  gpinfo.current_plt_trampoline = gpinfo.total_lzplt;
+
+  if (elf_hash_table (info)->dynamic_sections_created)
+    {
+      DPRINTF(" PLT size = %d\n", (total_plt_size ));
+      ubicom32fdpic_plt_section (info)->size = (total_plt_size);
+    }
+
+  /* Save information that we're going to need to generate GOT and PLT
+     entries.  */
+  ubicom32fdpic_got_initial_offset (info) = gpinfo.total_fdplt;
+
+  if (get_elf_backend_data (output_bfd)->want_got_sym)
+    elf_hash_table (info)->hgot->root.u.def.value
+      += ubicom32fdpic_got_initial_offset (info);
+
+  /* Allocate the PLT section contents.  */
+  if (elf_hash_table (info)->dynamic_sections_created)
+    {
+      if (ubicom32fdpic_plt_section (info)->size == 4)
+	{
+	  ubicom32fdpic_plt_section (info)->flags |= SEC_EXCLUDE;
+	  ubicom32fdpic_plt_section (info)->size = 0;
+	}
+      else
+	{
+	  DPRINTF(" Alloc PLT size = %d\n", (total_plt_size));
+	  ubicom32fdpic_plt_section (info)->contents =
+	    (bfd_byte *) bfd_zalloc (dynobj,
+				     ubicom32fdpic_plt_section (info)->size);
+	  if (ubicom32fdpic_plt_section (info)->contents == NULL)
+	    return FALSE;
+	}
+    }
+
+
+  htab_traverse (ubicom32fdpic_relocs_info (info), ubicom32fdpic_assign_plt_entries,
+		 &gpinfo);
+
+
+  if (elf_hash_table (info)->dynamic_sections_created)
+    {
+      if (ubicom32fdpic_got_section (info)->size)
+	if (!_bfd_elf_add_dynamic_entry (info, DT_PLTGOT, 0))
+	  return FALSE;
+
+      if (ubicom32fdpic_pltrel_section (info)->size)
+	if (!_bfd_elf_add_dynamic_entry (info, DT_PLTRELSZ, 0)
+	    || !_bfd_elf_add_dynamic_entry (info, DT_PLTREL, DT_REL)
+	    || !_bfd_elf_add_dynamic_entry (info, DT_JMPREL, 0))
+	  return FALSE;
+
+      if (ubicom32fdpic_gotrel_section (info)->size)
+	if (!_bfd_elf_add_dynamic_entry (info, DT_REL, 0)
+	    || !_bfd_elf_add_dynamic_entry (info, DT_RELSZ, 0)
+	    || !_bfd_elf_add_dynamic_entry (info, DT_RELENT,
+					    sizeof (Elf32_External_Rel)))
+	  return FALSE;
+    }
+
+  s = bfd_get_section_by_name (dynobj, ".rela.bss");
+  if (s && s->size == 0)
+    s->flags |= SEC_EXCLUDE;
+
+  s = bfd_get_section_by_name (dynobj, ".rel.plt");
+  if (s && s->size == 0)
+    s->flags |= SEC_EXCLUDE;
+
+  return TRUE;
+}
+
+
+/* Adjust a symbol defined by a dynamic object and referenced by a
+   regular object.  */
+
+static bfd_boolean
+ubicom32fdpic_elf_adjust_dynamic_symbol
+(struct bfd_link_info *info ATTRIBUTE_UNUSED,
+ struct elf_link_hash_entry *h ATTRIBUTE_UNUSED)
+{
+  bfd * dynobj;
+
+  dynobj = elf_hash_table (info)->dynobj;
+
+  /* Make sure we know what is going on here.  */
+  BFD_ASSERT (dynobj != NULL
+	      && (h->u.weakdef != NULL
+		  || (h->def_dynamic
+		      && h->ref_regular
+		      && !h->def_regular)));
+
+  /* If this is a weak symbol, and there is a real definition, the
+     processor independent code will have arranged for us to see the
+     real definition first, and we can just use the same value.  */
+  if (h->u.weakdef != NULL)
+    {
+      BFD_ASSERT (h->u.weakdef->root.type == bfd_link_hash_defined
+		  || h->u.weakdef->root.type == bfd_link_hash_defweak);
+      h->root.u.def.section = h->u.weakdef->root.u.def.section;
+      h->root.u.def.value = h->u.weakdef->root.u.def.value;
+    }
+
+  return TRUE;
+}
+
+static bfd_boolean
+ubicom32fdpic_elf_always_size_sections (bfd *output_bfd,
+					struct bfd_link_info *info)
+{
+  if (!info->relocatable)
+    {
+      struct elf_link_hash_entry *h;
+
+      /* Force a PT_GNU_STACK segment to be created.  */
+      if (! elf_tdata (output_bfd)->stack_flags)
+	elf_tdata (output_bfd)->stack_flags = PF_R | PF_W | PF_X;
+
+      /* Define __stacksize__ if it's not defined yet.  */
+      h = elf_link_hash_lookup (elf_hash_table (info), "__stacksize__",
+				FALSE, FALSE, FALSE);
+      if (! h || h->root.type != bfd_link_hash_defined
+	  || h->type != STT_OBJECT
+	  || !h->def_regular)
+	{
+	  struct bfd_link_hash_entry *bh = NULL;
+
+	  if (!(_bfd_generic_link_add_one_symbol
+		(info, output_bfd, "__stacksize__",
+		 BSF_GLOBAL, bfd_abs_section_ptr, ubicom32fdpic_stack_size,
+		 (const char *) NULL, FALSE,
+		 get_elf_backend_data (output_bfd)->collect, &bh)))
+	    return FALSE;
+
+	  h = (struct elf_link_hash_entry *) bh;
+	  h->def_regular = 1;
+	  h->type = STT_OBJECT;
+	}
+    }
+
+  return TRUE;
+}
+
+static bfd_boolean
+ubicom32fdpic_elf_finish_dynamic_sections (bfd *output_bfd,
+					   struct bfd_link_info *info)
+{
+  bfd *dynobj;
+  asection *sdyn;
+
+  dynobj = elf_hash_table (info)->dynobj;
+
+  if (ubicom32fdpic_got_section (info))
+    {
+      BFD_ASSERT (ubicom32fdpic_gotrel_section (info)->size
+		  == (ubicom32fdpic_gotrel_section (info)->reloc_count
+		      * sizeof (Elf32_External_Rel)));
+
+      if (ubicom32fdpic_gotfixup_section (info))
+	{
+	  struct elf_link_hash_entry *hgot = elf_hash_table (info)->hgot;
+	  bfd_vma got_value = hgot->root.u.def.value
+	    + hgot->root.u.def.section->output_section->vma
+	    + hgot->root.u.def.section->output_offset;
+
+	  ubicom32fdpic_add_rofixup (output_bfd, ubicom32fdpic_gotfixup_section (info),
+				     got_value, 0);
+
+	  if (ubicom32fdpic_gotfixup_section (info)->size
+	      != (ubicom32fdpic_gotfixup_section (info)->reloc_count * 4))
+	    {
+	      (*_bfd_error_handler)
+		("LINKER BUG: .rofixup section size mismatch Size %d, should be %d ",
+		 ubicom32fdpic_gotfixup_section (info)->size, ubicom32fdpic_gotfixup_section (info)->reloc_count * 4);
+	      return FALSE;
+	    }
+	}
+    }
+  if (elf_hash_table (info)->dynamic_sections_created)
+    {
+      BFD_ASSERT (ubicom32fdpic_pltrel_section (info)->size
+		  == (ubicom32fdpic_pltrel_section (info)->reloc_count
+		      * sizeof (Elf32_External_Rel)));
+    }
+
+  sdyn = bfd_get_section_by_name (dynobj, ".dynamic");
+
+  if (elf_hash_table (info)->dynamic_sections_created)
+    {
+      Elf32_External_Dyn * dyncon;
+      Elf32_External_Dyn * dynconend;
+
+      BFD_ASSERT (sdyn != NULL);
+
+      dyncon = (Elf32_External_Dyn *) sdyn->contents;
+      dynconend = (Elf32_External_Dyn *) (sdyn->contents + sdyn->size);
+
+      for (; dyncon < dynconend; dyncon++)
+	{
+	  Elf_Internal_Dyn dyn;
+
+	  bfd_elf32_swap_dyn_in (dynobj, dyncon, &dyn);
+
+	  switch (dyn.d_tag)
+	    {
+	    default:
+	      break;
+
+	    case DT_PLTGOT:
+	      dyn.d_un.d_ptr = ubicom32fdpic_got_section (info)->output_section->vma
+		+ ubicom32fdpic_got_section (info)->output_offset
+		+ ubicom32fdpic_got_initial_offset (info);
+	      bfd_elf32_swap_dyn_out (output_bfd, &dyn, dyncon);
+	      break;
+
+	    case DT_JMPREL:
+	      dyn.d_un.d_ptr = ubicom32fdpic_pltrel_section (info)
+		->output_section->vma
+		+ ubicom32fdpic_pltrel_section (info)->output_offset;
+	      bfd_elf32_swap_dyn_out (output_bfd, &dyn, dyncon);
+	      break;
+
+	    case DT_PLTRELSZ:
+	      dyn.d_un.d_val = ubicom32fdpic_pltrel_section (info)->size;
+	      bfd_elf32_swap_dyn_out (output_bfd, &dyn, dyncon);
+	      break;
+	    }
+	}
+    }
+
+  return TRUE;
+}
+
+/* Perform any actions needed for dynamic symbols.  */
+static bfd_boolean
+ubicom32fdpic_elf_finish_dynamic_symbol
+(bfd *output_bfd ATTRIBUTE_UNUSED,
+ struct bfd_link_info *info ATTRIBUTE_UNUSED,
+ struct elf_link_hash_entry *h ATTRIBUTE_UNUSED,
+ Elf_Internal_Sym *sym ATTRIBUTE_UNUSED)
+{
+  return TRUE;
+}
+
+static bfd_boolean
+ubicom32fdpic_elf_modify_program_headers (bfd *output_bfd,
+					  struct bfd_link_info *info)
+{
+  struct elf_obj_tdata *tdata = elf_tdata (output_bfd);
+  struct elf_segment_map *m;
+  Elf_Internal_Phdr *p;
+
+  if (! info)
+    return TRUE;
+
+  for (p = tdata->phdr, m = tdata->segment_map; m != NULL; m = m->next, p++)
+    if (m->p_type == PT_GNU_STACK)
+      break;
+
+  if (m)
+    {
+      struct elf_link_hash_entry *h;
+
+      /* Obtain the pointer to the __stacksize__ symbol.  */
+      h = elf_link_hash_lookup (elf_hash_table (info), "__stacksize__",
+				FALSE, FALSE, FALSE);
+      if (h)
+	{
+	  while (h->root.type == bfd_link_hash_indirect
+		 || h->root.type == bfd_link_hash_warning)
+	    h = (struct elf_link_hash_entry *) h->root.u.i.link;
+	  BFD_ASSERT (h->root.type == bfd_link_hash_defined);
+	}
+
+      /* Set the header p_memsz from the symbol value.  We
+	 intentionally ignore the symbol section.  */
+      if (h && h->root.type == bfd_link_hash_defined)
+	p->p_memsz = h->root.u.def.value;
+      else
+	p->p_memsz = ubicom32fdpic_stack_size;
+
+      p->p_align = 8;
+    }
+
+  return TRUE;
+}
+
+static bfd_boolean
+ubicom32fdpic_elf_gc_sweep_hook (bfd *abfd,
+				 struct bfd_link_info *info,
+				 asection *sec,
+				 const Elf_Internal_Rela *relocs)
+{
+  Elf_Internal_Shdr *symtab_hdr;
+  struct elf_link_hash_entry **sym_hashes, **sym_hashes_end;
+  const Elf_Internal_Rela *rel;
+  const Elf_Internal_Rela *rel_end;
+  struct ubicom32fdpic_relocs_info *picrel;
+
+  BFD_ASSERT (IS_FDPIC (abfd));
+
+  symtab_hdr = &elf_tdata (abfd)->symtab_hdr;
+  sym_hashes = elf_sym_hashes (abfd);
+  sym_hashes_end = sym_hashes + symtab_hdr->sh_size/sizeof(Elf32_External_Sym);
+  if (!elf_bad_symtab (abfd))
+    sym_hashes_end -= symtab_hdr->sh_info;
+
+  rel_end = relocs + sec->reloc_count;
+  for (rel = relocs; rel < rel_end; rel++)
+    {
+      struct elf_link_hash_entry *h;
+      unsigned long r_symndx;
+
+      r_symndx = ELF32_R_SYM (rel->r_info);
+      if (r_symndx < symtab_hdr->sh_info)
+	h = NULL;
+      else
+	h = sym_hashes[r_symndx - symtab_hdr->sh_info];
+
+      if (h != NULL)
+	picrel = ubicom32fdpic_relocs_info_for_global (ubicom32fdpic_relocs_info (info),
+						       abfd, h,
+						       rel->r_addend, NO_INSERT);
+      else
+	picrel = ubicom32fdpic_relocs_info_for_local (ubicom32fdpic_relocs_info
+						      (info), abfd, r_symndx,
+						      rel->r_addend, NO_INSERT);
+
+      if (!picrel)
+	continue;
+
+      switch (ELF32_R_TYPE (rel->r_info))
+	{
+	case R_UBICOM32_24_PCREL:
+	  picrel->call--;
+	  break;
+
+	case R_UBICOM32_FUNCDESC_VALUE:
+	  picrel->relocsfdv--;
+	  picrel->sym--;
+	  break;
+
+	case R_UBICOM32_GOTOFFSET_LO:
+	  picrel->gotoffset_lo--;
+	  break;
+
+	case R_UBICOM32_FUNCDESC_GOTOFFSET_LO:
+	  picrel->fd_gotoffset_lo--;
+	  break;
+
+	case R_UBICOM32_FUNCDESC_GOTOFFSET_HI:
+	  picrel->fd_gotoffset_hi--;
+	  break;
+
+	case R_UBICOM32_FUNCDESC:
+	  picrel->fd--;
+	  picrel->relocsfd--;
+	  break;
+
+	case R_UBICOM32_32:
+	  if (! IS_FDPIC (abfd))
+	    break;
+
+	  if (picrel->sym)
+	    picrel->relocs32--;;
+
+	  picrel->sym--;
+	  break;
+
+	default:
+	  break;
+	}
+    }
+
+  return TRUE;
+}
+/* Decide whether to attempt to turn absptr or lsda encodings in
+   shared libraries into pcrel within the given input section.  */
+
+static bfd_boolean
+ubicom32fdpic_elf_use_relative_eh_frame
+(bfd *input_bfd ATTRIBUTE_UNUSED,
+ struct bfd_link_info *info ATTRIBUTE_UNUSED,
+ asection *eh_frame_section ATTRIBUTE_UNUSED)
+{
+  /* We can't use PC-relative encodings in FDPIC binaries, in general.  */
+  return FALSE;
+}
+
+/* Adjust the contents of an eh_frame_hdr section before they're output.  */
+
+static bfd_byte
+ubicom32fdpic_elf_encode_eh_address (bfd *abfd,
+				     struct bfd_link_info *info,
+				     asection *osec, bfd_vma offset,
+				     asection *loc_sec, bfd_vma loc_offset,
+				     bfd_vma *encoded)
+{
+  struct elf_link_hash_entry *h;
+
+  h = elf_hash_table (info)->hgot;
+  BFD_ASSERT (h && h->root.type == bfd_link_hash_defined);
+
+  if (! h || (ubicom32fdpic_osec_to_segment (abfd, osec)
+	      == ubicom32fdpic_osec_to_segment (abfd, loc_sec->output_section)))
+    return _bfd_elf_encode_eh_address (abfd, info, osec, offset,
+				       loc_sec, loc_offset, encoded);
+
+  BFD_ASSERT (ubicom32fdpic_osec_to_segment (abfd, osec)
+	      == (ubicom32fdpic_osec_to_segment
+		  (abfd, h->root.u.def.section->output_section)));
+
+  *encoded = osec->vma + offset
+    - (h->root.u.def.value
+       + h->root.u.def.section->output_section->vma
+       + h->root.u.def.section->output_offset);
+
+  return DW_EH_PE_datarel | DW_EH_PE_sdata4;
+}
+static bfd_boolean
+ubicom32fdpic_elf_copy_private_bfd_data (bfd *ibfd, bfd *obfd)
+{
+  unsigned i;
+
+  if (bfd_get_flavour (ibfd) != bfd_target_elf_flavour
+      || bfd_get_flavour (obfd) != bfd_target_elf_flavour)
+    return TRUE;
+
+  if (! ubicom32_elf_copy_private_bfd_data (ibfd, obfd))
+    return FALSE;
+
+  if (! elf_tdata (ibfd) || ! elf_tdata (ibfd)->phdr
+      || ! elf_tdata (obfd) || ! elf_tdata (obfd)->phdr)
+    return TRUE;
+
+  /* Copy the stack size.  */
+  for (i = 0; i < elf_elfheader (ibfd)->e_phnum; i++)
+    if (elf_tdata (ibfd)->phdr[i].p_type == PT_GNU_STACK)
+      {
+	Elf_Internal_Phdr *iphdr = &elf_tdata (ibfd)->phdr[i];
+
+	for (i = 0; i < elf_elfheader (obfd)->e_phnum; i++)
+	  if (elf_tdata (obfd)->phdr[i].p_type == PT_GNU_STACK)
+	    {
+	      memcpy (&elf_tdata (obfd)->phdr[i], iphdr, sizeof (*iphdr));
+
+	      /* Rewrite the phdrs, since we're only called after they
+		 were first written.  */
+	      if (bfd_seek (obfd, (bfd_signed_vma) get_elf_backend_data (obfd)
+			    ->s->sizeof_ehdr, SEEK_SET) != 0
+		  || get_elf_backend_data (obfd)->s
+		  ->write_out_phdrs (obfd, elf_tdata (obfd)->phdr,
+				     elf_elfheader (obfd)->e_phnum) != 0)
+		return FALSE;
+	      break;
+	    }
+
+	break;
+      }
+
+  return TRUE;
+}
+
+static bfd_boolean
+ubicom32fdpic_elf_relocate_section (bfd * output_bfd,
+				    struct bfd_link_info *info,
+				    bfd * input_bfd,
+				    asection * input_section,
+				    bfd_byte * contents,
+				    Elf_Internal_Rela * relocs,
+				    Elf_Internal_Sym * local_syms,
+				    asection ** local_sections)
+{
+  Elf_Internal_Shdr *symtab_hdr;
+  struct elf_link_hash_entry **sym_hashes;
+  Elf_Internal_Rela *rel;
+  Elf_Internal_Rela *relend;
+  unsigned isec_segment, got_segment, plt_segment,
+    check_segment[2];
+  int silence_segment_error = !(info->shared || info->pie);
+
+  if (info->relocatable)
+    return TRUE;
+
+  symtab_hdr = & elf_tdata (input_bfd)->symtab_hdr;
+  sym_hashes = elf_sym_hashes (input_bfd);
+  relend     = relocs + input_section->reloc_count;
+
+  isec_segment = ubicom32fdpic_osec_to_segment (output_bfd,
+						input_section->output_section);
+  if (IS_FDPIC (output_bfd) && ubicom32fdpic_got_section (info))
+    got_segment = ubicom32fdpic_osec_to_segment (output_bfd,
+						 ubicom32fdpic_got_section (info)
+						 ->output_section);
+  else
+    got_segment = -1;
+  if (IS_FDPIC (output_bfd) && elf_hash_table (info)->dynamic_sections_created)
+    plt_segment = ubicom32fdpic_osec_to_segment (output_bfd,
+						 ubicom32fdpic_plt_section (info)
+						 ->output_section);
+  else
+    plt_segment = -1;
+
+  for (rel = relocs; rel < relend; rel ++)
+    {
+      reloc_howto_type *howto;
+      unsigned long r_symndx;
+      Elf_Internal_Sym *sym;
+      asection *sec;
+      struct elf_link_hash_entry *h;
+      bfd_vma relocation;
+      bfd_reloc_status_type r;
+      const char * name = NULL;
+      int r_type;
+      asection *osec;
+      struct ubicom32fdpic_relocs_info *picrel = NULL;
+      bfd_vma orig_addend = rel->r_addend;
+
+      r_type = ELF32_R_TYPE (rel->r_info);
+
+      if (r_type == R_UBICOM32_GNU_VTINHERIT
+	  || r_type == R_UBICOM32_GNU_VTENTRY)
+	continue;
+
+      /* This is a final link.  */
+      r_symndx = ELF32_R_SYM (rel->r_info);
+
+      //howto = ubicom32_reloc_type_lookup (input_bfd, r_type);
+      howto  = ubicom32_elf_howto_table + ELF32_R_TYPE (rel->r_info);
+      if (howto == NULL)
+	{
+	  bfd_set_error (bfd_error_bad_value);
+	  return FALSE;
+	}
+
+      h      = NULL;
+      sym    = NULL;
+      sec    = NULL;
+
+      if (r_symndx < symtab_hdr->sh_info)
+	{
+	  sym = local_syms + r_symndx;
+	  osec = sec = local_sections [r_symndx];
+	  relocation = _bfd_elf_rela_local_sym (output_bfd, sym, &sec, rel);
+
+	  name = bfd_elf_string_from_elf_section
+	    (input_bfd, symtab_hdr->sh_link, sym->st_name);
+	  name = (name == NULL) ? bfd_section_name (input_bfd, sec) : name;
+	}
+      else
+	{
+	  h = sym_hashes [r_symndx - symtab_hdr->sh_info];
+
+	  while (h->root.type == bfd_link_hash_indirect
+		 || h->root.type == bfd_link_hash_warning)
+	    h = (struct elf_link_hash_entry *) h->root.u.i.link;
+
+	  name = h->root.root.string;
+
+	  if ((h->root.type == bfd_link_hash_defined
+	       || h->root.type == bfd_link_hash_defweak)
+	      && ! UBICOM32FDPIC_SYM_LOCAL (info, h))
+	    {
+	      sec = NULL;
+	      relocation = 0;
+	    }
+	  else
+	    if (h->root.type == bfd_link_hash_defined
+		|| h->root.type == bfd_link_hash_defweak)
+	      {
+		sec = h->root.u.def.section;
+		relocation = (h->root.u.def.value
+			      + sec->output_section->vma
+			      + sec->output_offset);
+	      }
+	    else if (h->root.type == bfd_link_hash_undefweak)
+	      {
+		relocation = 0;
+	      }
+	    else if (info->unresolved_syms_in_objects == RM_IGNORE
+		     && ELF_ST_VISIBILITY (h->other) == STV_DEFAULT)
+	      relocation = 0;
+	    else
+	      {
+		if (! ((*info->callbacks->undefined_symbol)
+		       (info, h->root.root.string, input_bfd,
+			input_section, rel->r_offset,
+			(info->unresolved_syms_in_objects == RM_GENERATE_ERROR
+			 || ELF_ST_VISIBILITY (h->other)))))
+		  return FALSE;
+		relocation = 0;
+	      }
+	  osec = sec;
+	}
+
+      switch (r_type)
+	{
+	case R_UBICOM32_24_PCREL:
+	case R_UBICOM32_32:
+	  if (! IS_FDPIC (output_bfd))
+	    goto non_fdpic;
+
+	case R_UBICOM32_FUNCDESC_VALUE:
+	case R_UBICOM32_FUNCDESC:
+	case R_UBICOM32_GOTOFFSET_LO:
+	case R_UBICOM32_GOTOFFSET_HI:
+	case R_UBICOM32_FUNCDESC_GOTOFFSET_LO:
+	case R_UBICOM32_FUNCDESC_GOTOFFSET_HI:
+	  if (h != NULL)
+	    picrel = ubicom32fdpic_relocs_info_for_global (ubicom32fdpic_relocs_info
+							   (info), input_bfd, h,
+							   orig_addend, INSERT);
+	  else
+	    /* In order to find the entry we created before, we must
+	       use the original addend, not the one that may have been
+	       modified by _bfd_elf_rela_local_sym().  */
+	    picrel = ubicom32fdpic_relocs_info_for_local (ubicom32fdpic_relocs_info
+							  (info), input_bfd, r_symndx,
+							  orig_addend, INSERT);
+	  if (! picrel)
+	    return FALSE;
+
+	  if (!ubicom32fdpic_emit_got_relocs_plt_entries (picrel, output_bfd, info,
+							  osec, sym,
+							  rel->r_addend))
+	    {
+	      (*_bfd_error_handler)
+		(_("%B: relocation at `%A+0x%x' references symbol `%s' with nonzero addend"),
+		 input_bfd, input_section, rel->r_offset, name);
+	      return FALSE;
+
+	    }
+
+	  break;
+	case R_UBICOM32_21_PCREL:
+	case R_UBICOM32_HI24:
+	case R_UBICOM32_LO7_S:
+	  //printf("Seeing this stuff Don;t know what to do. r_type %d r_symndx %d %s %s\n", r_type, r_symndx, input_bfd->filename, input_section->name);
+	  break;
+
+	default:
+	non_fdpic:
+	  picrel = NULL;
+	  //printf("h = 0x%x %d\n", h, UBICOM32FDPIC_SYM_LOCAL (info, h));
+	  if (h && ! UBICOM32FDPIC_SYM_LOCAL (info, h))
+	    {
+	      printf("h = 0x%x %d\n", (unsigned int)h, UBICOM32FDPIC_SYM_LOCAL (info, h));
+	      printf("Seeing this stuff. r_type %d r_symndx %ld %s %s\n", r_type, r_symndx, input_bfd->filename, input_section->name);
+	      info->callbacks->warning
+		(info, _("relocation references symbol not defined in the module"),
+		 name, input_bfd, input_section, rel->r_offset);
+	      return FALSE;
+	    }
+	  break;
+	}
+
+      switch (r_type)
+	{
+	case R_UBICOM32_21_PCREL:
+	case R_UBICOM32_HI24:
+	case R_UBICOM32_LO7_S:
+	  //printf("Seeing this stuff. r_type %d r_symndx %d %s %s\n", r_type, r_symndx, input_bfd->filename, input_section->name);
+	  check_segment[0] = check_segment[1] = got_segment;
+	  break;
+
+	case R_UBICOM32_24_PCREL:
+	  check_segment[0] = isec_segment;
+	  if (! IS_FDPIC (output_bfd))
+	    check_segment[1] = isec_segment;
+	  else if (picrel->plt)
+	    {
+	      relocation = ubicom32fdpic_plt_section (info)->output_section->vma
+		+ ubicom32fdpic_plt_section (info)->output_offset
+		+ picrel->plt_entry;
+
+	      /* subtract rel->addend. This will get added back in the 23pcrel howto routine. */
+	      relocation -= rel->r_addend;
+
+	      check_segment[1] = plt_segment;
+	    }
+	  /* We don't want to warn on calls to undefined weak symbols,
+	     as calls to them must be protected by non-NULL tests
+	     anyway, and unprotected calls would invoke undefined
+	     behavior.  */
+	  else if (picrel->symndx == -1
+		   && picrel->d.h->root.type == bfd_link_hash_undefweak)
+	    check_segment[1] = check_segment[0];
+	  else
+	    check_segment[1] = sec
+	      ? ubicom32fdpic_osec_to_segment (output_bfd, sec->output_section)
+	      : (unsigned)-1;
+	  break;
+
+	case R_UBICOM32_GOTOFFSET_LO:
+	  relocation = picrel->got_entry >> 2;
+	  check_segment[0] = check_segment[1] = got_segment;
+	  break;
+
+	case R_UBICOM32_FUNCDESC_GOTOFFSET_LO:
+	  relocation = picrel->fdgot_entry >> 2;
+	  check_segment[0] = check_segment[1] = got_segment;
+	  break;
+
+	case R_UBICOM32_FUNCDESC:
+	  {
+	    int dynindx;
+	    bfd_vma addend = rel->r_addend;
+
+	    if (! (h && h->root.type == bfd_link_hash_undefweak
+		   && UBICOM32FDPIC_SYM_LOCAL (info, h)))
+	      {
+		/* If the symbol is dynamic and there may be dynamic
+		   symbol resolution because we are or are linked with a
+		   shared library, emit a FUNCDESC relocation such that
+		   the dynamic linker will allocate the function
+		   descriptor.  If the symbol needs a non-local function
+		   descriptor but binds locally (e.g., its visibility is
+		   protected, emit a dynamic relocation decayed to
+		   section+offset.  */
+		if (h && ! UBICOM32FDPIC_FUNCDESC_LOCAL (info, h)
+		    && UBICOM32FDPIC_SYM_LOCAL (info, h)
+		    && !(info->executable && !info->pie))
+		  {
+		    dynindx = elf_section_data (h->root.u.def.section
+						->output_section)->dynindx;
+		    addend += h->root.u.def.section->output_offset
+		      + h->root.u.def.value;
+		  }
+		else if (h && ! UBICOM32FDPIC_FUNCDESC_LOCAL (info, h))
+		  {
+		    if (addend)
+		      {
+			info->callbacks->warning
+			  (info, _("R_UBICOM32_FUNCDESC references dynamic symbol with nonzero addend"),
+			   name, input_bfd, input_section, rel->r_offset);
+			return FALSE;
+		      }
+		    dynindx = h->dynindx;
+		  }
+		else
+		  {
+		    /* Otherwise, we know we have a private function
+		       descriptor, so reference it directly.  */
+		    BFD_ASSERT (picrel->privfd);
+		    r_type = R_UBICOM32_32; // was FUNCDESC but bfin uses 32 bit
+		    dynindx = elf_section_data (ubicom32fdpic_got_section (info)
+						->output_section)->dynindx;
+		    addend = ubicom32fdpic_got_section (info)->output_offset
+		      + ubicom32fdpic_got_initial_offset (info)
+		      + picrel->fd_entry;
+		  }
+
+		/* If there is room for dynamic symbol resolution, emit
+		   the dynamic relocation.  However, if we're linking an
+		   executable at a fixed location, we won't have emitted a
+		   dynamic symbol entry for the got section, so idx will
+		   be zero, which means we can and should compute the
+		   address of the private descriptor ourselves.  */
+		if (info->executable && !info->pie
+		    && (!h || UBICOM32FDPIC_FUNCDESC_LOCAL (info, h)))
+		  {
+		    addend += ubicom32fdpic_got_section (info)->output_section->vma;
+		    if ((bfd_get_section_flags (output_bfd,
+						input_section->output_section)
+			 & (SEC_ALLOC | SEC_LOAD)) == (SEC_ALLOC | SEC_LOAD))
+		      {
+			if (ubicom32fdpic_osec_readonly_p (output_bfd,
+							   input_section
+							   ->output_section))
+			  {
+			    info->callbacks->warning
+			      (info,
+			       _("cannot emit fixups in read-only section"),
+			       name, input_bfd, input_section, rel->r_offset);
+			    return FALSE;
+			  }
+			ubicom32fdpic_add_rofixup (output_bfd,
+						   ubicom32fdpic_gotfixup_section
+						   (info),
+						   _bfd_elf_section_offset
+						   (output_bfd, info,
+						    input_section, rel->r_offset)
+						   + input_section
+						   ->output_section->vma
+						   + input_section->output_offset,
+						   picrel);
+		      }
+		  }
+		else if ((bfd_get_section_flags (output_bfd,
+						 input_section->output_section)
+			  & (SEC_ALLOC | SEC_LOAD)) == (SEC_ALLOC | SEC_LOAD))
+		  {
+		    bfd_vma offset;
+
+		    if (ubicom32fdpic_osec_readonly_p (output_bfd,
+						       input_section
+						       ->output_section))
+		      {
+			info->callbacks->warning
+			  (info,
+			   _("cannot emit dynamic relocations in read-only section"),
+			   name, input_bfd, input_section, rel->r_offset);
+			return FALSE;
+		      }
+		    offset = _bfd_elf_section_offset (output_bfd, info,
+						      input_section, rel->r_offset);
+		    /* Only output a reloc for a not deleted entry.  */
+		    if (offset >= (bfd_vma) -2)
+		      ubicom32fdpic_add_dyn_reloc (output_bfd,
+						   ubicom32fdpic_gotrel_section (info),
+						   0,
+						   R_UBICOM32_NONE,
+						   dynindx, addend, picrel);
+		    else
+		      ubicom32fdpic_add_dyn_reloc (output_bfd,
+						   ubicom32fdpic_gotrel_section (info),
+						   offset + input_section
+						   ->output_section->vma
+						   + input_section->output_offset,
+						   r_type,
+						   dynindx, addend, picrel);
+		  }
+		else
+		  addend += ubicom32fdpic_got_section (info)->output_section->vma;
+	      }
+
+	    /* We want the addend in-place because dynamic
+	       relocations are REL.  Setting relocation to it should
+	       arrange for it to be installed.  */
+	    relocation = addend - rel->r_addend;
+	  }
+	  check_segment[0] = check_segment[1] = got_segment;
+	  break;
+
+	case R_UBICOM32_32:
+	  if (! IS_FDPIC (output_bfd))
+	    {
+	      check_segment[0] = check_segment[1] = -1;
+	      break;
+	    }
+	  /* Fall through.  */
+	case R_UBICOM32_FUNCDESC_VALUE:
+	  {
+	    int dynindx;
+	    bfd_vma addend = rel->r_addend;
+	    bfd_vma offset;
+	    offset = _bfd_elf_section_offset (output_bfd, info,
+					      input_section, rel->r_offset);
+
+	    /* If the symbol is dynamic but binds locally, use
+	       section+offset.  */
+	    if (h && ! UBICOM32FDPIC_SYM_LOCAL (info, h))
+	      {
+		if (addend && r_type == R_UBICOM32_FUNCDESC_VALUE)
+		  {
+		    info->callbacks->warning
+		      (info, _("R_UBICOM32_FUNCDESC_VALUE references dynamic symbol with nonzero addend"),
+		       name, input_bfd, input_section, rel->r_offset);
+		    return FALSE;
+		  }
+		dynindx = h->dynindx;
+	      }
+	    else
+	      {
+		if (h)
+		  addend += h->root.u.def.value;
+		else
+		  addend += sym->st_value;
+		if (osec)
+		  addend += osec->output_offset;
+		if (osec && osec->output_section
+		    && ! bfd_is_abs_section (osec->output_section)
+		    && ! bfd_is_und_section (osec->output_section))
+		  dynindx = elf_section_data (osec->output_section)->dynindx;
+		else
+		  dynindx = 0;
+	      }
+
+	    /* If we're linking an executable at a fixed address, we
+	       can omit the dynamic relocation as long as the symbol
+	       is defined in the current link unit (which is implied
+	       by its output section not being NULL).  */
+	    if (info->executable && !info->pie
+		&& (!h || UBICOM32FDPIC_SYM_LOCAL (info, h)))
+	      {
+		if (osec)
+		  addend += osec->output_section->vma;
+		if (IS_FDPIC (input_bfd)
+		    && (bfd_get_section_flags (output_bfd,
+					       input_section->output_section)
+			& (SEC_ALLOC | SEC_LOAD)) == (SEC_ALLOC | SEC_LOAD))
+		  {
+		    if (ubicom32fdpic_osec_readonly_p (output_bfd,
+						       input_section
+						       ->output_section))
+		      {
+			info->callbacks->warning
+			  (info,
+			   _("cannot emit fixups in read-only section"),
+			   name, input_bfd, input_section, rel->r_offset);
+			return FALSE;
+		      }
+		    if (!h || h->root.type != bfd_link_hash_undefweak)
+		      {
+			/* Only output a reloc for a not deleted entry.  */
+			if (offset >= (bfd_vma)-2)
+			  ubicom32fdpic_add_rofixup (output_bfd,
+						     ubicom32fdpic_gotfixup_section
+						     (info), -1, picrel);
+			else
+			  ubicom32fdpic_add_rofixup (output_bfd,
+						     ubicom32fdpic_gotfixup_section
+						     (info),
+						     offset + input_section
+						     ->output_section->vma
+						     + input_section->output_offset,
+						     picrel);
+
+			if (r_type == R_UBICOM32_FUNCDESC_VALUE)
+			  {
+			    if (offset >= (bfd_vma)-2)
+			      ubicom32fdpic_add_rofixup
+				(output_bfd,
+				 ubicom32fdpic_gotfixup_section (info),
+				 -1, picrel);
+			    else
+			      ubicom32fdpic_add_rofixup
+				(output_bfd,
+				 ubicom32fdpic_gotfixup_section (info),
+				 offset + input_section->output_section->vma
+				 + input_section->output_offset + 4, picrel);
+			  }
+		      }
+		  }
+	      }
+	    else
+	      {
+		if ((bfd_get_section_flags (output_bfd,
+					    input_section->output_section)
+		     & (SEC_ALLOC | SEC_LOAD)) == (SEC_ALLOC | SEC_LOAD))
+		  {
+		    if (ubicom32fdpic_osec_readonly_p (output_bfd,
+						       input_section
+						       ->output_section))
+		      {
+			info->callbacks->warning
+			  (info,
+			   _("cannot emit dynamic relocations in read-only section"),
+			   name, input_bfd, input_section, rel->r_offset);
+			return FALSE;
+		      }
+		    /* Only output a reloc for a not deleted entry.  */
+		    if (offset >= (bfd_vma)-2)
+		      ubicom32fdpic_add_dyn_reloc (output_bfd,
+						   ubicom32fdpic_gotrel_section (info),
+						   0, R_UBICOM32_NONE, dynindx, addend, picrel);
+		    else
+		      ubicom32fdpic_add_dyn_reloc (output_bfd,
+						   ubicom32fdpic_gotrel_section (info),
+						   offset
+						   + input_section
+						   ->output_section->vma
+						   + input_section->output_offset,
+						   r_type, dynindx, addend, picrel);
+		  }
+		else if (osec)
+		  addend += osec->output_section->vma;
+		/* We want the addend in-place because dynamic
+		   relocations are REL.  Setting relocation to it
+		   should arrange for it to be installed.  */
+		relocation = addend - rel->r_addend;
+	      }
+
+	    if (r_type == R_UBICOM32_FUNCDESC_VALUE && offset < (bfd_vma)-2)
+	      {
+		/* If we've omitted the dynamic relocation, just emit
+		   the fixed addresses of the symbol and of the local
+		   GOT base offset.  */
+		if (info->executable && !info->pie
+		    && (!h || UBICOM32FDPIC_SYM_LOCAL (info, h)))
+		  bfd_put_32 (output_bfd,
+			      ubicom32fdpic_got_section (info)->output_section->vma
+			      + ubicom32fdpic_got_section (info)->output_offset
+			      + ubicom32fdpic_got_initial_offset (info),
+			      contents + rel->r_offset + 4);
+		else
+		  /* A function descriptor used for lazy or local
+		     resolving is initialized such that its high word
+		     contains the output section index in which the
+		     PLT entries are located, and the low word
+		     contains the offset of the lazy PLT entry entry
+		     point into that section.  */
+		  bfd_put_32 (output_bfd,
+			      h && ! UBICOM32FDPIC_SYM_LOCAL (info, h)
+			      ? 0
+			      : ubicom32fdpic_osec_to_segment (output_bfd,
+							       sec
+							       ->output_section),
+			      contents + rel->r_offset + 4);
+	      }
+	  }
+	  check_segment[0] = check_segment[1] = got_segment;
+	  break;
+
+	default:
+	  check_segment[0] = isec_segment;
+	  check_segment[1] = sec
+	    ? ubicom32fdpic_osec_to_segment (output_bfd, sec->output_section)
+	    : (unsigned)-1;
+	  break;
+	}
+
+      if (check_segment[0] != check_segment[1] && IS_FDPIC (output_bfd))
+	{
+#if 1 /* If you take this out, remove the #error from fdpic-static-6.d
+	 in the ld testsuite.  */
+	  /* This helps catch problems in GCC while we can't do more
+	     than static linking.  The idea is to test whether the
+	     input file basename is crt0.o only once.  */
+	  if (silence_segment_error == 1)
+	    silence_segment_error =
+	      (strlen (input_bfd->filename) == 6
+	       && strcmp (input_bfd->filename, "crt0.o") == 0)
+	      || (strlen (input_bfd->filename) > 6
+		  && strcmp (input_bfd->filename
+			     + strlen (input_bfd->filename) - 7,
+			     "/crt0.o") == 0)
+	      ? -1 : 0;
+#endif
+	  if (!silence_segment_error
+	      /* We don't want duplicate errors for undefined
+		 symbols.  */
+	      && !(picrel && picrel->symndx == -1
+		   && picrel->d.h->root.type == bfd_link_hash_undefined))
+	    info->callbacks->warning
+	      (info,
+	       (info->shared || info->pie)
+	       ? _("relocations between different segments are not supported")
+	       : _("warning: relocation references a different segment"),
+	       name, input_bfd, input_section, rel->r_offset);
+	  if (!silence_segment_error && (info->shared || info->pie))
+	    return FALSE;
+	  elf_elfheader (output_bfd)->e_flags |= 0x80000000;
+	}
+
+      switch (r_type)
+	{
+	case R_UBICOM32_LO16:
+	  r = ubicom32_elf_relocate_lo16 (input_bfd, rel, contents, relocation);
+	  break;
+
+	case R_UBICOM32_HI16:
+	  r = ubicom32_elf_relocate_hi16 (input_bfd, rel, contents, relocation);
+	  break;
+
+	case R_UBICOM32_HI24:
+	  r = ubicom32_elf_relocate_hi24 (input_bfd, rel, contents, relocation);
+	  break;
+
+	case R_UBICOM32_LO7_S:
+	  r = ubicom32_elf_relocate_lo7_s (input_bfd, rel, contents, relocation);
+	  break;
+
+	case R_UBICOM32_LO7_2_S:
+	  r = ubicom32_elf_relocate_lo7_2_s (input_bfd, rel, contents, relocation);
+	  break;
+
+	case R_UBICOM32_LO7_4_S:
+	  r = ubicom32_elf_relocate_lo7_4_s (input_bfd, rel, contents, relocation);
+	  break;
+
+	case R_UBICOM32_LO7_D:
+	  r = ubicom32_elf_relocate_lo7_d (input_bfd, rel, contents, relocation);
+	  break;
+
+	case R_UBICOM32_LO7_2_D:
+	  r = ubicom32_elf_relocate_lo7_2_d (input_bfd, rel, contents, relocation);
+	  break;
+
+	case R_UBICOM32_LO7_4_D:
+	  r = ubicom32_elf_relocate_lo7_4_d (input_bfd, rel, contents, relocation);
+	  break;
+
+	case R_UBICOM32_24_PCREL:
+	  r = ubicom32_elf_relocate_pcrel24 (input_bfd, input_section, rel, contents, relocation);
+	  break;
+
+	case R_UBICOM32_LO7_CALLI:
+	  r = ubicom32_elf_relocate_lo_calli (input_bfd, rel, contents, relocation, 7);
+	  break;
+
+	case R_UBICOM32_LO16_CALLI:
+	  r = ubicom32_elf_relocate_lo_calli (input_bfd, rel, contents, relocation, 18);
+	  break;
+
+	case R_UBICOM32_GOTOFFSET_LO:
+	  r = ubicom32_elf_relocate_gotoffset_lo(input_bfd, input_section, rel, contents, relocation);
+	  break;
+
+	case R_UBICOM32_FUNCDESC_GOTOFFSET_LO:
+	  r = ubicom32_elf_relocate_funcdesc_gotoffset_lo(input_bfd, input_section, rel, contents, relocation);
+	  break;
+
+	case R_UBICOM32_32:
+	case R_UBICOM32_FUNCDESC:
+	  /* relocation &= ~(0xff << 24); */
+	  /* FALLTHROUGH */
+
+	default:
+	  r = ubicom32_final_link_relocate (howto, input_bfd, input_section,
+					    contents, rel, relocation);
+	  break;
+	}
+    }
+
+  return TRUE;
+}
+
+#define elf_info_to_howto			ubicom32_info_to_howto_rela
+#define elf_info_to_howto_rel			NULL
+
+#define bfd_elf32_bfd_reloc_type_lookup		ubicom32_reloc_type_lookup
+#define bfd_elf32_bfd_reloc_name_lookup		ubicom32_reloc_name_lookup
+#define bfd_elf32_bfd_relax_section		ubicom32_elf_relax_section
+
+#define elf_backend_relocate_section		ubicom32_elf_relocate_section
+#define elf_backend_gc_mark_hook		ubicom32_elf_gc_mark_hook
+#define elf_backend_gc_sweep_hook		ubicom32_elf_gc_sweep_hook
+#define elf_backend_check_relocs                ubicom32_elf_check_relocs
+#define elf_backend_object_p		        ubicom32_elf_object_p
+
+#define elf_backend_discard_info		ubicom32_elf_discard_info
+
+#define elf_backend_can_gc_sections		1
+
+#define bfd_elf32_bfd_set_private_flags		ubicom32_elf_set_private_flags
+#define bfd_elf32_bfd_copy_private_bfd_data	ubicom32_elf_copy_private_bfd_data
+#define bfd_elf32_bfd_merge_private_bfd_data	ubicom32_elf_merge_private_bfd_data
+#define bfd_elf32_bfd_print_private_bfd_data	ubicom32_elf_print_private_bfd_data
+
+#define bfd_elf32_bfd_extcode_relax		NULL
+
+#define TARGET_BIG_SYM	 bfd_elf32_ubicom32_vec
+#define TARGET_BIG_NAME  "elf32-ubicom32"
+
+#define ELF_ARCH	 bfd_arch_ubicom32
+#define ELF_MACHINE_CODE EM_UBICOM32
+#define ELF_MAXPAGESIZE  0x1000
+
+#include "elf32-target.h"
+
+#undef TARGET_BIG_SYM
+#define TARGET_BIG_SYM	 bfd_elf32_ubicom32fdpic_vec
+#undef TARGET_BIG_NAME
+#define TARGET_BIG_NAME  "elf32-ubicom32fdpic"
+#undef	elf32_bed
+#define	elf32_bed		elf32_ubicom32fdpic_bed
+
+#undef elf_backend_relocate_section
+#define elf_backend_relocate_section		ubicom32fdpic_elf_relocate_section
+
+#undef elf_backend_check_relocs
+#define elf_backend_check_relocs                ubicom32fdpic_elf_check_relocs
+
+#undef elf_backend_gc_sweep_hook
+#define elf_backend_gc_sweep_hook		ubicom32fdpic_elf_gc_sweep_hook
+#undef bfd_elf32_bfd_link_hash_table_create
+#define bfd_elf32_bfd_link_hash_table_create \
+		ubicom32fdpic_elf_link_hash_table_create
+#undef elf_backend_always_size_sections
+#define elf_backend_always_size_sections \
+		ubicom32fdpic_elf_always_size_sections
+#undef elf_backend_modify_program_headers
+#define elf_backend_modify_program_headers \
+		ubicom32fdpic_elf_modify_program_headers
+#undef bfd_elf32_bfd_copy_private_bfd_data
+#define bfd_elf32_bfd_copy_private_bfd_data \
+		ubicom32fdpic_elf_copy_private_bfd_data
+
+#undef elf_backend_create_dynamic_sections
+#define elf_backend_create_dynamic_sections \
+		ubicom32fdpic_elf_create_dynamic_sections
+#undef elf_backend_adjust_dynamic_symbol
+#define elf_backend_adjust_dynamic_symbol \
+		ubicom32fdpic_elf_adjust_dynamic_symbol
+#undef elf_backend_size_dynamic_sections
+#define elf_backend_size_dynamic_sections \
+		ubicom32fdpic_elf_size_dynamic_sections
+#undef elf_backend_finish_dynamic_symbol
+#define elf_backend_finish_dynamic_symbol \
+		ubicom32fdpic_elf_finish_dynamic_symbol
+#undef elf_backend_finish_dynamic_sections
+#define elf_backend_finish_dynamic_sections \
+		ubicom32fdpic_elf_finish_dynamic_sections
+
+#undef elf_backend_can_make_relative_eh_frame
+#define elf_backend_can_make_relative_eh_frame \
+		ubicom32fdpic_elf_use_relative_eh_frame
+#undef elf_backend_can_make_lsda_relative_eh_frame
+#define elf_backend_can_make_lsda_relative_eh_frame \
+		ubicom32fdpic_elf_use_relative_eh_frame
+#undef elf_backend_encode_eh_address
+#define elf_backend_encode_eh_address \
+		ubicom32fdpic_elf_encode_eh_address
+
+#undef elf_backend_may_use_rel_p
+#define elf_backend_may_use_rel_p       1
+#undef elf_backend_may_use_rela_p
+#define elf_backend_may_use_rela_p      1
+/* We use REL for dynamic relocations only.  */
+#undef elf_backend_default_use_rela_p
+#define elf_backend_default_use_rela_p  1
+
+#undef elf_backend_omit_section_dynsym
+#define elf_backend_omit_section_dynsym ubicom32fdpic_elf_link_omit_section_dynsym
+
+#undef elf_backend_can_refcount
+#define elf_backend_can_refcount 1
+
+#undef elf_backend_want_got_plt
+#define elf_backend_want_got_plt 0
+
+#undef elf_backend_plt_readonly
+#define elf_backend_plt_readonly 1
+
+#undef elf_backend_want_plt_sym
+#define elf_backend_want_plt_sym 1
+
+#undef elf_backend_got_header_size
+#define elf_backend_got_header_size     12
+
+#undef elf_backend_rela_normal
+#define elf_backend_rela_normal         1
+
+#include "elf32-target.h"
--- a/bfd/libbfd.h
+++ b/bfd/libbfd.h
@@ -1681,6 +1681,39 @@ static const char *const bfd_reloc_code_
   "BFD_RELOC_IP2K_FR_OFFSET",
   "BFD_RELOC_VPE4KMATH_DATA",
   "BFD_RELOC_VPE4KMATH_INSN",
+  "BFD_RELOC_UBICOM32_21_PCREL",
+  "BFD_RELOC_UBICOM32_24_PCREL",
+  "BFD_RELOC_UBICOM32_HI24",
+  "BFD_RELOC_UBICOM32_LO7_S",
+  "BFD_RELOC_UBICOM32_LO7_2_S",
+  "BFD_RELOC_UBICOM32_LO7_4_S",
+  "BFD_RELOC_UBICOM32_LO7_D",
+  "BFD_RELOC_UBICOM32_LO7_2_D",
+  "BFD_RELOC_UBICOM32_LO7_4_D",
+  "BFD_RELOC_UBICOM32_LO7_CALLI",
+  "BFD_RELOC_UBICOM32_LO16_CALLI",
+  "BFD_RELOC_UBICOM32_GOT_HI24",
+  "BFD_RELOC_UBICOM32_GOT_LO7_S",
+  "BFD_RELOC_UBICOM32_GOT_LO7_2_S",
+  "BFD_RELOC_UBICOM32_GOT_LO7_4_S",
+  "BFD_RELOC_UBICOM32_GOT_LO7_D",
+  "BFD_RELOC_UBICOM32_GOT_LO7_2_D",
+  "BFD_RELOC_UBICOM32_GOT_LO7_4_D",
+  "BFD_RELOC_UBICOM32_FUNCDESC_GOT_HI24",
+  "BFD_RELOC_UBICOM32_FUNCDESC_GOT_LO7_S",
+  "BFD_RELOC_UBICOM32_FUNCDESC_GOT_LO7_2_S",
+  "BFD_RELOC_UBICOM32_FUNCDESC_GOT_LO7_4_S",
+  "BFD_RELOC_UBICOM32_FUNCDESC_GOT_LO7_D",
+  "BFD_RELOC_UBICOM32_FUNCDESC_GOT_LO7_2_D",
+  "BFD_RELOC_UBICOM32_FUNCDESC_GOT_LO7_4_D",
+  "BFD_RELOC_UBICOM32_GOT_LO7_CALLI",
+  "BFD_RELOC_UBICOM32_FUNCDESC_GOT_LO7_CALLI",
+  "BFD_RELOC_UBICOM32_FUNCDESC_VALUE",
+  "BFD_RELOC_UBICOM32_FUNCDESC",
+  "BFD_RELOC_UBICOM32_GOTOFFSET_LO",
+  "BFD_RELOC_UBICOM32_GOTOFFSET_HI",
+  "BFD_RELOC_UBICOM32_FUNCDESC_GOTOFFSET_LO",
+  "BFD_RELOC_UBICOM32_FUNCDESC_GOTOFFSET_HI",
   "BFD_RELOC_VTABLE_INHERIT",
   "BFD_RELOC_VTABLE_ENTRY",
   "BFD_RELOC_IA64_IMM14",
--- a/bfd/reloc.c
+++ b/bfd/reloc.c
@@ -4210,6 +4210,75 @@ ENUMDOC
   Scenix VPE4K coprocessor - data/insn-space addressing
 
 ENUM
+  BFD_RELOC_UBICOM32_21_PCREL
+ENUMX
+  BFD_RELOC_UBICOM32_24_PCREL
+ENUMX
+  BFD_RELOC_UBICOM32_HI24
+ENUMX
+  BFD_RELOC_UBICOM32_LO7_S
+ENUMX
+  BFD_RELOC_UBICOM32_LO7_2_S
+ENUMX
+  BFD_RELOC_UBICOM32_LO7_4_S
+ENUMX
+  BFD_RELOC_UBICOM32_LO7_D
+ENUMX
+  BFD_RELOC_UBICOM32_LO7_2_D
+ENUMX
+  BFD_RELOC_UBICOM32_LO7_4_D
+ENUMX
+  BFD_RELOC_UBICOM32_LO7_CALLI
+ENUMX
+  BFD_RELOC_UBICOM32_LO16_CALLI
+ENUMX
+  BFD_RELOC_UBICOM32_GOT_HI24
+ENUMX
+  BFD_RELOC_UBICOM32_GOT_LO7_S
+ENUMX
+  BFD_RELOC_UBICOM32_GOT_LO7_2_S
+ENUMX
+  BFD_RELOC_UBICOM32_GOT_LO7_4_S
+ENUMX
+  BFD_RELOC_UBICOM32_GOT_LO7_D
+ENUMX
+  BFD_RELOC_UBICOM32_GOT_LO7_2_D
+ENUMX
+  BFD_RELOC_UBICOM32_GOT_LO7_4_D
+ENUMX
+  BFD_RELOC_UBICOM32_FUNCDESC_GOT_HI24
+ENUMX
+  BFD_RELOC_UBICOM32_FUNCDESC_GOT_LO7_S
+ENUMX
+  BFD_RELOC_UBICOM32_FUNCDESC_GOT_LO7_2_S
+ENUMX
+  BFD_RELOC_UBICOM32_FUNCDESC_GOT_LO7_4_S
+ENUMX
+  BFD_RELOC_UBICOM32_FUNCDESC_GOT_LO7_D
+ENUMX
+  BFD_RELOC_UBICOM32_FUNCDESC_GOT_LO7_2_D
+ENUMX
+  BFD_RELOC_UBICOM32_FUNCDESC_GOT_LO7_4_D
+ENUMX
+  BFD_RELOC_UBICOM32_GOT_LO7_CALLI
+ENUMX
+  BFD_RELOC_UBICOM32_FUNCDESC_GOT_LO7_CALLI
+ENUMX
+  BFD_RELOC_UBICOM32_FUNCDESC_VALUE
+ENUMX
+  BFD_RELOC_UBICOM32_FUNCDESC
+ENUMX
+  BFD_RELOC_UBICOM32_GOTOFFSET_LO
+ENUMX
+  BFD_RELOC_UBICOM32_GOTOFFSET_HI
+ENUMX
+  BFD_RELOC_UBICOM32_FUNCDESC_GOTOFFSET_LO
+ENUMX
+  BFD_RELOC_UBICOM32_FUNCDESC_GOTOFFSET_HI
+ENUMDOC
+  Ubicom UBICOM32 Relocations.
+
+ENUM
   BFD_RELOC_VTABLE_INHERIT
 ENUMX
   BFD_RELOC_VTABLE_ENTRY
--- a/bfd/targets.c
+++ b/bfd/targets.c
@@ -663,6 +663,8 @@ extern const bfd_target bfd_elf32_spu_ve
 extern const bfd_target bfd_elf32_tradbigmips_vec;
 extern const bfd_target bfd_elf32_tradlittlemips_vec;
 extern const bfd_target bfd_elf32_us_cris_vec;
+extern const bfd_target bfd_elf32_ubicom32_vec;
+extern const bfd_target bfd_elf32_ubicom32fdpic_vec;
 extern const bfd_target bfd_elf32_v850_vec;
 extern const bfd_target bfd_elf32_vax_vec;
 extern const bfd_target bfd_elf32_xc16x_vec;
@@ -1001,6 +1003,7 @@ static const bfd_target * const _bfd_tar
 	&bfd_elf32_tradbigmips_vec,
 	&bfd_elf32_tradlittlemips_vec,
 	&bfd_elf32_us_cris_vec,
+	&bfd_elf32_ubicom32_vec,
 	&bfd_elf32_v850_vec,
 	&bfd_elf32_vax_vec,
 	&bfd_elf32_xc16x_vec,
--- a/configure
+++ b/configure
@@ -2600,6 +2600,9 @@ case "${target}" in
   xtensa*-*-*)
     noconfigdirs="$noconfigdirs ${libgcj}"
     ;;
+  ubicom32-*-*)
+    noconfigdirs="$noconfigdirs target-libffi"
+    ;;
   ip2k-*-*)
     noconfigdirs="$noconfigdirs target-libiberty target-libstdc++-v3 ${libgcj}"
     ;;
--- a/configure.ac
+++ b/configure.ac
@@ -877,6 +877,9 @@ case "${target}" in
   xtensa*-*-*)
     noconfigdirs="$noconfigdirs ${libgcj}"
     ;;
+  ubicom32-*-*)
+    noconfigdirs="$noconfigdirs target-libffi"
+    ;;
   ip2k-*-*)
     noconfigdirs="$noconfigdirs target-libiberty target-libstdc++-v3 ${libgcj}"
     ;;
--- a/gdb/Makefile.in
+++ b/gdb/Makefile.in
@@ -662,6 +662,7 @@ elf_frv_h =	$(INCLUDE_DIR)/elf/frv.h $(e
 elf_m32c_h =    $(INCLUDE_DIR)/elf/m32c.h $(elf_reloc_macros_h)
 elf_mep_h =     $(INCLUDE_DIR)/elf/mep.h $(elf_reloc_macros_h)
 elf_ppc_h =     $(INCLUDE_DIR)/elf/ppc.h $(elf_reloc_macros_h)
+elf_ubicom32_h =$(INCLUDE_DIR)/elf/ubicom32.h $(elf_reloc_macros_h)
 libaout_h =	$(BFD_SRC)/libaout.h
 libiberty_h =	$(INCLUDE_DIR)/libiberty.h
 libbfd_h =	$(BFD_SRC)/libbfd.h
@@ -676,6 +677,7 @@ frv_desc_h =	$(OPCODES_SRC)/frv-desc.h
 mep_desc_h =	$(OPCODES_SRC)/mep-desc.h
 mep_opc_h =	$(OPCODES_SRC)/mep-opc.h
 sh_opc_h = 	$(OPCODES_SRC)/sh-opc.h
+ubicom32_desc_h =$(OPCODES_SRC)/ubicom32-desc.h
 gdb_callback_h = $(INCLUDE_DIR)/gdb/callback.h
 gdb_fileio_h = $(INCLUDE_DIR)/gdb/fileio.h
 gdb_sim_arm_h =	$(INCLUDE_DIR)/gdb/sim-arm.h
@@ -895,6 +897,7 @@ tracepoint_h = tracepoint.h
 trad_frame_h = trad-frame.h $(frame_h)
 tramp_frame_h = tramp-frame.h $(frame_h)
 typeprint_h = typeprint.h
+ubicom32_tdep_h = ubicom32-tdep.h
 ui_file_h = ui-file.h
 ui_out_h = ui-out.h
 user_regs_h = user-regs.h
@@ -1597,6 +1600,7 @@ ALLDEPFILES = \
 	sparc64nbsd-nat.c sparc64nbsd-tdep.c sparc64obsd-tdep.c \
 	sparcnbsd-nat.c sparcnbsd-tdep.c sparcobsd-tdep.c \
 	spu-linux-nat.c spu-tdep.c \
+	ubicom32-tdep.c \
 	v850-tdep.c \
 	vax-nat.c vax-tdep.c vaxbsd-nat.c vaxnbsd-tdep.c \
 	win32-nat.c \
@@ -2742,6 +2746,9 @@ solib-svr4.o: solib-svr4.c $(defs_h) $(e
 solib-target.o: solib-target.c $(defs_h) $(objfiles_h) $(solist_h) \
 	$(symtab_h) $(symfile_h) $(target_h) $(vec_h) $(xml_support_h) \
 	$(solib_target_h) $(gdb_string_h)
+solib-ubicom32.o: solib-ubicom32.c $(defs_h) $(gdb_string_h) $(inferior_h) \
+	$(gdbcore_h) $(solist_h) $(ubicom32_tdep_h) $(objfiles_h) $(symtab_h) \
+	$(language_h) $(command_h) $(gdbcmd_h) $(elf_ubicom32_h) $(solib_h)
 sol-thread.o: sol-thread.c $(defs_h) $(gdbthread_h) $(target_h) \
 	$(inferior_h) $(gdb_stat_h) $(gdbcmd_h) $(gdbcore_h) $(regcache_h) \
 	$(solib_h) $(symfile_h) $(observer_h) $(gdb_string_h) $(gregset_h)
@@ -2905,6 +2912,9 @@ typeprint.o: typeprint.c $(defs_h) $(gdb
 	$(gdbtypes_h) $(expression_h) $(value_h) $(gdbcore_h) $(command_h) \
 	$(gdbcmd_h) $(target_h) $(language_h) $(cp_abi_h) $(typeprint_h) \
 	$(gdb_string_h)
+ubicom32-tdep.o: ubicom32-tdep.c $(defs_h) $(inferior_h) $(floatformat_h) \
+	$(arch_utils_h) $(gdbcore_h) $(symfile_h) $(gdbthread_h) $(regcache_h) \
+	$(ubicom32_tdep_h) $(ubicom32_desc_h) $(elf_ubicom32_h) $(elf_bfd_h)
 ui-file.o: ui-file.c $(defs_h) $(ui_file_h) $(gdb_string_h)
 ui-out.o: ui-out.c $(defs_h) $(gdb_string_h) $(expression_h) $(language_h) \
 	$(ui_out_h) $(gdb_assert_h)
--- a/gdb/configure.tgt
+++ b/gdb/configure.tgt
@@ -472,6 +472,18 @@ xstormy16-*-*)
 	# No simulator libraries are needed -- target uses SID.
 	;;
 
+ubicom32-*-*)
+	# Target: Ubicom32
+	gdb_target_obs="ubicom32-tdep.o remote-ubicom32-isd.o \
+			remote-ubicom32-dbginterface.o \
+			remote-ubicom32v3-isd.o \
+			remote-ubicom32v3-dbginterface.o \
+			ubicom32_dongle.o remote-ubicom32-posix.o \
+			remote-ubicom32-posix-backend.o solib.o \
+			solib-ubicom32.o"
+	build_gdbserver=yes
+	;;
+
 v850*-*-elf)
 	# Target: NEC V850 processor
 	gdb_target_obs="v850-tdep.o"
--- a/gdb/gdbserver/Makefile.in
+++ b/gdb/gdbserver/Makefile.in
@@ -220,6 +220,7 @@ clean:
 	rm -f reg-arm.c reg-i386.c reg-ia64.c reg-m32r.c reg-m68k.c
 	rm -f reg-ppc.c reg-sh.c reg-spu.c reg-x86-64.c reg-i386-linux.c
 	rm -f reg-cris.c reg-crisv32.c reg-x86-64-linux.c reg-xtensa.c
+	rm -f reg-ubicom32-uclinux.c
 	rm -f arm-with-iwmmxt.c mips-linux.c mips64-linux.c
 	rm -f powerpc-32.c powerpc-64.c powerpc-e500.c
 	rm -f xml-builtin.c stamp-xml target.xml
@@ -388,6 +389,9 @@ reg-sh.c : $(srcdir)/../regformats/reg-s
 reg-spu.o : reg-spu.c $(regdef_h)
 reg-spu.c : $(srcdir)/../regformats/reg-spu.dat $(regdat_sh)
 	$(SHELL) $(regdat_sh) $(srcdir)/../regformats/reg-spu.dat reg-spu.c
+reg-ubicom32-uclinux.o : reg-ubicom32-uclinux.c $(regdef_h)
+reg-ubicom32-uclinux.c : $(srcdir)/../regformats/reg-ubicom32-uclinux.dat $(regdat_sh)
+	$(SHELL) $(regdat_sh) $(srcdir)/../regformats/reg-ubicom32-uclinux.dat reg-ubicom32-uclinux.c
 reg-x86-64.o : reg-x86-64.c $(regdef_h)
 reg-x86-64.c : $(srcdir)/../regformats/reg-x86-64.dat $(regdat_sh)
 	$(SHELL) $(regdat_sh) $(srcdir)/../regformats/reg-x86-64.dat reg-x86-64.c
--- a/gdb/gdbserver/configure.srv
+++ b/gdb/gdbserver/configure.srv
@@ -160,6 +160,12 @@ case "${target}" in
   spu*-*-*)		srv_regobj=reg-spu.o
 			srv_tgtobj="spu-low.o"
 			;;
+  ubicom32-*)		srv_regobj=reg-ubicom32-uclinux.o
+			srv_tgtobj="linux-low.o linux-ubicom32-low.o"
+			srv_linux_usrregs=yes
+			srv_linux_regsets=yes
+			srv_linux_thread_db=yes
+			;;
   x86_64-*-linux*)	srv_regobj=reg-x86-64-linux.o
 			srv_tgtobj="linux-low.o linux-x86-64-low.o i387-fp.o"
 			srv_linux_regsets=yes
--- /dev/null
+++ b/gdb/gdbserver/linux-ubicom32-low.c
@@ -0,0 +1,170 @@
+/* GNU/Linux/ubicom32 specific low level interface, for the remote server for GDB.
+   Copyright (C) 1995, 1996, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,
+   2007 Free Software Foundation, Inc.
+
+   This file is part of GDB.
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+#include "server.h"
+#include "linux-low.h"
+
+#ifdef HAVE_SYS_REG_H
+#include <sys/reg.h>
+#endif
+
+#include <asm/ptrace.h>
+
+/* This table maps gdb register file with the one provided through
+ * ptrace.  It must line up with ubicom32_posix_regs[] in
+ * gdb/ubicom32-tdep.c
+ */
+static int ubicom32_regmap[] =
+  {
+    PT_D0,  PT_D1,  PT_D2,  PT_D3,  	/* 0-3 */
+    PT_D4,  PT_D5,  PT_D6,  PT_D7,     	/* 4-7 */
+    PT_D8,  PT_D9,  PT_D10, PT_D11,	/* 8-11 */
+    PT_D12, PT_D13, PT_D14, PT_D15, 	/* 12-15 */
+    PT_A0,  PT_A1,  PT_A2,  PT_A3, 	/* 16-19 */
+    PT_A4,  PT_A5,  PT_A6,  PT_SP, 	/* 20-23 */
+    PT_ACC0HI, PT_ACC0LO,  		/* 24, 25 */
+    PT_MAC_RC16,  			/* 26 */
+    PT_ACC1HI, PT_ACC1LO,  		/* 27, 28 */
+    PT_SOURCE3, 	 		/* 29 */
+    PT_INST_CNT, 	 		/* 30 */
+    PT_CSR, 	 			/* 31 */
+    PT_DUMMY_UNUSED,  			/* 32 */
+    PT_INT_MASK0,  			/* 33 */
+    PT_INT_MASK1,  			/* 34 */
+    PT_TRAP_CAUSE,  			/* 35 */
+    PT_PC,	  			/* 36 */
+    PT_TEXT_ADDR, PT_TEXT_END_ADDR, PT_DATA_ADDR, /* 37, 38, 39 */
+    PT_EXEC_FDPIC_LOADMAP, PT_INTERP_FDPIC_LOADMAP,/* 40, 41 */
+    PT_PREVIOUS_PC,				   /* 42 */
+  };
+
+#define UBICOM32_NUM_REGS (sizeof( ubicom32_regmap) / sizeof( ubicom32_regmap[0]))
+
+static int
+ubicom32_cannot_store_register (int regno)
+{
+  if (regno == 42) {
+    return 0;
+  }
+
+  if (regno >= 29) {
+    if (regno > 36) {
+      return 1;
+    }
+    if (regno == 29 || /* Source 3 */
+	regno == 32 || /* Dummy Unsed */
+	regno == 30 /* Inst Cnt */
+	) {
+      return 1;
+    }
+  }
+  return 0;
+}
+
+static int
+ubicom32_cannot_fetch_register (int regno)
+{
+  return (regno >= UBICOM32_NUM_REGS);
+}
+
+struct regset_info target_regsets[] = {
+  { 0, 0, -1, -1, NULL, NULL }
+};
+
+static const unsigned char ubicom32_breakpoint[] = { 0xFA, 0xBB, 0xCC, 0xDD };
+#define UBICOM32_BREAKPOINT_LEN 4
+
+static CORE_ADDR
+ubicom32_get_pc ()
+{
+  unsigned long pc;
+
+  collect_register_by_name ("pc", &pc);
+  return pc;
+}
+
+static void
+ubicom32_set_pc (CORE_ADDR value)
+{
+  unsigned long newpc = value;
+
+  supply_register_by_name ("pc", &newpc);
+}
+
+static int
+ubicom32_breakpoint_at (CORE_ADDR pc)
+{
+  unsigned char c[UBICOM32_BREAKPOINT_LEN];
+  read_inferior_memory (pc, c, UBICOM32_BREAKPOINT_LEN);
+  
+
+  if (memcmp(c, ubicom32_breakpoint, UBICOM32_BREAKPOINT_LEN) == 0) 
+    return 1;
+
+  return 0;
+}
+
+/* We only place breakpoints in empty marker functions, and thread locking
+   is outside of the function.  So rather than importing software single-step,
+   we can just run until exit. */
+
+static CORE_ADDR
+ubicom32_reinsert_addr ()
+{
+  static unsigned long last = 1; /* Could never be valid as it is odd */
+  unsigned long rp;
+  unsigned long pc;
+  collect_register_by_name ("a5", &rp);
+  collect_register_by_name ("pc", &pc);
+
+  /*
+   * Most other ISA's use the reverse pointer or link register here and
+   * because that doesn't change across a return this is ok.  But the
+   * ubicom32 compilers normally use calli over an actuall ret and this
+   * will normally change a5 so we need to temporarily save it away in 'last' on
+   * the first call.
+   */
+  if (last == pc) {
+    last = 1;
+    return pc;
+  }
+
+  last = rp;
+  return last;
+}
+
+struct linux_target_ops the_low_target = {
+  UBICOM32_NUM_REGS,
+  ubicom32_regmap,
+  ubicom32_cannot_fetch_register,
+  ubicom32_cannot_store_register,
+  ubicom32_get_pc,
+  ubicom32_set_pc,
+  ubicom32_breakpoint,
+  UBICOM32_BREAKPOINT_LEN,
+  ubicom32_reinsert_addr, /* breakpoint_reinsert_addr*/
+  0, /* decr_pc_after_break*/
+  ubicom32_breakpoint_at,
+  NULL, /* insert_watchpoint */
+  NULL, /* remove_watchpoint */
+  NULL, /* stopped_by_watchpoint */
+  NULL, /* stopped_data_address */
+  0, /* left_pad_xfer */
+  "ubicom32uclinux"
+};
--- /dev/null
+++ b/gdb/regformats/reg-ubicom32-uclinux.dat
@@ -0,0 +1,48 @@
+name:ubicom32uclinux
+expedite:pc,sp,a5
+32:d0
+32:d1
+32:d2
+32:d3
+32:d4
+32:d5
+32:d6
+32:d7
+32:d8
+32:d9
+32:d10
+32:d11
+32:d12
+32:d13
+32:d14
+32:d15
+
+32:a0
+32:a1
+32:a2
+32:a3
+32:a4
+32:a5
+32:a6
+32:sp
+
+32:acc0_hi
+32:acc0_lo
+32:mac_rc16
+32:acc1_hi
+32:acc1_lo
+32:source3
+32:inst_cnt
+32:csr
+32:dummy_unused
+32:int_mask0
+32:int_mask1
+32:trap_cause
+32:pc
+
+32:text_addr
+32:text_end_addr
+32:data_addr
+32:exec_fdpic
+32:interp_fdpic
+32:previous_pc
--- /dev/null
+++ b/gdb/regformats/reg-ubicom32nommu.dat
@@ -0,0 +1,41 @@
+name:ubicom32nommu
+expedite:pc,sp,a5
+32:d0
+32:d1
+32:d2
+32:d3
+32:d4
+32:d5
+32:d6
+32:d7
+32:d8
+32:d9
+32:d10
+32:d11
+32:d12
+32:d13
+32:d14
+32:d15
+
+32:a0
+32:a1
+32:a2
+32:a3
+32:a4
+32:a5
+32:a6
+32:sp
+
+32:acc0_hi
+32:acc0_lo
+32:mac_rc16
+32:acc1_hi
+32:acc1_lo
+32:source3
+32:inst_cnt
+32:csr
+32:dummy_unused
+32:int_mask0
+32:int_mask1
+32:trap_cause
+32:pc
--- /dev/null
+++ b/gdb/remote-ubicom32-dbginterface.c
@@ -0,0 +1,4684 @@
+/* Target-dependent code for GDB, the GNU debugger.
+
+   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
+   2009
+   Free Software Foundation, Inc.
+
+   This file is part of GDB.
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.
+*/
+#include <sys/types.h>
+#include <errno.h>
+#include <stdlib.h>
+#include <stdio.h>
+#if defined(_WIN32)
+#include <winsock.h>
+#define usleep(x) Sleep(x/1000)
+#else
+#include <netinet/in.h>
+#include <unistd.h>
+#endif
+#include <string.h>
+#include "remote-ubicom32-isd.h"
+#include "remote-ubicom32-dbginterface.h"
+#include "ubicom32_dongle.h"
+
+//#define DEBUG 1
+#if defined(_WIN32)
+unsigned int currentThread=0;
+unsigned int debuggerThreadNo=0;
+unsigned int dontDebugMask=0;	// Threads that we will not debug
+unsigned int debugging_processor;
+#else
+extern unsigned int debuggerThreadNo;
+extern unsigned int dontDebugMask;
+extern unsigned int currentThread;
+extern unsigned int debugging_processor;
+#endif
+
+int turnOnconsole(void);
+int turnOffconsole(void);
+
+int rdBufCnt = 0;
+
+#define RDBUF_MAX 20
+int rdBuffer[20];
+
+#if 0
+enum isd_command {
+  ISD_NOP,
+  ISD_OPEN,
+  ISD_CLOSE,
+  ISD_DEVICE_ID,
+  ISD_DEVICE_VER,
+  ISD_MAIL_STATUS,
+  ISD_DEBUG_RST_REQ,
+  ISD_WRITE_MAIL_BOX,
+  ISD_READ_MAIL_BOX,
+  ISD_CLEAN_MAIL,
+  ISD_TEST_MODE
+};
+#endif
+
+enum isd_command {
+  ISD_NOP,
+  ISD_OPEN,
+  ISD_CLOSE,
+  ISD_DEVICE_ID,
+  ISD_DEVICE_VER,
+  ISD_MAIL_STATUS,
+  ISD_DEBUG_RST_REQ,
+  ISD_WRITE_MAIL_BOX,
+  ISD_READ_MAIL_BOX,
+  ISD_CLEAN_MAIL,
+  ISD_TEST_MODE,
+  ISD_WR_MME,
+  ISD_WR_MEC,
+  ISD_WR_MEP,
+  ISD_WR_MRC,
+  ISD_WR_MOA,
+  ISD_RD_MB,
+  ISD_WR_MBRE = 0x10,
+  ISD_WR_MEM,
+  ISD_RD_MST,
+  ISD_HALT_MP,
+  ISD_REL_MP,
+  ISD_FORCE_MP,
+  ISD_RD_MP_REG,
+  ISD_SET_MP_REG_ADDR,
+  ISD_WR_MP_REG,
+  ISD_RD_IPORT_STAT,
+  ISD_WR_IBUF,
+  ISD_WR_RST_HALT_MP_EN,
+  ISD_RD_RST_HALT_MP,
+};
+
+unsigned int  rosr, pc, mt_active, mt_dbg_active, mt_en;
+unsigned int mt_sched, mt_pri;
+
+int ubicom32MainGdbIndexToRegAddrMap []={
+  0x0,0x4,0x8,0xc,		// Data registers 0 - 15
+  0x10,0x14,0x18,0x1c,
+  0x20,0x24,0x28,0x2c,
+  0x30,0x34,0x38,0x3c,
+  0x80,0x84,0x88,0x8c,		// Address registers 0 - 7
+  0x90,0x94,0x98,0x9c,
+  0xa0,0xa4,0xa8,0xac,		// mac_hi - source3
+  0xb0,0xb4,0xb8,0xbc,		// Inst_cnt - Iread_data
+  0xc0,0xc4,			// int_mask0 int_mask1
+  0xd0,				// Thread PC
+				// Global registers
+  0x100, 0x104, 0x108,		// 35 Chip_id - int_stat1
+  0x114, 0x118,			// int_set0 inst_set1
+  0x124, 0x128,			// int_clr0 inst_clr1
+  0x134,			// 42  Global Control
+  0x13c, 0x140,		// Mt_active_set, mt_active clr
+  0x138,			// 45  mt_active
+  0x148,			// mt_dbg_active_set
+  0x144,			// 47 mt_dbg_active
+  0x14c, 0x150, 0x154,		// 48 mt_en, mt_hpri, mt_hrt
+  0x15c,			// mt_break_clr
+  0x158,			// 52 mt_break
+  0x160, 0x164,			// 53 mt_single_step, mt_min_delay_en
+  0x17c,			// mt_dbg_active_clr
+  0x16c,			// 56 perr_addr
+  0x178,			// 57 dcapt_tnum
+  0x174,			// 58 dcapt_pc
+  0x170,			// 59 dcapt
+  0x180, 0x184, 0x188, 0x18c	// 60 scratchpad0 - scratchpad3
+};
+
+
+// Snaphot of the registers
+mercuryMainRegs_t mainRegisters;
+
+//extern int ubicom32ispisd_packet_send (struct ubicom32ispisd_packet *packet);
+int ubicom32isp_detach(void);
+
+char
+tohex( int x )
+{
+  return ( x > 9 ? x+'a'-10 : x+'0' );
+}
+
+unsigned int okToDoubleBuffer = 0;
+unsigned int dongleHasMarsSupport=0;
+unsigned int dongleIsUbipod = 0;
+unsigned int ubipodControl2wire = 0;
+unsigned int ubipodControlconsole = 0;
+unsigned int errorExpected = 0;
+unsigned int doubleBuffer=0;
+struct ubicom32command_packet *pending_packet= NULL;
+unsigned int pending_packet_length;
+unsigned int pending_packet_opcode;
+
+unsigned char dkmajor, dkminro, dkstate, dkincrement;
+unsigned int dkunique;
+unsigned int single_step_buffer_address;
+
+int
+compareVersion(unsigned char maj, unsigned char min, unsigned char st,
+	       unsigned char inc, unsigned int unk)
+{
+  if(maj != dkmajor)
+    return 1;
+
+  if(min != dkminro)
+    return 1;
+
+  if(st != dkstate)
+    return 1;
+
+  if(inc != dkincrement)
+    return 1;
+
+  if(unk != dkunique)
+    return 1;
+
+  return 0;
+}
+
+void
+retrieve_pending_packet(void)
+{
+  unsigned int count;
+  unsigned char *ptr;
+  struct ubicom32ispisd_packet *pending_packet_header = &pending_packet->header;
+
+  count = 0;
+  ptr = (char *) pending_packet;
+
+  if(dongle_read(ptr, pending_packet_length))
+    {
+      dongle_close ();
+      dongle_error ("error: Pending recv communication error!");
+    }
+
+  pending_packet_header->magic = ntohl (pending_packet_header->magic);
+  pending_packet_header->length = ntohl (pending_packet_header->length);
+  pending_packet_header->opcode = ntohl (pending_packet_header->opcode);
+  pending_packet_header->operand = ntohl (pending_packet_header->operand);
+
+  if ((pending_packet_header->magic != ISPISD_PACKET_MAGIC) || (pending_packet_header->length != pending_packet_length)
+      || (pending_packet_header->opcode != pending_packet_opcode))
+    {
+      dongle_close ();
+      dongle_error ("error: Pending invalid communication response!\n");
+    }
+}
+
+/* ubicom32ispisd_packet_send.  */
+int
+ubicom32ispisd_packet_send (struct ubicom32ispisd_packet *packet)
+{
+  unsigned int length, count, opcode, operand;
+  unsigned char *ptr;
+
+  if(dongle_interface_status() == 0)
+    {
+      printf("No connection to target. Request denied.\n");
+      return -1;
+    }
+
+  length = packet->length;
+  opcode = packet->opcode;
+  operand = packet->operand;
+
+  if ((packet->magic != ISPISD_PACKET_MAGIC)
+      || (length < sizeof (struct ubicom32ispisd_packet)))
+    {
+      printf ("error: invalid packet!\n");
+      return -1;
+    }
+
+  packet->magic = htonl (packet->magic);
+  packet->length = htonl (packet->length);
+  packet->opcode = htonl (packet->opcode);
+  packet->operand = htonl (packet->operand);
+
+  if (dongle_write((char *) packet, length) != 0)
+    {
+      dongle_close ();
+      dongle_error ("error: send communication error!");
+    }
+
+  if(doubleBuffer==0)
+    {
+      if(opcode == ISPISD_OPCODE_UBICOM32COMMAND_DONGLE_CHECK||
+	 opcode == ISPISD_OPCODE_UBICOM32COMMAND_DONGLE_CHECK_MARS||
+	 opcode == ISPISD_OPCODE_UBICOM32COMMAND_DONGLE_CHECK_UBIPOD||
+	 opcode == ISPISD_OPCODE_UBICOM32COMMAND_DONGLE_STOP_2WIRE||
+	 opcode == ISPISD_OPCODE_UBICOM32COMMAND_DONGLE_START_2WIRE||
+	 opcode == ISPISD_OPCODE_UBICOM32COMMAND_DONGLE_STOP_CONSOLE||
+	 opcode == ISPISD_OPCODE_UBICOM32COMMAND_DONGLE_START_CONSOLE||
+	 opcode == ISPISD_OPCODE_UBICOM32COMMAND_DONGLE_UNCLOG_MAILBOX||
+	 opcode == ISPISD_OPCODE_UBICOM32COMMAND_WRITE_MAILBOX)
+	{
+	  /* we are expecting back only 16 bytes */
+	  length = 16;
+	}
+      else if(opcode == ISPISD_OPCODE_UBICOM32COMMAND_READ_MAILBOX)
+	{
+	  /* expecting back header size + operand * 4 */
+	  length = 16 + operand * 4;
+	}
+
+      count = 0;
+      ptr = (char *) packet;
+
+      if(dongle_read(ptr, length))
+	{
+	  if(errorExpected)
+	    return -1;
+
+	  dongle_close ();
+	  dongle_error ("error: recv communication error!");
+	}
+
+      packet->magic = ntohl (packet->magic);
+      packet->length = ntohl (packet->length);
+      packet->opcode = ntohl (packet->opcode);
+      packet->operand = ntohl (packet->operand);
+
+      if ((packet->magic != ISPISD_PACKET_MAGIC) || (packet->length != length)
+	  || (packet->opcode != opcode))
+	{
+	  dongle_close ();
+	  dongle_error ("error: invalid communication response!\n");
+	}
+    }
+  else
+    {
+      if(pending_packet == NULL)
+	return 0;
+
+      retrieve_pending_packet();
+    }
+  return 0;
+}
+
+/* ubicom32command_packet_init.  */
+void
+ubicom32command_packet_init (struct ubicom32command_packet *packet)
+{
+  packet->header.magic = ISPISD_PACKET_MAGIC;
+  packet->header.length = 0;
+  packet->header.opcode = ISPISD_OPCODE_UBICOM32COMMAND;
+  packet->header.operand = 0;
+}
+
+/* ubicom32command_packet_init.  */
+void
+ubicom32command_packet_init_opcode (struct ubicom32command_packet *packet, unsigned int opcode)
+{
+  packet->header.magic = ISPISD_PACKET_MAGIC;
+  packet->header.length = 0;
+  packet->header.opcode = opcode;
+  packet->header.operand = 0;
+}
+
+/* ubicom32command_packet_send.  */
+int
+ubicom32command_packet_send (struct ubicom32command_packet *packet)
+{
+  unsigned int count;
+  int ret;
+
+  count = packet->header.operand;
+  if (count > UBICOM32COMMAND_MAX_COMMANDS_PER_PACKET &&
+      packet->header.opcode == ISPISD_OPCODE_UBICOM32COMMAND)
+    {
+      printf ("error: invalid packet!\n");
+      return -1;
+    }
+  if(packet->header.opcode == ISPISD_OPCODE_UBICOM32COMMAND||
+     packet->header.opcode == ISPISD_OPCODE_UBICOM32COMMAND_DONGLE_CHECK||
+     packet->header.opcode == ISPISD_OPCODE_UBICOM32COMMAND_DONGLE_CHECK_UBIPOD||
+     packet->header.opcode == ISPISD_OPCODE_UBICOM32COMMAND_DONGLE_STOP_2WIRE||
+     packet->header.opcode == ISPISD_OPCODE_UBICOM32COMMAND_DONGLE_START_2WIRE||
+     packet->header.opcode == ISPISD_OPCODE_UBICOM32COMMAND_DONGLE_STOP_CONSOLE||
+     packet->header.opcode == ISPISD_OPCODE_UBICOM32COMMAND_DONGLE_START_CONSOLE||
+     packet->header.opcode == ISPISD_OPCODE_UBICOM32COMMAND_DONGLE_UNCLOG_MAILBOX||
+    packet->header.opcode == ISPISD_OPCODE_UBICOM32COMMAND_DONGLE_CHECK_MARS)
+    {
+      packet->header.length =
+	sizeof (struct ubicom32ispisd_packet) +
+	sizeof (struct ubicom32command) * packet->header.operand;
+    }
+
+  ret = ubicom32ispisd_packet_send ((struct ubicom32ispisd_packet *) packet);
+  if (ret < 0)
+    return -1;
+
+  if(doubleBuffer == 0)
+    {
+      if(packet->header.opcode == ISPISD_OPCODE_UBICOM32COMMAND)
+	{
+	  if (packet->header.operand != count)
+	    {
+#ifdef DEBUG
+	      printf ("execute failure: %ld/%ld\n", packet->header.operand,
+		      count);
+#endif
+	      return -1;
+	    }
+	}
+    }
+  return ret;
+}
+
+/* ubicom32command_packet_append.  */
+int
+ubicom32command_packet_append (struct ubicom32command_packet *packet,
+			   unsigned char options, unsigned char opcode,
+			   unsigned int operand)
+{
+  struct ubicom32command *command;
+  int count;
+
+  count = (int) packet->header.operand++;
+  command = &packet->commands[count];
+
+  command->options = options;
+  command->opcode = opcode;
+  command->operand0 = (unsigned char)((operand >> 24) &0xff);
+  command->operand1 = (unsigned char)((operand >> 16) &0xff);
+  command->operand2 = (unsigned char)((operand >> 8) &0xff);
+  command->operand3 = (unsigned char)(operand & 0xff);
+
+  return count;
+}
+
+/* ubicom32command_packet_get_next.  */
+int
+ubicom32command_packet_get_next (struct ubicom32command_packet *packet)
+{
+  return (int) packet->header.operand;
+}
+
+/* ubicom32command_packet_get_free.  */
+int
+ubicom32command_packet_get_free (struct ubicom32command_packet *packet)
+{
+  return UBICOM32COMMAND_MAX_COMMANDS_PER_PACKET - (int) packet->header.operand;
+}
+
+
+int deviceId;
+int deviceVersion;
+int chipID;
+int
+getSingleStepBufferAddress(void)
+{
+  int ret, count;
+  struct ubicom32command_packet packet;
+  struct ubicom32command *command;
+  unsigned int reply;
+
+  ubicom32command_packet_init(&packet);
+
+  // Issue the command to get debugger thread #
+  count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, (unsigned int)GET_SGL_STP_BUF);
+
+  // the command is echoed back. Go get it
+  count = ubicom32command_packet_append(&packet, READ_CHECK, ISD_READ_MAIL_BOX, 0);
+
+  // get the buffer address
+  count = ubicom32command_packet_append(&packet, READ_CHECK, ISD_READ_MAIL_BOX, 0);
+
+  /* Ship the packet down for execution */
+  ret = ubicom32command_packet_send(&packet);
+  if(ret)
+    return ret;
+
+  command = &packet.commands[1];
+
+  reply = (command->operand0<<24) | (command->operand1<<16) |
+    (command->operand2<<8) | command->operand3;
+
+  if(reply != GET_SGL_STP_BUF_DONE)
+    exit(1);
+
+  command++;
+
+  single_step_buffer_address = (command->operand0<<24) | (command->operand1<<16) |
+    (command->operand2<<8) | command->operand3;
+
+  return 0;
+}
+
+
+int
+debugOpen(void)
+{
+  int ret, count;
+  struct ubicom32command *command;
+  struct ubicom32command_packet packet;
+
+  ubicom32command_packet_init(&packet);
+
+  // Send down ISD_OPEN
+  count = ubicom32command_packet_append(&packet, 0, ISD_OPEN, 0);
+
+  // Send down ISD_DEVICE_ID
+  count = ubicom32command_packet_append(&packet, 0, ISD_DEVICE_ID, 0);
+
+  // Send down ISD_DEVICE_VER
+  count = ubicom32command_packet_append(&packet, 0, ISD_DEVICE_VER, 0);
+
+  // Send down ISD_RD_MP_REG chip id register
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, 0x100);
+
+  ret = ubicom32command_packet_send(&packet);
+  if(ret)
+    return ret;
+
+  command = &packet.commands[1];
+
+  // extract deviceId
+  deviceId = (command->operand0<<24) | (command->operand1<<16) | (command->operand2<<8) | command->operand3;
+
+  // extract deviceVersion
+  command++;
+  deviceVersion = (command->operand0<<24) | (command->operand1<<16) | (command->operand2<<8) | command->operand3;
+
+  // extract chipID
+  command++;
+  chipID = (command->operand0<<24) | (command->operand1<<16) | (command->operand2<<8) | command->operand3;
+
+  //printf("devID =0x%x version =0x%x chipID =0x%x\n", deviceId, deviceVersion, chipID);
+  if(deviceId == 0 && deviceVersion == 0 && (chipID >= 0x20000))
+    debugging_processor = 5133;
+  else
+    debugging_processor = 3023;
+
+  return 0;
+}
+
+int
+debugReset(void)
+{
+  int ret, count;
+
+  struct ubicom32command_packet packet;
+  ubicom32command_packet_init(&packet);
+
+  // Send down ISD_DEBUG_RST_REQ
+  count = ubicom32command_packet_append(&packet, OPTION_IGNORE_RESPONSE|OPTION_EXTENDED_TIMEOUT, ISD_DEBUG_RST_REQ, 0);
+
+  ret = ubicom32command_packet_send(&packet);
+
+  return ret;
+}
+
+int
+debugClose(void)
+{
+  int ret, count;
+
+  struct ubicom32command_packet packet;
+  ubicom32command_packet_init(&packet);
+
+  // Send down ISD_OPEN
+  count = ubicom32command_packet_append(&packet, 0, ISD_CLOSE, 0);
+
+  ret = ubicom32command_packet_send(&packet);
+
+  return ret;
+}
+
+int
+readStatus(int *status)
+{
+  int ret, count;
+
+  unsigned int stat;
+  struct ubicom32command *command;
+  struct ubicom32command_packet packet;
+  ubicom32command_packet_init(&packet);
+
+  // Send down ISD_MAIL_STATUS
+  count = ubicom32command_packet_append(&packet, 0, ISD_MAIL_STATUS, 0);
+
+  ret = ubicom32command_packet_send(&packet);
+  if(ret)
+    return ret;
+
+  command = &packet.commands[0];
+
+  // extract status
+  stat = (command->operand0<<24) | (command->operand1<<16) | (command->operand2<<8) | command->operand3;
+  *status = (int)stat;
+  return ret;
+}
+
+int
+readMailbox(int *mboxData)
+{
+  int ret, count;
+
+  unsigned int stat;
+  struct ubicom32command *command;
+  struct ubicom32command_packet packet;
+  ubicom32command_packet_init(&packet);
+
+  // Send down ISD_READ_MAIL_BOX
+  count = ubicom32command_packet_append(&packet, READ_CHECK, ISD_READ_MAIL_BOX, 0);
+
+  ret = ubicom32command_packet_send(&packet);
+  if(ret)
+    return ret;
+
+  command = &packet.commands[0];
+
+  // extract status
+  stat = (command->operand0<<24) | (command->operand1<<16) | (command->operand2<<8) | command->operand3;
+  *mboxData = (int)stat;
+  return ret;
+}
+
+int
+readRegisters( int threadNo,
+	       int regIndex,
+	       int *dest,
+	       unsigned int length)
+{
+  int ret, count;
+  int commandEchoIndex;
+
+  struct ubicom32command_packet packet;
+  ubicom32command_packet_init(&packet);
+
+  // send down the READ_REGISTERS command
+  count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, READ_REGISTERS);
+
+  // send down the thread #
+  count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, (unsigned int)threadNo);
+
+  // send down the start address of the first register to read back
+  count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX,
+				    ubicom32MainGdbIndexToRegAddrMap[regIndex]);
+
+  // Send a length of transfer
+  count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, (unsigned int)length);
+
+  // The entry at this index is going to contain READ_REGISTERS_DONE
+  count = ubicom32command_packet_append(&packet, READ_CHECK, ISD_READ_MAIL_BOX, 0);
+  commandEchoIndex = count;
+
+  while(length)
+    {
+      unsigned int transferLength = ubicom32command_packet_get_free(&packet);
+      unsigned int i;
+      int transferStartIndex;
+      struct ubicom32command *command;
+      unsigned int reply;
+
+      if(transferLength > length)
+	transferLength = length;
+
+      // Index of the first transfer entry
+      transferStartIndex = ubicom32command_packet_get_next(&packet);
+      command = &packet.commands[transferStartIndex];
+
+      for(i=0; i< transferLength; i++)
+	count = ubicom32command_packet_append(&packet, READ_CHECK, ISD_READ_MAIL_BOX, 0);
+
+      // Ship the packet for processing
+      ret = ubicom32command_packet_send(&packet);
+      if(ret)
+	return ret;
+
+      // Process the return data
+      if(commandEchoIndex)
+	{
+	  // Test the reply for READ_REGISTERS_DONE
+	  command = &packet.commands[commandEchoIndex];
+	  reply = (command->operand0<<24) | (command->operand1<<16) |
+	    (command->operand2<<8) | command->operand3;
+
+	  if(reply != READ_REGISTERS_DONE)
+	    {
+	      printf("Reply 0x%x does not match READ_REGISTERS_DONE\n", reply);
+	      return -1;
+	    }
+	  else
+	    commandEchoIndex = 0;
+	}
+
+      // Move the reply data into destination buffer
+      command = &packet.commands[transferStartIndex];
+      for(i=0; i< transferLength; i++, command++)
+	{
+	  reply = (command->operand0<<24) | (command->operand1<<16) |
+	    (command->operand2<<8) | command->operand3;
+
+	  *dest++ = (int)reply;
+	}
+
+      // readjust length etc.
+      ubicom32command_packet_init(&packet);
+      length = length - transferLength;
+    }
+
+  return 0;
+}
+
+
+int
+writeRegisters( int threadNo,
+		int regIndex,
+		int *inBuf,
+		unsigned int length)
+{
+  int ret, count;
+  unsigned int i;
+  int commandEchoIndex;
+  struct ubicom32command_packet packet;
+  struct ubicom32command *command;
+  unsigned int reply;
+
+  ubicom32command_packet_init(&packet);
+  if(regIndex <= 34)
+    {
+      // invalidate the Per Thread entry
+      mainRegisters.perThreadRead[threadNo]=0;
+    }
+  else
+    {
+      // invalidate the global entry
+      mainRegisters.globalsRead=0;
+    }
+
+  /* send down the WRITE_REGISTERS command */
+  count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, WRITE_REGISTERS);
+
+  /* send down the thread # */
+  count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, (unsigned int)threadNo);
+
+  /* send down the start address of the first register to read back */
+  count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX,
+				    ubicom32MainGdbIndexToRegAddrMap[regIndex]);
+  /* Send a length of transfer */
+  count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, (unsigned int)length);
+
+  while(length)
+    {
+      unsigned int transferLength = ubicom32command_packet_get_free(&packet);
+
+      if(transferLength > length)
+	transferLength = length;
+
+      length = length - transferLength;
+
+      for(i=0; i< transferLength; i++)
+	{
+	  count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX,
+					    (unsigned int)(*inBuf++));
+	}
+
+      if(length || (ubicom32command_packet_get_free(&packet) == 0))
+	{
+	  // Ship the packet for processing
+	  ret = ubicom32command_packet_send(&packet);
+	  if(ret)
+	    return ret;
+	}
+      else
+	break;
+
+      ubicom32command_packet_init(&packet);
+    }
+
+
+  // We are expecting and echo of WRITE_REGISTERS_DONE
+  count = ubicom32command_packet_append(&packet, READ_CHECK, ISD_READ_MAIL_BOX, 0);
+  commandEchoIndex = count;
+
+  // Ship the packet for processing
+  ret = ubicom32command_packet_send(&packet);
+  if(ret)
+    return ret;
+
+  // Test the reply
+  command = &packet.commands[commandEchoIndex];
+
+  reply = (command->operand0<<24) | (command->operand1<<16) |
+    (command->operand2<<8) | command->operand3;
+
+  if(reply != WRITE_REGISTERS_DONE)
+    {
+      printf("Reply 0x%x does not match WRITE_REGISTERS_DONE\n", reply);
+      return -1;
+    }
+
+  return 0;
+}
+
+int
+gdbMainGetallRegs(unsigned int threadNo, mercuryMainRegs_t *mainRegs)
+{
+  int ret, temp;
+  int *dptr = &mainRegs->tRegs[threadNo].dr[0];
+
+  if(threadNo == debuggerThreadNo)
+    {
+      // Register requests from debugger thread. Do not honor it
+      return 0;
+    }
+
+  if(mainRegs->perThreadRead[threadNo] ==0)
+    {
+      /* get all per thread debugger registers for the given thread */
+      mainRegs->perThreadRead[threadNo]=1;
+
+#ifndef DEBUG_RTL
+      /* read the data register block for the given thread */
+      ret = readRegisters(threadNo, 0, dptr, 16);
+      if(ret)
+	return (ret);
+
+      /* read the address register block */
+      dptr = &mainRegs->tRegs[threadNo].ar[0];
+      ret = readRegisters(threadNo, 16, dptr, 18);
+      if(ret)
+	return(ret);
+
+      /* read the thread pc */
+      dptr = &mainRegs->tRegs[threadNo].threadPc;
+      ret = readRegisters(threadNo, 34, dptr, 1);
+      if(ret)
+	return ret;
+#endif
+    }
+
+  // patch rosr
+  temp = mainRegs->tRegs[threadNo].rosr;
+  temp &= ~0xc;
+  temp |= (threadNo<<2);
+  mainRegs->tRegs[threadNo].rosr = temp;
+
+
+  if(mainRegs->globalsRead == 0)
+    {
+      mainRegs->globalsRead = 1;
+
+#ifndef DEBUG_RTL
+      /* Start on the globals. Begin athe chip_id */
+      dptr = &mainRegs->globals.chip_id;
+      ret = readRegisters(1, 35, dptr, 3);
+      if(ret)
+	return ret;
+
+      /* read global control */
+      dptr = &mainRegs->globals.global_ctrl;
+      ret = readRegisters(1, 42, dptr, 1);
+      if(ret)
+	return ret;
+
+      /* read mt_active */
+      dptr = &mainRegs->globals.mt_active;
+      ret = readRegisters(1, 45, dptr, 1);
+      if(ret)
+	return ret;
+
+      /* read mt_dbg_active */
+      dptr = &mainRegs->globals.mt_dbg_active;
+      ret = readRegisters(1, 47, dptr, 1);
+      if(ret)
+	return ret;
+
+      /* read mt_en etc */
+      dptr = &mainRegs->globals.mt_en;
+      ret = readRegisters(1, 48, dptr, 3);
+      if(ret)
+	return ret;
+
+#if 0
+      // Nuke thread 0 out of the picture
+      temp = *dptr;
+      temp &= ~1;
+      *dptr = temp;
+#endif
+
+      dptr = &mainRegs->globals.mt_break;
+      ret = readRegisters(1, 52, dptr, 1);
+      if(ret)
+	return ret;
+
+      dptr = &mainRegs->globals.mt_single_step;
+      ret = readRegisters(1, 53, dptr, 2);
+      if(ret)
+	return ret;
+
+      dptr = &mainRegs->globals.perr_addr;
+      ret = readRegisters(1, 56, dptr, 1);
+      if(ret)
+	return ret;
+
+      dptr = &mainRegs->globals.dcapt_tnum;
+      ret = readRegisters(1, 57, dptr, 1);
+      if(ret)
+	return ret;
+
+      dptr = &mainRegs->globals.dcapt_pc;
+      ret = readRegisters(1, 58, dptr, 1);
+      if(ret)
+	return ret;
+
+      dptr = &mainRegs->globals.dcapt;
+      ret = readRegisters(1, 59, dptr, 1);
+      if(ret)
+	return ret;
+
+      dptr = &mainRegs->globals.scratchpad0;
+      ret = readRegisters(1, 60, dptr, 4);
+      if(ret)
+	return ret;
+#endif
+    }
+
+  return 0;
+}
+
+int
+gdbMainGetTPacketRegs(int threadNo, mercuryMainRegs_t *mainRegs)
+{
+  extern unsigned int  mt_active, mt_dbg_active, mt_en, mt_sched, mt_pri;
+  int ret, temp;
+  /* get d0 register for the given thread */
+
+  /* read the data register block for the given thread */
+  int *dptr = &mainRegs->tRegs[threadNo].dr[0];
+
+  ret = readRegisters(threadNo, 0, dptr, 1);
+  if(ret)
+    return (ret);
+
+  /* read the address a5-a7 register block */
+  dptr = &mainRegs->tRegs[threadNo].ar[5];
+  ret = readRegisters(threadNo, 21, dptr, 3);
+  if(ret)
+    return(ret);
+
+  /* read the thread rosr */
+  dptr = &mainRegs->tRegs[threadNo].rosr;
+  ret = readRegisters(threadNo, 30, dptr, 1);
+  if(ret)
+    return ret;
+
+  temp = *dptr;
+  temp &= ~0xc;
+  temp |= (threadNo<<2);
+  *dptr = temp;
+
+  /* read the thread pc */
+  dptr = &mainRegs->tRegs[threadNo].threadPc;
+  ret = readRegisters(threadNo, 34, dptr, 1);
+  if(ret)
+    return ret;
+
+  /* read mt_active */
+  dptr = &mainRegs->globals.mt_active;
+  ret = readRegisters(threadNo, 45, dptr, 1);
+  if(ret)
+    return ret;
+
+  /* read mt_dbg_active */
+  dptr = &mainRegs->globals.mt_dbg_active;
+  ret = readRegisters(threadNo, 47, dptr, 1);
+  if(ret)
+    return ret;
+
+  /* read mt_en etc */
+  dptr = &mainRegs->globals.mt_en;
+  ret = readRegisters(threadNo, 48, dptr, 3);
+  if(ret)
+    return ret;
+
+  // Update some of our internal copies
+
+  mt_active = (int) mainRegisters.globals.mt_active;
+  mt_dbg_active = (int) mainRegisters.globals.mt_dbg_active;
+  mt_en = (int) mainRegisters.globals.mt_en;
+  mt_pri = (int) mainRegisters.globals.mt_hpri;
+  mt_sched = (int) mainRegisters.globals.mt_hrt;
+
+#if 0
+  // Nuke thread 0 out of the picture
+  temp = *dptr;
+  temp &= ~1;
+  *dptr = temp;
+#endif
+  return 0;
+}
+
+int
+readDataMemory(unsigned int destAddr, unsigned int length, int *data)
+{
+  if(okToDoubleBuffer && length > 4 && ((dkmajor > 1) || (dkincrement >=4)))
+    {
+      int ret, count, commandEchoIndex;
+      int pending_transferStartIndex = 0;
+      int pending_transferLength = 0;
+      int i;
+      unsigned int reply;
+
+      struct ubicom32command_packet packets[2];
+      struct ubicom32command_packet *packet;
+      struct ubicom32command *command= NULL;
+      unsigned char *cptr;
+
+      packet = packets;
+      ubicom32command_packet_init(packet);
+
+      doubleBuffer = 1;
+      pending_packet = NULL;
+
+      /* send down the READ_DATA_MEMORY command */
+      count = ubicom32command_packet_append(packet, WRITE_CHECK|OPTION_IGNORE_RESPONSE, ISD_WRITE_MAIL_BOX, READ_DATA_MEMORY);
+
+      /* send down the start address of where to read from */
+      count = ubicom32command_packet_append(packet, WRITE_CHECK|OPTION_IGNORE_RESPONSE, ISD_WRITE_MAIL_BOX, destAddr);
+
+      /* Send a length of transfer */
+      count = ubicom32command_packet_append(packet, WRITE_CHECK|OPTION_IGNORE_RESPONSE, ISD_WRITE_MAIL_BOX, (unsigned int)(length*4));
+
+      count = ubicom32command_packet_append(packet, READ_CHECK, ISD_READ_MAIL_BOX, 0);
+      commandEchoIndex = count;	// The entry at this index is going to contain READ_DATA_MEMORY_DONE
+
+      /* ship the first part of the command down */
+      ret = ubicom32command_packet_send(packet);
+      if(ret)
+	{
+	  doubleBuffer = 0;
+	  pending_packet = NULL;
+	  return ret;
+	}
+
+      // Setup the pending packet
+      pending_packet = packet;
+      pending_packet_length = ntohl (pending_packet->header.length);
+      pending_packet_opcode = ntohl (pending_packet->header.opcode);
+
+      if(packet == packets)
+	packet = &packets[1];
+      else
+	packet = packets;
+
+      while(length)
+	{
+	  unsigned int transferLength = 256;
+
+	  // initialize packet for reading mailbox
+	  ubicom32command_packet_init_opcode(packet, ISPISD_OPCODE_UBICOM32COMMAND_READ_MAILBOX);
+
+	  if(transferLength > length)
+	    transferLength = length;
+
+	  // load length into operand field
+	  packet->header.operand = transferLength;
+	  packet->header.length = 16;
+
+	  // Ship the packet for processing
+	  ret = ubicom32command_packet_send(packet);
+	  if(ret)
+	    {
+	      doubleBuffer = 0;
+	      pending_packet = NULL;
+	      return ret;
+	    }
+
+	  if(pending_packet)
+	    {
+	      // Process the return data
+	      if(commandEchoIndex)
+		{
+		  // Test the reply for READ_DATA_MEMORY_DONE
+		  command = &pending_packet->commands[commandEchoIndex];
+		  reply = (command->operand0<<24) | (command->operand1<<16) |
+		    (command->operand2<<8) | command->operand3;
+
+		  if(reply != READ_DATA_MEMORY_DONE)
+		    {
+		      printf("Reply 0x%x does not match READ_DATA_MEMORY_DONE\n", reply);
+		      doubleBuffer = 0;
+		      pending_packet = NULL;
+		      return -1;
+		    }
+		  else
+		    commandEchoIndex = 0;
+		}
+
+	      // Move the reply data into destination buffer
+	      cptr = (unsigned char *)&pending_packet->commands[pending_transferStartIndex];
+	      for(i=0; i< pending_transferLength; i++, cptr +=4)
+		{
+		  reply = (cptr[0]<<24) | (cptr[1]<<16) |
+		    (cptr[2]<<8) | cptr[3];
+
+		  *data++ = (int)reply;
+		}
+	    }
+
+	  // Setup the pending packet
+	  pending_packet = packet;
+	  pending_packet_length = (ntohl (pending_packet->header.length) + 4*transferLength);
+	  pending_packet_opcode = ntohl (pending_packet->header.opcode);
+	  pending_transferLength = transferLength;
+
+	  if(packet == packets)
+	    packet = &packets[1];
+	  else
+	    packet = packets;
+
+	  // readjust length etc.
+	  // ubicom32command_packet_init_opcode(packet, ISPISD_OPCODE_UBICOM32COMMAND_READ_MAILBOX);
+	  length = length - transferLength;
+	}
+
+      if(pending_packet)
+	{
+	  retrieve_pending_packet();
+
+	  // Process the return data
+	  if(commandEchoIndex)
+	    {
+	      // Test the reply for READ_DATA_MEMORY_DONE
+	      command = &pending_packet->commands[commandEchoIndex];
+	      reply = (command->operand0<<24) | (command->operand1<<16) |
+		(command->operand2<<8) | command->operand3;
+
+	      if(reply != READ_DATA_MEMORY_DONE)
+		{
+		  printf("Reply 0x%x does not match READ_DATA_MEMORY_DONE\n", reply);
+		  doubleBuffer = 0;
+		  pending_packet = NULL;
+		  return -1;
+		}
+	      else
+		commandEchoIndex = 0;
+	    }
+
+	  // Move the reply data into destination buffer
+	  cptr = (unsigned char *)&pending_packet->commands[pending_transferStartIndex];
+	  for(i=0; i< pending_transferLength; i++, cptr +=4)
+	    {
+	      reply = (cptr[0]<<24) | (cptr[1]<<16) |
+		(cptr[2]<<8) | cptr[3];
+
+	      *data++ = (int)reply;
+	    }
+	}
+
+      pending_packet = NULL;
+      doubleBuffer = 0;
+      return 0;
+    }
+  else
+    {
+      int ret, count;
+      int commandEchoIndex;
+      unsigned int reply;
+
+      struct ubicom32command_packet packet;
+      ubicom32command_packet_init(&packet);
+
+      /* send down the READ_DATA_MEMORY command */
+      count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, READ_DATA_MEMORY);
+
+      /* send down the start address of where to read from */
+      count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, destAddr);
+
+      /* Send a length of transfer */
+      count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, (unsigned int)(length*4));
+
+      // The entry at this index is going to contain READ_DATA_MEMORY_DONE
+      count = ubicom32command_packet_append(&packet, READ_CHECK, ISD_READ_MAIL_BOX, 0);
+
+      commandEchoIndex = count;
+
+      while(length)
+	{
+	  unsigned int transferLength = ubicom32command_packet_get_free(&packet);
+	  unsigned int i;
+	  int transferStartIndex;
+	  struct ubicom32command *command;
+
+	  if(transferLength > length)
+	    transferLength = length;
+
+	  // Index of the first transfer entry
+	  transferStartIndex = ubicom32command_packet_get_next(&packet);
+	  command = &packet.commands[transferStartIndex];
+
+	  for(i=0; i< transferLength; i++)
+	    count = ubicom32command_packet_append(&packet, READ_CHECK, ISD_READ_MAIL_BOX, 0);
+
+	  // Ship the packet for processing
+	  ret = ubicom32command_packet_send(&packet);
+	  if(ret)
+	    return ret;
+
+	  // Process the return data
+	  if(commandEchoIndex)
+	    {
+	      // Test the reply for READ_REGISTERS_DONE
+	      command = &packet.commands[commandEchoIndex];
+	      reply = (command->operand0<<24) | (command->operand1<<16) |
+		(command->operand2<<8) | command->operand3;
+
+	      if(reply != READ_DATA_MEMORY_DONE)
+		{
+		  printf("Reply 0x%x does not match READ_DATA_MEMORY_DONE\n", reply);
+		  return -1;
+		}
+	      else
+		commandEchoIndex = 0;
+	    }
+
+	  // Move the reply data into destination buffer
+	  command = &packet.commands[transferStartIndex];
+	  for(i=0; i< transferLength; i++, command++)
+	    {
+	      reply = (command->operand0<<24) | (command->operand1<<16) |
+		(command->operand2<<8) | command->operand3;
+
+	      *data++ = (int)reply;
+	    }
+
+	  // readjust length etc.
+	  ubicom32command_packet_init(&packet);
+	  length = length - transferLength;
+	}
+
+      return 0;
+    }
+}
+
+int
+readDataMemoryRaw(unsigned int destAddr, unsigned int length, int *data)
+{
+  if(okToDoubleBuffer && length > 4 && ((dkmajor > 1) || (dkincrement >=4)))
+    {
+      int ret, count, commandEchoIndex;
+      int pending_transferStartIndex = 0;
+      int pending_transferLength = 0;
+      unsigned int reply;
+
+      struct ubicom32command_packet packets[2];
+      struct ubicom32command_packet *packet;
+      struct ubicom32command *command= NULL;
+      unsigned char *cptr;
+
+      packet = packets;
+      ubicom32command_packet_init(packet);
+
+      doubleBuffer = 1;
+      pending_packet = NULL;
+
+      /* send down the READ_DATA_MEMORY command */
+      count = ubicom32command_packet_append(packet, WRITE_CHECK|OPTION_IGNORE_RESPONSE, ISD_WRITE_MAIL_BOX, READ_DATA_MEMORY);
+
+      /* send down the start address of where to read from */
+      count = ubicom32command_packet_append(packet, WRITE_CHECK|OPTION_IGNORE_RESPONSE, ISD_WRITE_MAIL_BOX, destAddr);
+
+      /* Send a length of transfer */
+      count = ubicom32command_packet_append(packet, WRITE_CHECK|OPTION_IGNORE_RESPONSE, ISD_WRITE_MAIL_BOX, (unsigned int)(length*4));
+
+      count = ubicom32command_packet_append(packet, READ_CHECK, ISD_READ_MAIL_BOX, 0);
+      commandEchoIndex = count;	// The entry at this index is going to contain READ_DATA_MEMORY_DONE
+
+      /* ship the first part of the command down */
+      ret = ubicom32command_packet_send(packet);
+      if(ret)
+	{
+	  doubleBuffer = 0;
+	  pending_packet = NULL;
+	  return ret;
+	}
+
+      // Setup the pending packet
+      pending_packet = packet;
+      pending_packet_length = ntohl (pending_packet->header.length);
+      pending_packet_opcode = ntohl (pending_packet->header.opcode);
+
+      if(packet == packets)
+	packet = &packets[1];
+      else
+	packet = packets;
+
+      while(length)
+	{
+	  unsigned int transferLength = 256;
+
+	  // initialize packet for reading mailbox
+	  ubicom32command_packet_init_opcode(packet, ISPISD_OPCODE_UBICOM32COMMAND_READ_MAILBOX);
+
+	  if(transferLength > length)
+	    transferLength = length;
+
+	  // load length into operand field
+	  packet->header.operand = transferLength;
+	  packet->header.length = 16;
+
+	  // Ship the packet for processing
+	  ret = ubicom32command_packet_send(packet);
+	  if(ret)
+	    {
+	      doubleBuffer = 0;
+	      pending_packet = NULL;
+	      return ret;
+	    }
+
+	  if(pending_packet)
+	    {
+	      // Process the return data
+	      if(commandEchoIndex)
+		{
+		  // Test the reply for READ_DATA_MEMORY_DONE
+		  command = &pending_packet->commands[commandEchoIndex];
+		  reply = (command->operand0<<24) | (command->operand1<<16) |
+		    (command->operand2<<8) | command->operand3;
+
+		  if(reply != READ_DATA_MEMORY_DONE)
+		    {
+		      printf("Reply 0x%x does not match READ_DATA_MEMORY_DONE\n", reply);
+		      doubleBuffer = 0;
+		      pending_packet = NULL;
+		      return -1;
+		    }
+		  else
+		    commandEchoIndex = 0;
+		}
+
+	      // Move the reply data into destination buffer
+	      cptr = (unsigned char *)&pending_packet->commands[pending_transferStartIndex];
+
+#if 0
+	      for(i=0; i< pending_transferLength; i++, cptr +=4)
+		{
+		  reply = (cptr[0]<<24) | (cptr[1]<<16) |
+		    (cptr[2]<<8) | cptr[3];
+
+		  *data++ = (int)reply;
+		}
+#endif
+	      memcpy(data, cptr, pending_transferLength*4);
+	      data += pending_transferLength;
+	    }
+
+	  // Setup the pending packet
+	  pending_packet = packet;
+	  pending_packet_length = (ntohl (pending_packet->header.length) + 4*transferLength);
+	  pending_packet_opcode = ntohl (pending_packet->header.opcode);
+	  pending_transferLength = transferLength;
+
+	  if(packet == packets)
+	    packet = &packets[1];
+	  else
+	    packet = packets;
+
+	  // readjust length etc.
+	  // ubicom32command_packet_init_opcode(packet, ISPISD_OPCODE_UBICOM32COMMAND_READ_MAILBOX);
+	  length = length - transferLength;
+	}
+
+      if(pending_packet)
+	{
+	  retrieve_pending_packet();
+
+	  // Process the return data
+	  if(commandEchoIndex)
+	    {
+	      // Test the reply for READ_DATA_MEMORY_DONE
+	      command = &pending_packet->commands[commandEchoIndex];
+	      reply = (command->operand0<<24) | (command->operand1<<16) |
+		(command->operand2<<8) | command->operand3;
+
+	      if(reply != READ_DATA_MEMORY_DONE)
+		{
+		  printf("Reply 0x%x does not match READ_DATA_MEMORY_DONE\n", reply);
+		  doubleBuffer = 0;
+		  pending_packet = NULL;
+		  return -1;
+		}
+	      else
+		commandEchoIndex = 0;
+	    }
+
+	  // Move the reply data into destination buffer
+	  cptr = (unsigned char *)&pending_packet->commands[pending_transferStartIndex];
+
+#if 0
+	  for(i=0; i< pending_transferLength; i++, cptr +=4)
+	    {
+	      reply = (cptr[0]<<24) | (cptr[1]<<16) |
+		(cptr[2]<<8) | cptr[3];
+
+	      *data++ = (int)reply;
+	    }
+#endif
+
+	  if(pending_transferLength)
+	    {
+	      memcpy(data, cptr, pending_transferLength*4);
+	      data += pending_transferLength;
+	    }
+	}
+
+      pending_packet = NULL;
+      doubleBuffer = 0;
+      return 0;
+    }
+  else
+    {
+      int ret, count;
+      int commandEchoIndex;
+      unsigned int reply;
+
+      struct ubicom32command_packet packet;
+      ubicom32command_packet_init(&packet);
+
+      /* send down the READ_DATA_MEMORY command */
+      count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, READ_DATA_MEMORY);
+
+      /* send down the start address of where to read from */
+      count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, destAddr);
+
+      /* Send a length of transfer */
+      count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, (unsigned int)(length*4));
+
+      // The entry at this index is going to contain READ_DATA_MEMORY_DONE
+      count = ubicom32command_packet_append(&packet, READ_CHECK, ISD_READ_MAIL_BOX, 0);
+
+      commandEchoIndex = count;
+
+      while(length)
+	{
+	  unsigned int transferLength = ubicom32command_packet_get_free(&packet);
+	  unsigned int i;
+	  int transferStartIndex;
+	  struct ubicom32command *command;
+
+	  if(transferLength > length)
+	    transferLength = length;
+
+	  // Index of the first transfer entry
+	  transferStartIndex = ubicom32command_packet_get_next(&packet);
+	  command = &packet.commands[transferStartIndex];
+
+	  for(i=0; i< transferLength; i++)
+	    count = ubicom32command_packet_append(&packet, READ_CHECK, ISD_READ_MAIL_BOX, 0);
+
+	  // Ship the packet for processing
+	  ret = ubicom32command_packet_send(&packet);
+	  if(ret)
+	    return ret;
+
+	  // Process the return data
+	  if(commandEchoIndex)
+	    {
+	      // Test the reply for READ_REGISTERS_DONE
+	      command = &packet.commands[commandEchoIndex];
+	      reply = (command->operand0<<24) | (command->operand1<<16) |
+		(command->operand2<<8) | command->operand3;
+
+	      if(reply != READ_DATA_MEMORY_DONE)
+		{
+		  printf("Reply 0x%x does not match READ_DATA_MEMORY_DONE\n", reply);
+		  return -1;
+		}
+	      else
+		commandEchoIndex = 0;
+	    }
+
+	  // Move the reply data into destination buffer
+	  command = &packet.commands[transferStartIndex];
+	  for(i=0; i< transferLength; i++, command++)
+	    {
+	      reply = (command->operand0<<24) | (command->operand1<<16) |
+		(command->operand2<<8) | command->operand3;
+
+	      *data++ = (int)reply;
+	    }
+
+	  // readjust length etc.
+	  ubicom32command_packet_init(&packet);
+	  length = length - transferLength;
+	}
+
+      return 0;
+    }
+}
+
+int
+writeDataMemory(unsigned int destAddr, unsigned int length, int *data)
+{
+  int ret, count, commandEchoIndex;
+  unsigned int i;
+  struct ubicom32command *command;
+  struct ubicom32command_packet packet;
+  unsigned int reply;
+  ubicom32command_packet_init(&packet);
+
+  /* send down the WRITE_DATA_MEMORY command */
+  count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, WRITE_DATA_MEMORY);
+
+  /* send down the start address  */
+  count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, destAddr);
+
+  /* Send a length of transfer */
+  count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, (unsigned int)(length*4));
+
+  while(length)
+    {
+      unsigned int transferLength = ubicom32command_packet_get_free(&packet);
+
+      if(transferLength > length)
+	transferLength = length;
+
+      length -= transferLength;
+
+      for(i=0; i< transferLength; i++)
+	{
+	  count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, (unsigned int)(*data++));
+	}
+
+      if(length || (ubicom32command_packet_get_free(&packet) == 0))
+	{
+	  // Ship the packet for processing
+	  ret = ubicom32command_packet_send(&packet);
+	  if(ret)
+	    return ret;
+	}
+      else
+	break;
+
+      // readjust length etc.
+      ubicom32command_packet_init(&packet);
+    }
+
+  // We are expecting and echo of WRITE_DATA_MEMORY_DONE
+  count = ubicom32command_packet_append(&packet, READ_CHECK, ISD_READ_MAIL_BOX, 0);
+
+  commandEchoIndex = count;
+
+  // Ship the packet for processing
+  ret = ubicom32command_packet_send(&packet);
+  if(ret)
+    return ret;
+
+  // Test the reply
+  command = &packet.commands[commandEchoIndex];
+
+  reply = (command->operand0<<24) | (command->operand1<<16) |
+    (command->operand2<<8) | command->operand3;
+
+  if(reply != WRITE_DATA_MEMORY_DONE)
+    {
+      printf("Reply 0x%x does not match WRITE_DATA_MEMORY_DONE\n", reply);
+      return -1;
+    }
+
+  return 0;
+}
+
+int
+readPgmMemory(unsigned int destAddr, unsigned int length, int *data)
+{
+  if(okToDoubleBuffer && length > 4 && ((dkmajor > 1) || (dkincrement >=4)))
+    {
+      int ret, count, commandEchoIndex;
+      int pending_transferStartIndex = 0;
+      int pending_transferLength = 0;
+      int i;
+      unsigned int reply;
+
+      struct ubicom32command_packet packets[2];
+      struct ubicom32command_packet *packet;
+      struct ubicom32command *command= NULL;
+      unsigned char *cptr;
+
+      packet = packets;
+      ubicom32command_packet_init(packet);
+
+      doubleBuffer = 1;
+      pending_packet = NULL;
+
+      /* send down the READ_DATA_MEMORY command */
+      count = ubicom32command_packet_append(packet, WRITE_CHECK|OPTION_IGNORE_RESPONSE, ISD_WRITE_MAIL_BOX, READ_PGM_MEMORY);
+
+      /* send down the start address of where to read from */
+      count = ubicom32command_packet_append(packet, WRITE_CHECK|OPTION_IGNORE_RESPONSE, ISD_WRITE_MAIL_BOX, destAddr);
+
+      /* Send a length of transfer */
+      count = ubicom32command_packet_append(packet, WRITE_CHECK|OPTION_IGNORE_RESPONSE, ISD_WRITE_MAIL_BOX, (unsigned int)(length));
+
+      count = ubicom32command_packet_append(packet, READ_CHECK, ISD_READ_MAIL_BOX, 0);
+      commandEchoIndex = count;	// The entry at this index is going to contain READ_PGM_MEMORY_DONE
+
+      /* ship the first part of the command down */
+      ret = ubicom32command_packet_send(packet);
+      if(ret)
+	{
+	  doubleBuffer = 0;
+	  pending_packet = NULL;
+	  return ret;
+	}
+
+      // Setup the pending packet
+      pending_packet = packet;
+      pending_packet_length = ntohl (pending_packet->header.length);
+      pending_packet_opcode = ntohl (pending_packet->header.opcode);
+
+      if(packet == packets)
+	packet = &packets[1];
+      else
+	packet = packets;
+
+      while(length)
+	{
+	  unsigned int transferLength = 256;
+
+	  // initialize packet for reading mailbox
+	  ubicom32command_packet_init_opcode(packet, ISPISD_OPCODE_UBICOM32COMMAND_READ_MAILBOX);
+
+	  if(transferLength > length)
+	    transferLength = length;
+
+	  // load length into operand field
+	  packet->header.operand = transferLength;
+	  packet->header.length = 16;
+
+	  // Ship the packet for processing
+	  ret = ubicom32command_packet_send(packet);
+	  if(ret)
+	    {
+	      doubleBuffer = 0;
+	      pending_packet = NULL;
+	      return ret;
+	    }
+
+	  if(pending_packet)
+	    {
+	      // Process the return data
+	      if(commandEchoIndex)
+		{
+		  // Test the reply for READ_PGM_MEMORY_DONE
+		  command = &pending_packet->commands[commandEchoIndex];
+		  reply = (command->operand0<<24) | (command->operand1<<16) |
+		    (command->operand2<<8) | command->operand3;
+
+		  if(reply != READ_PGM_MEMORY_DONE)
+		    {
+		      printf("Reply 0x%x does not match READ_PGM_MEMORY_DONE\n", reply);
+		      doubleBuffer = 0;
+		      pending_packet = NULL;
+		      return -1;
+		    }
+		  else
+		    commandEchoIndex = 0;
+		}
+
+	      // Move the reply data into destination buffer
+	      cptr = (unsigned char *)&pending_packet->commands[pending_transferStartIndex];
+	      for(i=0; i< pending_transferLength; i++, cptr +=4)
+		{
+		  reply = (cptr[0]<<24) | (cptr[1]<<16) |
+		    (cptr[2]<<8) | cptr[3];
+
+		  *data++ = (int)reply;
+		}
+	    }
+
+	  // Setup the pending packet
+	  pending_packet = packet;
+	  pending_packet_length = (ntohl (pending_packet->header.length) + 4*transferLength);
+	  pending_packet_opcode = ntohl (pending_packet->header.opcode);
+	  pending_transferLength = transferLength;
+
+	  if(packet == packets)
+	    packet = &packets[1];
+	  else
+	    packet = packets;
+
+	  // readjust length etc.
+	  // ubicom32command_packet_init_opcode(packet, ISPISD_OPCODE_UBICOM32COMMAND_READ_MAILBOX);
+	  length = length - transferLength;
+	}
+
+      if(pending_packet)
+	{
+	  retrieve_pending_packet();
+
+	  // Process the return data
+	  if(commandEchoIndex)
+	    {
+	      // Test the reply for READ_PGM_MEMORY_DONE
+	      command = &pending_packet->commands[commandEchoIndex];
+	      reply = (command->operand0<<24) | (command->operand1<<16) |
+		(command->operand2<<8) | command->operand3;
+
+	      if(reply != READ_PGM_MEMORY_DONE)
+		{
+		  printf("Reply 0x%x does not match READ_PGM_MEMORY_DONE\n", reply);
+		  doubleBuffer = 0;
+		  pending_packet = NULL;
+		  return -1;
+		}
+	      else
+		commandEchoIndex = 0;
+	    }
+
+	  // Move the reply data into destination buffer
+	  cptr = (unsigned char *)&pending_packet->commands[pending_transferStartIndex];
+	  for(i=0; i< pending_transferLength; i++, cptr +=4)
+	    {
+	      reply = (cptr[0]<<24) | (cptr[1]<<16) |
+		(cptr[2]<<8) | cptr[3];
+
+	      *data++ = (int)reply;
+	    }
+	}
+
+      pending_packet = NULL;
+      doubleBuffer = 0;
+      return 0;
+    }
+  else
+    {
+      int ret, count, commandEchoIndex;
+
+      struct ubicom32command_packet packet;
+      ubicom32command_packet_init(&packet);
+
+      /* send down the READ_DATA_MEMORY command */
+      count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, READ_PGM_MEMORY);
+
+      /* send down the start address of where to read from */
+      count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, destAddr);
+
+      /* Send a length of transfer */
+      count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, (unsigned int)(length));
+
+      count = ubicom32command_packet_append(&packet, READ_CHECK|OPTION_EXTENDED_TIMEOUT, ISD_READ_MAIL_BOX, 0);
+      commandEchoIndex = count;	// The entry at this index is going to contain READ_PGM_MEMORY_DONE
+
+      while(length)
+	{
+	  unsigned int transferLength = ubicom32command_packet_get_free(&packet);
+	  unsigned int i;
+	  struct ubicom32command *command;
+	  unsigned int reply;
+	  int transferStartIndex;
+
+	  if(transferLength > length)
+	    transferLength = length;
+
+	  // Index of the first transfer entry
+	  transferStartIndex = ubicom32command_packet_get_next(&packet);
+	  command = &packet.commands[transferStartIndex];
+
+	  for(i=0; i< transferLength; i++)
+	    count = ubicom32command_packet_append(&packet, READ_CHECK, ISD_READ_MAIL_BOX, 0);
+
+	  // Ship the packet for processing
+	  ret = ubicom32command_packet_send(&packet);
+	  if(ret)
+	    return ret;
+
+	  // Process the return data
+	  if(commandEchoIndex)
+	    {
+	      // Test the reply for READ_PGM_MEMORY_DONE
+	      command = &packet.commands[commandEchoIndex];
+	      reply = (command->operand0<<24) | (command->operand1<<16) |
+		(command->operand2<<8) | command->operand3;
+
+	      if(reply != READ_PGM_MEMORY_DONE)
+		{
+		  printf("Reply 0x%x does not match READ_PGM_MEMORY_DONE\n", reply);
+		  return -1;
+		}
+	      else
+		commandEchoIndex = 0;
+	    }
+
+	  // Move the reply data into destination buffer
+	  command = &packet.commands[transferStartIndex];
+	  for(i=0; i< transferLength; i++, command++)
+	    {
+	      reply = (command->operand0<<24) | (command->operand1<<16) |
+		(command->operand2<<8) | command->operand3;
+
+	      *data++ = (int)reply;
+	    }
+
+	  // readjust length etc.
+	  ubicom32command_packet_init(&packet);
+	  length = length - transferLength;
+	}
+
+      return 0;
+    }
+}
+
+int
+readPgmMemoryRaw(unsigned int destAddr, unsigned int length, int *data)
+{
+  if(okToDoubleBuffer && length > 4 && ((dkmajor > 1) || (dkincrement >=4)))
+    {
+      int ret, count, commandEchoIndex;
+      int pending_transferStartIndex = 0;
+      int pending_transferLength = 0;
+      unsigned int reply;
+
+      struct ubicom32command_packet packets[2];
+      struct ubicom32command_packet *packet;
+      struct ubicom32command *command= NULL;
+      unsigned char *cptr;
+
+      packet = packets;
+      ubicom32command_packet_init(packet);
+
+      doubleBuffer = 1;
+      pending_packet = NULL;
+
+      /* send down the READ_DATA_MEMORY command */
+      count = ubicom32command_packet_append(packet, WRITE_CHECK|OPTION_IGNORE_RESPONSE, ISD_WRITE_MAIL_BOX, READ_PGM_MEMORY);
+
+      /* send down the start address of where to read from */
+      count = ubicom32command_packet_append(packet, WRITE_CHECK|OPTION_IGNORE_RESPONSE, ISD_WRITE_MAIL_BOX, destAddr);
+
+      /* Send a length of transfer */
+      count = ubicom32command_packet_append(packet, WRITE_CHECK|OPTION_IGNORE_RESPONSE, ISD_WRITE_MAIL_BOX, (unsigned int)(length));
+
+      count = ubicom32command_packet_append(packet, READ_CHECK, ISD_READ_MAIL_BOX, 0);
+      commandEchoIndex = count;	// The entry at this index is going to contain READ_PGM_MEMORY_DONE
+
+      /* ship the first part of the command down */
+      ret = ubicom32command_packet_send(packet);
+      if(ret)
+	{
+	  doubleBuffer = 0;
+	  pending_packet = NULL;
+	  return ret;
+	}
+
+      // Setup the pending packet
+      pending_packet = packet;
+      pending_packet_length = ntohl (pending_packet->header.length);
+      pending_packet_opcode = ntohl (pending_packet->header.opcode);
+
+      if(packet == packets)
+	packet = &packets[1];
+      else
+	packet = packets;
+
+      while(length)
+	{
+	  unsigned int transferLength = 256;
+
+	  // initialize packet for reading mailbox
+	  if (debugging_processor == 3023 && dongleIsUbipod &&
+	      ((0x20000000 <= destAddr) && (destAddr < 0x20400000)) )
+	    {
+	      /* Reading back flash data via Ubipod from a 3k. Use the slower interface. */
+	      ubicom32command_packet_init_opcode(packet, ISPISD_OPCODE_UBICOM32COMMAND_READ_MAILBOX_UBICOM32);
+	    }
+	  else
+	    ubicom32command_packet_init_opcode(packet, ISPISD_OPCODE_UBICOM32COMMAND_READ_MAILBOX);
+
+
+	  if(transferLength > length)
+	    transferLength = length;
+
+	  // load length into operand field
+	  packet->header.operand = transferLength;
+	  packet->header.length = 16;
+
+	  // Ship the packet for processing
+	  ret = ubicom32command_packet_send(packet);
+	  if(ret)
+	    {
+	      doubleBuffer = 0;
+	      pending_packet = NULL;
+	      return ret;
+	    }
+
+	  if(pending_packet)
+	    {
+	      // Process the return data
+	      if(commandEchoIndex)
+		{
+		  // Test the reply for READ_PGM_MEMORY_DONE
+		  command = &pending_packet->commands[commandEchoIndex];
+		  reply = (command->operand0<<24) | (command->operand1<<16) |
+		    (command->operand2<<8) | command->operand3;
+
+		  if(reply != READ_PGM_MEMORY_DONE)
+		    {
+		      printf("Reply 0x%x does not match READ_PGM_MEMORY_DONE\n", reply);
+		      doubleBuffer = 0;
+		      pending_packet = NULL;
+
+		      return -1;
+		    }
+		  else
+		    commandEchoIndex = 0;
+		}
+
+	      // Move the reply data into destination buffer
+	      cptr = (unsigned char *)&pending_packet->commands[pending_transferStartIndex];
+
+#if 0
+	      for(i=0; i< pending_transferLength; i++, cptr +=4)
+		{
+		  reply = (cptr[0]<<24) | (cptr[1]<<16) |
+		    (cptr[2]<<8) | cptr[3];
+
+		  *data++ = (int)reply;
+		}
+#endif
+	      if (pending_transferLength)
+		{
+		  memcpy(data, cptr, pending_transferLength*4);
+		  data += pending_transferLength;
+		}
+	    }
+
+	  // Setup the pending packet
+	  pending_packet = packet;
+	  pending_packet_length = (ntohl (pending_packet->header.length) + 4*transferLength);
+	  pending_packet_opcode = ntohl (pending_packet->header.opcode);
+	  pending_transferLength = transferLength;
+
+	  if(packet == packets)
+	    packet = &packets[1];
+	  else
+	    packet = packets;
+
+	  // readjust length etc.
+	  // ubicom32command_packet_init_opcode(packet, ISPISD_OPCODE_UBICOM32COMMAND_READ_MAILBOX);
+	  length = length - transferLength;
+	}
+
+      if(pending_packet)
+	{
+	  retrieve_pending_packet();
+
+	  // Process the return data
+	  if(commandEchoIndex)
+	    {
+	      // Test the reply for READ_PGM_MEMORY_DONE
+	      command = &pending_packet->commands[commandEchoIndex];
+	      reply = (command->operand0<<24) | (command->operand1<<16) |
+		(command->operand2<<8) | command->operand3;
+
+	      if(reply != READ_PGM_MEMORY_DONE)
+		{
+		  printf("Reply 0x%x does not match READ_PGM_MEMORY_DONE\n", reply);
+		  doubleBuffer = 0;
+		  pending_packet = NULL;
+		  return -1;
+		}
+	      else
+		commandEchoIndex = 0;
+	    }
+
+	  // Move the reply data into destination buffer
+	  cptr = (unsigned char *)&pending_packet->commands[pending_transferStartIndex];
+
+#if 0
+	  for(i=0; i< pending_transferLength; i++, cptr +=4)
+	    {
+	      reply = (cptr[0]<<24) | (cptr[1]<<16) |
+		(cptr[2]<<8) | cptr[3];
+
+	      *data++ = (int)reply;
+	    }
+#endif
+	  memcpy(data, cptr, pending_transferLength*4);
+	  data += pending_transferLength;
+
+	}
+
+      pending_packet = NULL;
+      doubleBuffer = 0;
+      return 0;
+    }
+  else
+    {
+      int ret, count, commandEchoIndex;
+
+      struct ubicom32command_packet packet;
+      ubicom32command_packet_init(&packet);
+
+      /* send down the READ_DATA_MEMORY command */
+      count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, READ_PGM_MEMORY);
+
+      /* send down the start address of where to read from */
+      count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, destAddr);
+
+      /* Send a length of transfer */
+      count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, (unsigned int)(length));
+
+      count = ubicom32command_packet_append(&packet, READ_CHECK|OPTION_EXTENDED_TIMEOUT, ISD_READ_MAIL_BOX, 0);
+      commandEchoIndex = count;	// The entry at this index is going to contain READ_PGM_MEMORY_DONE
+
+      while(length)
+	{
+	  unsigned int transferLength = ubicom32command_packet_get_free(&packet);
+	  unsigned int i;
+	  struct ubicom32command *command;
+	  unsigned int reply;
+	  int transferStartIndex;
+
+	  if(transferLength > length)
+	    transferLength = length;
+
+	  // Index of the first transfer entry
+	  transferStartIndex = ubicom32command_packet_get_next(&packet);
+	  command = &packet.commands[transferStartIndex];
+
+	  for(i=0; i< transferLength; i++)
+	    count = ubicom32command_packet_append(&packet, READ_CHECK, ISD_READ_MAIL_BOX, 0);
+
+	  // Ship the packet for processing
+	  ret = ubicom32command_packet_send(&packet);
+	  if(ret)
+	    return ret;
+
+	  // Process the return data
+	  if(commandEchoIndex)
+	    {
+	      // Test the reply for READ_PGM_MEMORY_DONE
+	      command = &packet.commands[commandEchoIndex];
+	      reply = (command->operand0<<24) | (command->operand1<<16) |
+		(command->operand2<<8) | command->operand3;
+
+	      if(reply != READ_PGM_MEMORY_DONE)
+		{
+		  printf("Reply 0x%x does not match READ_PGM_MEMORY_DONE\n", reply);
+		  return -1;
+		}
+	      else
+		commandEchoIndex = 0;
+	    }
+
+	  // Move the reply data into destination buffer
+	  command = &packet.commands[transferStartIndex];
+	  for(i=0; i< transferLength; i++, command++)
+	    {
+	      reply = (command->operand0<<24) | (command->operand1<<16) |
+		(command->operand2<<8) | command->operand3;
+
+	      *data++ = (int)reply;
+	    }
+
+	  // readjust length etc.
+	  ubicom32command_packet_init(&packet);
+	  length = length - transferLength;
+	}
+
+      return 0;
+    }
+}
+
+int
+crcPgmMemory(unsigned int destAddr, unsigned int length, int *data)
+{
+  int ret, count, commandEchoIndex, crcResultIndex;
+  struct ubicom32command *command;
+  unsigned int reply;
+  unsigned int crc, actual_crc;
+  unsigned char *ptr;
+
+  struct ubicom32command_packet packet;
+  ubicom32command_packet_init(&packet);
+
+  /* send down the READ_DATA_MEMORY command */
+  count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, CRC_PGM_MEMORY);
+
+  /* send down the start address of where to read from */
+  count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, destAddr);
+
+  /* Send a length of transfer */
+  count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, (unsigned int)(length));
+
+  count = ubicom32command_packet_append(&packet, READ_CHECK|OPTION_EXTENDED_TIMEOUT, ISD_READ_MAIL_BOX, 0);
+  commandEchoIndex = count;	// The entry at this index is going to contain CRC_PGM_MEMORY_DONE
+
+  count = ubicom32command_packet_append(&packet, READ_CHECK, ISD_READ_MAIL_BOX, 0);
+  crcResultIndex = count;
+
+  // Ship the packet for processing
+  ret = ubicom32command_packet_send(&packet);
+  if(ret)
+    return ret;
+
+  // Test the reply for CRC_PGM_MEMORY_DONE
+  command = &packet.commands[commandEchoIndex];
+  reply = (command->operand0<<24) | (command->operand1<<16) |
+	(command->operand2<<8) | command->operand3;
+
+  if(reply != CRC_PGM_MEMORY_DONE)
+    {
+      printf("Reply 0x%x does not match CRC_PGM_MEMORY_DONE\n", reply);
+      return -1;
+    }
+
+  // Move the reply data into destination buffer
+  command = &packet.commands[crcResultIndex];
+  actual_crc = (command->operand0<<24) | (command->operand1<<16) |
+	(command->operand2<<8) | command->operand3;
+
+  // Calculate good crc
+  count = length * 4;
+  ptr = (unsigned char *)data;
+  crc = 0xFFFFFFFF;
+  while (count--)
+    {
+      int index = (crc & 0x0FF) ^ *ptr++;
+      crc >>= 8;
+      if (index &   1) crc ^= 0x77073096;
+      if (index &   2) crc ^= 0xEE0E612C;
+      if (index &   4) crc ^= 0x076DC419;
+      if (index &   8) crc ^= 0x0EDB8832;
+      if (index &  16) crc ^= 0x1DB71064;
+      if (index &  32) crc ^= 0x3B6E20C8;
+      if (index &  64) crc ^= 0x76DC4190;
+      if (index & 128) crc ^= 0xEDB88320;
+    }
+  crc ^= 0xFFFFFFFF;
+
+  //Compare crc result
+  if (crc != actual_crc)
+    return -1;
+
+  return 0;
+}
+
+unsigned int loadStats[2048];
+unsigned int loadStatIndex;
+unsigned int loadLengths[2048];
+
+int
+writePgmMemory(unsigned int destAddr, unsigned int length, int *data)
+{
+  if(okToDoubleBuffer && length > 4 && (((dkmajor > 1) || (dkincrement >= 4)) || debugging_processor == 5133))
+    {
+      int ret, count;
+      unsigned int i;
+      struct ubicom32command *command;
+      unsigned int reply;
+      struct ubicom32command_packet packets[2], *packet;
+
+      packet = packets;
+      doubleBuffer = 1;
+      pending_packet = NULL;
+
+      ubicom32command_packet_init_opcode(packet, ISPISD_OPCODE_UBICOM32COMMAND);
+
+      /* send down the WRITE_PGM_MEMORY command */
+      count = ubicom32command_packet_append(packet, WRITE_CHECK|OPTION_IGNORE_RESPONSE, ISD_WRITE_MAIL_BOX, WRITE_PGM_MEMORY);
+
+      /* send down the start address  */
+      count = ubicom32command_packet_append(packet, WRITE_CHECK|OPTION_IGNORE_RESPONSE, ISD_WRITE_MAIL_BOX, destAddr);
+
+      /* Send a length of transfer */
+      count = ubicom32command_packet_append(packet, WRITE_CHECK|OPTION_IGNORE_RESPONSE, ISD_WRITE_MAIL_BOX, (unsigned int)(length));
+
+      /* ship the first part of the command down */
+      ret = ubicom32command_packet_send(packet);
+      if(ret)
+	{
+	  doubleBuffer = 0;
+	  pending_packet = NULL;
+	  return ret;
+	}
+
+      // Setup the pending packet
+      pending_packet = packet;
+      pending_packet_length = ntohl (pending_packet->header.length);
+      pending_packet_opcode = ntohl (pending_packet->header.opcode);
+
+      if(packet == packets)
+	packet = &packets[1];
+      else
+	packet = packets;
+
+
+      while(length)
+	{
+	  unsigned int transferLength = 256;
+	  unsigned int *dest;
+
+	  // initialize packet for writing mailbox
+	  ubicom32command_packet_init_opcode(packet, ISPISD_OPCODE_UBICOM32COMMAND_WRITE_MAILBOX);
+
+	  if(transferLength > length)
+	    transferLength = length;
+
+	  // load length into operand field
+	  packet->header.operand = transferLength;
+	  packet->header.length = 16 + transferLength * 4;
+
+	  // adjust length
+	  length -= transferLength;
+
+	  /* copy the data into the command data space */
+	  dest = (unsigned int *)&packet->commands[0];
+	  for(i=0; i< transferLength; i++, dest++, data++)
+	    {
+	      unsigned char *s, *d;
+	      d = (unsigned char *)dest;
+	      s = (unsigned char *)data;
+
+	      d[3] = s[0];
+	      d[2] = s[1];
+	      d[1] = s[2];
+	      d[0] = s[3];
+	    }
+	  //memcpy(dest, (void *) data, transferLength * 4);
+
+	  // Ship the packet for processing
+	  ret = ubicom32command_packet_send(packet);
+	  if(ret)
+	    {
+	      doubleBuffer = 0;
+	      pending_packet = NULL;
+	      return ret;
+	    }
+
+	  // Setup the pending packet
+	  pending_packet = packet;
+	  pending_packet_length = 16;
+	  pending_packet_opcode = ntohl (pending_packet->header.opcode);
+
+	  if(packet == packets)
+	    packet = &packets[1];
+	  else
+	    packet = packets;
+	}
+
+      // There is data to be read. Go get it
+      ubicom32command_packet_init(packet);
+
+      // Go read the data from the mailbox
+      count = ubicom32command_packet_append(packet, READ_CHECK|OPTION_EXTENDED_TIMEOUT, ISD_READ_MAIL_BOX, 0);
+
+      /* Ship the packet down for execution */
+      ret = ubicom32command_packet_send(packet);
+      if(ret)
+	{
+	  doubleBuffer = 0;
+	  pending_packet = NULL;
+	  return ret;
+	}
+
+      // Setup the pending packet
+      pending_packet = packet;
+      pending_packet_length = ntohl (pending_packet->header.length);
+      pending_packet_opcode = ntohl (pending_packet->header.opcode);
+
+
+      // We are expecting and echo of WRITE_PGM_MEMORY_DONE
+      retrieve_pending_packet();
+
+      // Test the reply
+      command = &pending_packet->commands[0];
+
+      reply = (command->operand0<<24) | (command->operand1<<16) |
+	(command->operand2<<8) | command->operand3;
+
+      if(reply != WRITE_PGM_MEMORY_DONE)
+	{
+	  printf("Reply 0x%x does not match WRITE_PGM_MEMORY_DONE\n", reply);
+	  doubleBuffer = 0;
+	  pending_packet = NULL;
+	  return -1;
+	}
+
+      pending_packet = NULL;
+      doubleBuffer = 0;
+      return 0;
+    }
+  else
+    {
+      int ret, count, commandEchoIndex;
+      unsigned int i;
+      struct ubicom32command *command;
+      unsigned int reply;
+      struct ubicom32command_packet packet;
+      ubicom32command_packet_init(&packet);
+
+      /* send down the WRITE_PGM_MEMORY command */
+      count = ubicom32command_packet_append(&packet, WRITE_CHECK|OPTION_IGNORE_RESPONSE, ISD_WRITE_MAIL_BOX, WRITE_PGM_MEMORY);
+
+      /* send down the start address  */
+      count = ubicom32command_packet_append(&packet, WRITE_CHECK|OPTION_IGNORE_RESPONSE, ISD_WRITE_MAIL_BOX, destAddr);
+
+      /* Send a length of transfer */
+      count = ubicom32command_packet_append(&packet, WRITE_CHECK|OPTION_IGNORE_RESPONSE, ISD_WRITE_MAIL_BOX, (unsigned int)(length));
+
+      while(length)
+	{
+	  unsigned int transferLength = ubicom32command_packet_get_free(&packet);
+
+	  if(transferLength > length)
+	    transferLength = length;
+
+	  length -= transferLength;
+
+	  for(i=0; i< transferLength; i++)
+	    {
+	      count = ubicom32command_packet_append(&packet, WRITE_CHECK|OPTION_IGNORE_RESPONSE, ISD_WRITE_MAIL_BOX, (unsigned int)(*data++));
+	    }
+
+	  if(length || (ubicom32command_packet_get_free(&packet) == 0))
+	    {
+	      // Ship the packet for processing
+	      ret = ubicom32command_packet_send(&packet);
+	      if(ret)
+		return ret;
+	    }
+	  else
+	    break;
+
+	  // readjust the packet
+	  ubicom32command_packet_init(&packet);
+	}
+
+      // We are expecting and echo of WRITE_PGM_MEMORY_DONE
+      count = ubicom32command_packet_append(&packet, READ_CHECK|OPTION_EXTENDED_TIMEOUT, ISD_READ_MAIL_BOX, 0);
+      commandEchoIndex = count;
+
+      // Ship the packet for processing
+      ret = ubicom32command_packet_send(&packet);
+      if(ret)
+	return ret;
+
+      // Test the reply
+      command = &packet.commands[commandEchoIndex];
+
+      reply = (command->operand0<<24) | (command->operand1<<16) |
+	(command->operand2<<8) | command->operand3;
+
+      if(reply != WRITE_PGM_MEMORY_DONE)
+	{
+	  printf("Reply 0x%x does not match WRITE_PGM_MEMORY_DONE\n", reply);
+	  return -1;
+	}
+
+      return 0;
+    }
+}
+
+int
+jumpToPc(unsigned int address)
+{
+  int ret, count;
+  struct ubicom32command_packet packet;
+  struct ubicom32command *command;
+  unsigned int reply;
+
+  ubicom32command_packet_init(&packet);
+
+  /* send down JUMP_TO_PC */
+  count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, JUMP_TO_PC);
+
+  /* send down the address */
+  count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, address);
+
+  /* wait for JUMP_TO_PC_DONE */
+  count = ubicom32command_packet_append(&packet, READ_CHECK, ISD_READ_MAIL_BOX, 0);
+
+  /* Ship the packet down for execution */
+  ret = ubicom32command_packet_send(&packet);
+  if(ret)
+    return ret;
+
+  command = &packet.commands[2];
+
+  reply = (command->operand0<<24) | (command->operand1<<16) |
+    (command->operand2<<8) | command->operand3;
+
+  if(reply != JUMP_TO_PC_DONE)
+    {
+      printf("Reply 0x%x does not match JUMP_TO_PC_DONE\n", reply);
+      return -1;
+    }
+
+  return 0;
+}
+
+int
+singleStep(unsigned int threadNo)
+{
+  int ret, count;
+  struct ubicom32command_packet packet;
+  struct ubicom32command *command;
+  unsigned int reply;
+
+  memset((void *)&mainRegisters, 0, sizeof(mainRegisters));
+  ubicom32command_packet_init(&packet);
+
+  /* send down SINGLE_STEP */
+  count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, SINGLE_STEP);
+
+  /* send down thread # */
+  count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, threadNo);
+
+  /* wait for SINGLE_STEP_DONE */
+  count = ubicom32command_packet_append(&packet, READ_CHECK, ISD_READ_MAIL_BOX, 0);
+
+  /* Ship the packet down for execution */
+  ret = ubicom32command_packet_send(&packet);
+  if(ret)
+    return ret;
+
+  command = &packet.commands[2];
+
+  reply = (command->operand0<<24) | (command->operand1<<16) |
+    (command->operand2<<8) | command->operand3;
+
+  if(reply != SINGLE_STEP_DONE)
+    {
+      printf("Reply 0x%x does not match SINGLE_STEP_DONE\n", reply);
+      return -1;
+    }
+
+  return 0;
+}
+
+// Status holds the state of all threads and the processor
+int status;
+
+int
+stopProcessor(void)
+{
+  int i, mask;
+  int ret, count, statCopy;
+  struct ubicom32command *command;
+  unsigned int reply;
+  struct ubicom32command_packet packet;
+
+  memset((void *)&mainRegisters, 0, sizeof(mainRegisters));
+
+  ubicom32command_packet_init(&packet);
+
+  // stop all the threads
+  count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, READ_STATUS);
+
+  /* Ship the packet down for execution */
+  ret = ubicom32command_packet_send(&packet);
+  if(ret)
+    return ret;
+
+  // We need to wait for the reply
+  count = 0;
+
+  while(count++ < 100 ) {
+	  int data;
+	  ret = readStatus(&data);
+
+	  if(ret) {
+		  /* some thing crapped out. Issue a reset and return control back to gdb */
+		  ret = ubicom32isp_reset();
+		  currentThread = 0;
+		  return 0;
+	  }
+
+	  if(data & M_BOX_OUT_Q_EMPTY) {
+		  // Mailbox queue is empty. Sleep for 10ms and try again
+		  usleep(10000);
+	  }
+  }
+
+  if(count == 100) {
+	  /* Things look quite dead. */
+	  ret = ubicom32isp_reset();
+	  currentThread = 0;
+	  return 0;
+  }
+
+
+  ubicom32command_packet_init(&packet);
+
+  /* wait for READ_STATUS_DONE */
+  count = ubicom32command_packet_append(&packet, READ_CHECK, ISD_READ_MAIL_BOX, 0);
+
+  /* Read back the status word */
+  count = ubicom32command_packet_append(&packet, READ_CHECK, ISD_READ_MAIL_BOX, 0);
+
+
+  /* Ship the packet down for execution */
+  ret = ubicom32command_packet_send(&packet);
+  if(ret)
+    return ret;
+
+  command = &packet.commands[0];
+
+  reply = (command->operand0<<24) | (command->operand1<<16) |
+    (command->operand2<<8) | command->operand3;
+
+  if(reply != READ_STATUS_DONE)
+    {
+      printf("Reply 0x%x does not match READ_STATUS_DONE\n", reply);
+      return -1;
+    }
+
+  command++;
+  reply = (command->operand0<<24) | (command->operand1<<16) |
+    (command->operand2<<8) | command->operand3;
+
+  status = (int) reply;
+
+  statCopy= status;
+  currentThread = 0xffff;
+
+  // scan through status and figure out the currentThread
+  for(i=0, mask=0x3; i< 8; i++)
+    {
+      if(statCopy & mask)
+      {
+	// enabled thread
+	if((statCopy & mask) == 0x1)
+	  {
+	    // suspended thread
+	    continue;
+	  }
+	else
+	  {
+	    // enabled and active thread
+	    if((statCopy & mask) == 0x2)
+	      {
+		// Breakpointed thread
+		currentThread = i;
+		break;
+	      }
+	    if((dontDebugMask & (1<<i)) == 0)
+	      {
+		currentThread = i;
+	      }
+	  }
+      }
+
+      statCopy >>=2;
+    }
+
+  if(currentThread == 0xffff)
+    {
+      // all threads appear to be suspended. Set currentThread to be 1
+      currentThread = 0;
+    }
+
+  return 0;
+}
+
+int
+restartProcessor(void)
+{
+  int ret, count;
+  struct ubicom32command_packet packet;
+  struct ubicom32command *command;
+  unsigned int reply;
+
+  memset((void *)&mainRegisters, 0, sizeof(mainRegisters));
+
+  ubicom32command_packet_init(&packet);
+
+  // start all the threads
+  count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, START);
+
+  /* wait for START_DONE */
+  count = ubicom32command_packet_append(&packet, READ_CHECK, ISD_READ_MAIL_BOX, 0);
+
+  /* Ship the packet down for execution */
+  ret = ubicom32command_packet_send(&packet);
+  if(ret)
+    return ret;
+
+  command = &packet.commands[1];
+
+  reply = (command->operand0<<24) | (command->operand1<<16) |
+    (command->operand2<<8) | command->operand3;
+
+  if(reply != START_DONE)
+    {
+      printf("Reply 0x%x does not match START_DONE\n", reply);
+      return -1;
+    }
+
+  return 0;
+}
+
+int
+attachDetachDebugger(unsigned attach, unsigned int cpuType)
+{
+  int sendExpect;
+  int ret, count;
+
+  struct ubicom32command_packet packet;
+  struct ubicom32command *command;
+  unsigned int reply;
+
+  if(attach)
+    sendExpect = ATTACH_DEBUGGER;
+  else
+    sendExpect = DETACH_DEBUGGER;
+
+  ubicom32command_packet_init(&packet);
+
+  // send down the attach/dettach command
+  count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, (unsigned int)sendExpect);
+
+  // send down the cpuType
+  count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, (unsigned int)cpuType);
+
+  /* wait for DONE */
+  count = ubicom32command_packet_append(&packet, READ_CHECK, ISD_READ_MAIL_BOX, 0);
+
+  /* Ship the packet down for execution */
+  ret = ubicom32command_packet_send(&packet);
+  if(ret)
+    return ret;
+
+  command = &packet.commands[2];
+
+  reply = (command->operand0<<24) | (command->operand1<<16) |
+    (command->operand2<<8) | command->operand3;
+
+  if(reply != (unsigned int)sendExpect)
+    {
+      exit(1);
+    }
+
+  return 0;
+}
+
+void
+cleanupBackend(unsigned int cpuType)
+{
+  int ret;
+  memset((void *)&mainRegisters, 0, sizeof(mainRegisters));
+
+  // Inform kernel about disconnecting the debugger
+  ret = attachDetachDebugger(0, cpuType);
+}
+
+int
+whoareyou(unsigned int *reply)
+{
+  struct ubicom32command_packet packet;
+  struct ubicom32command *command;
+  int count, ret;
+
+  ubicom32command_packet_init(&packet);
+
+  // Send down ISD_CLEAN_MAIL
+  count = ubicom32command_packet_append(&packet, OPTION_IGNORE_RESPONSE, ISD_CLEAN_MAIL, 0);
+
+  ret = ubicom32command_packet_send(&packet);
+
+  ubicom32command_packet_init(&packet);
+
+  // stop all the threads
+  count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, WHO_ARE_YOU);
+
+  /* wait for WHO_ARE_YOU_DONE */
+  count = ubicom32command_packet_append(&packet, READ_CHECK, ISD_READ_MAIL_BOX, 0);
+
+  /* Read back the whoAmI word */
+  count = ubicom32command_packet_append(&packet, READ_CHECK, ISD_READ_MAIL_BOX, 0);
+
+  /* Ship the packet down for execution */
+  ret = ubicom32command_packet_send(&packet);
+  if(ret)
+    {
+      /*
+       * our attempt to query the debug kernel has failed
+       */
+      exit(1);
+    }
+
+  command = &packet.commands[1];
+
+  *reply = (command->operand0<<24) | (command->operand1<<16) |
+    (command->operand2<<8) | command->operand3;
+
+  if(*reply != WHO_ARE_YOU_DONE)
+    {
+      /* Incorrect reply */
+      printf("Incorrect reply of 0x%x expect 0x%x\n", *reply, WHO_ARE_YOU_DONE);
+      exit(1);
+    }
+
+  command++;
+  *reply = (command->operand0<<24) | (command->operand1<<16) |
+    (command->operand2<<8) | command->operand3;
+
+  printf("The reply is 0x%x\n", *reply);
+
+  return 0;
+}
+
+int
+getVersion(void)
+{
+  int ret, count;
+  struct ubicom32command_packet packet;
+  struct ubicom32command *command;
+  unsigned int reply;
+  int commandEchoIndex;
+
+  ubicom32command_packet_init(&packet);
+
+  /* send down the GET_VERSION command */
+  count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, GET_VERSION);
+
+  // We are expecting and echo of  GET_VERSION_DONE
+  count = ubicom32command_packet_append(&packet, READ_CHECK, ISD_READ_MAIL_BOX, 0);
+  commandEchoIndex = count;
+
+  // We expect 2 pieces of data after this
+  count = ubicom32command_packet_append(&packet, READ_CHECK, ISD_READ_MAIL_BOX, 0);
+  count = ubicom32command_packet_append(&packet, READ_CHECK, ISD_READ_MAIL_BOX, 0);
+
+  // Ship the packet for processing
+  ret = ubicom32command_packet_send(&packet);
+  if(ret)
+    return ret;
+
+  // Test the reply
+  command = &packet.commands[commandEchoIndex];
+
+  reply = (command->operand0<<24) | (command->operand1<<16) |
+    (command->operand2<<8) | command->operand3;
+
+  if(reply != GET_VERSION_DONE)
+    {
+#ifdef DEBUG
+      printf("Reply 0x%x does not match GET_VERSION_DONE\n", reply);
+#endif
+      return 0;
+    }
+  command++;
+  reply = (command->operand0<<24) | (command->operand1<<16) |
+    (command->operand2<<8) | command->operand3;
+
+  dkmajor = (reply>>24)&0xff;
+  dkminro = (reply>>16)&0xff;
+  dkstate = (reply>>8)&0xff;
+  dkincrement = reply &0xff;
+  dkunique = reply&0xff;
+
+  command++;
+  reply = (command->operand0<<24) | (command->operand1<<16) |
+    (command->operand2<<8) | command->operand3;
+
+  dkunique = reply;
+
+  return 0;
+}
+
+int
+setupForDownload(void)
+{
+  int ret;
+  extern int getFlashDetails(void);
+
+  ret = getFlashDetails();
+  if(ret)
+    return ret;
+
+  ret = attachDetachDebugger(1, 1);
+  if(ret)
+    return ret;
+
+  ret = getVersion();
+  if(ret)
+    return ret;
+
+  if(dkincrement ==0)
+    return 0;
+
+  return ret;
+}
+
+int
+initBackendToBootKernel(unsigned int cpuType)
+{
+  int ret, count;
+  static int getStartSending = 0;
+  int num_attempts = 0;
+  enum connection_status  connectStatus;
+  struct ubicom32command_packet packet;
+  struct ubicom32command *command;
+  unsigned int reply;
+  extern int getFlashDetails(void);
+
+  // Open connection to hardware
+  while(num_attempts++ <10)
+    {
+      ret = debugOpen();
+      if(ret)
+	continue;
+      else
+	break;
+    }
+
+  if(num_attempts > 10)
+    {
+      printf("Unable to make connection to target. %d\n", num_attempts);
+      exit(1);
+    }
+
+  num_attempts = 0;
+  connectStatus=OPEN;
+
+  /* We are going to sit here and attempt to hook up to the debug kernel by hook or by crook */
+  while(num_attempts++ <= 10)
+    {
+      ret = debugOpen();
+
+      /* debugOpen should never fail */
+      if(ret)
+	return ret;
+
+      ubicom32command_packet_init(&packet);
+
+      // Send down ISD_CLEAN_MAIL
+      count = ubicom32command_packet_append(&packet, OPTION_IGNORE_RESPONSE, ISD_CLEAN_MAIL, 0);
+
+      ret = ubicom32command_packet_send(&packet);
+
+      ubicom32command_packet_init(&packet);
+
+      // send down WHO_ARE_YOU
+      count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, WHO_ARE_YOU);
+
+      /* wait for WHO_ARE_YOU_DONE */
+      count = ubicom32command_packet_append(&packet, READ_CHECK, ISD_READ_MAIL_BOX, 0);
+
+      /* Read back the whoAmI word */
+      count = ubicom32command_packet_append(&packet, READ_CHECK, ISD_READ_MAIL_BOX, 0);
+
+      /* Ship the packet down for execution */
+      ret = ubicom32command_packet_send(&packet);
+      if(ret)
+	{
+	  /*
+	   * our attempt to talk to the debug kernel has failed. Issue a ISD reset and try again
+	   * after 300 ms.
+	   */
+	  if(connectStatus==OPEN||
+	     ((connectStatus == CONN_BOOT_LOADER) &&
+	      num_attempts == 8))
+	    {
+	      connectStatus = RESET_ISSUED;
+	      debugReset();
+	      usleep(700000);
+	      continue;
+	    }
+	  else
+	    {
+	      ubicom32command_packet_init(&packet);
+
+	      // Send down ISD_OPEN
+	      count = ubicom32command_packet_append(&packet, OPTION_IGNORE_RESPONSE, ISD_CLEAN_MAIL, 0);
+
+	      ret = ubicom32command_packet_send(&packet);
+	    }
+
+	  /* try again */
+	  usleep(500000);
+	  continue;
+	}
+
+      command = &packet.commands[1];
+
+      reply = (command->operand0<<24) | (command->operand1<<16) |
+	(command->operand2<<8) | command->operand3;
+
+      if(reply != WHO_ARE_YOU_DONE)
+	{
+	  /* reset and try again */
+	  debugReset();
+	  usleep(700000);
+	  continue;
+	}
+
+      command++;
+      reply = (command->operand0<<24) | (command->operand1<<16) |
+	(command->operand2<<8) | command->operand3;
+
+      printf("The reply is 0x%x\n", reply);
+      if(reply == 0xb00ce)
+	{
+	  connectStatus = CONN_BOOT_LOADER;
+	  break;
+	}
+      else
+	{
+	  /* we got garbage. Try the reset sequence again */
+	  connectStatus = OPEN;
+	  debugReset();
+	  usleep(700000);
+	  continue;
+	}
+    }
+
+  if(num_attempts > 10)
+    {
+      printf("There appears to be no debug kernel present\n");
+      exit(1);
+    }
+
+  // Stop all mp threads
+  ret = stopProcessor();
+  if(ret)
+    return ret;
+
+  ret = getFlashDetails();
+  ret = attachDetachDebugger(1, cpuType);
+  getVersion();
+  single_step_buffer_address = 0;
+
+  if(dkincrement ==0)
+    return 0;
+  return ret;
+}
+
+int
+initBackend(unsigned int cpuType)
+{
+  int ret, count;
+  struct ubicom32command *command;
+  struct ubicom32command_packet packet;
+  unsigned int reply;
+  enum connection_status  connectStatus;
+  int num_attempts = 0;
+  int num_open_attempts = 0;
+  extern int getFlashDetails(void);
+
+  // Open connection to hardware
+  while(num_attempts++ <10)
+    {
+#if DEBUG
+      printf("IB DOP\n");
+#endif
+
+      ret = debugOpen();
+      if(ret)
+	{
+	  usleep(100000);
+	  continue;
+	}
+      else
+	break;
+    }
+
+  if(num_attempts > 10)
+    {
+      // printf("Unable to make connection to target. %d\n", num_attempts);
+      // return -2 telling upper layer that ISD connection itself is broken
+      return -2;
+    }
+
+  if(debugging_processor == 5133)
+    return -4;
+
+  num_attempts = 0;
+  connectStatus=OPEN;
+
+  /* We are going to sit here and attempt to hook up to the debug kernel by hook or by crook */
+  while(num_attempts++ <= 10)
+    {
+      num_open_attempts = 0;
+      while(num_open_attempts++< 10){
+#if DEBUG
+	printf("IB1 DOP\n");
+#endif
+	ret = debugOpen();
+
+	/* debugOpen should never fail */
+	if(ret)
+	  {
+#ifdef DEBUG
+	    printf("Open bombed\n");
+#endif
+	  }
+	else
+	  break;
+
+      }
+
+      if(ret)
+	return ret;
+
+      ubicom32command_packet_init(&packet);
+
+      // Send down ISD_CLEAN_MAIL
+      count = ubicom32command_packet_append(&packet, OPTION_IGNORE_RESPONSE, ISD_CLEAN_MAIL, 0);
+
+      ret = ubicom32command_packet_send(&packet);
+
+      ubicom32command_packet_init(&packet);
+
+      // send down WHO_ARE_YOU
+      count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, WHO_ARE_YOU);
+
+      /* wait for WHO_ARE_YOU_DONE */
+      count = ubicom32command_packet_append(&packet, READ_CHECK, ISD_READ_MAIL_BOX, 0);
+
+      /* Read back the whoAmI word */
+      count = ubicom32command_packet_append(&packet, READ_CHECK, ISD_READ_MAIL_BOX, 0);
+
+#if DEBUG
+      printf("ISPR SWAREU\n");
+#endif
+
+      /* Ship the packet down for execution */
+      ret = ubicom32command_packet_send(&packet);
+      if(ret)
+	{
+	  /*
+	   * our attempt to talk to the debug kernel has failed. Issue a ISD reset and try again
+	   * after 300 ms.
+	   */
+	  if(connectStatus==OPEN||
+	     ((connectStatus == CONN_BOOT_LOADER) &&
+	      num_attempts >= 8))
+	    {
+#ifdef DEBUG
+	      printf("3\n");
+#endif
+	      if(connectStatus == CONN_BOOT_LOADER)
+		{
+		  ret = initBackendToBootKernel(1);
+		}
+	      else
+		{
+		  if(connectStatus == OPEN)
+		    {
+#ifdef DEBUG
+		      printf("4\n");
+#endif
+		      connectStatus = RESET_ISSUED;
+		      debugReset();
+		      usleep(700000);
+		    }
+		  else
+		    usleep(300000);
+		}
+	      continue;
+	    }
+	  else
+	    {
+#ifdef DEBUG
+	      printf("2 num att =%d\n", num_attempts);
+#endif
+	      ubicom32command_packet_init(&packet);
+
+	      // Send down ISD_OPEN
+	      count = ubicom32command_packet_append(&packet, OPTION_IGNORE_RESPONSE, ISD_CLEAN_MAIL, 0);
+
+	      ret = ubicom32command_packet_send(&packet);
+	    }
+
+	  /* try again */
+	  usleep(500000);
+	  continue;
+	}
+
+      command = &packet.commands[1];
+
+      reply = (command->operand0<<24) | (command->operand1<<16) |
+	(command->operand2<<8) | command->operand3;
+
+      if(reply != WHO_ARE_YOU_DONE)
+	{
+	  /* reset and try again */
+	  debugReset();
+	  usleep(700000);
+	  continue;
+	}
+
+      command++;
+      reply = (command->operand0<<24) | (command->operand1<<16) |
+	(command->operand2<<8) | command->operand3;
+
+      printf("The reply is 0x%x\n", reply);
+      getVersion();
+      single_step_buffer_address = 0;
+      if(reply == 0xb00ce)
+	 printf("Boot Sector Loader Kernel Version %d.%d.%c%d.%d\n", dkmajor, dkminro, dkstate, dkincrement, dkunique);
+      else if(reply == 0xabb)
+	{
+	  printf("Application Debug Kernel Version %d.%d.%c%d.%d\n", dkmajor, dkminro, dkstate, dkincrement, dkunique);
+
+	  /* if the kernel version is greater than or equal to  2.0.D1.6 then we can find the single step buffer address from the 3k */
+	  if ((dkmajor >2 ) || ((dkmajor ==2) && (dkunique >= 6))) {
+	    (void) getSingleStepBufferAddress();
+	  }
+	}
+      else if(reply == 0xb0dce)
+	 printf("Downloader Kernel Version %d.%d.%c%d.%d\n", dkmajor, dkminro, dkstate, dkincrement, dkunique);
+      else
+	 printf("Unexpected reply\n");
+
+#ifdef DEBUG
+      printf("connectStatu = %d\n", connectStatus);
+#endif
+      if(reply == 0xabb)
+	{
+	  connectStatus = CONN_APP;
+	  break;
+	}
+      else if(reply == 0xb00ce)
+	{
+	  if(connectStatus == CONN_BOOT_LOADER)
+	    break;
+	  connectStatus = CONN_BOOT_LOADER;
+#ifdef DEBUG
+	  printf("1\n");
+#endif
+	  num_attempts = 0;
+	}
+      else
+	{
+	  /* we got garbage. Try the reset sequence again */
+	  debugReset();
+	  usleep(700000);
+	  continue;
+	}
+
+      /* The goal here is to restart and get into the APP debug kernel if possible */
+      ret = restartProcessor();
+      if(ret)
+	{
+	  /*
+	   * our attempt to talk to the debug kernel has failed. Issue a ISD reset and try again
+	   * after 300 ms.
+	   */
+	  connectStatus = OPEN;
+	  debugReset();
+	  usleep(700000);
+	  continue;
+	}
+
+      /* good restart. Sleep for about 0.5 s and Issue the WHO_ARE_YOU_SEQUENCE again */
+      usleep(500000);
+
+#if MORE_ROBUST_RESET
+      unsigned int resBuf[32];
+      unsigned int numEntries;
+      numEntries = 8;
+
+      debugOpen();
+      ret = hw_monitor(0, 1, 0, 0x80000000, 0x80000000, numEntries, resBuf, NULL);
+      while (ret == 0) {
+	      /* analyze and see if any other thread other than 0 is executing */
+	      int i;
+	      for(i=0 ; i< numEntries; i++) {
+		      if((resBuf[i] & 0x80000000) &&
+			 ((resBuf[i] >> 26) & 0x7))
+			      break;
+	      }
+
+	      if (i< numEntries)
+		      break;
+
+#if DEBUG
+	      printf("No Debugger yet.\n");
+#endif
+
+	      usleep(1000);
+	      ret = hw_monitor(0, 1, 0, 0x80000000, 0x80000000, numEntries, resBuf, NULL);
+      }
+#endif
+
+      //sleep(2);
+      continue;
+    }
+
+  if(num_attempts > 10)
+    {
+      //printf("There appears to be no debug kernel present\n");
+      // return -3 indicating that there is no debug kernel
+      return -3;
+    }
+
+  // Stop all mp threads
+  ret = stopProcessor();
+  if(ret)
+    return ret;
+
+  if(dkincrement == 0)
+    return 0;
+
+  ret = attachDetachDebugger(1, cpuType);
+
+  ret = getFlashDetails();
+
+  return ret;
+}
+
+void
+printTPacketMP(unsigned char *buffer, unsigned int threadNo)
+{
+  unsigned char *saveptr = buffer+1;
+  unsigned char chksum=0;
+
+  // print out d0
+  sprintf((char *)buffer,"$T05%x:%08x;",
+	  0, (int) mainRegisters.tRegs[threadNo].dr[0]);
+
+  buffer +=strlen((char *)buffer);
+
+  // print out a5, a6, a7
+  sprintf((char *)buffer,"%x:%08x;%x:%08x;%x:%08x;",
+	  21, (int) mainRegisters.tRegs[threadNo].ar[5],
+	  22, (int) mainRegisters.tRegs[threadNo].ar[6],
+	  23, (int) mainRegisters.tRegs[threadNo].ar[7]);
+
+  buffer +=strlen((char *)buffer);
+
+  // print out rosr pc
+  sprintf((char *)buffer,"%x:%08x;%x:%08x;%x:%08x;%x:%08x;%x:%08x;",
+	  30, (int) mainRegisters.tRegs[threadNo].rosr,
+	  34, (int) mainRegisters.tRegs[threadNo].threadPc,
+	  45, (int) mainRegisters.globals.mt_active,
+	  47, (int) mainRegisters.globals.mt_dbg_active,
+	  48, (int) mainRegisters.globals.mt_en);
+
+  buffer += strlen((char *) buffer);
+
+  // print the thread number also
+  sprintf((char *) buffer, "thread:%x;", threadNo+1);
+  buffer += strlen((char *)buffer);
+
+  /* compute the check sum */
+
+  while(saveptr < buffer)
+    chksum += *saveptr++;
+
+  buffer[0] = '#';
+  buffer[1]= tohex( (chksum>>4) & 0x0f );
+  buffer[2]= tohex( chksum & 0x0f );
+  buffer[3] = 0;
+}
+
+int
+createTpacketMP(unsigned char *buffer, unsigned int threadNo)
+{
+  // Retrieve d0, a5-a7, rosr, pc, mt_active, dbg_active, mt_enable
+  // We will need these to construct a T packet
+  int ret = gdbMainGetTPacketRegs((int) threadNo, &mainRegisters);
+  unsigned int *iptr = (unsigned int *)buffer;
+
+  if(ret)
+    {
+      printf("error: Could not retrieve registers for thread %d\n", threadNo);
+      return ret;
+    }
+
+  /* load d0, a5-a7, rosr, pc, mt_active, dbg_active, mt_enable into the buffer */
+  *iptr++ = mainRegisters.tRegs[threadNo].dr[0];
+  *iptr++ = mainRegisters.tRegs[threadNo].ar[5];
+  *iptr++ = mainRegisters.tRegs[threadNo].ar[6];
+  *iptr++ = mainRegisters.tRegs[threadNo].ar[7];
+  *iptr++ = mainRegisters.tRegs[threadNo].rosr;
+  *iptr++ = mainRegisters.tRegs[threadNo].threadPc;
+  *iptr++ = mainRegisters.globals.mt_active;
+  *iptr++ = mainRegisters.globals.mt_dbg_active;
+  *iptr++ = mainRegisters.globals.mt_en;
+  return ret;
+}
+
+int
+createGpacket(unsigned char *buffer, unsigned int cpuType)
+{
+  int ret;
+  extern int createGpacketMP(unsigned char *buffer);
+
+  // Create G packet for MP
+  ret = createGpacketMP(buffer);
+  return ret;
+}
+
+int
+createGpacketMP(unsigned char *buffer)
+{
+  unsigned char chksum=0;
+  unsigned char *saveptr = buffer+1;
+  int i, ret;
+  extern unsigned int  mt_active, mt_dbg_active, mt_en, mt_sched, mt_pri;
+
+  *buffer++ = '$';
+  ret= gdbMainGetallRegs((int) currentThread, &mainRegisters);
+
+  if(ret)
+    return ret;
+
+  // print out d0-d15
+  for(i=0; i<16; i++)
+    {
+      sprintf((char *)buffer,"%08x",
+	      (int) mainRegisters.tRegs[currentThread].dr[i]);
+
+      buffer +=strlen((char *)buffer);
+    }
+
+  // print out a0-a7
+  for(i=0; i< 8; i++)
+    {
+      sprintf((char *)buffer,"%08x",
+	      (int) mainRegisters.tRegs[currentThread].ar[i]);
+
+      buffer +=strlen((char *)buffer);
+    }
+
+  // print out rosr pc
+  sprintf((char *)buffer,"%08x%08x%08x%08x%08x%08x%08x%08x%08x%08x%08x",
+	  (int) mainRegisters.tRegs[currentThread].mac_hi,
+	  (int) mainRegisters.tRegs[currentThread].mac_lo,
+	  (int) mainRegisters.tRegs[currentThread].mac_rc16,
+	  (int) mainRegisters.tRegs[currentThread].source3,
+	  (int) mainRegisters.tRegs[currentThread].inst_cnt,
+	  (int) mainRegisters.tRegs[currentThread].csr,
+	  (int) mainRegisters.tRegs[currentThread].rosr,
+	  (int) mainRegisters.tRegs[currentThread].iread_data,
+	  (int) mainRegisters.tRegs[currentThread].int_mask0,
+	  (int) mainRegisters.tRegs[currentThread].int_mask1,
+	  (int) mainRegisters.tRegs[currentThread].threadPc);
+
+  buffer += strlen((char *) buffer);
+
+  sprintf((char *) buffer,"%08x%08x%08x%08x%08x%08x%08x%08x%08x%08x",
+	  (int) mainRegisters.globals.chip_id,
+	  (int) mainRegisters.globals.int_stat0,
+	  (int) mainRegisters.globals.int_stat1,
+	  (int) mainRegisters.globals.int_set0,
+	  (int) mainRegisters.globals.int_set1,
+	  (int) mainRegisters.globals.int_clr0,
+	  (int) mainRegisters.globals.int_clr1,
+	  (int) mainRegisters.globals.global_ctrl,
+	  (int) mainRegisters.globals.mt_active_set,
+	  (int) mainRegisters.globals.mt_active_clr);
+
+  buffer += strlen((char *) buffer);
+
+  sprintf((char *) buffer,"%08x%08x%08x%08x%08x%08x%08x%08x%08x%08x",
+	  (int) mainRegisters.globals.mt_active,
+	  (int) mainRegisters.globals.mt_dbg_active_set,
+	  (int) mainRegisters.globals.mt_dbg_active,
+	  (int) mainRegisters.globals.mt_en,
+	  (int) mainRegisters.globals.mt_hpri,
+	  (int) mainRegisters.globals.mt_hrt,
+	  (int) mainRegisters.globals.mt_break_clr,
+	  (int) mainRegisters.globals.mt_break,
+	  (int) mainRegisters.globals.mt_single_step,
+	  (int) mainRegisters.globals.mt_min_delay_en);
+
+  buffer += strlen((char *) buffer);
+
+  sprintf((char *) buffer,"%08x%08x%08x%08x%08x%08x%08x%08x%08x%08x",
+	  (int) mainRegisters.globals.mt_debug_active_clr,
+	  (int) mainRegisters.globals.perr_addr,
+	  (int) mainRegisters.globals.dcapt_tnum,
+	  (int) mainRegisters.globals.dcapt_pc,
+	  (int) mainRegisters.globals.dcapt,
+	  (int) mainRegisters.globals.scratchpad0,
+	  (int) mainRegisters.globals.scratchpad1,
+	  (int) mainRegisters.globals.scratchpad2,
+	  (int) mainRegisters.globals.scratchpad3,
+	  0);
+
+  buffer += strlen((char *) buffer);
+
+  /* compute the check sum */
+
+  while(saveptr < buffer)
+    chksum += *saveptr++;
+
+  buffer[0] = '#';
+  buffer[1]= tohex( (chksum>>4) & 0x0f );
+  buffer[2]= tohex( chksum & 0x0f );
+  buffer[3] = 0;
+
+  // Update some of our internal copies
+
+  mt_active = (int) mainRegisters.globals.mt_active;
+  mt_dbg_active = (int) mainRegisters.globals.mt_dbg_active;
+  mt_en = (int) mainRegisters.globals.mt_en;
+  mt_pri = (int) mainRegisters.globals.mt_hpri;
+  mt_sched = (int) mainRegisters.globals.mt_hrt;
+
+  return ret;
+}
+
+int
+waitForBP(bpReason_t *reason)
+{
+  int data;
+  int ret, count;
+  struct ubicom32command_packet packet;
+  struct ubicom32command *command;
+  unsigned int reply;
+
+#if DEBUG
+  printf("WBP\n");
+#endif
+
+  // call readStatus to get the state of the Mail Box fifos
+  ret = readStatus(&data);
+  if(ret)
+    {
+      /* some thing crapped out. Issue a reset and return control back to gdb */
+      ret = ubicom32isp_reset();
+      return 1;
+    }
+
+  if(data & M_BOX_OUT_Q_EMPTY)
+    {
+      // Mailbox queue is empty. Return 0 as there is nothing to read
+      return 0;
+    }
+
+  // There is data to be read. Go get it
+
+  ubicom32command_packet_init(&packet);
+
+  // Go read the data from the mailbox
+  count = ubicom32command_packet_append(&packet, READ_CHECK, ISD_READ_MAIL_BOX, 0);
+
+  /* Ship the packet down for execution */
+  ret = ubicom32command_packet_send(&packet);
+  if(ret)
+    return -1;
+
+  command = &packet.commands[0];
+
+  reply = (command->operand0<<24) | (command->operand1<<16) |
+    (command->operand2<<8) | command->operand3;
+
+  if(reply == BREAKPOINT_HIT)
+    {
+      // got the break point, retrieve the thread No from the mailbox
+      ubicom32command_packet_init(&packet);
+      count = ubicom32command_packet_append(&packet, READ_CHECK, ISD_READ_MAIL_BOX, 0);
+
+      /* Ship the packet down for execution */
+      ret = ubicom32command_packet_send(&packet);
+      if(ret)
+	return ret;
+
+      reply = (command->operand0<<24) | (command->operand1<<16) |
+	(command->operand2<<8) | command->operand3;
+
+      return (int)(reply+1);
+    }
+  else if(reply == DCAPT_ERROR)
+    {
+
+      // got dcapt error, retrieve the status and pc from the mailbox
+      ubicom32command_packet_init(&packet);
+      count = ubicom32command_packet_append(&packet, READ_CHECK, ISD_READ_MAIL_BOX, 0);
+      count = ubicom32command_packet_append(&packet, READ_CHECK, ISD_READ_MAIL_BOX, 0);
+
+      /* Ship the packet down for execution */
+      ret = ubicom32command_packet_send(&packet);
+      if(ret)
+	return ret;
+
+      reply = (command->operand0<<24) | (command->operand1<<16) |
+	(command->operand2<<8) | command->operand3;
+
+      reason->reason = DCAPT_ERROR;
+      reason->addr = reply;
+
+      command++;
+
+      reply = (command->operand0<<24) | (command->operand1<<16) |
+	(command->operand2<<8) | command->operand3;
+
+      reason->status = reply;
+      // We now know the thread No. It is in the status field
+      reply = reason->status & 0x1f;
+
+      return (int)(reply+1);
+    }
+  else if(reply == PARITY_ERROR)
+    {
+      // got a parity error, retrieve the error address from the mailbox
+      ubicom32command_packet_init(&packet);
+      count = ubicom32command_packet_append(&packet, READ_CHECK, ISD_READ_MAIL_BOX, 0);
+
+      /* Ship the packet down for execution */
+      ret = ubicom32command_packet_send(&packet);
+      if(ret)
+	return ret;
+
+      reply = (command->operand0<<24) | (command->operand1<<16) |
+	(command->operand2<<8) | command->operand3;
+
+      reason->reason = PARITY_ERROR;
+      reason->addr = reply;
+      if(debuggerThreadNo!= 0)
+	return (int)(1);
+      else
+	return 2;
+    }
+  else
+    {
+      /* some thing crapped out. Issue a reset and return control back to gdb */
+#if DEBUG
+      printf("WBP reset\n");
+#endif
+      ret = ubicom32isp_reset();
+#if DEBUG
+      printf("WBP reset exit\n");
+#endif
+      return 1;
+
+    }
+  return 0;
+}
+
+int
+getDebuggerThreadNo(void)
+{
+  int ret, count;
+  struct ubicom32command_packet packet;
+  struct ubicom32command *command;
+  unsigned int reply;
+
+  ubicom32command_packet_init(&packet);
+
+  // Issue the command to get debugger thread #
+  count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, (unsigned int)DEBUGGER_THREAD_NO);
+
+  // the command is echoed back. Go get it
+  count = ubicom32command_packet_append(&packet, READ_CHECK, ISD_READ_MAIL_BOX, 0);
+
+  // get the thread #
+  count = ubicom32command_packet_append(&packet, READ_CHECK, ISD_READ_MAIL_BOX, 0);
+
+  /* Ship the packet down for execution */
+  ret = ubicom32command_packet_send(&packet);
+  if(ret)
+    return ret;
+
+  command = &packet.commands[1];
+
+  reply = (command->operand0<<24) | (command->operand1<<16) |
+    (command->operand2<<8) | command->operand3;
+
+  if(reply != DEBUGGER_THREAD_NO_DONE)
+    exit(1);
+
+  command++;
+
+  debuggerThreadNo = (command->operand0<<24) | (command->operand1<<16) |
+    (command->operand2<<8) | command->operand3;
+
+  return 0;
+}
+
+int
+setDebuggerDontDebugMask(unsigned int mask)
+{
+  int ret, count;
+  struct ubicom32command_packet packet;
+  struct ubicom32command *command;
+  unsigned int reply;
+
+  ubicom32command_packet_init(&packet);
+
+  // Issue the command to Set the dont debug mask
+  count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, (unsigned int)DEBUGGER_DONT_DEBUG_MASK);
+
+  // Write out the mask
+  count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, (unsigned int)mask);
+
+  // the command is echoed back. Go get it
+  count = ubicom32command_packet_append(&packet, READ_CHECK, ISD_READ_MAIL_BOX, 0);
+
+  /* Ship the packet down for execution */
+  ret = ubicom32command_packet_send(&packet);
+  if(ret)
+    return ret;
+
+  command = &packet.commands[2];
+
+  reply = (command->operand0<<24) | (command->operand1<<16) |
+    (command->operand2<<8) | command->operand3;
+
+  if(reply != (unsigned int)DEBUGGER_DONT_DEBUG_MASK_DONE)
+    {
+      exit(1);
+    }
+
+  return 0;
+}
+
+int
+getDebuggerStaticBpAddrs(int *data, unsigned int numEntries)
+{
+  int ret, count;
+  unsigned int i;
+  struct ubicom32command_packet packet;
+  struct ubicom32command *command;
+  unsigned int reply;
+
+  ubicom32command_packet_init(&packet);
+
+  // Issue the command to retrieve the Thread Pcs
+  count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, (unsigned int)GET_STATIC_BP_ADDRS);
+
+  /* the command is echoed back. Go get it */
+  count = ubicom32command_packet_append(&packet, READ_CHECK, ISD_READ_MAIL_BOX, 0);
+
+  // now receive the data from target
+  for(i=0; i< numEntries; i++)
+    count = ubicom32command_packet_append(&packet, READ_CHECK, ISD_READ_MAIL_BOX, 0);
+
+  /* Ship the packet down for execution */
+  ret = ubicom32command_packet_send(&packet);
+  if(ret)
+    return ret;
+
+  command = &packet.commands[1];
+
+  reply = (command->operand0<<24) | (command->operand1<<16) |
+    (command->operand2<<8) | command->operand3;
+
+  if(reply != (unsigned int)GET_STATIC_BP_ADDRS)
+    {
+      exit(1);
+    }
+  command++;
+
+  // now receive the data from target
+  for(i=0; i< numEntries; i++, command++)
+    {
+      reply = (command->operand0<<24) | (command->operand1<<16) |
+	(command->operand2<<8) | command->operand3;
+      *data++ = (int)reply;
+    }
+  return 0;
+}
+
+int
+getDebuggerThreadPcs(int *data, unsigned int numEntries)
+{
+  int ret, count;
+  unsigned int i;
+  struct ubicom32command_packet packet;
+  struct ubicom32command *command;
+  unsigned int reply;
+
+  ubicom32command_packet_init(&packet);
+
+  // Issue the command to retrieve the Thread Pcs
+  count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, (unsigned int)GET_THREAD_PCS);
+
+  /* the command is echoed back. Go get it */
+  count = ubicom32command_packet_append(&packet, READ_CHECK, ISD_READ_MAIL_BOX, 0);
+
+  // now receive the data from target
+  for(i=0; i< numEntries; i++)
+    count = ubicom32command_packet_append(&packet, READ_CHECK, ISD_READ_MAIL_BOX, 0);
+
+  /* Ship the packet down for execution */
+  ret = ubicom32command_packet_send(&packet);
+  if(ret)
+    return ret;
+
+  command = &packet.commands[1];
+
+  reply = (command->operand0<<24) | (command->operand1<<16) |
+    (command->operand2<<8) | command->operand3;
+
+  if(reply != (unsigned int)GET_THREAD_PCS_DONE)
+    {
+      exit(1);
+    }
+  command++;
+
+  // now receive the data from target
+  for(i=0; i< numEntries; i++, command++)
+    {
+      reply = (command->operand0<<24) | (command->operand1<<16) |
+	(command->operand2<<8) | command->operand3;
+      *data++ = (int)reply;
+    }
+  return 0;
+}
+
+
+enum threadState
+threadStatus(unsigned int threadNo)
+{
+  unsigned int mask;
+
+  threadNo--;
+  mask = 1<< threadNo;
+
+  if(mt_dbg_active&mask)
+    {
+      return UNCONTROLLED;
+    }
+  else if(!(mt_en & mask))
+    {
+      return DISABLED;
+    }
+  else if (!(mt_active & mask))
+    {
+      return SUSPENDED;
+    }
+  else
+    return OK;
+}
+
+/* This routine only establishes connection to the dongle */
+int
+ubicom32isp_connect(char *remote)
+{
+  struct ubicom32command_packet packet;
+  int ret;
+
+  if(dongle_interface_status())
+    {
+      ubicom32isp_detach();
+      dongle_close();
+    }
+
+  if(dongle_open(remote) == -1)
+    return -1;
+
+  pending_packet = NULL;
+  doubleBuffer = 0;
+
+  /* See if we can control the console interface. */
+  ubicom32command_packet_init_opcode(&packet, ISPISD_OPCODE_UBICOM32COMMAND_DONGLE_STOP_CONSOLE);
+  errorExpected = 1;
+  ret = ubicom32command_packet_send(&packet);
+  errorExpected = 0;
+
+  if(ret == 0)
+    {
+      ubipodControlconsole = 1;
+    }
+  else
+    {
+      ubipodControlconsole = 0;
+      dongle_close();
+
+      if(dongle_open(remote) == -1)
+	return -1;
+    }
+
+  /* Test and see if we are hooked up to a Ubipod dongle. */
+  ubicom32command_packet_init_opcode(&packet, ISPISD_OPCODE_UBICOM32COMMAND_DONGLE_CHECK_UBIPOD);
+  errorExpected = 1;
+  ret = ubicom32command_packet_send(&packet);
+  errorExpected = 0;
+
+  if(ret ==0)
+    {
+      dongleIsUbipod = 1;
+      dongleHasMarsSupport = 1;
+      okToDoubleBuffer = 1;
+
+      /* See if we can control the 2 wire interface. */
+      ubicom32command_packet_init_opcode(&packet, ISPISD_OPCODE_UBICOM32COMMAND_DONGLE_START_2WIRE);
+      errorExpected = 1;
+      ret = ubicom32command_packet_send(&packet);
+      errorExpected = 0;
+
+      if(ret == 0)
+	{
+	  ubipodControl2wire = 1;
+	}
+      else
+	{
+	  ubipodControl2wire = 0;
+	  dongle_close();
+
+	  if(dongle_open(remote) == -1)
+	    return -1;
+	}
+
+      return 0;
+    }
+  else
+    {
+      dongleIsUbipod = 0;
+      dongle_close();
+
+      if(dongle_open(remote) == -1)
+	return -1;
+    }
+
+  ubicom32command_packet_init_opcode(&packet, ISPISD_OPCODE_UBICOM32COMMAND_DONGLE_CHECK_MARS);
+  errorExpected = 1;
+  ret = ubicom32command_packet_send(&packet);
+  errorExpected = 0;
+
+  if(ret ==0)
+    {
+      dongleHasMarsSupport = 1;
+      okToDoubleBuffer = 1;
+      return 0;
+    }
+  else
+    {
+      dongleHasMarsSupport=0;
+      dongle_close();
+
+      if(dongle_open(remote) == -1)
+	return -1;
+    }
+
+  ubicom32command_packet_init_opcode(&packet, ISPISD_OPCODE_UBICOM32COMMAND_DONGLE_CHECK);
+  errorExpected = 1;
+  ret = ubicom32command_packet_send(&packet);
+  errorExpected = 0;
+
+  if(ret ==0) {
+    okToDoubleBuffer = 1;
+  }
+  else
+    {
+      okToDoubleBuffer = 0;
+      dongle_close();
+      if(dongle_open(remote) == -1)
+	return -1;
+    }
+
+  return 0;
+}
+
+int
+ubicom32isp_close(void)
+{
+  if (ubipodControlconsole)
+    {
+      /*
+       * call turnOnconsole after disconnect from dongle in ubicom32isp_close()
+       */
+      int ret = turnOnconsole();
+    }
+
+  return (dongle_close());
+}
+
+/*
+ * This routine will contact the debug kernel and also figure out which thread is the debug thread
+ * By the time this is called the serial connection is alive.
+ */
+int
+ubicom32isp_attach(void)
+{
+  int ret;
+
+  if(dongle_interface_status() == 0)
+    return -3;
+
+  // connect to the debug kernel
+  if((ret = initBackend(1)))
+    return ret;
+
+  // Find the debugger thread number
+  if((ret = getDebuggerThreadNo()))
+    return ret;
+
+  dontDebugMask=(1<<debuggerThreadNo);
+  ret = stopProcessor();
+  return 0;
+}
+
+int
+ubicom32isp_detach(void)
+{
+  cleanupBackend(1);
+
+  return(restartProcessor());
+}
+
+int
+ubicom32isp_reset(void)
+{
+  /* reset the board through the mailbox interface */
+  int ret;
+
+  if(dongle_interface_status() == 0)
+    {
+      printf("No connection to target. Request denied.\n");
+      return -1;
+    }
+
+  /* reinitialize the backend */
+  initBackend(1);
+
+  ret = debugReset();
+
+  /* sleep for .7 s before you attempt a connection */
+  usleep(700000);
+
+#ifdef MORE_ROBUST_RESET
+  unsigned int resBuf[32];
+  unsigned int numEntries;
+  numEntries = 8;
+
+  debugOpen();
+  ret = hw_monitor(0, 1, 0, 0x80000000, 0x80000000, numEntries, resBuf, NULL);
+  while (ret != -6) {
+#ifdef DEBUG
+	  printf("Live threads\n");
+#endif
+	  usleep(1000);
+	  ret = hw_monitor(0, 1, 0, 0x80000000, 0x80000000, numEntries, resBuf, NULL);
+  }
+#endif
+
+  /* reinitialize the backend */
+  initBackend(1);
+
+  // grab the debggerThreadNo
+  (void) getDebuggerThreadNo();
+  dontDebugMask=(1<<debuggerThreadNo);
+  ret = stopProcessor();
+  return 0;
+}
+
+#define UBICOM32_ERASE_BLOCK (128*1024)
+
+int
+eraseVerifyFlash(unsigned int startAddr, unsigned int verifyLength, EraseProgressCallback proc, void *param)
+{
+  int ret, count;
+
+  struct ubicom32command_packet packet;
+  struct ubicom32command *command;
+  unsigned int reply;
+  int commandEchoIndex;
+  int blockLength;
+  int totalLength = verifyLength;
+  int lengthSoFar = 0;
+
+  if(proc)
+    {
+      /* Call the erase progress process and get it initialized */
+      proc(totalLength, lengthSoFar, UBICOM32_ERASE_BLOCK, param);
+    }
+
+  while (verifyLength)
+    {
+      if (verifyLength > UBICOM32_ERASE_BLOCK)
+	blockLength = UBICOM32_ERASE_BLOCK;
+      else
+	blockLength = verifyLength;
+
+      ubicom32command_packet_init(&packet);
+      /* send down the ERASE_FLASH command */
+      count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, ERASE_FLASH);
+
+      /* send down the start address  */
+      count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, startAddr);
+
+      /* Send a verify length */
+      count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, (unsigned int)(blockLength));
+
+      // Ship the packet for processing
+      ret = ubicom32command_packet_send(&packet);
+      if(ret)
+	return ret;
+
+      while(1)
+	{
+	  unsigned int data;
+	  ret = readStatus(&data);
+	  if(ret)
+	    {
+	      /* some thing crapped out. Issue a reset and return control back to gdb */
+	      ret = ubicom32isp_reset();
+	      return 1;
+	    }
+
+	  if(data & M_BOX_OUT_Q_EMPTY)
+	    {
+	      // Mailbox queue is empty. Return 0 as there is nothing to read
+	      continue;
+	    }
+	  else
+	    break;
+	}
+
+      // There is data to be read. Go get it
+      ubicom32command_packet_init(&packet);
+
+
+      // We are expecting and echo of ERASE_VERIFY_DONE and a success/failure indicator
+      count = ubicom32command_packet_append(&packet, READ_CHECK|OPTION_EXTENDED_TIMEOUT, ISD_READ_MAIL_BOX, 0);
+      commandEchoIndex = count;
+
+      // this is for the return status
+      count = ubicom32command_packet_append(&packet, READ_CHECK, ISD_READ_MAIL_BOX, 0);
+
+      // Ship the packet for processing
+      ret = ubicom32command_packet_send(&packet);
+      if(ret)
+	return ret;
+
+      // Test the reply
+      command = &packet.commands[commandEchoIndex];
+
+      reply = (command->operand0<<24) | (command->operand1<<16) |
+	(command->operand2<<8) | command->operand3;
+
+      if(reply != ERASE_FLASH_DONE)
+	{
+	  printf("Reply 0x%x does not match ERASE_FLASH_DONE\n", reply);
+	    return -1;
+	}
+
+      command++;
+      reply = (command->operand0<<24) | (command->operand1<<16) |
+	(command->operand2<<8) | command->operand3;
+
+      if(reply != 0)
+	{
+	  printf("Flash Erase failed at address 0x%x\n", reply);
+	  return -1;
+	}
+
+      startAddr += blockLength;
+      verifyLength -= blockLength;
+      lengthSoFar += blockLength;
+
+      if(proc)
+	{
+	  /* Call the erase progress process to show progress. */
+	  proc(totalLength, lengthSoFar, UBICOM32_ERASE_BLOCK, param);
+	}
+    }
+  return 0;
+}
+
+unsigned int flashMID, flashType, flashSectorSize, flashSize;
+
+int
+getFlashDetails(void)
+{
+  int ret, count;
+
+  struct ubicom32command_packet packet;
+  struct ubicom32command *command;
+  unsigned int reply;
+  int commandEchoIndex;
+
+  ubicom32command_packet_init(&packet);
+  /* send down the GET_FLASH_DETAILS command */
+  count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, GET_FLASH_DETAILS);
+
+  // We are expecting and echo of  GET_FLASH_DETAILS_DONE
+  count = ubicom32command_packet_append(&packet, READ_CHECK, ISD_READ_MAIL_BOX, 0);
+  commandEchoIndex = count;
+
+  // We expect 4 pieces of data after this
+  count = ubicom32command_packet_append(&packet, READ_CHECK, ISD_READ_MAIL_BOX, 0);
+  count = ubicom32command_packet_append(&packet, READ_CHECK, ISD_READ_MAIL_BOX, 0);
+  count = ubicom32command_packet_append(&packet, READ_CHECK, ISD_READ_MAIL_BOX, 0);
+  count = ubicom32command_packet_append(&packet, READ_CHECK, ISD_READ_MAIL_BOX, 0);
+
+  // Ship the packet for processing
+  ret = ubicom32command_packet_send(&packet);
+  if(ret)
+    return ret;
+
+  // Test the reply
+  command = &packet.commands[commandEchoIndex];
+
+  reply = (command->operand0<<24) | (command->operand1<<16) |
+    (command->operand2<<8) | command->operand3;
+
+  if(reply != GET_FLASH_DETAILS_DONE)
+    {
+      printf("Reply 0x%x does not match GET_FLASH_DETAILS_DONE\n", reply);
+      return -1;
+    }
+
+  command++;
+  reply = (command->operand0<<24) | (command->operand1<<16) |
+    (command->operand2<<8) | command->operand3;
+
+  flashMID = reply;
+
+  command++;
+  reply = (command->operand0<<24) | (command->operand1<<16) |
+    (command->operand2<<8) | command->operand3;
+
+  flashType = reply;
+
+  command++;
+  reply = (command->operand0<<24) | (command->operand1<<16) |
+    (command->operand2<<8) | command->operand3;
+
+  flashSectorSize = reply;
+
+  command++;
+  reply = (command->operand0<<24) | (command->operand1<<16) |
+    (command->operand2<<8) | command->operand3;
+
+  flashSize = reply;
+
+#ifdef DEBUG
+  printf("Flash Details :- MID = 0x%x Type 0x%x SectorSize 0x%x Size = 0x%x\n",
+	 flashMID, flashType, flashSectorSize, flashSize);
+#endif
+  return 0;
+}
+
+#if 0
+enum hw_monitor_command {
+  ISD_WR_MME = 0xb,
+  ISD_WR_MEC,
+  ISD_WR_MEP,
+  ISD_WR_MRC,
+  ISD_WR_MOA,
+  ISD_WR_MBRE,
+  ISD_WR_MEM,
+  ISD_RD_MST
+};
+#endif
+
+int
+hw_monitor(unsigned int addr, unsigned int needEvent,
+	   unsigned int triggerEvent, unsigned int eventPattern,
+	   unsigned int eventMask,
+	   unsigned int runCounter, unsigned int *resBuf, char *args)
+{
+  int ret, count;
+  unsigned int stat, numTimes;
+
+  struct ubicom32command_packet packet;
+  struct ubicom32command *command;
+
+  if(dongle_interface_status() == 0)
+    {
+      if(args == NULL)
+	return -3;
+      ubicom32isp_connect(args);
+
+      if(dongle_interface_status() == 0)
+	return -4;
+
+      ret = debugOpen();
+      if(ret)
+	return ret;
+    }
+
+  ubicom32command_packet_init(&packet);
+
+  // Initialize by writing 0 to MME register
+  count = ubicom32command_packet_append(&packet, 0, ISD_WR_MME, 0);
+
+  // Write the Memory Object Address (MOA) register
+  count = ubicom32command_packet_append(&packet, 0, ISD_WR_MOA, addr);
+
+  if(needEvent)
+    {
+      // Write Event Pattern register
+      count = ubicom32command_packet_append(&packet, 0, ISD_WR_MEP, eventPattern);
+
+      // Write the Memory Event Mask register
+      count = ubicom32command_packet_append(&packet, 0, ISD_WR_MEM, eventMask);
+
+      // Write the Memory Event Control register with Event Enable (bit 15) on
+      triggerEvent |= 0x8000;
+    }
+  else
+    triggerEvent = 0;
+
+  //Writeto Memory event Control Register
+  count = ubicom32command_packet_append(&packet, 0, ISD_WR_MEC, triggerEvent);
+
+  // Set the Monitor Run Counter register
+  count = ubicom32command_packet_append(&packet, 0, ISD_WR_MRC, runCounter);
+
+  // Start monitoring by writing a 1 to Monitor Mode Enable
+  count = ubicom32command_packet_append(&packet, 0, ISD_WR_MME, 1);
+
+  // Ship this packet down to get monitoring going
+  // Ship the packet for processing
+  ret = ubicom32command_packet_send(&packet);
+  if(ret)
+    return ret;
+
+  numTimes = 0;
+  while(1)
+    {
+      // Monitor the status
+      ubicom32command_packet_init(&packet);
+
+      // Send down ISD_RD_MST
+      count = ubicom32command_packet_append(&packet, 0, ISD_RD_MST, 0);
+
+      ret = ubicom32command_packet_send(&packet);
+      if(ret)
+	return ret;
+
+      command = &packet.commands[0];
+
+      // extract status
+      stat = (command->operand0<<24) | (command->operand1<<16) | (command->operand2<<8) | command->operand3;
+
+      if(stat &1)
+	break;
+
+      numTimes++;
+      if(numTimes > 2)
+	break;
+    }
+
+  if(numTimes > 2)
+    return -6;
+#ifdef DEBUG
+  printf("status returned = 0x%08x\n", stat);
+#endif
+
+  ubicom32command_packet_init(&packet);
+
+  if(runCounter > 32)
+    runCounter = 32;
+
+
+  for(numTimes=0; numTimes< runCounter; numTimes++)
+    {
+      // send down ISD_WR_MBRE command
+      count = ubicom32command_packet_append(&packet, 0, ISD_WR_MBRE, 0);
+    }
+
+  ret = ubicom32command_packet_send(&packet);
+  if(ret)
+    return ret;
+
+  command = &packet.commands[runCounter-1];
+
+  for(numTimes=0; numTimes< runCounter; numTimes++, command--)
+    {
+      stat = (command->operand0<<24) | (command->operand1<<16) | (command->operand2<<8) | command->operand3;
+
+      *resBuf++ = stat;
+    }
+
+  return 0;
+}
+
+int
+protectBootSector(void)
+{
+  int ret, count;
+  struct ubicom32command_packet packet;
+  struct ubicom32command *command;
+  unsigned int reply;
+
+  ret = initBackendToBootKernel(1);
+  ubicom32command_packet_init(&packet);
+
+  // Issue the command to get debugger thread #
+  count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, (unsigned int)PROTECT_SECTOR);
+
+  // the command is echoed back. Go get it
+  count = ubicom32command_packet_append(&packet, READ_CHECK|OPTION_EXTENDED_TIMEOUT, ISD_READ_MAIL_BOX, 0);
+  count = ubicom32command_packet_append(&packet, READ_CHECK, ISD_READ_MAIL_BOX, 0);
+
+  /* Ship the packet down for execution */
+  ret = ubicom32command_packet_send(&packet);
+  if(ret)
+    return ret;
+
+  command = &packet.commands[1];
+
+  reply = (command->operand0<<24) | (command->operand1<<16) |
+    (command->operand2<<8) | command->operand3;
+
+  if(reply != PROTECT_SECTOR_DONE)
+    exit(1);
+
+  command++;
+
+  reply = (command->operand0<<24) | (command->operand1<<16) |
+    (command->operand2<<8) | command->operand3;
+
+  if(reply)
+    {
+      printf("Protect boot sector failed\n");
+    }
+
+  return 0;
+}
+
+int
+unprotectBootSector(void)
+{
+  int ret, count;
+  struct ubicom32command_packet packet;
+  struct ubicom32command *command;
+  unsigned int reply;
+
+  //ret = initBackendToBootKernel(1);
+  ubicom32command_packet_init(&packet);
+
+  // Issue the command to get debugger thread #
+  count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, (unsigned int)UNPROTECT_SECTOR);
+
+  // the command is echoed back. Go get it
+  count = ubicom32command_packet_append(&packet, READ_CHECK|OPTION_EXTENDED_TIMEOUT, ISD_READ_MAIL_BOX, 0);
+  count = ubicom32command_packet_append(&packet, READ_CHECK, ISD_READ_MAIL_BOX, 0);
+
+  /* Ship the packet down for execution */
+  ret = ubicom32command_packet_send(&packet);
+  if(ret)
+    return ret;
+
+  command = &packet.commands[1];
+
+  reply = (command->operand0<<24) | (command->operand1<<16) |
+    (command->operand2<<8) | command->operand3;
+
+  if(reply != UNPROTECT_SECTOR_DONE)
+    exit(1);
+
+  command++;
+
+  reply = (command->operand0<<24) | (command->operand1<<16) |
+    (command->operand2<<8) | command->operand3;
+
+  if(reply)
+    {
+      printf("Unprotect boot sector failed\n");
+    }
+
+  return 0;
+}
+
+int
+ubicom32_write_bytes (unsigned int address, char *buffer, unsigned int length)
+{
+  // split the transfer into lead, aligned middle and end
+  unsigned truncBytes = (address & 0x3);
+  unsigned truncAddress = address & ~0x3;
+  unsigned int leadBytes, leadAddr, midBytes, midAddr, endBytes, endAddr, leadIndex;
+  unsigned toWriteWords;
+  unsigned char  *sendBuffer;
+  unsigned char *freeBuffer;
+  unsigned char *cptr;
+  unsigned int i;
+  int j, ret;
+  char printbuffer[200];
+
+  leadBytes =0;
+  leadIndex = 0;
+  if(truncBytes)
+    {
+      leadBytes = 4-truncBytes;
+      if(leadBytes > length)
+	leadBytes = length;
+      leadIndex = 3-truncBytes;
+      length -= leadBytes;
+      address = truncAddress + 4;
+    }
+
+  leadAddr = truncAddress;
+
+  endAddr = address + length;
+  endBytes = endAddr & 0x3;
+  endAddr &= ~0x3;
+
+  midBytes = length - endBytes;
+  midAddr = address;
+
+  toWriteWords = midBytes/4;
+
+  if(leadBytes)
+    toWriteWords++;
+
+  if(endBytes)
+    toWriteWords++;
+
+  /* Allocate the send buffer */
+  sendBuffer = (unsigned char *)malloc(toWriteWords*4);
+  freeBuffer = sendBuffer;
+  cptr = sendBuffer;
+
+  if(leadBytes)
+    {
+      // Misaligned start. Deal with it by first backing up the address to nearest
+      // Go read 4 bytes from the backed up address
+      switch (leadAddr >> 28)
+	{
+	  case 0x0:
+	    // a data section read
+	    ret = readDataMemory(leadAddr, 1, (int *)cptr);
+	    break;
+	  case 0x2:
+	    // flash read => assume neutral write
+	    *(int *)cptr = -1;
+	    break;
+	  case 0x4:
+	    // a pram section read
+	    ret = readPgmMemory(leadAddr, 1, (int *)cptr);
+	    break;
+	  default:
+	    sprintf(printbuffer, "unknown address: 0x%08x\n", leadAddr);
+	    dongle_error(printbuffer);
+	}
+
+      for(i=0; i<leadBytes; i++)
+	{
+	  cptr[leadIndex--] = (unsigned char) *buffer++;
+	}
+
+      // Bump up cptr by 4
+      cptr += 4;
+    }
+
+  // Deal with the midsection if any
+  if(midBytes)
+    {
+      // Move the data into the transfer buffer
+      for(i=0; i< midBytes; i+= 4)
+	{
+	  for(j=0; j< 4; j++)
+	    {
+	      cptr[3-j] = (*buffer++ &0xff);
+	    }
+	  cptr+= 4;
+	}
+    }
+
+  if(endBytes)
+    {
+      // trailing cruft to deal with
+      // Go read 4 bytes from the backed up end address
+      switch (endAddr >> 28)
+	{
+	  case 0x0:
+	    // a data section read
+	    ret = readDataMemory(endAddr, 1, (int *)cptr);
+	    break;
+	  case 0x2:
+	    // flash read => assume neutral write
+	    *(int *)cptr = -1;
+	    break;
+	  case 0x4:
+	    // a pram section read
+	    ret = readPgmMemory(endAddr, 1, (int *)cptr);
+	    break;
+	  default:
+	    sprintf(printbuffer, "unknown address: 0x%08x\n", endAddr);
+	    dongle_error(printbuffer);
+	}
+
+      for(i=0; i< endBytes; i++)
+	{
+	  cptr[3-i] = (unsigned char) *buffer++;
+	}
+    }
+
+  // Send the data to target
+  if(leadAddr < 0x20000000)
+    {
+      // a data section write
+      ret = writeDataMemory(leadAddr, toWriteWords, (int *)sendBuffer);
+    }
+  else
+    {
+      // a code section write
+      ret = writePgmMemory(leadAddr, toWriteWords, (int *)sendBuffer);
+    }
+
+  free (freeBuffer);
+  return (leadBytes + midBytes + endBytes);
+}
+
+int
+common_read_bytes_raw (unsigned int address, char *buffer, unsigned int length)
+{
+  // split the transfer into lead, aligned middle and end
+  unsigned truncBytes = (address & 0x3);
+  unsigned truncAddress = address & ~0x3;
+  unsigned int leadBytes, leadAddr, midBytes, midAddr, endBytes, endAddr, leadIndex;
+  unsigned toReadWords;
+  unsigned char  *recvBuffer;
+  unsigned char *freeBuffer;
+  unsigned char *cptr;
+  unsigned int i;
+  int j, ret;
+
+  leadIndex = 0;
+  if(truncBytes)
+    {
+      leadBytes = 4-truncBytes;
+      if(leadBytes > length)
+	leadBytes = length;
+      leadIndex = 3-truncBytes;
+      length -= leadBytes;
+      address = truncAddress + 4;
+    }
+  else
+    leadBytes =0;
+
+  leadAddr = truncAddress;
+
+  endAddr = address + length;
+  endBytes = endAddr & 0x3;
+  endAddr &= ~0x3;
+
+  midBytes = length - endBytes;
+  midAddr = address;
+
+  toReadWords = midBytes/4;
+
+  if(leadBytes)
+    toReadWords++;
+
+  if(endBytes)
+    toReadWords++;
+
+  /* Allocate the recv buffer */
+  recvBuffer = (unsigned char *)malloc(toReadWords*4);
+  freeBuffer = recvBuffer;
+  cptr = recvBuffer;
+
+  // Read the words from flash
+  ret = readPgmMemory(leadAddr, toReadWords, (int *)recvBuffer);
+
+  // Now Swizzle the data out
+  if(leadBytes)
+    {
+      for(i= 0;i< leadBytes; i++)
+	{
+	  *buffer++ = recvBuffer[leadIndex--];
+	}
+      recvBuffer += 4;
+    }
+
+  if(midBytes)
+    {
+      for(i=0; i< midBytes; i+= 4)
+	{
+	  for(j=0; j< 4; j++)
+	    {
+	      *buffer++ = recvBuffer[3-j];
+	    }
+	  recvBuffer += 4;
+	}
+    }
+
+  if(endBytes)
+    {
+      for(i=0; i< endBytes; i++)
+	{
+	  *buffer ++ = recvBuffer[3-i];
+	}
+    }
+  recvBuffer += 4;
+  free (freeBuffer);
+
+  return (leadBytes + midBytes + endBytes);
+}
+
+int
+common_verify_bytes (unsigned int address, char *buffer, unsigned int length)
+{
+  // split the transfer into lead, aligned middle and end
+  unsigned truncBytes = (address & 0x3);
+  unsigned truncAddress = address & ~0x3;
+  unsigned int leadBytes, leadAddr, midBytes, midAddr, endBytes, endAddr, leadIndex;
+  unsigned toVerifyWords;
+  unsigned char cptr[4];
+  unsigned int i;
+  int ret;
+
+  leadBytes =0;
+  leadIndex = 0;
+  if(truncBytes)
+    {
+      leadBytes = 4-truncBytes;
+      if(leadBytes > length)
+	leadBytes = length;
+      leadIndex = 3-truncBytes;
+      length -= leadBytes;
+      address = truncAddress + 4;
+    }
+
+  leadAddr = truncAddress;
+
+  endAddr = address + length;
+  endBytes = endAddr & 0x3;
+  endAddr &= ~0x3;
+
+  midBytes = length - endBytes;
+  midAddr = address;
+
+  toVerifyWords = midBytes/4;
+
+  /* Allocate the send buffer */
+  if(leadBytes)
+    {
+      // Misaligned start. Deal with it by first backing up the address to nearest
+      // Go read 4 bytes from the backed up address
+      ret = readPgmMemory(leadAddr, 1, (int *)cptr);
+      for(i=0; i<leadBytes; i++)
+	{
+	  if (cptr[leadIndex--] != (unsigned char) *buffer++)
+	    return -1;
+	}
+    }
+
+  // Deal with the midsection if any
+  if(midBytes)
+    {
+      if (crcPgmMemory(midAddr, toVerifyWords, (int *)buffer) != 0)
+	return -1;
+      buffer += midBytes;
+    }
+
+  if(endBytes)
+    {
+      // trailing cruft to deal with
+      // Go read 4 bytes from the backed up end address
+      ret = readPgmMemory(endAddr, 1, (int *)cptr);
+      for(i=0; i< endBytes; i++)
+	{
+	  if (cptr[3-i] != (unsigned char) *buffer++)
+	    return -1;
+	}
+    }
+
+  return (leadBytes + midBytes + endBytes);
+}
+
+int
+turnOff2wire(void)
+{
+  struct ubicom32command_packet packet;
+  int ret = 0;
+
+  if (ubipodControl2wire)
+    {
+      /* Turn off the 2 wire interface. */
+      ubicom32command_packet_init_opcode(&packet, ISPISD_OPCODE_UBICOM32COMMAND_DONGLE_STOP_2WIRE);
+      ret = ubicom32command_packet_send(&packet);
+    }
+  return ret;
+}
+
+int
+turnOn2wire(void)
+{
+  struct ubicom32command_packet packet;
+  int ret = 0;
+
+  if (ubipodControl2wire)
+    {
+      /* Turn on the 2 wire. */
+      ubicom32command_packet_init_opcode(&packet, ISPISD_OPCODE_UBICOM32COMMAND_DONGLE_START_2WIRE);
+      ret = ubicom32command_packet_send(&packet);
+    }
+  return ret;
+}
+
+int
+turnOffconsole(void)
+{
+
+  struct ubicom32command_packet packet;
+  int ret = 0;
+
+  if (ubipodControlconsole == 0)
+    return ret;
+
+  /* Turn off console interface. */
+  ubicom32command_packet_init_opcode(&packet, ISPISD_OPCODE_UBICOM32COMMAND_DONGLE_STOP_CONSOLE);
+
+  ret = ubicom32command_packet_send(&packet);
+
+  return ret;
+}
+
+int
+turnOnconsole(void)
+{
+  struct ubicom32command_packet packet;
+  int ret = 0;
+
+  if (ubipodControlconsole == 0)
+    return ret;
+
+  /* Turn on console interface. */
+  ubicom32command_packet_init_opcode(&packet, ISPISD_OPCODE_UBICOM32COMMAND_DONGLE_START_CONSOLE);
+
+  ret = ubicom32command_packet_send(&packet);
+  return ret;
+}
--- /dev/null
+++ b/gdb/remote-ubicom32-dbginterface.h
@@ -0,0 +1,325 @@
+/* Target-dependent code for GDB, the GNU debugger.
+
+   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 
+   2009
+   Free Software Foundation, Inc.
+
+   This file is part of GDB.
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.
+*/
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+typedef struct bpReason {
+  unsigned int reason;
+  unsigned int status;		/* Used only for DCAPT error */
+  unsigned int addr;		/* Contains thread pc for DCAPT, memory address for Parity error */
+} bpReason_t;
+
+typedef void (*EraseProgressCallback)(int total_length, int current_length, int block_size, void *param);
+extern int initBackend(unsigned int);
+extern int initBackendToBootKernel(unsigned int cpuType);
+extern int readMailbox(int *data);
+extern int debugClose(void);
+extern int singleStep(unsigned int threadNo);
+extern int stopProcessor(void);
+extern int restartProcessor(void);
+extern int writeRegisters( int threadNo, int regIndex, 
+					 int *inBuf, unsigned int length);
+extern int readRegisters( int threadNo, int regIndex, int *dest, 
+			  unsigned int length);
+extern int createTpacketMP(unsigned char *buffer, unsigned int threadNo);
+extern int createGpacket(unsigned char *buffer, unsigned int cpuType);
+extern int waitForBP(bpReason_t *reason);
+extern int writePgmMemory(unsigned int destAddr, unsigned int len, int *data);
+extern int readPgmMemory(unsigned int destAddr, unsigned int len, int *data);
+extern int readPgmMemoryRaw(unsigned int destAddr, unsigned int len, int *data);
+extern int crcPgmMemory(unsigned int destAddr, unsigned int len, int *data);
+extern int writeDataMemory(unsigned int destAddr, unsigned int len, int *data);
+extern int writeDataMemory(unsigned int destAddr, unsigned int len, int *data);
+extern int readDataMemory(unsigned int destAddr, unsigned int len, int *data);
+extern int readDataMemoryRaw(unsigned int destAddr, unsigned int len, int *data);
+extern void closeDown(void);
+extern void cleanupBackend(unsigned int cpuType);
+extern int getDebuggerThreadNo(void);
+extern int getFlashDetails(void);
+extern int setDebuggerDontDebugMask(unsigned int mask);
+extern void printTPacketMP(unsigned char *buffer, unsigned int threadNo);
+extern int getDebuggerStaticBpAddrs(int *data, unsigned int numEntries);
+extern int getDebuggerThreadPcs(int *data, unsigned int numEntries);
+extern enum threadState threadStatus(unsigned int threadNo);
+extern int ubicom32isp_connect(char *remote);
+extern int ubicom32isp_close(void);
+extern int ubicom32isp_detach(void);
+extern int ubicom32isp_attach(void);
+extern int ubicom32isp_attach(void);
+extern int ubicom32isp_reset(void);
+extern int compareVersion(unsigned char maj, unsigned char min, unsigned char st, 
+			  unsigned char inc, unsigned int unk);
+extern int debugOpen(void);
+extern int jumpToPc(unsigned int addr);
+extern int setupForDownload(void);
+extern void retrieve_pending_packet(void);
+
+extern int ubicom32_write_bytes (unsigned int address, char *buffer, unsigned int length);
+extern int common_read_bytes_raw (unsigned int address, char *buffer, unsigned int length);
+extern int common_verify_bytes (unsigned int address, char *buffer, unsigned int length);
+typedef struct ubicom32MainPerThreadRegs {
+  int dr[16];		// Data registers
+  int ar[8];		// Address registers
+  int mac_hi;
+  int mac_lo;
+  int mac_rc16;
+  int source3;
+  int inst_cnt;
+  int csr;
+  int rosr;
+  int iread_data;
+  int int_mask0;
+  int int_mask1;
+  int threadPc  ;
+}ubicom32MainPerThreadRegs_t;
+
+typedef struct ubicom32MainGlobalRegs {
+  int chip_id;			// Read Only
+  int int_stat0;		// Read Only
+  int int_stat1;		// Read Only
+  int int_set0;			// Write Only
+  int int_set1;			// Write Only
+  int int_clr0;			// Write Only
+  int int_clr1;			// Write Only
+  int global_ctrl;		// RW
+  int mt_active_set;		// Write Only
+  int mt_active_clr;		// Write Only
+  int mt_active;		// Read Only
+  int mt_dbg_active_set;	// Write Only
+  int mt_dbg_active;		// Read Only
+  int mt_en;			// RW
+  int mt_hpri;			// RW
+  int mt_hrt;			// RW
+  int mt_break_clr;		// Write Only
+  int mt_break;			// Read Only
+  int mt_single_step;		// RW
+  int mt_min_delay_en;		// RW
+  int mt_debug_active_clr;	// Write Only
+  int perr_addr;		// RW
+  int dcapt_tnum;		// Read Only
+  int dcapt_pc;			// Read Only
+  int dcapt;			// RW
+  int scratchpad0;		// RW
+  int scratchpad1;		// RW
+  int scratchpad2;		// RW
+  int scratchpad3;		// RW
+} ubicom32MainGlobalRegs_t;
+
+typedef struct mercuryMainRegs {
+  ubicom32MainPerThreadRegs_t tRegs[8];
+  ubicom32MainGlobalRegs_t globals;
+  unsigned int globalsRead;
+  unsigned int perThreadRead[8];
+} mercuryMainRegs_t;
+
+extern mercuryMainRegs_t mainRegisters;
+
+typedef struct ubicom32v3PerThreadRegs {
+  int dr[16];		// Data registers
+  int ar[8];		// Address registers
+  int mac_hi;
+  int mac_lo;
+  int mac_rc16;
+  int source3;
+  int inst_cnt;
+  int csr;
+  int rosr;
+  int iread_data;
+  int int_mask0;
+  int int_mask1;
+  int threadPc;
+  int trap_cause;
+  int acc1_hi;
+  int acc1_lo;
+  int previous_pc;
+}ubicom32v3PerThreadRegs_t;
+
+#define NUM_PER_THREAD_REGS_UBI32V3 sizeof(ubicom32v3PerThreadRegs_t)/sizeof(int)
+
+typedef struct ubicom32v3GlobalRegs {
+  int chip_id;			// 39 Read Only
+  int int_stat0;		// 40 Read Only
+  int int_stat1;		// 41 Read Only
+  int int_set0;			// 42 Write Only
+  int int_set1;			// 43 Write Only
+  int int_clr0;			// 44 Write Only
+  int int_clr1;			// 45 Write Only
+  int global_ctrl;		// 46 RW
+  int mt_active;		// 47 Read Only
+  int mt_active_set;		// 48 Write Only
+  int mt_active_clr;		// 49 Write Only
+  int mt_dbg_active;		// 50 Read Only
+  int mt_dbg_active_set;	// 51 Write Only
+  int mt_en;			// 52 RW
+  int mt_hpri;			// 53 RW
+  int mt_hrt;			// 54 RW
+  int mt_break;			// 55 Read Only
+  int mt_break_clr;		// 56 Write Only
+  int mt_single_step;		// 57 RW
+  int mt_min_delay_en;		// 58 RW
+  int mt_break_set;		// 59 Write only
+  int dcapt;			// 60 RW
+  int mt_debug_active_clr;	// 61 Write Only
+  int scratchpad0;		// 62 RW
+  int scratchpad1;		// 63 RW
+  int scratchpad2;		// 64 RW
+  int scratchpad3;		// 65 RW
+  int chip_cfg;			// 66 RW
+  int mt_i_blocked;		// 67 RO
+  int mt_d_blocked;		// 68 RO
+  int mt_i_blocked_set;		// 69 WO
+  int mt_d_blocked_set;		// 70 WO
+  int mt_blocked_clr;		// 71 WO
+  int mt_trap_en;		// 72 RW
+  int mt_trap;			// 73 RO
+  int mt_trap_set;		// 74 WO
+  int mt_trap_clr;		// 75 WO
+  int i_range0_hi;		// 76 RW
+  int i_range1_hi;		// 77 RW
+  int i_range2_hi;		// RW
+  int i_range0_lo;		// RW
+  int i_range1_lo;		// RW
+  int i_range2_lo;		// RW
+  int i_range0_en;		// RW
+  int i_range1_en;		// RW
+  int i_range2_en;		// RW
+  int d_range0_hi;		// RW
+  int d_range1_hi;		// RW
+  int d_range2_hi;		// RW
+  int d_range3_hi;		// RW
+  int d_range0_lo;		// RW
+  int d_range1_lo;		// RW
+  int d_range2_lo;		// RW
+  int d_range3_lo;		// RW
+  int d_range0_en;		// RW
+  int d_range1_en;		// RW
+  int d_range2_en;		// RW
+  int d_range3_en;		// 96 RW
+} ubicom32v3GlobalRegs_t;
+
+#define NUM_GLOBAL_REGS_UBI32V3 sizeof(ubicom32v3GlobalRegs_t)/sizeof(int)
+
+typedef struct ubicom32v3Regs {
+  ubicom32v3PerThreadRegs_t tRegs[12];
+  ubicom32v3GlobalRegs_t globals;
+  unsigned int globalsRead;
+  unsigned int perThreadRead[12];
+} ubicom32v3Regs_t;
+
+extern ubicom32v3Regs_t ubicom32v3Registers;
+
+typedef struct ubicom32v4GlobalRegs {
+  int chip_id;			// 39 Read Only
+  int int_stat0;		// 40 Read Only
+  int int_stat1;		// 41 Read Only
+  int int_set0;			// 42 Write Only
+  int int_set1;			// 43 Write Only
+  int int_clr0;			// 44 Write Only
+  int int_clr1;			// 45 Write Only
+  int global_ctrl;		// 46 RW
+  int mt_active;		// 47 Read Only
+  int mt_active_set;		// 48 Write Only
+  int mt_active_clr;		// 49 Write Only
+  int mt_dbg_active;		// 50 Read Only
+  int mt_dbg_active_set;	// 51 Write Only
+  int mt_en;			// 52 RW
+  int mt_hpri;			// 53 RW
+  int mt_hrt;			// 54 RW
+  int mt_break;			// 55 Read Only
+  int mt_break_clr;		// 56 Write Only
+  int mt_single_step;		// 57 RW
+  int mt_min_delay_en;		// 58 RW
+  int mt_break_set;		// 59 Write only
+  int dcapt;			// 60 RW
+  int mt_debug_active_clr;	// 61 Write Only
+  int scratchpad0;		// 62 RW
+  int scratchpad1;		// 63 RW
+  int scratchpad2;		// 64 RW
+  int scratchpad3;		// 65 RW
+  int chip_cfg;			// 66 RW
+  int mt_i_blocked;		// 67 RO
+  int mt_d_blocked;		// 68 RO
+  int mt_i_blocked_set;		// 69 WO
+  int mt_d_blocked_set;		// 70 WO
+  int mt_blocked_clr;		// 71 WO
+  int mt_trap_en;		// 72 RW
+  int mt_trap;			// 73 RO
+  int mt_trap_set;		// 74 WO
+  int mt_trap_clr;		// 75 WO
+  int i_range0_hi;		// 76 RW
+  int i_range1_hi;		// 77 RW
+  int i_range2_hi;		// RW
+  int i_range3_hi;		// RW
+  int i_range0_lo;		// 80 RW
+  int i_range1_lo;		// RW
+  int i_range2_lo;		// RW
+  int i_range3_lo;		// RW
+  int i_range0_en;		// 84 RW
+  int i_range1_en;		// RW
+  int i_range2_en;		// RW
+  int i_range3_en;		// RW
+  int d_range0_hi;		// 88 RW
+  int d_range1_hi;		// RW
+  int d_range2_hi;		// RW
+  int d_range3_hi;		// RW
+  int d_range4_hi;		// RW
+  int d_range0_lo;		// 93 RW
+  int d_range1_lo;		// RW
+  int d_range2_lo;		// RW
+  int d_range3_lo;		// RW
+  int d_range4_lo;		// RW
+  int d_range0_en;		// 98 RW
+  int d_range1_en;		// RW
+  int d_range2_en;		// RW
+  int d_range3_en;		// RW
+  int d_range4_en;		// 102 RW
+} ubicom32v4GlobalRegs_t;
+
+#define NUM_GLOBAL_REGS_UBI32V4 sizeof(ubicom32v4GlobalRegs_t)/sizeof(int)
+
+typedef struct ubicom32v4Regs {
+  ubicom32v3PerThreadRegs_t tRegs[12];
+  ubicom32v4GlobalRegs_t globals;
+  unsigned int globalsRead;
+  unsigned int perThreadRead[12];
+} ubicom32v4Regs_t;
+
+extern ubicom32v4Regs_t ubicom32v4Registers;
+
+
+
+extern int gdbMainGetallRegs(unsigned int threadNo, mercuryMainRegs_t *mainRegs);
+extern int gdbMainGetTPacketRegs(int threadNo, mercuryMainRegs_t *mainRegs);
+extern int eraseVerifyFlash(unsigned int startAddr, unsigned int verifyLength, EraseProgressCallback proc, void *param);
+
+extern int hw_monitor(unsigned int addr, unsigned int needEvent,
+		      unsigned int triggerEvent, unsigned int eventPattern, 
+		      unsigned int eventMask,
+		      unsigned int runCounter, unsigned int *resBuf, char *args);
+
+extern int protectBootSector(void);
+extern int unprotectBootSector(void);
+extern unsigned int flashMID, flashType, flashSectorSize, flashSize;
+#ifdef __cplusplus
+}
+#endif
--- /dev/null
+++ b/gdb/remote-ubicom32-isd.c
@@ -0,0 +1,4329 @@
+/* Remote target communications for serial-line targets in custom GDB protocol
+
+   Copyright 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996,
+   1997, 1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.
+
+   This file is part of GDB.
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 2 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program; if not, write to the Free Software
+   Foundation, Inc., 59 Temple Place - Suite 330,
+   Boston, MA 02111-1307, USA.  */
+
+/* See the GDB User Guide for details of the GDB remote protocol. */
+
+#include "defs.h"
+#include "gdb_string.h"
+#include <ctype.h>
+#include <fcntl.h>
+#include "inferior.h"
+#include "bfd.h"
+#include "symfile.h"
+#include "target.h"
+/*#include "terminal.h" */
+#include "gdbcmd.h"
+#include "objfiles.h"
+#include "gdb-stabs.h"
+#include "gdbthread.h"
+#include "remote.h"
+#include "regcache.h"
+#include "value.h"
+#include "gdb_assert.h"
+
+#include <ctype.h>
+#include <sys/time.h>
+#ifdef USG
+#include <sys/types.h>
+#endif
+
+#include "event-loop.h"
+#include "event-top.h"
+#include "inf-loop.h"
+
+#include <signal.h>
+#include "serial.h"
+
+#include "gdbcore.h" /* for exec_bfd */
+#include "remote-ubicom32-isd.h"
+#include "remote-ubicom32-dbginterface.h"
+#include "ubicom32-tdep.h"
+
+volatile int ubicom32_cntrl_c_abort;
+unsigned ubicom32_current_thread= 1;
+unsigned int currentThread=0;
+unsigned int debuggerThreadNo=0;
+unsigned int dontDebugMask=0;	// Threads that we will not debug
+extern unsigned int flashMID, flashType, flashSectorSize, flashSize;
+
+enum ubicom32_state {
+  UBICOM32_RUNNING,
+  UBICOM32_STOPPED,
+  UBICOM32_DETACHED,
+  UBICOM32_STEPPING,
+  UBICOM32_STEPPING_PROBLEMS,
+  UBICOM32_DCAPT_ERROR,
+  UBICOM32_PARITY_ERROR,
+  UBICOM32_STEP_INTERPRET_JMP,
+  UBICOM32_STEP_INTERPRET_CALL,
+  UBICOM32_STEP_INTERPRET_CALLI,
+  UBICOM32_STEP_INTERPRET_REST
+};
+
+enum ubicom32_state remote_ubicom32_state = UBICOM32_DETACHED;
+
+struct step_interpret {
+  unsigned int current_pc;
+  unsigned int target1_pc;
+  unsigned int target2_pc;
+  unsigned int address_register;
+  unsigned int stepping_thread;
+};
+
+struct step_interpret stepinterpret;
+extern unsigned int single_step_buffer_address;
+//extern int ubicom32_write_bytes (unsigned int address, char *buffer, int length);
+
+/* GDB structure.  */
+struct target_ops ubicom32_ops;
+struct target_ops ubicom32_core_ops;
+
+#define UBICOM32_FLASH_ADDR 0x20000000
+#define UBICOM32_FLASH_END	0x2ffffffc
+#define UBICOM32_LOAD_BLOCK_SIZE 1024*2
+
+#define UBICOM32_PRAM_ADDR 0x40000000
+#define UBICOM32_PRAM_END  0x4003fffc
+
+#define UBICOM32_FLASH_SECTION 1
+#define UBICOM32_PRAM_SECTION 2
+
+#define REGISTER_RAW_SIZE(x)  (4)
+
+
+/* This global variable is set to 3023 for mercury or it is set to 5133 for mars */
+unsigned int debugging_processor;
+
+/* ubicom32_loadable_section.  */
+static int
+ubicom32_loadable_section(bfd *loadfile_bfd, asection *s)
+{
+  long addr, length;
+
+  if (!(s->flags & SEC_LOAD))
+    return 0;
+
+  length = bfd_get_section_size (s);
+  if (length == 0)
+    return 0;
+
+  if ((s->lma >= UBICOM32_FLASH_ADDR) && (s->lma + length <= UBICOM32_FLASH_END))
+    return UBICOM32_FLASH_SECTION;
+  if ((s->lma >= UBICOM32_PRAM_ADDR) && (s->lma + length <= UBICOM32_PRAM_END))
+    return UBICOM32_PRAM_SECTION;
+  return 0;
+}
+
+/* ubicom32_lookup_symbol.  */
+static unsigned int
+ubicom32_lookup_symbol (char *name)
+{
+  struct symbol *sym;
+  struct minimal_symbol *msym;
+
+  sym = lookup_symbol (name, NULL, VAR_DOMAIN, NULL, NULL);
+  if (sym)
+    return SYMBOL_VALUE (sym);
+
+  msym = lookup_minimal_symbol (name, NULL, NULL);
+  if (msym)
+    return SYMBOL_VALUE (msym);
+
+  return 0;
+}
+
+
+static void
+swizzle_for_write_register (int regnum, const void *val)
+{
+  int i, j;
+  char * value = (char *)malloc(REGISTER_RAW_SIZE (regnum));
+  char *ptr = (char *)val;
+
+  for(i= (REGISTER_RAW_SIZE (regnum)) -1, j=0;i >= 0; i--)
+    {
+      value[j++] = ptr[i];
+    }
+
+  /* copy the data back into the buffer */
+  for(i= (REGISTER_RAW_SIZE (regnum)) -1, j=0;i >= 0; i--)
+    {
+      ptr[i] = value[i];
+    }
+
+  free(value);
+}
+
+
+static void
+swizzled_supply_register (struct regcache *regcache, int regnum, const void *val)
+{
+  int i, j;
+  char * value = (char *)malloc(REGISTER_RAW_SIZE (regnum));
+  char *ptr = (char *)val;
+
+  for(i= (REGISTER_RAW_SIZE (regnum)) -1, j=0;i >= 0; i--)
+    {
+      value[j++] = ptr[i];
+    }
+
+  regcache_raw_supply(regcache, regnum, (const void *)value);
+  free(value);
+}
+
+void
+toggleMtEn(void)
+{
+  int i;
+  int ret;
+  CORE_ADDR pc;
+
+  for(i=0; i< 8; i++)
+    {
+      int threadMask = 1 << i;
+
+      if(i == debuggerThreadNo)
+	continue;
+
+      if(mainRegisters.globals.mt_en & threadMask)
+	{
+	  /* this is an enabled thread. Read its pc */
+	  if(mainRegisters.perThreadRead[i])
+	    pc = mainRegisters.tRegs[i].threadPc;
+	  else
+	    {
+	      /* call the lowlevel routines to pull up the pc */
+	      ret = readRegisters(i, 34,(void *) &pc, 1);
+	    }
+
+	  /* if the pc is in the flash then toggle the enable bit */
+	  if(0x20000000< pc && pc < 0x20000000 + flashSize)
+	    {
+	      /* We have to toggle the mt_en bit to off */
+	      mainRegisters.globals.mt_en &= ~threadMask;
+
+	      ret = writeRegisters(i, 48,
+				   &mainRegisters.globals.mt_en, 1);
+
+	      /* turn mt_en for this thread back to on */
+	      mainRegisters.globals.mt_en |= threadMask;
+
+	      ret = writeRegisters(i, 48,
+				   &mainRegisters.globals.mt_en, 1);
+	    }
+	}
+    }
+}
+
+static void
+set_thread (int th)
+{
+  unsigned int thread_num;
+
+  thread_num = th;
+
+  if(th > 0)
+    {
+      ubicom32_current_thread = thread_num;
+      currentThread = ubicom32_current_thread -1;
+    }
+}
+
+static int
+ubicom32_thread_alive (ptid_t ptid)
+{
+  return (1);
+}
+
+#define MAGIC_NULL_PID 42000
+
+/* ubicom32_open
+   Usage: target remote <ip_addr>:<ip_port>
+   Connects to the dongle and then connects to target through the dongle.  */
+static void
+ubicom32_open (char *args, int from_tty)
+{
+  int ret, i;
+  struct gdbarch_info info;
+  extern void gdbarch_info_init (struct gdbarch_info *info);
+  char *env_dongle;
+
+  ubicom32_current_thread = 1;
+  if (remote_debug)
+    {
+      if (args)
+	printf_filtered ("ubicom32_open (%s)\n", args);
+      else
+	printf_filtered ("ubicom32_open ()\n");
+    }
+
+  target_preopen (from_tty);
+
+  //printf("Current arch is %s\n", TARGET_ARCHITECTURE->printable_name);
+
+  /* Default device.  */
+  if (!args)
+    {
+      env_dongle = getenv("UBICOM_DONGLE");
+      if (env_dongle)
+	args = env_dongle;
+      else
+	args = "localhost:5010";
+    }
+
+  /* Connect to dongle.  */
+  if (ubicom32isp_connect (args) != 0)
+    error ("Unable to find dongle.");
+
+  /*
+   * Turn off the 2 wire interface if possible.
+   */
+  ret = turnOff2wire();
+
+
+  /* Attach to target.  */
+  ret = ubicom32isp_attach ();
+  if(ret)
+    {
+      (void)ubicom32isp_close();
+      remote_ubicom32_state = UBICOM32_DETACHED;
+      switch(ret)
+	{
+	case -1:
+	  error("Error in reply packets from dongle\n");
+	  break;
+	case -2:
+	  error("Unable to establish ISD connection\n");
+	  break;
+	case -3:
+	  error("Can't attach to debug kernel\n");
+	  break;
+	case -4:
+	  {
+	    extern void ubicom32v3_open(char *, int);
+	    ubicom32v3_open(args, from_tty);
+	    return;
+	  }
+	  break;
+	default:
+	  error("Unable to connect to target\n");
+	  break;
+	}
+    }
+
+  if (current_gdbarch == NULL)
+    {
+      gdbarch_info_init (&info);
+      info.bfd_arch_info = bfd_scan_arch ("ubicom32");
+
+      if (info.bfd_arch_info == NULL)
+	internal_error (__FILE__, __LINE__,
+			"set_architecture: bfd_scan_arch failed");
+      (void)gdbarch_update_p (info);
+    }
+  else
+    {
+      struct gdbarch_tdep *tdep = gdbarch_tdep(current_gdbarch);
+      const char *arch_string = tdep->name;
+      if (strcmp(arch_string, "Ubicom32 Version 2"))
+	{
+	  /* Architecture mismatch. We need to go find the "ubicom32dsp" arch. */
+	  gdbarch_info_init (&info);
+	  info.bfd_arch_info = bfd_scan_arch ("ubicom32");
+
+	  if (info.bfd_arch_info == NULL)
+	    internal_error (__FILE__, __LINE__,
+			    "set_architecture: bfd_scan_arch failed");
+	  (void)gdbarch_update_p (info);
+	}
+    }
+
+  push_target (&ubicom32_ops);		/* Switch to using remote target now */
+
+  remote_ubicom32_state = UBICOM32_STOPPED;
+  inferior_ptid = pid_to_ptid (ubicom32_current_thread);
+  start_remote(from_tty);
+  //inferior_ptid = pid_to_ptid (1);
+
+  /* add the threads to the system */
+  for(i=1; i<= 8; i++)
+    add_thread(pid_to_ptid(i));
+
+  set_thread(currentThread +1);
+}
+
+struct ubicom32_core_memory {
+  unsigned int data_size;
+  unsigned char *data_mem;
+  unsigned int pram_size;
+  unsigned char *pram_mem;
+  unsigned int sdram_size;
+  unsigned char *sdram_mem;
+  unsigned int flash_size;
+  unsigned char *flash_mem;
+  unsigned char *hrts;
+} ubicom32_core;
+
+
+/* ubicom32_close.  */
+static void
+ubicom32_core_close (int quitting)
+{
+  if (remote_debug)
+    printf_filtered ("ubicom32_core_close (%d)\n", quitting);
+
+  /* Disconnect.  */
+  if(ubicom32_core.data_mem)
+    free(ubicom32_core.data_mem);
+  ubicom32_core.data_size = 0;
+  ubicom32_core.data_mem = NULL;
+
+  if(ubicom32_core.pram_mem)
+    free(ubicom32_core.pram_mem);
+  ubicom32_core.pram_size = 0;
+  ubicom32_core.pram_mem = NULL;
+
+  if(ubicom32_core.sdram_mem)
+    free(ubicom32_core.sdram_mem);
+  ubicom32_core.sdram_size = 0;
+  ubicom32_core.sdram_mem = NULL;
+
+  if(ubicom32_core.flash_mem)
+    free(ubicom32_core.flash_mem);
+  ubicom32_core.flash_size = 0;
+  ubicom32_core.flash_mem = NULL;
+
+  if(ubicom32_core.hrts)
+    free(ubicom32_core.hrts);
+  ubicom32_core.hrts = NULL;
+
+  remote_ubicom32_state = UBICOM32_DETACHED;
+}
+
+
+/* ubicom32_fetch_register.  */
+static void
+ubicom32_fetch_register (struct regcache *regcache, int regno)
+{
+  int i, ret;
+  int thread_num = PIDGET (inferior_ptid);
+  int perThreadRegs = sizeof(ubicom32MainPerThreadRegs_t)/4;
+
+  int *rptr = (int *)&mainRegisters.tRegs[thread_num-1];
+  set_thread (thread_num);
+
+  /* grab main processor registers */
+  ret = gdbMainGetallRegs((thread_num-1), &mainRegisters);
+  if(ret)
+    {
+      printf_unfiltered("error: Main processor fetch registers for thread %d failed\n", thread_num-1);
+    }
+
+  if(ret)
+    return;
+
+  /* we are supplying main processor registers */
+  /* first supply the thread specific registers */
+  for(i=0; i< perThreadRegs; i++)
+    swizzled_supply_register(regcache, i, rptr++);
+
+  /* Now supply the global registers */
+  perThreadRegs += (sizeof(ubicom32MainGlobalRegs_t)/4);
+  rptr = (int *)&mainRegisters.globals;
+  for(;i< perThreadRegs; i++)
+    swizzled_supply_register(regcache, i, rptr++);
+}
+
+struct ubicom32_core_header {
+  unsigned int magic;
+  unsigned int regOffset;
+  unsigned int hrtOffset;
+  unsigned int dataOffset;
+  unsigned int pramOffset;
+  unsigned int sdramOffset;
+  unsigned int flashOffset;
+};
+
+
+/* ubicom32_core_open
+   Usage: ubicom32-elf-gdb elf-filename core-fliename. */
+static void
+ubicom32_core_open (char *args, int from_tty)
+{
+  int ret, i;
+  FILE *fp;
+  struct ubicom32_core_header coreHeader;
+  char *file;
+  bfd *loadfile_bfd;
+  int registerSize;
+  asection *s;
+  CORE_ADDR dyn_begin;
+  unsigned int dyn_length;
+
+  struct gdbarch_info info;
+  extern void gdbarch_info_init (struct gdbarch_info *info);
+
+  ubicom32_current_thread = 1;
+  if (remote_debug)
+    {
+      if (args)
+	printf_filtered ("ubicom32_core_open (%s)\n", args);
+      else
+	printf_filtered ("ubicom32_core_open ()\n");
+    }
+
+  target_preopen (from_tty);
+
+  remote_ubicom32_state = UBICOM32_DETACHED;
+
+  /* Open and read in the core file. */
+  fp = fopen(args, "rb");
+
+  if(fp == NULL)
+    {
+      printf_unfiltered("Unable to open core file %s\n", args);
+      return;
+    }
+
+  /* go retreive the core header from the file */
+  (void) fread(&coreHeader, 1, sizeof(coreHeader), fp);
+
+  if(coreHeader.magic != 0x1234aa55)
+    {
+      /*
+       * If it is a 5k corefile let the 5k functions deal with it and we are done.
+       */
+
+      if(coreHeader.magic == 0x123455aa || coreHeader.magic == 0x123455ab)
+	{
+	  extern void ubicom32v3_core_open(char *args, int from_tty);
+
+	  fclose(fp);
+	  /*
+	   * 5k core file the the 5k code deal with it.
+	   */
+	  ubicom32v3_core_open(args, from_tty);
+	  return;
+	}
+      printf_unfiltered("%s is not a Ubicom core file. Incorrect magic number.\n", args);
+      fclose(fp);
+      return;
+    }
+
+  printf_unfiltered("Reading machine state from %s\n", args);
+
+  /* read in the debuggerThreadNo */
+  (void) fread(&debuggerThreadNo, 1, 4, fp);
+
+  /* read in the flashSecorSize */
+  (void) fread(&flashSectorSize, 1, 4, fp);
+
+  /* read in the flashSize */
+  (void) fread(&flashSize, 1, 4, fp);
+
+  /* go retrieve the flash contents from the bfd file */
+  file = get_exec_file(1);
+
+  loadfile_bfd = bfd_openr (file, gnutarget);
+
+  if (loadfile_bfd == NULL)
+    error ("Error: Unable to open file %s\n", file);
+
+  if (!bfd_check_format (loadfile_bfd, bfd_object))
+    {
+      bfd_close (loadfile_bfd);
+      error ("Error: File is not an object file\n");
+    }
+
+  /* malloc space for flash in the core representation */
+  ubicom32_core.flash_size = flashSize;
+  ubicom32_core.flash_mem = malloc(ubicom32_core.flash_size);
+  if(ubicom32_core.flash_mem == NULL)
+    {
+      printf_unfiltered("Could not allocate space to represent flash\n");
+      ubicom32_core_close(1);
+      return;
+    }
+
+  for (s = loadfile_bfd->sections; s; s = s->next)
+    {
+      if (ubicom32_loadable_section (loadfile_bfd, s) != UBICOM32_FLASH_SECTION)
+	continue;
+      else
+	{
+	  long length = bfd_get_section_size (s);
+	  long addr = s->lma;
+	  addr -= 0x20000000;
+	  bfd_get_section_contents (loadfile_bfd, s, &ubicom32_core.flash_mem[addr], 0, length);
+	}
+    }
+
+  /* read in size of the register area */
+  (void) fread(&registerSize, 1, 4, fp);
+
+  /* read in register data from the core */
+  (void) fread(&mainRegisters, 1, sizeof(mainRegisters), fp);
+
+  /* malloc space for hrts and read in the data */
+  ubicom32_core.hrts = malloc(512);
+  if(ubicom32_core.hrts == NULL)
+    {
+      printf_unfiltered("Could not allocate space to represent hrts\n");
+      ubicom32_core_close(1);
+      return;
+    }
+
+  /* read in hrt data */
+  (void) fread(ubicom32_core.hrts, 1, 512, fp);
+
+  /*read data memory size */
+  (void) fread(&ubicom32_core.data_size, 1, 4, fp);
+
+  /* malloc space for it */
+  ubicom32_core.data_mem = malloc(ubicom32_core.data_size);
+  if(ubicom32_core.data_mem == NULL)
+    {
+      printf_unfiltered("Could not allocate space to represent data memory\n");
+      ubicom32_core_close(1);
+      return;
+    }
+
+  /*read data memory */
+  (void) fread(ubicom32_core.data_mem, 1, ubicom32_core.data_size, fp);
+
+  /*read pram memory size */
+  (void) fread(&ubicom32_core.pram_size, 1, 4, fp);
+
+  /* malloc space for it */
+  ubicom32_core.pram_mem = malloc(ubicom32_core.pram_size);
+  if(ubicom32_core.pram_mem == NULL)
+    {
+      printf_unfiltered("Could not allocate space to represent pram memory\n");
+      ubicom32_core_close(1);
+      return;
+    }
+
+  /*read pram memory */
+  (void) fread(ubicom32_core.pram_mem, 1, ubicom32_core.pram_size, fp);
+
+  /*read sdram memory size */
+  (void) fread(&ubicom32_core.sdram_size, 1, 4, fp);
+
+  /* malloc space for it */
+  ubicom32_core.sdram_mem = malloc(ubicom32_core.sdram_size);
+  if(ubicom32_core.sdram_mem == NULL)
+    {
+      printf_unfiltered("Could not allocate space to represent sdram memory\n");
+      ubicom32_core_close(1);
+      return;
+    }
+
+  /*read sdram memory */
+  (void) fread(ubicom32_core.sdram_mem, 1, ubicom32_core.sdram_size, fp);
+
+  /* reload the dynamic_non_volatile_block */
+  /* read the dynamic block begin address */
+  (void) fread(&dyn_begin, 1, 4, fp);
+
+  /* read in the dynamic block length */
+  (void) fread(&dyn_length, 1, 4, fp);
+
+  /*read int the block */
+  dyn_begin -= 0x20000000;
+
+  (void)fread(&ubicom32_core.flash_mem[dyn_begin], 1, dyn_length, fp);
+
+  fclose(fp);
+
+  if (current_gdbarch == NULL)
+    {
+      gdbarch_info_init (&info);
+      info.bfd_arch_info = bfd_scan_arch ("ubicom32");
+
+      if (info.bfd_arch_info == NULL)
+	internal_error (__FILE__, __LINE__,
+			"set_architecture: bfd_scan_arch failed");
+      (void)gdbarch_update_p (info);
+    }
+  else
+    {
+      struct gdbarch_tdep *tdep = gdbarch_tdep(current_gdbarch);
+      char *arch_string = (char *)tdep->name;
+      if (strcmp(arch_string, "Ubicom32 Version 2"))
+	{
+	  /* Architecture mismatch. We need to go find the "ubicom32dsp" arch. */
+	  gdbarch_info_init (&info);
+	  info.bfd_arch_info = bfd_scan_arch ("ubicom32");
+
+	  if (info.bfd_arch_info == NULL)
+	    internal_error (__FILE__, __LINE__,
+			    "set_architecture: bfd_scan_arch failed");
+	  (void)gdbarch_update_p (info);
+	}
+    }
+
+  push_target (&ubicom32_core_ops);		/* Switch to using remote target now */
+
+  remote_ubicom32_state = UBICOM32_STOPPED;
+  inferior_ptid = pid_to_ptid (ubicom32_current_thread);
+  start_remote(from_tty);
+
+  /* add the threads to the system */
+  currentThread = 0;
+  for(i=1; i<= 8; i++)
+    add_thread(pid_to_ptid(i));
+
+  set_thread(currentThread +1);
+
+#if 0
+  set_thread(1);
+  inferior_ptid = pid_to_ptid (1);
+  ubicom32_fetch_register(0);
+  select_frame(get_current_frame());
+  normal_stop();
+#endif
+}
+
+/* ubicom32_attach */
+static void
+ubicom32_attach (char *args, int from_tty)
+{
+  struct gdbarch_info info;
+  extern void gdbarch_info_init (struct gdbarch_info *info);
+  int ret = ubicom32isp_attach ();
+
+  if(ret)
+    {
+      switch(ret)
+	{
+	case -1:
+	  error("Unable to communicate to dongle. Error in reply packets from dongel\n");
+	  break;
+	case -2:
+	  error("Unable to establish ISD connection\n");
+	  break;
+	case -3:
+	  error("Unable to attach to debug kernel\n");
+	  break;
+	default:
+	  error("Unable to connect to target\n");
+	  break;
+	}
+    }
+  remote_ubicom32_state = UBICOM32_STOPPED;
+  set_thread(currentThread +1);
+
+  if (current_gdbarch == NULL)
+    {
+      info.bfd_arch_info = bfd_scan_arch ("ubicom32");
+
+      if (info.bfd_arch_info == NULL)
+	internal_error (__FILE__, __LINE__,
+			"set_architecture: bfd_scan_arch failed");
+      (void)gdbarch_update_p (info);
+    }
+  else
+    {
+      struct gdbarch_tdep *tdep = gdbarch_tdep(current_gdbarch);
+      char *arch_string = (char *)tdep->name;
+      if (strcmp(arch_string, "Ubicom32 Version 2"))
+	{
+	  /* Architecture mismatch. We need to go find the "ubicom32dsp" arch. */
+	  gdbarch_info_init (&info);
+	  info.bfd_arch_info = bfd_scan_arch ("ubicom32");
+
+	  if (info.bfd_arch_info == NULL)
+	    internal_error (__FILE__, __LINE__,
+			    "set_architecture: bfd_scan_arch failed");
+	  (void)gdbarch_update_p (info);
+	}
+    }
+}
+
+/* ubicom32_core_detach.
+   Detach from core.  */
+static void
+ubicom32_core_detach (char *args, int from_tty)
+{
+  (void) ubicom32_core_close(1);
+  pop_target();
+}
+
+/* ubicom32_detach.
+   Detach from the remote board.  */
+static void
+ubicom32_detach (char *args, int from_tty)
+{
+  int ret;
+  FBlock_t *fBlock = firstFlashBlock;
+
+  if (remote_debug)
+    printf_filtered ("ubicom32_detach\n");
+
+  /* walk down the flash blocks and ship them out */
+  while(fBlock)
+    {
+      if(fBlock->numRemoveBPs|| fBlock->flashState == 0)
+	{
+	  /* Time to ship out this block */
+	  ret = ubicom32WriteFlashBlock(fBlock);
+	}
+
+      fBlock = fBlock->next;
+    }
+
+  fBlock = firstFlashBlock;
+
+  /* walk down the flash block and release everything */
+  while(fBlock)
+    {
+      FBlock_t *next = fBlock->next;
+      /* free the breakpointList */
+      free(fBlock->breakpointList);
+
+      /* free the breakpointRemoveList */
+      free(fBlock->breakpointRemoveList);
+
+      /* free the code block */
+      free(fBlock->code);
+
+      /* free the fBlock itself */
+      free(fBlock);
+
+      fBlock = next;
+    }
+
+  firstFlashBlock = lastFlashBlock = NULL;
+
+  toggleMtEn();
+
+  (void) ubicom32isp_detach();
+  (void) ubicom32isp_close();
+  remote_ubicom32_state = UBICOM32_DETACHED;
+  pop_target();
+
+}
+
+/* ubicom32_close.  */
+static void
+ubicom32_close (int quitting)
+{
+  if(remote_ubicom32_state == UBICOM32_DETACHED)
+    return;
+
+  if (remote_debug)
+    printf_filtered ("ubicom32_close (%d)\n", quitting);
+
+  /* Disconnect.  */
+  (void)ubicom32isp_close();
+  remote_ubicom32_state = UBICOM32_DETACHED;
+}
+
+/* ubicom32_cntrl_c.  */
+static void
+ubicom32_cntrl_c (int signo)
+{
+  ubicom32_cntrl_c_abort = 1;
+}
+
+/* ubicom32_files_info.  */
+static void
+ubicom32_files_info (struct target_ops *target)
+{
+  if (exec_bfd)
+    {
+      char *file = bfd_get_filename (exec_bfd);
+      printf_unfiltered ("Debugging %s\n", file);
+    }
+  else
+    printf_unfiltered ("No file loaded\n");
+}
+
+/* ubicom32_stop.
+   Notify the target of an asynchronous request to stop.  */
+static void
+ubicom32_stop (void)
+{
+  if (remote_debug)
+    printf_filtered ("ubicom32_stop\n");
+
+  ubicom32_cntrl_c_abort = 1;
+}
+
+static char *
+ubicom32_thread_pid_to_str (ptid_t ptid)
+{
+  static char buf[30];
+
+  sprintf (buf, "Thread %d", (PIDGET (ptid))-1);
+  return buf;
+}
+
+static void
+ubicom32_store_register(struct regcache *regcache, int regnum)
+{
+  char *regs = malloc(REGISTER_RAW_SIZE(regnum));
+  int thread_num = PIDGET (inferior_ptid);
+  int ret;
+
+  set_thread(thread_num);
+
+  if(regnum >= 0)
+    {
+      /* pull the data from regcache */
+      regcache_raw_collect (regcache, regnum, regs);
+
+      swizzle_for_write_register (regnum, regs);
+      ret = writeRegisters((thread_num-1), regnum, (int *) regs, 1);
+      if(ret)
+	{
+	  printf_unfiltered("error: Write to register %d in thread %d failed\n",
+			    regnum, thread_num-1);
+	}
+    }
+  else
+    {
+      printf_unfiltered("error: Write of all registers not supported\n");
+    }
+}
+
+/* Prepare to store registers.  Since we may send them all
+   we have to read out the ones we don't want to change
+   first.  */
+
+static void
+ubicom32_prepare_to_store (struct regcache *regcache)
+{
+  int i;
+  gdb_byte buf[MAX_REGISTER_SIZE];
+
+  /* Make sure all the necessary registers are cached.  */
+  for (i = 0; i < gdbarch_num_regs(current_gdbarch); i++)
+    regcache_raw_read (regcache, i, buf);
+}
+
+#if 0
+/* ubicom32_core_wait */
+static ptid_t
+ubicom32_core_wait (ptid_t ptid, struct target_waitstatus *status)
+{
+  return pid_to_ptid (ubicom32_current_thread);
+}
+#endif
+
+/* ubicom32_wait */
+static ptid_t
+ubicom32_wait (ptid_t ptid, struct target_waitstatus *status)
+{
+  unsigned int mpTpacketRegs[10];
+  bpReason_t reason;
+  struct regcache *current_regcache = get_current_regcache ();
+
+  int mask;
+
+  static RETSIGTYPE (*prev_sigint) ();
+  int ret;
+
+  if (remote_debug)
+    printf_filtered ("ubicom32_wait\n");
+
+  status->kind = TARGET_WAITKIND_EXITED;
+  status->value.integer = 0;
+
+  if(remote_ubicom32_state == UBICOM32_STEPPING_PROBLEMS)
+    {
+      /* single stepping was attempted on a suspended thread */
+      status->kind = TARGET_WAITKIND_STOPPED;
+      status->value.sig = TARGET_SIGNAL_STOP;
+      remote_ubicom32_state = UBICOM32_STOPPED;
+      return pid_to_ptid (ubicom32_current_thread);
+    }
+  else if(remote_ubicom32_state == UBICOM32_STOPPED)
+    {
+      /* Things are alread stopped */
+      status->kind = TARGET_WAITKIND_STOPPED;
+      status->value.sig = TARGET_SIGNAL_TRAP;
+      return pid_to_ptid (ubicom32_current_thread);
+    }
+  else if(remote_ubicom32_state == UBICOM32_STEP_INTERPRET_CALL)
+    {
+      /* set the PC to target_pc */
+      mask = 1 << currentThread;
+      writeRegisters(stepinterpret.stepping_thread, 34,
+		     &stepinterpret.target1_pc, 1);
+
+      stepinterpret.current_pc += 4;
+      writeRegisters(stepinterpret.stepping_thread, (16 + stepinterpret.address_register),
+		     &stepinterpret.current_pc, 1);
+
+      ret = createTpacketMP((unsigned char *)mpTpacketRegs, ubicom32_current_thread-1);
+
+      if(ret)
+	{
+	  printf_unfiltered("error: Could not retrieve registers after stopping the processor\n");
+	  signal (SIGINT, prev_sigint);
+	  return null_ptid;
+	}
+
+      swizzled_supply_register(current_regcache, 0, &mainRegisters.tRegs[currentThread].dr[0]);
+      swizzled_supply_register(current_regcache, 21, &mainRegisters.tRegs[currentThread].ar[5]);
+      swizzled_supply_register(current_regcache, 22, &mainRegisters.tRegs[currentThread].ar[6]);
+      swizzled_supply_register(current_regcache, 23, &mainRegisters.tRegs[currentThread].ar[7]);
+      swizzled_supply_register(current_regcache, 30, &mainRegisters.tRegs[currentThread].rosr);
+      swizzled_supply_register(current_regcache, 34, &mainRegisters.tRegs[currentThread].threadPc);
+      swizzled_supply_register(current_regcache, 45, &mainRegisters.globals.mt_active);
+      swizzled_supply_register(current_regcache, 47, &mainRegisters.globals.mt_dbg_active);
+      swizzled_supply_register(current_regcache, 48, &mainRegisters.globals.mt_en);
+
+      /* We have to toggle the mt_en bit to off */
+      mainRegisters.globals.mt_en &= ~mask;
+
+      ret = writeRegisters(currentThread, 48,
+			   &mainRegisters.globals.mt_en, 1);
+
+      /* turn mt_en for this thread back to on */
+      mainRegisters.globals.mt_en |= mask;
+
+      ret = writeRegisters(currentThread, 48,
+			   &mainRegisters.globals.mt_en, 1);
+
+      status->kind = TARGET_WAITKIND_STOPPED;
+      status->value.sig = TARGET_SIGNAL_TRAP;
+      return pid_to_ptid (ubicom32_current_thread);
+    }
+
+  ubicom32_cntrl_c_abort = 0;
+  prev_sigint = signal (SIGINT, ubicom32_cntrl_c);
+  while (1)
+    {
+      if (ubicom32_cntrl_c_abort)
+	{
+	  ret = stopProcessor();
+	  if(ret)
+	    {
+	      printf_unfiltered("error: Could not stop the processor\n");
+	      signal (SIGINT, prev_sigint);
+	      return null_ptid;
+	    }
+	  reason.reason = BREAKPOINT_HIT;
+	  set_thread(currentThread +1);
+	  break;
+	}
+      else
+	{
+	  /* call waitForBP and see if we get anything */
+	  ret = waitForBP(&reason);
+
+	  if(ret< 0)
+	    {
+	      printf_unfiltered ("error: unable to read status\n");
+	      signal (SIGINT, prev_sigint);
+	      return null_ptid;
+	    }
+	  if(ret == 0)
+	    {
+	      /* wait for 10 ms before trying again */
+	      usleep(10000);
+	      continue;
+	    }
+
+	  set_thread(ret);
+
+	  break;
+	}
+    }
+
+  /* go retrieve the registers for a TPacket */
+  if(ubicom32_current_thread < 33)
+    {
+      int redoTpacket = 1;
+      ret = createTpacketMP((unsigned char *)mpTpacketRegs, ubicom32_current_thread-1);
+
+      if(ret)
+	{
+	  printf_unfiltered("error: Could not retrieve registers after stopping the processor\n");
+	  signal (SIGINT, prev_sigint);
+	  return null_ptid;
+	}
+
+      switch(remote_ubicom32_state)
+	{
+	case UBICOM32_STEP_INTERPRET_JMP:
+	  {
+	    if(mainRegisters.tRegs[currentThread].threadPc ==
+	       single_step_buffer_address + 4)
+	      {
+		/* the real PC is target1_pc */
+		writeRegisters(stepinterpret.stepping_thread, 34, &stepinterpret.target1_pc, 1);
+	      }
+	    else
+	      {
+		/* the real PC is target2_pc */
+		writeRegisters(stepinterpret.stepping_thread, 34, &stepinterpret.target2_pc, 1);
+	      }
+
+	    break;
+	  }
+	case UBICOM32_STEP_INTERPRET_CALLI:
+	  {
+	    /* Need to fix the address register */
+	    stepinterpret.current_pc += 4;
+	    writeRegisters(stepinterpret.stepping_thread, (16 + stepinterpret.address_register),
+			   &stepinterpret.current_pc, 1);
+
+	    break;
+	  }
+	case UBICOM32_STEP_INTERPRET_REST:
+	  {
+	    /* Need to fix the PC */
+	    stepinterpret.current_pc += 4;
+	    writeRegisters(stepinterpret.stepping_thread, 34,
+			   &stepinterpret.current_pc, 1);
+	    break;
+	  }
+	default:
+	  redoTpacket = 0;
+	}
+
+
+      if(redoTpacket)
+	{
+	  mask = 1 <<(ubicom32_current_thread - 1);
+	  ret = createTpacketMP((unsigned char *)mpTpacketRegs, ubicom32_current_thread-1);
+
+	  if(ret)
+	    {
+	      printf_unfiltered("error: Could not retrieve registers after stopping the processor\n");
+	      signal (SIGINT, prev_sigint);
+	      return null_ptid;
+	    }
+
+	  /* We have to toggle the mt_en bit to off */
+	  mainRegisters.globals.mt_en &= ~mask;
+
+	  ret = writeRegisters(ubicom32_current_thread-1, 48,
+			       &mainRegisters.globals.mt_en, 1);
+
+	  /* turn mt_en for this thread back to on */
+	  mainRegisters.globals.mt_en |= mask;
+
+	  ret = writeRegisters(ubicom32_current_thread-1, 48,
+			       &mainRegisters.globals.mt_en, 1);
+	}
+
+      swizzled_supply_register(current_regcache, 0, &mainRegisters.tRegs[currentThread].dr[0]);
+      swizzled_supply_register(current_regcache, 21, &mainRegisters.tRegs[currentThread].ar[5]);
+      swizzled_supply_register(current_regcache, 22, &mainRegisters.tRegs[currentThread].ar[6]);
+      swizzled_supply_register(current_regcache, 23, &mainRegisters.tRegs[currentThread].ar[7]);
+      swizzled_supply_register(current_regcache, 30, &mainRegisters.tRegs[currentThread].rosr);
+      swizzled_supply_register(current_regcache, 34, &mainRegisters.tRegs[currentThread].threadPc);
+      swizzled_supply_register(current_regcache, 45, &mainRegisters.globals.mt_active);
+      swizzled_supply_register(current_regcache, 47, &mainRegisters.globals.mt_dbg_active);
+      swizzled_supply_register(current_regcache, 48, &mainRegisters.globals.mt_en);
+
+      switch(reason.reason)
+	{
+	case DCAPT_ERROR:
+	  {
+	    unsigned tnum = reason.status & 0x1f;
+
+	    printf_unfiltered("DCAPT error in thread %d at address 0x%08x\n", tnum, reason.addr);
+
+	    if (reason.status & (1 << 5)) {
+	      printf_unfiltered("DCAPT cause: write watchpoint triggered\n");
+	    }
+	    else if (reason.status & (1 << 6)) {
+	      printf_unfiltered("DCAPT cause: source 1 out of range\n");
+	    }
+	    else if (reason.status & (1 << 7)) {
+	      printf_unfiltered("DCAPT cause: destination out of range\n");
+	    }
+	    else if (reason.status & (1 << 8)) {
+	      printf_unfiltered("DCAPT cause: source 1 alignment error\n");
+	    }
+	    else if (reason.status & (1 << 9)) {
+	      printf_unfiltered("DCAPT cause: destination alignment error\n");
+	    }
+	    else {
+	      printf_unfiltered("DCAPT cause: unknown error\n");
+	    }
+	    status->kind = TARGET_WAITKIND_STOPPED;
+	    status->value.sig = TARGET_SIGNAL_STOP;
+	    remote_ubicom32_state = UBICOM32_DCAPT_ERROR;
+	  }
+	  break;
+
+	case PARITY_ERROR:
+	  printf_unfiltered("PARITY error at address 0x%08x\n", reason.addr);
+	  status->kind = TARGET_WAITKIND_STOPPED;
+	  status->value.sig = TARGET_SIGNAL_STOP;
+	  remote_ubicom32_state = UBICOM32_PARITY_ERROR;
+	  break;
+
+	default:
+	  status->kind = TARGET_WAITKIND_STOPPED;
+	  status->value.sig = TARGET_SIGNAL_TRAP;
+	  remote_ubicom32_state = UBICOM32_STOPPED;
+	}
+    }
+  signal (SIGINT, prev_sigint);
+
+  return pid_to_ptid (ubicom32_current_thread);
+}
+
+/* Resume execution of the target process.  STEP says whether to single-step
+   or to run free; SIGGNAL is the signal value (e.g. SIGINT) to be given
+   to the target, or zero for no signal.  */
+static void
+ubicom32_resume (ptid_t ptid, int step, enum target_signal siggnal)
+{
+  int thread_num = ptid_get_pid (inferior_ptid);
+  FBlock_t *fBlock = firstFlashBlock;
+  int mask, i;
+  CORE_ADDR pc;
+
+  set_thread(thread_num);
+  thread_num--;
+  mask = 1<< currentThread;
+
+  if (remote_debug)
+    printf_filtered ("ubicom32_resume\n");
+
+  pc = read_pc();
+
+ //inferior_ptid = ptid;
+
+  if (step)
+    {
+      int ret;
+      thread_num = PIDGET (inferior_ptid);
+
+      set_thread(thread_num);
+
+      /* we are single stepping the main processor */
+      if(mainRegisters.globals.mt_dbg_active&mask)
+	{
+	  printf_unfiltered("error: Single Stepping an Uncontrolled thread.\n");
+	  remote_ubicom32_state = UBICOM32_STEPPING_PROBLEMS;
+	}
+      else if(!(mainRegisters.globals.mt_en & mask))
+	{
+	  // Tryingn to single step a Disabled thread
+	  printf_unfiltered("error: Single Stepping a Disabled thread.\n");
+	  remote_ubicom32_state = UBICOM32_STEPPING_PROBLEMS;
+	}
+      else if (!(mainRegisters.globals.mt_active & mask))
+	{
+	  printf_unfiltered("error: Single Stepping a Suspended thread.\n");
+	  remote_ubicom32_state = UBICOM32_STEPPING_PROBLEMS;
+	}
+      if(remote_ubicom32_state == UBICOM32_STEPPING_PROBLEMS)
+	return;
+
+      if(0x20000000 <= pc && pc < 0x20000000 + flashSize)
+	{
+	  /* This is a flash address */
+	  unsigned int blockNo = pc & ~(flashSectorSize-1);
+
+	  while(fBlock)
+	    {
+	      if(fBlock->blockNumber == blockNo)
+		break;
+
+	      fBlock = fBlock->next;
+	    }
+
+	  if(fBlock)
+	    {
+	      unsigned int i;
+	      /* got a hit. Now search the removed BP list */
+	      for(i=0; i< fBlock->numRemoveBPs; i++)
+		if(fBlock->breakpointRemoveList[i] == (unsigned int)pc)
+		  break;
+
+	      if(i < fBlock->numRemoveBPs)
+		{
+		  if(single_step_buffer_address)
+		    {
+		      unsigned char *cptr  =
+			(char *) &fBlock->code[(fBlock->breakpointRemoveList[i] & (flashSectorSize -1))/sizeof(unsigned int)];
+
+		      unsigned int insn = cptr[0] <<24 | cptr[1] << 16 | cptr[2] << 8 | cptr[3];
+
+		      unsigned char base_opcode = (cptr[0] >> 3) & 0x1f;
+		      stepinterpret.current_pc = (unsigned int )pc;
+		      stepinterpret.stepping_thread = currentThread;
+
+		      /* analyze the instruction */
+		      switch(base_opcode)
+			{
+			case 0x1a:
+			  {
+			    /* jump conditionals */
+			    int offset = (insn & 0x1fffff)<<2;
+			    ;
+			    if (insn & 0x00400000)
+			      {
+				/* set up a negative number */
+				offset |= 0xff800000;
+			      }
+			    stepinterpret.target1_pc = stepinterpret.current_pc+4;
+			    stepinterpret.target2_pc = stepinterpret.current_pc+offset;
+			    remote_ubicom32_state = UBICOM32_STEP_INTERPRET_JMP;
+			    break;
+			  }
+			case 0x1b:
+			  {
+			    /* CALL */
+			    int offset = ((int)(cptr[0] & 0x7))<<23 | ((insn & 0x1fffff)<<2);
+			    if(offset & 0x02000000)
+			      {
+				offset |= 0xfc000000;
+			      }
+			    stepinterpret.target1_pc = stepinterpret.current_pc+offset;
+			    stepinterpret.address_register = (cptr[1] >> 5) & 0x7;
+			    remote_ubicom32_state = UBICOM32_STEP_INTERPRET_CALL;
+			    break;
+			  }
+			case 0x1e:
+			  {
+			    /* CALLI */
+			    stepinterpret.target1_pc = 0;
+			    stepinterpret.address_register = (cptr[1] >> 5) & 0x7;
+			    remote_ubicom32_state = UBICOM32_STEP_INTERPRET_CALLI;
+			    break;
+			  }
+			default:
+			  {
+			    /* everything else */
+			    stepinterpret.target1_pc = 0;
+			    stepinterpret.address_register = 0;
+			    remote_ubicom32_state = UBICOM32_STEP_INTERPRET_REST;
+			    break;
+			  }
+			}
+
+		      if(remote_ubicom32_state != UBICOM32_STEP_INTERPRET_CALL)
+			{
+			  /* load the single step buffer with this instruction */
+			  (void) ubicom32_write_bytes(single_step_buffer_address, cptr, 4);
+
+			  /* we have to change this threads pc to point to the single step buffer */
+			  ret = writeRegisters(currentThread, 34,
+					       &single_step_buffer_address, 1);
+
+			  /* We have to toggle the mt_en bit to off */
+			  mainRegisters.globals.mt_en &= ~mask;
+
+			  ret = writeRegisters(thread_num, 48,
+					       &mainRegisters.globals.mt_en, 1);
+
+			  /* turn mt_en for this thread back to on */
+			  mainRegisters.globals.mt_en |= mask;
+
+			  ret = writeRegisters(thread_num, 48,
+					       &mainRegisters.globals.mt_en, 1);
+
+			  /* force the single step */
+			  ret = singleStep(currentThread);
+			}
+		      return;
+		    }
+
+		  /* We have to update the flash so step can happen */
+		  /* Time to ship out this block */
+		  ret = ubicom32WriteFlashBlock(fBlock);
+
+		  fBlock = firstFlashBlock;
+
+		      /* We have to toggle the mt_en bit to off */
+		  mainRegisters.globals.mt_en &= ~mask;
+
+		  ret = writeRegisters(thread_num, 48,
+				       &mainRegisters.globals.mt_en, 1);
+
+		  /* turn mt_en for this thread back to on */
+		  mainRegisters.globals.mt_en |= mask;
+
+		  ret = writeRegisters(thread_num, 48,
+				       &mainRegisters.globals.mt_en, 1);
+		}
+	    }
+	}
+
+      ret = singleStep(currentThread);
+
+      if(remote_ubicom32_state == UBICOM32_STOPPED)
+	remote_ubicom32_state = UBICOM32_STEPPING;
+    }
+  else
+    {
+      /* let everything run */
+      int ret;
+      unsigned int blockNo = pc & ~(flashSectorSize-1);
+
+      /* scan the flash blocks and see if any has to be shipped down */
+      /* walk down the flash blocks and ship them out */
+      while(fBlock)
+	{
+	  /* write out the block */
+	  if(fBlock->numRemoveBPs|| fBlock->flashState == 0)
+	    {
+	      /* Time to ship out this block */
+	      ret = ubicom32WriteFlashBlock(fBlock);
+	    }
+
+	  fBlock = fBlock->next;
+	}
+
+      toggleMtEn();
+
+      ret= restartProcessor();
+      remote_ubicom32_state = UBICOM32_RUNNING;
+    }
+}
+
+
+static int
+ubicom32_read_bytes (CORE_ADDR address, char *buffer, int length)
+{
+  // split the transfer into lead, aligned middle and end
+  unsigned truncBytes = (address & 0x3);
+  unsigned truncAddress = address & ~0x3;
+  unsigned int leadBytes, leadAddr, midBytes, midAddr, endBytes, endAddr, leadIndex;
+  unsigned toReadWords;
+  unsigned char  *recvBuffer;
+  unsigned char *freeBuffer;
+  unsigned char *cptr;
+  int i, j, ret;
+  FBlock_t *fBlock = firstFlashBlock;
+
+  leadIndex = 0;
+  if(truncBytes)
+    {
+      leadBytes = 4-truncBytes;
+      if(leadBytes > length)
+	leadBytes = length;
+      leadIndex = 3-truncBytes;
+      length -= leadBytes;
+      address = truncAddress + 4;
+    }
+  else
+    leadBytes =0;
+
+  leadAddr = truncAddress;
+
+  endAddr = address + length;
+  endBytes = endAddr & 0x3;
+  endAddr &= ~0x3;
+
+  midBytes = length - endBytes;
+  midAddr = address;
+
+  toReadWords = midBytes/4;
+
+  if(leadBytes)
+    toReadWords++;
+
+  if(endBytes)
+    toReadWords++;
+
+  /* Allocate the recv buffer */
+  recvBuffer = (unsigned char *)malloc(toReadWords*4);
+  freeBuffer = recvBuffer;
+  cptr = recvBuffer;
+
+  // Read the words
+  if(leadAddr < 0x20000000 || leadAddr >= 0x60000000)
+    {
+      // a data section read
+      ret = readDataMemory(leadAddr, toReadWords, (int *)recvBuffer);
+    }
+  else
+    {
+      // a code section read
+      ret = readPgmMemory(leadAddr, toReadWords, (int *)recvBuffer);
+    }
+
+  /* walk down the fblocks to see if this data is sitting in the removeBPList */
+  while(fBlock && fBlock->numRemoveBPs)
+    {
+      unsigned int blockStart = leadAddr;
+      unsigned int blockEnd = leadAddr + toReadWords *4;
+      int i;
+
+      for(i=0; i< fBlock->numRemoveBPs; i++)
+	{
+	  if(blockStart <= fBlock->breakpointRemoveList[i] &&
+	     fBlock->breakpointRemoveList[i] < blockEnd)
+	    {
+	      /* This location is in the block and we need to replace it with data from the code block */
+	      unsigned char *opcode =
+		(unsigned char *)&fBlock->code[(fBlock->breakpointRemoveList[i] & (flashSectorSize -1))/sizeof(unsigned int)];
+	      unsigned char *fixLocation =
+		&recvBuffer[fBlock->breakpointRemoveList[i] - leadAddr];
+
+	      fixLocation[0] = opcode[3];
+	      fixLocation[1] = opcode[2];
+	      fixLocation[2] = opcode[1];
+	      fixLocation[3] = opcode[0];
+#if 0
+
+	      memcpy((void *) fixLocation,
+		     (void *) &opcode,
+		     sizeof(unsigned int));
+#endif
+	    }
+	}
+
+      fBlock = fBlock->next;
+    }
+
+  // Now Swizzle the data out
+  if(leadBytes)
+    {
+      for(i= 0;i< leadBytes; i++)
+	{
+	  *buffer++ = recvBuffer[leadIndex--];
+	}
+      recvBuffer += 4;
+    }
+
+  if(midBytes)
+    {
+      for(i=0; i< midBytes; i+= 4)
+	{
+	  for(j=0; j< 4; j++)
+	    {
+	      *buffer++ = recvBuffer[3-j];
+	    }
+	  recvBuffer += 4;
+	}
+    }
+
+  if(endBytes)
+    {
+      for(i=0; i< endBytes; i++)
+	{
+	  *buffer ++ = recvBuffer[3-i];
+	}
+    }
+  recvBuffer += 4;
+  free (freeBuffer);
+
+  return (leadBytes + midBytes + endBytes);
+}
+
+#if 0
+static int
+ubicom32_verify_bytes (CORE_ADDR address, char *buffer, int length)
+{
+  // split the transfer into lead, aligned middle and end
+  unsigned truncBytes = (address & 0x3);
+  unsigned truncAddress = address & ~0x3;
+  unsigned int leadBytes, leadAddr, midBytes, midAddr, endBytes, endAddr, leadIndex;
+  unsigned toVerifyWords;
+  unsigned char cptr[4];
+  int i, j, ret;
+
+  leadBytes =0;
+  leadIndex = 0;
+  if(truncBytes)
+    {
+      leadBytes = 4-truncBytes;
+      if(leadBytes > length)
+	leadBytes = length;
+      leadIndex = 3-truncBytes;
+      length -= leadBytes;
+      address = truncAddress + 4;
+    }
+
+  leadAddr = truncAddress;
+
+  endAddr = address + length;
+  endBytes = endAddr & 0x3;
+  endAddr &= ~0x3;
+
+  midBytes = length - endBytes;
+  midAddr = address;
+
+  toVerifyWords = midBytes/4;
+
+  /* Allocate the send buffer */
+  if(leadBytes)
+    {
+      // Misaligned start. Deal with it by first backing up the address to nearest
+      // Go read 4 bytes from the backed up address
+      switch (leadAddr >> 28)
+	{
+	  case 0x2:
+	    // a pram section read
+	    ret = readPgmMemory(leadAddr, 1, (int *)cptr);
+	    break;
+	  default:
+	    printf_unfiltered("unknown address: 0x%08x\n", leadAddr);
+	}
+
+      for(i=0; i<leadBytes; i++)
+	{
+	  if (cptr[leadIndex--] != (unsigned char) *buffer++)
+	    return -1;
+	}
+    }
+
+  // Deal with the midsection if any
+  if(midBytes)
+    {
+      if (crcPgmMemory(midAddr, toVerifyWords, (int *)buffer) != 0)
+	return -1;
+      buffer += midBytes;
+    }
+
+  if(endBytes)
+    {
+      // trailing cruft to deal with
+      // Go read 4 bytes from the backed up end address
+      switch (endAddr >> 28)
+	{
+	  case 0x2:
+	    ret = readPgmMemory(endAddr, 1, (int *)cptr);
+	    break;
+	  default:
+	    printf_unfiltered("unknown address: 0x%08x\n", endAddr);
+	}
+
+      for(i=0; i< endBytes; i++)
+	{
+	  if (cptr[3-i] != (unsigned char) *buffer++)
+	    return -1;
+	}
+    }
+
+  return (leadBytes + midBytes + endBytes);
+}
+#endif
+
+addrBounds_t bounds[]={
+   {0x800, 0xc00},		/* HRT tables */
+   {0x1000, 0x1400},		/* IO ports */
+   {0x100000, 0x110000},	/* Data Memory */
+   {0x400000, 0x500000},	/* Coprocessor memory */
+   {0x20000000, 0x20400000},	/* Off Chip Flash */
+   {0x40000000, 0x40080000},	/* On board program memory */
+   {0x60000000, 0x61000000},	/* SDRAM */
+};
+
+unsigned int numBoundsEntries = sizeof(bounds)/sizeof(addrBounds_t);
+
+/* ARGSUSED */
+static int
+ubicom32_xfer_memory (CORE_ADDR mem_addr, gdb_byte *buffer, int mem_len,
+		    int should_write, struct mem_attrib *attrib,
+		    struct target_ops *target)
+{
+  CORE_ADDR targ_addr;
+  int targ_len;
+  int res;
+
+  targ_len = mem_len;
+  targ_addr = mem_addr;
+  if (targ_len <= 0)
+    return 0;
+
+  // Check if we got a valid address
+  if(targ_addr >= bounds[numBoundsEntries-1].upper)
+    {
+      // address is too high
+      return 0;
+    }
+
+  for(res =0; res< numBoundsEntries; res++)
+    {
+      // test the very lowest address
+      if(targ_addr < bounds[res].lower)
+	{
+	  // invalid address. The start is in the hole
+	  return (targ_addr - bounds[res].lower);
+	}
+
+      // test if this is a valid address
+      if(targ_addr < bounds[res].upper)
+	{
+	  // Valid range. Do an upper bound check and adjust lenght if needed
+	  if(targ_len+targ_addr > bounds[res].upper)
+	    targ_len = bounds[res].upper - targ_addr;
+
+	  break;
+	}
+    }
+
+  if (should_write)
+    res = ubicom32_write_bytes (targ_addr, buffer, targ_len);
+  else
+    res = ubicom32_read_bytes (targ_addr, buffer, targ_len);
+
+  return res;
+}
+
+/* ARGSUSED */
+static int
+ubicom32_core_xfer_memory (CORE_ADDR mem_addr, gdb_byte *buffer, int mem_len,
+		    int should_write, struct mem_attrib *attrib,
+		    struct target_ops *target)
+{
+  CORE_ADDR targ_addr;
+  int targ_len;
+  int res;
+  char *src = NULL;
+  CORE_ADDR index;
+  int switch_res;;
+
+  targ_addr = mem_addr;
+  targ_len = mem_len;
+
+  if (targ_len <= 0)
+    return 0;
+
+  if(should_write)
+    return 0;
+
+  // Check if we got a valid address
+  if(targ_addr >= bounds[numBoundsEntries-1].upper)
+    {
+      // address is too high
+      return 0;
+    }
+
+  for(res =0; res< numBoundsEntries; res++)
+    {
+      // test the very lowest address
+      if(targ_addr < bounds[res].lower)
+	{
+	  // invalid address. The start is in the hole
+	  return (targ_addr - bounds[res].lower);
+	}
+
+      // test if this is a valid address
+      if(targ_addr < bounds[res].upper)
+	{
+	  // Valid range. Do an upper bound check and adjust lenght if needed
+	  if(targ_len+targ_addr > bounds[res].upper)
+	    targ_len = bounds[res].upper - targ_addr;
+
+	  break;
+	}
+    }
+
+  src = NULL;
+  index = targ_addr -= bounds[res].lower;
+  switch_res = res;
+  res = targ_len;
+
+  switch(switch_res)
+    {
+    case 0:
+      {
+	/* hrts */
+	src = ubicom32_core.hrts;
+	break;
+      }
+    case 1:
+      {
+	/* read to the IO block. We can't do much about it */
+	printf_unfiltered("Core has no information on IO block registers.\n");
+	memset(buffer, 0, targ_len);
+	src = NULL;
+	break;
+      }
+    case 2:
+      {
+	/* Data Memory */
+	src = ubicom32_core.data_mem;
+	break;
+      }
+    case 4:
+      {
+	/* flash memory */
+	src = ubicom32_core.flash_mem;
+	break;
+      }
+    case 5:
+      {
+	/* Pram */
+	src = ubicom32_core.pram_mem;
+	break;
+      }
+    case 6:
+      {
+	/* Sdram */
+	src = ubicom32_core.sdram_mem;
+	break;
+      }
+    default:
+      {
+	printf_unfiltered("Incorrect address block 0x%lx\n", (targ_addr + bounds[res].lower));
+	res = 0;
+      }
+
+    }
+  if(src)
+    {
+      char *ptr = &src[index];
+      memcpy(buffer, ptr, targ_len);
+    }
+  return res;
+}
+
+
+/* ubicom32_flash_info */
+static void
+ubicom32_flash_info (char *args, int from_tty)
+{
+  int ret;
+
+  printf("Flash Details :- MID = 0x%x Type 0x%x SectorSize 0x%x Size = 0x%x\n",
+	 flashMID, flashType, flashSectorSize, flashSize);
+
+}
+
+/* ubicom32_hw_mon */
+static void
+ubicom32_hw_mon (char *args, int from_tty)
+{
+  int ret, i;
+  unsigned int resBuf[32];
+  unsigned int numEntries;
+  numEntries = 16;
+
+  ret = hw_monitor(0, 1, 0, 0x80000000, 0x80000000, numEntries, resBuf, args);
+
+  if(ret == -3)
+    {
+      error("No existing connection.\n Reissue command: hwmon hostname:PORT#\n");
+    }
+  else if(ret == -4)
+    {
+      error("Unable to establish connection to %s\n", args);
+    }
+  else if(ret == -6)
+    {
+      error("Chip appears to be dead. There are no executing threads\n");
+    }
+
+  if(ret)
+    return;
+
+  for(i=0; i< numEntries; i++)
+    {
+      if(debugging_processor == 5133)
+	{
+	  unsigned int pc = ((resBuf[i] &0x00ffffff)<<2);
+	  unsigned int threadNo = (resBuf[i]>>26)&0xf;
+
+	  switch ((resBuf[i] &0x03000000)>>24) {
+	  case 1:
+	    pc |= 0x3c000000;
+	    break;
+	  case 2:
+	    pc |= 0x40000000;
+	    break;
+	  case 3:
+	    pc |= 0x60000000;
+	    break;
+	  }
+
+	  if(resBuf[i] & 0x80000000)
+	    printf("Thread # %d at pc 0x%08x Valid\n", threadNo, pc);
+	  else
+	    printf("Thread # %d at pc 0x%08x Cancelled\n", threadNo, pc);
+	}
+      else
+	{
+	  unsigned int pc = ((resBuf[i] &0x03000000)<<6)|((resBuf[i] &0x00ffffff)<<2);
+	  unsigned int threadNo = (resBuf[i]>>26)&0x7;
+	  if(resBuf[i] & 0x80000000)
+	    printf("Thread # %d at pc 0x%08x Valid\n", threadNo, pc);
+	  else
+	    printf("Thread # %d at pc 0x%08x Cancelled\n", threadNo, pc);
+	}
+    }
+}
+
+unsigned int sample_buffer[1000][2];
+/* ubicom32_hw_mon_sample */
+static void
+ubicom32_hw_mon_sample (char *args, int from_tty)
+{
+  int ret, i;
+  unsigned int numEntries;
+  unsigned int threadNo;
+  unsigned int pc;
+
+  numEntries = 2;
+
+  /* we are going to grab a 1000 samples every 10ms */
+  for(i=0; i< 1000; i++) {
+    debugOpen();
+
+    ret = hw_monitor(0, 1, 0, 0x80000000, 0x80000000, numEntries, sample_buffer[i], args);
+
+    if(ret == -3)
+      {
+	error("No existing connection.\n Reissue command: hwmon hostname:PORT#\n");
+	return;
+      }
+    else if(ret == -4)
+      {
+	error("Unable to establish connection to %s\n", args);
+	return;
+      }
+    else if(ret == -6)
+      {
+	sample_buffer[i][0] = 0xdeadbeef;
+	sample_buffer[i][1] = 0xdeadbeef;
+	//error("Chip appears to be dead. There are no executing threads\n");
+	continue;
+      }
+
+#if 0
+    threadNo = (sample_buffer[i][0]>>26)&0x7;
+    pc = ((sample_buffer[i][0] &0x03000000)<<6)|((sample_buffer[i][0] &0x00ffffff)<<2);
+
+    if(pc ==0 && ((sample_buffer[i][0] & 0x80000000) ==0))
+      i--;
+#endif
+  }
+
+  for(i=0; i< 1000; i++)
+    {
+      if(debugging_processor == 5133)
+	{
+	  pc = ((sample_buffer[i][0] & 0x00ffffff)<<2);
+	  threadNo = (sample_buffer[i][0]>>26)&0xf;
+
+	  switch ((sample_buffer[i][0] &0x03000000)>>24)
+	    {
+	    case 1:
+	      pc |= 0x3c000000;
+	      break;
+	    case 2:
+	      pc |= 0x40000000;
+	      break;
+	    case 3:
+	      pc |= 0x60000000;
+	      break;
+	    }
+	}
+      else
+	{
+	  threadNo = (sample_buffer[i][0]>>26)&0x7;
+	  pc = ((sample_buffer[i][0] &0x03000000)<<6)|((sample_buffer[i][0] &0x00ffffff)<<2);
+	}
+
+      if(sample_buffer[i][0] == 0xdeadbeef) {
+	printf("Sample #%d Dead threads\n", i);
+	continue;
+      } else if(sample_buffer[i][0] & 0x80000000)
+	printf("Thread # %d at pc 0x%08x Valid\n", threadNo, pc);
+      else
+	printf("Thread # %d at pc 0x%08x Cancelled\n", threadNo, pc);
+
+      if(debugging_processor == 5133)
+	{
+	  pc = ((sample_buffer[i][1] &0x00ffffff)<<2);
+	  threadNo = (sample_buffer[i][1]>>26)&0xf;
+
+	  switch ((sample_buffer[i][1] &0x03000000)>>24)
+	    {
+	    case 1:
+	      pc |= 0x3c000000;
+	      break;
+	    case 2:
+	      pc |= 0x40000000;
+	      break;
+	    case 3:
+	      pc |= 0x60000000;
+	      break;
+	    }
+	}
+      else
+	{
+	  threadNo = (sample_buffer[i][1]>>26)&0x7;
+	  pc = ((sample_buffer[i][1] &0x03000000)<<6)|((sample_buffer[i][1] &0x00ffffff)<<2);
+	}
+
+      if(sample_buffer[i][1] & 0x80000000)
+	  printf("Thread # %d at pc 0x%08x Valid\n", threadNo, pc);
+      else
+	printf("Thread # %d at pc 0x%08x Cancelled\n", threadNo, pc);
+
+    }
+}
+
+/* ubicom32_reset.  */
+static void
+ubicom32_reset (char *args, int from_tty)
+{
+  int ret;
+  if (remote_debug)
+    printf_filtered ("ubicom32_reset\n");
+
+  reinit_frame_cache();
+  registers_changed();
+  ret = ubicom32isp_reset();
+
+  set_thread(1);
+  inferior_ptid = pid_to_ptid (1);
+  ubicom32_fetch_register(get_current_regcache(), 0);
+  select_frame(get_current_frame());
+  normal_stop();
+}
+
+/* common reset */
+void
+common_reset(char *args, int from_tty)
+{
+  struct gdbarch_tdep *tdep = gdbarch_tdep(current_gdbarch);
+  char *arch_string = (char *)tdep->name;
+  if (!strcmp(arch_string, "Ubicom32 Version 2"))
+    {
+      ubicom32_reset(args, from_tty);
+    }
+  else if (!strcmp(arch_string, "Ubicom32 Version 3") || !strcmp(arch_string, "Ubicom32 Version 4"))
+    {
+      if(debugging_processor == 5133)
+	{
+	  extern void ubicom32v3_reset(char *args, int from_tty);
+	  ubicom32v3_reset(args, from_tty);
+	  return;
+	}
+    }
+  else if(!strcmp(arch_string, "Ubicom32 POSIX"))
+    {
+      extern void ubicom32_posix_reset(char *args, int from_tty);
+      ubicom32_posix_reset(args, from_tty);
+      return;
+    }
+}
+
+
+/* ubicom32_core_kill.  */
+static void
+ubicom32_core_kill (void)
+{
+  if (remote_debug)
+      printf_filtered ("ubicom32_core_kill\n");
+
+  inferior_ptid = null_ptid;
+
+  /* Detach from target.  */
+  ubicom32_core_detach (NULL, 0);
+}
+
+/* ubicom32_kill.  */
+static void
+ubicom32_kill (void)
+{
+  if (remote_debug)
+      printf_filtered ("ubicom32_kill\n");
+
+  inferior_ptid = null_ptid;
+
+  /* Detach from target.  */
+  ubicom32_detach (NULL, 0);
+}
+
+/* ubicom32_show_load_progress_default.  */
+static void
+ubicom32_show_load_progress_default (const char *section,
+			    unsigned int section_sent,
+			    unsigned int section_size,
+			    unsigned int total_sent,
+			    unsigned int total_size)
+{
+  static int progress;
+  int current;
+
+  if (total_sent == 0)
+    progress = 0;
+
+  current = (int)((float)total_sent / (float)total_size * (float)80);
+  while (progress < current)
+    {
+      putchar_unfiltered ('.');
+      gdb_flush (gdb_stdout);
+      progress ++;
+    }
+
+  if (total_sent == total_size)
+    {
+      putchar_unfiltered ('\n');
+      gdb_flush (gdb_stdout);
+    }
+}
+
+void
+ubicom32_erase_progress_callback(int total_length, int current_length, int block_size, void *param)
+{
+  int current;
+  static int progress = 0;
+
+  if(current_length == 0)
+    {
+      progress = 0;
+      return;
+    }
+
+  current = (int)((float)current_length/(float)total_length*(float)80);
+  while(progress < current)
+    {
+      printf(".");
+      fflush(stdout);
+      progress++;
+    }
+
+  if(current_length == total_length)
+    printf("\n");
+}
+
+/* ubicom32_load.  */
+static void
+ubicom32_load (char *file, int from_tty)
+{
+  bfd *loadfile_bfd;
+  asection *s;
+  long total_length = 0;
+  long progress = 0;
+  long addr, length, offs, size;
+  unsigned char *data, *protect, *foundK;
+  unsigned int last_address = 0;
+  unsigned int first_address = 0xffffffff;
+  int ret;
+  unsigned protectStart, protectEnd;
+  extern unsigned char dkmajor, dkminro, dkstate, dkincrement;
+  extern unsigned int dkunique;
+
+  int changedProtect = 0;
+  int dontLoadProtect = 1;
+  int hasProtect = 0;
+  int hasDebugKernel = 0;
+  int useNewDownloadMethod = 0;
+  unsigned int reply;
+  extern int whoareyou(unsigned int *reply);
+
+  FBlock_t *fBlock = firstFlashBlock;
+
+  /* walk down the flash block and release everything */
+  while(fBlock)
+    {
+      FBlock_t *next = fBlock->next;
+      /* free the breakpointList */
+      free(fBlock->breakpointList);
+
+      /* free the breakpointRemoveList */
+      free(fBlock->breakpointRemoveList);
+
+      /* free the code block */
+      free(fBlock->code);
+
+      /* free the fBlock itself */
+      free(fBlock);
+
+      fBlock = next;
+    }
+
+  firstFlashBlock = lastFlashBlock = NULL;
+
+  /* Force the bootkernel to run */
+  ret = initBackendToBootKernel(1);
+
+  size = UBICOM32_LOAD_BLOCK_SIZE;
+  data = malloc(size*2);
+  if (!data)
+    {
+      printf_unfiltered ("error: unable to allocate memory for write\n");
+      return;
+    }
+
+  if (remote_debug)
+    printf_filtered ("ubicom32_load: %s (tty=%d)\n", file, from_tty);
+
+  /* Open the file.  */
+  loadfile_bfd = bfd_openr (file, gnutarget);
+  if (loadfile_bfd == NULL)
+    error ("Error: Unable to open file %s\n", file);
+
+  if (!bfd_check_format (loadfile_bfd, bfd_object))
+    {
+      bfd_close (loadfile_bfd);
+      error ("Error: File is not an object file\n");
+    }
+
+  protectStart = UBICOM32_FLASH_ADDR;
+  protectEnd = protectStart + flashSectorSize;
+
+  /* see if we can use the new download mechanism. */
+  if((dkmajor >2) || ((dkmajor == 2) && (dkunique >= 5)))
+    {
+      /*
+       * Scan through the sections looking for the .downloder section. We better find it
+       * because without it we are not going to be able to download any code to the board.
+       */
+      for (s = loadfile_bfd->sections; s; s = s->next)
+	{
+	  unsigned char buf[4];
+	  CORE_ADDR length;
+	  int sec;
+	  unsigned int section_last_address;
+	  size_t len;
+
+	  if(strcmp(s->name, ".downloader"))
+	    {
+	      continue;
+	    }
+
+	  useNewDownloadMethod = 1;
+	  break;
+	}
+
+      if(useNewDownloadMethod ) {
+	/* If we got here then download the .downloader section to the board. */
+	size = UBICOM32_LOAD_BLOCK_SIZE;
+
+	length = bfd_get_section_size (s);
+	offs = 0;
+	while(length)
+	  {
+	    int transfer, readtransfer;
+	    long myaddr;
+	    char *mydata;
+	    char *verifybuf = &data[size];
+
+	    if(size > length)
+	      size = length;
+
+	    /* read in the data size bytes at a time from the section */
+	    bfd_get_section_contents (loadfile_bfd, s, data, offs, size);
+
+	    addr = s->vma + offs;
+
+	    myaddr = addr;
+	    mydata = data;
+
+	    transfer = ubicom32_write_bytes(myaddr, mydata, size);
+	    /* read the data and verify */
+	    readtransfer= ubicom32_read_bytes(addr, verifybuf, transfer);
+	    if (memcmp (data, verifybuf, transfer) != 0)
+	      {
+		printf_unfiltered ("error: verify: data does not match!\n");
+		printf_unfiltered ("Data in block starting at 0x%lx length %d\n",
+				   addr, transfer);
+		free (data);
+		return ;
+	      }
+
+	    offs += transfer;
+	    length -= transfer;
+	  }
+
+	/* now transfer control to the .downloader section */
+	ret = jumpToPc(s->vma);
+	if(ret)
+	  {
+	    /* Jump to PC failed */
+	    printf_unfiltered("Failed to revector the debugger thread to 0x%lx.\n", s->vma);
+	    free(data);
+	    return;
+	  }
+
+	/* sleep for about .2 seconds */
+	usleep(200000);
+
+	/* Before we can go ahead issue a who are you */
+	ret = whoareyou(&reply);
+	if(ret)
+	  {
+	    printf_unfiltered("whoareyou query bombed.");
+	    free(data);
+	    ubicom32_reset(0,0);
+	    return;
+	  }
+
+	ret = setupForDownload();
+      }
+    }
+
+  /* scan through the sections looking for the .protect section */
+  for (s = loadfile_bfd->sections; s; s = s->next)
+    {
+      unsigned char buf[4];
+      CORE_ADDR length;
+      int sec;
+      unsigned int section_last_address;
+      size_t len;
+
+      sec = ubicom32_loadable_section (loadfile_bfd, s);
+      if (sec != UBICOM32_FLASH_SECTION)
+	continue;
+
+      if(strcmp(s->name, ".protect"))
+	continue;
+
+      /* we have found the .protect section */
+      length = bfd_get_section_size (s);
+      hasProtect = 1;
+
+      /* may have to readjust the protectEnd */
+      protectStart = s->lma;
+      protectEnd = protectStart + length;
+      protectEnd += flashSectorSize -1;
+      protectEnd &= ~(flashSectorSize -1);
+
+      size = UBICOM32_LOAD_BLOCK_SIZE;
+
+      offs = 0;
+
+      /* read in the protect section info a buffer */
+      protect = malloc (length );
+      if (!protect)
+	{
+	  printf_unfiltered ("error: unable to allocate memory for reading in protect section\n");
+	  return;
+	}
+
+      /* read in the data from the section */
+      bfd_get_section_contents (loadfile_bfd, s, protect, offs, length);
+
+      /* Now we hunt down looking for a string that looks like KernelID */
+      foundK = protect;
+      len = length - (foundK - protect);
+      while(1)
+	{
+	  /* find the first 'K' in memory */
+	  foundK = (unsigned char *) memchr(foundK, 'K', len);
+
+	  if(foundK == NULL)
+	    break;
+
+	  if(!strncmp(foundK, "KernelID:", strlen("KernelID:")))
+	    {
+	      hasDebugKernel = 1;
+	      break;
+	    }
+
+	  foundK += (strlen(foundK) +1);
+
+	  len = length - (foundK - protect);
+	  if(len > 0 && len < length)
+	    continue;
+	  else
+	    {
+	      foundK = NULL;
+	      break;
+	    }
+	}
+
+      if(hasDebugKernel)
+	{
+	  unsigned char *verptr = (unsigned char *)strchr(foundK, ':');
+	  verptr++;
+
+	  changedProtect = compareVersion(verptr[0] - '0',
+					  verptr[2] - '0',
+					  verptr[4],
+					  verptr[5] - '0',
+					  verptr[7] - '0');
+
+	}
+
+      free(protect);
+      break;
+    }
+
+  for (s = loadfile_bfd->sections; s; s = s->next)
+    {
+      unsigned char buf[4];
+      CORE_ADDR length;
+      int sec;
+      unsigned int section_last_address;
+
+      sec = ubicom32_loadable_section (loadfile_bfd, s);
+      if (sec != UBICOM32_FLASH_SECTION)
+	continue;
+
+      if(dontLoadProtect)
+	{
+	  if(!strcmp(s->name, ".protect"))
+	     continue;
+	}
+
+      if(hasProtect)
+	{
+	  /* check for bootsector encroachment */
+	  if(protectStart <= s->lma && s->lma < protectEnd)
+	    {
+	      /* this section is encroaching the protect sector */
+	      printf_unfiltered("error: Boot sector is being encroached by section \"%s\".\nSection \"%s\" start address = 0x%08lx.\nPlease check flash selection in ipStorage-ubicom32 package configuration.\nDownload has been aborted.\n",
+				s->name, s->name, s->lma);
+	      return;
+	    }
+	}
+
+      length = bfd_get_section_size (s);
+      total_length += length;
+      section_last_address = length + s->lma;
+      section_last_address +=3;
+
+      /* round up the last address */
+      section_last_address &= ~0x3;
+
+      if(section_last_address > last_address)
+	last_address = section_last_address;
+
+      if(s->lma < first_address)
+	first_address = s->lma;
+    }
+
+  if(last_address > UBICOM32_FLASH_ADDR + flashSize)
+    {
+	    /* too big image. Abort the load */
+       printf_unfiltered("Dowload image is bigger than the flash. Download aborted.\n");
+       free(data);
+       return;
+    }
+  last_address -= first_address;
+
+  if(hasProtect)
+    {
+      if(hasDebugKernel == 0)
+	{
+	  printf_unfiltered("\n\
+WARNING: \".protect\" section has no boot kernel image.\n\
+\"loadprotect -force\" command may be issued from gdb prompt\n\
+to download the \".protect\" section to flash.\n\
+Downloading this \".protect\" section to flash\n\
+\"WILL DISABLE FUTURE FLASH PROGRAMMING OF THE BOARD\".\n\
+If this is not desired then please make sure \"GDB Loader Support\"\n\
+box under \"ipHAL-ubicom32 GDB Support\" is turned on.\n\n");
+	}
+      if(changedProtect && (useNewDownloadMethod == 0 ))
+	{
+	  printf_unfiltered("\
+Caution: \".protect\" section has changed.\n\
+\"loadprotect\" command may be issued from gdb prompt\n\
+to download the \".protect\" section to flash.\n\n");
+	}
+    }
+
+  /* tell spt that we are going to start code download. spt will issue the chip erase.
+     This will block till the chip erase returns. */
+  data[0] = 0;
+  sprintf(data,"Begin Erase of non \".protect\" sections.\n\
+0x%x length 0x%x", first_address, last_address);
+  printf("%s\n", data);
+
+  ret = eraseVerifyFlash(first_address, last_address, ubicom32_erase_progress_callback, NULL);
+  if(ret)
+    return;
+
+  printf("Begin download\n");
+  /* Write flash.  */
+  for (s = loadfile_bfd->sections; s; s = s->next)
+    {
+      if (ubicom32_loadable_section (loadfile_bfd, s) != UBICOM32_FLASH_SECTION)
+	continue;
+
+      if(dontLoadProtect)
+	{
+	  if(!strcmp(s->name, ".protect"))
+	     continue;
+	}
+
+      length = bfd_get_section_size (s);
+
+      if (remote_debug)
+	printf_filtered("%s: 0 / %ld\n", s->name, length);
+      ubicom32_show_load_progress_default (s->name, 0, length, progress, total_length);
+
+      size = UBICOM32_LOAD_BLOCK_SIZE;
+
+      offs = 0;
+      while(length)
+	{
+	  if(size > length)
+	    size = length;
+
+	  /* read in the data size bytes at a time from the section */
+	  bfd_get_section_contents (loadfile_bfd, s, data, offs, size);
+
+	  addr = s->lma + offs;
+
+	  ubicom32_write_bytes(addr, data, size);
+
+	  offs += size;
+	  length -= size;
+	  progress += size;
+
+	  if (remote_debug)
+	    printf_filtered("%s: 0 / %ld\n", s->name, length);
+	  ubicom32_show_load_progress_default (s->name, 0, length, progress, total_length);
+
+	}
+    }
+
+  /* Verify flash.  */
+  for (s = loadfile_bfd->sections; s; s = s->next)
+    {
+      if (ubicom32_loadable_section (loadfile_bfd, s) != UBICOM32_FLASH_SECTION)
+	continue;
+
+      if(dontLoadProtect)
+	{
+	  if(!strcmp(s->name, ".protect"))
+	     continue;
+	}
+
+      length = bfd_get_section_size (s);
+
+      if (remote_debug)
+	printf_filtered("%s: 0 / %ld\n", s->name, length);
+
+      size = UBICOM32_LOAD_BLOCK_SIZE;
+
+      offs = 0;
+      while(length)
+	{
+	  if(size > length)
+	    size = length;
+
+	  /* read in the data size bytes at a time from the section */
+	  bfd_get_section_contents (loadfile_bfd, s, data, offs, size);
+
+	  addr = s->lma + offs;
+
+	  if (common_verify_bytes(addr, data, size) < 0)
+	    printf_unfiltered("verify error in section %s (0x%08lx - 0x%08lx)\n", s->name, addr, addr + size);
+
+	  offs += size;
+	  length -= size;
+	  progress += size;
+
+	  if (remote_debug)
+	    printf_filtered("%s: 0 / %ld\n", s->name, length);
+	}
+    }
+
+  free(data);
+
+  /* reset and restart */
+  ubicom32_reset(0, 0);
+
+}
+
+static void
+ubicom32_mail_status (char *file, int from_tty)
+{
+  int status;
+  extern int readStatus(int *);
+  int ret = readStatus(&status);
+  printf("mail status = 0x%8x\n", status);
+}
+
+static void
+ubicom32_read_mailbox (char *file, int from_tty)
+{
+  int mboxData=0xaa55aa55;
+  extern int readMailbox(int *);
+  int ret = readMailbox(&mboxData);
+  printf("Ret = %d Mailbox sent = 0x%8x\n", ret,  mboxData);
+}
+
+#if 0
+static void
+ubicom32_mail_clear (char *file, int from_tty)
+{
+  extern void clean_mail(void);
+
+  clean_mail();
+
+}
+#endif
+/* ubicom32_load_protect.  */
+static void
+ubicom32_load_protect (char *arg, int from_tty)
+{
+  bfd *loadfile_bfd;
+  asection *s;
+  long total_length = 0;
+  long progress = 0;
+  long addr, length, offs, size;
+  unsigned char *data, *verifybuf, *protect, *version, *foundK;
+  unsigned int last_address = 0;
+  unsigned int first_address = 0xffffffff;
+  int ret;
+  int dontLoadProtect = 1;
+
+  int hasProtect = 0;
+  int hasDebugKernel = 0;
+  int abortLoad = 0;
+  char *file;
+  extern unsigned char dkmajor, dkminro, dkstate, dkincrement;
+  extern unsigned int dkunique;
+
+  size = UBICOM32_LOAD_BLOCK_SIZE;
+  data = malloc (size *2 );
+  if (!data)
+    {
+      printf_unfiltered ("error: unable to allocate memory for write\n");
+      return;
+    }
+  verifybuf = &data[size];
+
+  file = get_exec_file(1);
+
+  if (remote_debug)
+    printf_filtered ("ubicom32_load: %s (tty=%d)\n", file, from_tty);
+
+  /* Open the file.  */
+  loadfile_bfd = bfd_openr (file, gnutarget);
+  if (loadfile_bfd == NULL)
+    error ("Error: Unable to open file %s\n", file);
+
+  if (!bfd_check_format (loadfile_bfd, bfd_object))
+    {
+      bfd_close (loadfile_bfd);
+      error ("Error: File is not an object file\n");
+    }
+
+  /* scan through the sections looking for the .dynamic_non_volatile section */
+  for (s = loadfile_bfd->sections; s; s = s->next)
+    {
+      unsigned char buf[4];
+      CORE_ADDR length;
+      int sec, len;
+      unsigned psStart, psEnd;
+      unsigned int section_last_address;
+      int bkendtobk = 1;
+
+      sec = ubicom32_loadable_section (loadfile_bfd, s);
+      if (sec != UBICOM32_FLASH_SECTION )
+	continue;
+
+      if(strcmp(s->name, ".dynamic_non_volatile"))
+	continue;
+
+      /* load last_address with the lma address of this section  */
+      last_address = s->lma;
+    }
+
+  /* scan through the sections looking for the .protect section */
+  for (s = loadfile_bfd->sections; s; s = s->next)
+    {
+      unsigned char buf[4];
+      CORE_ADDR length;
+      int sec, len;
+      unsigned psStart, psEnd;
+      unsigned int section_last_address;
+      int bkendtobk = 1;
+
+      sec = ubicom32_loadable_section (loadfile_bfd, s);
+      if (sec != UBICOM32_FLASH_SECTION )
+	continue;
+
+      if(strcmp(s->name, ".protect"))
+	continue;
+
+      /* we have found the .protect section */
+      length = bfd_get_section_size (s);
+      hasProtect = 1;
+
+      total_length += length;
+      section_last_address = length + s->lma;
+      section_last_address +=3;
+
+      /* round up the last address */
+      section_last_address &= ~0x3;
+
+      if(section_last_address > last_address)
+	last_address = section_last_address;
+
+      if(s->lma < first_address)
+	first_address = s->lma;
+
+      size = UBICOM32_LOAD_BLOCK_SIZE;
+
+      offs = 0;
+
+      /* read in the protect section info a buffer */
+      protect = malloc (length );
+      if (!protect)
+	{
+	  printf_unfiltered ("error: unable to allocate memory for reading in protect section\n");
+	  return;
+	}
+
+      /* read in the data from the section */
+      bfd_get_section_contents (loadfile_bfd, s, protect, offs, length);
+
+      /* Now we hunt down looking for a string that looks like KernelID */
+      foundK = protect;
+      len = length - (foundK - protect);
+      while(1)
+	{
+	  /* find the first 'K' in memory */
+	  foundK = (unsigned char *) memchr(foundK, 'K', len);
+
+	  if(foundK == NULL)
+	    break;
+
+	  if(!strncmp(foundK, "KernelID:", strlen("KernelID:")))
+	    {
+	      hasDebugKernel = 1;
+	      break;
+	    }
+
+	  foundK += (strlen(foundK) +1);
+
+	  len = length - (foundK - protect);
+	  if(len > 0 && len < length)
+	    continue;
+	  else
+	    {
+	      foundK = NULL;
+	      break;
+	    }
+	}
+
+      if(hasDebugKernel == 0)
+	{
+	  if(arg == NULL)
+	    abortLoad = 1;
+	  else if(strcmp(arg, "-force")) {
+	    abortLoad = 1;
+	  }
+	}
+      else
+	{
+	  unsigned char *verptr = (unsigned char *)strchr(foundK, ':');
+	  verptr++;
+	  version = strdup(verptr);
+	}
+
+      free(protect);
+
+      if(abortLoad)
+	{
+	  printf_unfiltered("\n\
+WARNING: \".protect\" section has no boot kernel image.\n\
+\"loadprotect -force\" command may be issued from gdb prompt\n\
+to download the \".protect\" section to flash.\n\
+Downloading this \".protect\" section to flash\n\
+\"WILL DISABLE FUTURE FLASH PROGRAMMING OF THE BOARD\".\n\
+If this is not desired then please make sure \"GDB Loader Support\"\n\
+box under \"ipHAL-ubicom32 GDB Support\" is turned on.\n\
+\".protect section\" download aborted.\n\n");
+	  return;
+	}
+
+      bkendtobk = 1;
+      if(arg && (strcmp(arg, "-nobk") == 0))
+	 bkendtobk = 0;
+
+      if(bkendtobk) {
+	/* Force the bootkernel to run */
+	ret = initBackendToBootKernel(1);
+      }
+
+      while(length)
+	{
+	  int transfer, readtransfer;
+	  if(size > length)
+	    size = length;
+
+	  /* read in the data size bytes at a time from the section */
+	  bfd_get_section_contents (loadfile_bfd, s, data, offs, size);
+
+	  addr = s->lma + offs;
+
+	  /* read the data from .protect and verify */
+	  readtransfer= ubicom32_read_bytes(addr, verifybuf, size);
+	  if (memcmp (data, verifybuf, size) != 0)
+	    {
+	      dontLoadProtect = 0;
+	      break;
+	    }
+	  offs += size;
+	  length -= size;
+
+	}
+
+      break;
+    }
+  last_address -= first_address;
+
+  /* We will download only if the .protect section is different than what is already there */
+  if(dontLoadProtect)
+    {
+      /* Check if user wants to forcibly load the debug kernel */
+      if(arg == NULL || (strcmp(arg, "-force")))
+	{
+	   /* reset and restart */
+	   ubicom32_reset(0, 0);
+	   return;
+	}
+    }
+
+  /* see if we can use the new download mechanism. */
+  if((dkmajor >2) || ((dkmajor == 2) && (dkunique >= 5)))
+    {
+      unsigned char useNewDownloadMethod = 0;
+      /*
+       * Scan through the sections looking for the .downloder section. We better find it
+       * because without it we are not going to be able to download any code to the board.
+       */
+      for (s = loadfile_bfd->sections; s; s = s->next)
+	{
+	  unsigned char buf[4];
+	  CORE_ADDR length;
+	  int sec;
+	  unsigned int section_last_address;
+	  size_t len;
+
+	  if(strcmp(s->name, ".loadprotect"))
+	    {
+	      continue;
+	    }
+
+	  useNewDownloadMethod = 1;
+	  break;
+	}
+
+      if(useNewDownloadMethod) {
+	/* If we got here then download the .loadprotect section to the board. */
+
+	size = UBICOM32_LOAD_BLOCK_SIZE;
+
+	length = bfd_get_section_size (s);
+	offs = 0;
+	while(length)
+	  {
+	    int transfer, readtransfer;
+	    long myaddr;
+	    char *mydata;
+	    char *verifybuf = &data[size];
+
+	    if(size > length)
+	      size = length;
+
+	    /* read in the data size bytes at a time from the section */
+	    bfd_get_section_contents (loadfile_bfd, s, data, offs, size);
+
+	    addr = s->vma + offs;
+
+	    myaddr = addr;
+	    mydata = data;
+
+	    transfer = ubicom32_write_bytes(myaddr, mydata, size);
+	    /* read the data and verify */
+	    readtransfer= ubicom32_read_bytes(addr, verifybuf, transfer);
+	    if (memcmp (data, verifybuf, transfer) != 0)
+	      {
+		printf_unfiltered ("error: verify: data does not match!\n");
+		printf_unfiltered ("Data in block starting at 0x%lx length %d\n",
+				   addr, transfer);
+		free (data);
+		return ;
+	      }
+
+	    offs += transfer;
+	    length -= transfer;
+	  }
+
+	/* now transfer control to the .loadprotect section */
+	ret = jumpToPc(s->vma);
+	if(ret)
+	  {
+	    /* Jump to PC failed */
+	    printf_unfiltered("Failed to revector the debugger thread to 0x%lx.\n", s->vma);
+	    free(data);
+	    return;
+	  }
+
+	/* sleep for about .2 seconds */
+	usleep(1000000);
+
+	free(data);
+	ubicom32_reset(0,0);
+	return;
+      }
+    }
+
+  /* Issue the chip erase. This will block till the chip erase returns. */
+  data[0] = 0;
+  sprintf(data,"beginErase 0x%x length 0x%x", first_address, last_address);
+  printf("%s\n", data);
+
+  ret = eraseVerifyFlash(first_address, last_address, ubicom32_erase_progress_callback, NULL);
+  if(ret)
+    return;
+
+  printf("Begin download\n");
+  /* Write internal flash.  */
+  for (s = loadfile_bfd->sections; s; s = s->next)
+    {
+      if (ubicom32_loadable_section (loadfile_bfd, s) != UBICOM32_FLASH_SECTION)
+	continue;
+
+      if(hasProtect)
+	{
+	  if(strcmp(s->name, ".protect"))
+	     continue;
+	}
+
+      length = bfd_get_section_size (s);
+
+      if (remote_debug)
+	printf_filtered("%s: 0 / %ld\n", s->name, length);
+      ubicom32_show_load_progress_default (s->name, 0, length, progress, total_length);
+
+      size = UBICOM32_LOAD_BLOCK_SIZE;
+
+      offs = 0;
+      while(length)
+	{
+	  int transfer;
+	  if(size > length)
+	    size = length;
+
+	  /* read in the data size bytes at a time from the section */
+	  bfd_get_section_contents (loadfile_bfd, s, data, offs, size);
+
+	  addr = s->lma + offs;
+
+	  transfer = ubicom32_write_bytes(addr, data, size);
+	  offs += transfer;
+	  length -= transfer;
+	  progress += transfer;
+
+	  if (remote_debug)
+	    printf_filtered("%s: 0 / %ld\n", s->name, length);
+	  ubicom32_show_load_progress_default (s->name, 0, length, progress, total_length);
+
+	}
+
+      /* now do the verify */
+      length = bfd_get_section_size (s);
+
+      size = UBICOM32_LOAD_BLOCK_SIZE;
+
+      offs = 0;
+      while(length)
+	{
+	  int readtransfer;
+	  if(size > length)
+	    size = length;
+
+	  /* read in the data size bytes at a time from the section */
+	  bfd_get_section_contents (loadfile_bfd, s, data, offs, size);
+
+	  addr = s->lma + offs;
+
+	  /* read the data and verify */
+	  readtransfer= ubicom32_read_bytes(addr, verifybuf, size);
+	  if (memcmp (data, verifybuf, readtransfer) != 0)
+	    {
+	      printf_unfiltered ("error: verify: data does not match!\n");
+	      printf_unfiltered ("Data in block starting at 0x%lx length %d\n",
+				 addr, readtransfer);
+	      free (data);
+	      return ;
+	    }
+
+	  offs += readtransfer;
+	  length -= readtransfer;
+
+	  if (remote_debug)
+	    printf_filtered("%s: 0 / %ld\n", s->name, length);
+	}
+
+
+      break;
+    }
+
+  free(data);
+
+  /* reset and restart */
+  ubicom32_reset(0, 0);
+
+}
+
+/* ubicom32_hw_mon_sample */
+static void
+ubicom32_core_dump (char *args, int from_tty)
+{
+  char default_name[]="Ubicom.core";
+  int default_sdram_size = 16*1024*1024;
+  int sdsize;
+  struct ubicom32_core_header coreHeader;
+  char *filename;
+  CORE_ADDR begin_data, end_data;
+  CORE_ADDR begin_sdram, end_sdram;
+  CORE_ADDR begin_pram, end_pram;
+  unsigned int mem_size;
+  FILE *fp;
+  int i;
+  char *buffer;
+  unsigned int progress, total_size;
+  int ret_val;
+
+  filename = default_name;
+
+  if(debugging_processor == 5133)
+    {
+      extern void ubicom32v3_core_dump(char *args, int from_tty);
+      ubicom32v3_core_dump(args, from_tty);
+      return;
+    }
+
+  if(args)
+    {
+      /* look for space in the buffer */
+      char *space = args;
+
+      if(isdigit(space[0]))
+	{
+	  /*
+	   * we do no allow filenames to start with a number. So this is a case of
+	   * coredump n.
+	   */
+	  int ret = sscanf(space, "%d", &sdsize);
+	  if(ret == 1)
+	    {
+	      if(sdsize < 1)
+		{
+		  /* clamp it to 1 */
+		  sdsize = 1;
+		}
+	      else if(sdsize > 16)
+		{
+		  /* clamp it to 16 */
+		  sdsize = 16;
+		}
+
+	      default_sdram_size = sdsize *1024*1024;
+	    }
+	  else
+	    {
+	      printf_unfiltered("scanf bombed ret = %d\n", ret);
+	    }
+	}
+      else
+	{
+	  space  = strchr(args, ' ');
+	  if(space)
+	    {
+	      int ret;
+	      *space++ = 0;
+
+	      /* scan the rest of the string for a number */
+	      ret = sscanf(space, "%d", &sdsize);
+	      if(ret == 1)
+		{
+		  if(sdsize < 1)
+		    {
+		      /* clamp it to 1 */
+		      sdsize = 1;
+		    }
+		  else if(sdsize > 8)
+		    {
+		      /* clamp it to 8 */
+		      sdsize = 8;
+		    }
+		  default_sdram_size = sdsize *1024*1024;
+		}
+	      else
+		{
+		  printf_unfiltered("scanf bombed ret = %d\n", ret);
+		}
+	    }
+	}
+    }
+
+  fp = fopen(filename, "wb+");
+
+  if(fp == NULL)
+    {
+      printf_filtered("ubicom32_core_dump: Cannot open %s\n", filename);
+      return;
+    }
+
+  /*
+   * Turn off the 2 wire interface if possible.
+   */
+  ret_val = turnOff2wire();
+
+  /* We managed to open the file */
+  /* Update the register info for all the threads */
+  for(i=0; i< 8; i++)
+    gdbMainGetallRegs(i, &mainRegisters);
+
+  /* malloc a 1 Meg buffer to move the data through */
+  buffer = malloc(1024*1024);
+
+  if(buffer == NULL)
+    {
+      printf_unfiltered("ubicom32_core_dump: Failed to malloc transfer buffer\n");
+      return;
+    }
+
+  /* look up the various symbols */
+  begin_data = ubicom32_lookup_symbol("__data_begin");
+  end_data = ubicom32_lookup_symbol("__data_limit");
+  begin_sdram = ubicom32_lookup_symbol("__sdram_begin");
+  end_sdram = ubicom32_lookup_symbol("__sdram_limit");
+  begin_pram = ubicom32_lookup_symbol("__pram_begin");
+  end_pram = ubicom32_lookup_symbol("__pram_limit");
+
+  if(begin_data == 0)
+    printf("begin_data not found\n");
+
+  if(end_data == 0)
+    printf("end_pram not found\n");
+
+  if(begin_pram == 0)
+    printf("begin_pram not found\n");
+
+  if(end_pram == 0)
+    printf("end_pram not found\n");
+
+  if(begin_sdram == 0)
+    printf("begin_sdram not found\n");
+
+  if(end_sdram == 0)
+    printf("end_sdram not found\n");
+
+  /* load Ubicom Core Magic into the header */
+  coreHeader.magic = 0x1234aa55;
+
+  /* Set file position to end of header */
+  (void) fseek(fp, sizeof(coreHeader), SEEK_SET);
+
+  /* write out debugger thread number */
+  (void) fwrite(&debuggerThreadNo, 1, 4, fp);
+
+  /* write out sector size */
+  (void) fwrite(&flashSectorSize, 1, 4, fp);
+
+  /* wirte out flash size */
+  (void) fwrite(&flashSize, 1, 4, fp);
+
+  /* load the register offset into the coreHeader */
+  coreHeader.regOffset = ftell(fp);
+
+  /* write out register area size */
+  mem_size = sizeof(mainRegisters);
+  (void) fwrite(&mem_size, 1, 4, fp);
+
+  /* write out the register data */
+  (void) fwrite(&mainRegisters, 1, sizeof(mainRegisters), fp);
+
+  /* load hrt offset into coreHeader */
+  coreHeader.hrtOffset = ftell(fp);
+
+  /* read and write the hrt block */
+  (void) ubicom32_read_bytes(0x800, buffer, 512);
+  (void) fwrite(buffer, 1, 512, fp);
+
+  /* load data offset into coreHeader */
+  coreHeader.dataOffset = ftell(fp);
+
+  printf_unfiltered("Dumping DATA memory.\n");
+  /* write out the data memory size */
+  total_size = mem_size = end_data - begin_data;
+  (void) fwrite(&mem_size, 1, 4, fp);
+  progress = 0;
+  ubicom32_show_load_progress_default(NULL, 0, 0, progress, total_size);
+
+  /* now read and write out the data memory */
+  while(mem_size)
+    {
+      int length = 1024*1024;
+
+      if(length > mem_size)
+	length = mem_size;
+
+      /* read in the data */
+      //(void) ubicom32_read_bytes(begin_data, buffer, length);
+      (void) readDataMemoryRaw(begin_data, length/4, (int *)buffer);
+
+      /* write out the data. */
+      (void) fwrite(buffer, 1, length, fp);
+
+      begin_data += length;
+      mem_size -= length;
+      progress += length;
+      ubicom32_show_load_progress_default(NULL, 0, 0, progress, total_size);
+    }
+
+  /* load pram offset into coreHeader */
+  coreHeader.pramOffset = ftell(fp);
+
+  printf_unfiltered("Dumping PRAM.\n");
+  /* write out the pram memory size */
+  total_size = mem_size = end_pram - begin_pram;
+  (void) fwrite(&mem_size, 1, 4, fp);
+  progress = 0;
+  ubicom32_show_load_progress_default(NULL, 0, 0, progress, total_size);
+
+  /* now read and write out the data memory */
+  while(mem_size)
+    {
+      int length = 1024*1024;
+
+      if(length > mem_size)
+	length = mem_size;
+
+      /* read in the data */
+      //(void) ubicom32_read_bytes(begin_pram, buffer, length);
+      (void) readPgmMemoryRaw(begin_pram, length/4, (int *)buffer);
+
+      /* write out the data. */
+      (void) fwrite(buffer, 1, length, fp);
+
+      begin_pram += length;
+      mem_size -= length;
+      progress += length;
+      ubicom32_show_load_progress_default(NULL, 0, 0, progress, total_size);
+    }
+
+  printf_unfiltered("Dumping SDRAM. This will take time\n");
+  /* load sdram offset into coreHeader */
+  coreHeader.sdramOffset = ftell(fp);
+
+  /* read and write out the sdram */
+  total_size = mem_size = default_sdram_size;
+  if((end_sdram - begin_sdram) < mem_size)
+    mem_size = (end_sdram - begin_sdram);
+
+  total_size = mem_size;
+
+  (void) fwrite(&mem_size, 1, 4, fp);
+  progress = 0;
+  ubicom32_show_load_progress_default(NULL, 0, 0, progress, total_size);
+
+  /* now read and write out the data memory */
+  while(mem_size)
+    {
+      int length = 1024*1024;
+
+      if(length > mem_size)
+	length = mem_size;
+
+      /* read in the data */
+      //(void) ubicom32_read_bytes(begin_sdram, buffer, length);
+      (void) readDataMemoryRaw(begin_sdram, length/4, (int *)buffer);
+
+      /* write out the data. */
+      (void) fwrite(buffer, 1, length, fp);
+
+      begin_sdram += length;
+      mem_size -= length;
+      progress += length;
+      ubicom32_show_load_progress_default(NULL, 0, 0, progress, total_size);
+    }
+
+#if 0
+  /* read and write out the dynamic_non_volatile_section  */
+  begin_data = ubicom32_lookup_symbol("__dynamic_non_volatile_load_begin");
+  end_data = ubicom32_lookup_symbol("__dynamic_non_volatile_reserve_end");
+#endif
+
+  /* read and write out the dynamic_non_volatile_section  */
+  begin_data = ubicom32_lookup_symbol("__flash_begin");
+  end_data = ubicom32_lookup_symbol("__flash_limit");
+
+  /* load flash offset into coreHeader */
+  coreHeader.flashOffset = ftell(fp);
+
+  /* write out the dynamic_non_volatile block start address to core file */
+  (void) fwrite(&begin_data, 1, 4, fp);
+
+  printf_unfiltered("Dumping FLASH. This will take time\n");
+  /* write out the data memory size */
+  total_size = mem_size = end_data - begin_data;
+  (void) fwrite(&mem_size, 1, 4, fp);
+  progress = 0;
+  ubicom32_show_load_progress_default(NULL, 0, 0, progress, total_size);
+
+  /* now read and write out the data memory */
+  while(mem_size)
+    {
+      int length = 1024*1024;
+
+      if(length > mem_size)
+	length = mem_size;
+
+      /* read in the data */
+      //(void) ubicom32_read_bytes(begin_data, buffer, length);
+      (void) readPgmMemoryRaw(begin_data, length/4, (int *)buffer);
+
+      /* write out the data. */
+      (void) fwrite(buffer, 1, length, fp);
+
+      begin_data += length;
+      mem_size -= length;
+      progress += length;
+      ubicom32_show_load_progress_default(NULL, 0, 0, progress, total_size);
+    }
+
+  /* rewind the file and write out the header into the file */
+  rewind(fp);
+
+  (void) fwrite(&coreHeader, 1, sizeof(coreHeader), fp);
+
+  /* close the file */
+  fclose(fp);
+
+  /* Turn on turbo 2 wire if possible. */
+  ret_val = turnOn2wire();
+  return;
+}
+
+/* ubicom32_verify.  */
+static void
+ubicom32_verify (char *arg, int from_tty)
+{
+  bfd *loadfile_bfd;
+  asection *s;
+  long total_length = 0;
+  long progress = 0;
+  long addr, length, offs, size;
+  unsigned char *data, *verifybuf, *protect;
+  unsigned int last_address = 0;
+  unsigned int first_address = 0xffffffff;
+  int ret;
+
+  char *file;
+
+  size = UBICOM32_LOAD_BLOCK_SIZE;
+  data = malloc (size *2 );
+  if (!data)
+    {
+      printf_unfiltered ("error: unable to allocate memory for write\n");
+      return;
+    }
+  verifybuf = &data[size];
+
+  file = get_exec_file(1);
+
+  if (remote_debug)
+    printf_filtered ("ubicom32_load: %s (tty=%d)\n", file, from_tty);
+
+  /* Open the file.  */
+  loadfile_bfd = bfd_openr (file, gnutarget);
+  if (loadfile_bfd == NULL)
+    error ("Error: Unable to open file %s\n", file);
+
+  if (!bfd_check_format (loadfile_bfd, bfd_object))
+    {
+      bfd_close (loadfile_bfd);
+      error ("Error: File is not an object file\n");
+    }
+
+  for (s = loadfile_bfd->sections; s; s = s->next)
+    {
+      if (ubicom32_loadable_section (loadfile_bfd, s) != UBICOM32_FLASH_SECTION)
+	continue;
+
+      length = bfd_get_section_size (s);
+
+      if (remote_debug)
+	printf_filtered("%s: 0 / %ld\n", s->name, length);
+
+      size = UBICOM32_LOAD_BLOCK_SIZE;
+
+      offs = 0;
+      while(length)
+	{
+	  int readtransfer;
+	  if(size > length)
+	    size = length;
+
+	  /* read in the data size bytes at a time from the section */
+	  bfd_get_section_contents (loadfile_bfd, s, data, offs, size);
+
+	  addr = s->lma + offs;
+
+	  /* read the data and verify */
+	  readtransfer= ubicom32_read_bytes(addr, verifybuf, size);
+	  if (memcmp (data, verifybuf, readtransfer) != 0)
+	    {
+	      int i;
+	      char *badblock = verifybuf;
+	      char *cmpblock = data;
+	      long currentaddress = addr;
+	      for(i = 0; i< readtransfer; i++, currentaddress++) {
+		if(badblock[i] != cmpblock[i]){
+		  printf("addr = 0x%08lx expect 0x%02hhx got 0x%02hhx\n", currentaddress, (unsigned)cmpblock[i], (unsigned)badblock[i]);
+		  break;
+		}
+	      }
+	    }
+
+	  offs += readtransfer;
+	  length -= readtransfer;
+
+	  if (remote_debug)
+	    printf_filtered("%s: 0 / %ld\n", s->name, length);
+	}
+    }
+
+  free(data);
+
+}
+
+/* ubicom32_fix_protect.  */
+static void
+ubicom32_fix_protect (char *arg, int from_tty)
+{
+  bfd *loadfile_bfd;
+  asection *s;
+  long total_length = 0;
+  long progress = 0;
+  long addr, length, offs, size;
+  unsigned char *data, *verifybuf, *protect, *version, *foundK;
+  unsigned int last_address = 0;
+  unsigned int first_address = 0xffffffff;
+  int ret;
+  int dontLoadProtect = 1;
+
+  int hasProtect = 0;
+  int hasDebugKernel = 0;
+  int abortLoad = 0;
+  char *file;
+
+  size = UBICOM32_LOAD_BLOCK_SIZE;
+  data = malloc (size *2 );
+  if (!data)
+    {
+      printf_unfiltered ("error: unable to allocate memory for write\n");
+      return;
+    }
+  verifybuf = &data[size];
+
+  file = get_exec_file(1);
+
+  if (remote_debug)
+    printf_filtered ("ubicom32_load: %s (tty=%d)\n", file, from_tty);
+
+  /* Open the file.  */
+  loadfile_bfd = bfd_openr (file, gnutarget);
+  if (loadfile_bfd == NULL)
+    error ("Error: Unable to open file %s\n", file);
+
+  if (!bfd_check_format (loadfile_bfd, bfd_object))
+    {
+      bfd_close (loadfile_bfd);
+      error ("Error: File is not an object file\n");
+    }
+
+  /* scan through the sections looking for the .protect section */
+  for (s = loadfile_bfd->sections; s; s = s->next)
+    {
+      unsigned char buf[4];
+      CORE_ADDR length;
+      int sec, len;
+      unsigned psStart, psEnd;
+      unsigned int section_last_address;
+
+      sec = ubicom32_loadable_section (loadfile_bfd, s);
+
+      if(strcmp(s->name, ".protect"))
+	continue;
+
+      /* we have found the .protect section */
+      length = bfd_get_section_size (s);
+      hasProtect = 1;
+
+      total_length += length;
+      section_last_address = length + s->lma;
+      section_last_address +=3;
+
+      /* round up the last address */
+      section_last_address &= ~0x3;
+
+      if(section_last_address > last_address)
+	last_address = section_last_address;
+
+      if(s->lma < first_address)
+	first_address = s->lma;
+
+      size = UBICOM32_LOAD_BLOCK_SIZE;
+
+      offs = 0;
+
+      /* read in the protect section info a buffer */
+      protect = malloc (length );
+      if (!protect)
+	{
+	  printf_unfiltered ("error: unable to allocate memory for reading in protect section\n");
+	  return;
+	}
+
+      /* read in the data from the section */
+      bfd_get_section_contents (loadfile_bfd, s, protect, offs, length);
+
+      /* Now we hunt down looking for a string that looks like KernelID */
+      foundK = protect;
+      len = length - (foundK - protect);
+      while(1)
+	{
+	  /* find the first 'K' in memory */
+	  foundK = (unsigned char *) memchr(foundK, 'K', len);
+
+	  if(foundK == NULL)
+	    break;
+
+	  if(!strncmp(foundK, "KernelID:", strlen("KernelID:")))
+	    {
+	      hasDebugKernel = 1;
+	      break;
+	    }
+
+	  foundK += (strlen(foundK) +1);
+
+	  len = length - (foundK - protect);
+	  if(len > 0 && len < length)
+	    continue;
+	  else
+	    {
+	      foundK = NULL;
+	      break;
+	    }
+	}
+
+      if(hasDebugKernel == 0)
+	{
+	  if(arg == NULL)
+	    abortLoad = 1;
+	  else if(strcmp(arg, "-force"))
+	    abortLoad = 1;
+	}
+      else
+	{
+	  unsigned char *verptr = (unsigned char *)strchr(foundK, ':');
+	  verptr++;
+	  version = strdup(verptr);
+	}
+
+      free(protect);
+
+      if(abortLoad)
+	{
+	  printf_unfiltered("\n\
+WARNING: \".protect\" section has no boot kernel image.\n\
+\"loadprotect -force\" command may be issued from gdb prompt\n\
+to download the \".protect\" section to flash.\n\
+Downloading this \".protect\" section to flash\n\
+\"WILL DISABLE FUTURE FLASH PROGRAMMING OF THE BOARD\".\n\
+If this is not desired then please make sure \"GDB Loader Support\"\n\
+box under \"ipHAL-ubicom32 GDB Support\" is turned on.\n\
+\".protect section\" download aborted.\n\n");
+	  return;
+	}
+
+      break;
+    }
+
+  printf("Begin download\n");
+  /* Write internal flash.  */
+  for (s = loadfile_bfd->sections; s; s = s->next)
+    {
+      if (ubicom32_loadable_section (loadfile_bfd, s) != UBICOM32_PRAM_SECTION)
+	continue;
+
+      length = bfd_get_section_size (s);
+      printf_filtered("%s: 0 / %ld\n", s->name, length);
+
+      if (remote_debug)
+	printf_filtered("%s: 0 / %ld\n", s->name, length);
+      ubicom32_show_load_progress_default (s->name, 0, length, progress, total_length);
+
+      size = UBICOM32_LOAD_BLOCK_SIZE;
+
+      offs = 0;
+      while(length)
+	{
+	  int transfer, readtransfer;
+	  long myaddr;
+	  char *mydata;
+
+	  if(size > length)
+	    size = length;
+
+	  /* read in the data size bytes at a time from the section */
+	  bfd_get_section_contents (loadfile_bfd, s, data, offs, size);
+
+	  addr = s->lma + offs;
+
+	  myaddr = addr;
+	  mydata = data;
+
+	  for(transfer =0; transfer < size; transfer+=4, myaddr+= 4, mydata+=4) {
+		  readtransfer = ubicom32_write_bytes(myaddr, mydata, 4);
+	  }
+
+	  /* read the data and verify */
+	  readtransfer= ubicom32_read_bytes(addr, verifybuf, transfer);
+	  if (memcmp (data, verifybuf, transfer) != 0)
+	    {
+	      printf_unfiltered ("error: verify: data does not match!\n");
+	      printf_unfiltered ("Data in block starting at 0x%lx length %d\n",
+				 addr, transfer);
+	      free (data);
+	      return ;
+	    }
+
+	  offs += transfer;
+	  length -= transfer;
+	  progress += transfer;
+
+	  if (remote_debug)
+	    printf_filtered("%s: 0 / %ld\n", s->name, length);
+	  ubicom32_show_load_progress_default (s->name, 0, length, progress, total_length);
+
+	}
+    }
+
+  free(data);
+
+  printf("Now fix the gdb thread stack and let it run\n");
+}
+
+FBlock_t *firstFlashBlock = NULL; /* Pointer to the first flash block */
+FBlock_t *lastFlashBlock = NULL; /* Pointer to the last flash block */
+unsigned char dirtyFlashBlocks = 0; /* Global flag to know when there are dirty flash blocks  */
+
+static void
+ubicom32FlashStats(char *file, int from_tty)
+{
+  /* print info about flash blocks */
+  FBlock_t *fBlock = firstFlashBlock;
+  int i;
+
+  while(fBlock)
+    {
+      printf_filtered("Flash Block # 0x%x flashState = %d numBP = %d\nnumRemoveBP = %d GDBState = %d numWrites= %d\n",
+		      fBlock->blockNumber,
+		      fBlock->flashState,
+		      fBlock->numBreakpoints,
+		      fBlock->numRemoveBPs,
+		      fBlock->flashBlockGDBState,
+		      fBlock->numWrites);
+
+      if(fBlock->numBreakpoints)
+	{
+	  /* print out the breakpoint list */
+	  i =0;
+	  printf_filtered("Break points are\n0x%4x ", fBlock->breakpointList[i++]);
+
+	  for(;i< fBlock->numBreakpoints; i++)
+	    {
+	      printf_filtered("%8x ", fBlock->breakpointList[i]);
+
+	      if((i%8) == 0)
+		printf_filtered("\n");
+	    }
+	}
+
+      if(fBlock->numRemoveBPs)
+	{
+	  /* print out the breakpoint list */
+	  i =0;
+	  printf_filtered("Removed Break points are\n0x%4x ", fBlock->breakpointRemoveList[i++]);
+
+	  for(;i< fBlock->numRemoveBPs; i++)
+	    {
+	      printf_filtered("%8x ", fBlock->breakpointRemoveList[i]);
+
+	      if((i%8) == 0)
+		printf_filtered("\n");
+	    }
+	}
+      printf_filtered("\n\n");
+
+      fBlock = fBlock->next;
+    }
+}
+
+unsigned int
+ubicom32WriteFlashBlock(FBlock_t * fBlock)
+{
+  unsigned int ret = 0;
+  unsigned int iWrite = 1;
+  unsigned int bp_size;
+  CORE_ADDR addr = 0x20000000;
+  unsigned int *bp = (unsigned int *) gdbarch_breakpoint_from_pc(current_gdbarch, &addr, &bp_size);
+  unsigned int bpToSend;
+  char *cptr = (char *)&bpToSend;
+  int i;
+
+  memcpy((void *)&bpToSend, (void *)bp, bp_size);
+  cptr[3] =  (~dontDebugMask & 0xff);
+
+  /* everything is set for breakpoint insersion */
+  if(fBlock->flashState == 0)
+    {
+      /* This is break point insertion. */
+
+      for(i=0; i< fBlock->numBreakpoints; i++)
+	{
+	  unsigned int insn =
+	    fBlock->code[(fBlock->breakpointList[i] & (flashSectorSize -1))/sizeof(unsigned int)];
+
+	  if((insn & bpToSend) != bpToSend)
+	  {
+	    /* can't do a write */
+	    iWrite =0;
+	  }
+
+	  fBlock->code[(fBlock->breakpointList[i] & (flashSectorSize -1))/sizeof(unsigned int)] = bpToSend;
+	}
+    }
+
+  if(iWrite)
+    {
+      /* We have to remove some BPs case to check */
+      for(i=0; i< fBlock->numRemoveBPs; i++)
+	{
+	  unsigned int opcode =
+	    fBlock->code[(fBlock->breakpointRemoveList[i] & (flashSectorSize -1))/sizeof(unsigned int)];
+
+	  if((opcode!= 0))
+	    {
+	      /* too bad can't do iWrites */
+	      iWrite = 0;
+	      break;
+	    }
+	}
+    }
+
+  if(iWrite == 0)
+    {
+      int length;
+      int size;
+      unsigned int current_block;
+      unsigned char *destptr;
+      unsigned int okToDoubleBufferOldValue;
+      extern unsigned int okToDoubleBuffer;
+
+      /* erase the block */
+      ret = eraseVerifyFlash(fBlock->blockNumber, flashSectorSize, NULL, NULL);
+      fBlock->numWrites ++;
+
+      /* write the code block to flash  */
+      length = flashSectorSize;
+      current_block = fBlock->blockNumber;
+      destptr = (unsigned char *)fBlock->code;
+
+      okToDoubleBufferOldValue = okToDoubleBuffer;
+      okToDoubleBuffer = 0;
+
+      while(length)
+	{
+	  size = 1024;
+	  if(size > length)
+	    size = length;
+
+	  ret = ubicom32_write_bytes (current_block, destptr, size);
+
+	  length -= size;
+	  current_block += size;
+	  destptr += size;
+	}
+      okToDoubleBuffer = okToDoubleBufferOldValue;
+    }
+  else
+    {
+      /* write out the Break points if any */
+      for(i=0; i< fBlock->numBreakpoints; i++)
+	{
+	  ret = ubicom32_write_bytes(fBlock->breakpointList[i],
+				 (char *)&fBlock->code[(fBlock->breakpointList[i] & (flashSectorSize -1))/sizeof(unsigned int)],
+				 sizeof(unsigned int));
+	}
+
+      /* remove Breakpoints if any */
+      for(i=0; i< fBlock->numRemoveBPs; i++)
+	{
+	  ret = ubicom32_write_bytes(fBlock->breakpointRemoveList[i],
+				 (char *)&fBlock->code[(fBlock->breakpointRemoveList[i] & (flashSectorSize -1))/sizeof(unsigned int)],
+				 sizeof(unsigned int));
+	}
+    }
+
+  fBlock->numRemoveBPs = 0;
+  if(fBlock->numBreakpoints)
+    {
+      /* change state to BP installed */
+    fBlock->flashState = 1;
+    }
+  else
+    {
+      fBlock->flashState = 2;
+    }
+
+  return 0;
+}
+
+static int
+ubicom32_insert_breakpoint (struct bp_target_info *bp_tgt)
+{
+  unsigned int *bp = (unsigned int *) gdbarch_breakpoint_from_pc(current_gdbarch, &bp_tgt->placed_address, &bp_tgt->placed_size);
+  CORE_ADDR addr = bp_tgt->placed_address;
+  unsigned int bpToSend;
+  char *cptr = (char *)&bpToSend;
+  int ret;
+  unsigned int flashSectorIgnore = (flashSectorSize < 16*1024)? 16*1024: flashSectorSize;
+  /* or in the complement of dontDebugMask */
+
+  memcpy((void *)&bpToSend, (void *)bp, bp_tgt->placed_size);
+  cptr[3] =  (~dontDebugMask & 0xff);
+
+  /* make sure the address is in the PRAM space. XXXXXX May change in the future */
+  if(addr >= 0x40000000 &&  0x40080000 > addr)
+    {
+      /* valid pram address */
+
+      /* read out the old contents */
+      ret = ubicom32_read_bytes (addr, bp_tgt->shadow_contents, bp_tgt->placed_size);
+
+      if(ret!= bp_tgt->placed_size)
+	return -1;
+      /* write in the break point */
+      ret = ubicom32_write_bytes (addr, (char *) &bpToSend, bp_tgt->placed_size);
+
+      if(ret == bp_tgt->placed_size)
+	return 0;
+      else
+	return -1;
+    }
+  else if(addr >= (0x20000000 + flashSectorIgnore) && (0x20000000 + flashSize) > addr)
+    {
+      unsigned int blockNo = addr & ~(flashSectorSize -1);
+      FBlock_t *fBlock = firstFlashBlock;
+      int i;
+      int BPState = 0;		/* 1 means an old installed BP */
+
+      /* This is a break point in the flash but outside the protected sector */
+
+      /* walk down the Flash block list and find the current block */
+      while(fBlock)
+	{
+	  if(fBlock->blockNumber == blockNo)
+	    {
+	      /* we have a hit */
+	      break;
+	    }
+	  else
+	    fBlock = fBlock->next;
+	}
+
+      if(fBlock == NULL)
+	{
+	  int length;
+	  int size;
+	  unsigned int current_block;
+	  unsigned char *destptr;
+
+	  /* We are touching this block for the first time. We need to set it up */
+	  fBlock = (FBlock_t *) malloc(sizeof (FBlock_t));
+	  if(fBlock == NULL)
+	    exit(1);
+
+	  fBlock->numBreakpoints = 0;
+	  fBlock->numRemoveBPs =0;
+	  /* now malloc the code space */
+	  fBlock->code = (unsigned int * ) malloc(flashSectorSize);
+
+	  if(fBlock->code == NULL)
+	    exit(2);
+
+	  /* now malloc the space for 16 breakpoints */
+	  fBlock->breakpointList = (unsigned int *) malloc(sizeof (unsigned int )*16);
+	  if(fBlock->breakpointList == NULL)
+	    exit(3);
+
+	  /* now malloc the space for 16 removed breakpoints */
+	  fBlock->breakpointRemoveList = (unsigned int *) malloc(sizeof (unsigned int)*16);
+	  if(fBlock->breakpointRemoveList == NULL)
+	    exit(3);
+
+	  /* now initialize a few things */
+	  fBlock->next = NULL;
+	  fBlock->bpListSpace = 16;
+	  fBlock->bpListRemoveSpace = 16;
+	  fBlock->blockNumber = blockNo;
+	  fBlock->flashBlockGDBState = 0;
+	  fBlock->flashState = 0;
+	  fBlock->numWrites = 0;
+
+	  /* read in the code block from the Hardware and cache it */
+	  length = flashSectorSize;
+	  current_block = blockNo;
+	  destptr = (unsigned char *)fBlock->code;
+
+	  while(length)
+	    {
+	      size = UBICOM32_LOAD_BLOCK_SIZE;
+	      if(size > length)
+		size = length;
+
+	      ret = ubicom32_read_bytes (current_block, destptr, size);
+
+	      length -= size;
+	      current_block += size;
+	      destptr += size;
+	    }
+
+	  if(lastFlashBlock)
+	    {
+	      lastFlashBlock->next = fBlock;
+	    }
+	  else
+	    {
+	      firstFlashBlock = fBlock;
+	    }
+
+	  lastFlashBlock = fBlock;
+	}
+
+      fBlock->flashBlockGDBState = 1;
+
+      /* walk down the remove breakpoint list to see if this is an installed breakpoint */
+      for(i=0; i< fBlock->numRemoveBPs; i++)
+	if(fBlock->breakpointRemoveList[i] == addr)
+	  break;
+
+      if(i < fBlock->numRemoveBPs)
+	{
+	  /* we need to collapse the breakpointRemoveList queue by one */
+	  memcpy((void *)&fBlock->breakpointRemoveList[i],
+		(void *)&fBlock->breakpointRemoveList[i+1],
+		(fBlock->numRemoveBPs-- - i)* sizeof(unsigned int));
+	  BPState = 1;		/* indicate this is an old installed Breakpoint  */
+	}
+
+      /* We now have a valid Flash Block pointer.
+       * Walk down the breakpointList to see if this address is already there.
+       */
+      for(i=0; i< fBlock->numBreakpoints; i++)
+	if(fBlock->breakpointList[i] == (unsigned short)addr)
+	  break;
+
+      if(i == fBlock->numBreakpoints)
+	{
+	  if(BPState == 0)
+	    {
+	      /* This is a new breakpoint */
+	      fBlock->flashState = 0;
+	    }
+
+	  if(fBlock->numBreakpoints == fBlock->bpListSpace)
+	    {
+	      /* we are out of space. Time to realloc and bump up by 16 entries */
+	      unsigned int *temp =
+		(unsigned int *)realloc(fBlock->breakpointList,
+					sizeof(unsigned int)*(fBlock->bpListSpace + 16));
+
+	      if(temp == NULL)
+		exit(3);
+
+	      fBlock->breakpointList = temp;
+	      fBlock->bpListSpace +=16;
+	    }
+
+	  /* send back the original code back to GDB */
+	  memcpy((void *) bp_tgt->shadow_contents,
+		 (void *) &fBlock->code[(addr & (flashSectorSize -1))/sizeof(unsigned int)],
+		 sizeof(unsigned int));
+
+	  /* copy the address into the breakpointList */
+	  fBlock->breakpointList[fBlock->numBreakpoints ++] = (unsigned int)addr;
+
+	  /* if is an old Breakpoint change is to the break instruction */
+	  if(BPState)
+	    {
+	      fBlock->code[(addr & (flashSectorSize -1))/sizeof(unsigned int)] = bpToSend;
+	    }
+	}
+      return 0;
+    }
+  else
+    return EINVAL;
+}
+
+static int
+ubicom32_remove_breakpoint (struct bp_target_info *bp_tgt)
+{
+  unsigned int *bp = (unsigned int *) gdbarch_breakpoint_from_pc(current_gdbarch, &bp_tgt->placed_address, &bp_tgt->placed_size);
+  CORE_ADDR addr = bp_tgt->placed_address;
+  int ret, i;
+  char *prev_contents = (char *)malloc(bp_tgt->placed_size);
+  char *cptr = (char *) bp;
+  int *iptr = (int *)prev_contents;
+  unsigned int flashSectorIgnore = (flashSectorSize < 16*1024)? 16*1024: flashSectorSize;
+
+  /* make sure the address is in the PRAM space. XXXXXX May change in the future */
+  if(addr >=0x40000000 &&  0x40080000 > addr)
+    {
+
+      /* read out the old contents */
+      ret = ubicom32_read_bytes (addr, prev_contents, bp_tgt->placed_size);
+
+#if 0
+      /* blow off the lower 11 bits */
+      *iptr &= ~(0x7ff);
+#endif
+
+      /* check if we do have a bp instruction at this address */
+      for(ret =0; ret< bp_tgt->placed_size-1; ret++)
+	if(cptr[ret] != prev_contents[ret])
+	  return 0;
+
+      /* write in the old contents */
+      ret = ubicom32_write_bytes (addr, (char *) bp_tgt->shadow_contents, bp_tgt->placed_size);
+
+      if(ret == bp_tgt->placed_size)
+	return 0;
+      else
+	return -1;
+    }
+  else if(addr >= (0x20000000 + flashSectorIgnore) && (0x20000000 + flashSize) > addr)
+    {
+      /* flash break point case. Walk down the flash block list to find the block */
+      unsigned int blockNo = (unsigned int)( addr & ~(flashSectorSize-1) );
+      FBlock_t *fBlock = firstFlashBlock;
+      ret = 0;
+
+      /* walk down the Flash block list and find the current block */
+      while(fBlock)
+	{
+	  if(fBlock->blockNumber == blockNo)
+	    {
+	      /* we have a hit */
+	      break;
+	    }
+	  else
+	    fBlock = fBlock->next;
+	}
+
+      if(fBlock == NULL)
+	{
+	  exit(5);
+	}
+
+      /* We now have a valid Flash Block pointer.
+       * Walk down the breakpointList to see if this address is already there.
+       */
+      for(i=0; i< fBlock->numBreakpoints; i++)
+	if(fBlock->breakpointList[i] == (unsigned int)addr)
+	  break;
+
+      if(i == fBlock->numBreakpoints)
+	{
+	  /* This is a error */
+	  exit(6);
+	}
+
+      /* we have a valid entry to remove */
+      memcpy((void *) &fBlock->code[(addr & (flashSectorSize -1 ))/sizeof(unsigned int)],
+	     (void *) bp_tgt->shadow_contents,
+	     sizeof(unsigned int));
+
+      /* we need to collapse the breakpointList queue by one */
+      memcpy((void *)&fBlock->breakpointList[i],
+	     (void *)&fBlock->breakpointList[i+1],
+	    (fBlock->numBreakpoints-- - i)* sizeof(unsigned int));
+
+      if(fBlock->flashState == 1)
+	{
+	  /*
+	   * We are dealing with a BP that is installed in the flash.
+	   * We need to install it in the remove list.
+	   *
+	   * Walk down the breakpointRemoveList to see if this address is already there.
+	   */
+	  for(i=0; i< fBlock->numRemoveBPs; i++)
+	    if(fBlock->breakpointRemoveList[i] == (unsigned int)addr)
+	      break;
+
+	  if(i == fBlock->numRemoveBPs)
+	    {
+	      if(fBlock->numRemoveBPs == fBlock->bpListRemoveSpace)
+		{
+		  /* we are out of space. Time to realloc and bump up by 16 entries */
+		  unsigned int *temp =
+		    (unsigned int *)realloc(fBlock->breakpointRemoveList,
+					    (fBlock->bpListRemoveSpace + 16) * sizeof (unsigned int));
+
+		  if(temp == NULL)
+		    exit(3);
+
+		  fBlock->breakpointRemoveList = temp;
+		  fBlock->bpListRemoveSpace +=16;
+		}
+
+	      /* copy the address into the breakpointRemoveList */
+	      fBlock->breakpointRemoveList[fBlock->numRemoveBPs ++] = (unsigned int)addr;
+	    }
+	}
+      fBlock->flashBlockGDBState = 2;
+
+      if(fBlock->numBreakpoints == 0 && fBlock->numRemoveBPs == 0)
+	{
+	  /* This block has no breakpoints in it */
+	  fBlock->flashState = 2;
+	}
+      return 0;
+    }
+  else
+    return EINVAL;
+}
+
+/*
+ * Collect a descriptive string about the given thread.
+ * The target may say anything it wants to about the thread
+ * (typically info about its blocked / runnable state, name, etc.).
+ * This string will appear in the info threads display.
+ *
+ * Optional: targets are not required to implement this function.
+ */
+
+static char *
+ubicom32_threads_extra_info (struct thread_info *tp)
+{
+  unsigned int thread_num;
+  extern char * ubicom32_remote_threads_extra_info (struct thread_info *tp);
+  static char dbgbuffer[] = "Dbg Thread";
+  thread_num = PIDGET(tp->ptid);
+
+  ubicom32_current_thread = thread_num;
+  set_thread(thread_num);
+
+  if(ubicom32_current_thread - 1 == debuggerThreadNo)
+    return dbgbuffer;
+  else
+    return (ubicom32_remote_threads_extra_info(tp));
+}
+
+/* ubicom32_protect.  */
+static void
+ubicom32_protect (char *args, int from_tty)
+{
+  int ret;
+  if (remote_debug)
+    printf_filtered ("ubicom32_protect\n");
+
+  ret = protectBootSector();
+}
+
+/* ubicom32_unprotect.  */
+static void
+ubicom32_unprotect (char *args, int from_tty)
+{
+  int ret;
+  if (remote_debug)
+    printf_filtered ("ubicom32_unprotect\n");
+
+  ret = unprotectBootSector();
+}
+
+/* init_ubicom32_ops.  */
+static void
+init_ubicom32_ops (void)
+{
+  ubicom32_ops.to_shortname = "ubicom32";
+  ubicom32_ops.to_longname = "Remote ubicom32 debug Via Ubicom Ethernet Dongle";
+  ubicom32_ops.to_doc = "Remote ubicom32 debug Via Ubicom Ethernet Dongle.\n\
+Connect to target ubicom32 board as follows:\n\
+target ubicom32 dongle-ip-address:5010\n\
+";
+  ubicom32_ops.to_open = ubicom32_open;
+  ubicom32_ops.to_close = ubicom32_close;
+  ubicom32_ops.to_attach = ubicom32_attach;
+  ubicom32_ops.to_post_attach = NULL;
+  ubicom32_ops.to_detach = ubicom32_detach;
+  ubicom32_ops.to_resume = ubicom32_resume;
+  ubicom32_ops.to_wait = ubicom32_wait;
+  ubicom32_ops.to_fetch_registers = ubicom32_fetch_register;
+  ubicom32_ops.to_store_registers = ubicom32_store_register;
+  ubicom32_ops.to_prepare_to_store = ubicom32_prepare_to_store;
+  ubicom32_ops.deprecated_xfer_memory = ubicom32_xfer_memory;
+  ubicom32_ops.to_files_info = ubicom32_files_info;
+  ubicom32_ops.to_kill = ubicom32_kill;
+  ubicom32_ops.to_load = ubicom32_load;
+  ubicom32_ops.to_insert_breakpoint = ubicom32_insert_breakpoint;
+  ubicom32_ops.to_remove_breakpoint = ubicom32_remove_breakpoint;
+
+  ubicom32_ops.to_terminal_init = NULL;
+  ubicom32_ops.to_terminal_inferior = NULL;
+  ubicom32_ops.to_terminal_ours_for_output = NULL;
+  ubicom32_ops.to_terminal_ours = NULL;
+  ubicom32_ops.to_terminal_info = NULL;
+  ubicom32_ops.to_lookup_symbol = NULL;
+  ubicom32_ops.to_create_inferior = NULL;
+  ubicom32_ops.to_post_startup_inferior = NULL;
+  ubicom32_ops.to_acknowledge_created_inferior = NULL;
+  ubicom32_ops.to_insert_fork_catchpoint = NULL;
+  ubicom32_ops.to_remove_fork_catchpoint = NULL;
+  ubicom32_ops.to_insert_vfork_catchpoint = NULL;
+  ubicom32_ops.to_remove_vfork_catchpoint = NULL;
+  ubicom32_ops.to_insert_exec_catchpoint = NULL;
+  ubicom32_ops.to_remove_exec_catchpoint = NULL;
+  ubicom32_ops.to_reported_exec_events_per_exec_call = NULL;
+  ubicom32_ops.to_has_exited = NULL;
+  ubicom32_ops.to_mourn_inferior = NULL;
+  ubicom32_ops.to_can_run = 0;
+  ubicom32_ops.to_notice_signals = 0;
+  ubicom32_ops.to_thread_alive = ubicom32_thread_alive;
+  ubicom32_ops.to_pid_to_str = ubicom32_thread_pid_to_str;
+  ubicom32_ops.to_stop = ubicom32_stop;
+  ubicom32_ops.to_pid_to_exec_file = NULL;
+  ubicom32_ops.to_stratum = process_stratum;
+  ubicom32_ops.to_has_all_memory = 1;
+  ubicom32_ops.to_has_memory = 1;
+  ubicom32_ops.to_has_stack = 1;
+  ubicom32_ops.to_has_registers = 1;
+  ubicom32_ops.to_has_execution = 1;
+  ubicom32_ops.to_sections = NULL;
+  ubicom32_ops.to_sections_end = NULL;
+  ubicom32_ops.to_magic = OPS_MAGIC;
+  ubicom32_ops.to_extra_thread_info = ubicom32_threads_extra_info;
+}
+
+/* init_ubicom32_ops.  */
+static void
+init_ubicom32_core_ops (void)
+{
+  ubicom32_core_ops.to_shortname = "ubicom32core";
+  ubicom32_core_ops.to_longname = "Remote ubicom32 debug Via Ubicom core File.";
+  ubicom32_core_ops.to_doc = "Remote ubicom32 debug Via Ubicom core File.\n\
+Invoke as ubicom32-elf-gdb elffile corefile.\n\
+";
+  ubicom32_core_ops.to_open = ubicom32_core_open;
+  ubicom32_core_ops.to_close = ubicom32_core_close;
+  ubicom32_core_ops.to_attach = NULL;
+  ubicom32_core_ops.to_post_attach = NULL;
+  ubicom32_core_ops.to_detach = ubicom32_core_detach;
+  ubicom32_core_ops.to_resume = NULL;
+  ubicom32_core_ops.to_wait = ubicom32_wait;
+  ubicom32_core_ops.to_fetch_registers = ubicom32_fetch_register;
+  ubicom32_core_ops.to_store_registers = NULL;
+  ubicom32_core_ops.to_prepare_to_store = ubicom32_prepare_to_store;
+  ubicom32_core_ops.deprecated_xfer_memory = ubicom32_core_xfer_memory;
+  ubicom32_core_ops.to_files_info = ubicom32_files_info;
+  ubicom32_core_ops.to_kill = ubicom32_core_kill;
+  ubicom32_core_ops.to_load = NULL;
+  ubicom32_core_ops.to_insert_breakpoint = NULL;
+  ubicom32_core_ops.to_remove_breakpoint = NULL;
+
+  ubicom32_core_ops.to_terminal_init = NULL;
+  ubicom32_core_ops.to_terminal_inferior = NULL;
+  ubicom32_core_ops.to_terminal_ours_for_output = NULL;
+  ubicom32_core_ops.to_terminal_ours = NULL;
+  ubicom32_core_ops.to_terminal_info = NULL;
+  ubicom32_core_ops.to_lookup_symbol = NULL;
+  ubicom32_core_ops.to_create_inferior = NULL;
+  ubicom32_core_ops.to_post_startup_inferior = NULL;
+  ubicom32_core_ops.to_acknowledge_created_inferior = NULL;
+  ubicom32_core_ops.to_insert_fork_catchpoint = NULL;
+  ubicom32_core_ops.to_remove_fork_catchpoint = NULL;
+  ubicom32_core_ops.to_insert_vfork_catchpoint = NULL;
+  ubicom32_core_ops.to_remove_vfork_catchpoint = NULL;
+  ubicom32_core_ops.to_insert_exec_catchpoint = NULL;
+  ubicom32_core_ops.to_remove_exec_catchpoint = NULL;
+  ubicom32_core_ops.to_reported_exec_events_per_exec_call = NULL;
+  ubicom32_core_ops.to_has_exited = NULL;
+  ubicom32_core_ops.to_mourn_inferior = NULL;
+  ubicom32_core_ops.to_can_run = 0;
+  ubicom32_core_ops.to_notice_signals = 0;
+  ubicom32_core_ops.to_thread_alive = ubicom32_thread_alive;
+  ubicom32_core_ops.to_pid_to_str = ubicom32_thread_pid_to_str;
+  ubicom32_core_ops.to_stop = NULL;
+  ubicom32_core_ops.to_pid_to_exec_file = NULL;
+  ubicom32_core_ops.to_stratum = core_stratum;
+  ubicom32_core_ops.to_has_all_memory = 1;
+  ubicom32_core_ops.to_has_memory = 1;
+  ubicom32_core_ops.to_has_stack = 1;
+  ubicom32_core_ops.to_has_registers = 1;
+  ubicom32_core_ops.to_has_execution = 1;
+  ubicom32_core_ops.to_sections = NULL;
+  ubicom32_core_ops.to_sections_end = NULL;
+  ubicom32_core_ops.to_magic = OPS_MAGIC;
+  ubicom32_core_ops.to_extra_thread_info = ubicom32_threads_extra_info;
+}
+
+
+void
+_initialize_ubicom32 (void)
+{
+  init_ubicom32_ops ();
+  init_ubicom32_core_ops ();
+  add_target (&ubicom32_ops);
+  add_target (&ubicom32_core_ops);
+  add_com ("reset", class_obscure, common_reset, "reset target.");
+  /* Backward compatability.  */
+  add_com ("ubicom32reset", class_obscure, common_reset,
+	   "Backward compatability - use 'reset'.");
+  add_com ("flashinfo", class_obscure, ubicom32_flash_info,
+	   "Backward compatability - use 'reset'.");
+  add_com ("hwmon", class_obscure, ubicom32_hw_mon,
+	   "Backward compatability - use 'reset'.");
+  add_com ("hwsample", class_obscure, ubicom32_hw_mon_sample,
+	   "Used to sample the pc 1000 times every 10ms.");
+  add_com ("verify", class_obscure, ubicom32_verify,
+	   "Used to verify contents of flash.");
+  add_com ("coredump", class_obscure, ubicom32_core_dump,
+	   "Used to create a core dump of the machine state.\n\
+Usage:\n\
+coredump\n\
+\tUBICOM32 processor: This will dump core to a file called Ubicom.core \n\twith 16MB of sdram and all of the flash.\n\
+\tDump will take 2 minutes to complete.\n\n\
+\tUBICOM32V3 processor: This will dump core to a file called Ubicom.core \n\twith 64MB of DDR memory and 4MB of FLASH memory.\n\
+\tDump will take 10 minutes to complete.\n\n\
+");
+  add_com ("ubicom32protect", class_obscure, ubicom32_protect, "Protect the Flash Boot sector.");
+
+  add_com ("ubicom32unprotect", class_obscure, ubicom32_unprotect, "Unprotect the Flash Boot sector.");
+
+  add_com ("loadprotect", class_obscure, ubicom32_load_protect, "Load the \".protect\". section into Flash Boot sector.");
+  add_com ("fixprotect", class_obscure, ubicom32_fix_protect, "Load the \".protect\". section into Flash Boot sector via pram.");
+  add_com ("mstat", class_obscure, ubicom32_mail_status, "Printout mail box status.");
+  add_com ("rdmail", class_obscure, ubicom32_read_mailbox, "Read data from mail box.");
+  add_com ("fstat", class_obscure, ubicom32FlashStats, "Print out stats about breakpoints in Flash.");
+  //  add_com ("restore", class_obscure, ubicom32RestoreBlock, "Restore a flash block.");
+
+#if 0
+  add_com ("mclear", class_obscure, ubicom32_mail_clear, "Load the \".protect\". section into Flash Boot sector.");
+#endif
+}
--- /dev/null
+++ b/gdb/remote-ubicom32-isd.h
@@ -0,0 +1,287 @@
+/* Target-dependent code for GDB, the GNU debugger.
+
+   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 
+   2009
+   Free Software Foundation, Inc.
+
+   This file is part of GDB.
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.
+*/
+/* Main processor kernel Debugger API defines */
+#define BREAKPOINT_HIT		0x00000001
+
+#define READ_STATUS 		0x00000002
+#define READ_STATUS_DONE 	READ_STATUS
+
+#define READ_DATA_MEMORY	0x00000003
+#define READ_DATA_MEMORY_DONE 	READ_DATA_MEMORY
+
+#define WRITE_DATA_MEMORY	0x00000004
+#define WRITE_DATA_MEMORY_DONE 	WRITE_DATA_MEMORY
+
+#define READ_REGISTERS 		0x00000005
+#define READ_REGISTERS_DONE 	READ_REGISTERS
+
+#define WRITE_REGISTERS 	0x00000006
+#define WRITE_REGISTERS_DONE 	WRITE_REGISTERS
+
+#define READ_PGM_MEMORY 	0x00000007
+#define READ_PGM_MEMORY_DONE 	READ_PGM_MEMORY
+
+#define WRITE_PGM_MEMORY 	0x00000008
+#define WRITE_PGM_MEMORY_DONE 	WRITE_PGM_MEMORY
+
+#define READ_FLASH_MEMORY 	0x00000009
+#define READ_FLASH_MEMORY_DONE 	READ_FLASH_MEMORY
+
+#define WRITE_FLASH_MEMORY 	0x0000000a
+#define WRITE_FLASH_MEMORY_DONE WRITE_FLASH_MEMORY
+
+#define ERASE_FLASH_MEMORY 	0x0000000b
+#define ERASE_FLASH_MEMORY_DONE ERASE_FLASH_MEMORY
+
+#define COPY_DATA_MEMORY 	0x0000000c
+#define COPY_DATA_MEMORY_DONE 	COPY_DATA_MEMORY
+
+#define STOP 			0x0000000d
+#define STOP_DONE 		STOP
+
+#define START 			0x0000000e
+#define START_DONE 		START
+
+#define SINGLE_STEP 		0x0000000f
+#define SINGLE_STEP_DONE 	SINGLE_STEP
+
+#define GET_COPRO_REG		0x00000010
+#define GET_COPRO_REG_DONE	GET_COPRO_REG
+
+#define SET_COPRO_REG		0x00000011
+#define SET_COPRO_REG_DONE	SET_COPRO_REG
+
+#define STOP_COPRO		0x00000012
+#define STOP_COPRO_DONE		STOP_COPRO
+
+#define START_COPRO		0x00000013
+#define START_COPRO_DONE	START_COPRO
+
+#define ATTACH_DEBUGGER		0x00000014
+#define ATTACH_DEBUGGER_DONE	ATTACH_DEBUGGER
+
+#define DETACH_DEBUGGER		0x00000015
+#define DETACH_DEBUGGER_DONE	DETACH_DEBUGGER
+
+#define GET_COPRO_TREGS		0x00000016
+#define GET_COPRO_TREGS_DONE	GET_COPRO_TREGS
+
+#define DEBUGGER_THREAD_NO	0x00000017
+#define DEBUGGER_THREAD_NO_DONE DEBUGGER_THREAD_NO
+
+#define DEBUGGER_DONT_DEBUG_MASK	0x00000018
+#define DEBUGGER_DONT_DEBUG_MASK_DONE	DEBUGGER_DONT_DEBUG_MASK
+
+#define GET_STATIC_BP_ADDRS	0x00000019
+#define GET_STATIC_BP_ADDRS_DONE	GET_STATIC_BP_ADDRS
+
+#define GET_THREAD_PCS	0x0000001a
+#define GET_THREAD_PCS_DONE	GET_THREAD_PCS
+
+#define ERASE_FLASH	0x0000001b
+#define ERASE_FLASH_DONE	ERASE_FLASH
+
+#define WHO_ARE_YOU	0x0000001c
+#define WHO_ARE_YOU_DONE	WHO_ARE_YOU
+
+#define PROTECT_SECTOR	0x0000001d
+#define PROTECT_SECTOR_DONE	PROTECT_SECTOR
+
+#define BAD_COMMAND 0x0000001e
+
+#define GET_FLASH_DETAILS 0x0000001f
+#define GET_FLASH_DETAILS_DONE GET_FLASH_DETAILS
+
+#define DCAPT_ERROR	0x00000020
+#define PARITY_ERROR	0x00000021
+
+#define GET_VERSION 	0x00000022
+#define GET_VERSION_DONE	GET_VERSION
+
+#define UNPROTECT_SECTOR	0x00000023
+#define UNPROTECT_SECTOR_DONE	UNPROTECT_SECTOR
+
+#define CRC_PGM_MEMORY		0x00000024
+#define CRC_PGM_MEMORY_DONE	CRC_PGM_MEMORY
+
+#define JUMP_TO_PC		0x00000025
+#define JUMP_TO_PC_DONE		JUMP_TO_PC
+
+#define GET_SGL_STP_BUF		0x00000026
+#define GET_SGL_STP_BUF_DONE	GET_SGL_STP_BUF
+
+#define TRAP			0x00000027
+#define HALT			0x00000028
+
+#define START_SENDING		0xffccdde2
+
+/* Mail Box Queue Status bit defines XXXX Probably subject to change*/
+#define M_BOX_IN_Q_EMPTY	0x40000000
+#define M_BOX_IN_Q_FULL		0x80000000
+#define M_BOX_OUT_Q_EMPTY	0x10000000
+#define M_BOX_OUT_Q_FULL	0x20000000
+
+
+#define ISPISD_PACKET_MAGIC 0x123455AA
+#define ISPISD_OPCODE_UBICOM32COMMAND 0x00000002
+#define ISPISD_OPCODE_UBICOM32COMMAND_DONGLE_CHECK 0x00000003
+#define ISPISD_OPCODE_UBICOM32COMMAND_READ_MAILBOX 0x00000004
+#define ISPISD_OPCODE_UBICOM32COMMAND_WRITE_MAILBOX 0x00000005
+#define ISPISD_OPCODE_UBICOM32COMMAND_DONGLE_CHECK_MARS 0x00000006
+#define ISPISD_OPCODE_UBICOM32COMMAND_READ_MAILBOX_UBICOM32V3 0x00000007
+#define ISPISD_OPCODE_UBICOM32COMMAND_READ_MAILBOX_UBICOM32 0x00000008
+#define ISPISD_OPCODE_UBICOM32COMMAND_DONGLE_CHECK_UBIPOD 0x00000009
+#define ISPISD_OPCODE_UBICOM32COMMAND_DONGLE_STOP_2WIRE 0x0000000A
+#define ISPISD_OPCODE_UBICOM32COMMAND_DONGLE_START_2WIRE 0x0000000B
+#define ISPISD_OPCODE_UBICOM32COMMAND_DONGLE_STOP_CONSOLE 0x0000000C
+#define ISPISD_OPCODE_UBICOM32COMMAND_DONGLE_START_CONSOLE 0x0000000D
+#define ISPISD_OPCODE_UBICOM32COMMAND_DONGLE_UNCLOG_MAILBOX 0x0000000E
+
+
+struct ubicom32ispisd_packet {
+	unsigned int magic;
+	unsigned int length;
+	unsigned int opcode;
+	unsigned int operand;
+};
+
+/*
+ * ubicom32
+ */
+#define UBICOM32COMMAND_MAX_COMMANDS_PER_PACKET 128
+#define UBICOM32COMMAND_TIMEOUT_NORMAL 100
+
+struct ubicom32command {
+	unsigned char reserved0;
+	unsigned char reserved1;
+	unsigned char options;
+	unsigned char opcode;
+	unsigned char operand0;
+	unsigned char operand1;
+	unsigned char operand2;
+	unsigned char operand3;
+};
+
+struct ubicom32command_packet {
+	struct ubicom32ispisd_packet header;
+	struct ubicom32command commands[UBICOM32COMMAND_MAX_COMMANDS_PER_PACKET];
+};
+
+#define WRITE_CHECK	0x08
+#define READ_CHECK	0x10
+#define IBUF_CHECK	0x20
+//#define IBUF_CHECK	0x0
+#define OPTION_FORCE 0x01
+#define OPTION_IGNORE_RESPONSE 0x04
+#define OPTION_EXTENDED_TIMEOUT 0x2
+
+extern void retrieve_pending_packet(void);
+extern int ubicom32ispisd_packet_send (struct ubicom32ispisd_packet *packet);
+extern void ubicom32command_packet_init (struct ubicom32command_packet *packet);
+extern void ubicom32command_packet_init_opcode (struct ubicom32command_packet *packet, unsigned int opcode);
+extern int ubicom32command_packet_send (struct ubicom32command_packet *packet);
+extern int ubicom32command_packet_append (struct ubicom32command_packet *packet,
+				      unsigned char options, unsigned char opcode,
+				      unsigned int operand);
+extern int ubicom32command_packet_get_next (struct ubicom32command_packet *packet);
+extern int ubicom32command_packet_get_free (struct ubicom32command_packet *packet);
+extern int debugOpen(void);
+extern int debugReset(void);
+extern int debugClose(void);
+extern int readStatus(int *status); /* Isses ISD_MAIL_STATUS command */
+extern int readMailbox(int *mboxData);
+extern void ubicom32_erase_progress_callback(int total_length, int current_length, int block_size, void *param);
+extern int turnOff2wire(void);
+extern int turnOn2wire(void);
+extern int turnOffconsole(void);
+extern int turnOnconsole(void);
+enum threadState {
+  OK,
+  UNCONTROLLED,
+  COPRODEAD,
+  DISABLED,
+  SUSPENDED,
+};
+
+enum connection_status {
+  OPEN,
+  RESET_ISSUED,
+  CONN_BOOT_LOADER,
+  CONN_APP,
+  CONN_BOOT_LOADER2,
+};
+
+typedef struct addrBounds {
+  int lower;
+  int upper;
+} addrBounds_t;
+
+typedef struct FlashBlock_s {
+  unsigned int blockNumber;	/* Flash block number 0 - 0xff */
+  unsigned int *code;		/* Pointer to the code block */
+  unsigned short numBreakpoints; /* Number of breakpoints in this block */
+  unsigned short bpListSpace;	/* How much have we allocated for the breakpointList */
+  unsigned int *breakpointList; /* Pointer to the breakpoint list. Holds the BP address */
+  unsigned short numRemoveBPs;	/* Number of removed BPS */
+  unsigned short bpListRemoveSpace; /* Space allocated for removed bps */
+  unsigned int *breakpointRemoveList;	/* Pointer to removed BP list */
+  struct FlashBlock_s *next;	/* Pointer to the next flash block */
+  unsigned char flashBlockGDBState; /* 0 = new 1= Insert 2= Remove */
+  unsigned char flashState;	/* 0 = new Bps 1= BPs Installed 2= No BPs */
+  unsigned int numWrites;	/* Keep track of number of times this block got written */
+} FBlock_t;
+
+extern FBlock_t *firstFlashBlock, *lastFlashBlock;
+extern unsigned int ubicom32WriteFlashBlock(FBlock_t * );
+
+enum ubicom32v3_state {
+  UBICOM32V3_RUNNING,
+  UBICOM32V3_STOPPED,
+  UBICOM32V3_DETACHED,
+  UBICOM32V3_STEPPING,
+  UBICOM32V3_STEPPING_PROBLEMS,
+  UBICOM32V3_TRAP_ERROR,
+  UBICOM32V3_CORE_STOPPED,
+};
+
+extern enum ubicom32v3_state remote_ubicom32v3_state;
+
+struct ubicom32_cpu 
+{
+  void *registers;		/* Pointer to the register structure. */
+  int reg_area_size;		/* Size of the Register save area */
+  int num_threads;		/* # of hardware threads. */
+  int num_per_thread_regs;	/* # of per thread registers */
+  int num_global_regs;		/* # of global registers */
+  int core_magic;		/* Core Magic number */
+  int *register_map_table;	/* GDB index to Register Address Mapping table. */
+  int (*fetch_registers_fn)(struct ubicom32_cpu *cpu, int threadNo); /* Function to retrieve all registers from hardware */
+  int (*fetch_tpacket_regs_fn)(struct ubicom32_cpu *cpu, int threadNo); /* Function to retrieve T Packet registers. */
+  void (*supply_register_fn)(struct ubicom32_cpu *cpu, int threadNo, void *regcache); /* Function to supply register data to GDB front end. */
+  void (*supply_tpacket_regs_fn)(struct ubicom32_cpu *cpu, int threadNo); /* Function to supply T Packet register data to GDB front end. */
+  int (*write_register_fn)(int threadNo, int regIndex, int *inBuf, unsigned int length); /* Function to write to a cpu register real/core */
+  void (*read_core_fn)(struct ubicom32_cpu *cpu);	/* Function to retrive core file data */
+  void (*write_core_fn)(struct ubicom32_cpu *cpu); /* Function to write state to core. */
+};
+
+extern struct ubicom32_cpu *current_cpu;
+extern struct ubicom32_cpu ubicom32_cpus[];
--- /dev/null
+++ b/gdb/remote-ubicom32-posix-backend.c
@@ -0,0 +1,501 @@
+/* Target-dependent code for GDB, the GNU debugger.
+
+   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 
+   2009
+   Free Software Foundation, Inc.
+
+   This file is part of GDB.
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.
+*/
+#include <sys/types.h>
+#include <errno.h>
+#include <stdlib.h>
+#include <stdio.h>
+#if defined(_WIN32)
+#include <winsock.h>
+#define usleep(x) Sleep(x/1000)
+#else
+#include <netinet/in.h>
+#include <unistd.h>
+#endif
+#include <string.h>
+#include "ubicom32_dongle.h"
+#include "remote-ubicom32-posix-backend.h"
+
+#define MAX_PACKET_DATA 1280
+struct posix_gdb_packet {
+  unsigned int data[MAX_PACKET_DATA/4];
+};
+
+enum posix_gdb_commands {
+	POSIX_GDB_READ_REGISTER,
+	POSIX_GDB_WRITE_REGISTER,
+	POSIX_GDB_READ_MEMORY,
+	POSIX_GDB_WRITE_MEMORY,
+	POSIX_GDB_POSIX_STATUS,
+	POSIX_GDB_PROCESS_STATUS,
+	POSIX_GDB_ATTACH,
+	POSIX_GDB_DETACH,
+	POSIX_GDB_RESTART,
+	POSIX_GDB_RESTART_A_THREAD,
+	POSIX_GDB_STOP,
+	POSIX_GDB_EVENT,
+	POSIX_GDB_TERMINATE,
+	POSIX_GDB_RESET,
+};
+
+#define POSIX_GDB_HEADER_SIZE 8
+#define POSIX_GDB_MAGIC 0xaabbccdd
+
+static void
+posix_packet_init(struct posix_gdb_packet *packet, unsigned int gdb_command)
+{
+  /*
+   * Initialize the first location to Magic, set length to 12 bytes, and location after that to command.
+   */
+  packet->data[0] = POSIX_GDB_MAGIC;
+  packet->data[1] = 12;
+  packet->data[2] = gdb_command;
+}
+
+static unsigned int
+posix_packet_append(struct posix_gdb_packet *packet, unsigned int pkt_data)
+{
+  packet->data[packet->data[1]/4] = pkt_data;
+  packet->data[1] += 4;
+  return packet->data[1];
+}
+
+static int
+posix_packet_send(struct posix_gdb_packet *packet)
+{
+  /* First convert all the data to network byte order. */
+  unsigned int count = packet->data[1]/4;
+  unsigned int i, *src, *dst;
+  char *ptr = (char *)packet;
+
+  src = dst = packet->data;
+  for(i=0; i< count; i++)
+    *dst++ = htonl(*src++);
+
+  if (dongle_write((char *) packet, count*4) != 0)
+    {
+      dongle_close ();
+      dongle_error ("error: send communication error!");
+    }
+
+  /*
+   * We are going to get at least 12 bytes (MAGIC, length and gdb command).
+   */
+  if(dongle_read(ptr, 12))
+    {
+      dongle_close ();
+      dongle_error ("error: recv communication error!");
+    }
+
+  /*
+   * Convert the 12 bytes we got back to host order. We will look at the length
+   * and read more bytes if needed.
+   */
+  src = dst = packet->data;
+  for(i=0; i< 3; i++)
+    *dst++ = ntohl(*src++);
+
+  /*
+   * Make sure the magic we go back is sane.
+   */
+  if (packet->data[0] != POSIX_GDB_MAGIC)
+    {
+      dongle_error("Incorrect magic.");
+      return -1;
+    }
+
+  if(packet->data[1] > 12)
+    {
+      /*
+       * There is more data to be read in.
+       */
+      ptr += 12;
+      if(dongle_read(ptr, packet->data[1]-12))
+	{
+	  dongle_close ();
+	  dongle_error ("error: recv communication error!");
+	}
+
+      /*
+       * Convert the data back to host byte order.
+       */
+      src = dst = (unsigned int *)ptr;
+      count = (packet->data[1]-12)/4;
+      for(i=0; i< count; i++)
+	*dst++ = ntohl(*src++);
+    }
+
+  return 0;
+}
+
+int 
+ubicom32_remote_posix_detach(void)
+{
+  struct posix_gdb_packet packet;
+
+  posix_packet_init(&packet, POSIX_GDB_DETACH);
+
+  return (posix_packet_send(&packet));
+}
+
+/*
+ * Connect to the remote via ethernet.
+ */
+int 
+ubicom32_remote_posix_connect(char *remote)
+{
+  if(dongle_interface_status())
+    {
+      ubicom32_remote_posix_detach();
+      dongle_close();
+    }
+
+  return (dongle_open(remote));
+}
+
+/*
+ * Shutdown the connection to remote ethernet.
+ */
+int 
+ubicom32_remote_posix_close(void)
+{
+  dongle_close();
+  return 0;
+}
+
+int
+ubicom32_remote_posix_get_status(struct ubicom32_posix_process *gdb_proc)
+{
+  int ret;
+  struct posix_gdb_packet packet;
+
+  /* Now send down POSIX_GDB_PROCESS_STATUS to get the pthread information. */
+  posix_packet_init(&packet, POSIX_GDB_PROCESS_STATUS);
+  /* Time to ship down the packet. */
+  ret = posix_packet_send(&packet);
+  if(ret)
+    return ret;
+
+  gdb_proc->num_pthreads = packet.data[3];
+  
+  /* copy the pthread info into gdb_proc structure. */
+  memcpy(gdb_proc->pthreads, &packet.data[4], gdb_proc->num_pthreads*4);
+
+  return 0;
+}
+
+/*
+ * Attach to a specific posix process.
+ */
+int
+ubicom32_remote_posix_attach(unsigned int text_start, unsigned int text_size, unsigned int data_start, unsigned int data_size, struct ubicom32_posix_process *gdb_proc)
+{
+  int ret;
+  struct posix_gdb_packet packet;
+  unsigned int count;
+
+  /* Create a POSIX_GDB_ATTACH packet. */
+  posix_packet_init(&packet, POSIX_GDB_ATTACH);
+  count = posix_packet_append(&packet, text_start);
+  count = posix_packet_append(&packet, text_size);
+  count = posix_packet_append(&packet, data_start);
+  count = posix_packet_append(&packet, data_size);
+
+  /* Time to ship down the packet. */
+  ret = posix_packet_send(&packet);
+  if(ret)
+    return ret;
+
+  gdb_proc->proc = packet.data[4];
+  return packet.data[3];
+}
+
+int
+ubicom32_remote_fetch_registers(struct ubicom32_posix_process *gdb_proc)
+{
+  int ret;
+  struct posix_gdb_packet packet;
+  unsigned int count;
+
+  /* Create a POSIX_GDB_READ_REGISTER packet. */
+  posix_packet_init(&packet, POSIX_GDB_READ_REGISTER);
+
+  /* Add the thread id to the packet. */
+  count = posix_packet_append(&packet, gdb_proc->current_thread);
+
+  /* Time to ship down the packet. */
+  ret = posix_packet_send(&packet);
+  if(ret)
+    return ret;
+
+  /* packet.data[3] returns the type of frame we got back. */
+  if (packet.data[3] == 0)
+    {
+      /* Backend could not find the requested thread in its list. */
+      return -2;
+    }
+  else if (packet.data[3] == 1)
+    {
+      /*
+       * Regular preempted frame. Copy the reply block to the context structure.
+       */
+      memcpy(&gdb_proc->current_thread_context, &packet.data[4], sizeof (struct posix_context));
+      return 0;
+    }
+  else if (packet.data[3] == 2)
+    {
+      /*
+       * This is the syscall frame. We have to copy parts of this to the proper place.
+       */
+      struct posix_syscall_frame *sys_frame = (struct posix_syscall_frame *)&packet.data[4];
+      struct posix_context *ctxt = &gdb_proc->current_thread_context;
+
+      /* Copy the D registers. */
+      memcpy(ctxt->dn, &sys_frame->reg_d0, 4*8);
+
+      /* Copy a1 - a6 */
+      memcpy(&ctxt->an[1], &sys_frame->reg_a1, 4*6);
+
+      /* The stack pointer is sys_frame->frame_end */
+      ctxt->an[7] = sys_frame->frame_end;
+
+      /* PC is register a5 from the syscall frame. */
+      ctxt->pc = sys_frame->reg_a5;
+
+      return 0;
+    }
+  else
+    {
+      /* Unexpected reply. */
+      return -3;
+    }
+}
+
+int 
+ubicom32_remote_posix_read_memory(unsigned int leadaddr, unsigned int toreadwords, int *recvbuffer)
+{
+  int ret;
+  struct posix_gdb_packet packet;
+  unsigned int count;
+
+  while (toreadwords)
+    {
+      unsigned int transfer_size = (MAX_PACKET_DATA-16)/4;
+
+      if (transfer_size > toreadwords)
+	transfer_size = toreadwords;
+
+      posix_packet_init(&packet, POSIX_GDB_READ_MEMORY);
+      
+      /* append the transfer_size */
+      count = posix_packet_append(&packet, transfer_size);
+
+      /* append the address of the transfer. */
+      count = posix_packet_append(&packet, leadaddr);
+
+      /* Ship it down. */
+      ret = posix_packet_send(&packet);
+      if(ret)
+	return ret;
+
+      /* Got the reply. Check status. */
+      if (packet.data[3])
+	return packet.data[3];
+
+      /* Transfer data from the packet. */
+      memcpy(recvbuffer, &packet.data[4], transfer_size * 4);
+
+      /* Decrement and icrement various counters */
+      recvbuffer += transfer_size * 4;
+      toreadwords -= transfer_size;
+      leadaddr += transfer_size * 4;
+    }
+  return 0;
+}
+
+int 
+ubicom32_remote_posix_write_memory(unsigned int leadaddr, unsigned int towritewords, int *sendbuffer)
+{
+  int ret;
+  struct posix_gdb_packet packet;
+  unsigned int count;
+
+  while (towritewords)
+    {
+      unsigned int transfer_size = (MAX_PACKET_DATA-16)/4;
+
+      if (transfer_size > towritewords)
+	transfer_size = towritewords;
+
+      posix_packet_init(&packet, POSIX_GDB_WRITE_MEMORY);
+      
+      /* append the transfer_size */
+      count = posix_packet_append(&packet, transfer_size);
+
+      /* append the address of the transfer. */
+      count = posix_packet_append(&packet, leadaddr);
+
+      /* Copy the data into the packet. */
+      memcpy(&packet.data[count/4], sendbuffer, transfer_size * 4);
+      packet.data[1] += transfer_size * 4;
+
+      /* Ship it down. */
+      ret = posix_packet_send(&packet);
+      if(ret)
+	return ret;
+
+      /* Got the reply. Check status. */
+      if (packet.data[3])
+	return packet.data[3];
+
+      /* Decrement and icrement various counters */
+      sendbuffer += transfer_size * 4;
+      towritewords -= transfer_size;
+      leadaddr += transfer_size * 4;
+    }
+  return 0;
+}
+
+int
+ubicom32_remote_posix_restart(unsigned int signal)
+{
+  struct posix_gdb_packet packet;
+  unsigned int count;
+
+  posix_packet_init(&packet, POSIX_GDB_RESTART);
+  count = posix_packet_append(&packet, signal);
+
+  /* Ship it down. */
+  return (posix_packet_send(&packet));
+}
+
+int
+ubicom32_remote_posix_restart_thread(unsigned int signal, struct ubicom32_posix_process *gdb_proc)
+{
+  struct posix_gdb_packet packet;
+  unsigned int count;
+
+  posix_packet_init(&packet, POSIX_GDB_RESTART_A_THREAD);
+  count = posix_packet_append(&packet, signal);
+  count = posix_packet_append(&packet, gdb_proc->current_thread);
+
+  /* Ship it down. */
+  return (posix_packet_send(&packet));
+}
+
+int
+ubicom32_remote_posix_stop(void)
+{
+  struct posix_gdb_packet packet;
+
+  posix_packet_init(&packet, POSIX_GDB_STOP);
+
+  /* Ship it down. */
+  return (posix_packet_send(&packet));
+}
+
+int
+ubicom32_remote_posix_get_gdb_event(struct ubicom32_posix_process *gdb_proc)
+{
+  struct posix_gdb_packet packet;
+  char *ptr = (char *)&packet;
+  unsigned int i, *src, *dst;
+  unsigned int count;
+
+  /*
+   * We are going to get at least 12 bytes (MAGIC, length and gdb command).
+   */
+  if(dongle_read(ptr, 12))
+    {
+      dongle_close ();
+      dongle_error ("error: recv communication error!");
+    }
+
+  /*
+   * Convert the 12 bytes we got back to host order. We will look at the length
+   * and read more bytes if needed.
+   */
+  src = dst = packet.data;
+  for(i=0; i< 3; i++)
+    *dst++ = ntohl(*src++);
+
+  /*
+   * Make sure the magic we got back is sane.
+   */
+  if (packet.data[0] != POSIX_GDB_MAGIC)
+    {
+      dongle_error("Incorrect magic.");
+      return -1;
+    }
+
+  if(packet.data[1] > 12)
+    {
+      /*
+       * There is more data to be read in.
+       */
+      ptr += 12;
+      if(dongle_read(ptr, packet.data[1]-12))
+	{
+	  dongle_close ();
+	  dongle_error ("error: recv communication error!");
+	}
+
+      /*
+       * Convert the data back to host byte order.
+       */
+      src = dst = (unsigned int *)ptr;
+      count = (packet.data[1]-12)/4;
+      for(i=0; i< count; i++)
+	*dst++ = ntohl(*src++);
+    }
+  
+  /* This better be a GDB/TERMINATE event. */
+  if ((packet.data[2] != POSIX_GDB_EVENT) && (packet.data[2] != POSIX_GDB_TERMINATE))
+    return -1;
+
+  /* Load the signal and task id into gdb_proc structure. */
+  if (packet.data[2] == POSIX_GDB_EVENT)
+    {
+      /* target is alive. */
+      gdb_proc->target_state = 1;
+    }
+  else
+    {
+      /* target has terminated the process. */
+      gdb_proc->target_state = 0;
+    }
+  gdb_proc->target_signal = packet.data[3];
+  gdb_proc->gdb_event_thread = packet.data[4];
+  return 0;
+}
+
+int
+ubicom32_remote_posix_reset(struct ubicom32_posix_process *gdb_proc)
+{
+  struct posix_gdb_packet packet;
+  unsigned int count;
+
+  posix_packet_init(&packet, POSIX_GDB_RESET);
+  count = posix_packet_append(&packet, gdb_proc->current_thread);
+
+  /* Ship it down. */
+  return (posix_packet_send(&packet));
+}
--- /dev/null
+++ b/gdb/remote-ubicom32-posix-backend.h
@@ -0,0 +1,96 @@
+/* Target-dependent code for GDB, the GNU debugger.
+
+   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 
+   2009
+   Free Software Foundation, Inc.
+
+   This file is part of GDB.
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.
+*/
+typedef unsigned int u32_t;
+
+struct posix_context {
+  /*
+   * Data Registers
+   */
+  u32_t dn[16];
+
+  /*
+   * Address Registers
+   */
+  u32_t an[8];
+
+  /*
+   * Per thread misc registers.
+   */
+  u32_t acc0_hi;
+  u32_t acc0_lo;
+  u32_t mac_rc16;
+  u32_t acc1_hi;
+  u32_t acc1_lo;
+  u32_t source3;
+  u32_t inst_cnt;
+  u32_t csr;
+  u32_t iread_data;
+  u32_t int_mask0;
+  u32_t int_mask1;
+  u32_t trap_cause;
+  u32_t pc;
+};
+
+struct ubicom32_posix_process {
+  unsigned int proc;
+  unsigned int num_pthreads;
+  unsigned int pthreads[1024];
+  unsigned int current_thread;
+  struct posix_context current_thread_context;
+  unsigned int target_signal;
+  unsigned int target_state;
+  unsigned int gdb_event_thread;
+};
+
+struct posix_syscall_frame {
+	u32_t frame_begin;
+	u32_t frame_end;
+	u32_t reg_d0;
+	u32_t reg_d1;
+	u32_t reg_d2;
+	u32_t reg_d3;
+	u32_t reg_d4;
+	u32_t reg_d5;
+	u32_t reg_d6;
+	u32_t reg_d7;
+	u32_t reg_a1;
+	u32_t reg_a2;
+	u32_t reg_a3;
+	u32_t reg_a4;
+	u32_t reg_a5;
+	u32_t reg_a6;
+};
+
+extern int ubicom32_remote_posix_detach(void);
+extern int ubicom32_remote_posix_connect(char *remote);
+extern int ubicom32_remote_posix_close(void);
+extern int ubicom32_remote_posix_attach(unsigned int text_start, unsigned int text_size, unsigned int data_start, 
+					unsigned int data_size, struct ubicom32_posix_process *gdb_proc);
+extern int ubicom32_remote_fetch_registers(struct ubicom32_posix_process *gdb_proc);
+extern int ubicom32_remote_posix_read_memory(unsigned int leadaddr, unsigned int toreadwords, int *recvbuffer);
+extern int ubicom32_remote_posix_write_memory(unsigned int leadaddr, unsigned int towritewords, int *sendbuffer);
+extern int ubicom32_remote_posix_restart(unsigned int signal);
+extern int ubicom32_remote_posix_restart_thread(unsigned int signal, struct ubicom32_posix_process *gdb_proc);
+extern int ubicom32_remote_posix_stop(void);
+extern int ubicom32_remote_posix_get_gdb_event(struct ubicom32_posix_process *gdb_proc);
+extern int ubicom32_remote_posix_get_status(struct ubicom32_posix_process *gdb_proc);
+extern int ubicom32_remote_posix_reset(struct ubicom32_posix_process *gdb_proc);
--- /dev/null
+++ b/gdb/remote-ubicom32-posix.c
@@ -0,0 +1,1380 @@
+/* Remote target communications for serial-line targets in custom GDB protocol
+
+   Copyright 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996,
+   1997, 1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.
+
+   This file is part of GDB.
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 2 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program; if not, write to the Free Software
+   Foundation, Inc., 59 Temple Place - Suite 330,
+   Boston, MA 02111-1307, USA.  */
+
+/* See the GDB User Guide for details of the GDB remote protocol. */
+
+#include "defs.h"
+#include "gdb_string.h"
+#include <ctype.h>
+#include <fcntl.h>
+#include "inferior.h"
+#include "bfd.h"
+#include "symfile.h"
+#include "target.h"
+#include "gdbcmd.h"
+#include "objfiles.h"
+#include "gdb-stabs.h"
+#include "gdbthread.h"
+#include "remote.h"
+#include "regcache.h"
+#include "value.h"
+#include "gdb_assert.h"
+
+#include <ctype.h>
+#include <sys/time.h>
+#ifdef USG
+#include <sys/types.h>
+#endif
+
+#include "event-loop.h"
+#include "event-top.h"
+#include "inf-loop.h"
+
+#include <signal.h>
+#include "serial.h"
+
+#include "gdbcore.h" /* for exec_bfd */
+#include "remote-ubicom32-posix-backend.h"
+#include "ubicom32_dongle.h"
+#include "ubicom32-tdep.h"
+
+volatile int ubicom32_posix_cntrl_c_abort;
+int ubicom32_posix_current_thread = -1;
+
+enum posix_state {
+  POSIX_RUNNING,
+  POSIX_STOPPED,
+  POSIX_DETACHED,
+  POSIX_STEPPING,
+  POSIX_STEPPING_PROBLEMS,
+  POSIX_TRAP_ERROR,
+  POSIX_CORE_STOPPED,
+};
+enum posix_state remote_posix_state = POSIX_DETACHED;
+struct breakpoint_storage {
+  unsigned int *bp_addresses;
+  unsigned int current_entry;
+  unsigned int num_entries;
+} inserted_bps;
+
+/* GDB structure. */
+struct target_ops posix_ops;
+
+#define UBICOM32_FLASH_ADDR 0x60000000
+#define UBICOM32_FLASH_END 	0x6ffffffc
+#define UBICOM32_LOAD_BLOCK_SIZE 2048
+
+#define UBICOM32_DDR_ADDR 0x40000000
+#define UBICOM32_DDR_END  0x47fffffc
+
+#define UBICOM32_OCM_ADDR 0x3ffc0000
+#define UBICOM32_OCM_END  0x3ffffffc
+
+#define UBICOM32_FLASH_SECTION 1
+#define UBICOM32_DDR_SECTION 2
+#define UBICOM32_OCM_SECTION 3
+
+#define REGISTER_RAW_SIZE(x)  (4)
+
+static int ubicom32_posix_read_bytes (CORE_ADDR address, char *buffer, int length);
+static int ubicom32_posix_write_bytes (CORE_ADDR address, char *buffer, int length);
+
+struct ubicom32_posix_process gdb_proc;
+unsigned int text_start, text_size, data_start, data_size;
+
+/* Software Breakpoint 'instruction' (not actually a valid
+ * instruction). Note that this used to be 0xaabbccdd, but in the mach
+ * v4 this now actually legal.
+ */
+
+#define UBICOM32_V4_SOFTWARE_BREAKPOINT {0xfa, 0xbb, 0xcc, 0xdd}
+
+/* ubicom32_loadable_section.  */
+static int
+ubicom32_loadable_section(bfd *loadfile_bfd, asection *s)
+{
+  long addr, length;
+
+  if (!(s->flags & SEC_LOAD))
+    return 0;
+
+  length = bfd_get_section_size (s);
+  if (length == 0)
+    return 0;
+
+  if ((s->lma >= UBICOM32_FLASH_ADDR) && (s->lma + length <= UBICOM32_FLASH_END))
+    return UBICOM32_FLASH_SECTION;
+  if ((s->lma >= UBICOM32_DDR_ADDR) && (s->lma + length <= UBICOM32_DDR_END))
+    return UBICOM32_DDR_SECTION;
+  if ((s->lma >= UBICOM32_OCM_ADDR) && (s->lma + length <= UBICOM32_OCM_END))
+    return UBICOM32_OCM_SECTION;
+  return 0;
+}
+
+/* ubicom32_lookup_symbol.  */
+static unsigned int
+ubicom32_lookup_symbol (char *name)
+{
+  struct symbol *sym;
+  struct minimal_symbol *msym;
+
+  sym = lookup_symbol (name, NULL, VAR_DOMAIN, NULL, NULL);
+  if (sym)
+    return SYMBOL_VALUE (sym);
+
+  msym = lookup_minimal_symbol (name, NULL, NULL);
+  if (msym)
+    return SYMBOL_VALUE (msym);
+
+  return 0;
+}
+
+static void
+swizzle_for_write_register (int regnum, const void *val)
+{
+  int i, j;
+  char * value = (char *)malloc(REGISTER_RAW_SIZE (regnum));
+  char *ptr = (char *)val;
+
+  for(i= (REGISTER_RAW_SIZE (regnum)) -1, j=0;i >= 0; i--)
+    {
+      value[j++] = ptr[i];
+    }
+
+  /* copy the data back into the buffer */
+  for(i= (REGISTER_RAW_SIZE (regnum)) -1, j=0;i >= 0; i--)
+    {
+      ptr[i] = value[i];
+    }
+  
+  free(value);
+}  
+  
+
+void
+posix_swizzled_supply_register (struct regcache *regcache, int regnum, const void *val)
+{
+  int i, j;
+  char * value = (char *)malloc(REGISTER_RAW_SIZE (regnum));
+  char *ptr = (char *)val;
+
+  for(i= (REGISTER_RAW_SIZE (regnum)) -1, j=0;i >= 0; i--)
+    {
+      value[j++] = ptr[i];
+    }
+
+  regcache_raw_supply(regcache, regnum, (const void *)value);
+  free(value);
+}  
+
+static int
+ubicom32_posix_insert_breakpoint (struct bp_target_info *bp_tgt)
+{
+  char bpToSend[] = UBICOM32_V4_SOFTWARE_BREAKPOINT;
+  int ret, i;
+
+  bp_tgt->placed_size = sizeof(bpToSend);
+  
+  /* We should do an address check ???? */
+  /* Read back old contents. */
+  ret = ubicom32_posix_read_bytes(bp_tgt->placed_address, bp_tgt->shadow_contents, bp_tgt->placed_size);
+  if (ret != bp_tgt->placed_size)
+    return -1;
+
+  /* Write out the break point.*/
+  ret = ubicom32_posix_write_bytes(bp_tgt->placed_address, (char *)&bpToSend, bp_tgt->placed_size);
+  if (ret != bp_tgt->placed_size)
+    return -1;
+
+  /* We need to store the breakpoint in the inserted_bps structure. */
+  if (inserted_bps.current_entry == inserted_bps.num_entries)
+    {
+      /* We need to allocate more space as we have no space for the new entry. */
+      inserted_bps.num_entries += 10;
+      inserted_bps.bp_addresses = realloc(inserted_bps.bp_addresses, inserted_bps.num_entries * sizeof(unsigned int));
+      if (inserted_bps.bp_addresses == NULL)
+	{
+	  printf_unfiltered("Failed allocation inserted_bps array.");
+	  exit(-1);
+	}
+    }
+
+  /* If this entry is already in the list then don't worry about it. */
+  for (i=0; i< inserted_bps.current_entry; i++)
+    {
+      if (inserted_bps.bp_addresses[i] == bp_tgt->placed_address)
+	break;
+    }
+  if (i != inserted_bps.current_entry)
+    return 0;
+
+  inserted_bps.bp_addresses[inserted_bps.current_entry++] = bp_tgt->placed_address;
+  return 0;
+}
+
+static int
+ubicom32_posix_remove_breakpoint (struct bp_target_info *bp_tgt)
+{
+  char previous_contents[4];
+  char expected_contents[] = UBICOM32_V4_SOFTWARE_BREAKPOINT;
+
+  int ret = ubicom32_posix_read_bytes(bp_tgt->placed_address, (char *)&previous_contents, bp_tgt->placed_size);
+  
+  /* check if we do have a bp instruction at this address */
+  for(ret =0; ret< bp_tgt->placed_size; ret++)
+    if(expected_contents[ret] != previous_contents[ret])
+      return 0;
+
+  /* write out the original data */
+  ret = ubicom32_posix_write_bytes(bp_tgt->placed_address, bp_tgt->shadow_contents, bp_tgt->placed_size);
+
+  return 0;
+}
+
+int 
+ubicom32_posix_attach(void)
+{
+  int ret, i;
+  ret = ubicom32_remote_posix_attach(text_start, text_size, data_start, data_size, &gdb_proc);
+  if (ret)
+    {
+      if (ret == 1 || ret == 2)
+	{
+	  /* Shut down the ethernet connection. */
+	  ubicom32_remote_posix_close();
+	  remote_posix_state = POSIX_DETACHED;
+	  if (ret == 1)
+	    error("No matching process found in target.");
+	  else if (ret == 2)
+	    error("Process is already being debugged.");
+	}
+      else if (ret == 3)
+	{
+	  /* 
+	   * This is a freshly launched process. 
+	   * We need to set a breakpoint at the entry point and let it go. Once it stops we go grab status.
+	   */
+	  struct bp_target_info bp_tgt;
+	  bp_tgt.placed_address = bfd_get_start_address(exec_bfd);
+	  (void) ubicom32_posix_insert_breakpoint(&bp_tgt);
+
+	  /* Get it going. */
+	  ret = ubicom32_remote_posix_restart(0);
+
+	  /* now keep polling the dongle till the breakpoint gets hit. */
+	  while (1)
+	    {
+	      ret = dongle_poll();
+	      if(ret< 0)
+		{
+		  printf_unfiltered ("error: unable to read status\n");
+		  return ret;
+		}
+	      if(ret == 0)
+		{
+		  /* wait for 10 ms before trying again */
+		  usleep(10000);
+		  continue;
+		}
+
+	      /* Remote has sent a debug event. Collect it. */
+	      ret = ubicom32_remote_posix_get_gdb_event(&gdb_proc);
+	      if(ret< 0)
+		{
+		  printf_unfiltered ("error: unable to read status\n");
+		  return ret;
+		}
+	      break;
+	    }
+
+	  /* Remove the breakpoint we set. */
+	  (void) ubicom32_posix_remove_breakpoint(&bp_tgt);
+	}
+      else
+	error("Unknown response from the target.");
+    }
+
+  /* Go get the processor status. */
+  ret = ubicom32_remote_posix_get_status(&gdb_proc);
+
+  /* We have attached to the process. */
+  printf("Attached to process 0x%x\n", gdb_proc.proc);
+
+  return ret;
+}
+
+/* ubicom32_posix_open
+   Usage: target remote <ip_addr>:<ip_port>
+   Connects to the dongle and then connects to target through the dongle.  */
+static void
+ubicom32_posix_open (char *args, int from_tty)
+{
+  int ret, i, has_section;
+  struct gdbarch_info info;
+  extern void gdbarch_info_init (struct gdbarch_info *info);
+  char *env_dongle;
+  asection *text_section, *data_section;
+
+  /* zero out the gdb_proc structure. */
+  memset(&gdb_proc, 0, sizeof(gdb_proc));
+  if (exec_bfd == NULL)
+    {
+      /* If no exec file is provided we will be unable to do any debugging. */
+      error("No POSIX elf file provided. Please provide one.");
+    }
+
+  /* look for "__i_am_posix" from the symbol table. */
+  if (ubicom32_lookup_symbol("__i_am_posix") == 0)
+    {
+      error("%s is not a ubicom32 POSIX file.", bfd_get_filename (exec_bfd));
+    }
+
+  /* find the .text section. */
+  has_section = 0;
+  for (text_section = exec_bfd->sections; text_section; text_section = text_section->next)
+    {
+      if(strcmp(text_section->name, ".text"))
+	{
+	  continue;
+	}
+      has_section=1;
+      break;
+    }
+
+  if (has_section ==0 )
+    {
+      error("%s has no .text section.", bfd_get_filename (exec_bfd));
+    }
+
+  /* find the .data section. */
+  for (data_section = exec_bfd->sections; data_section; data_section = data_section->next)
+    {
+      if(strcmp(data_section->name, ".data"))
+	{
+	  continue;
+	}
+      break;
+    }
+
+  if (has_section ==0 )
+    {
+      error("%s has no .data section.", bfd_get_filename (exec_bfd));
+    }
+
+  if (remote_debug)
+    {
+      if (args)
+        printf_filtered ("ubicom32_posix_open (%s)\n", args);
+      else
+        printf_filtered ("ubicom32_posix_open ()\n");
+    }
+
+  target_preopen (from_tty);
+
+  /* Default device.  */
+  if (!args)
+    {
+      env_dongle = getenv("UBICOM_DONGLE");
+      if (env_dongle)
+	args = env_dongle;
+      else
+	args = "localhost:5011";
+    }
+
+  /* Connect to dongle.  */
+  ret = ubicom32_remote_posix_connect (args);
+
+  if(ret == -1)
+    error ("Unable to find dongle.");
+
+  /* Extract .text section start and size. */
+  text_start = text_section->lma;
+  text_size = bfd_get_section_size (text_section);
+
+  /* Extract .data section start and size. */
+  data_start = data_section->lma;
+  data_size = bfd_get_section_size (data_section);
+
+  /* Attach to the target process. */
+  ret = ubicom32_posix_attach();
+  if (ret)
+    {
+      return;
+    }
+
+  gdb_proc.current_thread = gdb_proc.pthreads[0];
+
+  /*
+   * The remote process will be in a stopped state.
+   */
+  remote_posix_state = POSIX_STOPPED;
+  push_target(&posix_ops);
+
+  /*
+   * Fix the gdbarch.
+   */
+  if (current_gdbarch == NULL) 
+    {
+      struct gdbarch_info info;
+      extern void gdbarch_info_init (struct gdbarch_info *info);
+      info.bfd_arch_info = bfd_scan_arch ("ubicom32posix");
+      
+      if (info.bfd_arch_info == NULL)
+	internal_error (__FILE__, __LINE__,
+			"set_architecture: bfd_scan_arch failed");
+      (void)gdbarch_update_p (info);
+    }
+  else
+    {
+      struct gdbarch_tdep *tdep = gdbarch_tdep(current_gdbarch);
+      char *arch_string = (char *)tdep->name;
+      if (strcmp(arch_string, "Ubicom32 POSIX"))
+	{
+	  /* Architecture mismatch. We need to go find the "ubicom32posix" arch. */
+	  gdbarch_info_init (&info);
+	  info.bfd_arch_info = bfd_scan_arch ("ubicom32posix");
+	  
+	  if (info.bfd_arch_info == NULL)
+	    internal_error (__FILE__, __LINE__,
+			    "set_architecture: bfd_scan_arch failed");
+	  (void)gdbarch_update_p (info);
+	}
+    }
+
+  inferior_ptid = ptid_build((int)gdb_proc.proc, 0, (long)gdb_proc.pthreads[0]);
+  start_remote(from_tty);
+
+  /* Add threads. */
+  for (i=0; i< gdb_proc.num_pthreads; i++)
+    {
+      ptid_t new_ptid = ptid_build((int)gdb_proc.proc, 0, (long)gdb_proc.pthreads[i]);
+      if (!in_thread_list(new_ptid))
+	{
+	  add_thread(new_ptid);
+	}
+    }
+}
+
+/* ubicom32_posix_close.  */
+static void
+ubicom32_posix_close (int quitting)
+{
+  if(remote_posix_state == POSIX_DETACHED)
+    return;
+
+  if (remote_debug)
+    printf_filtered ("ubicom32_posix_close (%d)\n", quitting);
+
+  /* Disconnect.  */
+  (void)ubicom32_remote_posix_close();
+  remote_posix_state = POSIX_DETACHED;
+}
+
+/* ubicom32_posix_detach.
+   Detach from the remote board.  */
+static void
+ubicom32_posix_detach (char *args, int from_tty)
+{
+  (void) ubicom32_remote_posix_detach();
+  (void) ubicom32_remote_posix_close();
+  remote_posix_state = POSIX_DETACHED;
+  pop_target();
+
+}
+
+struct step_targets {
+  unsigned int target1_pc;
+  unsigned char t1_insn[4];
+  unsigned int target1_active;
+  unsigned int target2_pc;
+  unsigned char t2_insn[4];
+  unsigned int target2_active;
+} ss_targets;
+
+static int
+ubicom32_posix_write_bytes (CORE_ADDR address, char *buffer, int length)
+{
+  // split the transfer into lead, aligned middle and end
+  unsigned truncBytes = (address & 0x3);
+  unsigned truncAddress = address & ~0x3;
+  unsigned int leadBytes, leadAddr, midBytes, midAddr, endBytes, endAddr, leadIndex;
+  unsigned toWriteWords;
+  unsigned char  *sendBuffer;
+  unsigned char *freeBuffer;
+  unsigned char *cptr;
+  int i, j, ret;
+
+  leadBytes =0;
+  leadIndex = 0;
+  if(truncBytes)
+    {
+      leadBytes = 4-truncBytes;
+      if(leadBytes > length)
+	leadBytes = length;
+      leadIndex = 3-truncBytes;
+      length -= leadBytes;
+      address = truncAddress + 4;
+    }
+  
+  leadAddr = truncAddress;
+		
+  endAddr = address + length;
+  endBytes = endAddr & 0x3;
+  endAddr &= ~0x3;
+		
+  midBytes = length - endBytes;
+  midAddr = address;
+
+  toWriteWords = midBytes/4;
+
+  if(leadBytes)
+    toWriteWords++;
+  
+  if(endBytes)
+    toWriteWords++;
+
+  /* Allocate the send buffer */
+  sendBuffer = (unsigned char *)malloc(toWriteWords*4);
+  freeBuffer = sendBuffer;
+  cptr = sendBuffer;
+  
+  if(leadBytes)
+    {
+      // Misaligned start. Deal with it by first backing up the address to nearest
+      // Go read 4 bytes from the backed up address 
+      ret = ubicom32_remote_posix_read_memory(leadAddr, 1, (int *)cptr);
+
+      for(i=0; i<leadBytes; i++)
+	{
+	  cptr[leadIndex--] = (unsigned char) *buffer++;
+	}
+      
+      // Bump up cptr by 4
+      cptr += 4;
+    }
+		    
+  // Deal with the midsection if any
+  if(midBytes)
+    {
+      // Move the data into the transfer buffer
+      for(i=0; i< midBytes; i+= 4)
+	{
+	  for(j=0; j< 4; j++)
+	    {
+	      cptr[3-j] = (*buffer++ &0xff);
+	    }
+	  cptr+= 4;
+	}
+    }
+  
+  if(endBytes)
+    {
+      // trailing cruft to deal with
+      // Go read 4 bytes from the backed up end address 
+      ret = ubicom32_remote_posix_read_memory(endAddr, 1, (int *)cptr);
+
+      for(i=0; i< endBytes; i++)
+	{
+	  cptr[3-i] = (unsigned char) *buffer++;
+	}
+    }
+
+  // Send the data to target
+  ret = ubicom32_remote_posix_write_memory(leadAddr, toWriteWords, (int *)sendBuffer);
+  if (ret == 2)
+    error("Address 0x%x is out of POSIX bounds", leadAddr);
+
+  free (freeBuffer);
+  return (leadBytes + midBytes + endBytes);
+}
+
+static int
+ubicom32_posix_read_bytes (CORE_ADDR address, char *buffer, int length)
+{
+  // split the transfer into lead, aligned middle and end
+  unsigned truncBytes = (address & 0x3);
+  unsigned truncAddress = address & ~0x3;
+  unsigned int leadBytes, leadAddr, midBytes, midAddr, endBytes, endAddr, leadIndex;
+  unsigned toReadWords;
+  unsigned char  *recvBuffer;
+  unsigned char *freeBuffer;
+  unsigned char *cptr;
+  int i, j, ret;
+
+  leadIndex = 0;
+  if(truncBytes)
+    {
+      leadBytes = 4-truncBytes;
+      if(leadBytes > length)
+	leadBytes = length;
+      leadIndex = 3-truncBytes;
+      length -= leadBytes;
+      address = truncAddress + 4;
+    }
+  else
+    leadBytes =0;
+  
+  leadAddr = truncAddress;
+		
+  endAddr = address + length;
+  endBytes = endAddr & 0x3;
+  endAddr &= ~0x3;
+		
+  midBytes = length - endBytes;
+  midAddr = address;
+
+  toReadWords = midBytes/4;
+
+  if(leadBytes)
+    toReadWords++;
+  
+  if(endBytes)
+    toReadWords++;
+
+  /* Allocate the recv buffer */
+  recvBuffer = (unsigned char *)malloc(toReadWords*4);
+  freeBuffer = recvBuffer;
+  cptr = recvBuffer;
+
+  ret = ubicom32_remote_posix_read_memory(leadAddr, toReadWords, (int *)recvBuffer);
+
+  // Now Swizzle the data out
+  if(leadBytes)
+    {
+      for(i= 0;i< leadBytes; i++)
+	{
+	  *buffer++ = recvBuffer[leadIndex--];
+	}
+      recvBuffer += 4;
+    }
+
+  if(midBytes)
+    {
+      for(i=0; i< midBytes; i+= 4)
+	{
+	  for(j=0; j< 4; j++)
+	    {
+	      *buffer++ = recvBuffer[3-j];
+	    }
+	  recvBuffer += 4;
+	}
+    }
+
+  if(endBytes)
+    {
+      for(i=0; i< endBytes; i++)
+	{
+	  *buffer ++ = recvBuffer[3-i];
+	}
+    }
+  recvBuffer += 4;
+  free (freeBuffer);
+
+  return (leadBytes + midBytes + endBytes);
+}
+
+static int ubicom32_posix_setup_single_step(void)
+{
+  CORE_ADDR pc = read_pc();
+  unsigned char cptr[4];
+  char bpToSend[] = UBICOM32_V4_SOFTWARE_BREAKPOINT;
+  int i;
+
+  /* pull the current instruction from target. */
+  int ret = ubicom32_posix_read_bytes(pc, (char *)cptr, 4);
+  unsigned int insn = cptr[0] <<24 | cptr[1] << 16 | cptr[2] << 8 | cptr[3];
+  unsigned char base_opcode = (cptr[0] >> 3) & 0x1f;
+
+  memset(&ss_targets, 0, sizeof(ss_targets));
+
+  /* analyze the instruction */
+  switch(base_opcode)
+    {
+    case 0x1a:
+      {
+	/* jump conditionals */
+	int offset = (insn & 0x1fffff)<<2;
+	;
+	if (offset & 0x00400000) 
+	  {
+	    /* set up a negative number */
+	    offset |= 0xff800000;
+	  }
+	ss_targets.target1_pc = pc + 4;
+	ss_targets.target2_pc = pc + offset;
+	ss_targets.target1_active = 1;
+	ss_targets.target2_active = 1;
+	break;
+      }
+    case 0x1b:
+      {
+	/* CALL */
+	int offset = ((int)(cptr[0] & 0x7))<<23 | ((insn & 0x1fffff)<<2);
+	if(offset & 0x02000000)
+	  {
+	    offset |= 0xfc000000;
+	  }
+	ss_targets.target1_pc = pc + offset;
+	ss_targets.target1_active = 1;
+	break;
+      }
+    case 0x1e:
+      {
+	/* CALLI. Build the 18 bit offset from the instruction */
+	int offset = ((int)(cptr[0] & 0x7))<<15 | ((int)(cptr[1] & 0x1f) <<10) | ((int)(cptr[2] & 0x7) << 7) | ((int)(cptr[3] & 0x1f) << 2);
+	int address_register = (cptr[3] >> 5) & 0x7;
+
+	if (offset & (1<<17))
+	  {
+	    offset |= ~((1 << 18) - 1);
+	  }
+
+	/* Get the base address from the address register in the instruction. */
+	ss_targets.target1_pc = gdb_proc.current_thread_context.an[address_register];
+
+	/* add the offset */
+	ss_targets.target1_pc += offset;
+	ss_targets.target1_active = 1;
+	break;
+      }
+    case 0x00:
+      {
+	int op_extension = (int)(cptr[2] >> 3) & 0x1f;
+	if (op_extension == 4)
+	  {
+	    /* RET. Extract the S1 field from the instruction. */
+	    unsigned int ea;
+	    int s1 = insn & 0x7ff;
+	    int address_register = (s1 & 0xe0) >> 5;
+	    int data_register = (s1 & 0xf);
+	    int direct_register = (s1 & 0xff);
+	    int pre = s1 & 0x10;
+	    int indirect_offset = (((s1 & 0x300) >> 3) | (s1 & 0x1f)) << 2;
+	    int four_bit_immediate = data_register << 28;
+	    int eight_bit_immediate = direct_register << 24;
+	    four_bit_immediate = four_bit_immediate >> 26;
+	    eight_bit_immediate = eight_bit_immediate >> 22;
+
+	    ss_targets.target1_active = 1;
+	    if ((s1 & 0x700) == (0x1 << 8))
+	      {
+		/* Direct register */
+		if (direct_register < 32)
+		  {
+		    ss_targets.target1_pc = gdb_proc.current_thread_context.dn[direct_register];
+		  }
+		else if (direct_register < 40)
+		  {
+		    ss_targets.target1_pc = gdb_proc.current_thread_context.an[direct_register-32];
+		  }
+		else
+		  {
+		    printf_unfiltered("Unknown direct register %d\n", direct_register);
+		    return -1;
+		  }
+	      } 
+	    else if ((s1 & 0x700) == 0)
+	      {
+		/* immediate mode. */
+		printf_unfiltered("Immediate mode is wrong.\n");
+		return -1;
+	      }
+	    else
+	      {
+		if (s1 & 0x400)
+		  {
+		    /* Indirect with offset. */
+		    ss_targets.target1_pc = indirect_offset;
+		    ss_targets.target1_pc += gdb_proc.current_thread_context.an[address_register];
+		  }
+		else if ((s1 & 0x700) == (0x3 << 8))
+		  {
+		    /* Indirect with index. */
+		    ss_targets.target1_pc = gdb_proc.current_thread_context.dn[data_register] << 2;
+		    ss_targets.target1_pc += gdb_proc.current_thread_context.an[address_register];		
+		  }
+		else if ((s1 & 0x700) == (0x2 << 8))
+		  {
+		    /* Indirect with pre/post increment .*/
+		    ss_targets.target1_pc = gdb_proc.current_thread_context.an[address_register];
+		
+		    if (pre)
+		      {
+			ss_targets.target1_pc += four_bit_immediate;
+		      }
+		  }
+
+		/* read the memory we have computed above. It is the return address. */
+		ret = ubicom32_posix_read_bytes(ss_targets.target1_pc, cptr, 4);
+		if (ret != 4)
+		  return -1;
+		
+		ss_targets.target1_pc = cptr[0] <<24 | cptr[1] << 16 | cptr[2] << 8 | cptr[3];
+	      }
+	  }
+	else
+	  {
+	    ss_targets.target1_pc = pc+4;
+	    ss_targets.target1_active = 1;
+	  }
+	break;
+      }
+      default:
+	{
+	  ss_targets.target1_pc = pc+4;
+	  ss_targets.target1_active = 1;
+	}
+    }
+
+  /* Test and check if both the break points are within range. */
+  if (ss_targets.target1_active )
+    {
+      if ( ss_targets.target1_pc < text_start || ss_targets.target1_pc >= (text_start + text_size ))
+	{
+	  /* Invalid breakpoing address. */
+	  ss_targets.target1_active = ss_targets.target2_active = 0;
+	  return -2;
+	}
+    }
+
+  if (ss_targets.target2_active )
+    {
+      if ( ss_targets.target2_pc < text_start || ss_targets.target2_pc >= (text_start + text_size ))
+	{
+	  /* Invalid breakpoing address. */
+	  ss_targets.target1_active = ss_targets.target2_active = 0;
+	  return -2;
+	}
+    }
+
+  /* At this point we know how many targets to set up. Go ahead and deal with target 1. */
+  /* Check if the target1 ps is in the inserted bp list. */
+  for (i=0; i< inserted_bps.current_entry; i++)
+    {
+      if (inserted_bps.bp_addresses[i] == ss_targets.target1_pc)
+	break;
+    }
+  if (i != inserted_bps.current_entry)
+    {
+      /* This entry already exists. We can ignore it. */
+      ss_targets.target1_active = 0;
+    }
+  else
+    {
+      /* Read back the code at this location. */
+      ret = ubicom32_posix_read_bytes(ss_targets.target1_pc, ss_targets.t1_insn, 4);
+      if (ret != 4)
+	return -1;
+
+      /* Write the break point. */
+      ret = ubicom32_posix_write_bytes(ss_targets.target1_pc, bpToSend, 4);
+      if (ret != 4)
+	return -1;
+    }
+
+  if (ss_targets.target2_active)
+    {
+      for (i=0; i< inserted_bps.current_entry; i++)
+	{
+	  if (inserted_bps.bp_addresses[i] == ss_targets.target2_pc)
+	    break;
+	}
+      if (i != inserted_bps.current_entry)
+	{
+	  /* This entry already exists. We can ignore it. */
+	  ss_targets.target2_active = 0;
+	}
+      else
+	{
+	  /* Read back the code at this location. */
+	  ret = ubicom32_posix_read_bytes(ss_targets.target2_pc, ss_targets.t2_insn, 4);
+	  if (ret != 4)
+	    return -1;
+	  
+	  /* Write the break point. */
+	  ret = ubicom32_posix_write_bytes(ss_targets.target2_pc, bpToSend, 4);
+	  if (ret != 4)
+	    return -1;
+	}
+    }
+
+  return 0;
+}
+
+static int ubicom32_posix_cleanup_single_step(void)
+{
+  char previous_contents[4];
+  char expected_contents[] = UBICOM32_V4_SOFTWARE_BREAKPOINT;
+  int ret;
+
+  if (ss_targets.target1_active)
+    {
+      /* read the code and make sure it has the expected data in it. */
+      ret = ubicom32_posix_read_bytes(ss_targets.target1_pc, previous_contents, 4);
+      if (ret != 4)
+	return -1;
+
+      for(ret =0; ret< 4; ret++)
+	if(expected_contents[ret] != previous_contents[ret])
+	  break;
+
+      /* write the original code back. */
+      ret = ubicom32_posix_write_bytes(ss_targets.target1_pc, ss_targets.t1_insn, 4);
+      if (ret != 4)
+	return -1;
+    }
+
+  if (ss_targets.target2_active)
+    {
+      /* read the code and make sure it has the expected data in it. */
+      ret = ubicom32_posix_read_bytes(ss_targets.target2_pc, previous_contents, 4);
+      if (ret != 4)
+	return -1;
+
+      for(ret =0; ret< 4; ret++)
+	if(expected_contents[ret] != previous_contents[ret])
+	  break;
+
+      /* write the original code back. */
+      ret = ubicom32_posix_write_bytes(ss_targets.target2_pc, ss_targets.t2_insn, 4);
+      if (ret != 4)
+	return -1;
+    }
+  return 0;
+}
+static void
+ubicom32_posix_resume (ptid_t ptid, int step, enum target_signal signal)
+{
+  if (step)
+    {
+      /* Single step case. */
+      int ret = ubicom32_posix_setup_single_step(); 
+      if (ret == -1)
+	{
+	  error("Cannot setup single stepping.");
+	}
+
+      if (ret == -2) 
+	{
+	  /* Single stepping was trying to set a break point to an outof bounds location. Just restart it. */
+	  int ret = ubicom32_remote_posix_restart(signal);
+	  remote_posix_state = POSIX_RUNNING;
+	  inserted_bps.current_entry = 0;
+	  return;
+	}
+
+      /* Normal case. */
+      ret = ubicom32_remote_posix_restart_thread(signal, &gdb_proc);
+      remote_posix_state = POSIX_STEPPING;
+
+      if (ret)
+	remote_posix_state = POSIX_STEPPING_PROBLEMS;
+
+      inserted_bps.current_entry = 0;
+    }
+  else
+    {
+      /* Let everything run. */
+      int ret = ubicom32_remote_posix_restart(signal);
+      remote_posix_state = POSIX_RUNNING;
+      inserted_bps.current_entry = 0;
+    }
+}
+
+/* ubicom32_posix_cntrl_c.  */
+static void
+ubicom32_posix_cntrl_c (int signo)
+{
+  ubicom32_posix_cntrl_c_abort = 1;
+}
+
+static ptid_t
+ubicom32_posix_wait (ptid_t ptid, struct target_waitstatus *status)
+{
+  static RETSIGTYPE (*prev_sigint) ();
+  int ret, reason, i;
+  ptid_t my_ptid;
+
+  if (remote_debug)
+    printf_filtered ("ubicom32_posix_wait\n");
+
+  status->kind = TARGET_WAITKIND_EXITED;
+  status->value.integer = 0;
+
+  if(remote_posix_state == POSIX_STOPPED || remote_posix_state == POSIX_STEPPING_PROBLEMS )
+    {
+      /* Things are already stopped */
+      status->kind = TARGET_WAITKIND_STOPPED;
+      status->value.sig = TARGET_SIGNAL_TRAP;
+      return (ptid_build((int)gdb_proc.proc, 0, (long)gdb_proc.current_thread));
+    }
+
+  ubicom32_posix_cntrl_c_abort = 0;
+  prev_sigint = signal (SIGINT, ubicom32_posix_cntrl_c);
+
+  while (1)
+    {
+      if (ubicom32_posix_cntrl_c_abort)
+	{
+	  ret = ubicom32_remote_posix_stop();
+	  if(ret)
+	    {
+	      printf_unfiltered("error: Could not stop the processor\n");
+	      signal (SIGINT, prev_sigint);
+	      return null_ptid;
+	    }
+	  reason = 1;
+	  break;
+	}
+      else
+	{
+	  ret = dongle_poll();
+	  if(ret< 0)
+	    {
+	      printf_unfiltered ("error: unable to read status\n");
+	      signal (SIGINT, prev_sigint);
+	      return null_ptid;
+	    }
+	  if(ret == 0)
+	    {
+	      /* wait for 10 ms before trying again */
+	      usleep(10000);
+	      continue;
+	    }
+
+	  /* Remote has sent a debug event. Collect it. */
+	  ret = ubicom32_remote_posix_get_gdb_event(&gdb_proc);
+	  if(ret< 0)
+	    {
+	      printf_unfiltered ("error: unable to read status\n");
+	      signal (SIGINT, prev_sigint);
+	      return null_ptid;
+	    }
+	  reason = 2;
+	  break;
+	}
+    }
+
+  /* Go get the processor status. */
+  ret = ubicom32_remote_posix_get_status(&gdb_proc);
+
+  /* Add threads. */
+  for (i=0; i< gdb_proc.num_pthreads; i++)
+    {
+      ptid_t new_ptid = ptid_build((int)gdb_proc.proc, 0, (long)gdb_proc.pthreads[i]);
+      if (!in_thread_list(new_ptid))
+	{
+	  add_thread(new_ptid);
+	}
+    }
+
+  status->kind = TARGET_WAITKIND_STOPPED;
+  if (reason == 2)
+    {
+      /* Halted because of a GDB/TERMINATE event. */
+      gdb_proc.current_thread = gdb_proc.gdb_event_thread;
+      status->value.sig = gdb_proc.target_signal;
+
+      if (gdb_proc.target_state == 0)
+	{
+	  /* Remote end is going to exit. */
+	  if (gdb_proc.target_signal)
+	    status->kind = TARGET_WAITKIND_SIGNALLED;
+	  else
+	    {
+	      status->kind = TARGET_WAITKIND_EXITED;
+	      status->value.integer = gdb_proc.gdb_event_thread;
+	    }
+	}
+    }
+  else
+    {
+      /* Halted because of user ^C. */
+      gdb_proc.current_thread = gdb_proc.pthreads[0];
+      status->value.sig = TARGET_SIGNAL_INT;
+    }
+
+  if (remote_posix_state == POSIX_STEPPING)
+    {
+      ret = ubicom32_posix_cleanup_single_step();
+    }
+
+  remote_posix_state = POSIX_STOPPED;
+
+  signal (SIGINT, prev_sigint);
+  ptid = ptid_build((int)gdb_proc.proc, 0, (long)gdb_proc.current_thread);
+  return ptid;
+}
+
+static void
+ubicom32_posix_fetch_register (struct regcache *regcache, int regno)
+{
+  int ret, i;
+  int *rptr = (int *)&gdb_proc.current_thread_context.dn[0];
+
+  gdb_proc.current_thread = (unsigned int)ptid_get_tid(inferior_ptid);
+  if (gdb_proc.current_thread == 0)
+    gdb_proc.current_thread = gdb_proc.pthreads[0];
+
+  /* Zero out the context structure. */
+  memset(&gdb_proc.current_thread_context, 0, sizeof(struct posix_context));
+  ret = ubicom32_remote_fetch_registers(&gdb_proc);
+  if (ret)
+    {
+      if (ret == -2)
+	error("Backend did not find thread 0x%x", gdb_proc.current_thread);
+      else if (ret ==-3)
+	error("Unexpected reply frame type.");
+    }
+  
+  /* Now supply the registers. */
+  for (i=0; i< (sizeof(struct posix_context)/4); i++)
+    posix_swizzled_supply_register(regcache, i, rptr++);
+}
+
+static void
+ubicom32_posix_store_register(struct regcache *regcache, int regnum)
+{
+}
+
+static void
+ubicom32_posix_prepare_to_store (struct regcache *regcache)
+{
+  int i;
+  gdb_byte buf[MAX_REGISTER_SIZE];
+
+  /* Make sure all the necessary registers are cached.  */
+  for (i = 0; i < gdbarch_num_regs(current_gdbarch); i++)
+    regcache_raw_read (regcache, i, buf);
+}
+
+static int
+ubicom32_posix_xfer_memory (CORE_ADDR mem_addr, gdb_byte *buffer, int mem_len,
+		    int should_write, struct mem_attrib *attrib,
+		    struct target_ops *target)
+{
+  CORE_ADDR end_addr = mem_addr + mem_len;
+  int targ_len = mem_len;
+  int res;
+
+  if (mem_len <=0)
+    return 0;
+
+  /* Do a bounds check. */
+  if (mem_addr > UBICOM32_DDR_END)
+    return 0;
+
+  if (mem_addr < UBICOM32_DDR_ADDR)
+    return (mem_addr - UBICOM32_DDR_ADDR);
+
+  if (end_addr > UBICOM32_DDR_END+4)
+    mem_len = UBICOM32_DDR_END+4 - mem_addr;
+
+  /* now we know how much to transfer */
+  if (should_write)
+    {
+      res = ubicom32_posix_write_bytes (mem_addr, buffer, mem_len);
+    }
+  else
+    res = ubicom32_posix_read_bytes (mem_addr, buffer, mem_len);
+
+  return res;
+}
+
+static void
+ubicom32_posix_files_info (struct target_ops *target)
+{
+  if (exec_bfd)
+    {
+      char *file = bfd_get_filename (exec_bfd);
+      printf_unfiltered ("Debugging %s\n", file);
+    }
+  else
+    printf_unfiltered ("No file loaded\n");
+}
+
+static void
+ubicom32_posix_kill (void)
+{
+  if (remote_debug)
+      printf_filtered ("ubicom32_posix_kill\n");
+
+  inferior_ptid = null_ptid;
+
+  /* Detach from target.  */
+  ubicom32_posix_detach (NULL, 0);
+}
+
+static void
+ubicom32_posix_load (char *file, int from_tty)
+{
+}
+
+static int
+ubicom32_posix_thread_alive (ptid_t ptid)
+{
+  unsigned int tid = (unsigned int)ptid_get_tid(ptid);
+  unsigned int pid = (unsigned int)ptid_get_pid(ptid);
+  unsigned int i;
+
+  if (gdb_proc.proc != pid)
+    return 0;
+
+  /* Hunt through gdb_proc.pthreads and see if there is a match. */
+  for (i=0; i<gdb_proc.num_pthreads; i++)
+    if (gdb_proc.pthreads[i] == tid)
+      break;
+
+  if (i == gdb_proc.num_pthreads)
+    return 0;
+
+  /* Thread is alive. */
+  return (1);
+}
+
+static char *
+ubicom32_posix_thread_pid_to_str (ptid_t ptid)
+{
+  static char buf[30];
+  unsigned int tid = (unsigned int)ptid_get_tid(ptid);
+
+  sprintf(buf, "<Th_id 0x%08x>", tid);
+  return buf;
+}
+
+static void
+ubicom32_posix_stop (void)
+{
+  if (remote_debug)
+    printf_filtered ("ubicom32_posix_stop\n");
+
+  ubicom32_posix_cntrl_c_abort = 1;
+}
+
+static char *
+ubicom32_posix_threads_extra_info (struct thread_info *tp)
+{
+  return NULL;
+}
+
+void 
+ubicom32_posix_reset(char *args, int from_tty)
+{
+  int ret, i;
+  if (ubicom32_remote_posix_reset(&gdb_proc))
+    return;
+
+  /* Attach to the target process. */
+  ret = ubicom32_posix_attach();
+
+  gdb_proc.current_thread = gdb_proc.pthreads[0];
+
+  /*
+   * The remote process will be in a stopped state.
+   */
+  remote_posix_state = POSIX_STOPPED;
+
+  inferior_ptid = ptid_build((int)gdb_proc.proc, 0, (long)gdb_proc.pthreads[0]);
+  start_remote(from_tty);
+
+  /* Add threads. */
+  for (i=0; i< gdb_proc.num_pthreads; i++)
+    {
+      ptid_t new_ptid = ptid_build((int)gdb_proc.proc, 0, (long)gdb_proc.pthreads[i]);
+      if (!in_thread_list(new_ptid))
+	{
+	  add_thread(new_ptid);
+	}
+    }
+}
+
+/* init_posix_ops.  */
+static void
+init_ubicom32_posix_ops (void)
+{
+  posix_ops.to_shortname = "ubicom32-posix";
+  posix_ops.to_longname = "Remote Ubicom32 POSIX debug Via Ubicom Ethernet";
+  posix_ops.to_doc = "Remote Ubicom32 POSIX debug Via Ethernet.\n\
+Connect to target board as follows:\n\
+target ubicom32-posix ip-address:5010\n\
+";
+  posix_ops.to_open = ubicom32_posix_open;
+  posix_ops.to_close = ubicom32_posix_close;
+  posix_ops.to_attach = NULL;
+  posix_ops.to_post_attach = NULL;
+  posix_ops.to_detach = ubicom32_posix_detach;
+  posix_ops.to_resume = ubicom32_posix_resume;
+  posix_ops.to_wait = ubicom32_posix_wait;
+  //posix_ops.to_post_wait = NULL;
+  posix_ops.to_fetch_registers = ubicom32_posix_fetch_register;
+  posix_ops.to_store_registers = ubicom32_posix_store_register;
+  posix_ops.to_prepare_to_store = ubicom32_posix_prepare_to_store;
+  posix_ops.deprecated_xfer_memory = ubicom32_posix_xfer_memory;
+  posix_ops.to_files_info = ubicom32_posix_files_info;
+  posix_ops.to_kill = ubicom32_posix_kill;
+  posix_ops.to_load = ubicom32_posix_load;
+  posix_ops.to_insert_breakpoint = ubicom32_posix_insert_breakpoint;
+  posix_ops.to_remove_breakpoint = ubicom32_posix_remove_breakpoint;
+
+  posix_ops.to_terminal_init = NULL;
+  posix_ops.to_terminal_inferior = NULL;
+  posix_ops.to_terminal_ours_for_output = NULL;
+  posix_ops.to_terminal_ours = NULL;
+  posix_ops.to_terminal_info = NULL;
+  posix_ops.to_lookup_symbol = NULL;
+  posix_ops.to_create_inferior = NULL;
+  posix_ops.to_post_startup_inferior = NULL;
+  posix_ops.to_acknowledge_created_inferior = NULL;
+  posix_ops.to_insert_fork_catchpoint = NULL;
+  posix_ops.to_remove_fork_catchpoint = NULL;
+  posix_ops.to_insert_vfork_catchpoint = NULL;
+  posix_ops.to_remove_vfork_catchpoint = NULL;
+  posix_ops.to_insert_exec_catchpoint = NULL;
+  posix_ops.to_remove_exec_catchpoint = NULL;
+  posix_ops.to_reported_exec_events_per_exec_call = NULL;
+  posix_ops.to_has_exited = NULL;
+  posix_ops.to_mourn_inferior = ubicom32_posix_kill;
+  posix_ops.to_can_run = 0;
+  posix_ops.to_notice_signals = 0;
+  posix_ops.to_thread_alive = ubicom32_posix_thread_alive;
+  posix_ops.to_pid_to_str = ubicom32_posix_thread_pid_to_str;
+  posix_ops.to_stop = ubicom32_posix_stop;
+  posix_ops.to_pid_to_exec_file = NULL;
+  posix_ops.to_stratum = process_stratum;
+  posix_ops.to_has_all_memory = 1;
+  posix_ops.to_has_memory = 1;
+  posix_ops.to_has_stack = 1;
+  posix_ops.to_has_registers = 1;
+  posix_ops.to_has_execution = 1;
+  posix_ops.to_sections = NULL;
+  posix_ops.to_sections_end = NULL;
+  posix_ops.to_magic = OPS_MAGIC;
+  posix_ops.to_extra_thread_info = ubicom32_posix_threads_extra_info;
+}
+
+void
+_initialize_ubicom32_posix(void)
+{
+  init_ubicom32_posix_ops();
+  add_target (&posix_ops);
+  memset (&inserted_bps, 0, sizeof(inserted_bps));
+}
--- /dev/null
+++ b/gdb/remote-ubicom32v3-dbginterface.c
@@ -0,0 +1,4362 @@
+/* Target-dependent code for GDB, the GNU debugger.
+
+   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
+   2009
+   Free Software Foundation, Inc.
+
+   This file is part of GDB.
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.
+*/
+#include <sys/types.h>
+#include <errno.h>
+#include <stdlib.h>
+#include <stdio.h>
+#if defined(_WIN32)
+#include <winsock.h>
+#define usleep(x) Sleep(x/1000)
+#else
+#include <netinet/in.h>
+#include <unistd.h>
+#endif
+#include <string.h>
+#include "remote-ubicom32-isd.h"
+#include "remote-ubicom32-dbginterface.h"
+#include "ubicom32_dongle.h"
+
+//#define DEBUG 1
+
+enum isd_command {
+  ISD_NOP,
+  ISD_OPEN,
+  ISD_CLOSE,
+  ISD_DEVICE_ID,
+  ISD_DEVICE_VER,
+  ISD_MAIL_STATUS,
+  ISD_DEBUG_RST_REQ,
+  ISD_WRITE_MAIL_BOX,
+  ISD_READ_MAIL_BOX,
+  ISD_CLEAN_MAIL,
+  ISD_TEST_MODE,
+  ISD_WR_MME,
+  ISD_WR_MEC,
+  ISD_WR_MEP,
+  ISD_WR_MRC,
+  ISD_WR_MOA,
+  ISD_RD_MB,
+  ISD_WR_MBRE = 0x10,
+  ISD_WR_MEM,
+  ISD_RD_MST,
+  ISD_HALT_MP,
+  ISD_REL_MP,
+  ISD_FORCE_MP,
+  ISD_RD_MP_REG,
+  ISD_SET_MP_REG_ADDR,
+  ISD_WR_MP_REG,
+  ISD_RD_IPORT_STAT,
+  ISD_WR_IBUF,
+  ISD_WR_RST_HALT_MP_EN,
+  ISD_RD_RST_HALT_MP,
+};
+
+/* Mail Box Queue Status bit defines XXXX Probably subject to change*/
+#define M_BOX_IN_Q_EMPTY	0x40000000
+#define M_BOX_IN_Q_FULL		0x80000000
+#define M_BOX_OUT_Q_EMPTY	0x10000000
+#define M_BOX_OUT_Q_FULL	0x20000000
+
+extern int turnOnconsole(void);
+extern int turnOffconsole(void);
+
+extern unsigned int  rosr, pc, mt_active, mt_dbg_active, mt_en;
+unsigned int mt_sched, mt_pri;
+
+int ubicom32v3GdbIndexToRegAddrMap []={
+  0x0,0x4,0x8,0xc,		// Data registers 0 - 15
+  0x10,0x14,0x18,0x1c,
+  0x20,0x24,0x28,0x2c,
+  0x30,0x34,0x38,0x3c,
+  0x80,0x84,0x88,0x8c,		// Address registers 0 - 7
+  0x90,0x94,0x98,0x9c,
+  0xa0,0xa4,0xa8,0xac,		// mac_hi - source3
+  0xb0,0xb4,0xb8,0xbc,		// Inst_cnt - Iread_data
+  0xc0,0xc4,			// 32 int_mask0 int_mask1
+  0xd0,0xd4,0xd8,0xdc,		// 34 Thread PC trap_cause acc1_hi acc1_lo
+  0xe0,				// 38 previous PC
+
+
+				// Global registers
+  0x100, 0x104, 0x108,		// 39 Chip_id - int_stat1
+  0x114, 0x118,			// 42 int_set0 inst_set1
+  0x124, 0x128,			// 44 int_clr0 inst_clr1
+  0x134, 0x138, 0x13c,		// 46  Global Control mt_active mt_active_set
+  0x140, 0x144, 0x148, 0x14c,	// 49 mt_active clr mt_dbg_active mt_dbg_active_set mt_en
+  0x150, 0x154,	0x158, 0x15c,	// 53 mt_hpri, mt_hrt mt_break mt_break_clr
+  0x160, 0x164,	0x168,		// 57 mt_single_step, mt_min_delay_en mt_break_set
+  0x170, 0x17c,			// 60 dcapt mt_dbg_active_clr
+  0x180, 0x184, 0x188, 0x18c,	// 62 scratchpad0 - scratchpad3
+  0x1a0, 0x1a4, 0x1a8, 0x1ac,	// 66 chip_cfg mt_i_blocked mt_d_blocked mt_i_blocked_set
+  0x1b0, 0x1b4, 0x1b8, 0x1bc,	// 70 mt_d_blocked_set mt_blocked_clr mt_trap_en mt_trap
+  0x1c0, 0x1c4,			// 74 mt_trap_set mt_trap_clr
+  0x200, 0x204, 0x208,		// 76 i_range0_hi i_range1_hi i_range2_hi
+  0x220, 0x224, 0x228,		// 79 i_range0_lo i_range1_lo i_range2_lo
+  0x240, 0x244, 0x248,		// 82 i_range0_en i_range1_en i_range2_en
+  0x260, 0x264, 0x268, 0x26c,	// 85 d_range0_hi d_range1_hi d_range2_hi d_range3_hi
+  0x280, 0x284, 0x288, 0x28c,	// 89 d_range0_lo d_range1_lo d_range2_lo d_range3_lo
+  0x2a0, 0x2a4, 0x2a8, 0x2ac,	// 93 d_range0_en d_range1_en d_range2_en d_range3_en
+};
+
+int ubicom32v4GdbIndexToRegAddrMap []={
+  0x0,0x4,0x8,0xc,		// Data registers 0 - 15
+  0x10,0x14,0x18,0x1c,
+  0x20,0x24,0x28,0x2c,
+  0x30,0x34,0x38,0x3c,
+  0x80,0x84,0x88,0x8c,		// Address registers 0 - 7
+  0x90,0x94,0x98,0x9c,
+  0xa0,0xa4,0xa8,0xac,		// mac_hi - source3
+  0xb0,0xb4,0xb8,0xbc,		// Inst_cnt - Iread_data
+  0xc0,0xc4,			// 32 int_mask0 int_mask1
+  0xd0,0xd4,0xd8,0xdc,		// 34 Thread PC trap_cause acc1_hi acc1_lo
+  0xe0,				// 38 previous PC
+
+
+				// Global registers
+  0x100, 0x104, 0x108,		// 39 Chip_id - int_stat1
+  0x114, 0x118,			// 42 int_set0 inst_set1
+  0x124, 0x128,			// 44 int_clr0 inst_clr1
+  0x134, 0x138, 0x13c,		// 46  Global Control mt_active mt_active_set
+  0x140, 0x144, 0x148, 0x14c,	// 49 mt_active clr mt_dbg_active mt_dbg_active_set mt_en
+  0x150, 0x154,	0x158, 0x15c,	// 53 mt_hpri, mt_hrt mt_break mt_break_clr
+  0x160, 0x164,	0x168,		// 57 mt_single_step, mt_min_delay_en mt_break_set
+  0x170, 0x17c,			// 60 dcapt mt_dbg_active_clr
+  0x180, 0x184, 0x188, 0x18c,	// 62 scratchpad0 - scratchpad3
+  0x1a0, 0x1a4, 0x1a8, 0x1ac,	// 66 chip_cfg mt_i_blocked mt_d_blocked mt_i_blocked_set
+  0x1b0, 0x1b4, 0x1b8, 0x1bc,	// 70 mt_d_blocked_set mt_blocked_clr mt_trap_en mt_trap
+  0x1c0, 0x1c4,			// 74 mt_trap_set mt_trap_clr
+  0x200, 0x204, 0x208, 0x20c,	// 76 i_range0_hi i_range1_hi i_range2_hi i_range3_hi
+  0x220, 0x224, 0x228, 0x22c,	// 80 i_range0_lo i_range1_lo i_range2_lo i_ramge3_lo
+  0x240, 0x244, 0x248, 0x24c,	// 84 i_range0_en i_range1_en i_range2_en i_range3_en
+  0x260, 0x264, 0x268, 0x26c, 0x270,	// 88 d_range0_hi d_range1_hi d_range2_hi d_range3_hi d_range4_hi
+  0x280, 0x284, 0x288, 0x28c, 0x290,	// 93 d_range0_lo d_range1_lo d_range2_lo d_range3_lo d_range4_lo
+  0x2a0, 0x2a4, 0x2a8, 0x2ac, 0x2b0	// 98 d_range0_en d_range1_en d_range2_en d_range3_en d_range4_en
+};
+
+
+// Snaphot of the registers
+ubicom32v3Regs_t ubicom32v3Registers;
+ubicom32v4Regs_t ubicom32v4Registers;
+int ubicom32v3gdbGetallRegs(struct ubicom32_cpu *cpu, int threadNo);
+int ubicom32v4gdbGetallRegs(struct ubicom32_cpu *cpu, int threadNo);
+int ubicom32v3gdbGetTPacketRegs(struct ubicom32_cpu *cpu, int threadNo);
+int ubicom32v4gdbGetTPacketRegs(struct ubicom32_cpu *cpu, int threadNo);
+int ubicom32v3writeRegisters( int threadNo, int regIndex, int *inBuf, unsigned int length);
+int ubicom32v4writeRegisters( int threadNo, int regIndex, int *inBuf, unsigned int length);
+
+struct ubicom32_cpu ubicom32_cpus[] = {
+  {(void *)&ubicom32v3Registers, sizeof(ubicom32v3Registers), 10, NUM_PER_THREAD_REGS_UBI32V3, NUM_GLOBAL_REGS_UBI32V3, 0x123455aa, ubicom32v3GdbIndexToRegAddrMap,
+   ubicom32v3gdbGetallRegs, ubicom32v3gdbGetTPacketRegs, NULL, NULL, ubicom32v3writeRegisters, NULL, NULL},
+  {(void *)&ubicom32v4Registers, sizeof(ubicom32v4Registers), 12, NUM_PER_THREAD_REGS_UBI32V3, NUM_GLOBAL_REGS_UBI32V4, 0x123455ab, ubicom32v4GdbIndexToRegAddrMap,
+   ubicom32v4gdbGetallRegs, ubicom32v4gdbGetTPacketRegs, NULL, NULL, ubicom32v4writeRegisters, NULL, NULL},
+  { NULL, 0, 0, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL}
+};
+
+struct ubicom32_cpu *current_cpu = ubicom32_cpus;
+
+int ubicom32isp_detach(void);
+
+extern unsigned int okToDoubleBuffer;
+extern unsigned int dongleHasMarsSupport;
+extern unsigned int dongleIsUbipod;
+extern unsigned int ubipodControl2wire;
+extern unsigned int ubipodControlconsole;
+extern unsigned int errorExpected;
+extern unsigned int doubleBuffer;
+extern struct ubicom32command_packet *pending_packet;
+extern unsigned int pending_packet_length;
+extern unsigned int pending_packet_opcode;
+
+extern int deviceId;
+extern int deviceVersion;
+extern int chipID;
+
+unsigned int send_console_data;	/* This will be non zero if mailbox data has to be sent after restart */
+unsigned int console_data[2];	/* This is the recovered console data. */
+
+#if defined(_WIN32)
+int ubicom32v3currentThread;
+int ubicom32v3_current_thread;
+#else
+extern int ubicom32v3currentThread;
+extern int ubicom32v3_current_thread;
+#endif
+
+struct thread_saved_state {
+  unsigned int pc;
+  unsigned int d0;
+  unsigned int csr;
+  unsigned int a0;
+  unsigned int a1;
+  unsigned int previous_pc;
+} current_thread_saved_state;
+
+struct direct_read_registers {
+  unsigned int chip_id;
+  unsigned int int_stat0;
+  unsigned int int_stat1;
+  unsigned int mt_active;
+  unsigned int mt_dbg_active;
+  unsigned int mt_en;
+  unsigned int mt_break;
+  unsigned int scratchpad0;
+  unsigned int scratchpad1;
+  unsigned int scratchpad2;
+  unsigned int scratchpad3;
+  unsigned int mt_i_blocked;
+  unsigned int mt_d_blocked;
+  unsigned int mt_trap;
+} direct_read_regs;
+
+unsigned int save_previous_pc = 0x01606138;	//move.4 scratchpad0,previous_pc
+
+#if 0
+unsigned int save_current_thread_state [] = {
+  0x01636121,  //move.4 scratchpad3,a1
+  0x01626120,  //move.4 scratchpad2,a0
+  0x0161612d,  //move.4 scratchpad1,csr
+  0x01606100,  //move.4 scratchpad0,d0
+  0xe0020006, // moveai a0, #%hi(0x01000300) (Load mailbox base address into a0
+};
+#endif
+
+unsigned int save_current_thread_state [] = {
+  0x01606100,  //move.4 scratchpad0,d0
+  0x01606121,  //move.4 scratchpad0,a1
+  0x01606120,  //move.4 scratchpad0,a0
+  0x0160612d,  //move.4 scratchpad0,csr
+  0xe0020006, // moveai a0, #%hi(0x01000300) (Load mailbox base address into a0
+};
+
+unsigned int restore_current_thread_state [] = {
+  0x01006400,  //move.4 d0,(a0)
+  0x012d6400,  //move.4 csr,(a0)
+  0x01216400,  //move.4 a1,(a0)
+  0x01206400,  //move.4 a0,(a0)
+  0xc9600003,  //movei scratchpad0,#3
+  0xc9630000,  //movei scratchpad3,#0
+};
+
+unsigned int restore_watchdog [] = {
+  0xe0220002,  //moveai a1,#%hi(0x01000100) Set a1 to timer base address
+  0x04226400,  //move.4 8(a1),(a0)          Load tkey value from Mbox (0xa1b2c3d4)
+  0x01006400,  //move.4 d0,(a0)		    Load d0 with timer increment (0x1000)
+  0x7c230420,  //add.4 12(a1),(a1),d0	    timer->wdcom = timer->mptval + increment
+  0xcc240000,  //movei 8(a1),#0		    timer->tkey = 0
+};
+
+unsigned int move_register_to_scratchpad0 = 0x01606100; // move.4 scratchpad0, d0 (lowest 8 bits = reg address / 4
+unsigned int move_a2_to_scratchpad0 = 0x01606122;	//move.4 scratchpad0,a2
+unsigned int move_scratchpad0_to_a2 = 0x01226160;	//move.4 a2,scratchpad0
+unsigned int move_memory_to_scratchpad0 = 0x01606221;	//move.4 scratchpad0,(a1)4++
+unsigned int move_from_mailbox_to_register = 0x01006400; //move.4 d0, (a0) bits 16-23 is register address / 4
+unsigned int move_from_mailbox_to_memory = 0x02216400; // move.4 (a1)4++, (a0)
+unsigned int move_from_memory_to_mailbox = 0x04016221; // move.4 4(a0), (a1)4++
+unsigned int move_from_mailbox_to_mailbox = 0x04016400; // move.4 4(a0),(a0)
+unsigned int move_dcache_base_to_a1 = 0xe022000c; // moveai a1, #%hi(0x01000600)
+unsigned int move_icache_base_to_a1 = 0xe022000a; // moveai a1, #%hi(0x01000500)
+unsigned int move_icache_base_to_a2 = 0xe042000a;	// moveai a2,#%hi(0x01000500)
+unsigned int load_dcache_control_reg = 0x04246400;	// move.4 16(a1), (a0)
+unsigned int load_cache_control_reg = 0x04246400;	// move.4 16(a1), (a0)
+unsigned int load_icache_control_reg = 0x04446400;	// move.4 16(a2),(a0)
+unsigned int move_from_cache_dreg_to_mailbox = 0x04016421;	// move.4 4(a0),4(a1)
+unsigned int load_dcache_addr_and_activate[] = {
+	0x04206400, // move.4 (a1), (a0)
+	0x24241c24, // bset 16(a1), 16(a1), #0x3
+};
+
+unsigned int load_cache_addr_and_activate[] = {
+	0x04206400, // move.4 (a1), (a0)
+	0x24241c24, // bset 16(a1), 16(a1), #0x3
+};
+
+unsigned int load_icache_addr_and_activate[] = {
+  0x04406400,	//move.4 (a2),(a0)
+  0x24441c44,	//bset 16(a2),16(a2),#0x3
+};
+
+unsigned int mailbox_base_to_a0 = 0xe0020006; // moveai a0, #%hi(0x01000300)
+unsigned int move_from_mailbox_to_a1 = 0x01216400;	//move.4 a1,(a0)
+
+unsigned single_step_deactivate_threads = 0xc95fffff;	//movei mt_dbg_active_clr,#-1
+unsigned single_step_activate_thread = 0xc9520000;	//movei mt_dbg_active_set,#0
+unsigned activate_all_threads = 0xc952ffff;	//movei mt_dbg_active_set,#-1
+unsigned setup_mt_single_step = 0xc9580000;	//movei mt_single_step,#0
+
+unsigned int clear_break_register = 0xc9570000;	//movei mt_break_clr,#0
+unsigned int clear_trap_register = 0xc9710000;	//movei mt_trap_clr,#0
+
+unsigned int bist_sequence_1[] = {
+  0xe022000e,	//moveai a1,#%hi(0x01000700)
+  0x04216060,	//move.4 4(a1),#96
+  0x04216000,	//move.4 4(a1),#0
+  0x24213c21,	//bset 4(a1),4(a1),#0x7
+  0xd6e00001,	//jmpt.t 60000108 <__pram_bist+0x14>
+  0x2c213c21,	//bclr 4(a1),4(a1),#0x7
+  0x24211c21,	//bset 4(a1),4(a1),#0x3
+  0x24211421,	//bset 4(a1),4(a1),#0x2
+  0x24212421,	//bset 4(a1),4(a1),#0x4
+  0xd6a00001,	//jmpt.f 6000011c <__pram_bist+0x28>
+  0xd6e00001,	//jmpt.t 60000120 <__pram_bist+0x2c>
+};
+
+unsigned int bist_sequence_2[] = {
+  0x24213c21,	//bset 4(a1),4(a1),#0x7
+  0xd6e00001,	//jmpt.t 60000128 <__pram_bist+0x34>
+  0x2c213c21,	//bclr 4(a1),4(a1),#0x7
+  0x10c01c22,	//btst 8(a1),#0x3
+  0xd1fffffc,	//jmpeq.t 60000120 <__pram_bist+0x2c>
+};
+
+static int fast_write_code_address;
+static int fast_read_code_address;
+
+static unsigned int iport_stat = 0;
+static int already_in_ubicom32v3StopProcessor=0;
+
+int
+ubicom32v3haltMPandRreadDirectRegisters(struct direct_read_registers *direct_regs)
+{
+  struct ubicom32command_packet packet;
+  struct ubicom32command *command;
+  int count, ret;
+  unsigned int reply;
+
+  ubicom32command_packet_init(&packet);
+
+  // stop all the threads by sending ISD_HALT_MP
+  count = ubicom32command_packet_append(&packet, 0, ISD_HALT_MP, 1);
+
+  /* Ship the packet down for execution */
+  ret = ubicom32command_packet_send(&packet);
+  if(ret)
+    return ret;
+
+  ubicom32command_packet_init(&packet);
+
+  /* recover Chip ID*/
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, 0x100);
+  count = ubicom32command_packet_append(&packet, 0, ISD_NOP, 0);
+
+  /* recover int_stat0*/
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, 0x104);
+  count = ubicom32command_packet_append(&packet, 0, ISD_NOP, 0);
+
+  /* recover int_stat 1*/
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, 0x108);
+  count = ubicom32command_packet_append(&packet, 0, ISD_NOP, 0);
+
+  /* recover mt_active*/
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, 0x138);
+  count = ubicom32command_packet_append(&packet, 0, ISD_NOP, 0);
+
+  /* recover mt_dbg_active */
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, 0x144);
+  count = ubicom32command_packet_append(&packet, 0, ISD_NOP, 0);
+
+  /* recover mt_en */
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, 0x14c);
+  count = ubicom32command_packet_append(&packet, 0, ISD_NOP, 0);
+
+  /* recover mt_break */
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, 0x158);
+  count = ubicom32command_packet_append(&packet, 0, ISD_NOP, 0);
+
+  /* recover scratchpad0*/
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, 0x180);
+  count = ubicom32command_packet_append(&packet, 0, ISD_NOP, 0);
+
+  /* recover scratchpad1*/
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, 0x184);
+  count = ubicom32command_packet_append(&packet, 0, ISD_NOP, 0);
+
+  /* recover scratchpad2 */
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, 0x188);
+  count = ubicom32command_packet_append(&packet, 0, ISD_NOP, 0);
+
+  /* recover scratchpad3 */
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, 0x18c);
+  count = ubicom32command_packet_append(&packet, 0, ISD_NOP, 0);
+
+  /* recover mt_i_blocked */
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, 0x1a4);
+  count = ubicom32command_packet_append(&packet, 0, ISD_NOP, 0);
+
+  /* recover mt_d_blocked */
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, 0x1a8);
+  count = ubicom32command_packet_append(&packet, 0, ISD_NOP, 0);
+
+  /* recover mt_trap */
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, 0x1bc);
+  count = ubicom32command_packet_append(&packet, 0, ISD_NOP, 0);
+
+  /* ship down the packet */
+  ret = ubicom32command_packet_send(&packet);
+  if(ret)
+    return ret;
+
+  command = &packet.commands[0];
+
+  // extract reply
+  reply = (command->operand0<<24) | (command->operand1<<16) | (command->operand2<<8) | command->operand3;
+  direct_regs->chip_id = reply;
+  command +=2;
+
+  // extract reply
+  reply = (command->operand0<<24) | (command->operand1<<16) | (command->operand2<<8) | command->operand3;
+  direct_regs->int_stat0 = reply;
+  command +=2;
+
+  // extract reply
+  reply = (command->operand0<<24) | (command->operand1<<16) | (command->operand2<<8) | command->operand3;
+  direct_regs->int_stat1 = reply;
+  command +=2;
+
+  // extract reply
+  reply = (command->operand0<<24) | (command->operand1<<16) | (command->operand2<<8) | command->operand3;
+  direct_regs->mt_active = reply;
+  mt_active = reply;
+  command +=2;
+
+  // extract reply
+  reply = (command->operand0<<24) | (command->operand1<<16) | (command->operand2<<8) | command->operand3;
+  direct_regs->mt_dbg_active = reply;
+  mt_dbg_active = reply;
+  command +=2;
+
+  // extract reply
+  reply = (command->operand0<<24) | (command->operand1<<16) | (command->operand2<<8) | command->operand3;
+  direct_regs->mt_en = reply;
+  mt_en = reply;
+  command +=2;
+
+  // extract reply
+  reply = (command->operand0<<24) | (command->operand1<<16) | (command->operand2<<8) | command->operand3;
+  direct_regs->mt_break = reply;
+  command +=2;
+
+  // extract reply
+  reply = (command->operand0<<24) | (command->operand1<<16) | (command->operand2<<8) | command->operand3;
+  direct_regs->scratchpad0 = reply;
+  command +=2;
+
+  // extract reply
+  reply = (command->operand0<<24) | (command->operand1<<16) | (command->operand2<<8) | command->operand3;
+  direct_regs->scratchpad1 = reply;
+  command +=2;
+
+  // extract reply
+  reply = (command->operand0<<24) | (command->operand1<<16) | (command->operand2<<8) | command->operand3;
+  direct_regs->scratchpad2 = reply;
+  command +=2;
+
+  // extract reply
+  reply = (command->operand0<<24) | (command->operand1<<16) | (command->operand2<<8) | command->operand3;
+  direct_regs->scratchpad3 = reply;
+  command +=2;
+
+  // extract reply
+  reply = (command->operand0<<24) | (command->operand1<<16) | (command->operand2<<8) | command->operand3;
+  direct_regs->mt_i_blocked = reply;
+  command +=2;
+
+  // extract reply
+  reply = (command->operand0<<24) | (command->operand1<<16) | (command->operand2<<8) | command->operand3;
+  direct_regs->mt_d_blocked = reply;
+  command +=2;
+
+  // extract reply
+  reply = (command->operand0<<24) | (command->operand1<<16) | (command->operand2<<8) | command->operand3;
+  direct_regs->mt_trap = reply;
+  command +=2;
+
+  return 0;
+}
+
+/*
+ * ubicom32v3setupDebuggerThread(thredNo)
+ * All threads are in a halted state by a HALT_MP command
+ * This routine sets up a given thread as the debugger thread by a. Saving the thread's PC by reading it via a ISD_RD_MP_REG command.
+ * The thread pc is then set to point to the debug space ie PC is set to 0x1000000 by a ISD_SET_MP_REG_ADDR command.
+ * Force the thread to run with a FORCE_MP command
+ * Save a0, a1 and csr by executing move.4 scratchpad3, a1; move.4 scratchpad2, a0; move.4 scratchpad2, csr via debug port
+ * Save d0 by move.4 scratchpad0, d0 and reading back scratchpad0 to host by a ISD_RD_MP_REG command.
+ * Set a0 to mailbox base by executing moveai a0, #%hi(0x01000300) via debug port
+ */
+int
+ubicom32v3setupDebuggerThread(unsigned int threadNo)
+{
+  struct ubicom32command_packet packet;
+  struct ubicom32command *command;
+  int count, ret;
+  int pcIndex, d0Index, previous_pc_index;
+  unsigned int reply;
+
+  ubicom32command_packet_init(&packet);
+
+  // send down ISD_RD_MP_REG PC for this thread
+  ubicom32v3currentThread = threadNo;
+  ubicom32v3_current_thread = threadNo+1;
+
+  /* recover thread PC */
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, (0xd0 | ubicom32v3currentThread <<10));
+  pcIndex = count;
+  count = ubicom32command_packet_append(&packet, 0, ISD_NOP, 0);
+
+  /* set thread PC to debug space */
+  count = ubicom32command_packet_append(&packet, 0, ISD_SET_MP_REG_ADDR, (0xd0 | ubicom32v3currentThread <<10));
+  count = ubicom32command_packet_append(&packet, 0, ISD_WR_MP_REG, 0x1000000);
+
+  /* force the current thread to execute out of debug space */
+  count = ubicom32command_packet_append(&packet, 0, ISD_FORCE_MP, (1<< ubicom32v3currentThread));
+
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_IPORT_STAT, 0);
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_IPORT_STAT, 0);
+
+  /* Save previous PC. */
+  count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, save_previous_pc);
+
+  /* retrieve contents of scratchpad0 using ISD_RD_MP_REG. Scratchpad0 has previous_pc contents */
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, 0x180);
+  previous_pc_index = count;
+  count = ubicom32command_packet_append(&packet, 0, ISD_NOP, 0);
+
+  /* Save d0 in scratchpad0. */
+  count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, save_current_thread_state[0]);
+
+  /* retrieve contents of scratchpad0 using ISD_RD_MP_REG. Scratchpad0 has d0 contents */
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, 0x180);
+  d0Index = count;
+  count = ubicom32command_packet_append(&packet, 0, ISD_NOP, 0);
+
+  /* Save a1 in scratchpad0. */
+  count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, save_current_thread_state[1]);
+
+  /* retrieve contents of scratchpad0 using ISD_RD_MP_REG. Scratchpad0 has a1 contents */
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, 0x180);
+  count = ubicom32command_packet_append(&packet, 0, ISD_NOP, 0);
+
+  /* Save a0 in scratchpad0. */
+  count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, save_current_thread_state[2]);
+
+  /* retrieve contents of scratchpad0 using ISD_RD_MP_REG. Scratchpad0 has a0 contents */
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, 0x180);
+  count = ubicom32command_packet_append(&packet, 0, ISD_NOP, 0);
+
+  /* Save csr in scratchpad0. */
+  count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, save_current_thread_state[3]);
+
+  /* retrieve contents of scratchpad0 using ISD_RD_MP_REG. Scratchpad0 has csr contents */
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, 0x180);
+  count = ubicom32command_packet_append(&packet, 0, ISD_NOP, 0);
+
+  /* load mailbox base address into a0 */
+  count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, save_current_thread_state[4]);
+
+  /* issue RD_IPORT_STAT command. */
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_IPORT_STAT, 0);
+  count = ubicom32command_packet_append(&packet, 0, ISD_NOP, 0);
+
+  /* ship down the packet */
+  ret = ubicom32command_packet_send(&packet);
+  if(ret)
+    return ret;
+
+  command = &packet.commands[pcIndex];
+
+  // extract reply
+  reply = (command->operand0<<24) | (command->operand1<<16) | (command->operand2<<8) | command->operand3;
+
+  if((reply & 0xff000000) == 0x01000000)
+    {
+      /* This is bad. Issue a reset and try to recover */
+      extern int ubicom32v3isp_reset(void);
+      extern int ubicom32v3restartProcessor(unsigned int);
+      extern int ubicom32v3waitForBP(bpReason_t *);
+      extern int ubicom32v3stopProcessor(void);
+      ret = ubicom32v3isp_reset();
+#if 0
+      ret = ubicom32v3restartProcessor(1);
+
+      for (i=0; i< 400; i++)
+	{
+	  ret = ubicom32v3waitForBP(&reason);
+
+	  if(ret< 0)
+	    {
+	      //printf_unfiltered ("error: unable to read status\n");
+	      break;
+	    }
+
+	  if(ret == 0)
+	    {
+	      /* wait for 10 ms before trying again */
+	      usleep(10000);
+	      continue;
+	}
+	  else
+	    {
+	      break;
+	    }
+	}
+
+      //printf("Out of the loop i = %d\n", i);
+      if((i == 400) || (ret < 0))
+	{
+	  /* The processor is still running, we need to stop it. */
+	  if(already_in_ubicom32v3StopProcessor)
+	    {
+	      ret = ubicom32v3isp_reset();
+	    }
+	  else
+	    {
+	      ret = ubicom32v3stopProcessor();
+	    }
+	}
+#endif
+      return ret;
+    }
+  else
+    current_thread_saved_state.pc = reply;
+
+  command = &packet.commands[previous_pc_index];
+
+  // extract previous_pc
+  reply = (command->operand0<<24) | (command->operand1<<16) | (command->operand2<<8) | command->operand3;
+  current_thread_saved_state.previous_pc = reply;
+
+  command = &packet.commands[d0Index];
+
+  // extract reply d0
+  reply = (command->operand0<<24) | (command->operand1<<16) | (command->operand2<<8) | command->operand3;
+  current_thread_saved_state.d0 = reply;
+
+  command+= 3;
+
+  // extract reply a1
+  reply = (command->operand0<<24) | (command->operand1<<16) | (command->operand2<<8) | command->operand3;
+  current_thread_saved_state.a1 = reply;
+
+  command+=3;
+
+  // extract reply a0
+  reply = (command->operand0<<24) | (command->operand1<<16) | (command->operand2<<8) | command->operand3;
+  current_thread_saved_state.a0 = reply;
+
+  command+=3;
+
+  // extract reply csr
+  reply = (command->operand0<<24) | (command->operand1<<16) | (command->operand2<<8) | command->operand3;
+  current_thread_saved_state.csr = reply;
+
+  return ret;
+}
+
+#if 0
+int
+ubicom32v3setupDebuggerThread(unsigned int threadNo)
+{
+  struct ubicom32command_packet packet;
+  struct ubicom32command *command;
+  int count, ret, i;
+  int pcIndex, d0Index, previous_pc_index;
+  unsigned int reply;
+
+  ubicom32command_packet_init(&packet);
+
+  // send down ISD_RD_MP_REG PC for this thread
+  ubicom32v3currentThread = threadNo;
+  ubicom32v3_current_thread = threadNo+1;
+
+  /* recover thread PC */
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, (0xd0 | ubicom32v3currentThread <<10));
+  pcIndex = count;
+  count = ubicom32command_packet_append(&packet, 0, ISD_NOP, 0);
+
+  /* set thread PC to debug space */
+  count = ubicom32command_packet_append(&packet, 0, ISD_SET_MP_REG_ADDR, (0xd0 | ubicom32v3currentThread <<10));
+  count = ubicom32command_packet_append(&packet, 0, ISD_WR_MP_REG, 0x1000000);
+
+  /* force the current thread to execute out of debug space */
+  count = ubicom32command_packet_append(&packet, 0, ISD_FORCE_MP, (1<< ubicom32v3currentThread));
+
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_IPORT_STAT, 0);
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_IPORT_STAT, 0);
+
+  /* Save previous PC. */
+  count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, save_previous_pc);
+
+  /* retrieve contents of scratchpad0 using ISD_RD_MP_REG. Scratchpad0 has previous_pc contents */
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, 0x180);
+  previous_pc_index = count;
+  count = ubicom32command_packet_append(&packet, 0, ISD_NOP, 0);
+
+  /* send down the register save instructions */
+  for(i=0; i< 5; i++)
+    {
+      count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, save_current_thread_state[i]);
+    }
+
+  /* retrieve contents of scratchpad0 using ISD_RD_MP_REG. Scratchpad0 has d0 contents */
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, 0x180);
+  d0Index = count;
+
+  count = ubicom32command_packet_append(&packet, 0, ISD_NOP, 0);
+
+  /* retrieve contents of scratchpad0 using ISD_RD_MP_REG. Scratchpad1 has csr contents */
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, 0x184);
+  count = ubicom32command_packet_append(&packet, 0, ISD_NOP, 0);
+
+  /* retrieve contents of scratchpad0 using ISD_RD_MP_REG. Scratchpad2 has a0 contents */
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, 0x188);
+  count = ubicom32command_packet_append(&packet, 0, ISD_NOP, 0);
+
+  /* retrieve contents of scratchpad0 using ISD_RD_MP_REG. Scratchpad3 has a1 contents */
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, 0x18c);
+  count = ubicom32command_packet_append(&packet, 0, ISD_NOP, 0);
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_IPORT_STAT, 0);
+  count = ubicom32command_packet_append(&packet, 0, ISD_NOP, 0);
+
+  /* ship down the packet */
+  ret = ubicom32command_packet_send(&packet);
+  if(ret)
+    return ret;
+
+  command = &packet.commands[pcIndex];
+
+  // extract reply
+  reply = (command->operand0<<24) | (command->operand1<<16) | (command->operand2<<8) | command->operand3;
+
+  if((reply & 0xff000000) == 0x01000000)
+    {
+      /* This is bad. Issue a reset and try to recover */
+      extern int ubicom32v3isp_reset(void);
+      extern int ubicom32v3restartProcessor(unsigned int);
+      extern int ubicom32v3waitForBP(bpReason_t *);
+      extern int ubicom32v3stopProcessor(void);
+      int i;
+      bpReason_t reason;
+      ret = ubicom32v3isp_reset();
+#if 0
+      ret = ubicom32v3restartProcessor(1);
+
+      for (i=0; i< 400; i++)
+	{
+	  ret = ubicom32v3waitForBP(&reason);
+
+	  if(ret< 0)
+	    {
+	      //printf_unfiltered ("error: unable to read status\n");
+	      break;
+	    }
+
+	  if(ret == 0)
+	    {
+	      /* wait for 10 ms before trying again */
+	      usleep(10000);
+	      continue;
+	}
+	  else
+	    {
+	      break;
+	    }
+	}
+
+      //printf("Out of the loop i = %d\n", i);
+      if((i == 400) || (ret < 0))
+	{
+	  /* The processor is still running, we need to stop it. */
+	  if(already_in_ubicom32v3StopProcessor)
+	    {
+	      ret = ubicom32v3isp_reset();
+	    }
+	  else
+	    {
+	      ret = ubicom32v3stopProcessor();
+	    }
+	}
+#endif
+      return ret;
+    }
+  else
+    current_thread_saved_state.pc = reply;
+
+  command = &packet.commands[previous_pc_index];
+
+  // extract previous_pc
+  reply = (command->operand0<<24) | (command->operand1<<16) | (command->operand2<<8) | command->operand3;
+  current_thread_saved_state.previous_pc = reply;
+
+  command = &packet.commands[d0Index];
+
+  // extract reply
+  reply = (command->operand0<<24) | (command->operand1<<16) | (command->operand2<<8) | command->operand3;
+  current_thread_saved_state.d0 = reply;
+
+  command++;
+  command++;
+
+  // extract reply
+  reply = (command->operand0<<24) | (command->operand1<<16) | (command->operand2<<8) | command->operand3;
+  current_thread_saved_state.csr = reply;
+
+  command++;
+  command++;
+
+  // extract reply
+  reply = (command->operand0<<24) | (command->operand1<<16) | (command->operand2<<8) | command->operand3;
+  current_thread_saved_state.a0 = reply;
+
+  command++;
+  command++;
+
+  // extract reply
+  reply = (command->operand0<<24) | (command->operand1<<16) | (command->operand2<<8) | command->operand3;
+  current_thread_saved_state.a1 = reply;
+
+  return ret;
+}
+#endif
+
+
+/*
+ * ubicom32v3restoreDebuggerThread()
+ * This routine restores the ubicom32v3currentThread back to its original state by restoring watchdog and
+ * restoring d0, csr, a0 and a1
+ * Restore d0 by writing saved value of d0 to mailbox and execute move.4 d0, (a0)
+ * restore csr by writing saved value of d0 to mailbox and execute move.4 csr, (a0)
+ * restore a0 by writing saved value of d0 to mailbox and execute move.4 a0, (a0)
+ * restore a1 by writing saved value of d0 to mailbox and execute move.4 a1, (a0)
+ * execute FORCE_MP 0
+ * restore thread PC to saved PC via IPSD_SET_MP_REG_ADDR command
+ */
+int
+ubicom32v3restoreDebuggerThread(unsigned int scratch3value)
+{
+  struct ubicom32command_packet packet;
+  int count, ret;
+  unsigned int s3value = (scratch3value & 0xffff) | restore_current_thread_state[5];
+
+  if(ubicom32v3_current_thread == -1)
+    return 0;
+
+  ubicom32command_packet_init(&packet);
+
+  /* Restore watchdog .*/
+  /* Load a1 with timer base address */
+  count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, restore_watchdog[0]);
+
+  /* Write TKEY_VALUE 0xa1b2c3d4 to mailbox */
+  count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, 0xa1b2c3d4);
+
+  /* Load tkey value from mailbox. */
+  count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, restore_watchdog[1]);
+
+  /* Write timer increment to mailbox 0x800000 */
+  count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, 0x800000);
+
+  /* Move timer increment from mailbox into d0 */
+  count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, restore_watchdog[2]);
+
+  /* timer->wdcom = timer->mptval + increment */
+  count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, restore_watchdog[3]);
+
+  /* timer->tkey = 0 */
+  count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, restore_watchdog[4]);
+
+  /* write the saved  d0 value to the mailbox */
+  count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, current_thread_saved_state.d0);
+  count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, restore_current_thread_state[0]);
+
+  /* write the saved  csr value to the mailbox */
+  count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, current_thread_saved_state.csr);
+  count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, restore_current_thread_state[1]);
+
+  /* write the saved  a1 value to the mailbox */
+  count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, current_thread_saved_state.a1);
+  count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, restore_current_thread_state[2]);
+
+  /* write the saved  a0 value to the mailbox */
+  count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, current_thread_saved_state.a0);
+  count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, restore_current_thread_state[3]);
+
+  /* set scratchpad0 to 1 */
+  count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, restore_current_thread_state[4]);
+
+  /* set scratchpad3 to the provided value */
+  count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, s3value);
+
+  /* force the thread to stop */
+  count = ubicom32command_packet_append(&packet, 0, ISD_FORCE_MP, 0);
+
+  /* set the thread PC to the saved thread pc */
+  count = ubicom32command_packet_append(&packet, 0, ISD_SET_MP_REG_ADDR, (0xd0 | ubicom32v3currentThread <<10));
+  count = ubicom32command_packet_append(&packet, 0, ISD_WR_MP_REG, current_thread_saved_state.pc);
+
+  /* ship down the command */
+  ret = ubicom32command_packet_send(&packet);
+
+  ubicom32v3currentThread=ubicom32v3_current_thread=-1;
+  return ret;
+}
+
+int
+ubicom32v3readRegisters( int threadNo,
+		   int regIndex,
+		   int *dest,
+		   unsigned int length)
+{
+  int ret, count;
+  int *regAddrMap = &current_cpu->register_map_table[regIndex];
+  struct ubicom32command_packet packet;
+  ubicom32command_packet_init(&packet);
+
+  /*
+   * Each register read command is made up of 3 Debug Port command a) Execute move.4 scratchpad0, register
+   * b) ISD_RD_MP_REG scratchpad0 (this moves the data to host ) c) ISD_NOP to kick the data out. (This because of the RTL bug.)
+   */
+  while(length)
+    {
+      unsigned int transferLength = (ubicom32command_packet_get_free(&packet))/3;
+      unsigned int i;
+      int transferStartIndex;
+      struct ubicom32command *command;
+      unsigned int move_reg = move_register_to_scratchpad0;
+      unsigned int reply;
+
+      if(transferLength > length)
+	transferLength = length;
+
+      // Index of the first transfer entry
+      transferStartIndex = ubicom32command_packet_get_next(&packet) + 1;
+
+      for(i=0; i< transferLength; i++)
+	{
+	  /* issue move.4 scratchpad0, register */
+	  count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, (move_reg | ( *regAddrMap++>>2)));
+
+	  /* retrieve scratchpad0 contents */
+	  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, 0x180);
+	  count = ubicom32command_packet_append(&packet, 0, ISD_NOP, 0);
+	}
+
+      // Ship the packet for processing
+      ret = ubicom32command_packet_send(&packet);
+      if(ret)
+	return ret;
+
+      // Move the reply data into destination buffer
+      command = &packet.commands[transferStartIndex];
+      for(i=0; i< transferLength; i++, command+= 3)
+	{
+	  reply = (command->operand0<<24) | (command->operand1<<16) |
+	    (command->operand2<<8) | command->operand3;
+
+	  if(regIndex == 34)
+	    *dest++ = current_thread_saved_state.pc;
+	  else if(regIndex == 0)
+	    *dest++ = current_thread_saved_state.d0;
+	  else if(regIndex == 16)
+	    *dest++ = current_thread_saved_state.a0;
+	  else if(regIndex == 17)
+	    *dest++ = current_thread_saved_state.a1;
+	  else if(regIndex == 29)
+	    *dest++ = current_thread_saved_state.csr;
+	  else if(regIndex == 38)
+	    *dest++ = current_thread_saved_state.previous_pc;
+	  else
+	    *dest++ = (int)reply;
+
+	  regIndex++;
+	}
+
+      // readjust length etc.
+      ubicom32command_packet_init(&packet);
+      length = length - transferLength;
+    }
+
+  return 0;
+}
+
+int
+ubicom32v3writeRegisters( int threadNo,
+		int regIndex,
+		int *inBuf,
+		unsigned int length)
+{
+  int ret, count;
+  unsigned int i;
+  struct ubicom32command_packet packet;
+  int *regAddrMap = &current_cpu->register_map_table[regIndex];
+  ubicom32v3Regs_t *mainRegs = (ubicom32v3Regs_t *)current_cpu->registers;
+  //int *regAddrMap = &ubicom32v3GdbIndexToRegAddrMap[regIndex];
+
+  if(remote_ubicom32v3_state == UBICOM32V3_CORE_STOPPED)
+    {
+      int *ptr;
+      if(regIndex < 39)
+	{
+	  // Per thread registers
+	  ptr = &mainRegs->tRegs[threadNo].dr[regIndex];
+	}
+      else
+	{
+	  // global registers
+	  ptr = &mainRegs->globals.chip_id;
+	  ptr += (regIndex-39);
+	}
+      while (length--)
+	{
+	  *ptr++ = *inBuf++;
+	}
+      return 0;
+    }
+
+  ubicom32command_packet_init(&packet);
+  if(regIndex < 39)
+    {
+      // invalidate the Per Thread entry
+      mainRegs->perThreadRead[threadNo]=0;
+    }
+  else
+    {
+      // invalidate the global entry
+      mainRegs->globalsRead=0;
+    }
+
+  /*
+   * Each register write command is made up of 2. a) Write mailbox with content of the register
+   * b) Execute move.4 register, (a0)
+   */
+
+  while(length)
+    {
+      unsigned int transferLength = ubicom32command_packet_get_free(&packet)/2;
+      unsigned int move_reg = move_from_mailbox_to_register;
+      unsigned int must_send=0;
+
+      if(transferLength > length)
+	transferLength = length;
+
+      for(i=0; i< transferLength; i++)
+	{
+	  switch(regIndex++)
+	    {
+	    case 34:
+	      {
+		/* ThreadPC is getting written */
+		current_thread_saved_state.pc = *inBuf++;
+		continue;
+	      }
+	      break;
+	    case 0:
+	      {
+		/* d0 is getting written */
+		current_thread_saved_state.d0 = *inBuf++;
+		continue;
+	      }
+	      break;
+	    case 16:
+	      {
+		/* a0 is getting written */
+		current_thread_saved_state.a0 = *inBuf++;
+		continue;
+	      }
+	      break;
+	    case 17:
+	      {
+		/* a1 is getting written */
+		current_thread_saved_state.a1 = *inBuf++;
+		continue;
+	      }
+	      break;
+	    case 29:
+	      {
+		/* csr is getting written */
+		current_thread_saved_state.csr = *inBuf++;
+		continue;
+	      }
+	    case 28:
+	      {
+		/* previous_pc is getting written */
+		current_thread_saved_state.previous_pc = *inBuf++;
+		continue;
+	      }
+	      break;
+	    default:
+	      {
+		must_send = 1;
+		count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX,
+						  (unsigned int)(*inBuf++));
+		count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, (move_reg | (( *regAddrMap++>>2) << 16)));
+	      }
+	    }
+	}
+      // Ship the packet for processing if needed
+      if(must_send) {
+	ret = ubicom32command_packet_send(&packet);
+	if(ret)
+	  return ret;
+      }
+
+      length = length - transferLength;
+      ubicom32command_packet_init(&packet);
+    }
+
+  return 0;
+}
+
+int
+ubicom32v4writeRegisters( int threadNo,
+		int regIndex,
+		int *inBuf,
+		unsigned int length)
+{
+  int ret, count;
+  unsigned int i;
+  struct ubicom32command_packet packet;
+  int *regAddrMap = &current_cpu->register_map_table[regIndex];
+  ubicom32v4Regs_t *mainRegs = (ubicom32v4Regs_t *)current_cpu->registers;
+  //int *regAddrMap = &ubicom32v3GdbIndexToRegAddrMap[regIndex];
+
+  if(remote_ubicom32v3_state == UBICOM32V3_CORE_STOPPED)
+    {
+      int *ptr;
+      if(regIndex < 39)
+	{
+	  // Per thread registers
+	  ptr = &mainRegs->tRegs[threadNo].dr[regIndex];
+	}
+      else
+	{
+	  // global registers
+	  ptr = &mainRegs->globals.chip_id;
+	  ptr += (regIndex-39);
+	}
+      while (length--)
+	{
+	  *ptr++ = *inBuf++;
+	}
+      return 0;
+    }
+
+  ubicom32command_packet_init(&packet);
+  if(regIndex < 39)
+    {
+      // invalidate the Per Thread entry
+      mainRegs->perThreadRead[threadNo]=0;
+    }
+  else
+    {
+      // invalidate the global entry
+      mainRegs->globalsRead=0;
+    }
+
+  /*
+   * Each register write command is made up of 2. a) Write mailbox with content of the register
+   * b) Execute move.4 register, (a0)
+   */
+
+  while(length)
+    {
+      unsigned int transferLength = ubicom32command_packet_get_free(&packet)/2;
+      unsigned int move_reg = move_from_mailbox_to_register;
+      unsigned int must_send=0;
+
+      if(transferLength > length)
+	transferLength = length;
+
+      for(i=0; i< transferLength; i++)
+	{
+	  switch(regIndex++)
+	    {
+	    case 34:
+	      {
+		/* ThreadPC is getting written */
+		current_thread_saved_state.pc = *inBuf++;
+		continue;
+	      }
+	      break;
+	    case 0:
+	      {
+		/* d0 is getting written */
+		current_thread_saved_state.d0 = *inBuf++;
+		continue;
+	      }
+	      break;
+	    case 16:
+	      {
+		/* a0 is getting written */
+		current_thread_saved_state.a0 = *inBuf++;
+		continue;
+	      }
+	      break;
+	    case 17:
+	      {
+		/* a1 is getting written */
+		current_thread_saved_state.a1 = *inBuf++;
+		continue;
+	      }
+	      break;
+	    case 29:
+	      {
+		/* csr is getting written */
+		current_thread_saved_state.csr = *inBuf++;
+		continue;
+	      }
+	    case 28:
+	      {
+		/* previous_pc is getting written */
+		current_thread_saved_state.previous_pc = *inBuf++;
+		continue;
+	      }
+	      break;
+	    default:
+	      {
+		must_send = 1;
+		count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX,
+						  (unsigned int)(*inBuf++));
+		count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, (move_reg | (( *regAddrMap++>>2) << 16)));
+	      }
+	    }
+	}
+      // Ship the packet for processing if needed
+      if(must_send) {
+	ret = ubicom32command_packet_send(&packet);
+	if(ret)
+	  return ret;
+      }
+
+      length = length - transferLength;
+      ubicom32command_packet_init(&packet);
+    }
+
+  return 0;
+}
+
+int ubicom32v3gdbGetallRegs(struct ubicom32_cpu *cpu, int threadNo)
+{
+  int ret;
+  ubicom32v3Regs_t *mainRegs = (ubicom32v3Regs_t *)cpu->registers;
+  int *dptr = &mainRegs->tRegs[threadNo].dr[0];
+
+  if(mainRegs->perThreadRead[threadNo] ==0)
+    {
+      /* get all per thread debugger registers for the given thread */
+      mainRegs->perThreadRead[threadNo]=1;
+
+      /* read the data register block for the given thread */
+      ret = ubicom32v3readRegisters(threadNo, 0, dptr, 39);
+      if(ret)
+	return (ret);
+
+    }
+
+  if(mainRegs->globalsRead == 0)
+    {
+      struct direct_read_registers *direct_regs = &direct_read_regs;
+
+      mainRegs->globalsRead = 1;
+
+      /* Start on the globals. Begin athe chip_id */
+      dptr = &mainRegs->globals.chip_id;
+      *dptr++ = direct_regs->chip_id;
+      *dptr++ = direct_regs->int_stat0;
+      *dptr++ = direct_regs->int_stat1;
+
+      /* read global control */
+      dptr = &mainRegs->globals.global_ctrl;
+      ret = ubicom32v3readRegisters(1, 46, dptr, 2);
+      if(ret)
+	return ret;
+
+      mt_active = direct_regs->mt_active = mainRegs->globals.mt_active;
+
+      /* read mt_dbg_active */
+      mainRegs->globals.mt_dbg_active = direct_regs->mt_dbg_active;
+
+      mainRegs->globals.mt_en = direct_regs->mt_en;
+
+      /* read mt_hpri etc */
+      dptr = &mainRegs->globals.mt_hpri;
+      ret = ubicom32v3readRegisters(1, 53, dptr, 2);
+      if(ret)
+	return ret;
+      mt_pri = mainRegs->globals.mt_hpri;
+      mt_sched = mainRegs->globals.mt_hrt;
+
+      mainRegs->globals.mt_break = direct_regs->mt_break;
+
+      dptr = &mainRegs->globals.mt_single_step;
+      ret = ubicom32v3readRegisters(1, 57, dptr, 2);
+      if(ret)
+	return ret;
+
+      dptr = &mainRegs->globals.dcapt;
+      ret = ubicom32v3readRegisters(1, 60, dptr, 1);
+      if(ret)
+	return ret;
+
+      mainRegs->globals.scratchpad0 = direct_regs->scratchpad0;
+      mainRegs->globals.scratchpad1 = direct_regs->scratchpad1;
+      mainRegs->globals.scratchpad2 = direct_regs->scratchpad2;
+      mainRegs->globals.scratchpad3 = direct_regs->scratchpad3;
+
+      dptr = &mainRegs->globals.chip_cfg;
+      ret = ubicom32v3readRegisters(1, 66, dptr, 1);
+      if(ret)
+	return ret;
+
+      mainRegs->globals.mt_i_blocked = direct_regs->mt_i_blocked;
+      mainRegs->globals.mt_d_blocked = direct_regs->mt_d_blocked;
+
+      dptr = &mainRegs->globals.mt_trap_en;
+      ret = ubicom32v3readRegisters(1, 72, dptr, 1);
+      if(ret)
+	return ret;
+
+      mainRegs->globals.mt_en = direct_regs->mt_en;
+
+      dptr = &mainRegs->globals.i_range0_hi;
+      ret = ubicom32v3readRegisters(1, 76, dptr, 21);
+      if(ret)
+	return ret;
+    }
+
+  return 0;
+}
+
+int
+ubicom32v4gdbGetallRegs(struct ubicom32_cpu *cpu, int threadNo)
+{
+  int ret;
+  ubicom32v4Regs_t *mainRegs = (ubicom32v4Regs_t *)cpu->registers;
+  int *dptr = &mainRegs->tRegs[threadNo].dr[0];
+
+  if(mainRegs->perThreadRead[threadNo] ==0)
+    {
+      /* get all per thread debugger registers for the given thread */
+      mainRegs->perThreadRead[threadNo]=1;
+
+      /* read the data register block for the given thread */
+      ret = ubicom32v3readRegisters(threadNo, 0, dptr, 39);
+      if(ret)
+	return (ret);
+
+    }
+
+  if(mainRegs->globalsRead == 0)
+    {
+      struct direct_read_registers *direct_regs = &direct_read_regs;
+
+      mainRegs->globalsRead = 1;
+
+      /* Start on the globals. Begin athe chip_id */
+      dptr = &mainRegs->globals.chip_id;
+      *dptr++ = direct_regs->chip_id;
+      *dptr++ = direct_regs->int_stat0;
+      *dptr++ = direct_regs->int_stat1;
+
+      /* read global control */
+      dptr = &mainRegs->globals.global_ctrl;
+      ret = ubicom32v3readRegisters(1, 46, dptr, 2);
+      if(ret)
+	return ret;
+
+      mt_active = direct_regs->mt_active = mainRegs->globals.mt_active;
+
+      /* read mt_dbg_active */
+      mainRegs->globals.mt_dbg_active = direct_regs->mt_dbg_active;
+
+      mainRegs->globals.mt_en = direct_regs->mt_en;
+
+      /* read mt_hpri etc */
+      dptr = &mainRegs->globals.mt_hpri;
+      ret = ubicom32v3readRegisters(1, 53, dptr, 2);
+      if(ret)
+	return ret;
+      mt_pri = mainRegs->globals.mt_hpri;
+      mt_sched = mainRegs->globals.mt_hrt;
+
+      mainRegs->globals.mt_break = direct_regs->mt_break;
+
+      dptr = &mainRegs->globals.mt_single_step;
+      ret = ubicom32v3readRegisters(1, 57, dptr, 2);
+      if(ret)
+	return ret;
+
+      dptr = &mainRegs->globals.dcapt;
+      ret = ubicom32v3readRegisters(1, 60, dptr, 1);
+      if(ret)
+	return ret;
+
+      mainRegs->globals.scratchpad0 = direct_regs->scratchpad0;
+      mainRegs->globals.scratchpad1 = direct_regs->scratchpad1;
+      mainRegs->globals.scratchpad2 = direct_regs->scratchpad2;
+      mainRegs->globals.scratchpad3 = direct_regs->scratchpad3;
+
+      dptr = &mainRegs->globals.chip_cfg;
+      ret = ubicom32v3readRegisters(1, 66, dptr, 1);
+      if(ret)
+	return ret;
+
+      mainRegs->globals.mt_i_blocked = direct_regs->mt_i_blocked;
+      mainRegs->globals.mt_d_blocked = direct_regs->mt_d_blocked;
+
+      dptr = &mainRegs->globals.mt_trap_en;
+      ret = ubicom32v3readRegisters(1, 72, dptr, 1);
+      if(ret)
+	return ret;
+
+      mainRegs->globals.mt_en = direct_regs->mt_en;
+
+      dptr = &mainRegs->globals.i_range0_hi;
+      ret = ubicom32v3readRegisters(1, 76, dptr, 27);
+      if(ret)
+	return ret;
+    }
+
+  return 0;
+}
+
+int
+ubicom32v3gdbGetTPacketRegs(struct ubicom32_cpu *cpu, int threadNo)
+{
+  //extern unsigned int  mt_active, mt_dbg_active, mt_en, mt_sched, mt_pri;
+  int ret;
+  ubicom32v3Regs_t *mainRegs = (ubicom32v3Regs_t *)cpu->registers;
+  int *dptr;
+  /* get d0 register for the given thread */
+
+  /* read the data register block for the given thread */
+  mainRegs->tRegs[threadNo].dr[0] = current_thread_saved_state.d0;
+
+  /* read the address a5-a7 register block */
+  dptr = &mainRegs->tRegs[threadNo].ar[5];
+  ret = ubicom32v3readRegisters(threadNo, 21, dptr, 3);
+  if(ret)
+    return(ret);
+
+  /* read the thread rosr */
+  dptr = &mainRegs->tRegs[threadNo].rosr;
+  ret = ubicom32v3readRegisters(threadNo, 30, dptr, 1);
+  if(ret)
+    return ret;
+
+  /* read the thread pc */
+  mainRegs->tRegs[threadNo].threadPc = current_thread_saved_state.pc;
+
+  /* read mt_active */
+  dptr = &mainRegs->globals.mt_active;
+  ret = ubicom32v3readRegisters(threadNo, 47, dptr, 1);
+  if(ret)
+    return ret;
+
+  /* read mt_dbg_active */
+  dptr = &mainRegs->globals.mt_dbg_active;
+  ret = ubicom32v3readRegisters(threadNo, 51, dptr, 1);
+  if(ret)
+    return ret;
+
+  /* read mt_en etc */
+  dptr = &mainRegs->globals.mt_en;
+  ret = ubicom32v3readRegisters(threadNo, 52, dptr, 3);
+  if(ret)
+    return ret;
+
+  // Update some of our internal copies
+
+  mt_active = (int) ubicom32v3Registers.globals.mt_active;
+  mt_dbg_active = (int) ubicom32v3Registers.globals.mt_dbg_active;
+  mt_en = (int) ubicom32v3Registers.globals.mt_en;
+  mt_pri = (int) ubicom32v3Registers.globals.mt_hpri;
+  mt_sched = (int) ubicom32v3Registers.globals.mt_hrt;
+
+  return 0;
+}
+
+int
+ubicom32v4gdbGetTPacketRegs(struct ubicom32_cpu *cpu, int threadNo)
+{
+  //extern unsigned int  mt_active, mt_dbg_active, mt_en, mt_sched, mt_pri;
+  int ret;
+  ubicom32v4Regs_t *mainRegs = (ubicom32v4Regs_t *)cpu->registers;
+  int *dptr;
+  /* get d0 register for the given thread */
+
+  /* read the data register block for the given thread */
+  mainRegs->tRegs[threadNo].dr[0] = current_thread_saved_state.d0;
+
+  /* read the address a5-a7 register block */
+  dptr = &mainRegs->tRegs[threadNo].ar[5];
+  ret = ubicom32v3readRegisters(threadNo, 21, dptr, 3);
+  if(ret)
+    return(ret);
+
+  /* read the thread rosr */
+  dptr = &mainRegs->tRegs[threadNo].rosr;
+  ret = ubicom32v3readRegisters(threadNo, 30, dptr, 1);
+  if(ret)
+    return ret;
+
+  /* read the thread pc */
+  mainRegs->tRegs[threadNo].threadPc = current_thread_saved_state.pc;
+
+  /* read mt_active */
+  dptr = &mainRegs->globals.mt_active;
+  ret = ubicom32v3readRegisters(threadNo, 47, dptr, 1);
+  if(ret)
+    return ret;
+
+  /* read mt_dbg_active */
+  dptr = &mainRegs->globals.mt_dbg_active;
+  ret = ubicom32v3readRegisters(threadNo, 51, dptr, 1);
+  if(ret)
+    return ret;
+
+  /* read mt_en etc */
+  dptr = &mainRegs->globals.mt_en;
+  ret = ubicom32v3readRegisters(threadNo, 52, dptr, 3);
+  if(ret)
+    return ret;
+
+  // Update some of our internal copies
+
+  mt_active = (int) mainRegs->globals.mt_active;
+  mt_dbg_active = (int) mainRegs->globals.mt_dbg_active;
+  mt_en = (int) mainRegs->globals.mt_en;
+  mt_pri = (int) mainRegs->globals.mt_hpri;
+  mt_sched = (int) mainRegs->globals.mt_hrt;
+
+  return 0;
+}
+
+int
+ubicom32v3readMemory(unsigned int destAddr, unsigned int length, int *data)
+{
+  int ret, count;
+  struct ubicom32command_packet packet;
+  ubicom32command_packet_init(&packet);
+
+  /* setup a1 with the destination address */
+  count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, (unsigned int)(destAddr));
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_IPORT_STAT, 0);
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_IPORT_STAT, 0);
+  count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, move_from_mailbox_to_a1);
+  count = ubicom32command_packet_append(&packet, 0, ISD_NOP, move_from_mailbox_to_a1);
+
+  // Ship the packet for processing
+  ret = ubicom32command_packet_send(&packet);
+  if(ret)
+    return ret;
+
+
+  /*
+   * Each memory read command is made up of 2 Debug Port commands a) Execute move.4 scratchpad0, (a1)4++
+   * b) ISD_RD_MP_REG scratchpad0 (this moves the data to host) c) ISD_NOP (rtl bug).
+   */
+  ubicom32command_packet_init(&packet);
+  while(length)
+    {
+      unsigned int transferLength = (ubicom32command_packet_get_free(&packet));
+      unsigned int i;
+      int transferStartIndex;
+      struct ubicom32command *command;
+      unsigned int reply;
+
+      //transferLength -= ubicom32command_packet_get_next(&packet);
+      transferLength /= 3;
+      // Index of the first transfer entry
+      transferStartIndex = ubicom32command_packet_get_next(&packet) + 1;
+
+      if(transferLength > length)
+	transferLength = length;
+
+      for(i=0; i< transferLength; i++)
+	{
+	  /* issue move.4 scratchpad0), (a1)4++ */
+	  count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, move_memory_to_scratchpad0);
+
+	  /* retrieve scratchpad0 contents */
+	  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, 0x180);
+
+	  count = ubicom32command_packet_append(&packet, 0, ISD_NOP, 0);
+	}
+
+      // Ship the packet for processing
+      ret = ubicom32command_packet_send(&packet);
+      if(ret)
+	return ret;
+
+      // Move the reply data into destination buffer
+      command = &packet.commands[transferStartIndex];
+      for(i=0; i< transferLength; i++, command+= 3)
+	{
+	  reply = (command->operand0<<24) | (command->operand1<<16) |
+	    (command->operand2<<8) | command->operand3;
+
+	  *data++ = (int)reply;
+	}
+
+      // readjust length etc.
+      ubicom32command_packet_init(&packet);
+      length = length - transferLength;
+      count = 0;
+    }
+  return 0;
+}
+
+int
+ubicom32v3writeMemory(unsigned int destAddr, unsigned int length, int *data)
+{
+  int ret, count;
+  unsigned int i;
+  struct ubicom32command_packet packet;
+
+  ubicom32command_packet_init(&packet);
+
+  /* Set up a1 with destination address */
+  count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, (unsigned int)(destAddr));
+  //count = ubicom32command_packet_append(&packet, 0, ISD_RD_IPORT_STAT, 0);
+  count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, move_from_mailbox_to_a1);
+
+  /*
+   * Each memory write command is made up of 2. a) Write mailbox with content of the memory location
+   * b) Execute move.4 (a1)4++, (a0)
+   */
+  while(length)
+    {
+      unsigned int transferLength = ubicom32command_packet_get_free(&packet)/2;
+
+      if(transferLength > length)
+	transferLength = length;
+
+      for(i=0; i< transferLength; i++)
+	{
+	  count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, (unsigned int)(*data++));
+	  count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, move_from_mailbox_to_memory);
+	}
+
+      // Ship the packet for processing
+      ret = ubicom32command_packet_send(&packet);
+      if(ret)
+	return ret;
+
+      length = length - transferLength;
+      ubicom32command_packet_init(&packet);
+    }
+
+  return 0;
+}
+
+/* request to start the cpu with the PC at the given address for fast transfers */
+int
+ubicom32v3isp_force_run_cpu(unsigned int address)
+{
+  int ret, count;
+  struct ubicom32command_packet packet;
+
+  ubicom32command_packet_init(&packet);
+
+  /* force the thread to stop */
+  count = ubicom32command_packet_append(&packet, 0, ISD_FORCE_MP, 0);
+
+  /* set the thread PC to the given address */
+  count = ubicom32command_packet_append(&packet, 0, ISD_SET_MP_REG_ADDR, (0xd0 | ubicom32v3currentThread <<10));
+  count = ubicom32command_packet_append(&packet, 0, ISD_WR_MP_REG, address);
+
+  /* force the thread to run */
+  count = ubicom32command_packet_append(&packet, 0, ISD_FORCE_MP, 1 << ubicom32v3currentThread);
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_IPORT_STAT, 0);
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_IPORT_STAT, 0);
+
+  /* ship down the command */
+  ret = ubicom32command_packet_send(&packet);
+
+  return ret;
+}
+
+extern struct ubicom32command_packet *pending_packet;
+extern unsigned int pending_packet_length;
+extern unsigned int pending_packet_opcode;
+extern unsigned int doubleBuffer;
+
+int
+ubicom32v3UltraFastReadMemoryRaw(unsigned int destAddr, unsigned int length, int *data)
+{
+  int ret, count;
+  //struct ubicom32command_packet packet;
+  struct ubicom32command_packet packets[2];
+  struct ubicom32command_packet *packet;
+  int pending_transferStartIndex = 0;
+  int pending_transferLength = 0;
+  unsigned char *cptr;
+
+  packet = packets;
+  ubicom32command_packet_init(packet);
+
+  /* Set up a1 with destination address */
+  count = ubicom32command_packet_append(packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, (unsigned int)(destAddr));
+  //count = ubicom32command_packet_append(packet, 0, ISD_RD_IPORT_STAT, 0);
+  count = ubicom32command_packet_append(packet, IBUF_CHECK, ISD_WR_IBUF, move_from_mailbox_to_a1);
+
+  /* set up d0 with the length */
+  count = ubicom32command_packet_append(packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, (unsigned int)(length));
+  count = ubicom32command_packet_append(packet, IBUF_CHECK, ISD_WR_IBUF, move_from_mailbox_to_register);
+
+  // Ship the packet for processing
+  ret = ubicom32command_packet_send(packet);
+  if(ret)
+    return ret;
+
+  /* Get the cpu executing the fast code for write */
+  ubicom32v3isp_force_run_cpu(fast_read_code_address);
+
+  /* Go into double buffered mode */
+  pending_packet = NULL;
+  doubleBuffer = 1;
+
+  while(length)
+    {
+      unsigned int transferLength = 256;
+
+      if (chipID == 0x20000)
+	{
+	  /* Mars 1.2: Need to use the work around of shoving NOPS */
+	  ubicom32command_packet_init_opcode(packet, ISPISD_OPCODE_UBICOM32COMMAND_READ_MAILBOX_UBICOM32V3);
+	}
+      else
+	{
+	  ubicom32command_packet_init_opcode(packet, ISPISD_OPCODE_UBICOM32COMMAND_READ_MAILBOX);
+	}
+
+      if(transferLength > length)
+	transferLength = length;
+
+      // load length into operand field
+      packet->header.operand = transferLength;
+      packet->header.length = 16;
+
+      // Ship the packet for processing
+      ret = ubicom32command_packet_send(packet);
+      if(ret)
+	{
+	  doubleBuffer = 0;
+	  pending_packet = NULL;
+	  return ret;
+	}
+
+      if(pending_packet)
+	{
+	  // Move the reply data into destination buffer
+	  cptr = (unsigned char *)&pending_packet->commands[pending_transferStartIndex];
+
+	  if (pending_transferLength)
+	    {
+	      (void) memcpy(data,cptr, pending_transferLength*4);
+	      data += pending_transferLength;
+	    }
+	}
+
+      // Setup the pending packet
+      pending_packet = packet;
+      pending_packet_length = (ntohl (pending_packet->header.length) + 4*transferLength);
+      pending_packet_opcode = ntohl (pending_packet->header.opcode);
+      pending_transferLength = transferLength;
+
+      if(packet == packets)
+	packet = &packets[1];
+      else
+	packet = packets;
+
+      // readjust length etc.
+      length = length - transferLength;
+    }
+
+  if(pending_packet)
+    {
+      retrieve_pending_packet();
+
+      // Move the reply data into destination buffer
+      cptr = (unsigned char *)&pending_packet->commands[pending_transferStartIndex];
+
+      (void) memcpy(data,cptr, pending_transferLength*4);
+      data += pending_transferLength;
+    }
+
+  pending_packet = NULL;
+  doubleBuffer = 0;
+
+  /* Force the thread to debug space */
+  ret = ubicom32v3isp_force_run_cpu(0x01000000);
+
+  return 0;
+}
+
+int
+ubicom32v3UltrafastWriteMemory(unsigned int destAddr, unsigned int length, int *data)
+{
+  int ret, count;
+  unsigned int i;
+  struct ubicom32command_packet packets[2], *packet;
+
+  packet = packets;
+  pending_packet = NULL;
+
+  ubicom32command_packet_init(packet);
+
+  /* Set up a1 with destination address */
+  count = ubicom32command_packet_append(packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, (unsigned int)(destAddr));
+  //count = ubicom32command_packet_append(&packet, 0, ISD_RD_IPORT_STAT, 0);
+  count = ubicom32command_packet_append(packet, IBUF_CHECK, ISD_WR_IBUF, move_from_mailbox_to_a1);
+
+  /* set up d0 with the length */
+  count = ubicom32command_packet_append(packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, (unsigned int)(length));
+  count = ubicom32command_packet_append(packet, IBUF_CHECK, ISD_WR_IBUF, move_from_mailbox_to_register);
+
+  // Ship the packet for processing
+  ret = ubicom32command_packet_send(packet);
+  if(ret)
+    return ret;
+
+  /* Get the cpu executing the fast code for write */
+  ubicom32v3isp_force_run_cpu(fast_write_code_address);
+
+  /* Go into double buffered mode */
+  pending_packet = NULL;
+  doubleBuffer = 1;
+
+  /*
+   * Each memory write command is Write mailbox with content of the memory location
+   */
+  while(length)
+    {
+      unsigned int transferLength = 256;
+      int *dest;
+
+      // initialize packet for writing mailbox
+      ubicom32command_packet_init_opcode(packet, ISPISD_OPCODE_UBICOM32COMMAND_WRITE_MAILBOX);
+
+      if(transferLength > length)
+	transferLength = length;
+
+      // load length into operand field
+      packet->header.operand = transferLength;
+      packet->header.length = 16 + transferLength * 4;
+
+      // adjust length
+      length -= transferLength;
+
+      /* copy the data into the command data space */
+      dest = (unsigned int *)&packet->commands[0];
+      for(i=0; i< transferLength; i++, dest++, data++)
+	{
+	  unsigned char *s, *d;
+	  d = (unsigned char *)dest;
+	  s = (unsigned char *)data;
+
+	  d[3] = s[0];
+	  d[2] = s[1];
+	  d[1] = s[2];
+	  d[0] = s[3];
+	}
+      //memcpy(dest, (void *) data, transferLength * 4);
+
+      // Ship the packet for processing
+      ret = ubicom32command_packet_send(packet);
+      if(ret)
+	{
+	  doubleBuffer = 0;
+	  pending_packet = NULL;
+	  return ret;
+	}
+
+      // Setup the pending packet
+      pending_packet = packet;
+      pending_packet_length = 16;
+      pending_packet_opcode = ntohl (pending_packet->header.opcode);
+
+      if(packet == packets)
+	packet = &packets[1];
+      else
+	packet = packets;
+    }
+
+  if(pending_packet)
+    {
+      retrieve_pending_packet();
+    }
+
+  pending_packet = NULL;
+  doubleBuffer = 0;
+
+  /* Force the thread to debug space */
+  ubicom32v3isp_force_run_cpu(0x01000000);
+  return 0;
+}
+
+/*
+ *ubicom32v3chacheflushinvalidate
+ * This routine will flush the Dcache by address and invalidate the Icache for the same address.
+ * Length is specified in number of bytes.
+ */
+int
+ubicom32v3cacheflushinvalidate(unsigned int startAddr, unsigned int length)
+{
+  int ret, count;
+  unsigned int i;
+  struct ubicom32command_packet packet;
+  unsigned int endAddr = startAddr+length;
+  unsigned int numcachelines = (endAddr & 0x1f) ? 1: 0;
+
+  /* backoff start address and end addresses to the cacheline boundary. */
+  startAddr &= ~0x1f;
+  endAddr &= ~0x1f;
+
+  /* compute the number of cache entries that need to be dealt with */
+  numcachelines += (endAddr - startAddr)/32;
+
+  ubicom32command_packet_init(&packet);
+
+  /* save a2 to scratchpad0 */
+  count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, move_a2_to_scratchpad0);
+
+  /* load a1 with dcache base address */
+  count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, move_dcache_base_to_a1);
+
+  /* load a2 with icache base address */
+  count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, move_icache_base_to_a2);
+
+  /* load 0x90 (Flush dcache by address operation) to dcache control register via mailbox */
+  count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, 0x90);
+  count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, load_dcache_control_reg);
+
+  /* load 0x60 (Invalidate icache by address operation) to icache control register via mailbox */
+  count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, 0x60);
+  count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, load_icache_control_reg);
+
+  /*
+   * Flushing dcache takes 3 operations a) Load address into mailbox b) move.4 (a1), (a0) c) bset 16(a1), 16(a1), #0x3
+   * Invalidating icache takes 2 operations a) move.4 (a2), (a0) c) bset 16(a2), 16(a2), #0x3
+   * That is a total of 5 command slots
+   */
+  while(numcachelines)
+    {
+      unsigned int transferLength = ubicom32command_packet_get_free(&packet)/6;
+
+      if(transferLength > numcachelines)
+	transferLength = numcachelines;
+
+      for(i=0; i< transferLength; i++)
+	{
+	  /* write cacheline start address to mailbox */
+	  count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, startAddr);
+
+	  /* load address from mailbox to dcache addr register and activate the flush.*/
+	  count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, load_dcache_addr_and_activate[0]);
+	  count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, load_dcache_addr_and_activate[1]);
+
+	  /* write cacheline start address to mailbox */
+	  count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, startAddr);
+
+	  /* load address from mailbox to icache addr register and activate the invalidation */
+	  count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, load_icache_addr_and_activate[0]);
+	  count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, load_icache_addr_and_activate[1]);
+
+	  startAddr += 32;
+	}
+
+      numcachelines -= transferLength;
+
+      // Ship the packet for processing
+      ret = ubicom32command_packet_send(&packet);
+      if(ret)
+	return ret;
+
+      ubicom32command_packet_init(&packet);
+    }
+
+  /* restore a2 from scratchpad0 */
+  count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, move_scratchpad0_to_a2);
+  return(ubicom32command_packet_send(&packet));
+}
+
+/*
+ *ubicom32v3chacheinvalidate
+ * This routine will invalidate the Dcache by address.
+ * Length is specified in number of bytes.
+ */
+int
+ubicom32v3cacheinvalidate(unsigned int startAddr, unsigned int length)
+{
+  int ret, count;
+  unsigned int i;
+  struct ubicom32command_packet packet;
+  unsigned int endAddr = startAddr+length;
+  unsigned int numcachelines = (endAddr & 0x1f) ? 1: 0;
+
+  /* backoff start address and end addresses to the cacheline boundary. */
+  startAddr &= ~0x1f;
+  endAddr &= ~0x1f;
+
+  /* compute the number of cache entries that need to be dealt with */
+  numcachelines += (endAddr - startAddr)/32;
+
+  ubicom32command_packet_init(&packet);
+
+  /* load a1 with dcache base address */
+  count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, move_dcache_base_to_a1);
+
+  /* load 0x60 (Invalidate dcache by address operation) to dcache control register via mailbox */
+  count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, 0xA0);
+  count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, load_dcache_control_reg);
+
+  ret = 0;
+  /*
+   * Invalidating dcache takes 3 operations a) Load address into mailbox b) move.4 (a1), (a0) c) bset 16(a1), 16(a1), #0x3
+   * That is a total of 3 command slots
+   */
+  while(numcachelines)
+    {
+      unsigned int transferLength = ubicom32command_packet_get_free(&packet)/3;
+
+      if(transferLength > numcachelines)
+	transferLength = numcachelines;
+
+      for(i=0; i< transferLength; i++)
+	{
+	  /* write cacheline start address to mailbox */
+	  count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, startAddr);
+
+	  /* load address from mailbox to dcache addr register and activate the flush.*/
+	  count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, load_dcache_addr_and_activate[0]);
+	  count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, load_dcache_addr_and_activate[1]);
+
+	  startAddr += 32;
+	}
+
+      numcachelines -= transferLength;
+
+      // Ship the packet for processing
+      ret = ubicom32command_packet_send(&packet);
+      if(ret)
+	return ret;
+
+      ubicom32command_packet_init(&packet);
+    }
+
+  return(ret);
+}
+
+/*
+ *ubicom32v3readchachetags
+ * This routine will read cache TAG entries
+ * numcachelines is the number of Tags to read.
+ * startAddr is the address of the first TAG to read (lower 5 bits will be forced to zero).
+ * cache  0=dcache 1=icache
+ * buffer is the destination data buffer.
+ */
+int
+ubicom32v3readcachetags(unsigned int startAddr, unsigned int numcachelines, unsigned int cache, unsigned char *buffer)
+{
+  int ret, count;
+  unsigned int i;
+  struct ubicom32command_packet packet;
+
+  /* backoff start address to the cacheline boundary. */
+  startAddr &= ~0x1f;
+
+  ubicom32command_packet_init(&packet);
+
+  /* load a1 with cache base address */
+  if (cache)
+    {
+      /* Load with icache base address */
+      count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, move_icache_base_to_a1);
+    }
+  else
+    {
+      /* load with dcache base address */
+      count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, move_dcache_base_to_a1);
+    }
+
+  /* load 0x20 (Direct Read TAG) to dcache control register via mailbox */
+  count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, 0x20);
+  count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, load_cache_control_reg);
+
+  ret = 0;
+  /*
+   * Reading a cache TAG takes 5 operations a) Load address into mailbox b) move.4 (a1), (a0) c) bset 16(a1), 16(a1), #0x3
+   * d) move.4 4(a1), 4(a0) (move CRDD to mailbox), e) read mailbox.
+   * That is a total of 5 command slots
+   */
+  while(numcachelines)
+    {
+      unsigned int transferLength = ubicom32command_packet_get_free(&packet)/5;
+      unsigned read_tag_entry = 0;
+      struct ubicom32command *command;
+      unsigned int reply;
+
+      if(transferLength > numcachelines)
+	transferLength = numcachelines;
+
+
+      for(i=0; i< transferLength; i++)
+	{
+	  /* write cacheline start address to mailbox */
+	  count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, startAddr);
+
+	  /* load address from mailbox to dcache addr register and activate the flush.*/
+	  count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, load_cache_addr_and_activate[0]);
+	  count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, load_cache_addr_and_activate[1]);
+
+	  /* Load instruction to move data from Dcache Dreg to mailbox */
+	  count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, move_from_cache_dreg_to_mailbox);
+
+	  /* get the data from mailbox. */
+	  count = ubicom32command_packet_append(&packet, READ_CHECK, ISD_READ_MAIL_BOX, 0);
+
+	  if (read_tag_entry == 0)
+	    read_tag_entry = count;
+
+	  startAddr += 32;
+	}
+
+      numcachelines -= transferLength;
+
+      // Ship the packet for processing
+      ret = ubicom32command_packet_send(&packet);
+      if(ret)
+	return ret;
+
+      /* data is back. Pull out the tag entries. */
+      command = &packet.commands[read_tag_entry];
+      for(i=0; i< transferLength; i++)
+	{
+	  reply = (command->operand0<<24) | (command->operand1<<16) |
+	    (command->operand2<<8) | command->operand3;
+
+	  /* copy the reply to buffer */
+	  memcpy(buffer, &reply, 4);
+
+	  /* bump up the buffer. */
+	  buffer += 4;
+
+	  /* bump up to the next entry. */
+	  command += 5;
+	}
+
+      ubicom32command_packet_init(&packet);
+    }
+
+  return(ret);
+}
+
+/*
+ *ubicom32v3readchachedata
+ * This routine will read cache Data entries
+ * numdata is the number of cache bytes to read.
+ * startAddr is the address of the first byte to read (lower 2 bits will be forced to zero).
+ * cache = 0 for dcache = 1 for icache
+ * buffer is the destination data buffer.
+ */
+int
+ubicom32v3readcachedata(unsigned int startAddr, unsigned int numdata, unsigned int cache, unsigned char *buffer)
+{
+  int ret, count;
+  unsigned int i;
+  struct ubicom32command_packet packet;
+  unsigned int numtransfers = numdata/4;
+
+  /* backoff start address to word boundary. */
+  startAddr &= ~0x3;
+
+  ubicom32command_packet_init(&packet);
+
+  /* load a1 with cache base address */
+  if (cache)
+    {
+      /* Load with icache base address */
+      count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, move_icache_base_to_a1);
+    }
+  else
+    {
+      /* load with dcache base address */
+      count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, move_dcache_base_to_a1);
+    }
+
+  /* load 0x10 (Direct Read Data) to cache control register via mailbox */
+  count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, 0x10);
+  count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, load_cache_control_reg);
+
+  ret = 0;
+  /*
+   * Reading a cache Data takes 5 operations a) Load address into mailbox b) move.4 (a1), (a0) c) bset 16(a1), 16(a1), #0x3
+   * d) move.4 4(a1), 4(a0) (move CRDD to mailbox), e) read mailbox.
+   * That is a total of 5 command slots
+   */
+  while(numtransfers)
+    {
+      unsigned int transferLength = ubicom32command_packet_get_free(&packet)/5;
+      unsigned read_tag_entry = 0;
+      struct ubicom32command *command;
+      unsigned int reply;
+
+      if(transferLength > numtransfers)
+	transferLength = numtransfers;
+
+
+      for(i=0; i< transferLength; i++)
+	{
+	  /* write cacheline start address to mailbox */
+	  count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, startAddr);
+
+	  /* load address from mailbox to dcache addr register and activate the flush.*/
+	  count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, load_cache_addr_and_activate[0]);
+	  count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, load_cache_addr_and_activate[1]);
+
+	  /* Load instruction to move data from Dcache Dreg to mailbox */
+	  count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, move_from_cache_dreg_to_mailbox);
+
+	  /* get the data from mailbox. */
+	  count = ubicom32command_packet_append(&packet, READ_CHECK, ISD_READ_MAIL_BOX, 0);
+
+	  if (read_tag_entry == 0)
+	    read_tag_entry = count;
+
+	  startAddr += 4;
+	}
+
+      numtransfers -= transferLength;
+
+      // Ship the packet for processing
+      ret = ubicom32command_packet_send(&packet);
+      if(ret)
+	return ret;
+
+      /* data is back. Pull out the tag entries. */
+      command = &packet.commands[read_tag_entry];
+      for(i=0; i< transferLength; i++)
+	{
+	  reply = (command->operand0<<24) | (command->operand1<<16) |
+	    (command->operand2<<8) | command->operand3;
+
+	  /* copy the reply to buffer */
+	  memcpy(buffer, &reply, 4);
+
+	  /* bump up the buffer. */
+	  buffer += 4;
+
+	  /* bump up to the next entry. */
+	  command += 5;
+	}
+
+      ubicom32command_packet_init(&packet);
+    }
+
+  return(ret);
+}
+
+static int single_step_thread=-1;
+
+int
+unclog_mailbox(void)
+{
+  send_console_data = 0;
+  if (ubipodControlconsole)
+    {
+      /*
+       * Read the mailbox status and see if we have to clean the mailbox interface.
+       */
+      int data;
+      struct ubicom32command *command;
+      int count, ret;
+      unsigned int reply;
+      struct ubicom32command_packet packet;
+      ret = readStatus(&data);
+      if(ret)
+	return ret;
+
+      while ((data & M_BOX_OUT_Q_EMPTY) == 0) {
+	/*
+	 * There is console data in outbound queue from target to host. Get the
+	 * dongle to pull it out and send it to the console.
+	 */
+	ubicom32command_packet_init_opcode(&packet, ISPISD_OPCODE_UBICOM32COMMAND_DONGLE_UNCLOG_MAILBOX);
+	ret = ubicom32command_packet_send(&packet);
+	if (ret)
+	  return ret;
+
+	/*
+	 * Wait till the Outbound Queue from target to host drains.
+	 */
+	ret = readStatus(&data);
+	if(ret)
+	  return ret;
+      }
+
+      while ((data & M_BOX_IN_Q_EMPTY) == 0) {
+	/*
+	 * There is console data in inbound queue from host to target. Get the
+	 * dongle to pull it out of the mailbox and ship it back to the host via mailbox..
+	 */
+	ubicom32command_packet_init(&packet);
+
+	/* Save Inbound Mailbox content to outbound mailbox. */
+	count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, move_from_mailbox_to_mailbox);
+
+	/* pull the data out of mailbox. */
+	count = ubicom32command_packet_append(&packet, READ_CHECK, ISD_READ_MAIL_BOX, 0);
+
+	/* Ship the packet down for execution */
+	ret = ubicom32command_packet_send(&packet);
+	if(ret)
+	  return ret;
+
+	command = &packet.commands[1];
+
+	reply = (command->operand0<<24) | (command->operand1<<16) |
+	  (command->operand2<<8) | command->operand3;
+
+	console_data[send_console_data++] = reply;
+
+	/*
+	 * Recover Mail Status.
+	 */
+	ret = readStatus(&data);
+	if(ret)
+	  return ret;
+      }
+    }
+
+  return 0;
+}
+
+int
+ubicom32v3singleStep(unsigned int threadNo)
+{
+  int ret, count;
+  struct ubicom32command_packet packet;
+  struct ubicom32command *command;
+  unsigned int second_thread = (threadNo == 0) ? 1: 0;
+  unsigned int previous_pc = current_thread_saved_state.pc;
+  unsigned int current_pc = previous_pc;
+  unsigned int num_attempts = 0;
+  unsigned int mt_dbg_active;
+
+  single_step_thread = threadNo;
+
+  memset(current_cpu->registers, 0, current_cpu->reg_area_size);
+
+  /* All the single step manipulations take place via some other thread.
+   * Restore the current thread and setup a second thread do the manipulations.
+   */
+  ret = ubicom32v3restoreDebuggerThread(1);
+  if(ret)
+    return ret;
+
+  while (current_pc == previous_pc)
+    {
+      ret = ubicom32v3setupDebuggerThread(second_thread);
+      if(ret)
+	return ret;
+
+      ubicom32command_packet_init(&packet);
+
+      /* deactivate all threads by executing movei mt_dbg_active_clr, #-1 */
+      count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, single_step_deactivate_threads);
+
+      /* Activate the thread we want to single step by executing movei mt_dbg_active_set, #(1<<thredNo) */
+      count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, (single_step_activate_thread|(1<<threadNo)));
+
+      /* Set the bit for the single stepping thread in mt_single_step */
+      count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, (setup_mt_single_step|(1<<threadNo)));
+
+      /* Ship the packet down for execution */
+      ret = ubicom32command_packet_send(&packet);
+      if(ret)
+	return ret;
+
+      /* restore the second_thread registers */
+      ret = ubicom32v3restoreDebuggerThread(1);
+
+      ubicom32command_packet_init(&packet);
+
+      // start all the threads
+      count = ubicom32command_packet_append(&packet, 0, ISD_REL_MP, 0);
+
+      /* Ship the packet down for execution */
+      ret = ubicom32command_packet_send(&packet);
+      if(ret)
+	return ret;
+
+      if(++num_attempts > 5)
+	break;
+
+      /* keep looping till mt_dbg_active goes to zero */
+      while (1)
+	{
+	  ubicom32command_packet_init(&packet);
+
+	  /* read mt_dbg_active */
+	  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, 0x144);
+	  command = &packet.commands[count];
+	  count = ubicom32command_packet_append(&packet, 0, ISD_NOP, 0);
+
+	  /* read back single step thread's pc */
+	  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, (0xd0 | single_step_thread <<10));
+	  count = ubicom32command_packet_append(&packet, 0, ISD_NOP, 0);
+
+	  ret = ubicom32command_packet_send(&packet);
+	  if(ret)
+	    return ret;
+
+	  mt_dbg_active = (command->operand0<<24) | (command->operand1<<16) | (command->operand2<<8) | command->operand3;
+	  command++;
+	  command++;
+	  current_pc = (command->operand0<<24) | (command->operand1<<16) | (command->operand2<<8) | command->operand3;
+
+	  if (mt_dbg_active == 0)
+	    {
+	      /* some debugger event has happened. Send down a HALT_MP to stop everybody */
+	      ret = ubicom32v3haltMPandRreadDirectRegisters (&direct_read_regs);
+	      if(ret)
+		return ret;
+	      break;
+	    }
+	}
+    }
+  return ret;
+}
+
+// Status holds the state of all threads and the processor
+int status;
+
+/*
+ * ubicom32v3StopProcessos. This will issue HALT_MP to stop all thread. I will set the current thread to tbe thread 0.
+ * We will then recover the current threads PC etc
+ */
+int
+ubicom32v3stopProcessor(void)
+{
+  int ret;
+  if(already_in_ubicom32v3StopProcessor)
+    {
+      ret = debugReset();
+
+      /* sleep for .2 s before you attempt a connection */
+      usleep(200000);
+      ret = debugOpen();
+    }
+
+  already_in_ubicom32v3StopProcessor = 1;
+
+  memset(current_cpu->registers, 0, current_cpu->reg_area_size);
+
+  ret = ubicom32v3haltMPandRreadDirectRegisters (&direct_read_regs);
+  if(ret)
+    return ret;
+
+  ubicom32v3currentThread = 0;
+
+  /* setup the debugger thread */
+  ret = ubicom32v3setupDebuggerThread(ubicom32v3currentThread);
+  already_in_ubicom32v3StopProcessor = 0;
+
+  ret = unclog_mailbox();
+  if(ret)
+    return ret;
+
+  return 0;
+}
+
+/*
+ * ubicom32v3restartProcessor. This will first restore the state of ubicom32v3currentThread. It will then issue REL_MP to restart all the threads.
+ */
+int
+ubicom32v3restartProcessor(unsigned int stratch3value)
+{
+  int ret, count;
+  struct ubicom32command_packet packet;
+
+  ubicom32command_packet_init(&packet);
+  /* force mt_single_step to zero movei mt_single_step, #0 */
+  count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, setup_mt_single_step);
+
+  /* execute movei mt_dbg_active_set, #-1 to activate all threads */
+  count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, activate_all_threads);
+  ret = ubicom32command_packet_send(&packet);
+  if(ret)
+    return ret;
+
+  memset(current_cpu->registers, 0, current_cpu->reg_area_size);
+
+  /* restore the currentThread registers */
+  ret = ubicom32v3restoreDebuggerThread(stratch3value);
+
+  /* Restart the 2 wire interface. */
+  ret = turnOn2wire();
+
+  ubicom32command_packet_init(&packet);
+
+  // start all the threads
+  count = ubicom32command_packet_append(&packet, 0, ISD_REL_MP, 0);
+
+  if (ubipodControlconsole && send_console_data) {
+    // append the console data to the mailbox.
+    int i;
+    for (i=0; i < send_console_data; i++) {
+      count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, console_data[i]);
+    }
+  }
+
+  /* Ship the packet down for execution */
+  ret = ubicom32command_packet_send(&packet);
+
+  //
+  return ret;
+}
+
+
+int
+ubicom32v3createTpacketMP(unsigned int threadNo)
+{
+  // Retrieve d0, a5-a7, rosr, pc, mt_active, dbg_active, mt_enable
+  // We will need these to construct a T packet
+  int ret = current_cpu->fetch_tpacket_regs_fn(current_cpu, threadNo);
+
+  if(ret)
+    {
+      printf("error: Could not retrieve registers for thread %d\n", threadNo);
+      return ret;
+    }
+
+  return ret;
+}
+
+int
+ubicom32v3waitForBP(bpReason_t *reason)
+{
+  int ret, count;
+  struct ubicom32command_packet packet;
+  struct ubicom32command *command;
+  unsigned int mt_dbg_active, mt_break, mt_trap, dbg_halt_mp;
+  static int thread_number = 0;
+  int thread_mask = 1 << thread_number;
+  int may_be_posix_gdb_event;
+
+  may_be_posix_gdb_event = 0;
+
+  /* read mt_dbg_active, mt_break and mt_trap and then analyze */
+  ubicom32command_packet_init(&packet);
+
+  /* read mt_dbg_active */
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, 0x144);
+  command = &packet.commands[count];
+  count = ubicom32command_packet_append(&packet, 0, ISD_NOP, 0);
+
+  /* read mt_break */
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, 0x158);
+  count = ubicom32command_packet_append(&packet, 0, ISD_NOP, 0);
+
+  /* read mt_trap */
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, 0x1bc);
+  count = ubicom32command_packet_append(&packet, 0, ISD_NOP, 0);
+
+  /* read dbg_halt_mp */
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_RST_HALT_MP, 0);
+  count = ubicom32command_packet_append(&packet, 0, ISD_NOP, 0);
+
+  ret = ubicom32command_packet_send(&packet);
+  if(ret)
+    {
+      /* some thing crapped out. Issue a reset and return control back to gdb */
+      extern int ubicom32v3isp_reset(void);
+      ret = ubicom32v3isp_reset();
+      return 1;
+    }
+
+  /* Go recover the registers */
+  mt_dbg_active = (command->operand0<<24) | (command->operand1<<16) |
+    (command->operand2<<8) | command->operand3;
+
+  command++;
+  command++;
+
+  mt_break = (command->operand0<<24) | (command->operand1<<16) |
+    (command->operand2<<8) | command->operand3;
+
+  command++;
+  command++;
+  mt_trap = (command->operand0<<24) | (command->operand1<<16) |
+    (command->operand2<<8) | command->operand3;
+
+  command++;
+  command++;
+  dbg_halt_mp = (command->operand0<<24) | (command->operand1<<16) |
+    (command->operand2<<8) | command->operand3;
+
+  if(mt_dbg_active && mt_break == 0 && mt_trap == 0 && ((dbg_halt_mp & 0x2) == 0))
+    {
+      /* Things are running properly. No debugger event to report. */
+      return 0;
+    }
+
+  if (mt_trap)
+    {
+      may_be_posix_gdb_event = 0;
+      while (may_be_posix_gdb_event < 100)
+	{
+	  ubicom32command_packet_init(&packet);
+
+	  /* read mt_trap */
+	  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, 0x1bc);
+	  command = &packet.commands[count];
+	  count = ubicom32command_packet_append(&packet, 0, ISD_NOP, 0);
+
+	  ret = ubicom32command_packet_send(&packet);
+	  if(ret)
+	    {
+	      /* some thing crapped out. Issue a reset and return control back to gdb */
+	      extern int ubicom32v3isp_reset(void);
+	      ret = ubicom32v3isp_reset();
+	      return 1;
+	    }
+
+	  mt_trap = (command->operand0<<24) | (command->operand1<<16) |
+	    (command->operand2<<8) | command->operand3;
+	  may_be_posix_gdb_event++;
+
+	  if (mt_trap == 0)
+	    {
+	      return 0;
+	    }
+	  else
+	    {
+	      if (ubipodControlconsole)
+		{
+		  ret = turnOnconsole();
+		}
+
+	      /* Sleep 10 ms and try again. */
+	      usleep(10000);
+
+	      if (ubipodControlconsole)
+		{
+		  ret = turnOffconsole();
+		}
+	    }
+	}
+    }
+
+  /* some debugger event has happened. Send down a HALT_MP to stop everybody */
+  ret = ubicom32v3haltMPandRreadDirectRegisters (&direct_read_regs);
+  if(ret)
+    return ret;
+
+  /* analyze the cause */
+  if(single_step_thread != -1 && mt_dbg_active == 0 && mt_break == 0 && mt_trap == 0)
+    {
+      /* Single step thread has finished execution. */
+      ret = ubicom32v3setupDebuggerThread(single_step_thread);
+      if(ret)
+	{
+	  single_step_thread = -1;
+	  return -1;
+	}
+
+      ubicom32command_packet_init(&packet);
+      /* force mt_single_step to zero movei mt_single_step, #0 */
+      count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, setup_mt_single_step);
+      /* Ship the packet down for execution */
+      ret = ubicom32command_packet_send(&packet);
+      if(ret)
+	return ret;
+
+      reason->reason = BREAKPOINT_HIT;
+      single_step_thread = -1;
+#ifdef DEBUG
+      printf ("SS mt_dbg_active = 0x%x mt_break = 0x%x mt_trap = 0x%x dbg_halt_mp = 0x%x\n",
+			 mt_dbg_active, mt_break, mt_trap, dbg_halt_mp);
+#endif
+      return ubicom32v3_current_thread;
+    }
+
+  single_step_thread = -1;
+
+  if(mt_dbg_active == 0 && mt_break == 0 && mt_trap == 0)
+    {
+      reason->reason = BREAKPOINT_HIT;
+      thread_number = 0;
+      /* special purpose break point */
+      ret = ubicom32v3setupDebuggerThread(thread_number);
+      if(ret)
+	return -1;
+
+      thread_number ++;
+      if(thread_number == current_cpu->num_threads)
+	thread_number = 0;
+
+#ifdef DEBUG
+      printf ("NR mt_dbg_active = 0x%x mt_break = 0x%x mt_trap = 0x%x dbg_halt_mp = 0x%x\n",
+			 mt_dbg_active, mt_break, mt_trap, dbg_halt_mp);
+#endif
+      return ubicom32v3_current_thread;
+    }
+
+  if(dbg_halt_mp & 0x2)
+    {
+      reason->reason = HALT;
+      thread_number = 0;
+      /* Internal reset has happened */
+      ret = ubicom32v3setupDebuggerThread(thread_number);
+
+      /* We have to retrieve the reset reason  register in the timer block at address 0x01000084. */
+      ret = ubicom32v3readMemory(0x01000084, 1, &reason->status);
+      if(ret)
+	return -1;
+
+      thread_number ++;
+      if(thread_number == current_cpu->num_threads)
+	thread_number = 0;
+
+#ifdef DEBUG
+      printf ("HLT mt_dbg_active = 0x%x mt_break = 0x%x mt_trap = 0x%x dbg_halt_mp = 0x%x\n",
+			 mt_dbg_active, mt_break, mt_trap, dbg_halt_mp);
+#endif
+      return ubicom32v3_current_thread;
+    }
+
+#if 0
+  if (mt_trap)
+    {
+      may_be_posix_gdb_event = 0;
+      while (may_be_posix_gdb_event < 100)
+	{
+	  ubicom32command_packet_init(&packet);
+	  printf("Re Read mt trap\n");
+
+	  /* read mt_trap */
+	  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, 0x1bc);
+	  command = &packet.commands[count];
+	  count = ubicom32command_packet_append(&packet, 0, ISD_NOP, 0);
+
+	  ret = ubicom32command_packet_send(&packet);
+	  if(ret)
+	    {
+	      /* some thing crapped out. Issue a reset and return control back to gdb */
+	      extern int ubicom32v3isp_reset(void);
+	      ret = ubicom32v3isp_reset();
+	      return 1;
+	    }
+
+	  mt_trap = (command->operand0<<24) | (command->operand1<<16) |
+	    (command->operand2<<8) | command->operand3;
+	  may_be_posix_gdb_event++;
+
+	  if (mt_trap == 0)
+	    {
+	      break;
+	    }
+	  else
+	    {
+	      /* Sleep 10 ms and try again. */
+	      usleep(10000);
+	    }
+	}
+    }
+#endif
+
+#ifdef DEBUG
+  printf("Mt trap = 0x%x\n", mt_trap);
+#endif
+
+  if(mt_trap)
+    {
+      int i;
+      reason->reason = TRAP;
+      for(i=0; i< current_cpu->num_threads; i++)
+	{
+	  if(mt_trap & thread_mask)
+	    {
+	      ret = ubicom32v3setupDebuggerThread(thread_number);
+	      if(ret)
+		return -1;
+
+	      /* We got a hit. Bump up the mask anyway */
+	      /* We have to retrieve the trap_cause register for this thread */
+	      ret = ubicom32v3readRegisters(ubicom32v3currentThread, 35, &reason->status, 1);
+
+	      /* need to clear out the trap bit for this thread */
+	      //ret = write_ibuf((clear_trap_register|thread_mask));
+	      ubicom32command_packet_init(&packet);
+	      count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, (clear_trap_register|thread_mask));
+	      ubicom32command_packet_send(&packet);
+
+	      /* bump up thread_number*/
+	      thread_number ++;
+	      if(thread_number == current_cpu->num_threads)
+		thread_number = 0;
+
+#ifdef DEBUG
+	      printf ("TRAP mt_dbg_active = 0x%x mt_break = 0x%x mt_trap = 0x%x dbg_halt_mp = 0x%x\n",
+			 mt_dbg_active, mt_break, mt_trap, dbg_halt_mp);
+#endif
+	      return ubicom32v3_current_thread;
+	    }
+
+	  /* Bump up the thread_number*/
+	  thread_number ++;
+	  if(thread_number == current_cpu->num_threads)
+	    thread_number = 0;
+	  thread_mask = 1 << thread_number;
+	}
+    }
+
+  if(mt_break)
+    {
+      int i;
+      reason->reason = BREAKPOINT_HIT;
+      for(i=0; i< current_cpu->num_threads; i++)
+	{
+	  if(mt_break & thread_mask)
+	    {
+	      ret = ubicom32v3setupDebuggerThread(thread_number);
+	      if(ret)
+		return -1;
+
+	      /* need to clear out the bit for this thread from mt_break register*/
+	      //ret = write_ibuf((clear_break_register|thread_mask));
+	      ubicom32command_packet_init(&packet);
+	      count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, (clear_break_register|thread_mask));
+	      ubicom32command_packet_send(&packet);
+
+	      /* We got a hit. Bump up thread_number */
+	      thread_number ++;
+	      if(thread_number == current_cpu->num_threads)
+		thread_number = 0;
+
+#ifdef DEBUG
+	      printf ("BREAK: mt_dbg_active = 0x%x mt_break = 0x%x mt_trap = 0x%x dbg_halt_mp = 0x%x\n",
+			 mt_dbg_active, mt_break, mt_trap, dbg_halt_mp);
+#endif
+	      return ubicom32v3_current_thread;
+	    }
+
+	  /* Bump up the thread_number*/
+	  thread_number ++;
+	  if(thread_number == current_cpu->num_threads)
+	    thread_number = 0;
+	  thread_mask = 1 << thread_number;
+	}
+    }
+  return 0;
+}
+
+int
+ubicom32v3waitForBPNoTrap(bpReason_t *reason)
+{
+  int ret, count;
+  struct ubicom32command_packet packet;
+  struct ubicom32command *command;
+  unsigned int mt_dbg_active, mt_break, mt_trap, dbg_halt_mp;
+  static int thread_number = 0;
+  int thread_mask = 1 << thread_number;
+  int may_be_posix_gdb_event;
+
+  may_be_posix_gdb_event = 0;
+
+  /* read mt_dbg_active, mt_break and mt_trap and then analyze */
+  ubicom32command_packet_init(&packet);
+
+  /* read mt_dbg_active */
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, 0x144);
+  command = &packet.commands[count];
+  count = ubicom32command_packet_append(&packet, 0, ISD_NOP, 0);
+
+  /* read mt_break */
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, 0x158);
+  count = ubicom32command_packet_append(&packet, 0, ISD_NOP, 0);
+
+  /* read mt_trap */
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, 0x1bc);
+  count = ubicom32command_packet_append(&packet, 0, ISD_NOP, 0);
+
+  /* read dbg_halt_mp */
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_RST_HALT_MP, 0);
+  count = ubicom32command_packet_append(&packet, 0, ISD_NOP, 0);
+
+  ret = ubicom32command_packet_send(&packet);
+  if(ret)
+    {
+      /* some thing crapped out. Issue a reset and return control back to gdb */
+      extern int ubicom32v3isp_reset(void);
+      ret = ubicom32v3isp_reset();
+      return 1;
+    }
+
+  /* Go recover the registers */
+  mt_dbg_active = (command->operand0<<24) | (command->operand1<<16) |
+    (command->operand2<<8) | command->operand3;
+
+  command++;
+  command++;
+
+  mt_break = (command->operand0<<24) | (command->operand1<<16) |
+    (command->operand2<<8) | command->operand3;
+
+  command++;
+  command++;
+  mt_trap = (command->operand0<<24) | (command->operand1<<16) |
+    (command->operand2<<8) | command->operand3;
+
+  command++;
+  command++;
+  dbg_halt_mp = (command->operand0<<24) | (command->operand1<<16) |
+    (command->operand2<<8) | command->operand3;
+
+  if(mt_dbg_active && mt_break == 0 && ((dbg_halt_mp & 0x2) == 0))
+    {
+      /* Things are running properly. No debugger event to report. */
+      return 0;
+    }
+
+  /* some debugger event has happened. Send down a HALT_MP to stop everybody */
+  ret = ubicom32v3haltMPandRreadDirectRegisters (&direct_read_regs);
+  if(ret)
+    return ret;
+
+  /* analyze the cause */
+  if(single_step_thread != -1 && mt_dbg_active == 0 && mt_break == 0)
+    {
+      /* Single step thread has finished execution. */
+      ret = ubicom32v3setupDebuggerThread(single_step_thread);
+      if(ret)
+	{
+	  single_step_thread = -1;
+	  return -1;
+	}
+
+      ubicom32command_packet_init(&packet);
+      /* force mt_single_step to zero movei mt_single_step, #0 */
+      count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, setup_mt_single_step);
+      /* Ship the packet down for execution */
+      ret = ubicom32command_packet_send(&packet);
+      if(ret)
+	return ret;
+
+      reason->reason = BREAKPOINT_HIT;
+      single_step_thread = -1;
+#ifdef DEBUG
+      printf ("SS mt_dbg_active = 0x%x mt_break = 0x%x mt_trap = 0x%x dbg_halt_mp = 0x%x\n",
+			 mt_dbg_active, mt_break, mt_trap, dbg_halt_mp);
+#endif
+      return ubicom32v3_current_thread;
+    }
+
+  single_step_thread = -1;
+
+  if(mt_dbg_active == 0 && mt_break == 0)
+    {
+      reason->reason = BREAKPOINT_HIT;
+      thread_number = 0;
+      /* special purpose break point */
+      ret = ubicom32v3setupDebuggerThread(thread_number);
+      if(ret)
+	return -1;
+
+      thread_number ++;
+      if(thread_number == current_cpu->num_threads)
+	thread_number = 0;
+
+#ifdef DEBUG
+      printf ("NR mt_dbg_active = 0x%x mt_break = 0x%x mt_trap = 0x%x dbg_halt_mp = 0x%x\n",
+			 mt_dbg_active, mt_break, mt_trap, dbg_halt_mp);
+#endif
+      return ubicom32v3_current_thread;
+    }
+
+  if(dbg_halt_mp & 0x2)
+    {
+      reason->reason = HALT;
+      thread_number = 0;
+      /* Internal reset has happened */
+      ret = ubicom32v3setupDebuggerThread(thread_number);
+
+      /* We have to retrieve the reset reason  register in the timer block at address 0x01000084. */
+      ret = ubicom32v3readMemory(0x01000084, 1, (int *)&reason->status);
+      if(ret)
+	return -1;
+
+      thread_number ++;
+      if(thread_number == current_cpu->num_threads)
+	thread_number = 0;
+
+#ifdef DEBUG
+      printf ("HLT mt_dbg_active = 0x%x mt_break = 0x%x mt_trap = 0x%x dbg_halt_mp = 0x%x\n",
+			 mt_dbg_active, mt_break, mt_trap, dbg_halt_mp);
+#endif
+      return ubicom32v3_current_thread;
+    }
+
+  if(mt_break)
+    {
+      int i;
+      reason->reason = BREAKPOINT_HIT;
+      for(i=0; i< current_cpu->num_threads; i++)
+	{
+	  if(mt_break & thread_mask)
+	    {
+	      ret = ubicom32v3setupDebuggerThread(thread_number);
+	      if(ret)
+		return -1;
+
+	      /* need to clear out the bit for this thread from mt_break register*/
+	      //ret = write_ibuf((clear_break_register|thread_mask));
+	      ubicom32command_packet_init(&packet);
+	      count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, (clear_break_register|thread_mask));
+	      ubicom32command_packet_send(&packet);
+
+	      /* We got a hit. Bump up thread_number */
+	      thread_number ++;
+	      if(thread_number == current_cpu->num_threads)
+		thread_number = 0;
+
+#ifdef DEBUG
+	      printf ("BREAK: mt_dbg_active = 0x%x mt_break = 0x%x mt_trap = 0x%x dbg_halt_mp = 0x%x\n",
+			 mt_dbg_active, mt_break, mt_trap, dbg_halt_mp);
+#endif
+	      return ubicom32v3_current_thread;
+	    }
+
+	  /* Bump up the thread_number*/
+	  thread_number ++;
+	  if(thread_number == current_cpu->num_threads)
+	    thread_number = 0;
+	  thread_mask = 1 << thread_number;
+	}
+    }
+  return 0;
+}
+
+/* Detach the debugger from the debug kernel. Restart the processor. Leave the ISP connection open */
+int
+ubicom32v3isp_detach(void)
+{
+  int ret, count;
+  struct ubicom32command_packet packet;
+
+  ubicom32command_packet_init(&packet);
+
+  // Write 0 to RST_HALT_MP_EN
+  count = ubicom32command_packet_append(&packet, 0, ISD_WR_RST_HALT_MP_EN, 0);
+
+  /* Ship the packet down for execution */
+  ret = ubicom32command_packet_send(&packet);
+
+  if(ret)
+    return ret;
+
+  return(ubicom32v3restartProcessor(0));
+}
+
+/* This routine only establishes connection to the dongle */
+int
+ubicom32v3isp_connect(char *remote)
+{
+  struct ubicom32command_packet packet;
+  int ret;
+
+  if(dongle_interface_status())
+    {
+      ubicom32v3isp_detach();
+      dongle_close();
+    }
+
+  if(dongle_open(remote) == -1) {
+	return -1;
+  }
+
+  pending_packet = NULL;
+  doubleBuffer = 0;
+
+  /* See if we can control the console interface. */
+  ubicom32command_packet_init_opcode(&packet, ISPISD_OPCODE_UBICOM32COMMAND_DONGLE_STOP_CONSOLE);
+  errorExpected = 1;
+  ret = ubicom32command_packet_send(&packet);
+  errorExpected = 0;
+
+  if(ret == 0)
+    {
+      ubipodControlconsole = 1;
+    }
+  else
+    {
+      ubipodControlconsole = 0;
+      dongle_close();
+
+      if(dongle_open(remote) == -1)
+	return -1;
+    }
+
+  /* Test and see if we are hooked up to a Ubipod dongle. */
+  ubicom32command_packet_init_opcode(&packet, ISPISD_OPCODE_UBICOM32COMMAND_DONGLE_CHECK_UBIPOD);
+  errorExpected = 1;
+  ret = ubicom32command_packet_send(&packet);
+  errorExpected = 0;
+
+  if(ret ==0)
+    {
+      dongleIsUbipod = 1;
+      dongleHasMarsSupport = 1;
+      okToDoubleBuffer = 1;
+
+      /* See if we can control the 2 wire interface. */
+      ubicom32command_packet_init_opcode(&packet, ISPISD_OPCODE_UBICOM32COMMAND_DONGLE_START_2WIRE);
+      errorExpected = 1;
+      ret = ubicom32command_packet_send(&packet);
+      errorExpected = 0;
+
+      if(ret == 0)
+	{
+	  ubipodControl2wire = 1;
+	}
+      else
+	{
+	  ubipodControl2wire = 0;
+	  dongle_close();
+
+	  if(dongle_open(remote) == -1)
+	    return -1;
+	}
+      return 0;
+    }
+  else
+    {
+      dongleIsUbipod = 0;
+      dongle_close();
+
+      if(dongle_open(remote) == -1)
+	return -1;
+    }
+
+  ubicom32command_packet_init_opcode(&packet, ISPISD_OPCODE_UBICOM32COMMAND_DONGLE_CHECK_MARS);
+  errorExpected = 1;
+  ret = ubicom32command_packet_send(&packet);
+  errorExpected = 0;
+
+  if(ret ==0)
+    {
+      dongleHasMarsSupport = 1;
+    }
+  else
+    {
+      dongleHasMarsSupport=0;
+      dongle_close();
+
+      /* inform that the dongle has no Mars support */
+      return -2;
+    }
+
+  okToDoubleBuffer = 1;
+  return 0;
+}
+
+int
+ubicom32v3isp_close(void)
+{
+
+  if (ubipodControlconsole)
+    {
+      /*
+       * call turnOnconsole after disconnect from dongle in ubicom32v3isp_close()
+       */
+      int ret = turnOnconsole();
+    }
+  return (dongle_close());
+}
+
+int
+ubicom32v3isp_force_open(void)
+{
+  struct ubicom32command_packet packet;
+  int ret, count;
+
+  ubicom32command_packet_init(&packet);
+
+  // Send down ISD_OPEN
+  count = ubicom32command_packet_append(&packet, OPTION_FORCE|OPTION_IGNORE_RESPONSE, ISD_OPEN, 0);
+
+  count = ubicom32command_packet_append(&packet, OPTION_FORCE, ISD_OPEN, 0);
+
+  count = ubicom32command_packet_append(&packet, OPTION_FORCE, ISD_OPEN, 0);
+  ret = ubicom32command_packet_send(&packet);
+
+  return 0;
+}
+
+/*
+ * This routine will contact the Ubicom32v3 hardware via the debug port.
+ * By the time this is called the serial connection is alive.
+ */
+int
+ubicom32v3isp_attach(void)
+{
+  int ret;
+  int num_attempts = 0;
+  extern unsigned int debugging_processor;
+
+  if(dongle_interface_status() == 0)
+    return -3;
+
+  // Open connection to hardware
+  while(num_attempts++ <10)
+    {
+      ret = debugOpen();
+      if(ret)
+	{
+	  ret = ubicom32v3isp_force_open();
+	  ret = debugClose();
+	  continue;
+	}
+      else
+	break;
+    }
+
+  if(ret)
+    return -1;
+
+  /* This would be a good point to see if we are indeed talking to a 5k 3k or nothing at all.*/
+  if (debugging_processor == 0)
+    {
+      return -3;
+    }
+  else if (debugging_processor != 5133)
+    {
+      /* Processor is a 3k. */
+      return -2;
+    }
+
+  iport_stat = 0;
+
+  ret = ubicom32v3stopProcessor();
+  return 0;
+}
+
+int
+ubicom32v3isp_reset(void)
+{
+  /* reset the board through the mailbox interface */
+  int ret;
+  extern unsigned int dontDebugMask;
+
+  if(dongle_interface_status() == 0)
+    {
+      printf("No connection to target. Request denied.\n");
+      return -1;
+    }
+
+  ret = debugReset();
+
+  /* sleep for .2 s before you attempt a connection */
+  usleep(200000);
+
+  return(ubicom32v3isp_attach());
+}
+
+#if 0
+int
+ubicom32v3_hw_monitor(unsigned int addr, unsigned int needEvent,
+	   unsigned int triggerEvent, unsigned int eventPattern,
+	   unsigned int eventMask,
+	   unsigned int runCounter, unsigned int *resBuf, char *args)
+{
+  int ret, count;
+  unsigned int stat, numTimes;
+
+  struct ubicom32command_packet packet;
+  struct ubicom32command *command;
+  unsigned int reply;
+  int commandEchoIndex;
+
+  if(dongle_interface_status() == 0)
+    {
+      if(args == NULL)
+	return -3;
+      ubicom32isp_connect(args);
+
+      if(dongle_interface_status() == 0)
+	return -4;
+
+      ret = debugOpen();
+      if(ret)
+	return ret;
+    }
+
+  ubicom32command_packet_init(&packet);
+
+  // Initialize by writing 0 to MME register
+  count = ubicom32command_packet_append(&packet, 0, ISD_WR_MME, 0);
+
+  // Write the Memory Object Address (MOA) register
+  count = ubicom32command_packet_append(&packet, 0, ISD_WR_MOA, addr);
+
+  if(needEvent)
+    {
+      // Write Event Pattern register
+      count = ubicom32command_packet_append(&packet, 0, ISD_WR_MEP, eventPattern);
+
+      // Write the Memory Event Mask register
+      count = ubicom32command_packet_append(&packet, 0, ISD_WR_MEM, eventMask);
+
+      // Write the Memory Event Control register with Event Enable (bit 15) on
+      triggerEvent |= 0x8000;
+    }
+  else
+    triggerEvent = 0;
+
+  //Writeto Memory event Control Register
+  count = ubicom32command_packet_append(&packet, 0, ISD_WR_MEC, triggerEvent);
+
+  // Set the Monitor Run Counter register
+  count = ubicom32command_packet_append(&packet, 0, ISD_WR_MRC, runCounter);
+
+  // Start monitoring by writing a 1 to Monitor Mode Enable
+  count = ubicom32command_packet_append(&packet, 0, ISD_WR_MME, 1);
+
+  // Ship this packet down to get monitoring going
+  // Ship the packet for processing
+  ret = ubicom32command_packet_send(&packet);
+  if(ret)
+    return ret;
+
+  numTimes = 0;
+  while(1)
+    {
+      // Monitor the status
+      ubicom32command_packet_init(&packet);
+
+      // Send down ISD_RD_MST
+      count = ubicom32command_packet_append(&packet, 0, ISD_RD_MST, 0);
+
+      ret = ubicom32command_packet_send(&packet);
+      if(ret)
+	return ret;
+
+      command = &packet.commands[0];
+
+      // extract status
+      stat = (command->operand0<<24) | (command->operand1<<16) | (command->operand2<<8) | command->operand3;
+
+      if(stat &1)
+	break;
+
+      numTimes++;
+      if(numTimes > 2)
+	break;
+    }
+
+  if(numTimes > 2)
+    return -6;
+#ifdef DEBUG
+  printf("status returned = 0x%08x\n", stat);
+#endif
+
+  ubicom32command_packet_init(&packet);
+
+  if(runCounter > 32)
+    runCounter = 32;
+
+
+  for(numTimes=0; numTimes< runCounter; numTimes++)
+    {
+      // send down ISD_WR_MBRE command
+      count = ubicom32command_packet_append(&packet, 0, ISD_WR_MBRE, 0);
+    }
+
+  ret = ubicom32command_packet_send(&packet);
+  if(ret)
+    return ret;
+
+  command = &packet.commands[runCounter-1];
+
+  for(numTimes=0; numTimes< runCounter; numTimes++, command--)
+    {
+      stat = (command->operand0<<24) | (command->operand1<<16) | (command->operand2<<8) | command->operand3;
+
+      *resBuf++ = stat;
+    }
+
+  return 0;
+}
+#endif
+
+unsigned int  bist_reset_code[] = {
+	0xe022000e,
+	0x04216060,
+	0x04216000,
+	0xc8000000,
+	0x24213c21,
+	0xc9000001,
+	0x04206100,
+};
+
+int
+ubicom32v3isp_bist(void)
+{
+  /* run the bist sequence from the debugger */
+  int count, i;
+  struct ubicom32command_packet packet;
+  struct ubicom32command *command;
+  unsigned int reply1, reply2;
+
+  if (chipID >= 0x30000)
+    return 0;
+
+  ubicom32command_packet_init(&packet);
+
+#if defined DOING_RTL
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_IPORT_STAT, 0);
+  for(i=0; i< sizeof(bist_reset_code)/4; i++)
+    {
+      count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, bist_reset_code[i]);
+    }
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_IPORT_STAT, 0);
+  ubicom32command_packet_send(&packet);
+#else
+  //count = ubicom32command_packet_append(&packet, 0, ISD_RD_IPORT_STAT, 0);
+  for(i=0; i< sizeof(bist_sequence_1)/4; i++)
+    {
+      count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, bist_sequence_1[i]);
+    }
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_IPORT_STAT, 0);
+  ubicom32command_packet_send(&packet);
+
+  command = &packet.commands[count];
+  reply1 = (command->operand0<<24) | (command->operand1<<16) |
+    (command->operand2<<8) | command->operand3;
+
+  reply1 &= ~3;
+
+  while(1)
+    {
+      ubicom32command_packet_init(&packet);
+      for(i=0; i< sizeof(bist_sequence_2)/4; i++)
+	{
+	  count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, bist_sequence_2[i]);
+	}
+      count = ubicom32command_packet_append(&packet, 0, ISD_RD_IPORT_STAT, 0);
+
+      ubicom32command_packet_send(&packet);
+
+      command = &packet.commands[count];
+
+      reply2 = (command->operand0<<24) | (command->operand1<<16) |
+	(command->operand2<<8) | command->operand3;
+
+      reply2 &= ~3;
+      //printf("rep1 =0x%x rep2 =0x%x\n", reply1, reply2);
+      if(reply2 > reply1)
+	break;
+    }
+#endif
+  return 0;
+}
+
+unsigned int init_pll_sequence_1[] = {
+  0xe0040000,	//moveai a0,#%hi(0x02000000)
+  0xc9000b20,	//movei d0,#2848 250Mhz Flash access time 20ns
+  0xc9010615,	//movei d1,#2581 250Mhz Flash access time 20ns
+  0x17c00101,	//shmrg.2 d0,d1,d0
+  0x040c6100,	//move.4 48(a0),d0
+  0xe0020000,	//moveai a0,#%hi(0x01000000)
+  0xe0220002,	//moveai a1,#%hi(0x01000100)
+  0x2c002400,	//bclr (a0),(a0),#0x4
+  //  0x2c012401,	//bclr 4(a0),4(a0),#0x4
+  //0x2c022402,	//bclr 8(a0),8(a0),#0x4
+  //0x2c032403,	//bclr 12(a0),12(a0),#0x4
+  0x24003c00,	//bset (a0),(a0),#0x7
+  //0x24013c01,	//bset 4(a0),4(a0),#0x7
+  //0x24023c02,	//bset 8(a0),8(a0),#0x7
+  //0x24033c03,	//bset 12(a0),12(a0),#0x7
+  0xcc004283,	//movei (a0),#17027
+  //0xcc014880,	//movei 2(a0),#18560 125 Mhz
+  0xcc019880,	//movei 2(a0),#-26496 250 Hhz
+  //0xcc024202,	//movei 4(a0),#16898
+  //0xcc03f880,	//movei 6(a0),#-1920
+  //0xcc044000,	//movei 8(a0),#16384
+  //0xcc059980,	//movei 10(a0),#-26240
+  //0xcc060000,	//movei 12(a0),#0
+  //0xcc070080,	//movei 14(a0),#128
+  0x2c003c00,	//bclr (a0),(a0),#0x7
+  //0x2c013c01,	//bclr 4(a0),4(a0),#0x7
+  //0x2c023c02,	//bclr 8(a0),8(a0),#0x7
+};
+
+unsigned int init_pll_sequence_2[] = {
+  0x24002400,	//bset (a0),(a0),#0x4
+  //0x24012401,	//bset 4(a0),4(a0),#0x4
+  //0x24022402,	//bset 8(a0),8(a0),#0x4
+  //0x2c033c03,	//bclr 12(a0),12(a0),#0x7 ??
+};
+
+unsigned int pll_delay[] = {
+  0xc90003e8,	//movei d0,#1000
+  0x79000420,	//add.4 d0,(a1),d0
+  0x90000420,	//sub.4 #0,(a1),d0
+  0xd3ffffff,	//jmple.t 6002acf8
+};
+
+int
+ubicom32v3isp_pll_init(void)
+{
+  /* run the pll sequence from the debugger */
+  int count, i;
+  struct ubicom32command_packet packet;
+  struct ubicom32command *command;
+  unsigned int reply1, reply2;
+
+  ubicom32command_packet_init(&packet);
+  //count = ubicom32command_packet_append(&packet, 0, ISD_RD_IPORT_STAT, 0);
+  for(i=0; i< sizeof(init_pll_sequence_1)/4; i++)
+    {
+      count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, init_pll_sequence_1[i]);
+    }
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_IPORT_STAT, 0);
+  ubicom32command_packet_send(&packet);
+
+  command = &packet.commands[count];
+  reply1 = (command->operand0<<24) | (command->operand1<<16) |
+    (command->operand2<<8) | command->operand3;
+
+  reply1 &= ~3;
+
+  /* delay for the pll */
+  while(1)
+    {
+      ubicom32command_packet_init(&packet);
+      for(i=0; i< sizeof(pll_delay)/4; i++)
+	{
+	  count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, pll_delay[i]);
+	}
+      count = ubicom32command_packet_append(&packet, 0, ISD_RD_IPORT_STAT, 0);
+
+      ubicom32command_packet_send(&packet);
+
+      command = &packet.commands[count];
+
+      reply2 = (command->operand0<<24) | (command->operand1<<16) |
+	(command->operand2<<8) | command->operand3;
+
+      reply2 &= ~3;
+      printf("rep1 =0x%x rep2 =0x%x\n", reply1, reply2);
+      if(reply2 > reply1)
+	break;
+    }
+
+  /* send down pll_init_sequence_2 */
+  ubicom32command_packet_init(&packet);
+  for(i=0; i< sizeof(init_pll_sequence_2)/4; i++)
+    {
+      count = ubicom32command_packet_append(&packet, 0x20, ISD_WR_IBUF, init_pll_sequence_2[i]);
+    }
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_IPORT_STAT, 0);
+  ubicom32command_packet_send(&packet);
+
+  command = &packet.commands[count];
+  reply1 = (command->operand0<<24) | (command->operand1<<16) |
+    (command->operand2<<8) | command->operand3;
+
+  reply1 &= ~3;
+
+  /* delay for the pll */
+  while(1)
+    {
+      ubicom32command_packet_init(&packet);
+      for(i=0; i< sizeof(pll_delay)/4; i++)
+	{
+	  count = ubicom32command_packet_append(&packet, 0x20, ISD_WR_IBUF, pll_delay[i]);
+	}
+      count = ubicom32command_packet_append(&packet, 0, ISD_RD_IPORT_STAT, 0);
+
+      ubicom32command_packet_send(&packet);
+
+      command = &packet.commands[count];
+
+      reply2 = (command->operand0<<24) | (command->operand1<<16) |
+	(command->operand2<<8) | command->operand3;
+
+      reply2 &= ~3;
+      printf("rep1 =0x%x rep2 =0x%x\n", reply1, reply2);
+      if(reply2 > reply1)
+	break;
+    }
+  return 0;
+}
+
+unsigned int fast_transfer_code[] = {
+  /* read into processor */
+  0x10c0f402,	//btst 8(a0),#0x1e
+  0xd5ffffff,	//jmpne.t 3ffc0000 <__data_begin>
+  0x02216400,	//move.4 (a1)4++,(a0)
+  0x790000ff,	//add.4 d0,#-1,d0
+  0xd5fffffc,	//jmpne.t 3ffc0000 <__data_begin>
+  0xd6e00000,	//jmpt.t 3ffc0014 <__data_begin+0x14>
+
+  /* read out of processor */
+  0x10c0ec02,	//btst 8(a0),#0x1d
+  0xd5ffffff,	//jmpne.t 3ffc0018 <mem_read_out>
+  0x04016221,	//move.4 4(a0),(a1)4++
+  0x790000ff,	//add.4 d0,#-1,d0
+  0xd5fffffc,	//jmpne.t 3ffc0018 <mem_read_out>
+  0xd6e00000,	//jmpt.t 3ffc002c <mem_read_out+0x14>
+
+#if defined DOING_RTL
+  0xc8000000,	//nop to satisfy RTL
+  0xc8000000,	//nop to satisfy RTL
+  0xc8000000,	//nop to satisfy RTL
+  0xc8000000,	//nop to satisfy RTL
+  0xc8000000,	//nop to satisfy RTL
+  0xc8000000,	//nop to satisfy RTL
+  0xc8000000,	//nop to satisfy RTL
+  0xc8000000,	//nop to satisfy RTL
+  0xc8000000,	//nop to satisfy RTL
+  0xc8000000,	//nop to satisfy RTL
+#endif
+};
+
+int
+ubicom32v3isp_download_fast_transfer_code(unsigned int address)
+{
+  char junk[sizeof(fast_transfer_code)];
+
+  /* push the fast transfer code to the given address */
+  int ret = ubicom32v3writeMemory(address, sizeof(fast_transfer_code)/4, fast_transfer_code);
+
+  /* set up the location of the fast transfer code */
+  fast_write_code_address = address;
+  fast_read_code_address = address + 6*4;
+
+  ret = ubicom32v3readMemory(address, sizeof(fast_transfer_code)/4, (int *)junk);
+  return ret;
+}
+
+int
+ubicom32v3isp_wakeup_downloader(void)
+{
+  int ret, count;
+  struct ubicom32command *command;
+  unsigned int reply;
+  struct ubicom32command_packet packet;
+
+  ubicom32command_packet_init(&packet);
+
+  // stop all the threads
+  count = ubicom32command_packet_append(&packet, WRITE_CHECK, ISD_WRITE_MAIL_BOX, READ_STATUS);
+
+  /* Ship the packet down for execution */
+  ret = ubicom32command_packet_send(&packet);
+  if(ret)
+    return ret;
+
+  // We need to wait for the reply
+  ubicom32command_packet_init(&packet);
+
+  /* wait for READ_STATUS_DONE */
+  count = ubicom32command_packet_append(&packet, READ_CHECK, ISD_READ_MAIL_BOX, 0);
+
+  /* Read back the status word */
+  count = ubicom32command_packet_append(&packet, READ_CHECK, ISD_READ_MAIL_BOX, 0);
+
+
+  /* Ship the packet down for execution */
+  ret = ubicom32command_packet_send(&packet);
+  if(ret)
+    return ret;
+
+  command = &packet.commands[0];
+
+  reply = (command->operand0<<24) | (command->operand1<<16) |
+    (command->operand2<<8) | command->operand3;
+
+  if(reply != READ_STATUS_DONE)
+    {
+      printf("Reply 0x%x does not match READ_STATUS_DONE\n", reply);
+      return -1;
+    }
+
+  return 0;
+}
+
+unsigned int make_thread0_alive[] = {
+  0xc9530001,	//movei mt_en,#1
+  0xc94f0001,	//movei mt_active_set,#1
+};
+
+int
+ubicom32v3isp_make_thread0_alive(void)
+{
+  int ret, count;
+  struct ubicom32command_packet packet;
+
+  ubicom32command_packet_init(&packet);
+  count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, make_thread0_alive[0]);
+  count = ubicom32command_packet_append(&packet, IBUF_CHECK, ISD_WR_IBUF, make_thread0_alive[1]);
+
+  /* Ship the packet down for execution */
+  ret = ubicom32command_packet_send(&packet);
+  return ret;
+}
+
+int
+ubicom32v3hw_monitor_setup(unsigned int addr, unsigned int needEvent,
+	   unsigned int triggerEvent, unsigned int eventPattern,
+	   unsigned int eventMask,
+	   unsigned int runCounter)
+{
+  int ret, count;
+
+  struct ubicom32command_packet packet;
+
+  if(dongle_interface_status() == 0)
+    {
+	return -4;
+    }
+
+  ubicom32command_packet_init(&packet);
+
+  // Initialize by writing 0 to MME register
+  count = ubicom32command_packet_append(&packet, 0, ISD_WR_MME, 0);
+
+  // Write the Memory Object Address (MOA) register
+  count = ubicom32command_packet_append(&packet, 0, ISD_WR_MOA, addr);
+
+  if(needEvent)
+    {
+      // Write Event Pattern register
+      count = ubicom32command_packet_append(&packet, 0, ISD_WR_MEP, eventPattern);
+
+      // Write the Memory Event Mask register
+      count = ubicom32command_packet_append(&packet, 0, ISD_WR_MEM, eventMask);
+
+      // Write the Memory Event Control register with Event Enable (bit 15) on
+      triggerEvent |= 0x8000;
+    }
+  else
+    triggerEvent = 0;
+
+  //Writeto Memory event Control Register
+  count = ubicom32command_packet_append(&packet, 0, ISD_WR_MEC, triggerEvent);
+
+  // Set the Monitor Run Counter register
+  count = ubicom32command_packet_append(&packet, 0, ISD_WR_MRC, runCounter);
+
+  // Start monitoring by writing a 1 to Monitor Mode Enable
+  count = ubicom32command_packet_append(&packet, 0, ISD_WR_MME, 1);
+
+  // Ship this packet down to get monitoring going
+  // Ship the packet for processing
+  ret = ubicom32command_packet_send(&packet);
+  if(ret)
+    return ret;
+
+  return ret;
+}
+
+int
+ubicom32v3isp_hw_monitor_status(unsigned int *status,
+			  unsigned int *resBuf,
+			  unsigned int runCounter)
+{
+  struct ubicom32command_packet packet;
+  int ret, count;
+  unsigned int stat, numTimes;
+  struct ubicom32command *command;
+
+  *status = -1;
+  numTimes = 0;
+  while(1)
+    {
+      // Monitor the status
+      ubicom32command_packet_init(&packet);
+
+      // Send down ISD_RD_MST
+      count = ubicom32command_packet_append(&packet, 0, ISD_RD_MST, 0);
+
+      ret = ubicom32command_packet_send(&packet);
+      if(ret)
+	return ret;
+
+      command = &packet.commands[0];
+
+      // extract status
+      stat = (command->operand0<<24) | (command->operand1<<16) | (command->operand2<<8) | command->operand3;
+
+      if(stat &1)
+	{
+	  *status = 1;
+	  break;
+	}
+
+      numTimes++;
+      if(numTimes > 10)
+	return ret;
+    }
+
+#ifdef DEBUG
+  printf("status returned = 0x%08x\n", stat);
+#endif
+
+  ubicom32command_packet_init(&packet);
+
+  if(runCounter > 32)
+    runCounter = 32;
+
+
+  for(numTimes=0; numTimes< runCounter; numTimes++)
+    {
+      // send down ISD_WR_MBRE command
+      count = ubicom32command_packet_append(&packet, 0, ISD_WR_MBRE, 0);
+    }
+
+  ret = ubicom32command_packet_send(&packet);
+  if(ret)
+    return ret;
+
+  command = &packet.commands[runCounter-1];
+
+  for(numTimes=0; numTimes< runCounter; numTimes++, command--)
+    {
+      stat = (command->operand0<<24) | (command->operand1<<16) | (command->operand2<<8) | command->operand3;
+
+      *resBuf++ = stat;
+    }
+
+  return 0;
+}
+
+void verify_reg_read(void)
+{
+  struct ubicom32command_packet packet;
+  struct ubicom32command *command;
+  unsigned int reply;
+  int ret, count;
+
+  ubicom32command_packet_init(&packet);
+
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, 0x100);
+  count = ubicom32command_packet_append(&packet, 0, ISD_NOP, 0);
+
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, 0x104);
+  count = ubicom32command_packet_append(&packet, 0, ISD_NOP, 0);
+
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, 0x108);
+  count = ubicom32command_packet_append(&packet, 0, ISD_NOP, 0);
+
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, 0x138);
+  count = ubicom32command_packet_append(&packet, 0, ISD_NOP, 0);
+
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, 0x1a4);
+  count = ubicom32command_packet_append(&packet, 0, ISD_NOP, 0);
+
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, 0x1a8);
+  count = ubicom32command_packet_append(&packet, 0, ISD_NOP, 0);
+
+  ret = ubicom32command_packet_send(&packet);
+
+  if (ret)
+    return;
+
+  command = &packet.commands[0];
+
+  reply = (command->operand0<<24) | (command->operand1<<16) | (command->operand2<<8) | command->operand3;
+  command++;
+  command++;
+  printf("Chip ID 0x%x\n", reply);
+
+  reply = (command->operand0<<24) | (command->operand1<<16) | (command->operand2<<8) | command->operand3;
+  command++;
+  command++;
+  printf("Int Stat0 0x%x\n", reply);
+
+  reply = (command->operand0<<24) | (command->operand1<<16) | (command->operand2<<8) | command->operand3;
+  command++;
+  command++;
+  printf("Int Stat1 0x%x\n", reply);
+
+  reply = (command->operand0<<24) | (command->operand1<<16) | (command->operand2<<8) | command->operand3;
+  command++;
+  command++;
+  printf("Mt_active 0x%x\n", reply);
+
+  reply = (command->operand0<<24) | (command->operand1<<16) | (command->operand2<<8) | command->operand3;
+  command++;
+  command++;
+  printf("MT_I_BLOCKED 0x%x\n", reply);
+
+  reply = (command->operand0<<24) | (command->operand1<<16) | (command->operand2<<8) | command->operand3;
+  command++;
+  command++;
+  printf("MT_D_BLOCKED 0x%x\n", reply);
+
+}
+
+static int
+ubicom32v3_fast_write_bytes (unsigned int address, char *buffer, unsigned int length)
+{
+  // split the transfer into lead, aligned middle and end
+  unsigned truncBytes = (address & 0x3);
+  unsigned truncAddress = address & ~0x3;
+  unsigned int leadBytes, leadAddr, midBytes, midAddr, endBytes, endAddr, leadIndex;
+  unsigned toWriteWords;
+  unsigned char  *sendBuffer;
+  unsigned char *freeBuffer;
+  unsigned char *cptr;
+  int j, ret;
+  unsigned int i;
+
+  leadBytes =0;
+  leadIndex = 0;
+  if(truncBytes)
+    {
+      leadBytes = 4-truncBytes;
+      if(leadBytes > length)
+	leadBytes = length;
+      leadIndex = 3-truncBytes;
+      length -= leadBytes;
+      address = truncAddress + 4;
+    }
+
+  leadAddr = truncAddress;
+
+  endAddr = address + length;
+  endBytes = endAddr & 0x3;
+  endAddr &= ~0x3;
+
+  midBytes = length - endBytes;
+  midAddr = address;
+
+  toWriteWords = midBytes/4;
+
+  if(leadBytes)
+    toWriteWords++;
+
+  if(endBytes)
+    toWriteWords++;
+
+  /* Allocate the send buffer */
+  sendBuffer = (unsigned char *)malloc(toWriteWords*4);
+  freeBuffer = sendBuffer;
+  cptr = sendBuffer;
+
+  if(leadBytes)
+    {
+      // Misaligned start. Deal with it by first backing up the address to nearest
+      // Go read 4 bytes from the backed up address
+      ret = ubicom32v3readMemory(leadAddr, 1, (int *)cptr);
+
+      for(i=0; i<leadBytes; i++)
+	{
+	  cptr[leadIndex--] = (unsigned char) *buffer++;
+	}
+
+      // Bump up cptr by 4
+      cptr += 4;
+    }
+
+  // Deal with the midsection if any
+  if(midBytes)
+    {
+      // Move the data into the transfer buffer
+      for(i=0; i< midBytes; i+= 4)
+	{
+	  for(j=0; j< 4; j++)
+	    {
+	      cptr[3-j] = (*buffer++ &0xff);
+	    }
+	  cptr+= 4;
+	}
+    }
+
+  if(endBytes)
+    {
+      // trailing cruft to deal with
+      // Go read 4 bytes from the backed up end address
+      ret = ubicom32v3readMemory(endAddr, 1, (int *)cptr);
+
+      for(i=0; i< endBytes; i++)
+	{
+	  cptr[3-i] = (unsigned char) *buffer++;
+	}
+    }
+
+  // Send the data to target
+  ret = ubicom32v3UltrafastWriteMemory(leadAddr, toWriteWords, (int *)sendBuffer);
+
+  free (freeBuffer);
+  return (leadBytes + midBytes + endBytes);
+}
+
+static int
+ubicom32v3_fast_read_bytes (unsigned int address, char *buffer, unsigned int length)
+{
+  // split the transfer into lead, aligned middle and end
+  unsigned truncBytes = (address & 0x3);
+  unsigned truncAddress = address & ~0x3;
+  unsigned int leadBytes, leadAddr, midBytes, midAddr, endBytes, endAddr, leadIndex;
+  unsigned toReadWords;
+  unsigned char  *recvBuffer;
+  unsigned char *freeBuffer;
+  unsigned char *cptr;
+  int ret;
+  unsigned int i;
+
+  leadIndex = 0;
+  if(truncBytes)
+    {
+      leadBytes = 4-truncBytes;
+      if(leadBytes > length)
+	leadBytes = length;
+      leadIndex = truncBytes;
+      length -= leadBytes;
+      address = truncAddress + 4;
+    }
+  else
+    leadBytes =0;
+
+  leadAddr = truncAddress;
+
+  endAddr = address + length;
+  endBytes = endAddr & 0x3;
+  endAddr &= ~0x3;
+
+  midBytes = length - endBytes;
+  midAddr = address;
+
+  toReadWords = midBytes/4;
+
+  if(leadBytes)
+    toReadWords++;
+
+  if(endBytes)
+    toReadWords++;
+
+  /* Allocate the recv buffer */
+  recvBuffer = (unsigned char *)malloc(toReadWords*4);
+  freeBuffer = recvBuffer;
+  cptr = recvBuffer;
+
+  ret = ubicom32v3UltraFastReadMemoryRaw(leadAddr, toReadWords, (int *)recvBuffer);
+
+  // Now Swizzle the data out
+  if(leadBytes)
+    {
+      for(i= 0;i< leadBytes; i++)
+	{
+	  *buffer++ = recvBuffer[leadIndex++];
+	}
+      recvBuffer += 4;
+    }
+
+  if(midBytes)
+    {
+      memcpy (buffer, recvBuffer, midBytes);
+      recvBuffer += midBytes;
+      buffer += midBytes;
+    }
+
+  if(endBytes)
+    {
+      for(i=0; i< endBytes; i++)
+	{
+	  *buffer ++ = recvBuffer[i];
+	}
+    }
+  recvBuffer += 4;
+  free (freeBuffer);
+
+  return (leadBytes + midBytes + endBytes);
+}
+
+int ubicom32v3isp_initBackendToBootKernel( unsigned int downloader_len, int *downloader_data, unsigned int vma)
+{
+  int ret;
+  char *verifybuf;
+  unsigned int retlen;
+
+  ret = ubicom32v3isp_reset();
+  if (ret)
+    {
+      dongle_error ("Reset error");
+      return ret;
+    }
+
+  /* Call ubicom32v3isp_bist to run bist. */
+  ret = ubicom32v3isp_bist();
+  if (ret)
+    {
+      dongle_error ("BIST error");
+      return ret;
+    }
+
+  /* set up the fast downloader */
+  ret = ubicom32v3isp_download_fast_transfer_code((vma + downloader_len+ 7) & ~3);
+  if (ret)
+    {
+      dongle_error ("Download fast transfer code error");
+      return ret;
+    }
+
+  /* transfer the .downloader section to the hardware. */
+  retlen = ubicom32v3_fast_write_bytes(vma, (char *)downloader_data, downloader_len);
+  if (retlen != downloader_len)
+    {
+      dongle_error ("Transfer .downloader failed");
+      return -1;
+    }
+
+  /* allocate the verify buffer. */
+  verifybuf = malloc(downloader_len);
+  if (verifybuf == NULL)
+    {
+      dongle_error ("Downloader malloc failed");
+      return -1;
+    }
+
+  /* read the data back into the verify buffer and do a memcmp */
+  retlen = ubicom32v3_fast_read_bytes(vma, verifybuf, downloader_len);
+  if (retlen != downloader_len)
+    {
+      dongle_error ("Re-read failed");
+      return -1;
+    }
+
+  /* Do the buffer comparison. */
+  if (memcmp (downloader_data, verifybuf, downloader_len) != 0)
+    {
+      dongle_error("Could not download .downloader section.");
+      return -1;
+    }
+
+  /* Downloader is verified. */
+  free(verifybuf);
+
+  /* guarantee that thread0 will be alive when we give it control. */
+  ret = ubicom32v3isp_make_thread0_alive();
+
+  /* now transfer control to the .downloader section */
+  vma += 12*4;
+
+  ret = ubicom32v3writeRegisters(ubicom32v3currentThread, 34, (void *)&vma, 1);
+  ret= ubicom32v3restartProcessor(1);
+
+  if(ret)
+    {
+      /* Jump to PC failed */
+      char buffer[180];
+      sprintf(buffer, "Failed to revector the debugger thread to 0x%x.\n", vma);
+      dongle_error(buffer);
+      return -1;
+    }
+
+  /* sleep for about .2 seconds */
+  usleep(200000);
+
+  /* Before we can go ahead wakeup the downloader */
+  ret = ubicom32v3isp_wakeup_downloader();
+  if(ret)
+    {
+      dongle_error("Downloader is dead..");
+      return -1;
+    }
+
+  return 0;
+}
+
+int
+ubicom32v3_write_flash_bytes (unsigned int address, char *buffer, unsigned int length)
+{
+  // split the transfer into lead, aligned middle and end
+  unsigned truncBytes = (address & 0x3);
+  unsigned truncAddress = address & ~0x3;
+  unsigned int leadBytes, leadAddr, midBytes, midAddr, endBytes, endAddr, leadIndex;
+  unsigned toWriteWords;
+  unsigned char  *sendBuffer;
+  unsigned char *freeBuffer;
+  unsigned char *cptr;
+  unsigned int i;
+  int  j, ret;
+
+  leadBytes =0;
+  leadIndex = 0;
+  if(truncBytes)
+    {
+      leadBytes = 4-truncBytes;
+      if(leadBytes > length)
+	leadBytes = length;
+      leadIndex = 3-truncBytes;
+      length -= leadBytes;
+      address = truncAddress + 4;
+    }
+
+  leadAddr = truncAddress;
+
+  endAddr = address + length;
+  endBytes = endAddr & 0x3;
+  endAddr &= ~0x3;
+
+  midBytes = length - endBytes;
+  midAddr = address;
+
+  toWriteWords = midBytes/4;
+
+  if(leadBytes)
+    toWriteWords++;
+
+  if(endBytes)
+    toWriteWords++;
+
+  /* Allocate the send buffer */
+  sendBuffer = (unsigned char *)malloc(toWriteWords*4);
+  freeBuffer = sendBuffer;
+  cptr = sendBuffer;
+
+  if(leadBytes)
+    {
+      // Misaligned start. Deal with it by first backing up the address to nearest
+      // Go read 4 bytes from the backed up address
+      ret = readPgmMemory(leadAddr, 1, (int *)cptr);
+
+      for(i=0; i<leadBytes; i++)
+	{
+	  cptr[leadIndex--] = (unsigned char) *buffer++;
+	}
+
+      // Bump up cptr by 4
+      cptr += 4;
+    }
+
+  // Deal with the midsection if any
+  if(midBytes)
+    {
+      // Move the data into the transfer buffer
+      for(i=0; i< midBytes; i+= 4)
+	{
+	  for(j=0; j< 4; j++)
+	    {
+	      cptr[3-j] = (*buffer++ &0xff);
+	    }
+	  cptr+= 4;
+	}
+    }
+
+  if(endBytes)
+    {
+      // trailing cruft to deal with
+      // Go read 4 bytes from the backed up end address
+      ret = readPgmMemory(endAddr, 1, (int *)cptr);
+
+      for(i=0; i< endBytes; i++)
+	{
+	  cptr[3-i] = (unsigned char) *buffer++;
+	}
+    }
+
+  // Send the data to target
+  ret = writePgmMemory(leadAddr, toWriteWords, (int *)sendBuffer);
+
+  free (freeBuffer);
+  return (leadBytes + midBytes + endBytes);
+}
+
+int
+ubicom32v3pollThreads(unsigned int threadNo, char *args)
+{
+  struct ubicom32command_packet packet;
+  struct ubicom32command *command;
+  int count, ret;
+  int pcIndex;
+  unsigned int reply;
+
+  if(dongle_interface_status() == 0)
+    {
+      if (args == NULL)
+	return -1;
+
+      if(ubicom32v3isp_connect(args) == -1)
+	return -1;
+
+      debugOpen();
+    }
+
+  ubicom32command_packet_init(&packet);
+
+  /* recover thread PC */
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, (0xd0 | threadNo <<10));
+  pcIndex = count;
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, (0xd0 | threadNo <<10));
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, (0xd0 | threadNo <<10));
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, (0xd0 | threadNo <<10));
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, (0xd0 | threadNo <<10));
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, (0xd0 | threadNo <<10));
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, (0xd0 | threadNo <<10));
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, (0xd0 | threadNo <<10));
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, (0xd0 | threadNo <<10));
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, (0xd0 | threadNo <<10));
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, (0xd0 | threadNo <<10));
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, (0xd0 | threadNo <<10));
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, (0xd0 | threadNo <<10));
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, (0xd0 | threadNo <<10));
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, (0xd0 | threadNo <<10));
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, (0xd0 | threadNo <<10));
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, (0xd0 | threadNo <<10));
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, (0xd0 | threadNo <<10));
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, (0xd0 | threadNo <<10));
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, (0xd0 | threadNo <<10));
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, (0xd0 | threadNo <<10));
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, (0xd0 | threadNo <<10));
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, (0xd0 | threadNo <<10));
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, (0xd0 | threadNo <<10));
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, (0xd0 | threadNo <<10));
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, (0xd0 | threadNo <<10));
+  count = ubicom32command_packet_append(&packet, 0, ISD_RD_MP_REG, (0xd0 | threadNo <<10));
+  count = ubicom32command_packet_append(&packet, 0, ISD_NOP, 0);
+
+  /* ship down the packet */
+  ret = ubicom32command_packet_send(&packet);
+  if(ret)
+    return ret;
+
+  while(pcIndex < count)
+    {
+      command = &packet.commands[pcIndex];
+
+      // extract reply
+      reply = (command->operand0<<24) | (command->operand1<<16) | (command->operand2<<8) | command->operand3;
+
+      printf("Thread %d at 0x%x\n", threadNo, reply);
+
+      pcIndex++;
+    }
+
+  return ret;
+}
--- /dev/null
+++ b/gdb/remote-ubicom32v3-dbginterface.h
@@ -0,0 +1,76 @@
+/* Target-dependent code for GDB, the GNU debugger.
+
+   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 
+   2009
+   Free Software Foundation, Inc.
+
+   This file is part of GDB.
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.
+*/
+#ifdef __cplusplus
+extern "C" {
+#endif
+extern int ubicom32v3currentThread;
+extern int ubicom32v3_current_thread;
+extern int ubicom32v3singleStep(unsigned int threadNo);
+extern int ubicom32v3stopProcessor(void);
+extern int ubicom32v3restartProcessor(unsigned int scratch3value);
+extern int ubicom32v3writeRegisters( int threadNo, int regIndex, 
+					 int *inBuf, unsigned int length);
+extern int ubicom32v3readRegisters( int threadNo, int regIndex, int *dest, 
+			  unsigned int length);
+extern int ubicom32v3createTpacketMP(unsigned int threadNo);
+extern int ubicom32v3createGpacket(unsigned char *buffer, unsigned int cpuType);
+extern int ubicom32v3waitForBP(bpReason_t *reason);
+extern int ubicom32v3waitForBPNoTrap(bpReason_t *reason);
+extern int ubicom32v3writeMemory(unsigned int destAddr, unsigned int len, int *data);
+extern int ubicom32v3readMemory(unsigned int destAddr, unsigned int len, int *data);
+extern int ubicom32v3fastWriteMemory(unsigned int destAddr, unsigned int len, int *data);
+extern int ubicom32v3UltrafastWriteMemory(unsigned int destAddr, unsigned int len, int *data);
+extern int ubicom32v3fastReadMemory(unsigned int destAddr, unsigned int len, int *data);
+extern int ubicom32v3UltraFastReadMemory(unsigned int destAddr, unsigned int len, int *data);
+extern int ubicom32v3UltraFastReadMemoryRaw(unsigned int destAddr, unsigned int len, int *data);
+//extern int crcPgmMemory(unsigned int destAddr, unsigned int len, int *data);
+
+extern int ubicom32v3isp_connect(char *remote);
+extern int ubicom32v3isp_attach(void);
+extern int ubicom32v3isp_close(void);
+extern int ubicom32v3isp_reset(void);
+extern int ubicom32v3gdbGetallRegs(int threadNo, ubicom32v3Regs_t *mainRegs);
+extern int ubicom32v3isp_detach(void);
+extern int ubicom32v3waitForBP(bpReason_t *reason);
+extern int ubicom32v3singleStep(unsigned int threadNo);
+extern int ubicom32v3cacheflushinvalidate(unsigned int startAddr, unsigned int length);
+extern int ubicom32v3cacheinvalidate(unsigned int startAddr, unsigned int length);
+extern int ubicom32v3setupDebuggerThread(unsigned int threadNo);
+extern int ubicom32v3restoreDebuggerThread(unsigned int);
+extern int ubicom32v3isp_bist(void);
+extern int ubicom32v3isp_pll_init(void);
+extern int ubicom32v3isp_download_fast_transfer_code(unsigned int address);
+extern int ubicom32v3isp_force_run_cpu(unsigned int address);
+extern int ubicom32v3isp_wakeup_downloader(void);
+extern int ubicom32v3isp_make_thread0_alive(void);
+extern int ubicom32v3hw_monitor_setup(unsigned int addr, unsigned int needEvent,
+				unsigned int triggerEvent, unsigned int eventPattern, 
+				unsigned int eventMask, unsigned int runCounter);
+extern int ubicom32v3isp_hw_monitor_status(unsigned int *status, 
+				     unsigned int *resBuf, unsigned int runCounter);
+extern int ubicom32v3isp_initBackendToBootKernel( unsigned int downloader_len, int *downloader_data, unsigned int vma);
+
+extern int ubicom32v3_write_flash_bytes (unsigned int address, char *buffer, int length);
+extern int ubicom32v3_verify_bytes (unsigned int address, char *buffer, unsigned int length);
+#ifdef __cplusplus
+}
+#endif
--- /dev/null
+++ b/gdb/remote-ubicom32v3-isd.c
@@ -0,0 +1,3696 @@
+/* Remote target communications for serial-line targets in custom GDB protocol
+
+   Copyright 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996,
+   1997, 1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.
+
+   This file is part of GDB.
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 2 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program; if not, write to the Free Software
+   Foundation, Inc., 59 Temple Place - Suite 330,
+   Boston, MA 02111-1307, USA.  */
+
+/* See the GDB User Guide for details of the GDB remote protocol. */
+
+#include "defs.h"
+#include "gdb_string.h"
+#include <ctype.h>
+#include <fcntl.h>
+#include "inferior.h"
+#include "bfd.h"
+#include "symfile.h"
+#include "target.h"
+#include "gdbcmd.h"
+#include "objfiles.h"
+#include "gdb-stabs.h"
+#include "gdbthread.h"
+#include "remote.h"
+#include "regcache.h"
+#include "value.h"
+#include "gdb_assert.h"
+#include "readline/readline.h"
+
+#include <ctype.h>
+#include <sys/time.h>
+#ifdef USG
+#include <sys/types.h>
+#endif
+
+#include "event-loop.h"
+#include "event-top.h"
+#include "inf-loop.h"
+
+#include <signal.h>
+#include "serial.h"
+
+#include "gdbcore.h" /* for exec_bfd */
+#include "remote-ubicom32-isd.h"
+#include "remote-ubicom32-dbginterface.h"
+#include "remote-ubicom32v3-dbginterface.h"
+#include "ubicom32_dongle.h"
+#include "elf-bfd.h"
+#include "ubicom32-tdep.h"
+
+#define DO_CORE_DUMPS 1
+
+volatile int ubicom32v3_cntrl_c_abort;
+int ubicom32v3_current_thread= -1;
+int ubicom32v3currentThread=-1;
+unsigned int dcache_status = 0;
+static void ubicom32v3_read_dcache_status(void);
+
+enum ubicom32v3_state remote_ubicom32v3_state = UBICOM32V3_DETACHED;
+
+struct step_interpret {
+  unsigned int current_pc;
+  unsigned int target1_pc;
+  unsigned int target2_pc;
+  unsigned int address_register;
+  unsigned int stepping_thread;
+};
+
+struct step_interpret stepinterpret;
+extern unsigned int single_step_buffer_address;
+static int ubicom32v3_write_bytes (CORE_ADDR address, char *buffer, int length);
+
+/* GDB structure.  */
+struct target_ops ubicom32v3_ops;
+struct target_ops ubicom32v3_core_ops;
+
+#define UBICOM32V3_FLASH_ADDR 0x60000000
+#define UBICOM32V3_FLASH_END	0x6ffffffc
+#define UBICOM32V3_LOAD_BLOCK_SIZE 2048
+
+#define UBICOM32V3_DDR_ADDR 0x40000000
+#define UBICOM32V3_DDR_END  0x47fffffc
+
+#define UBICOM32V3_OCM_ADDR 0x3ffc0000
+#define UBICOM32V3_OCM_END  0x3ffffffc
+
+#define UBICOM32V3_FLASH_SECTION 1
+#define UBICOM32V3_DDR_SECTION 2
+#define UBICOM32V3_OCM_SECTION 3
+
+#define REGISTER_RAW_SIZE(x)  (4)
+
+void ubicom32v3_supply_registers(struct ubicom32_cpu *cpu, int threadNo, void *regcache);
+void ubicom32v4_supply_registers(struct ubicom32_cpu *cpu, int threadNo, void *regcache);
+void ubicom32v3_tpacket_supply_registers(struct ubicom32_cpu *cpu, int threadNo);
+void ubicom32v4_tpacket_supply_registers(struct ubicom32_cpu *cpu, int threadNo);
+
+static int ignore_trap = 0;
+
+/* ubicom32v3_loadable_section.  */
+static int
+ubicom32v3_loadable_section(bfd *loadfile_bfd, asection *s)
+{
+  int addr, length;
+
+  if (!(s->flags & SEC_LOAD))
+    {
+      if (strncmp(s->name, ".image", strlen(".image")))
+	return 0;
+    }
+
+  length = bfd_get_section_size (s);
+  if (length == 0)
+    return 0;
+
+  if ((s->lma >= UBICOM32V3_FLASH_ADDR) && (s->lma + length <= UBICOM32V3_FLASH_END))
+    return UBICOM32V3_FLASH_SECTION;
+  if ((s->lma >= UBICOM32V3_DDR_ADDR) && (s->lma + length <= UBICOM32V3_DDR_END))
+    return UBICOM32V3_DDR_SECTION;
+  if ((s->lma >= UBICOM32V3_OCM_ADDR) && (s->lma + length <= UBICOM32V3_OCM_END))
+    return UBICOM32V3_OCM_SECTION;
+  return 0;
+}
+
+/* ubicom32v3_lookup_symbol.  */
+static unsigned int
+ubicom32v3_lookup_symbol (char *name)
+{
+  struct symbol *sym;
+  struct minimal_symbol *msym;
+
+  sym = lookup_symbol (name, NULL, VAR_DOMAIN, NULL, NULL);
+  if (sym)
+    return SYMBOL_VALUE (sym);
+
+  msym = lookup_minimal_symbol (name, NULL, NULL);
+  if (msym)
+    return SYMBOL_VALUE (msym);
+
+  return 0;
+}
+
+static void
+swizzle_for_write_register (int regnum, const void *val)
+{
+  int i, j;
+  char * value = (char *)malloc(REGISTER_RAW_SIZE (regnum));
+  char *ptr = (char *)val;
+
+  for(i= (REGISTER_RAW_SIZE (regnum)) -1, j=0;i >= 0; i--)
+    {
+      value[j++] = ptr[i];
+    }
+
+  /* copy the data back into the buffer */
+  for(i= (REGISTER_RAW_SIZE (regnum)) -1, j=0;i >= 0; i--)
+    {
+      ptr[i] = value[i];
+    }
+
+  free(value);
+}
+
+
+static void
+swizzled_supply_register (struct regcache *regcache, int regnum, const void *val)
+{
+  int i, j;
+  char * value = (char *)malloc(REGISTER_RAW_SIZE (regnum));
+  char *ptr = (char *)val;
+
+  for(i= (REGISTER_RAW_SIZE (regnum)) -1, j=0;i >= 0; i--)
+    {
+      value[j++] = ptr[i];
+    }
+
+  regcache_raw_supply(regcache, regnum, (const void *)value);
+  free(value);
+}
+
+static void
+ubicom32v3_set_thread (int th)
+{
+  if(th > 0)
+    {
+      if(remote_ubicom32v3_state == UBICOM32V3_CORE_STOPPED)
+	{
+	  /*
+	   * Looks like the core is being analyzed. Fake it out.
+	   */
+	  ubicom32v3_current_thread = th;
+	  ubicom32v3currentThread = th -1;
+	  return;
+	}
+
+      /*
+       * Normal live operations.
+       */
+      if(th != ubicom32v3_current_thread)
+	{
+	  if(ubicom32v3_current_thread != -1)
+	    {
+	      /* restore the current debugger thread back to original state */
+	      (void) ubicom32v3restoreDebuggerThread(1);
+	    }
+	  ubicom32v3setupDebuggerThread(th -1);
+	}
+    }
+}
+
+static int
+ubicom32v3_thread_alive (ptid_t ptid)
+{
+  return (1);
+}
+
+#define MAGIC_NULL_PID 42000
+
+static char *ubi32cpus[] = {"ubicom32v2", "ubicom32v3", "ubicom32v4"};
+
+/* ubicom32v3_open
+   Usage: target remote <ip_addr>:<ip_port>
+   Connects to the dongle and then connects to target through the dongle.  */
+void
+ubicom32v3_open (char *args, int from_tty)
+{
+  int ret, i;
+  struct gdbarch_info info;
+  extern void gdbarch_info_init (struct gdbarch_info *info);
+  char *env_dongle;
+  extern int chipID;
+  char *file;
+  int elf_flags = -1;
+
+  if (exec_bfd)
+    {
+      elf_flags = elf_elfheader (exec_bfd)->e_flags & 0xffff;
+    }
+
+  if (remote_debug)
+    {
+      if (args)
+	printf_filtered ("ubicom32v3_open (%s)\n", args);
+      else
+	printf_filtered ("ubicom32v3_open ()\n");
+    }
+
+  target_preopen (from_tty);
+
+  // printf("Current arch is %s\n", TARGET_ARCHITECTURE->printable_name);
+
+  /* Default device.  */
+  if (!args)
+    {
+      env_dongle = getenv("UBICOM_DONGLE");
+      if (env_dongle)
+	args = env_dongle;
+      else
+	args = "localhost:5010";
+    }
+
+  /* Connect to dongle.  */
+  ret = ubicom32v3isp_connect (args);
+
+  if(ret == -1)
+    error ("Unable to find dongle.");
+  else if(ret == -2)
+    error ("Dongle has no Ubicom32v3 support. Get a new dongle with Ubicom32v3 support and try again.");
+
+
+  /*
+   * control c turnOffconsole in ubicom32v3_open()
+   */
+  ret = turnOffconsole();
+
+  /* Attach to target.  */
+  ret = ubicom32v3isp_attach ();
+  if(ret)
+    {
+      (void)ubicom32v3isp_close();
+      remote_ubicom32v3_state = UBICOM32V3_DETACHED;
+      switch(ret)
+	{
+	case -1:
+	  error("Error in reply packets from dongle\n");
+	  break;
+	case -2:
+	  error("Found Ubicom32 processor and not Ubicom32v3 processor\n");
+	  break;
+	case -3:
+	  error("Unable to establish ISD connection\n");
+	  break;
+	default:
+	  error("Unable to connect to target\n");
+	  break;
+	}
+    }
+
+  switch (chipID)
+    {
+    case 0x20000:
+    case 0x20001:
+    case 0x20002:
+      current_cpu = &ubicom32_cpus[0];
+      current_cpu->supply_register_fn = ubicom32v3_supply_registers;
+      current_cpu->supply_tpacket_regs_fn = ubicom32v3_tpacket_supply_registers;
+
+      if (elf_flags != -1)
+	{
+	  if (elf_flags != bfd_mach_ubicom32dsp)
+	    {
+	      char *file = bfd_get_filename (exec_bfd);
+	      char *slash_location = strrchr(file, '/');
+
+	      if (slash_location == NULL)
+		slash_location = file;
+	      else
+		slash_location++;
+
+	      printf_unfiltered ("\nWarning Mismatch:\n\tFile \"%s\" has been built for %s.\n\tTarget cpu is ubicom32v3.\n\n", slash_location, ubi32cpus[elf_flags]);
+	    }
+	}
+
+      break;
+    case 0x30000:
+    case 0x30001:
+      current_cpu = &ubicom32_cpus[1];
+      current_cpu->supply_register_fn = ubicom32v4_supply_registers;
+      current_cpu->supply_tpacket_regs_fn = ubicom32v4_tpacket_supply_registers;
+
+      if (elf_flags != -1)
+	{
+	  if (elf_flags != bfd_mach_ubicom32ver4)
+	    {
+	      char *file = bfd_get_filename (exec_bfd);
+	      char *slash_location = strrchr(file, '/');
+
+	      if (slash_location == NULL)
+		slash_location = file;
+	      else
+		slash_location++;
+
+	      printf_unfiltered ("\nWarning Mismatch:\n\tFile \"%s\" has been built for %s.\n\tTarget cpu is ubicom32v4.\n\n", slash_location, ubi32cpus[elf_flags]);
+	    }
+	}
+
+      break;
+    default:
+      error("No support for Processor with chip ID 0x%x in this version of the debugger.", chipID);
+    }
+
+  if (current_gdbarch == NULL)
+    {
+      char *ptr = NULL;
+      gdbarch_info_init (&info);
+      switch (chipID)
+	{
+	case 0x20000:
+	case 0x20001:
+	case 0x20002:
+	  ptr = "ubicom32dsp";
+	  break;
+	case 0x30000:
+	case 0x30001:
+	  ptr = "ubicom32ver4";
+	  break;
+	}
+      info.bfd_arch_info = bfd_scan_arch (ptr);
+
+      if (info.bfd_arch_info == NULL)
+	internal_error (__FILE__, __LINE__,
+			"set_architecture: bfd_scan_arch failed");
+      (void)gdbarch_update_p (info);
+    }
+  else
+    {
+      struct gdbarch_tdep *tdep = gdbarch_tdep(current_gdbarch);
+      char *arch_string = (char *)tdep->name;
+      switch (chipID)
+	{
+	case 0x20000:
+	case 0x20001:
+	case 0x20002:
+	  if (strcmp(arch_string, "Ubicom32 Version 3"))
+	    {
+	      /* Architecture mismatch. We need to go find the "ubicom32dsp" arch. */
+	      gdbarch_info_init (&info);
+	      info.bfd_arch_info = bfd_scan_arch ("ubicom32dsp");
+
+	      if (info.bfd_arch_info == NULL)
+		internal_error (__FILE__, __LINE__,
+				"set_architecture: bfd_scan_arch failed");
+	      (void)gdbarch_update_p (info);
+	    }
+	  break;
+	case 0x30000:
+	case 0x30001:
+	  if (strcmp(arch_string, "Ubicom32 Version 4"))
+	    {
+	      /* Architecture mismatch. We need to go find the "ubicom32ver4" arch. */
+	      gdbarch_info_init (&info);
+	      info.bfd_arch_info = bfd_scan_arch ("ubicom32ver4");
+
+	      if (info.bfd_arch_info == NULL)
+		internal_error (__FILE__, __LINE__,
+				"set_architecture: bfd_scan_arch failed");
+	      (void)gdbarch_update_p (info);
+	    }
+	  break;
+	}
+    }
+  push_target (&ubicom32v3_ops);		/* Switch to using remote target now */
+
+  remote_ubicom32v3_state = UBICOM32V3_STOPPED;
+  inferior_ptid = pid_to_ptid (ubicom32v3_current_thread);
+  start_remote(from_tty);
+  //inferior_ptid = pid_to_ptid (1);
+
+  /* add the threads to the system */
+  for(i=1; i<= current_cpu->num_threads; i++)
+    add_thread(pid_to_ptid(i));
+
+  ubicom32v3_read_dcache_status();
+}
+
+#ifdef DO_CORE_DUMPS
+struct ubicom32v3_core_memory {
+  unsigned int ocm_size;
+  unsigned char *ocm_mem;
+  unsigned int ddr_size;
+  unsigned char *ddr_mem;
+  unsigned int flash_size;
+  unsigned char *flash_mem;
+  unsigned char *hrts;
+} ubicom32v3_core;
+
+
+/* ubicom32v3_close.  */
+static void
+ubicom32v3_core_close (int quitting)
+{
+  if (remote_debug)
+    printf_filtered ("ubicom32v3_core_close (%d)\n", quitting);
+
+  /* Disconnect.  */
+  if(ubicom32v3_core.ocm_mem)
+    free(ubicom32v3_core.ocm_mem);
+  ubicom32v3_core.ocm_size = 0;
+  ubicom32v3_core.ocm_mem = NULL;
+
+  if(ubicom32v3_core.ddr_mem)
+    free(ubicom32v3_core.ddr_mem);
+  ubicom32v3_core.ddr_size = 0;
+  ubicom32v3_core.ddr_mem = NULL;
+
+  if(ubicom32v3_core.flash_mem)
+    free(ubicom32v3_core.flash_mem);
+  ubicom32v3_core.flash_size = 0;
+  ubicom32v3_core.flash_mem = NULL;
+
+  if(ubicom32v3_core.hrts)
+    free(ubicom32v3_core.hrts);
+  ubicom32v3_core.hrts = NULL;
+
+  remote_ubicom32v3_state = UBICOM32V3_DETACHED;
+}
+#endif
+
+void
+ubicom32v3_supply_registers(struct ubicom32_cpu *cpu, int threadNo, void *rcache)
+{
+  ubicom32v3Regs_t *mainRegs = (ubicom32v3Regs_t *)cpu->registers;
+  int *rptr = &mainRegs->tRegs[threadNo].dr[0];
+  int i;
+  struct regcache *regcache = (struct regcache *)rcache;
+  /* first supply the thread specific registers */
+  for(i=0; i< cpu->num_per_thread_regs; i++)
+    swizzled_supply_register(regcache, i, rptr++);
+
+  /* Now supply the global registers */
+  rptr = (int *)&mainRegs->globals;
+  for(;i< (cpu->num_per_thread_regs + cpu->num_global_regs); i++)
+    swizzled_supply_register(regcache, i, rptr++);
+}
+
+void
+ubicom32v4_supply_registers(struct ubicom32_cpu *cpu, int threadNo, void *rcache)
+{
+  ubicom32v4Regs_t *mainRegs = (ubicom32v4Regs_t *)cpu->registers;
+  int *rptr = &mainRegs->tRegs[threadNo].dr[0];
+  int i;
+  struct regcache *regcache = (struct regcache *)rcache;
+
+  /* first supply the thread specific registers */
+  for(i=0; i< cpu->num_per_thread_regs; i++)
+    swizzled_supply_register(regcache, i, rptr++);
+
+  /* Now supply the global registers */
+  rptr = (int *)&mainRegs->globals;
+  for(;i< (cpu->num_per_thread_regs + cpu->num_global_regs); i++)
+    swizzled_supply_register(regcache, i, rptr++);
+}
+
+/* ubicom32v3_fetch_register.  */
+static void
+ubicom32v3_fetch_register (struct regcache *regcache, int regno)
+{
+  int i, ret;
+  int thread_num = PIDGET (inferior_ptid);
+
+  ubicom32v3_set_thread (thread_num);
+
+  /* grab registers */
+  ret = current_cpu->fetch_registers_fn(current_cpu, (thread_num-1));
+  if(ret)
+    {
+      printf_unfiltered("error: Fetch registers for thread %d failed\n", thread_num-1);
+      return;
+    }
+
+  /* we have the registers. Now supply them */
+  current_cpu->supply_register_fn(current_cpu, thread_num-1, regcache);
+}
+
+struct ubicom32v3_core_header {
+  unsigned int magic;
+  unsigned int regOffset;
+  unsigned int hrtOffset;
+  unsigned int ocmOffset;
+  unsigned int ddrOffset;
+  unsigned int flashOffset;
+};
+
+struct ubicom32v3_cache_dump_header {
+  unsigned int dcache_tag_entries;
+  unsigned int dcache_data_bytes;
+  unsigned int icache_tag_entries;
+  unsigned int icache_data_bytes;
+};
+
+#ifdef DO_CORE_DUMPS
+/* ubicom32v3_core_open
+   Usage: ubicom32-elf-gdb elf-filename core-fliename. */
+void
+ubicom32v3_core_open (char *args, int from_tty)
+{
+  int ret, i;
+  FILE *fp;
+  struct ubicom32v3_core_header coreHeader;
+  char *file;
+  bfd *loadfile_bfd;
+  int registerSize;
+  asection *s;
+  CORE_ADDR dyn_begin;
+  unsigned int dyn_length;
+  char *ptr = NULL;
+  extern int chipID;
+
+  struct gdbarch_info info;
+  extern void gdbarch_info_init (struct gdbarch_info *info);
+
+  ubicom32v3_current_thread = 1;
+  if (remote_debug)
+    {
+      if (args)
+	printf_filtered ("ubicom32v3_core_open (%s)\n", args);
+      else
+	printf_filtered ("ubicom32v3_core_open ()\n");
+    }
+
+  target_preopen (from_tty);
+
+  remote_ubicom32v3_state = UBICOM32V3_DETACHED;
+
+  /* Open and read in the core file. */
+  fp = fopen(args, "rb");
+
+  if(fp == NULL)
+    {
+      printf_unfiltered("Unable to open core file %s\n", args);
+      return;
+    }
+
+  /* go retreive the core header from the file */
+  (void) fread(&coreHeader, 1, sizeof(coreHeader), fp);
+
+  if(coreHeader.magic != 0x123455aa && coreHeader.magic != 0x123455ab)
+    {
+      printf_unfiltered("%s is not a Ubicom core file. Incorrect magic number.\n", args);
+      fclose(fp);
+      return;
+    }
+
+  /* run through the cpu list and figure out what type of cpu this core dump belongs to. */
+  current_cpu = ubicom32_cpus;
+  while (current_cpu->registers != NULL && coreHeader.magic != current_cpu->core_magic)
+    {
+      current_cpu++;
+    }
+
+  if (current_cpu->registers == NULL)
+    {
+      printf_unfiltered("%s is a core file for an unknown cpu.\n", args);
+      fclose(fp);
+      return;
+    }
+
+  printf_unfiltered("Reading machine state from %s\n", args);
+
+  /* read in the debuggerThreadNo */
+  (void) fread(&ubicom32v3currentThread, 1, 4, fp);
+
+  ubicom32v3_current_thread = ubicom32v3currentThread+1;
+
+  /* go retrieve the flash contents from the bfd file */
+  file = get_exec_file(1);
+
+  loadfile_bfd = bfd_openr (file, gnutarget);
+
+  if (loadfile_bfd == NULL)
+    error ("Error: Unable to open file %s\n", file);
+
+  if (!bfd_check_format (loadfile_bfd, bfd_object))
+    {
+      bfd_close (loadfile_bfd);
+      error ("Error: File is not an object file\n");
+    }
+
+  /* read in size of the register area */
+  (void) fread(&registerSize, 1, 4, fp);
+
+  if (registerSize != current_cpu->reg_area_size && coreHeader.magic == 0x123455aa)
+    {
+      /* We are reading an older core. We will read it in piece by piece. */
+      fread(&ubicom32v3Registers.tRegs[0], 10, sizeof(ubicom32v3PerThreadRegs_t), fp);
+
+      /* Now read in the globals */
+      fread(&ubicom32v3Registers.globals, 1, (sizeof(ubicom32v3GlobalRegs_t) + 11*4), fp);
+    }
+  else
+    {
+      /* read in register data from the core */
+      (void) fread(current_cpu->registers, 1, current_cpu->reg_area_size, fp);
+    }
+
+  /* malloc space for hrts and read in the data */
+  ubicom32v3_core.hrts = malloc(512);
+  if(ubicom32v3_core.hrts == NULL)
+    {
+      printf_unfiltered("Could not allocate space to represent hrts\n");
+      ubicom32v3_core_close(1);
+      return;
+    }
+
+  /* read in hrt data */
+  (void) fread(ubicom32v3_core.hrts, 1, 512, fp);
+
+  /*read ocm memory size */
+  (void) fread(&ubicom32v3_core.ocm_size, 1, 4, fp);
+
+  /* malloc space for it */
+  ubicom32v3_core.ocm_mem = malloc(ubicom32v3_core.ocm_size);
+  if(ubicom32v3_core.ocm_mem == NULL)
+    {
+      printf_unfiltered("Could not allocate space to represent ocm memory\n");
+      ubicom32v3_core_close(1);
+      return;
+    }
+
+  /*read ocm memory */
+  (void) fread(ubicom32v3_core.ocm_mem, 1, ubicom32v3_core.ocm_size, fp);
+
+  /*read ddr memory size */
+  (void) fread(&ubicom32v3_core.ddr_size, 1, 4, fp);
+
+  /* malloc space for it */
+  ubicom32v3_core.ddr_mem = malloc(ubicom32v3_core.ddr_size);
+  if(ubicom32v3_core.ddr_mem == NULL)
+    {
+      printf_unfiltered("Could not allocate space to represent ddr memory\n");
+      ubicom32v3_core_close(1);
+      return;
+    }
+
+  /*read ddr memory */
+  (void) fread(ubicom32v3_core.ddr_mem, 1, ubicom32v3_core.ddr_size, fp);
+
+  /*read flash memory size */
+  (void) fread(&ubicom32v3_core.flash_size, 1, 4, fp);
+
+  /* malloc space for it */
+  ubicom32v3_core.flash_mem = malloc(ubicom32v3_core.flash_size);
+  if(ubicom32v3_core.flash_mem == NULL)
+    {
+      printf_unfiltered("Could not allocate space to represent flash memory\n");
+      ubicom32v3_core_close(1);
+      return;
+    }
+
+  /*read flash memory */
+  (void) fread(ubicom32v3_core.flash_mem, 1, ubicom32v3_core.flash_size, fp);
+
+  fclose(fp);
+
+  /* Set the Proper GDB arch */
+  if (current_cpu->core_magic == 0x123455aa)
+    {
+      chipID = ubicom32v3Registers.globals.chip_id;
+    }
+  else if (current_cpu->core_magic == 0x123455ab)
+    {
+      chipID = ubicom32v4Registers.globals.chip_id;
+    }
+  gdbarch_info_init (&info);
+  switch (chipID)
+    {
+    case 0x20000:
+    case 0x20001:
+    case 0x20002:
+      ptr = "ubicom32dsp";
+      current_cpu->supply_register_fn = ubicom32v3_supply_registers;
+      current_cpu->supply_tpacket_regs_fn = ubicom32v3_tpacket_supply_registers;
+      break;
+    case 0x30000:
+    case 0x30001:
+      ptr = "ubicom32ver4";
+      current_cpu->supply_register_fn = ubicom32v4_supply_registers;
+      current_cpu->supply_tpacket_regs_fn = ubicom32v4_tpacket_supply_registers;
+      break;
+    }
+  info.bfd_arch_info = bfd_scan_arch (ptr);
+
+  if (info.bfd_arch_info == NULL)
+    internal_error (__FILE__, __LINE__,
+		    "set_architecture: bfd_scan_arch failed");
+  (void)gdbarch_update_p (info);
+  push_target (&ubicom32v3_core_ops);		/* Switch to using remote target now */
+
+  remote_ubicom32v3_state = UBICOM32V3_CORE_STOPPED;
+  inferior_ptid = pid_to_ptid (ubicom32v3_current_thread);
+  start_remote(from_tty);
+
+  /* add the threads to the system */
+  for(i=1; i<= current_cpu->num_threads; i++)
+    add_thread(pid_to_ptid(i));
+
+  ubicom32v3_set_thread(ubicom32v3currentThread +1);
+}
+#endif
+
+/* ubicom32v3_attach */
+static void
+ubicom32v3_attach (char *args, int from_tty)
+{
+  struct gdbarch_info info;
+  extern void gdbarch_info_init (struct gdbarch_info *info);
+  int ret = ubicom32v3isp_attach ();
+
+  if(ret)
+    {
+      switch(ret)
+	{
+	case -1:
+	  error("Error in reply packets from dongle\n");
+	  break;
+	case -2:
+	  error("Found Ubicom32 processor and not Ubicom32v3 processor\n");
+	  break;
+	case -3:
+	  error("Unable to establish ISD connection\n");
+	  break;
+	default:
+	  error("Unable to connect to target\n");
+	  break;
+	}
+      (void)ubicom32v3isp_close();
+      remote_ubicom32v3_state = UBICOM32V3_DETACHED;
+    }
+
+  remote_ubicom32v3_state = UBICOM32V3_STOPPED;
+
+  if (current_gdbarch == NULL)
+    {
+      info.bfd_arch_info = bfd_scan_arch ("ubicom32dsp");
+
+      if (info.bfd_arch_info == NULL)
+	internal_error (__FILE__, __LINE__,
+			"set_architecture: bfd_scan_arch failed");
+      (void)gdbarch_update_p (info);
+    }
+  else
+    {
+      struct gdbarch_tdep *tdep = gdbarch_tdep(current_gdbarch);
+      char *arch_string = (char *)tdep->name;
+      extern int chipID;
+      switch (chipID)
+	{
+	case 0x20000:
+	case 0x20001:
+	case 0x20002:
+	  if (strcmp(arch_string, "Ubicom32 Version 3"))
+	    {
+	      /* Architecture mismatch. We need to go find the "ubicom32dsp" arch. */
+	      gdbarch_info_init (&info);
+	      info.bfd_arch_info = bfd_scan_arch ("ubicom32dsp");
+
+	      if (info.bfd_arch_info == NULL)
+		internal_error (__FILE__, __LINE__,
+				"set_architecture: bfd_scan_arch failed");
+	      (void)gdbarch_update_p (info);
+	    }
+	  break;
+	}
+    }
+
+  ubicom32v3_read_dcache_status();
+}
+
+#ifdef DO_CORE_DUMPS
+/* ubicom32v3_core_detach.
+   Detach from core.  */
+static void
+ubicom32v3_core_detach (char *args, int from_tty)
+{
+  (void) ubicom32v3_core_close(1);
+  pop_target();
+}
+#endif
+
+/* ubicom32v3_detach.
+   Detach from the remote board.  */
+static void
+ubicom32v3_detach (char *args, int from_tty)
+{
+  int ret;
+  // toggleMtEn();
+
+  (void) ubicom32v3isp_detach();
+  (void) ubicom32v3isp_close();
+  remote_ubicom32v3_state = UBICOM32V3_DETACHED;
+  pop_target();
+
+}
+
+/* ubicom32v3_close.  */
+static void
+ubicom32v3_close (int quitting)
+{
+  if(remote_ubicom32v3_state == UBICOM32V3_DETACHED)
+    return;
+
+  if (remote_debug)
+    printf_filtered ("ubicom32v3_close (%d)\n", quitting);
+
+  /* Disconnect.  */
+  (void)ubicom32v3isp_close();
+  remote_ubicom32v3_state = UBICOM32V3_DETACHED;
+}
+
+/* ubicom32v3_cntrl_c.  */
+static void
+ubicom32v3_cntrl_c (int signo)
+{
+  ubicom32v3_cntrl_c_abort = 1;
+}
+
+/* ubicom32v3_files_info.  */
+static void
+ubicom32v3_files_info (struct target_ops *target)
+{
+  if (exec_bfd)
+    {
+      char *file = bfd_get_filename (exec_bfd);
+      printf_unfiltered ("Debugging %s\n", file);
+    }
+  else
+    printf_unfiltered ("No file loaded\n");
+}
+
+/* ubicom32v3_stop.
+   Notify the target of an asynchronous request to stop.  */
+static void
+ubicom32v3_stop (void)
+{
+  if (remote_debug)
+    printf_filtered ("ubicom32v3_stop\n");
+
+  ubicom32v3_cntrl_c_abort = 1;
+}
+
+static char *
+ubicom32v3_thread_pid_to_str (ptid_t ptid)
+{
+  static char buf[30];
+
+  sprintf (buf, "Thread %d", (PIDGET (ptid))-1);
+  return buf;
+}
+
+static void
+ubicom32v3_store_register(struct regcache *regcache, int regnum)
+{
+  char *regs = malloc(REGISTER_RAW_SIZE(regnum));
+  int thread_num = PIDGET (inferior_ptid);
+  int ret;
+
+  ubicom32v3_set_thread(thread_num);
+
+  if(regnum >= 0)
+    {
+      /* pull the data from regcache */
+      regcache_raw_collect (regcache, regnum, regs);
+
+      swizzle_for_write_register (regnum, regs);
+      ret = current_cpu->write_register_fn((thread_num-1), regnum, (int *) regs, 1);
+      if(ret)
+	{
+	  printf_unfiltered("error: Write to register %d in thread %d failed\n",
+			    regnum, thread_num-1);
+	}
+    }
+  else
+    {
+      printf_unfiltered("error: Write of all registers not supported\n");
+    }
+}
+
+/* Prepare to store registers.  Since we may send them all
+   we have to read out the ones we don't want to change
+   first.  */
+
+static void
+ubicom32v3_prepare_to_store (struct regcache *regcache)
+{
+  int i;
+  gdb_byte buf[MAX_REGISTER_SIZE];
+
+  /* Make sure all the necessary registers are cached.  */
+  for (i = 0; i < gdbarch_num_regs(current_gdbarch); i++)
+    regcache_raw_read (regcache, i, buf);
+}
+
+#ifdef DO_CORE_DUMPS
+#if 0
+/* ubicom32v3_core_wait */
+static ptid_t
+ubicom32v3_core_wait (ptid_t ptid, struct target_waitstatus *status)
+{
+  return pid_to_ptid (ubicom32v3_current_thread);
+}
+#endif
+#endif
+
+void
+ubicom32v3_tpacket_supply_registers(struct ubicom32_cpu *cpu, int threadNo)
+{
+  ubicom32v3Regs_t *mainRegs = (ubicom32v3Regs_t *)cpu->registers;
+  struct regcache *current_regcache = get_current_regcache();
+  swizzled_supply_register(current_regcache, 0, &mainRegs->tRegs[ubicom32v3currentThread].dr[0]);
+  swizzled_supply_register(current_regcache, 21, &mainRegs->tRegs[ubicom32v3currentThread].ar[5]);
+  swizzled_supply_register(current_regcache, 22, &mainRegs->tRegs[ubicom32v3currentThread].ar[6]);
+  swizzled_supply_register(current_regcache, 23, &mainRegs->tRegs[ubicom32v3currentThread].ar[7]);
+  swizzled_supply_register(current_regcache, 30, &mainRegs->tRegs[ubicom32v3currentThread].rosr);
+  swizzled_supply_register(current_regcache, 34, &mainRegs->tRegs[ubicom32v3currentThread].threadPc);
+  swizzled_supply_register(current_regcache, 47, &mainRegs->globals.mt_active);
+  swizzled_supply_register(current_regcache, 50, &mainRegs->globals.mt_dbg_active);
+  swizzled_supply_register(current_regcache, 52, &mainRegs->globals.mt_en);
+}
+
+void
+ubicom32v4_tpacket_supply_registers(struct ubicom32_cpu *cpu, int threadNo)
+{
+  ubicom32v4Regs_t *mainRegs = (ubicom32v4Regs_t *)cpu->registers;
+  struct regcache *current_regcache = get_current_regcache();
+  swizzled_supply_register(current_regcache, 0, &mainRegs->tRegs[ubicom32v3currentThread].dr[0]);
+  swizzled_supply_register(current_regcache, 21, &mainRegs->tRegs[ubicom32v3currentThread].ar[5]);
+  swizzled_supply_register(current_regcache, 22, &mainRegs->tRegs[ubicom32v3currentThread].ar[6]);
+  swizzled_supply_register(current_regcache, 23, &mainRegs->tRegs[ubicom32v3currentThread].ar[7]);
+  swizzled_supply_register(current_regcache, 30, &mainRegs->tRegs[ubicom32v3currentThread].rosr);
+  swizzled_supply_register(current_regcache, 34, &mainRegs->tRegs[ubicom32v3currentThread].threadPc);
+  swizzled_supply_register(current_regcache, 47, &mainRegs->globals.mt_active);
+  swizzled_supply_register(current_regcache, 50, &mainRegs->globals.mt_dbg_active);
+  swizzled_supply_register(current_regcache, 52, &mainRegs->globals.mt_en);
+}
+
+/* ubicom32v3_wait */
+static ptid_t
+ubicom32v3_wait (ptid_t ptid, struct target_waitstatus *status)
+{
+  bpReason_t reason;
+  int mask;
+
+  static RETSIGTYPE (*prev_sigint) ();
+  int ret;
+
+  if (remote_debug)
+    printf_filtered ("ubicom32v3_wait\n");
+
+  status->kind = TARGET_WAITKIND_EXITED;
+  status->value.integer = 0;
+
+  if(remote_ubicom32v3_state == UBICOM32V3_STEPPING_PROBLEMS)
+    {
+      /* single stepping was attempted on a suspended thread */
+      status->kind = TARGET_WAITKIND_STOPPED;
+      status->value.sig = TARGET_SIGNAL_STOP;
+      remote_ubicom32v3_state = UBICOM32V3_STOPPED;
+      ubicom32v3_read_dcache_status();
+      return pid_to_ptid (ubicom32v3_current_thread);
+    }
+  else if((remote_ubicom32v3_state == UBICOM32V3_STOPPED) || (remote_ubicom32v3_state == UBICOM32V3_CORE_STOPPED))
+    {
+      /* Things are already stopped */
+      status->kind = TARGET_WAITKIND_STOPPED;
+      status->value.sig = TARGET_SIGNAL_TRAP;
+      if (remote_ubicom32v3_state != UBICOM32V3_CORE_STOPPED)
+	ubicom32v3_read_dcache_status();
+      return pid_to_ptid (ubicom32v3_current_thread);
+    }
+
+  ubicom32v3_cntrl_c_abort = 0;
+  prev_sigint = signal (SIGINT, ubicom32v3_cntrl_c);
+  while (1)
+    {
+      if (ubicom32v3_cntrl_c_abort)
+	{
+	  /*
+	   * control c turnOffconsole in ubicom32v3_wait()
+	   */
+	  int ret2 = turnOffconsole();
+
+	  ret = ubicom32v3stopProcessor();
+	  if(ret)
+	    {
+	      printf_unfiltered("error: Could not stop the processor\n");
+	      signal (SIGINT, prev_sigint);
+	      return null_ptid;
+	    }
+
+	  reason.reason = BREAKPOINT_HIT;
+	  break;
+	}
+      else
+	{
+	  if (ignore_trap)
+	    {
+	      /*
+	       * waitForBPnoTrap turnOffconsole in ubicom32v3_wait()
+	       */
+	      int ret2 = turnOffconsole();
+
+	      /* call waitForBPNoTrap and see if we get anything */
+	      ret = ubicom32v3waitForBPNoTrap(&reason);
+	    }
+	  else
+	    {
+	      /*
+	       * waitForBP turnOffconsole in ubicom32v3_wait()
+	       */
+	      int ret2 = turnOffconsole();
+
+	      /* call waitForBP and see if we get anything */
+	      ret = ubicom32v3waitForBP(&reason);
+	    }
+
+	  if(ret< 0)
+	    {
+	      printf_unfiltered ("error: unable to read status\n");
+	      signal (SIGINT, prev_sigint);
+	      return null_ptid;
+	    }
+	  if(ret == 0)
+	    {
+
+	      /*
+	       * not any BP hit turnOnconsole in ubicom32v3_wait()
+	       */
+	      int ret2 = turnOnconsole();
+
+
+	      /* wait for 10 ms before trying again */
+	      usleep(10000);
+	      continue;
+	    }
+
+	  break;
+	}
+    }
+
+  /* go retrieve the registers for a TPacket */
+  ret = ubicom32v3createTpacketMP(ubicom32v3_current_thread-1);
+  if(ret)
+    {
+      printf_unfiltered("error: Could not retrieve registers after stopping the processor\n");
+      signal (SIGINT, prev_sigint);
+      return null_ptid;
+    }
+
+  /* Supply the tpacket registers. */
+  current_cpu->supply_tpacket_regs_fn(current_cpu, ubicom32v3_current_thread-1);
+
+  /* XXXXXXXXXxx Rewrite */
+  switch(reason.reason)
+    {
+    case TRAP:
+      {
+	printf_unfiltered("TRAP in thread %d status 0x%x\n", ubicom32v3currentThread, reason.status);
+
+	if (reason.status & (1 << 0)) {
+	  printf_unfiltered("TRAP cause: Instruction address decode error.\n");
+	}
+	else if (reason.status & (1 << 1)) {
+	  printf_unfiltered("TRAP cause: Instruction synchronous error.\n");
+	}
+	else if (reason.status & (1 << 2)) {
+	  printf_unfiltered("TRAP cause: Illegal instruction.\n");
+	}
+	else if (reason.status & (1 << 3)) {
+	  printf_unfiltered("TRAP cause: Source 1 address decode error.\n");
+	}
+	else if (reason.status & (1 << 4)) {
+	  printf_unfiltered("TRAP cause: Destination address decode error.\n");
+	}
+	else if (reason.status & (1 << 5)) {
+	  printf_unfiltered("TRAP cause: Source 1 operand alignment error.\n");
+	}
+	else if (reason.status & (1 << 6)) {
+	  printf_unfiltered("TRAP cause: Destination oprand alignment error.\n");
+	}
+	else if (reason.status & (1 << 7)) {
+	  printf_unfiltered("TRAP cause: Source 1 synchronous error.\n");
+	}
+	else if (reason.status & (1 << 8)) {
+	  printf_unfiltered("TRAP cause: Destination synchrouous error.\n");
+	}
+	else if (reason.status & (1 << 9)) {
+	  printf_unfiltered("TRAP cause: Data Capture.\n");
+	}
+	else if (reason.status & (1 << 10)) {
+	  printf_unfiltered("TRAP cause: Instruction fetch memory protection error.\n");
+	}
+	else if (reason.status & (1 << 11)) {
+	  printf_unfiltered("TRAP cause: Source 1 memory protection error.\n");
+	}
+	else if (reason.status & (1 << 12)) {
+	  printf_unfiltered("TRAP cause: Destination memory protection error.\n");
+	}
+	status->kind = TARGET_WAITKIND_STOPPED;
+	status->value.sig = TARGET_SIGNAL_STOP;
+	remote_ubicom32v3_state = UBICOM32V3_TRAP_ERROR;
+
+	break;
+      }
+    case HALT:
+      {
+	if (reason.status & (1 << 2)) {
+	  printf_unfiltered("HALT cause: Watchdog timer reset.\n");
+	}
+	if (reason.status & (1 << 4)) {
+	  printf_unfiltered("HALT cause: Software reset.\n");
+	}
+	if (reason.status & (1 << 5)) {
+	  printf_unfiltered("HALT cause: Instruction port async error.\n");
+	}
+	if (reason.status & (1 << 6)) {
+	  printf_unfiltered("HALT cause: Data port asnyc error.\n");
+	}
+	if (reason.status & (1 << 7)) {
+	  printf_unfiltered("HALT cause: Instruction address decode error.\n");
+	}
+	if (reason.status & (1 << 8)) {
+	  printf_unfiltered("HALT cause: Instruction synchronous error.\n");
+	}
+	if (reason.status & (1 << 9)) {
+	  printf_unfiltered("HALT cause: Illegal instruction.\n");
+	}
+	if (reason.status & (1 << 10)) {
+	  printf_unfiltered("HALT cause: Soruce 1 address decode error.\n");
+	}
+	if (reason.status & (1 << 11)) {
+	  printf_unfiltered("HALT cause: Destination address decode error.\n");
+	}
+	if (reason.status & (1 << 12)) {
+	  printf_unfiltered("HALT cause: Source 1 operand alignment error.\n");
+	}
+	if (reason.status & (1 << 13)) {
+	  printf_unfiltered("HALT cause: Destination oprand alignment error.\n");
+	}
+	if (reason.status & (1 << 14)) {
+	  printf_unfiltered("HALT cause: Source 1 synchronous error.\n");
+	}
+	if (reason.status & (1 << 15)) {
+	  printf_unfiltered("HALT cause: Destination synchrouous error.\n");
+	}
+	if (reason.status & (1 << 16)) {
+	  printf_unfiltered("HALT cause: Write address watchpoint.\n");
+	}
+	if (reason.status & (1 << 17)) {
+	  printf_unfiltered("HALT cause: Source 1 memory protection error.\n");
+	}
+	if (reason.status & (1 << 18)) {
+	  printf_unfiltered("TRAP cause: Destination memory protection error.\n");
+	}
+	status->kind = TARGET_WAITKIND_STOPPED;
+	status->value.sig = TARGET_SIGNAL_STOP;
+	remote_ubicom32v3_state = UBICOM32V3_TRAP_ERROR;
+
+	break;
+      }
+
+    default:
+      status->kind = TARGET_WAITKIND_STOPPED;
+      status->value.sig = TARGET_SIGNAL_TRAP;
+      remote_ubicom32v3_state = UBICOM32V3_STOPPED;
+    }
+  signal (SIGINT, prev_sigint);
+
+  ubicom32v3_read_dcache_status();
+
+  return pid_to_ptid (ubicom32v3_current_thread);
+}
+
+/* Resume execution of the target process.  STEP says whether to single-step
+   or to run free; SIGGNAL is the signal value (e.g. SIGINT) to be given
+   to the target, or zero for no signal.  */
+static void
+ubicom32v3_resume (ptid_t ptid, int step, enum target_signal siggnal)
+{
+  int thread_num = ptid_get_pid (inferior_ptid);
+  int mask, i;
+  CORE_ADDR pc;
+  extern unsigned int  mt_active, mt_en;
+
+  ubicom32v3_set_thread(thread_num);
+  thread_num--;
+  mask = 1<< ubicom32v3currentThread;
+
+  if (remote_debug)
+    printf_filtered ("ubicom32v3_resume\n");
+
+  pc = read_pc();
+
+  dcache_status = 0;
+
+ //inferior_ptid = ptid;
+
+  if (step)
+    {
+      int ret;
+      thread_num = PIDGET (inferior_ptid);
+
+      ubicom32v3_set_thread(thread_num);
+
+      /* we are single stepping the main processor */
+      if(!(mt_en & mask))
+	{
+	  // Tryingn to single step a Disabled thread
+	  printf_unfiltered("error: Single Stepping a Disabled thread.\n");
+	  remote_ubicom32v3_state = UBICOM32V3_STEPPING_PROBLEMS;
+	}
+      else if (!(mt_active & mask))
+	{
+	  printf_unfiltered("error: Single Stepping a Suspended thread.\n");
+	  remote_ubicom32v3_state = UBICOM32V3_STEPPING_PROBLEMS;
+	}
+      if(remote_ubicom32v3_state == UBICOM32V3_STEPPING_PROBLEMS)
+	return;
+
+      ret = ubicom32v3singleStep(ubicom32v3currentThread);
+
+      if(remote_ubicom32v3_state == UBICOM32V3_STOPPED)
+	remote_ubicom32v3_state = UBICOM32V3_STEPPING;
+    }
+  else
+    {
+      /* let everything run */
+      int ret;
+      ret= ubicom32v3restartProcessor(1);
+
+      /*
+       * after resume command to run or continue call turnOnconsole in ubicom32v3_resume()
+       */
+      ret = turnOnconsole();
+
+      remote_ubicom32v3_state = UBICOM32V3_RUNNING;
+    }
+}
+
+static int
+ubicom32v3_write_bytes (CORE_ADDR address, char *buffer, int length)
+{
+  // split the transfer into lead, aligned middle and end
+  unsigned truncBytes = (address & 0x3);
+  unsigned truncAddress = address & ~0x3;
+  unsigned int leadBytes, leadAddr, midBytes, midAddr, endBytes, endAddr, leadIndex;
+  unsigned toWriteWords;
+  unsigned char  *sendBuffer;
+  unsigned char *freeBuffer;
+  unsigned char *cptr;
+  int i, j, ret;
+
+  leadBytes =0;
+  leadIndex = 0;
+  if(truncBytes)
+    {
+      leadBytes = 4-truncBytes;
+      if(leadBytes > length)
+	leadBytes = length;
+      leadIndex = 3-truncBytes;
+      length -= leadBytes;
+      address = truncAddress + 4;
+    }
+
+  leadAddr = truncAddress;
+
+  endAddr = address + length;
+  endBytes = endAddr & 0x3;
+  endAddr &= ~0x3;
+
+  midBytes = length - endBytes;
+  midAddr = address;
+
+  toWriteWords = midBytes/4;
+
+  if(leadBytes)
+    toWriteWords++;
+
+  if(endBytes)
+    toWriteWords++;
+
+  /* Allocate the send buffer */
+  sendBuffer = (unsigned char *)malloc(toWriteWords*4);
+  freeBuffer = sendBuffer;
+  cptr = sendBuffer;
+
+  if(leadBytes)
+    {
+      // Misaligned start. Deal with it by first backing up the address to nearest
+      // Go read 4 bytes from the backed up address
+      ret = ubicom32v3readMemory(leadAddr, 1, (int *)cptr);
+
+      for(i=0; i<leadBytes; i++)
+	{
+	  cptr[leadIndex--] = (unsigned char) *buffer++;
+	}
+
+      // Bump up cptr by 4
+      cptr += 4;
+    }
+
+  // Deal with the midsection if any
+  if(midBytes)
+    {
+      // Move the data into the transfer buffer
+      for(i=0; i< midBytes; i+= 4)
+	{
+	  for(j=0; j< 4; j++)
+	    {
+	      cptr[3-j] = (*buffer++ &0xff);
+	    }
+	  cptr+= 4;
+	}
+    }
+
+  if(endBytes)
+    {
+      // trailing cruft to deal with
+      // Go read 4 bytes from the backed up end address
+      ret = ubicom32v3readMemory(endAddr, 1, (int *)cptr);
+
+      for(i=0; i< endBytes; i++)
+	{
+	  cptr[3-i] = (unsigned char) *buffer++;
+	}
+    }
+
+  // Send the data to target
+  ret = ubicom32v3writeMemory(leadAddr, toWriteWords, (int *)sendBuffer);
+  //ret = ubicom32v3cacheflushinvalidate(leadAddr, toWriteWords*4);
+
+  free (freeBuffer);
+  return (leadBytes + midBytes + endBytes);
+}
+
+static int
+ubicom32v3_read_bytes (CORE_ADDR address, char *buffer, int length)
+{
+  // split the transfer into lead, aligned middle and end
+  unsigned truncBytes = (address & 0x3);
+  unsigned truncAddress = address & ~0x3;
+  unsigned int leadBytes, leadAddr, midBytes, midAddr, endBytes, endAddr, leadIndex;
+  unsigned toReadWords;
+  unsigned char  *recvBuffer;
+  unsigned char *freeBuffer;
+  unsigned char *cptr;
+  int i, j, ret;
+
+  leadIndex = 0;
+  if(truncBytes)
+    {
+      leadBytes = 4-truncBytes;
+      if(leadBytes > length)
+	leadBytes = length;
+      leadIndex = 3-truncBytes;
+      length -= leadBytes;
+      address = truncAddress + 4;
+    }
+  else
+    leadBytes =0;
+
+  leadAddr = truncAddress;
+
+  endAddr = address + length;
+  endBytes = endAddr & 0x3;
+  endAddr &= ~0x3;
+
+  midBytes = length - endBytes;
+  midAddr = address;
+
+  toReadWords = midBytes/4;
+
+  if(leadBytes)
+    toReadWords++;
+
+  if(endBytes)
+    toReadWords++;
+
+  /* Allocate the recv buffer */
+  recvBuffer = (unsigned char *)malloc(toReadWords*4);
+  freeBuffer = recvBuffer;
+  cptr = recvBuffer;
+
+  ret = ubicom32v3readMemory(leadAddr, toReadWords, (int *)recvBuffer);
+
+  // Now Swizzle the data out
+  if(leadBytes)
+    {
+      for(i= 0;i< leadBytes; i++)
+	{
+	  *buffer++ = recvBuffer[leadIndex--];
+	}
+      recvBuffer += 4;
+    }
+
+  if(midBytes)
+    {
+      for(i=0; i< midBytes; i+= 4)
+	{
+	  for(j=0; j< 4; j++)
+	    {
+	      *buffer++ = recvBuffer[3-j];
+	    }
+	  recvBuffer += 4;
+	}
+    }
+
+  if(endBytes)
+    {
+      for(i=0; i< endBytes; i++)
+	{
+	  *buffer ++ = recvBuffer[3-i];
+	}
+    }
+  recvBuffer += 4;
+  free (freeBuffer);
+
+  return (leadBytes + midBytes + endBytes);
+}
+
+#define OCP_BASE	0x01000000
+#define OCP_DCCSTR	0x60C	/* D-Cache Control Statu Register */
+
+static void
+ubicom32v3_read_dcache_status(void)
+{
+  CORE_ADDR address = (OCP_BASE + OCP_DCCSTR);
+  char *dptr , temp[4];
+  (void) ubicom32v3_read_bytes(address, (char *)temp, sizeof(dcache_status));
+
+  /* need to swizzle to look correct on a little endian machine. */
+  dptr = (char *)&dcache_status;
+  *dptr++ = temp[3];
+  *dptr++ = temp[2];
+  *dptr++ = temp[1];
+  *dptr++ = temp[0];
+}
+
+
+#if 0
+static char *copyvbuf = NULL;
+static int
+ubicom32v3_slow_verify_bytes (CORE_ADDR address, char *buffer, int length)
+{
+  // split the transfer into lead, aligned middle and end
+  unsigned truncBytes = (address & 0x3);
+  unsigned truncAddress = address & ~0x3;
+  unsigned int leadBytes, leadAddr, midBytes, midAddr, endBytes, endAddr, leadIndex;
+  unsigned toVerifyWords;
+  unsigned char cptr[4];
+  int i, j, ret;
+
+  if(copyvbuf == NULL)
+    copyvbuf = malloc(UBICOM32V3_LOAD_BLOCK_SIZE);
+
+  leadBytes =0;
+  leadIndex = 0;
+  if(truncBytes)
+    {
+      leadBytes = 4-truncBytes;
+      if(leadBytes > length)
+	leadBytes = length;
+      leadIndex = 3-truncBytes;
+      length -= leadBytes;
+      address = truncAddress + 4;
+    }
+
+  leadAddr = truncAddress;
+
+  endAddr = address + length;
+  endBytes = endAddr & 0x3;
+  endAddr &= ~0x3;
+
+  midBytes = length - endBytes;
+  midAddr = address;
+
+  toVerifyWords = midBytes/4;
+
+  /* Allocate the send buffer */
+  if(leadBytes)
+    {
+      // Misaligned start. Deal with it by first backing up the address to nearest
+      // Go read 4 bytes from the backed up address
+      switch (leadAddr >> 28)
+	{
+	  case 0x2:
+	    // a pram section read
+	    ret = readPgmMemory(leadAddr, 1, (int *)cptr);
+	    break;
+	  default:
+	    printf_unfiltered("unknown address: 0x%08x\n", leadAddr);
+	}
+
+      for(i=0; i<leadBytes; i++)
+	{
+	  if (cptr[leadIndex--] != (unsigned char) *buffer++)
+	    return -1;
+	}
+    }
+
+  // Deal with the midsection if any
+  if(midBytes)
+    {
+      int ret, i;
+      char *vbuf = copyvbuf;
+      //ret = ubicom32v3_fast_read_bytes(midAddr,  (char *)vbuf, toVerifyWords*4 );
+      ret = ubicom32v3UltraFastReadMemoryRaw(midAddr, toVerifyWords, (int *)vbuf);
+      if (memcmp (vbuf, buffer, toVerifyWords * 4) != 0)
+	{
+	  for(i=0; i< midBytes; i+=4, vbuf+=4, buffer+=4)
+	    {
+	      if(vbuf[0] != buffer[0] ||
+		 vbuf[1] != buffer[1] ||
+		 vbuf[2] != buffer[2] ||
+		 vbuf[3] != buffer[3])
+		{
+		  printf_unfiltered("Mismatch at 0x%x Expected 0x%02x %02x %02x %02x got 0x%02x %02x %02x %02x\n",
+				    (midAddr+i),(unsigned char ) buffer[0], (unsigned char ) buffer[1], (unsigned char ) buffer[2], (unsigned char ) buffer[3],
+				    (unsigned char ) vbuf[3], (unsigned char ) vbuf[2], (unsigned char ) vbuf[1], (unsigned char) vbuf[0]);
+		  return -1;
+		}
+	    }
+	}
+      else
+	{
+	  buffer += toVerifyWords*4;
+	}
+    }
+
+  if(endBytes)
+    {
+      // trailing cruft to deal with
+      // Go read 4 bytes from the backed up end address
+      ret = readPgmMemory(endAddr, 1, (int *)cptr);
+      for(i=0; i< endBytes; i++)
+	{
+	  if (cptr[3-i] != (unsigned char) *buffer++)
+	    return -1;
+	}
+    }
+
+  return (leadBytes + midBytes + endBytes);
+}
+#endif
+
+static addrBounds_t ubicom32v3bounds[]={
+   {0x800, 0xa00},		/* HRT tables */
+   {0x01000000, 0x01001000},	/* On chip peripherals */
+   {0x02000000, 0x02010000},	/* IO */
+   {0x3ffc0000, 0x48000000},	/* On chip Memory + DDR*/
+   {0x60000000, 0x61000000},	/* Flash */
+};
+
+static unsigned int ubicom32v3numBoundsEntries = sizeof(ubicom32v3bounds)/sizeof(addrBounds_t);
+
+/* ARGSUSED */
+static int
+ubicom32v3_xfer_memory (CORE_ADDR mem_addr, gdb_byte *buffer, int mem_len,
+		    int should_write, struct mem_attrib *attrib,
+		    struct target_ops *target)
+{
+  CORE_ADDR targ_addr;
+  int targ_len;
+  int res;
+
+  targ_addr = mem_addr;
+  targ_len = mem_len;
+
+  if (targ_len <= 0)
+    return 0;
+
+  // Check if we got a valid address
+  if(targ_addr >= ubicom32v3bounds[ubicom32v3numBoundsEntries-1].upper)
+    {
+      // address is too high
+      return 0;
+    }
+
+  for(res =0; res< ubicom32v3numBoundsEntries; res++)
+    {
+      if(should_write && res == (ubicom32v3numBoundsEntries-1))
+	{
+	  /* flash write attempt and that is a no no */
+	  printf("Flash write is not allowed.\n");
+	  return 0;
+	}
+
+      // test the very lowest address
+      if(targ_addr < ubicom32v3bounds[res].lower)
+	{
+	  // invalid address. The start is in the hole
+	  return (targ_addr - ubicom32v3bounds[res].lower);
+	}
+
+      // test if this is a valid address
+      if(targ_addr < ubicom32v3bounds[res].upper)
+	{
+	  // Valid range. Do an upper bound check and adjust length if needed
+	  if(targ_len+targ_addr > ubicom32v3bounds[res].upper)
+	    targ_len = ubicom32v3bounds[res].upper - targ_addr;
+
+	  break;
+	}
+    }
+
+  // I dcache_status indicates error then see if the address is a DDR/FLASH address
+  if(dcache_status & 0x1)
+    {
+      // dcache error. Disallow DDR/FLASH operations.
+      if (targ_addr >= 0x40000000 && targ_addr < 0x61000000)
+	{
+	  // Flash DDR range. Do no allow the transaction.
+	  printf_unfiltered("D-Cache in error state. DDR and Flash access is not allowed.\n");
+	  return -1;
+	}
+    }
+
+  if (should_write)
+    {
+      res = ubicom32v3_write_bytes (targ_addr, buffer, targ_len);
+    }
+  else
+    res = ubicom32v3_read_bytes (targ_addr, buffer, targ_len);
+
+  return res;
+}
+
+#ifdef DO_CORE_DUMPS
+/* ARGSUSED */
+static int
+ubicom32v3_core_xfer_memory (CORE_ADDR mem_addr, gdb_byte *buffer, int mem_len,
+		    int should_write, struct mem_attrib *attrib,
+		    struct target_ops *target)
+{
+  CORE_ADDR targ_addr;
+  int targ_len;
+  int res;
+  char *src = NULL;
+  CORE_ADDR index;
+  int switch_res;;
+
+  targ_addr = mem_addr;
+  targ_len = mem_len;
+
+  if (targ_len <= 0)
+    return 0;
+
+  if(should_write)
+    return 0;
+
+  // Check if we got a valid address
+  if(targ_addr >= ubicom32v3bounds[ubicom32v3numBoundsEntries-1].upper)
+    {
+      // address is too high
+      return 0;
+    }
+
+  for(res =0; res< ubicom32v3numBoundsEntries; res++)
+    {
+      // test the very lowest address
+      if(targ_addr < ubicom32v3bounds[res].lower)
+	{
+	  // invalid address. The start is in the hole
+	  return (targ_addr - ubicom32v3bounds[res].lower);
+	}
+
+      // test if this is a valid address
+      if(targ_addr < ubicom32v3bounds[res].upper)
+	{
+	  // Valid range. Do an upper bound check and adjust length if needed
+	  if(targ_len+targ_addr > ubicom32v3bounds[res].upper)
+	    targ_len = ubicom32v3bounds[res].upper - targ_addr;
+
+	  break;
+	}
+    }
+
+  src = NULL;
+  index = targ_addr - ubicom32v3bounds[res].lower;
+  switch_res = res;
+  res = targ_len;
+
+  switch(switch_res)
+    {
+    case 0:
+      {
+	/* hrts */
+	src = ubicom32v3_core.hrts;
+	break;
+      }
+    case 1:
+      {
+	/* read to the IO block. We can't do much about it */
+	printf_unfiltered("Core has no information on the On Chip Prepheral registers.\n");
+	memset(buffer, 0, targ_len);
+	src = NULL;
+	break;
+      }
+    case 2:
+      {
+	/* read to the IO block. We can't do much about it */
+	printf_unfiltered("Core has no information on IO block registers.\n");
+	memset(buffer, 0, targ_len);
+	src = NULL;
+	break;
+      }
+    case 3:
+      {
+	/* OCM + DDR Memory */
+	if(targ_addr < 0x40000000 )
+	  {
+	    src = ubicom32v3_core.ocm_mem;
+	  }
+	else
+	  {
+	    src = ubicom32v3_core.ddr_mem;
+	    index = targ_addr - 0x40000000;
+	  }
+	break;
+      }
+    case 4:
+      {
+	/* flash memory */
+	src = ubicom32v3_core.flash_mem;
+	break;
+      }
+    default:
+      {
+	printf_unfiltered("Incorrect address block 0x%lx\n", targ_addr);
+	res = 0;
+      }
+
+    }
+  if(src)
+    {
+      char *ptr = &src[index];
+      memcpy(buffer, ptr, targ_len);
+    }
+  return res;
+}
+#endif
+
+/* ubicom32v3_hw_mon */
+static void
+ubicom32v3_special_mon (char *args, int from_tty)
+{
+  unsigned int object_address, event_address, event_pattern, event_mask;
+  int scanf_ret, ret;
+  unsigned int resBuf[32];
+
+  static RETSIGTYPE (*prev_sigint) ();
+
+  /* scan the args for object, event, event_pat and event_mask */
+  scanf_ret = sscanf(args, "0x%x 0x%x 0x%x 0x%x", &object_address, &event_address, &event_pattern, &event_mask);
+
+  printf_unfiltered("object_addr =0x%x event_addr =0x%x event_pattern = 0x%x event_pattern = 0x%x\n",
+		    object_address, event_address, event_pattern, event_mask);
+
+  if(scanf_ret != 4)
+    {
+      printf("Usage: specialmon 0xobject_address 0xevent_address 0xevent_pattern 0xevent_mask\n");
+      return;
+    }
+
+  /* set up the hardware monitor and get it cranking */
+  ret = ubicom32v3hw_monitor_setup(object_address, 1, event_address, event_pattern, event_mask, 32);
+
+  if(ret == -4)
+    {
+      error("No existing connection.\n Issue command: ubicom32v3hwmon hostname:PORT#\n");
+    }
+
+  /* time to monitor the status */
+  ubicom32v3_cntrl_c_abort = 0;
+  prev_sigint = signal (SIGINT, ubicom32v3_cntrl_c);
+  while (1)
+    {
+      unsigned int status;
+      if (ubicom32v3_cntrl_c_abort)
+	{
+	  printf_unfiltered("Aborting monitoring\n");
+	  signal (SIGINT, prev_sigint);
+	  return;
+	}
+
+      ret = ubicom32v3isp_hw_monitor_status(&status, resBuf, 32);
+      if(ret) {
+	error("Monitor status command bombed\n");
+      }
+
+      if(status == 1)
+	break;
+    }
+
+  /* I you got here monitor has triggered */
+  for(ret =0; ret< 32; ret++)
+    {
+      printf("0x%08x\n", resBuf[ret]);
+    }
+}
+
+static void
+ubicom32v3_cache_flush (char *args, int from_tty)
+{
+  int scanf_ret;
+  unsigned int address;
+
+  scanf_ret = 0;
+
+  if(args)
+    {
+      scanf_ret = sscanf(args, "0x%x", &address);
+    }
+
+  if(scanf_ret == 0)
+    {
+      printf("Usage cacheflush 0xaddress\n");
+      return;
+    }
+
+  scanf_ret = ubicom32v3cacheinvalidate(address, 4);
+}
+
+static void
+ubicom32v3_bist_test (char *args, int from_tty)
+{
+  int ret;
+  if (!args)
+    args = "localhost:5010";
+
+  /* Connect to dongle.  */
+  ret = ubicom32v3isp_connect (args);
+
+  if(ret == -1)
+    error ("Unable to find dongle.");
+  else if(ret == -2)
+    error ("Dongle has no Ubicom32v3 support. Get a new dongle with Ubicom32v3 support and try again.");
+
+
+  /* Attach to target.  */
+  ret = ubicom32v3isp_attach ();
+
+  ret = ubicom32v3isp_bist();
+}
+
+static void
+ubicom32v3_previous_pc (char *args, int from_tty)
+{
+  int thread_num = ubicom32v3currentThread;
+  extern int chipID;
+  switch (chipID)
+    {
+    case 0x20000:
+    case 0x20001:
+    case 0x20002:
+      ubicom32v3Registers.tRegs[thread_num].threadPc = ubicom32v3Registers.tRegs[thread_num].previous_pc;
+      break;
+    case 0x30000:
+    case 0x30001:
+      ubicom32v4Registers.tRegs[thread_num].threadPc = ubicom32v4Registers.tRegs[thread_num].previous_pc;
+      break;
+    }
+
+  remote_ubicom32v3_state = UBICOM32V3_CORE_STOPPED;
+  inferior_ptid = pid_to_ptid (ubicom32v3_current_thread);
+  start_remote(from_tty);
+
+  /*
+  ubicom32v3_fetch_register(get_current_regcache(), 0);
+  select_frame(get_current_frame());
+  */
+}
+
+static void
+ubicom32v3_ddr_test (char *args, int from_tty)
+{
+  /* malloc a Meg of data and fill it with random numbers. */
+  int *sptr = (int *)malloc(0x100000);
+
+  int i, ret;
+  struct timeval begin, end;
+  double time;
+  char *cptr1, *cptr2;
+
+  /* malloc a Meg of data for verification.. */
+    int *dptr = (int *)malloc(0x100000);
+
+  srandom (getpid());
+
+  for(i=0; i< 0x100000/4; i++)
+    {
+      sptr[i] = random();
+    }
+
+
+  /* set up the fast downloader */
+  ret = ubicom32v3isp_download_fast_transfer_code(UBICOM32V3_OCM_ADDR);
+  if (ret)
+    {
+      printf_unfiltered("Failed downloading fast transfer code.\n");
+      return;
+    }
+
+  /* load the begin time structure */
+  (void) gettimeofday(&begin, NULL);
+
+  /* write 10 Megs */
+  for(i=0; i< 10; i++)
+    {
+      int ret = ubicom32v3UltrafastWriteMemory(0x40000000, 0x100000/4, (int *)sptr);
+      if (ret) {
+	printf_unfiltered("Fast Write bombed\n");
+      }
+    }
+  /* load the end time structure */
+  (void) gettimeofday(&end, NULL);
+
+  /* calculate elapsed time */
+  time = ((double)end.tv_sec + (double)end.tv_usec/1000000.0) - ((double)begin.tv_sec + (double)begin.tv_usec/1000000.0);
+
+  printf_unfiltered ("Elapsed time in sec for 10M DDr write = %.2lf\n", time);
+
+  for(i = 0; i< 0x100000/4; i++)
+    {
+      unsigned int send = sptr[i];
+      cptr1 = (char *)&sptr[i];
+      cptr2 = (char *) &send;
+
+      /* swizzle the data */
+      cptr1[0] = cptr2[3];
+      cptr1[1] = cptr2[2];
+      cptr1[2] = cptr2[1];
+      cptr1[3] = cptr2[0];
+    }
+
+  ret = ubicom32v3UltraFastReadMemoryRaw(0x40000000, 0x100000/4, (int *)dptr);
+  if (memcmp (sptr, dptr, 0x100000) != 0)
+    {
+      printf_unfiltered("Data mismatch\n");
+    }
+  else
+    {
+      printf_unfiltered("Success\n");
+    }
+}
+
+static void
+ubicom32v3_pll_test (char *args, int from_tty)
+{
+  int ret;
+  if (!args)
+    args = "localhost:5010";
+
+  /* Connect to dongle.  */
+  ret = ubicom32v3isp_connect (args);
+
+  if(ret == -1)
+    error ("Unable to find dongle.");
+  else if(ret == -2)
+    error ("Dongle has no Ubicom32v3 support. Get a new dongle with Ubicom32v3 support and try again.");
+
+
+  /* Attach to target.  */
+  ret = ubicom32v3isp_attach ();
+  ret = ubicom32v3isp_reset();
+  ret = ubicom32v3isp_pll_init();
+}
+
+/* ubicom32v3_show_load_progress_default.  */
+static void
+ubicom32v3_show_load_progress_default (const char *section,
+			    unsigned int section_sent,
+			    unsigned int section_size,
+			    unsigned int total_sent,
+			    unsigned int total_size)
+{
+  static int progress;
+  int current;
+
+  if (total_sent == 0)
+    progress = 0;
+
+  current = (int)((float)total_sent / (float)total_size * (float)80);
+  while (progress < current)
+    {
+      putchar_unfiltered ('.');
+      gdb_flush (gdb_stdout);
+      progress ++;
+    }
+
+  if (total_sent == total_size)
+    {
+      putchar_unfiltered ('\n');
+      gdb_flush (gdb_stdout);
+    }
+}
+
+/*
+ * ubicom32v3_cache_dump()
+ *   This routine will dump the cache and store it in a file called Ubicom.cache.
+ *    XXXX We will need a way to to be able to find out which version of the chip we
+ *    are dumping the cache for. I suppose CHIP_ID could be used to figure that out.
+ *    For the time being we will dump 256 Tag lines and 8192 bytes for dcache.
+ *    We will dump 512 Tag lines and 16384 bytes of icache.
+ */
+
+void
+ubicom32v3_cache_dump()
+{
+  extern int chipID;
+  struct ubicom32v3_cache_dump_header cache_header;
+  FILE *fp;
+  char filename[] = "Ubicom.cache";
+  unsigned char *buffer;
+  int ret;
+  extern int ubicom32v3readcachetags(unsigned int startAddr, unsigned int numcachelines, unsigned int cache, unsigned char *buffer);
+  extern int ubicom32v3readcachedata(unsigned int startAddr, unsigned int numdata, unsigned int cache, unsigned char *buffer);
+
+  switch (chipID)
+    {
+    case 0x20000:
+    case 0x20001:
+    case 0x20002:
+      {
+	/* Set up the header of a Ubicom32v3 with 8k Dcache and 16k Icache. */
+	cache_header.dcache_tag_entries = 256;
+	cache_header.dcache_data_bytes  = 256*32;
+	cache_header.icache_tag_entries = 512;
+	cache_header.icache_data_bytes  = 512*32;
+
+	/* Allocate the buffer through which we will stage the data. */
+	buffer = malloc(512*32);
+	if (buffer == NULL)
+	  {
+	    printf_unfiltered("Unable to allocate buffer for staging data. Cache not dumped.\n");
+	    return;
+	  }
+      }
+      break;
+    case 0x30000:
+    case 0x30001:
+      {
+	/* Set up the header of a IP&k with 16k Dcache and 16k Icache. */
+	cache_header.dcache_tag_entries = 512;
+	cache_header.dcache_data_bytes  = 512*32;
+	cache_header.icache_tag_entries = 512;
+	cache_header.icache_data_bytes  = 512*32;
+
+	/* Allocate the buffer through which we will stage the data. */
+	buffer = malloc(512*32);
+	if (buffer == NULL)
+	  {
+	    printf_unfiltered("Unable to allocate buffer for staging data. Cache not dumped.\n");
+	    return;
+	  }
+      }
+      break;
+    default:
+      {
+	printf_unfiltered ("Unknown Processor. No cache dumped.");
+	return;
+      }
+    }
+
+  /* Open a Ubicom.cache to save the cache data. */
+  fp = fopen(filename, "wb+");
+
+  if (fp == NULL)
+    {
+      printf_unfiltered("Unable to open %s. Cache not dumped.\n", filename);
+      free(buffer);
+      return;
+    }
+
+    /* Write the header out to the file. */
+    fwrite(&cache_header, 1, sizeof(cache_header), fp);
+
+    /* Dump dcache tags. */
+    ret = ubicom32v3readcachetags(0, cache_header.dcache_tag_entries, 0, buffer);
+    if (ret)
+      {
+	/* Extraction bombed. */
+	printf_unfiltered("Dcache TAG dump bombed.\n");
+	fclose(fp);
+	free(buffer);
+	return;
+      }
+
+    /* write out the TAG data to file. */
+    fwrite(buffer, 1, cache_header.dcache_tag_entries*4, fp);
+
+    /* Dump dcache data. */
+    ret = ubicom32v3readcachedata(0, cache_header.dcache_data_bytes, 0, buffer);
+    if (ret)
+      {
+	/* Extraction bombed. */
+	printf_unfiltered("Dcache DATA dump bombed.\n");
+	free(buffer);
+	fclose(fp);
+	return;
+      }
+
+    /* write out the data to file. */
+    fwrite(buffer, 1, cache_header.dcache_data_bytes, fp);
+
+    /* Dump icache tags. */
+    ret = ubicom32v3readcachetags(0, cache_header.icache_tag_entries, 1, buffer);
+    if (ret)
+      {
+	/* Extraction bombed. */
+	printf_unfiltered("Icache TAG dump bombed.\n");
+	free(buffer);
+	fclose(fp);
+	return;
+      }
+
+    /* write out the TAG data to file. */
+    fwrite(buffer, 1, cache_header.icache_tag_entries*4, fp);
+
+    /* Dump icache data. */
+    ret = ubicom32v3readcachedata(0, cache_header.icache_data_bytes, 1, buffer);
+    if (ret)
+      {
+	/* Extraction bombed. */
+	printf_unfiltered("Icache DATA dump bombed.\n");
+	free(buffer);
+	fclose(fp);
+	return;
+      }
+
+    /* write out the data to file. */
+    fwrite(buffer, 1, cache_header.icache_data_bytes, fp);
+
+    /* Close the file. */
+    fclose(fp);
+    free(buffer);
+}
+
+/* ubicom32v3_core_dump */
+void
+ubicom32v3_core_dump (char *args, int from_tty)
+{
+  char default_name[]="Ubicom.core";
+  int default_sdram_size = 2*1024*1024;
+  int sdsize, ret;
+  struct ubicom32v3_core_header coreHeader;
+  char *filename;
+  CORE_ADDR begin, end;
+  unsigned int mem_size;
+  FILE *fp;
+  int i;
+  char *buffer;
+  unsigned int progress, total_size;
+  int save_ubicom32v3_current_thread= ubicom32v3_current_thread;
+  int save_ubicom32v3currentThread= ubicom32v3currentThread;
+  CORE_ADDR begin_sdram, end_sdram;
+  const size_t buffer_size = 1024 * 1024;
+
+  /*
+   * Turn off the 2 wire interface if possible.
+   */
+  ret = turnOff2wire();
+
+  /*
+   * Dump the cache before you do anything.
+   */
+  printf_unfiltered("Dumping Caches\n");
+  ubicom32v3_cache_dump();
+
+  filename = default_name;
+
+  fp = fopen(filename, "wb+");
+
+  if(fp == NULL)
+    {
+      printf_filtered("ubicom32v3_core_dump: Cannot open %s\n", filename);
+      return;
+    }
+
+  /* We managed to open the file */
+  /* Update the register info for all the threads */
+  for(i=0; i< current_cpu->num_threads; i++)
+    {
+      ubicom32v3_set_thread(i+1);
+      (void) current_cpu->fetch_registers_fn(current_cpu, i);
+    }
+
+  ubicom32v3_set_thread(save_ubicom32v3_current_thread);
+
+  /* malloc a 1 Meg buffer to move the data through */
+  buffer = malloc(buffer_size);
+
+  if(buffer == NULL)
+    {
+      printf_unfiltered("ubicom32v3_core_dump: Failed to malloc transfer buffer\n");
+      return;
+    }
+
+  /* load Ubicom Core Magic into the header */
+  coreHeader.magic = current_cpu->core_magic;
+
+  /* Set file position to end of header */
+  (void) fseek(fp, sizeof(coreHeader), SEEK_SET);
+
+  /* write out debugger thread number */
+  (void) fwrite(&ubicom32v3currentThread, 1, 4, fp);
+
+  /* load the register offset into the coreHeader */
+  coreHeader.regOffset = ftell(fp);
+
+  /* write out register area size */
+  mem_size = current_cpu->reg_area_size;
+  (void) fwrite(&mem_size, 1, 4, fp);
+
+  /* write out the register data */
+  (void) fwrite(current_cpu->registers, 1, current_cpu->reg_area_size, fp);
+
+  /* load hrt offset into coreHeader */
+  coreHeader.hrtOffset = ftell(fp);
+
+  /* set up the fast downloader */
+  ret = ubicom32v3isp_download_fast_transfer_code(UBICOM32V3_OCM_ADDR);
+
+  /* read and write the hrt block */
+  (void) ubicom32v3_read_bytes(0x800, buffer, 512);
+  (void) fwrite(buffer, 1, 512, fp);
+
+  /* load ocm offset into coreHeader */
+  coreHeader.ocmOffset = ftell(fp);
+
+  begin = UBICOM32V3_OCM_ADDR;
+  end = UBICOM32V3_DDR_ADDR;
+
+  /* write out the data memory size */
+  mem_size = end - begin;
+  (void) fwrite(&mem_size, 1, 4, fp);
+
+  printf_unfiltered("Dumping %dk OCM 0x%x-0x%x\n", mem_size / 1024, (int) begin, (int) end);
+  /* now read and write out the ocm memory */
+  while(mem_size)
+    {
+      int length = buffer_size;
+
+      if(length > mem_size)
+	length = mem_size;
+
+      /* read in the data */
+      ret = ubicom32v3UltraFastReadMemoryRaw(begin, length / 4, (int *)buffer);
+
+      /* write out the data. */
+      (void) fwrite(buffer, 1, length, fp);
+
+      begin += length;
+      mem_size -= length;
+    }
+
+  /* load ddr offset into coreHeader */
+  coreHeader.ddrOffset = ftell(fp);
+
+  /* First see if there are explicit coredump limits */
+  begin_sdram = ubicom32v3_lookup_symbol("__sdram_coredump_begin");
+  end_sdram = ubicom32v3_lookup_symbol("__sdram_coredump_limit");
+  if (!begin_sdram || !end_sdram) {
+
+	  begin_sdram = ubicom32v3_lookup_symbol("__sdram_begin");
+	  end_sdram = ubicom32v3_lookup_symbol("__sdram_limit");
+	  if(begin_sdram == 0)
+		  printf("begin_sdram not found\n");
+
+	  if(end_sdram == 0)
+		  printf("end_sdram not found\n");
+  }
+
+  total_size = mem_size = (end_sdram - begin_sdram);
+  begin = begin_sdram;
+  /* write out the ddr memory size */
+  (void) fwrite(&mem_size, 1, 4, fp);
+
+
+  printf("Dumping %dk DDR 0x%x-0x%x. This takes time.\n", mem_size / 1024, (int)begin_sdram, (int)end_sdram);
+  /* now read and write out the DDR memory */
+  progress = 0;
+  ubicom32v3_show_load_progress_default(NULL, 0, 0, progress, total_size);
+
+  while(mem_size)
+    {
+      int length = buffer_size;
+
+      if(length > mem_size)
+	length = mem_size;
+
+      /* read in the data */
+      ret = ubicom32v3UltraFastReadMemoryRaw(begin, length/4, (int *)buffer);
+
+      /* write out the data. */
+      (void) fwrite(buffer, 1, length, fp);
+
+      begin += length;
+      mem_size -= length;
+      progress += length;
+      ubicom32v3_show_load_progress_default(NULL, 0, 0, progress, total_size);
+    }
+
+  /* read and write out the dynamic_non_volatile_section  */
+  begin = UBICOM32V3_FLASH_ADDR;
+  end = ubicom32v3_lookup_symbol("__filemedia_end_addr");
+  total_size = mem_size = end - begin;
+
+  printf_unfiltered("Dumping %dk FLASH 0x%x-0x%x\n", mem_size / 1024, (int)begin,(int)end);
+  progress = 0;
+  ubicom32v3_show_load_progress_default(NULL, 0, 0, progress, total_size);
+  /* load flash offset into coreHeader */
+  coreHeader.flashOffset = ftell(fp);
+
+  /* write out the data memory size */
+  (void) fwrite(&mem_size, 1, 4, fp);
+
+  /* now read and write out the data memory */
+  while(mem_size)
+    {
+      int length = buffer_size;
+
+      if(length > mem_size)
+	length = mem_size;
+
+      /* read in the data */
+      ret = ubicom32v3UltraFastReadMemoryRaw(begin, length/4, (int *)buffer);
+
+      /* write out the data. */
+      (void) fwrite(buffer, 1, length, fp);
+
+      begin += length;
+      mem_size -= length;
+      progress += length;
+      ubicom32v3_show_load_progress_default(NULL, 0, 0, progress, total_size);
+    }
+
+  /* rewind the file and write out the header into the file */
+  rewind(fp);
+
+  (void) fwrite(&coreHeader, 1, sizeof(coreHeader), fp);
+
+  /* close the file */
+  fclose(fp);
+
+  /* Turn on turbo 2 wire if possible. */
+  ret = turnOn2wire();
+
+  return;
+}
+
+/* ubicom32v3_reset.  */
+void
+ubicom32v3_reset (char *args, int from_tty)
+{
+  int ret;
+  bpReason_t reason;
+  int i;
+
+  dcache_status = 0;
+
+  if (remote_debug)
+    printf_filtered ("ubicom32v3_reset\n");
+
+  reinit_frame_cache();
+  registers_changed();
+  ret = ubicom32v3isp_reset();
+
+  /* restart the Cpu to get it to the ok_to_set_breakpoints label */
+  ret= ubicom32v3restartProcessor(1);
+  remote_ubicom32v3_state = UBICOM32V3_RUNNING;
+
+  for (i=0; i< 500; i++)
+    {
+      ret = ubicom32v3waitForBP(&reason);
+
+      if(ret< 0)
+	{
+	  printf_unfiltered ("error: unable to read status\n");
+	  break;
+	}
+
+      if(ret == 0)
+	{
+	  /* wait for 10 ms before trying again */
+	  usleep(10000);
+	  continue;
+	}
+      else
+	{
+	  break;
+	}
+    }
+
+  if((i == 500) || (ret < 0))
+    {
+      /* The processor is still running, we need to stop it. */
+      ret = ubicom32v3stopProcessor();
+    }
+
+  ubicom32v3_set_thread(1);
+  inferior_ptid = pid_to_ptid (1);
+  ubicom32v3_fetch_register(get_current_regcache(), 0);
+  select_frame(get_current_frame());
+  normal_stop();
+  ubicom32v3_read_dcache_status();
+}
+
+#ifdef DO_CORE_DUMPS
+/* ubicom32v3_core_kill.  */
+static void
+ubicom32v3_core_kill (void)
+{
+  if (remote_debug)
+      printf_filtered ("ubicom32v3_core_kill\n");
+
+  inferior_ptid = null_ptid;
+
+  /* Detach from target.  */
+  ubicom32v3_core_detach (NULL, 0);
+}
+#endif
+
+/* ubicom32v3_kill.  */
+static void
+ubicom32v3_kill (void)
+{
+  if (remote_debug)
+      printf_filtered ("ubicom32v3_kill\n");
+
+  inferior_ptid = null_ptid;
+
+  /* Detach from target.  */
+  ubicom32v3_detach (NULL, 0);
+}
+
+/* ubicom32v3_add_module_file.  */
+static void
+ubicom32v3_erase_flash (char *args, int from_tty)
+{
+  bfd *loadfile_bfd;
+  asection *s, *downloadersection;
+  char *arg;
+  char **argv;
+  struct cleanup *my_cleanups = make_cleanup (null_cleanup, NULL);
+  char *file, *data;
+  CORE_ADDR start_addr = 0;
+  CORE_ADDR end_addr = 0;
+  CORE_ADDR length = 0;
+  int total_length = 0;
+  int progress = 0;
+  int has_downloader = 0;
+  unsigned int reply;
+  CORE_ADDR ocm_begin;
+  int offs, argcnt, ret;
+
+  if (args == NULL)
+    error (_("Usage: erase-flash start_addr length\n"));
+
+  dont_repeat ();
+
+  argv = buildargv (args);
+  make_cleanup_freeargv (argv);
+
+  if (argv == NULL)
+    nomem (0);
+
+  /*
+   * Find how many arguments were passed to us.
+   */
+  for (arg = argv[0], argcnt = 0; arg != NULL; arg = argv[++argcnt])
+    {
+    }
+
+  if (argcnt != 2)
+    error ("Usage: erase-flash start_address length\n");
+
+  for (arg = argv[0], argcnt = 0; arg != NULL; arg = argv[++argcnt])
+    {
+      /* Process the argument. */
+      if (argcnt == 0)
+	{
+	  /* The first argument is the start address. */
+	  start_addr = parse_and_eval_address (arg);
+	}
+      else if (argcnt == 1)
+	{
+	  /* The second argument is length. */
+	  length = parse_and_eval_address (arg);
+	  end_addr = start_addr + length;
+	}
+    }
+
+  /*
+   * range check the start and end addresses.
+   */
+  if ((start_addr < UBICOM32V3_FLASH_ADDR) || (start_addr > UBICOM32V3_FLASH_END))
+    error("Start address 0x%lx is out of range\n", start_addr);
+
+  if ((end_addr < UBICOM32V3_FLASH_ADDR) || (end_addr > UBICOM32V3_FLASH_END))
+    error("Start address 0x%lx is out of range\n", end_addr);
+
+  file = get_exec_file(1);
+
+  if (remote_debug)
+    printf_filtered ("ubicom32v3_load: %s (tty=%d)\n", file, from_tty);
+
+  /* Open the file.  */
+  loadfile_bfd = bfd_openr (file, gnutarget);
+  if (loadfile_bfd == NULL)
+    error ("Error: Unable to open file %s\n", file);
+
+  if (!bfd_check_format (loadfile_bfd, bfd_object))
+    {
+      bfd_close (loadfile_bfd);
+      error ("Error: File is not an object file\n");
+    }
+
+  /*
+   * Scan through the sections looking for the .downloader section. We better find it
+   * because without it we are not going to be able to download any code to the board.
+   */
+  for (s = loadfile_bfd->sections; s; s = s->next)
+    {
+      if(strcmp(s->name, ".downloader"))
+	{
+	  continue;
+	}
+
+      has_downloader = 1;
+      break;
+    }
+
+  if(has_downloader == 0)
+    {
+      printf_unfiltered("%s has no \".downloader\" section. Unable to erase flash, no flash drivers.\n", file);
+      return;
+    }
+
+  downloadersection = s;
+  length = bfd_get_section_size (s);
+
+  /* Get the downloader section data. */
+  data = malloc(length+64);
+  if (!data)
+    {
+      printf_unfiltered ("error: unable to allocate memory for .downloader section data.\n");
+      return;
+    }
+
+  offs = 0;
+
+  /* read in the .downloader section data from the the file. */
+  bfd_get_section_contents (loadfile_bfd, s, data, offs, length);
+
+  /* xxxxxxxxxxxxxxxxxxxxxxxxxx call the backed init */
+  ocm_begin = ubicom32v3_lookup_symbol("__ocm_begin");
+  if (ocm_begin == 0)
+    {
+      printf_unfiltered("No __ocm_begin symbol. Unable to initialize Boot Kernel\n");
+      free(data);
+      ubicom32v3_reset(0,0);
+      return;
+    }
+
+  /*
+   * Turn off the 2 wire interface if possible.
+   */
+  ret = turnOff2wire();
+
+  ret = ubicom32v3isp_initBackendToBootKernel(length, (unsigned int*)data, ocm_begin);
+  if(ret)
+    {
+      /* Turn on turbo 2 wire if possible. */
+      ret = turnOn2wire();
+      printf_unfiltered("Unable to initialize Boot Kernel\n");
+      free(data);
+      ubicom32v3_reset(0,0);
+      return;
+    }
+
+  free(data);
+
+  end_addr -= start_addr;
+  printf("Begin Erase.\n 0x%lx length 0x%lx\n", start_addr, end_addr);
+
+  ret = eraseVerifyFlash(start_addr, end_addr, ubicom32_erase_progress_callback, NULL);
+
+  /* Turn on turbo 2 wire if possible. */
+  ret = turnOn2wire();
+  ubicom32v3_reset(0,0);
+
+  return;
+}
+
+/* ubicom32v3_add_module_file.  */
+static void
+ubicom32v3_add_module_file (char *args, int from_tty)
+{
+  bfd *loadfile_bfd;
+  asection *s;
+  char *arg;
+  char **argv;
+  struct cleanup *my_cleanups = make_cleanup (null_cleanup, NULL);
+  char *filename = NULL;
+  CORE_ADDR text_addr = 0;
+  CORE_ADDR ocm_text_addr = 0;
+  CORE_ADDR dyn_text_addr;
+  CORE_ADDR dyn_ocm_text_addr;
+  CORE_ADDR data_addr;
+  CORE_ADDR dyn_data_addr;
+  int num_text, num_ocm_text, num_data, section_index;
+  int do_ocm_text = 0;
+  int argcnt = 0;
+  struct section_addr_info *section_addrs;
+  //int flags = OBJF_USERLOADED;
+  int flags = OBJF_READNOW;
+  struct objfile *ofiles = object_files;
+  struct partial_symtab *psymtabs;
+
+  if (args == NULL)
+    error (_("add-module-file takes a file name and an address"));
+
+  dont_repeat ();
+
+  argv = buildargv (args);
+  make_cleanup_freeargv (argv);
+
+  if (argv == NULL)
+    nomem (0);
+
+  for (arg = argv[0], argcnt = 0; arg != NULL; arg = argv[++argcnt])
+    {
+      /* Process the argument. */
+      if (argcnt == 0)
+	{
+	  /* The first argument is the file name. */
+	  filename = tilde_expand (arg);
+	  make_cleanup (xfree, filename);
+	}
+      else
+	if (argcnt == 1)
+	  {
+	    /* The second argument is always the address of the text section. */
+	       text_addr = parse_and_eval_address (arg);
+	  }
+	else if (argcnt == 2)
+	  {
+
+	    if (strncmp(arg, "(nil)", strlen("(nil)")) == 0)
+	      continue;
+
+	    /* The third argument is always the address of the ocm_text_section */
+	    ocm_text_addr = parse_and_eval_address (arg);
+	    do_ocm_text = 1;
+	  }
+	else
+	  {
+	    error("Too many parameters\n.Usage: add-module-name text_address <ocm_text_address>\n");
+	    return;
+	  }
+    }
+
+  if(do_ocm_text)
+    printf_filtered("add-module-file \"%s\" text_address= 0x%lx ocm_text_address= 0x%lx\n", filename, (long)text_addr, (long)ocm_text_addr);
+  else
+    printf_filtered("add-module-file %s text_address= 0x%lx\n", filename, (long)text_addr);
+
+  /* Open the file. */
+  //loadfile_bfd = bfd_openr (filename, gnutarget);
+  loadfile_bfd = symfile_bfd_open (filename);
+  if (loadfile_bfd == NULL)
+    error ("Error: Unable to open file %s\n", filename);
+
+  /* Loop through all the sections and find the OCM sections and calculate how many text and ocmtext sections we have. */
+  dyn_text_addr = text_addr;
+  dyn_ocm_text_addr = ocm_text_addr;
+
+  num_text = num_ocm_text = num_data = 0;
+
+  for (s = loadfile_bfd->sections; s; s = s->next)
+    {
+      if (strncmp(s->name, ".text", strlen(".text")) == 0)
+	{
+	  /* .text section. */
+	  num_text ++;
+	  dyn_text_addr += bfd_get_section_size (s);
+	}
+
+      else if (strncmp(s->name, ".ocm_text", strlen(".ocm_text")) == 0)
+	{
+	  if (do_ocm_text == 0)
+	    {
+	      /* The file has ocm_text but no address has been provided. */
+	      error("File has ocm_text sections but no ocm base address has been provided.");
+	    }
+
+	  num_ocm_text ++;
+	  dyn_ocm_text_addr += bfd_get_section_size (s);
+	}
+      else if (strncmp(s->name, ".data", strlen(".data")) == 0)
+	{
+	  /* .data section. */
+	  num_data ++;
+	}
+    }
+
+  dyn_data_addr = dyn_text_addr;
+  dyn_text_addr = text_addr;
+  dyn_ocm_text_addr = ocm_text_addr;
+
+  /* Alocation the structure to hold the addresses. */
+  section_addrs = alloc_section_addr_info (num_text + num_ocm_text + num_data);
+  section_index = 0;
+
+  for (s = loadfile_bfd->sections; s; s = s->next)
+    {
+      if (strncmp(s->name, ".text", strlen(".text")) == 0)
+	{
+	  /* .text section. */
+	  section_addrs->other[section_index].name = strdup(s->name);
+	  make_cleanup(xfree, section_addrs->other[section_index].name);
+	  section_addrs->other[section_index].addr = dyn_text_addr;
+	  dyn_text_addr += bfd_get_section_size (s);
+	  section_index ++;
+	}
+      else if (strncmp(s->name, ".ocm_text", strlen(".ocm_text")) == 0)
+	{
+	  section_addrs->other[section_index].name = strdup(s->name);
+	  make_cleanup(xfree, section_addrs->other[section_index].name);
+	  section_addrs->other[section_index].addr = dyn_ocm_text_addr;
+	  dyn_ocm_text_addr += bfd_get_section_size (s);
+	  section_index ++;
+	}
+      else if (strncmp(s->name, ".data", strlen(".data")) == 0)
+	{
+	  /* .data section. */
+	  section_addrs->other[section_index].name = strdup(s->name);
+	  make_cleanup(xfree, section_addrs->other[section_index].name);
+	  section_addrs->other[section_index].addr = dyn_data_addr;
+	  dyn_data_addr += bfd_get_section_size (s);
+	  section_index ++;
+	}
+    }
+
+  if (section_index != (num_text + num_ocm_text + num_data))
+    {
+      error("#of output sections does not match input.");
+    }
+
+  bfd_close (loadfile_bfd);
+  symbol_file_add (filename, from_tty, section_addrs, 0, flags);
+  reinit_frame_cache ();
+  do_cleanups (my_cleanups);
+
+  /* find the second last file on the object_file list. The newly added file is the last file on the list. */
+  ofiles = object_files;
+  while(ofiles->next->next)
+    {
+      ofiles = ofiles->next;
+    }
+
+  if (ofiles == NULL)
+    error("Cannot find %s of the object_file list\n", bfd_get_filename(loadfile_bfd));
+
+  /* Find the 2nd last files psymtab. */
+  psymtabs = ofiles->psymtabs;
+
+  /* find the last entry on this psymtab linked list. */
+  while(psymtabs->next)
+    psymtabs = psymtabs->next;
+
+  /* We have found the last entry. Chain the new file psymtab linked list to object_files psymtab linked list. */
+  psymtabs->next = ofiles->next->psymtabs;
+}
+
+/* ubicom32v3_ocm_load_run.  */
+static void
+ubicom32v3_ocm_load_run (char *arg, int from_tty)
+{
+  bfd *loadfile_bfd;
+  asection *s;
+  int total_length = 0;
+  int progress = 0;
+  int addr, length, offs, size, endaddr;
+  unsigned char *data, *verifybuf, *protect;
+  unsigned int last_address = 0;
+  unsigned int first_address = 0xffffffff;
+  int ret;
+
+  char *file;
+
+  size = UBICOM32V3_LOAD_BLOCK_SIZE;
+  data = malloc (size *2 );
+  if (!data)
+    {
+      printf_unfiltered ("error: unable to allocate memory for write\n");
+      return;
+    }
+  verifybuf = &data[size];
+
+  file = get_exec_file(1);
+
+  if (remote_debug)
+    printf_filtered ("ubicom32v3_load: %s (tty=%d)\n", file, from_tty);
+
+  /* Open the file.  */
+  loadfile_bfd = bfd_openr (file, gnutarget);
+  if (loadfile_bfd == NULL)
+    error ("Error: Unable to open file %s\n", file);
+
+  if (!bfd_check_format (loadfile_bfd, bfd_object))
+    {
+      bfd_close (loadfile_bfd);
+      error ("Error: File is not an object file\n");
+    }
+
+  endaddr = -1;
+  /* Loop through all the sections and find the OCM sections and get an estimate of how much we are loading. */
+  for (s = loadfile_bfd->sections; s; s = s->next)
+    {
+      if (ubicom32v3_loadable_section (loadfile_bfd, s) != UBICOM32V3_OCM_SECTION)
+	continue;
+
+      length = bfd_get_section_size (s);
+      addr = s->lma;
+      if ((addr + length) > endaddr)
+	endaddr = addr + length;
+    }
+
+  /* round up endaddr to word boundary. */
+  endaddr += 7;
+  endaddr &= ~0x3;
+
+  /* Reset the system. */
+  ret = ubicom32v3isp_reset();
+
+  /* set up the fast downloader */
+  ret = ubicom32v3isp_download_fast_transfer_code(endaddr);
+
+  for (s = loadfile_bfd->sections; s; s = s->next)
+    {
+      if (ubicom32v3_loadable_section (loadfile_bfd, s) != UBICOM32V3_OCM_SECTION)
+	continue;
+
+      length = bfd_get_section_size (s);
+
+      if (remote_debug)
+	printf_filtered("%s: 0 / %d\n", s->name, length);
+
+      size = UBICOM32V3_LOAD_BLOCK_SIZE;
+
+      offs = 0;
+      while(length)
+	{
+	  unsigned int retlen;
+	  int readtransfer;
+	  if(size > length)
+	    size = length;
+
+	  /* read in the data size bytes at a time from the section */
+	  bfd_get_section_contents (loadfile_bfd, s, data, offs, size);
+
+	  addr = s->lma + offs;
+
+	  retlen = ubicom32v3_write_bytes(addr, (char *)data, size);
+
+	  /* read the data and verify */
+	  readtransfer = size;
+	  if (size %4)
+	    {
+	      /* round up size to a 4 byte boundary */
+	      size += 3;
+	      size &= ~3;
+	    }
+
+	  ret = ubicom32v3UltraFastReadMemoryRaw(addr, size/4, (int *)verifybuf);
+	  if (memcmp (data, verifybuf, readtransfer) != 0)
+	    {
+	      int i;
+	      char *badblock = verifybuf;
+	      char *cmpblock = data;
+	      int currentaddress = addr;
+	      for(i = 0; i< readtransfer; i++, currentaddress++) {
+		if(badblock[i] != cmpblock[i]){
+		  printf("addr = 0x%08x expect 0x%02hhx got 0x%02hhx\n", currentaddress, (unsigned)cmpblock[i], (unsigned)badblock[i]);
+		  break;
+		}
+	      }
+	    }
+
+	  offs += readtransfer;
+	  length -= readtransfer;
+
+	  if (remote_debug)
+	    printf_filtered("%s: 0 / %d\n", s->name, length);
+	}
+    }
+
+  free(data);
+  if(s != NULL)
+    {
+      printf_filtered("Ocm download and run failed.\n");
+      return;
+    }
+
+  /* Code is downloaded and verified. */
+  /* guarantee that thread0 will be alive when we give it control. */
+  ret = ubicom32v3isp_make_thread0_alive();
+
+  /* now transfer control to the .downloader section */
+  addr = 0x3ffc0000;
+
+  ret = current_cpu->write_register_fn(ubicom32v3currentThread, 34, (void *)&addr, 1);
+  ret= ubicom32v3restartProcessor(1);
+
+  if(ret)
+    {
+      printf_filtered("Ocm Run failed.\n");
+    }
+}
+
+/* ubicom32v3_verify.  */
+static void
+ubicom32v3_verify (char *arg, int from_tty)
+{
+  bfd *loadfile_bfd;
+  asection *s;
+  int total_length = 0;
+  int progress = 0;
+  int addr, length, offs, size;
+  unsigned char *data, *verifybuf, *protect;
+  unsigned int last_address = 0;
+  unsigned int first_address = 0xffffffff;
+  int ret;
+
+  char *file;
+
+  size = UBICOM32V3_LOAD_BLOCK_SIZE;
+  data = malloc (size *2 );
+  if (!data)
+    {
+      printf_unfiltered ("error: unable to allocate memory for write\n");
+      return;
+    }
+  verifybuf = &data[size];
+
+  file = get_exec_file(1);
+
+  if (remote_debug)
+    printf_filtered ("ubicom32v3_load: %s (tty=%d)\n", file, from_tty);
+
+  /* Open the file.  */
+  loadfile_bfd = bfd_openr (file, gnutarget);
+  if (loadfile_bfd == NULL)
+    error ("Error: Unable to open file %s\n", file);
+
+  if (!bfd_check_format (loadfile_bfd, bfd_object))
+    {
+      bfd_close (loadfile_bfd);
+      error ("Error: File is not an object file\n");
+    }
+
+  /* set up the fast downloader */
+  ret = ubicom32v3isp_download_fast_transfer_code(UBICOM32V3_OCM_ADDR);
+
+  for (s = loadfile_bfd->sections; s; s = s->next)
+    {
+      if (ubicom32v3_loadable_section (loadfile_bfd, s) != UBICOM32V3_FLASH_SECTION)
+	continue;
+
+      length = bfd_get_section_size (s);
+
+      if (remote_debug)
+	printf_filtered("%s: 0 / %d\n", s->name, length);
+
+      size = UBICOM32V3_LOAD_BLOCK_SIZE;
+
+      offs = 0;
+      while(length)
+	{
+	  int readtransfer;
+	  if(size > length)
+	    size = length;
+
+	  /* read in the data size bytes at a time from the section */
+	  bfd_get_section_contents (loadfile_bfd, s, data, offs, size);
+
+	  addr = s->lma + offs;
+
+	  /* read the data and verify */
+	  //readtransfer= ubicom32v3_read_bytes(addr, verifybuf, size);
+	  readtransfer = size;
+	  if (size %4)
+	    {
+	      /* round up size to a 4 byte boundary */
+	      size += 3;
+	      size &= ~3;
+	    }
+
+	  ret = ubicom32v3UltraFastReadMemoryRaw(addr, size/4, (int *)verifybuf);
+	  if (memcmp (data, verifybuf, readtransfer) != 0)
+	    {
+	      int i;
+	      char *badblock = verifybuf;
+	      char *cmpblock = data;
+	      int currentaddress = addr;
+	      for(i = 0; i< readtransfer; i++, currentaddress++) {
+		if(badblock[i] != cmpblock[i]){
+		  printf("addr = 0x%08x expect 0x%02hhx got 0x%02hhx\n", currentaddress, (unsigned)cmpblock[i], (unsigned)badblock[i]);
+		  break;
+		}
+	      }
+	    }
+
+	  offs += readtransfer;
+	  length -= readtransfer;
+
+	  if (remote_debug)
+	    printf_filtered("%s: 0 / %d\n", s->name, length);
+	}
+    }
+
+  free(data);
+
+}
+
+/* ubicom32v3_load.  */
+static void
+ubicom32v3_load (char *file, int from_tty)
+{
+  bfd *loadfile_bfd;
+  asection *s, *downloadersection;
+  int total_length = 0;
+  int progress = 0;
+  int addr, length, offs, size;
+  unsigned char *data, *protect, *foundK;
+  unsigned int last_address = 0;
+  unsigned int first_address = 0xffffffff;
+  int ret;
+  int has_downloader = 0;
+  unsigned int reply;
+  CORE_ADDR ocm_begin;
+
+  if (remote_debug)
+    printf_filtered ("ubicom32v3_load: %s (tty=%d)\n", file, from_tty);
+
+  /* Open the file.  */
+  loadfile_bfd = bfd_openr (file, gnutarget);
+  if (loadfile_bfd == NULL)
+    error ("Error: Unable to open file %s\n", file);
+
+  if (!bfd_check_format (loadfile_bfd, bfd_object))
+    {
+      bfd_close (loadfile_bfd);
+      error ("Error: File is not an object file\n");
+    }
+
+  /*
+   * Scan through the sections looking for the .downloader section. We better find it
+   * because without it we are not going to be able to download any code to the board.
+   */
+  for (s = loadfile_bfd->sections; s; s = s->next)
+    {
+      unsigned char buf[4];
+      CORE_ADDR length;
+      int sec;
+      unsigned int section_last_address;
+      size_t len;
+
+      if(strcmp(s->name, ".downloader"))
+	{
+	  continue;
+	}
+
+      has_downloader = 1;
+      break;
+    }
+
+  if(has_downloader == 0)
+    {
+      printf_unfiltered("%s has no \".downloader\" section. Unable to download code.\n", file);
+      return;
+    }
+
+  downloadersection = s;
+  length = bfd_get_section_size (s);
+
+  /* Get the downloader section data. */
+  data = malloc(length+64);
+  if (!data)
+    {
+      printf_unfiltered ("error: unable to allocate memory for .downloader section data.\n");
+      return;
+    }
+
+  offs = 0;
+
+  /* read in the .downloader section data from the the file. */
+  bfd_get_section_contents (loadfile_bfd, s, data, offs, length);
+
+  /* xxxxxxxxxxxxxxxxxxxxxxxxxx call the backed init */
+  ocm_begin = ubicom32v3_lookup_symbol("__ocm_begin");
+  if (ocm_begin == 0)
+    {
+      printf_unfiltered("No __ocm_begin symbol. Unable to initialize Boot Kernel\n");
+      free(data);
+      ubicom32v3_reset(0,0);
+      return;
+    }
+
+  /*
+   * Turn off the 2 wire interface if possible.
+   */
+  ret = turnOff2wire();
+
+  ret = ubicom32v3isp_initBackendToBootKernel(length, (unsigned int*)data, ocm_begin);
+  if(ret)
+    {
+      printf_unfiltered("Unable to initialize Boot Kernel\n");
+      free(data);
+      ubicom32v3_reset(0,0);
+      return;
+    }
+
+  free(data);
+  size = UBICOM32V3_LOAD_BLOCK_SIZE;
+  data = malloc(size*2);
+  if (!data)
+    {
+      printf_unfiltered ("error: unable to allocate memory for write\n");
+      return;
+    }
+
+  /* xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx */
+
+  for (s = loadfile_bfd->sections; s; s = s->next)
+    {
+      unsigned char buf[4];
+      CORE_ADDR length;
+      int sec;
+      unsigned int section_last_address;
+
+      sec = ubicom32v3_loadable_section (loadfile_bfd, s);
+      if (sec != UBICOM32V3_FLASH_SECTION)
+	continue;
+
+      length = bfd_get_section_size (s);
+      total_length += length;
+      section_last_address = length + s->lma;
+      section_last_address +=3;
+
+      /* round up the last address */
+      section_last_address &= ~0x3;
+
+      if(section_last_address > last_address)
+	last_address = section_last_address;
+
+      if(s->lma < first_address)
+	first_address = s->lma;
+    }
+
+  last_address -= first_address;
+
+  /*
+   * Turn off the 2 wire interface if possible.
+   */
+  ret = turnOff2wire();
+
+  /* tell spt that we are going to start code download. spt will issue the chip erase.
+     This will block till the chip erase returns. */
+  data[0] = 0;
+  sprintf(data,"Begin Erase.\n 0x%x length 0x%x", first_address, last_address);
+  printf("%s\n", data);
+
+  ret = eraseVerifyFlash(first_address, last_address, ubicom32_erase_progress_callback, NULL);
+  if(ret)
+    return;
+
+  printf("Begin download\n");
+  /* Write flash.  */
+  for (s = loadfile_bfd->sections; s; s = s->next)
+    {
+      if (ubicom32v3_loadable_section (loadfile_bfd, s) != UBICOM32V3_FLASH_SECTION)
+	continue;
+
+      length = bfd_get_section_size (s);
+
+      if (remote_debug)
+	printf_filtered("%s: 0 / %d\n", s->name, length);
+      ubicom32v3_show_load_progress_default (NULL, 0, length, progress, total_length);
+
+      size = UBICOM32V3_LOAD_BLOCK_SIZE;
+
+      offs = 0;
+      while(length)
+	{
+	  if(size > length)
+	    size = length;
+
+	  addr = s->lma + offs;
+
+	  /*
+	   * If the lead address is not aligned to a flash write line boundary then
+	   * Send enough so that all subsequent transfers will be aligned to
+	   * flash write line boundary.
+	   */
+	  if(addr & 0xff)
+	    {
+	      /* the start is misaligned */
+	      int endaddr = addr + size;
+
+	      if((endaddr & 0xff) > addr)
+		{
+		  endaddr &= 0xff;
+		  size = endaddr - addr;
+		}
+	    }
+
+	  /* read in the data size bytes at a time from the section */
+	  bfd_get_section_contents (loadfile_bfd, s, data, offs, size);
+
+	  ubicom32v3_write_flash_bytes(addr, data, size);
+
+	  offs += size;
+	  length -= size;
+	  progress += size;
+
+	  if (remote_debug)
+	    printf_filtered("%s: 0 / %d\n", s->name, length);
+	  ubicom32v3_show_load_progress_default (NULL, 0, length, progress, total_length);
+
+	}
+    }
+
+  /* Verify flash.  */
+  for (s = loadfile_bfd->sections; s; s = s->next)
+    {
+      if (ubicom32v3_loadable_section (loadfile_bfd, s) != UBICOM32V3_FLASH_SECTION)
+	continue;
+
+      length = bfd_get_section_size (s);
+
+      if (remote_debug)
+	printf_filtered("%s: 0 / %d\n", s->name, length);
+
+      size = UBICOM32V3_LOAD_BLOCK_SIZE;
+
+      offs = 0;
+      while(length)
+	{
+	  if(size > length)
+	    size = length;
+
+	  /* read in the data size bytes at a time from the section */
+	  bfd_get_section_contents (loadfile_bfd, s, data, offs, size);
+
+	  addr = s->lma + offs;
+
+	  if (common_verify_bytes(addr, data, size) < 0)
+	    printf_unfiltered("verify error in section %s (0x%08x - 0x%08x)\n", s->name, addr, addr + size);
+
+
+	  offs += size;
+	  length -= size;
+	  progress += size;
+
+	  if (remote_debug)
+	    printf_filtered("%s: 0 / %d\n", s->name, length);
+	}
+    }
+
+  ret = ubicom32v3stopProcessor();
+
+  /* Turn on turbo 2 wire if possible. */
+  ret = turnOn2wire();
+  free(data);
+
+  /* reset and restart */
+  ubicom32v3isp_attach();
+  ubicom32v3_reset(0, 0);
+}
+
+static void
+ubicom32v3_verify_reg_read (char *file, int from_tty)
+{
+  extern void verify_reg_read(void);
+
+  verify_reg_read();
+}
+
+#if 0
+static void
+ubicom32v3_mail_status (char *file, int from_tty)
+{
+  int status;
+  extern int readStatus(int *);
+  int ret = readStatus(&status);
+  printf("mail status = 0x%8x\n", status);
+}
+
+static void
+ubicom32v3_read_mailbox (char *file, int from_tty)
+{
+  int mboxData=0xaa55aa55;
+  extern int readMailbox(int *);
+  int ret = readMailbox(&mboxData);
+  printf("Ret = %d Mailbox sent = 0x%8x\n", ret,  mboxData);
+}
+#endif
+
+static int
+ubicom32v3_insert_breakpoint (struct bp_target_info *bp_tgt)
+{
+  unsigned int *bp = (unsigned int *)gdbarch_breakpoint_from_pc(current_gdbarch, &bp_tgt->placed_address, &bp_tgt->placed_size);
+  CORE_ADDR addr = bp_tgt->placed_address;
+  unsigned int bpToSend;
+  char *cptr = (char *)&bpToSend;
+  int ret;
+
+  memcpy((void *)&bpToSend, (void *)bp, bp_tgt->placed_size);
+  cptr[3] =  (0xff);
+
+  /* make sure the address is in the PRAM space. XXXXXX May change in the future */
+  if(addr >= ubicom32v3bounds[ubicom32v3numBoundsEntries-2].lower &&
+     ubicom32v3bounds[ubicom32v3numBoundsEntries-2].upper > addr)
+    {
+      /* valid breakpointable address */
+
+      /* read out the old contents */
+      ret = ubicom32v3_read_bytes (addr, bp_tgt->shadow_contents, bp_tgt->placed_size);
+
+      if(ret!= bp_tgt->placed_size)
+	return -1;
+      /* write in the break point */
+      ret = ubicom32v3_write_bytes (addr, (char *) &bpToSend, bp_tgt->placed_size);
+
+      if(ret == bp_tgt->placed_size)
+	{
+	  /* flush dcache and invalidate the icache */
+	  ret = ubicom32v3cacheflushinvalidate(addr, bp_tgt->placed_size);
+	  return 0;
+	}
+      else
+	return -1;
+    }
+
+  return EINVAL;
+}
+
+static int
+ubicom32v3_remove_breakpoint (struct bp_target_info *bp_tgt)
+{
+  unsigned int *bp = (unsigned int *)gdbarch_breakpoint_from_pc(current_gdbarch, &bp_tgt->placed_address, &bp_tgt->placed_size);
+  CORE_ADDR addr = bp_tgt->placed_address;
+  int ret, i;
+  char *prev_contents = (char *)malloc(bp_tgt->placed_size);
+  char *cptr = (char *) bp;
+  int *iptr = (int *)prev_contents;
+
+  cptr[3] = 0xff;
+
+  /* make sure the address is a breakpointable address */
+  if(addr >= ubicom32v3bounds[ubicom32v3numBoundsEntries-2].lower &&
+     ubicom32v3bounds[ubicom32v3numBoundsEntries-2].upper > addr)
+    {
+
+      /* read out the old contents */
+      ret = ubicom32v3_read_bytes (addr, prev_contents, bp_tgt->placed_size);
+
+#if 0
+      /* blow off the lower 11 bits */
+      *iptr &= ~(0x7ff);
+#endif
+
+      /* check if we do have a bp instruction at this address */
+      for(ret =0; ret< bp_tgt->placed_size-1; ret++)
+	if(cptr[ret] != prev_contents[ret])
+	  return 0;
+
+      /* write in the old contents */
+      ret = ubicom32v3_write_bytes (addr, (char *) bp_tgt->shadow_contents, bp_tgt->placed_size);
+
+      if(ret == bp_tgt->placed_size)
+	{
+	  /* flush dcache and invalidate the icache */
+	  ret = ubicom32v3cacheflushinvalidate(addr, bp_tgt->placed_size);
+	  return 0;
+	}
+      else
+	return -1;
+    }
+  else
+    return EINVAL;
+}
+
+/*
+ * Collect a descriptive string about the given thread.
+ * The target may say anything it wants to about the thread
+ * (typically info about its blocked / runnable state, name, etc.).
+ * This string will appear in the info threads display.
+ *
+ * Optional: targets are not required to implement this function.
+ */
+
+static char *
+ubicom32v3_threads_extra_info (struct thread_info *tp)
+{
+  unsigned int thread_num;
+  extern char * ubicom32v3_remote_threads_extra_info (struct thread_info *tp);
+  extern void gdbarch_info_init (struct gdbarch_info *info);
+  thread_num = PIDGET(tp->ptid);
+
+  ubicom32v3_set_thread(thread_num);
+
+  return (ubicom32v3_remote_threads_extra_info(tp));
+}
+
+/* init_ubicom32v3_ops.  */
+static void
+init_ubicom32v3_ops (void)
+{
+  ubicom32v3_ops.to_shortname = "ubicom32v3";
+  ubicom32v3_ops.to_longname = "Remote ubicom32v3 debug Via Ubicom Ethernet Dongle";
+  ubicom32v3_ops.to_doc = "Remote ubicom32 debug Via Ubicom Ethernet Dongle.\n\
+Connect to target ubicom32 board as follows:\n\
+target ubicom32 dongle-ip-address:5010\n\
+";
+  ubicom32v3_ops.to_open = ubicom32v3_open;
+  ubicom32v3_ops.to_close = ubicom32v3_close;
+  ubicom32v3_ops.to_attach = ubicom32v3_attach;
+  ubicom32v3_ops.to_post_attach = NULL;
+  ubicom32v3_ops.to_detach = ubicom32v3_detach;
+  ubicom32v3_ops.to_resume = ubicom32v3_resume;
+  ubicom32v3_ops.to_wait = ubicom32v3_wait;
+  //ubicom32v3_ops.to_post_wait = NULL;
+  ubicom32v3_ops.to_fetch_registers = ubicom32v3_fetch_register;
+  ubicom32v3_ops.to_store_registers = ubicom32v3_store_register;
+  ubicom32v3_ops.to_prepare_to_store = ubicom32v3_prepare_to_store;
+  ubicom32v3_ops.deprecated_xfer_memory = ubicom32v3_xfer_memory;
+  ubicom32v3_ops.to_files_info = ubicom32v3_files_info;
+  ubicom32v3_ops.to_kill = ubicom32v3_kill;
+  ubicom32v3_ops.to_load = ubicom32v3_load;
+  ubicom32v3_ops.to_insert_breakpoint = ubicom32v3_insert_breakpoint;
+  ubicom32v3_ops.to_remove_breakpoint = ubicom32v3_remove_breakpoint;
+
+  ubicom32v3_ops.to_terminal_init = NULL;
+  ubicom32v3_ops.to_terminal_inferior = NULL;
+  ubicom32v3_ops.to_terminal_ours_for_output = NULL;
+  ubicom32v3_ops.to_terminal_ours = NULL;
+  ubicom32v3_ops.to_terminal_info = NULL;
+  ubicom32v3_ops.to_lookup_symbol = NULL;
+  ubicom32v3_ops.to_create_inferior = NULL;
+  ubicom32v3_ops.to_post_startup_inferior = NULL;
+  ubicom32v3_ops.to_acknowledge_created_inferior = NULL;
+  ubicom32v3_ops.to_insert_fork_catchpoint = NULL;
+  ubicom32v3_ops.to_remove_fork_catchpoint = NULL;
+  ubicom32v3_ops.to_insert_vfork_catchpoint = NULL;
+  ubicom32v3_ops.to_remove_vfork_catchpoint = NULL;
+  ubicom32v3_ops.to_insert_exec_catchpoint = NULL;
+  ubicom32v3_ops.to_remove_exec_catchpoint = NULL;
+  ubicom32v3_ops.to_reported_exec_events_per_exec_call = NULL;
+  ubicom32v3_ops.to_has_exited = NULL;
+  ubicom32v3_ops.to_mourn_inferior = NULL;
+  ubicom32v3_ops.to_can_run = 0;
+  ubicom32v3_ops.to_notice_signals = 0;
+  ubicom32v3_ops.to_thread_alive = ubicom32v3_thread_alive;
+  ubicom32v3_ops.to_pid_to_str = ubicom32v3_thread_pid_to_str;
+  ubicom32v3_ops.to_stop = ubicom32v3_stop;
+  ubicom32v3_ops.to_pid_to_exec_file = NULL;
+  ubicom32v3_ops.to_stratum = process_stratum;
+  ubicom32v3_ops.to_has_all_memory = 1;
+  ubicom32v3_ops.to_has_memory = 1;
+  ubicom32v3_ops.to_has_stack = 1;
+  ubicom32v3_ops.to_has_registers = 1;
+  ubicom32v3_ops.to_has_execution = 1;
+  ubicom32v3_ops.to_sections = NULL;
+  ubicom32v3_ops.to_sections_end = NULL;
+  ubicom32v3_ops.to_magic = OPS_MAGIC;
+  ubicom32v3_ops.to_extra_thread_info = ubicom32v3_threads_extra_info;
+}
+
+#ifdef DO_CORE_DUMPS
+/* init_ubicom32v3_ops.  */
+static void
+init_ubicom32v3_core_ops (void)
+{
+  extern char * ubicom32v3_remote_threads_extra_info (struct thread_info *tp);
+  ubicom32v3_core_ops.to_shortname = "ubicom32v3core";
+  ubicom32v3_core_ops.to_longname = "Remote ubicom32v3 debug Via Ubicom core File.";
+  ubicom32v3_core_ops.to_doc = "Remote ubicom32v3 debug Via Ubicom core File.\n\
+Invoke as ubicom32-elf-gdb elffile corefile.\n\
+";
+  ubicom32v3_core_ops.to_open = ubicom32v3_core_open;
+  ubicom32v3_core_ops.to_close = ubicom32v3_core_close;
+  ubicom32v3_core_ops.to_attach = NULL;
+  ubicom32v3_core_ops.to_post_attach = NULL;
+  ubicom32v3_core_ops.to_detach = ubicom32v3_core_detach;
+  ubicom32v3_core_ops.to_resume = NULL;
+  ubicom32v3_core_ops.to_wait = ubicom32v3_wait;
+  ubicom32v3_core_ops.to_fetch_registers = ubicom32v3_fetch_register;
+  ubicom32v3_core_ops.to_store_registers = ubicom32v3_store_register;;
+  ubicom32v3_core_ops.to_prepare_to_store = ubicom32v3_prepare_to_store;
+  ubicom32v3_core_ops.deprecated_xfer_memory = ubicom32v3_core_xfer_memory;
+  ubicom32v3_core_ops.to_files_info = ubicom32v3_files_info;
+  ubicom32v3_core_ops.to_kill = ubicom32v3_core_kill;
+  ubicom32v3_core_ops.to_load = NULL;
+  ubicom32v3_core_ops.to_insert_breakpoint = NULL;
+  ubicom32v3_core_ops.to_remove_breakpoint = NULL;
+
+  ubicom32v3_core_ops.to_terminal_init = NULL;
+  ubicom32v3_core_ops.to_terminal_inferior = NULL;
+  ubicom32v3_core_ops.to_terminal_ours_for_output = NULL;
+  ubicom32v3_core_ops.to_terminal_ours = NULL;
+  ubicom32v3_core_ops.to_terminal_info = NULL;
+  ubicom32v3_core_ops.to_lookup_symbol = NULL;
+  ubicom32v3_core_ops.to_create_inferior = NULL;
+  ubicom32v3_core_ops.to_post_startup_inferior = NULL;
+  ubicom32v3_core_ops.to_acknowledge_created_inferior = NULL;
+  ubicom32v3_core_ops.to_insert_fork_catchpoint = NULL;
+  ubicom32v3_core_ops.to_remove_fork_catchpoint = NULL;
+  ubicom32v3_core_ops.to_insert_vfork_catchpoint = NULL;
+  ubicom32v3_core_ops.to_remove_vfork_catchpoint = NULL;
+  ubicom32v3_core_ops.to_insert_exec_catchpoint = NULL;
+  ubicom32v3_core_ops.to_remove_exec_catchpoint = NULL;
+  ubicom32v3_core_ops.to_reported_exec_events_per_exec_call = NULL;
+  ubicom32v3_core_ops.to_has_exited = NULL;
+  ubicom32v3_core_ops.to_mourn_inferior = NULL;
+  ubicom32v3_core_ops.to_can_run = 0;
+  ubicom32v3_core_ops.to_notice_signals = 0;
+  ubicom32v3_core_ops.to_thread_alive = ubicom32v3_thread_alive;
+  ubicom32v3_core_ops.to_pid_to_str = ubicom32v3_thread_pid_to_str;
+  ubicom32v3_core_ops.to_stop = NULL;
+  ubicom32v3_core_ops.to_pid_to_exec_file = NULL;
+  ubicom32v3_core_ops.to_stratum = process_stratum;
+  ubicom32v3_core_ops.to_has_all_memory = 1;
+  ubicom32v3_core_ops.to_has_memory = 1;
+  ubicom32v3_core_ops.to_has_stack = 1;
+  ubicom32v3_core_ops.to_has_registers = 1;
+  ubicom32v3_core_ops.to_has_execution = 1;
+  ubicom32v3_core_ops.to_sections = NULL;
+  ubicom32v3_core_ops.to_sections_end = NULL;
+  ubicom32v3_core_ops.to_magic = OPS_MAGIC;
+  ubicom32v3_core_ops.to_extra_thread_info = ubicom32v3_threads_extra_info;
+}
+#endif
+
+
+extern int ubicom32v3pollThreads(unsigned int threadNo, char *args);
+
+unsigned int poll_thread;
+static void
+myubicom32v3_set_thread (char *args, int from_tty)
+{
+  sscanf(args, "%d", &poll_thread);
+}
+
+static void
+ubicom32v3_poll_thread (char *args, int from_tty)
+{
+  (void) ubicom32v3pollThreads(poll_thread, args);
+}
+
+static void
+ubicom32v3_trap_ignore(char *args, int from_tty)
+{
+  ignore_trap = 1;
+}
+
+void
+_initialize_ubicom32v3 (void)
+{
+  extern void common_reset(char *args, int from_tty);
+
+  init_ubicom32v3_ops ();
+
+#ifdef DO_CORE_DUMPS
+  init_ubicom32v3_core_ops ();
+#endif
+  add_target (&ubicom32v3_ops);
+  add_target (&ubicom32v3_core_ops);
+  //add_com ("myreset", class_obscure, ubicom32v3_reset, "reset target.");
+  /* Backward compatability.  */
+  add_com ("ubicom32v3reset", class_obscure, common_reset,
+	   "Backward compatability - use 'reset'.");
+  add_com ("tpoll", class_obscure, ubicom32v3_poll_thread,
+	   "Thread polling command.");
+  add_com ("trapign", class_obscure, ubicom32v3_trap_ignore,
+	   "Set debugger to ignore trap events.");
+  add_com ("tset", class_obscure, myubicom32v3_set_thread,
+	   "Sets thread for polling command.");
+  add_com ("specialmon", class_obscure, ubicom32v3_special_mon,
+	   "Hardware sampling command.");
+  add_com ("bisttest", class_obscure, ubicom32v3_bist_test,
+	   "Run bist sequence from gdb.");
+  add_com ("plltest", class_obscure, ubicom32v3_pll_test,
+	   "Run bist sequence from gdb.");
+  add_com ("ddrtest", class_obscure, ubicom32v3_ddr_test,
+	   "Run bist sequence from gdb.");
+  add_com ("loadtest", class_obscure, ubicom32v3_load,
+	   "Run bist sequence from gdb.");
+  add_com ("prev_pc", class_obscure, ubicom32v3_previous_pc,
+	   "Load PC with value from previous_pc register.");
+  add_com ("cacheflush", class_obscure, ubicom32v3_cache_flush,
+	   "Flush D-cache and I-cache from for particular address gdb.");
+  add_com ("verifyregread", class_obscure, ubicom32v3_verify_reg_read,
+	   "Flush D-cache and I-cache from for particular address gdb.");
+  add_com ("verify5k", class_obscure, ubicom32v3_verify,
+	   "Used to verify contents of flash.");
+  add_com ("ocmrun", class_obscure, ubicom32v3_ocm_load_run,
+	   "Used to load code into OCM and run it.");
+  add_com ("add-module-file", class_obscure, ubicom32v3_add_module_file,
+	   "Used to load symbols from a loadable module.");
+  add_com ("erase-flash", class_obscure, ubicom32v3_erase_flash,
+	   "Used to erase flash. Usage erase-flash start_addr length");
+  add_com ("ubicom32v3coredump", class_obscure, ubicom32v3_core_dump,
+	   "Used to create a core dump of the machine state.\n\
+Usage:\n\
+coredump\n\
+\tThis will dump core to a file called Ubicom.core \n\twith 2MB of sdram dump.\n\n\
+coredump n\n\
+\tThis will dump core to a file called Ubicom.core\n\twith nMB of sdram dump.\n\tn is a number between 1 - 16 inclusive.\n\n\
+coredump corefilename\n\
+\tThis will dump core to a file called \"corefilename\"\n\twith 2MB of sdram dump.\n\n\
+coredump corefilename n\n\
+\tThis will dump core to a file called \"corefilename\"\n\twith nMB of sdram dump.\n\
+\tn is a number between 1 - 16 inclusive.\n");
+#if 0
+  add_com ("mstat", class_obscure, ubicom32v3_mail_status, "Printout mail box status.");
+  add_com ("rdmail", class_obscure, ubicom32v3_read_mailbox, "Read data from mail box.");
+
+  add_com ("mclear", class_obscure, ubicom32v3_mail_clear, "Load the \".protect\". section into Flash Boot sector.");
+#endif
+}
--- /dev/null
+++ b/gdb/solib-ubicom32.c
@@ -0,0 +1,1301 @@
+/* Handle UBICOM32 (FDPIC) shared libraries for GDB, the GNU Debugger.
+   Copyright (C) 2004, 2007 Free Software Foundation, Inc.
+
+   This file is part of GDB.
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+
+#include "defs.h"
+#include "gdb_string.h"
+#include "inferior.h"
+#include "gdbcore.h"
+#include "solib.h"
+#include "solist.h"
+#include "ubicom32-tdep.h"
+#include "objfiles.h"
+#include "symtab.h"
+#include "language.h"
+#include "command.h"
+#include "gdbcmd.h"
+#include "elf/ubicom32.h"
+
+/* Flag which indicates whether internal debug messages should be printed.  */
+static int solib_ubicom32_debug;
+
+/* UBICOM32 pointers are four bytes wide.  */
+enum { UBICOM32_PTR_SIZE = 4 };
+
+/* Representation of loadmap and related structs for the UBICOM32 FDPIC ABI.  */
+
+/* External versions; the size and alignment of the fields should be
+   the same as those on the target.  When loaded, the placement of
+   the bits in each field will be the same as on the target.  */
+typedef gdb_byte ext_Elf32_Half[2];
+typedef gdb_byte ext_Elf32_Addr[4];
+typedef gdb_byte ext_Elf32_Word[4];
+
+struct ext_elf32_fdpic_loadseg
+{
+  /* Core address to which the segment is mapped.  */
+  ext_Elf32_Addr addr;
+  /* VMA recorded in the program header.  */
+  ext_Elf32_Addr p_vaddr;
+  /* Size of this segment in memory.  */
+  ext_Elf32_Word p_memsz;
+};
+
+struct ext_elf32_fdpic_loadmap {
+  /* Protocol version number, must be zero.  */
+  ext_Elf32_Half version;
+  /* Number of segments in this map.  */
+  ext_Elf32_Half nsegs;
+  /* The actual memory map.  */
+  struct ext_elf32_fdpic_loadseg segs[1 /* nsegs, actually */];
+};
+
+/* Internal versions; the types are GDB types and the data in each
+   of the fields is (or will be) decoded from the external struct
+   for ease of consumption.  */
+struct int_elf32_fdpic_loadseg
+{
+  /* Core address to which the segment is mapped.  */
+  CORE_ADDR addr;
+  /* VMA recorded in the program header.  */
+  CORE_ADDR p_vaddr;
+  /* Size of this segment in memory.  */
+  long p_memsz;
+};
+
+struct int_elf32_fdpic_loadmap {
+  /* Protocol version number, must be zero.  */
+  int version;
+  /* Number of segments in this map.  */
+  int nsegs;
+  /* The actual memory map.  */
+  struct int_elf32_fdpic_loadseg segs[1 /* nsegs, actually */];
+};
+
+/* Given address LDMADDR, fetch and decode the loadmap at that address.
+   Return NULL if there is a problem reading the target memory or if
+   there doesn't appear to be a loadmap at the given address.  The
+   allocated space (representing the loadmap) returned by this
+   function may be freed via a single call to xfree().  */
+
+static struct int_elf32_fdpic_loadmap *
+fetch_loadmap (CORE_ADDR ldmaddr)
+{
+  struct ext_elf32_fdpic_loadmap ext_ldmbuf_partial;
+  struct ext_elf32_fdpic_loadmap *ext_ldmbuf;
+  struct int_elf32_fdpic_loadmap *int_ldmbuf;
+  int ext_ldmbuf_size, int_ldmbuf_size;
+  int version, seg, nsegs;
+
+  /* Fetch initial portion of the loadmap.  */
+  if (target_read_memory (ldmaddr, (gdb_byte *) &ext_ldmbuf_partial,
+			  sizeof ext_ldmbuf_partial))
+    {
+      /* Problem reading the target's memory.  */
+      return NULL;
+    }
+
+  /* Extract the version.  */
+  version = extract_unsigned_integer (ext_ldmbuf_partial.version,
+				      sizeof ext_ldmbuf_partial.version);
+  if (version != 0)
+    {
+      /* We only handle version 0.  */
+      return NULL;
+    }
+
+  /* Extract the number of segments.  */
+  nsegs = extract_unsigned_integer (ext_ldmbuf_partial.nsegs,
+				    sizeof ext_ldmbuf_partial.nsegs);
+
+  /* Allocate space for the complete (external) loadmap.  */
+  ext_ldmbuf_size = sizeof (struct ext_elf32_fdpic_loadmap)
+	       + (nsegs - 1) * sizeof (struct ext_elf32_fdpic_loadseg);
+  ext_ldmbuf = xmalloc (ext_ldmbuf_size);
+
+  /* Copy over the portion of the loadmap that's already been read.  */
+  memcpy (ext_ldmbuf, &ext_ldmbuf_partial, sizeof ext_ldmbuf_partial);
+
+  /* Read the rest of the loadmap from the target.  */
+  if (target_read_memory (ldmaddr + sizeof ext_ldmbuf_partial,
+			  (gdb_byte *) ext_ldmbuf + sizeof ext_ldmbuf_partial,
+			  ext_ldmbuf_size - sizeof ext_ldmbuf_partial))
+    {
+      /* Couldn't read rest of the loadmap.  */
+      xfree (ext_ldmbuf);
+      return NULL;
+    }
+
+  /* Allocate space into which to put information extract from the
+     external loadsegs.  I.e, allocate the internal loadsegs.  */
+  int_ldmbuf_size = sizeof (struct int_elf32_fdpic_loadmap)
+	       + (nsegs - 1) * sizeof (struct int_elf32_fdpic_loadseg);
+  int_ldmbuf = xmalloc (int_ldmbuf_size);
+
+  /* Place extracted information in internal structs.  */
+  int_ldmbuf->version = version;
+  int_ldmbuf->nsegs = nsegs;
+  for (seg = 0; seg < nsegs; seg++)
+    {
+      int_ldmbuf->segs[seg].addr
+	= extract_unsigned_integer (ext_ldmbuf->segs[seg].addr,
+				    sizeof (ext_ldmbuf->segs[seg].addr));
+      int_ldmbuf->segs[seg].p_vaddr
+	= extract_unsigned_integer (ext_ldmbuf->segs[seg].p_vaddr,
+				    sizeof (ext_ldmbuf->segs[seg].p_vaddr));
+      int_ldmbuf->segs[seg].p_memsz
+	= extract_unsigned_integer (ext_ldmbuf->segs[seg].p_memsz,
+				    sizeof (ext_ldmbuf->segs[seg].p_memsz));
+    }
+
+  xfree (ext_ldmbuf);
+  return int_ldmbuf;
+}
+
+/* External link_map and elf32_fdpic_loadaddr struct definitions.  */
+
+typedef gdb_byte ext_ptr[4];
+
+struct ext_elf32_fdpic_loadaddr
+{
+  ext_ptr map;			/* struct elf32_fdpic_loadmap *map; */
+  ext_ptr got_value;		/* void *got_value; */
+};
+
+struct ext_link_map
+{
+  struct ext_elf32_fdpic_loadaddr l_addr;
+
+  /* Absolute file name object was found in.  */
+  ext_ptr l_name;		/* char *l_name; */
+
+  /* Dynamic section of the shared object.  */
+  ext_ptr l_ld;			/* ElfW(Dyn) *l_ld; */
+
+  /* Chain of loaded objects.  */
+  ext_ptr l_next, l_prev;	/* struct link_map *l_next, *l_prev; */
+};
+
+/* Link map info to include in an allocated so_list entry */
+
+struct lm_info
+  {
+    /* The loadmap, digested into an easier to use form.  */
+    struct int_elf32_fdpic_loadmap *map;
+    /* The GOT address for this link map entry.  */
+    CORE_ADDR got_value;
+    /* The link map address, needed for ubicom32_fetch_objfile_link_map().  */
+    CORE_ADDR lm_addr;
+
+    /* Cached dynamic symbol table and dynamic relocs initialized and
+       used only by find_canonical_descriptor_in_load_object().
+
+       Note: kevinb/2004-02-26: It appears that calls to
+       bfd_canonicalize_dynamic_reloc() will use the same symbols as
+       those supplied to the first call to this function.  Therefore,
+       it's important to NOT free the asymbol ** data structure
+       supplied to the first call.  Thus the caching of the dynamic
+       symbols (dyn_syms) is critical for correct operation.  The
+       caching of the dynamic relocations could be dispensed with.  */
+    asymbol **dyn_syms;
+    arelent **dyn_relocs;
+    int dyn_reloc_count;	/* number of dynamic relocs.  */
+
+  };
+
+/* The load map, got value, etc. are not available from the chain
+   of loaded shared objects.  ``main_executable_lm_info'' provides
+   a way to get at this information so that it doesn't need to be
+   frequently recomputed.  Initialized by ubicom32_relocate_main_executable().  */
+static struct lm_info *main_executable_lm_info;
+
+static void ubicom32_relocate_main_executable (void);
+static CORE_ADDR main_got (void);
+static int enable_break2 (void);
+
+/*
+
+   LOCAL FUNCTION
+
+   bfd_lookup_symbol -- lookup the value for a specific symbol
+
+   SYNOPSIS
+
+   CORE_ADDR bfd_lookup_symbol (bfd *abfd, char *symname)
+
+   DESCRIPTION
+
+   An expensive way to lookup the value of a single symbol for
+   bfd's that are only temporary anyway.  This is used by the
+   shared library support to find the address of the debugger
+   interface structures in the shared library.
+
+   Note that 0 is specifically allowed as an error return (no
+   such symbol).
+ */
+
+static CORE_ADDR
+bfd_lookup_symbol (bfd *abfd, char *symname)
+{
+  long storage_needed;
+  asymbol *sym;
+  asymbol **symbol_table;
+  unsigned int number_of_symbols;
+  unsigned int i;
+  struct cleanup *back_to;
+  CORE_ADDR symaddr = 0;
+
+  storage_needed = bfd_get_symtab_upper_bound (abfd);
+
+  if (storage_needed > 0)
+    {
+      symbol_table = (asymbol **) xmalloc (storage_needed);
+      back_to = make_cleanup (xfree, symbol_table);
+      number_of_symbols = bfd_canonicalize_symtab (abfd, symbol_table);
+
+      for (i = 0; i < number_of_symbols; i++)
+	{
+	  sym = *symbol_table++;
+	  if (strcmp (sym->name, symname) == 0)
+	    {
+	      /* Bfd symbols are section relative. */
+	      symaddr = sym->value + sym->section->vma;
+	      break;
+	    }
+	}
+      do_cleanups (back_to);
+    }
+
+  if (symaddr)
+    return symaddr;
+
+  /* Look for the symbol in the dynamic string table too.  */
+
+  storage_needed = bfd_get_dynamic_symtab_upper_bound (abfd);
+
+  if (storage_needed > 0)
+    {
+      symbol_table = (asymbol **) xmalloc (storage_needed);
+      back_to = make_cleanup (xfree, symbol_table);
+      number_of_symbols = bfd_canonicalize_dynamic_symtab (abfd, symbol_table);
+
+      for (i = 0; i < number_of_symbols; i++)
+	{
+	  sym = *symbol_table++;
+	  if (strcmp (sym->name, symname) == 0)
+	    {
+	      /* Bfd symbols are section relative. */
+	      symaddr = sym->value + sym->section->vma;
+	      break;
+	    }
+	}
+      do_cleanups (back_to);
+    }
+
+  return symaddr;
+}
+
+
+/*
+
+  LOCAL FUNCTION
+
+  open_symbol_file_object
+
+  SYNOPSIS
+
+  void open_symbol_file_object (void *from_tty)
+
+  DESCRIPTION
+
+  If no open symbol file, attempt to locate and open the main symbol
+  file.
+
+  If FROM_TTYP dereferences to a non-zero integer, allow messages to
+  be printed.  This parameter is a pointer rather than an int because
+  open_symbol_file_object() is called via catch_errors() and
+  catch_errors() requires a pointer argument. */
+
+static int
+open_symbol_file_object (void *from_ttyp)
+{
+  /* Unimplemented.  */
+  return 0;
+}
+
+/* Cached value for lm_base(), below.  */
+static CORE_ADDR lm_base_cache = 0;
+
+/* Link map address for main module.  */
+static CORE_ADDR main_lm_addr = 0;
+
+/* Return the address from which the link map chain may be found.  On
+   the UBICOM32, this may be found in a number of ways.  Assuming that the
+   main executable has already been relocated, the easiest way to find
+   this value is to look up the address of _GLOBAL_OFFSET_TABLE_.  A
+   pointer to the start of the link map will be located at the word found
+   at _GLOBAL_OFFSET_TABLE_ + 8.  (This is part of the dynamic linker
+   reserve area mandated by the ABI.)  */
+
+static CORE_ADDR
+lm_base (void)
+{
+  struct minimal_symbol *got_sym;
+  CORE_ADDR addr;
+  gdb_byte buf[UBICOM32_PTR_SIZE];
+
+  /* One of our assumptions is that the main executable has been relocated.
+     Bail out if this has not happened.  (Note that post_create_inferior()
+     in infcmd.c will call solib_add prior to solib_create_inferior_hook().
+     If we allow this to happen, lm_base_cache will be initialized with
+     a bogus value.  */
+  if (main_executable_lm_info == 0)
+    return 0;
+
+  /* If we already have a cached value, return it.  */
+  if (lm_base_cache)
+    return lm_base_cache;
+
+  got_sym = lookup_minimal_symbol ("_GLOBAL_OFFSET_TABLE_", NULL,
+				   symfile_objfile);
+  if (got_sym == 0)
+    {
+      if (solib_ubicom32_debug)
+	fprintf_unfiltered (gdb_stdlog,
+			    "lm_base: _GLOBAL_OFFSET_TABLE_ not found.\n");
+      return 0;
+    }
+
+  addr = SYMBOL_VALUE_ADDRESS (got_sym) + 8;
+
+  if (solib_ubicom32_debug)
+    fprintf_unfiltered (gdb_stdlog,
+			"lm_base: _GLOBAL_OFFSET_TABLE_ + 8 = %s\n",
+			hex_string_custom (addr, 8));
+
+  if (target_read_memory (addr, buf, sizeof buf) != 0)
+    return 0;
+  lm_base_cache = extract_unsigned_integer (buf, sizeof buf);
+
+  if (solib_ubicom32_debug)
+    fprintf_unfiltered (gdb_stdlog,
+			"lm_base: lm_base_cache = %s\n",
+			hex_string_custom (lm_base_cache, 8));
+
+  return lm_base_cache;
+}
+
+
+/* LOCAL FUNCTION
+
+   ubicom32_current_sos -- build a list of currently loaded shared objects
+
+   SYNOPSIS
+
+   struct so_list *ubicom32_current_sos ()
+
+   DESCRIPTION
+
+   Build a list of `struct so_list' objects describing the shared
+   objects currently loaded in the inferior.  This list does not
+   include an entry for the main executable file.
+
+   Note that we only gather information directly available from the
+   inferior --- we don't examine any of the shared library files
+   themselves.  The declaration of `struct so_list' says which fields
+   we provide values for.  */
+
+static struct so_list *
+ubicom32_current_sos (void)
+{
+  CORE_ADDR lm_addr, mgot;
+  struct so_list *sos_head = NULL;
+  struct so_list **sos_next_ptr = &sos_head;
+
+  /* Make sure that the main executable has been relocated.  This is
+     required in order to find the address of the global offset table,
+     which in turn is used to find the link map info.  (See lm_base()
+     for details.)
+
+     Note that the relocation of the main executable is also performed
+     by SOLIB_CREATE_INFERIOR_HOOK(), however, in the case of core
+     files, this hook is called too late in order to be of benefit to
+     SOLIB_ADD.  SOLIB_ADD eventually calls this this function,
+     ubicom32_current_sos, and also precedes the call to
+     SOLIB_CREATE_INFERIOR_HOOK().   (See post_create_inferior() in
+     infcmd.c.)  */
+  if (main_executable_lm_info == 0 && core_bfd != NULL)
+    ubicom32_relocate_main_executable ();
+
+  /* Fetch the GOT corresponding to the main executable.  */
+  mgot = main_got ();
+
+  /* Locate the address of the first link map struct.  */
+  lm_addr = lm_base ();
+
+  /* We have at least one link map entry.  Fetch the the lot of them,
+     building the solist chain.  */
+  while (lm_addr)
+    {
+      struct ext_link_map lm_buf;
+      CORE_ADDR got_addr;
+
+      if (solib_ubicom32_debug)
+	fprintf_unfiltered (gdb_stdlog,
+			    "current_sos: reading link_map entry at %s\n",
+			    hex_string_custom (lm_addr, 8));
+
+      if (target_read_memory (lm_addr, (gdb_byte *) &lm_buf, sizeof (lm_buf)) != 0)
+	{
+	  warning (_("ubicom32_current_sos: Unable to read link map entry.  Shared object chain may be incomplete."));
+	  break;
+	}
+
+      got_addr
+	= extract_unsigned_integer (lm_buf.l_addr.got_value,
+				    sizeof (lm_buf.l_addr.got_value));
+      /* If the got_addr is the same as mgotr, then we're looking at the
+	 entry for the main executable.  By convention, we don't include
+	 this in the list of shared objects.  */
+      if (got_addr != mgot)
+	{
+	  int errcode;
+	  char *name_buf;
+	  struct int_elf32_fdpic_loadmap *loadmap;
+	  struct so_list *sop;
+	  CORE_ADDR addr;
+
+	  /* Fetch the load map address.  */
+	  addr = extract_unsigned_integer (lm_buf.l_addr.map,
+					   sizeof lm_buf.l_addr.map);
+	  loadmap = fetch_loadmap (addr);
+	  if (loadmap == NULL)
+	    {
+	      warning (_("ubicom32_current_sos: Unable to fetch load map.  Shared object chain may be incomplete."));
+	      break;
+	    }
+
+	  sop = xcalloc (1, sizeof (struct so_list));
+	  sop->lm_info = xcalloc (1, sizeof (struct lm_info));
+	  sop->lm_info->map = loadmap;
+	  sop->lm_info->got_value = got_addr;
+	  sop->lm_info->lm_addr = lm_addr;
+	  /* Fetch the name.  */
+	  addr = extract_unsigned_integer (lm_buf.l_name,
+					   sizeof (lm_buf.l_name));
+	  target_read_string (addr, &name_buf, SO_NAME_MAX_PATH_SIZE - 1,
+			      &errcode);
+
+	  if (solib_ubicom32_debug)
+	    fprintf_unfiltered (gdb_stdlog, "current_sos: name = %s\n",
+				name_buf);
+
+	  if (errcode != 0)
+	    warning (_("Can't read pathname for link map entry: %s."),
+		     safe_strerror (errcode));
+	  else
+	    {
+	      strncpy (sop->so_name, name_buf, SO_NAME_MAX_PATH_SIZE - 1);
+	      sop->so_name[SO_NAME_MAX_PATH_SIZE - 1] = '\0';
+	      xfree (name_buf);
+	      strcpy (sop->so_original_name, sop->so_name);
+	    }
+
+	  *sos_next_ptr = sop;
+	  sos_next_ptr = &sop->next;
+	}
+      else
+	{
+	  main_lm_addr = lm_addr;
+	}
+
+      lm_addr = extract_unsigned_integer (lm_buf.l_next, sizeof (lm_buf.l_next));
+    }
+
+  enable_break2 ();
+
+  return sos_head;
+}
+
+
+/* Return 1 if PC lies in the dynamic symbol resolution code of the
+   run time loader.  */
+
+static CORE_ADDR interp_text_sect_low;
+static CORE_ADDR interp_text_sect_high;
+static CORE_ADDR interp_plt_sect_low;
+static CORE_ADDR interp_plt_sect_high;
+
+static int
+ubicom32_in_dynsym_resolve_code (CORE_ADDR pc)
+{
+  return ((pc >= interp_text_sect_low && pc < interp_text_sect_high)
+	  || (pc >= interp_plt_sect_low && pc < interp_plt_sect_high)
+	  || in_plt_section (pc, NULL));
+}
+
+/* Given a loadmap and an address, return the displacement needed
+   to relocate the address.  */
+
+CORE_ADDR
+displacement_from_map (struct int_elf32_fdpic_loadmap *map,
+		       CORE_ADDR addr)
+{
+  int seg;
+
+  for (seg = 0; seg < map->nsegs; seg++)
+    {
+      if (map->segs[seg].p_vaddr <= addr
+	  && addr < map->segs[seg].p_vaddr + map->segs[seg].p_memsz)
+	{
+	  return map->segs[seg].addr - map->segs[seg].p_vaddr;
+	}
+    }
+
+  return 0;
+}
+
+/* Print a warning about being unable to set the dynamic linker
+   breakpoint.  */
+
+static void
+enable_break_failure_warning (void)
+{
+  warning (_("Unable to find dynamic linker breakpoint function.\n"
+	   "GDB will be unable to debug shared library initializers\n"
+	   "and track explicitly loaded dynamic code."));
+}
+
+/*
+
+   LOCAL FUNCTION
+
+   enable_break -- arrange for dynamic linker to hit breakpoint
+
+   SYNOPSIS
+
+   int enable_break (void)
+
+   DESCRIPTION
+
+   The dynamic linkers has, as part of its debugger interface, support
+   for arranging for the inferior to hit a breakpoint after mapping in
+   the shared libraries.  This function enables that breakpoint.
+
+   On the UBICOM32, using the shared library (FDPIC) ABI, the symbol
+   _dl_debug_addr points to the r_debug struct which contains
+   a field called r_brk.  r_brk is the address of the function
+   descriptor upon which a breakpoint must be placed.  Being a
+   function descriptor, we must extract the entry point in order
+   to set the breakpoint.
+
+   Our strategy will be to get the .interp section from the
+   executable.  This section will provide us with the name of the
+   interpreter.  We'll open the interpreter and then look up
+   the address of _dl_debug_addr.  We then relocate this address
+   using the interpreter's loadmap.  Once the relocated address
+   is known, we fetch the value (address) corresponding to r_brk
+   and then use that value to fetch the entry point of the function
+   we're interested in.
+
+ */
+
+static int enable_break1_done = 0;
+static int enable_break2_done = 0;
+
+static int
+enable_break2 (void)
+{
+  int success = 0;
+  char **bkpt_namep;
+  asection *interp_sect;
+
+  if (!enable_break1_done || enable_break2_done)
+    return 1;
+
+  enable_break2_done = 1;
+
+  /* First, remove all the solib event breakpoints.  Their addresses
+     may have changed since the last time we ran the program.  */
+  remove_solib_event_breakpoints ();
+
+  interp_text_sect_low = interp_text_sect_high = 0;
+  interp_plt_sect_low = interp_plt_sect_high = 0;
+
+  /* Find the .interp section; if not found, warn the user and drop
+     into the old breakpoint at symbol code.  */
+  interp_sect = bfd_get_section_by_name (exec_bfd, ".interp");
+  if (interp_sect)
+    {
+      unsigned int interp_sect_size;
+      gdb_byte *buf;
+      bfd *tmp_bfd = NULL;
+      int tmp_fd = -1;
+      char *tmp_pathname = NULL;
+      int status;
+      CORE_ADDR addr, interp_loadmap_addr;
+      gdb_byte addr_buf[UBICOM32_PTR_SIZE];
+      struct int_elf32_fdpic_loadmap *ldm;
+
+      /* Read the contents of the .interp section into a local buffer;
+	 the contents specify the dynamic linker this program uses.  */
+      interp_sect_size = bfd_section_size (exec_bfd, interp_sect);
+      buf = alloca (interp_sect_size);
+      bfd_get_section_contents (exec_bfd, interp_sect,
+				buf, 0, interp_sect_size);
+
+      /* Now we need to figure out where the dynamic linker was
+	 loaded so that we can load its symbols and place a breakpoint
+	 in the dynamic linker itself.
+
+	 This address is stored on the stack.  However, I've been unable
+	 to find any magic formula to find it for Solaris (appears to
+	 be trivial on GNU/Linux).  Therefore, we have to try an alternate
+	 mechanism to find the dynamic linker's base address.  */
+
+      tmp_fd  = solib_open (buf, &tmp_pathname);
+      if (tmp_fd >= 0)
+	tmp_bfd = bfd_fopen (tmp_pathname, gnutarget, FOPEN_RB, tmp_fd);
+
+      if (tmp_bfd == NULL)
+	{
+	  enable_break_failure_warning ();
+	  return 0;
+	}
+
+      /* Make sure the dynamic linker is really a useful object.  */
+      if (!bfd_check_format (tmp_bfd, bfd_object))
+	{
+	  warning (_("Unable to grok dynamic linker %s as an object file"), buf);
+	  enable_break_failure_warning ();
+	  bfd_close (tmp_bfd);
+	  return 0;
+	}
+
+      status = ubicom32_fdpic_loadmap_addresses (current_gdbarch,
+					    &interp_loadmap_addr, 0);
+      if (status < 0)
+	{
+	  warning (_("Unable to determine dynamic linker loadmap address."));
+	  enable_break_failure_warning ();
+	  bfd_close (tmp_bfd);
+	  return 0;
+	}
+
+      if (solib_ubicom32_debug)
+	fprintf_unfiltered (gdb_stdlog,
+			    "enable_break: interp_loadmap_addr = %s\n",
+			    hex_string_custom (interp_loadmap_addr, 8));
+
+      ldm = fetch_loadmap (interp_loadmap_addr);
+      if (ldm == NULL)
+	{
+	  warning (_("Unable to load dynamic linker loadmap at address %s."),
+		   hex_string_custom (interp_loadmap_addr, 8));
+	  enable_break_failure_warning ();
+	  bfd_close (tmp_bfd);
+	  return 0;
+	}
+
+      /* Record the relocated start and end address of the dynamic linker
+	 text and plt section for svr4_in_dynsym_resolve_code.  */
+      interp_sect = bfd_get_section_by_name (tmp_bfd, ".text");
+      if (interp_sect)
+	{
+	  interp_text_sect_low
+	    = bfd_section_vma (tmp_bfd, interp_sect);
+	  interp_text_sect_low
+	    += displacement_from_map (ldm, interp_text_sect_low);
+	  interp_text_sect_high
+	    = interp_text_sect_low + bfd_section_size (tmp_bfd, interp_sect);
+	}
+      interp_sect = bfd_get_section_by_name (tmp_bfd, ".plt");
+      if (interp_sect)
+	{
+	  interp_plt_sect_low =
+	    bfd_section_vma (tmp_bfd, interp_sect);
+	  interp_plt_sect_low
+	    += displacement_from_map (ldm, interp_plt_sect_low);
+	  interp_plt_sect_high =
+	    interp_plt_sect_low + bfd_section_size (tmp_bfd, interp_sect);
+	}
+
+      addr = bfd_lookup_symbol (tmp_bfd, "_dl_debug_addr");
+      if (addr == 0)
+	{
+	  warning (_("Could not find symbol _dl_debug_addr in dynamic linker"));
+	  enable_break_failure_warning ();
+	  bfd_close (tmp_bfd);
+	  return 0;
+	}
+
+      if (solib_ubicom32_debug)
+	fprintf_unfiltered (gdb_stdlog,
+			    "enable_break: _dl_debug_addr (prior to relocation) = %s\n",
+			    hex_string_custom (addr, 8));
+
+      addr += displacement_from_map (ldm, addr);
+
+      if (solib_ubicom32_debug)
+	fprintf_unfiltered (gdb_stdlog,
+			    "enable_break: _dl_debug_addr (after relocation) = %s\n",
+			    hex_string_custom (addr, 8));
+
+      /* Fetch the address of the r_debug struct.  */
+      if (target_read_memory (addr, addr_buf, sizeof addr_buf) != 0)
+	{
+	  warning (_("Unable to fetch contents of _dl_debug_addr (at address %s) from dynamic linker"),
+		   hex_string_custom (addr, 8));
+	}
+      addr = extract_unsigned_integer (addr_buf, sizeof addr_buf);
+
+      /* Fetch the r_brk field.  It's 8 bytes from the start of
+	 _dl_debug_addr.  */
+      if (target_read_memory (addr + 8, addr_buf, sizeof addr_buf) != 0)
+	{
+	  warning (_("Unable to fetch _dl_debug_addr->r_brk (at address %s) from dynamic linker"),
+		   hex_string_custom (addr + 8, 8));
+	  enable_break_failure_warning ();
+	  bfd_close (tmp_bfd);
+	  return 0;
+	}
+      addr = extract_unsigned_integer (addr_buf, sizeof addr_buf);
+
+      /* Now fetch the function entry point.  */
+      if (target_read_memory (addr, addr_buf, sizeof addr_buf) != 0)
+	{
+	  warning (_("Unable to fetch _dl_debug_addr->.r_brk entry point (at address %s) from dynamic linker"),
+		   hex_string_custom (addr, 8));
+	  enable_break_failure_warning ();
+	  bfd_close (tmp_bfd);
+	  return 0;
+	}
+      addr = extract_unsigned_integer (addr_buf, sizeof addr_buf);
+
+      /* We're done with the temporary bfd.  */
+      bfd_close (tmp_bfd);
+
+      /* We're also done with the loadmap.  */
+      xfree (ldm);
+
+      /* Now (finally!) create the solib breakpoint.  */
+      create_solib_event_breakpoint (addr);
+
+      return 1;
+    }
+
+  /* Tell the user we couldn't set a dynamic linker breakpoint.  */
+  enable_break_failure_warning ();
+
+  /* Failure return.  */
+  return 0;
+}
+
+static int
+enable_break (void)
+{
+  asection *interp_sect;
+
+  /* Remove all the solib event breakpoints.  Their addresses
+     may have changed since the last time we ran the program.  */
+  remove_solib_event_breakpoints ();
+
+  /* Check for the presence of a .interp section.  If there is no
+     such section, the executable is statically linked.  */
+
+  interp_sect = bfd_get_section_by_name (exec_bfd, ".interp");
+
+  if (interp_sect)
+    {
+      enable_break1_done = 1;
+      create_solib_event_breakpoint (symfile_objfile->ei.entry_point);
+
+      if (solib_ubicom32_debug)
+	fprintf_unfiltered (gdb_stdlog,
+			    "enable_break: solib event breakpoint placed at entry point: %s\n",
+			    hex_string_custom
+			      (symfile_objfile->ei.entry_point, 8));
+    }
+  else
+    {
+      if (solib_ubicom32_debug)
+	fprintf_unfiltered (gdb_stdlog,
+			    "enable_break: No .interp section found.\n");
+    }
+
+  return 1;
+}
+
+/*
+
+   LOCAL FUNCTION
+
+   special_symbol_handling -- additional shared library symbol handling
+
+   SYNOPSIS
+
+   void special_symbol_handling ()
+
+   DESCRIPTION
+
+   Once the symbols from a shared object have been loaded in the usual
+   way, we are called to do any system specific symbol handling that
+   is needed.
+
+ */
+
+static void
+ubicom32_special_symbol_handling (void)
+{
+  /* Nothing needed (yet) for UBICOM32. */
+}
+
+static void
+ubicom32_relocate_main_executable (void)
+{
+  int status;
+  CORE_ADDR exec_addr;
+  struct int_elf32_fdpic_loadmap *ldm;
+  struct cleanup *old_chain;
+  struct section_offsets *new_offsets;
+  int changed;
+  struct obj_section *osect;
+
+  status = ubicom32_fdpic_loadmap_addresses (current_gdbarch, 0, &exec_addr);
+
+  if (status < 0)
+    {
+      /* Not using FDPIC ABI, so do nothing.  */
+      return;
+    }
+
+  /* Fetch the loadmap located at ``exec_addr''.  */
+  ldm = fetch_loadmap (exec_addr);
+  if (ldm == NULL)
+    error (_("Unable to load the executable's loadmap."));
+
+  if (main_executable_lm_info)
+    xfree (main_executable_lm_info);
+  main_executable_lm_info = xcalloc (1, sizeof (struct lm_info));
+  main_executable_lm_info->map = ldm;
+
+  new_offsets = xcalloc (symfile_objfile->num_sections,
+			 sizeof (struct section_offsets));
+  old_chain = make_cleanup (xfree, new_offsets);
+  changed = 0;
+
+  ALL_OBJFILE_OSECTIONS (symfile_objfile, osect)
+    {
+      CORE_ADDR orig_addr, addr, offset;
+      int osect_idx;
+      int seg;
+
+      osect_idx = osect->the_bfd_section->index;
+
+      /* Current address of section.  */
+      addr = osect->addr;
+      /* Offset from where this section started.  */
+      offset = ANOFFSET (symfile_objfile->section_offsets, osect_idx);
+      /* Original address prior to any past relocations.  */
+      orig_addr = addr - offset;
+
+      for (seg = 0; seg < ldm->nsegs; seg++)
+	{
+	  if (ldm->segs[seg].p_vaddr <= orig_addr
+	      && orig_addr < ldm->segs[seg].p_vaddr + ldm->segs[seg].p_memsz)
+	    {
+	      new_offsets->offsets[osect_idx]
+		= ldm->segs[seg].addr - ldm->segs[seg].p_vaddr;
+
+	      if (new_offsets->offsets[osect_idx] != offset)
+		changed = 1;
+	      break;
+	    }
+	}
+    }
+
+  if (changed)
+    objfile_relocate (symfile_objfile, new_offsets);
+
+  do_cleanups (old_chain);
+
+  /* Now that symfile_objfile has been relocated, we can compute the
+     GOT value and stash it away.  */
+  main_executable_lm_info->got_value = main_got ();
+}
+
+/*
+
+   GLOBAL FUNCTION
+
+   ubicom32_solib_create_inferior_hook -- shared library startup support
+
+   SYNOPSIS
+
+   void ubicom32_solib_create_inferior_hook ()
+
+   DESCRIPTION
+
+   When gdb starts up the inferior, it nurses it along (through the
+   shell) until it is ready to execute it's first instruction.  At this
+   point, this function gets called via expansion of the macro
+   SOLIB_CREATE_INFERIOR_HOOK.
+
+   For the UBICOM32 shared library ABI (FDPIC), the main executable
+   needs to be relocated.  The shared library breakpoints also need
+   to be enabled.
+ */
+
+static void
+ubicom32_solib_create_inferior_hook (void)
+{
+  /* Relocate main executable.  */
+  ubicom32_relocate_main_executable ();
+
+  /* Enable shared library breakpoints.  */
+  if (!enable_break ())
+    {
+      warning (_("shared library handler failed to enable breakpoint"));
+      return;
+    }
+}
+
+static void
+ubicom32_clear_solib (void)
+{
+  lm_base_cache = 0;
+  enable_break1_done = 0;
+  enable_break2_done = 0;
+  main_lm_addr = 0;
+  if (main_executable_lm_info != 0)
+    {
+      xfree (main_executable_lm_info->map);
+      xfree (main_executable_lm_info->dyn_syms);
+      xfree (main_executable_lm_info->dyn_relocs);
+      xfree (main_executable_lm_info);
+      main_executable_lm_info = 0;
+    }
+}
+
+static void
+ubicom32_free_so (struct so_list *so)
+{
+  xfree (so->lm_info->map);
+  xfree (so->lm_info->dyn_syms);
+  xfree (so->lm_info->dyn_relocs);
+  xfree (so->lm_info);
+}
+
+static void
+ubicom32_relocate_section_addresses (struct so_list *so,
+				 struct section_table *sec)
+{
+  int seg;
+  struct int_elf32_fdpic_loadmap *map;
+
+  map = so->lm_info->map;
+
+  for (seg = 0; seg < map->nsegs; seg++)
+    {
+      if (map->segs[seg].p_vaddr <= sec->addr
+	  && sec->addr < map->segs[seg].p_vaddr + map->segs[seg].p_memsz)
+	{
+	  CORE_ADDR displ = map->segs[seg].addr - map->segs[seg].p_vaddr;
+	  sec->addr += displ;
+	  sec->endaddr += displ;
+	  break;
+	}
+    }
+}
+
+/* Return the GOT address associated with the main executable.  Return
+   0 if it can't be found.  */
+
+static CORE_ADDR
+main_got (void)
+{
+  struct minimal_symbol *got_sym;
+
+  got_sym = lookup_minimal_symbol ("_GLOBAL_OFFSET_TABLE_", NULL, symfile_objfile);
+  if (got_sym == 0)
+    return 0;
+
+  return SYMBOL_VALUE_ADDRESS (got_sym);
+}
+
+/* Find the global pointer for the given function address ADDR.  */
+
+CORE_ADDR
+ubicom32_fdpic_find_global_pointer (CORE_ADDR addr)
+{
+  struct so_list *so;
+
+  so = master_so_list ();
+  while (so)
+    {
+      int seg;
+      struct int_elf32_fdpic_loadmap *map;
+
+      map = so->lm_info->map;
+
+      for (seg = 0; seg < map->nsegs; seg++)
+	{
+	  if (map->segs[seg].addr <= addr
+	      && addr < map->segs[seg].addr + map->segs[seg].p_memsz)
+	    return so->lm_info->got_value;
+	}
+
+      so = so->next;
+    }
+
+  /* Didn't find it it any of the shared objects.  So assume it's in the
+     main executable.  */
+  return main_got ();
+}
+
+/* Forward declarations for ubicom32_fdpic_find_canonical_descriptor().  */
+static CORE_ADDR find_canonical_descriptor_in_load_object
+  (CORE_ADDR, CORE_ADDR, char *, bfd *, struct lm_info *);
+
+/* Given a function entry point, attempt to find the canonical descriptor
+   associated with that entry point.  Return 0 if no canonical descriptor
+   could be found.  */
+
+CORE_ADDR
+ubicom32_fdpic_find_canonical_descriptor (CORE_ADDR entry_point)
+{
+  char *name;
+  CORE_ADDR addr;
+  CORE_ADDR got_value;
+  struct int_elf32_fdpic_loadmap *ldm = 0;
+  struct symbol *sym;
+  int status;
+  CORE_ADDR exec_loadmap_addr;
+
+  /* Fetch the corresponding global pointer for the entry point.  */
+  got_value = ubicom32_fdpic_find_global_pointer (entry_point);
+
+  /* Attempt to find the name of the function.  If the name is available,
+     it'll be used as an aid in finding matching functions in the dynamic
+     symbol table.  */
+  sym = find_pc_function (entry_point);
+  if (sym == 0)
+    name = 0;
+  else
+    name = SYMBOL_LINKAGE_NAME (sym);
+
+  /* Check the main executable.  */
+  addr = find_canonical_descriptor_in_load_object
+	   (entry_point, got_value, name, symfile_objfile->obfd,
+	    main_executable_lm_info);
+
+  /* If descriptor not found via main executable, check each load object
+     in list of shared objects.  */
+  if (addr == 0)
+    {
+      struct so_list *so;
+
+      so = master_so_list ();
+      while (so)
+	{
+	  addr = find_canonical_descriptor_in_load_object
+		   (entry_point, got_value, name, so->abfd, so->lm_info);
+
+	  if (addr != 0)
+	    break;
+
+	  so = so->next;
+	}
+    }
+
+  return addr;
+}
+
+static CORE_ADDR
+find_canonical_descriptor_in_load_object
+  (CORE_ADDR entry_point, CORE_ADDR got_value, char *name, bfd *abfd,
+   struct lm_info *lm)
+{
+  arelent *rel;
+  unsigned int i;
+  CORE_ADDR addr = 0;
+
+  /* Nothing to do if no bfd.  */
+  if (abfd == 0)
+    return 0;
+
+  /* Nothing to do if no link map.  */
+  if (lm == 0)
+    return 0;
+
+  /* We want to scan the dynamic relocs for R_UBICOM32_FUNCDESC relocations.
+     (More about this later.)  But in order to fetch the relocs, we
+     need to first fetch the dynamic symbols.  These symbols need to
+     be cached due to the way that bfd_canonicalize_dynamic_reloc()
+     works.  (See the comments in the declaration of struct lm_info
+     for more information.)  */
+  if (lm->dyn_syms == NULL)
+    {
+      long storage_needed;
+      unsigned int number_of_symbols;
+
+      /* Determine amount of space needed to hold the dynamic symbol table.  */
+      storage_needed = bfd_get_dynamic_symtab_upper_bound (abfd);
+
+      /* If there are no dynamic symbols, there's nothing to do.  */
+      if (storage_needed <= 0)
+	return 0;
+
+      /* Allocate space for the dynamic symbol table.  */
+      lm->dyn_syms = (asymbol **) xmalloc (storage_needed);
+
+      /* Fetch the dynamic symbol table.  */
+      number_of_symbols = bfd_canonicalize_dynamic_symtab (abfd, lm->dyn_syms);
+
+      if (number_of_symbols == 0)
+	return 0;
+    }
+
+  /* Fetch the dynamic relocations if not already cached.  */
+  if (lm->dyn_relocs == NULL)
+    {
+      long storage_needed;
+
+      /* Determine amount of space needed to hold the dynamic relocs.  */
+      storage_needed = bfd_get_dynamic_reloc_upper_bound (abfd);
+
+      /* Bail out if there are no dynamic relocs.  */
+      if (storage_needed <= 0)
+	return 0;
+
+      /* Allocate space for the relocs.  */
+      lm->dyn_relocs = (arelent **) xmalloc (storage_needed);
+
+      /* Fetch the dynamic relocs.  */
+      lm->dyn_reloc_count
+	= bfd_canonicalize_dynamic_reloc (abfd, lm->dyn_relocs, lm->dyn_syms);
+    }
+
+  /* Search the dynamic relocs.  */
+  for (i = 0; i < lm->dyn_reloc_count; i++)
+    {
+      rel = lm->dyn_relocs[i];
+
+      /* Relocs of interest are those which meet the following
+	 criteria:
+
+	   - the names match (assuming the caller could provide
+	     a name which matches ``entry_point'').
+	   - the relocation type must be R_UBICOM32_FUNCDESC.  Relocs
+	     of this type are used (by the dynamic linker) to
+	     look up the address of a canonical descriptor (allocating
+	     it if need be) and initializing the GOT entry referred
+	     to by the offset to the address of the descriptor.
+
+	 These relocs of interest may be used to obtain a
+	 candidate descriptor by first adjusting the reloc's
+	 address according to the link map and then dereferencing
+	 this address (which is a GOT entry) to obtain a descriptor
+	 address.  */
+      if ((name == 0 || strcmp (name, (*rel->sym_ptr_ptr)->name) == 0)
+	  && rel->howto->type == R_UBICOM32_FUNCDESC)
+	{
+	  gdb_byte buf [UBICOM32_PTR_SIZE];
+
+	  /* Compute address of address of candidate descriptor.  */
+	  addr = rel->address + displacement_from_map (lm->map, rel->address);
+
+	  /* Fetch address of candidate descriptor.  */
+	  if (target_read_memory (addr, buf, sizeof buf) != 0)
+	    continue;
+	  addr = extract_unsigned_integer (buf, sizeof buf);
+
+	  /* Check for matching entry point.  */
+	  if (target_read_memory (addr, buf, sizeof buf) != 0)
+	    continue;
+	  if (extract_unsigned_integer (buf, sizeof buf) != entry_point)
+	    continue;
+
+	  /* Check for matching got value.  */
+	  if (target_read_memory (addr + 4, buf, sizeof buf) != 0)
+	    continue;
+	  if (extract_unsigned_integer (buf, sizeof buf) != got_value)
+	    continue;
+
+	  /* Match was successful!  Exit loop.  */
+	  break;
+	}
+    }
+
+  return addr;
+}
+
+/* Given an objfile, return the address of its link map.  This value is
+   needed for TLS support.  */
+CORE_ADDR
+ubicom32_fetch_objfile_link_map (struct objfile *objfile)
+{
+  struct so_list *so;
+
+  /* Cause ubicom32_current_sos() to be run if it hasn't been already.  */
+  if (main_lm_addr == 0)
+    solib_add (0, 0, 0, 1);
+
+  /* ubicom32_current_sos() will set main_lm_addr for the main executable.  */
+  if (objfile == symfile_objfile)
+    return main_lm_addr;
+
+  /* The other link map addresses may be found by examining the list
+     of shared libraries.  */
+  for (so = master_so_list (); so; so = so->next)
+    {
+      if (so->objfile == objfile)
+	return so->lm_info->lm_addr;
+    }
+
+  /* Not found!  */
+  return 0;
+}
+
+static struct target_so_ops ubicom32_so_ops;
+
+void
+_initialize_ubicom32_solib (void)
+{
+  ubicom32_so_ops.relocate_section_addresses = ubicom32_relocate_section_addresses;
+  ubicom32_so_ops.free_so = ubicom32_free_so;
+  ubicom32_so_ops.clear_solib = ubicom32_clear_solib;
+  ubicom32_so_ops.solib_create_inferior_hook = ubicom32_solib_create_inferior_hook;
+  ubicom32_so_ops.special_symbol_handling = ubicom32_special_symbol_handling;
+  ubicom32_so_ops.current_sos = ubicom32_current_sos;
+  ubicom32_so_ops.open_symbol_file_object = open_symbol_file_object;
+  ubicom32_so_ops.in_dynsym_resolve_code = ubicom32_in_dynsym_resolve_code;
+
+  /* FIXME: Don't do this here.  *_gdbarch_init() should set so_ops. */
+  current_target_so_ops = &ubicom32_so_ops;
+
+  /* Debug this file's internals.  */
+  add_setshow_zinteger_cmd ("solib-ubicom32", class_maintenance,
+			    &solib_ubicom32_debug, _("\
+Set internal debugging of shared library code for UBICOM32."), _("\
+Show internal debugging of shared library code for UBICOM32."), _("\
+When non-zero, UBICOM32 solib specific internal debugging is enabled."),
+			    NULL,
+			    NULL, /* FIXME: i18n: */
+			    &setdebuglist, &showdebuglist);
+}
--- /dev/null
+++ b/gdb/ubicom32-tdep.c
@@ -0,0 +1,3347 @@
+/* Target-dependent code for Ubicom32, for GDB.
+   Copyright (C) 2000, 2001, 2002 Free Software Foundation, Inc.
+
+   This file is part of GDB.
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 2 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program; if not, write to the Free Software
+   Foundation, Inc., 59 Temple Place - Suite 330,
+   Boston, MA 02111-1307, USA.  */
+
+#include "defs.h"
+#include "frame.h"
+#include "frame-unwind.h"
+#include "frame-base.h"
+#include "trad-frame.h"
+#include "gdbcmd.h"
+#include "gdbcore.h"
+#include "inferior.h"
+#include "symfile.h"
+#include "arch-utils.h"
+#include "regcache.h"
+#include "gdb_assert.h"
+#include "gdb_string.h"
+#include "gdbthread.h"
+#include "dis-asm.h"
+#include "elf-bfd.h"
+#include "elf/ubicom32.h"
+#include "opcodes/ubicom32-desc.h"
+#include "opcodes/ubicom32-opc.h"
+#include "ubicom32-tdep.h"
+#include "objfiles.h"
+
+static enum ubicom32_abi
+ubicom32_abi (struct gdbarch *gdbarch)
+{
+  return gdbarch_tdep (gdbarch)->ubicom32_abi;
+}
+
+/* Fetch the interpreter and executable loadmap addresses (for shared
+   library support) for the FDPIC ABI.  Return 0 if successful, -1 if
+   not.  (E.g, -1 will be returned if the ABI isn't the FDPIC ABI.)  */
+int
+ubicom32_fdpic_loadmap_addresses (struct gdbarch *gdbarch,
+				  CORE_ADDR *interp_addr,
+				  CORE_ADDR *exec_addr)
+{
+  if (ubicom32_abi (gdbarch) != UBICOM32_ABI_FDPIC)
+    return -1;
+  else
+    {
+      struct regcache *regcache = get_current_regcache ();
+
+      if (interp_addr != NULL)
+	{
+	  ULONGEST val;
+	  regcache_cooked_read_unsigned (regcache,
+					 UBICOM32_FDPIC_LOADMAP_INTERP_REGNUM, &val);
+	  *interp_addr = val;
+	}
+      if (exec_addr != NULL)
+	{
+	  ULONGEST val;
+	  regcache_cooked_read_unsigned (regcache,
+					 UBICOM32_FDPIC_LOADMAP_EXEC_REGNUM, &val);
+	  *exec_addr = val;
+	}
+      return 0;
+    }
+}
+
+static int ubicom32v3_frame_chain_valid (struct frame_info *fi);
+static struct type *void_func_ptr = NULL;
+
+/* Per-register information.  */
+struct ubicom32_reg
+  {
+    /* Compile-time-constant fields.  */
+    char *name;			/* register name */
+    int num;			/* target register number */
+    int size;			/* raw size, in bytes */
+    struct type **type;		/* virtual data type */
+    CORE_ADDR mem;		/* register's memory location */
+    int flags;			/* REG_* bitmask */
+
+    /* Run-time-calculated fields.  */
+    int offset;			/* offset in registers[] buffer */
+  };
+
+/* Information about all registers.  find_reg_num() and addr_to_num() rely
+   on this array being sorted by increasing register number and memory
+   location, respectively.  */
+
+struct ubicom32_reg ubicom32_regs[] = {
+  /* General data.  */
+  { "d0", 0, 4, &builtin_type_int32, 0x0, 0 },
+  { "d1", 1, 4, &builtin_type_int32, UBICOM32_D1_REGADDR, 0 },
+  { "d2", 2, 4, &builtin_type_int32, 0x8, 0 },
+  { "d3", 3, 4, &builtin_type_int32, 0xc, 0 },
+  { "d4", 4, 4, &builtin_type_int32, 0x10, 0 },
+  { "d5", 5, 4, &builtin_type_int32, 0x14, 0 },
+  { "d6", 6, 4, &builtin_type_int32, 0x18, 0 },
+  { "d7", 7, 4, &builtin_type_int32, 0x1c, 0 },
+  { "d8", 8, 4, &builtin_type_int32, UBICOM32_D8_REGADDR, 0 },
+  { "d9", 9, 4, &builtin_type_int32, 0x24, 0 },
+  { "d10", 10, 4, &builtin_type_int32, 0x28, 0 },
+  { "d11", 11, 4, &builtin_type_int32, 0x2c, 0 },
+  { "d12", 12, 4, &builtin_type_int32, 0x30, 0 },
+  { "d13", 13, 4, &builtin_type_int32, 0x34, 0 },
+  { "d14", 14, 4, &builtin_type_int32, 0x38, 0 },
+  { "d15", 15, 4, &builtin_type_int32, 0x3c, 0 },
+ /* General address.  */
+  { "a0", UBICOM32_A0_REGNUM, 4, &builtin_type_int32, 0x80, 0 },
+  { "a1", UBICOM32_A1_REGNUM, 4, &builtin_type_int32, 0x84, 0 },
+  { "a2", UBICOM32_A2_REGNUM, 4, &builtin_type_int32, 0x88, 0 },
+  { "a3", UBICOM32_A3_REGNUM, 4, &builtin_type_int32, 0x8c, 0 },
+  { "a4", UBICOM32_A4_REGNUM, 4, &builtin_type_int32, 0x90, 0 },
+  { "a5", UBICOM32_A5_REGNUM, 4, &builtin_type_int32, 0x94, 0 },
+  { "a6", UBICOM32_A6_REGNUM, 4, &builtin_type_int32, UBICOM32_A6_REGADDR, 0 },
+  /* Stack pointer.  */
+  { "sp", UBICOM32_SP_REGNUM, 4, &builtin_type_int32, UBICOM32_SP_REGADDR, 0 },
+  /* High 16 bits of multiply accumulator.  */
+  { "mac_hi", 24, 4, &builtin_type_int32, 0xa0, REG_HIDESOME },
+  /* Low 32 bits of multiply accumulator.  */
+  { "mac_lo", 25, 4, &builtin_type_int32, 0xa4, REG_HIDESOME },
+  /* Rounded and clipped S16.15 image of multiply accumulator.  */
+  { "mac_rc16", 26, 4, &builtin_type_int32, 0xa8, REG_HIDESOME | REG_RDONLY },
+  /* 3rd source operand.  */
+  { "source_3", 27, 4, &builtin_type_uint32, 0xac, 0 },
+  /* Current thread's execution count. */
+  { "context_cnt", 28, 4, &builtin_type_uint32, 0xb0, REG_HIDESOME | REG_RDONLY },
+  /* Control/status.  */
+  { "csr", 29, 4, &builtin_type_uint32, 0xb4, 0 },
+  /* Read-only status.  */
+  { "rosr", UBICOM32_ROSR_REGNUM, 4, &builtin_type_uint32, 0xb8, 0 | REG_RDONLY },
+  /* Iread output.  */
+  { "iread_data", 31, 4, &builtin_type_uint32, 0xbc, 0 },
+  /* Low 32 bits of interrupt mask.  */
+  { "int_mask0", 32, 4, &builtin_type_uint32, 0xc0, REG_HIDESOME },
+  /* High 32 bits of interrupt mask.  */
+  { "int_mask1", 33, 4, &builtin_type_uint32, 0xc4, REG_HIDESOME },
+  /* Program counter.  */
+  { "pc", UBICOM32_PC_REGNUM, 4, &void_func_ptr, 0xd0, 0 },
+  /* Chip identification.  */
+  { "chip_id", 35, 4, &builtin_type_uint32, 0x100, REG_HIDESOME | REG_RDONLY },
+  /* Low 32 bits of interrupt status.  */
+  { "int_stat0", 36, 4, &builtin_type_uint32, 0x104, REG_HIDESOME | REG_RDONLY },
+  /* High 32 bits of interrupt status.  */
+  { "int_stat1", 37, 4, &builtin_type_uint32, 0x108, REG_HIDESOME | REG_RDONLY },
+  /* Set bits in int_stat0.  */
+  { "int_set0", 38, 4, &builtin_type_uint32, 0x114, REG_HIDESOME | REG_WRONLY },
+  /* Set bits in int_stat1.  */
+  { "int_set1", 39, 4, &builtin_type_uint32, 0x118, REG_HIDESOME | REG_WRONLY },
+  /* Clear bits in int_stat0.  */
+  { "int_clr0", 40, 4, &builtin_type_uint32, 0x124, REG_HIDESOME | REG_WRONLY },
+  /* Clear bits in int_stat1.  */
+  { "int_clr1", 41, 4, &builtin_type_uint32, 0x128, REG_HIDESOME | REG_WRONLY },
+  /* Global control.  */
+  { "global_ctrl", 42, 4, &builtin_type_uint32, 0x134, 0 },
+  /* Set bits in mt_active.  */
+  { "mt_active_set", 43, 4, &builtin_type_uint32, 0x13c, REG_HIDESOME | REG_WRONLY },
+  /* Clear bits in mt_active.  */
+  { "mt_active_clr", 44, 4, &builtin_type_uint32, 0x140, REG_HIDESOME | REG_WRONLY },
+  /* Threads active status.  */
+  { "mt_active", UBICOM32_MT_ACTIVE_REGNUM, 4, &builtin_type_uint32, 0x138, REG_HIDESOME | REG_RDONLY },
+  /* Set bits in mt_dbg_active.  */
+  { "mt_dbg_active_set", 46, 4, &builtin_type_uint32, 0x148, REG_HIDESOME | REG_WRONLY },
+  /* Debugging threads active status.  */
+  { "mt_dbg_active", 47, 4, &builtin_type_uint32, 0x144, REG_HIDESOME | REG_RDONLY },
+  /* Threads enabled.  */
+  { "mt_en", UBICOM32_MT_EN_REGNUM, 4, &builtin_type_uint32, 0x14C, REG_HIDESOME },
+  /* Thread priorities.  */
+  { "mt_pri", UBICOM32_MT_PRI_REGNUM, 4, &builtin_type_uint32, 0x150, REG_HIDESOME },
+  /* Thread scheduling policies.  */
+  { "mt_sched", UBICOM32_MT_SCHED_REGNUM, 4, &builtin_type_uint32, 0x154, REG_HIDESOME },
+  /* Clear bits in mt_break.  */
+  { "mt_break_clr", 51, 4, &builtin_type_uint32, 0x15C, REG_HIDESOME | REG_WRONLY },
+  /* Threads stopped on a break condition.  */
+  { "mt_break", 52, 4, &builtin_type_uint32, 0x158, REG_HIDESOME | REG_RDONLY },
+  /* Single-step threads.  */
+  { "mt_single_step", 53, 4, &builtin_type_uint32, 0x160, REG_HIDESOME },
+  /* Threads with minimum delay scheduling constraing.  */
+  { "mt_min_del_en", 54, 4, &builtin_type_uint32, 0x164, REG_HIDESOME },
+
+  /* Debugging threads active status clear register.  */
+  { "mt_dbg_active_clr", 55, 4, &builtin_type_int32, 0x17c, REG_HIDESOME | REG_WRONLY },
+  /* Parity Error Address.  */
+  { "perr_addr", 56, 4, &builtin_type_uint32, 0x16c, REG_HIDESOME | REG_RDONLY },
+  /* Thread that wrote to dcapt.  */
+  { "dcapt_thread", 57, 4, &builtin_type_uint32, 0x178, REG_HIDESOME | REG_RDONLY },
+  /* PC at which thread wrote to dcapt.  */
+  { "dcapt_pc", 58, 4, &builtin_type_uint32, 0x174, REG_HIDESOME | REG_RDONLY },
+  /* Data capture address.  */
+  { "dcapt", 59, 4, &builtin_type_uint32, 0x170, REG_HIDESOME },
+  /* scratchpad registers */
+  { "scratchpad0", 60, 4, &builtin_type_uint32, 0x180, 0 },
+  { "scratchpad1", 61, 4, &builtin_type_uint32, 0x184, 0 },
+  { "scratchpad2", 62, 4, &builtin_type_uint32, 0x188, 0 },
+  { "scratchpad3", 63, 4, &builtin_type_uint32, 0x18c, 0 },
+
+  /* High 16 bits of multiply accumulator1.  */
+  { "acc1_hi", 64, 4, &builtin_type_int32, 0xe0, REG_HIDESOME },
+  /* Low 32 bits of multiply accumulator1.  */
+  { "acc1_lo", 65, 4, &builtin_type_int32, 0xe4, REG_HIDESOME },
+  /* Hidden register to change threads in SID.  */
+  { NULL, UBICOM32_GDB_THREAD_REGNUM, 4, &builtin_type_uint32, -1, REG_RDONLY },
+};
+
+/* Number of registers.  */
+enum {
+  NUM_UBICOM32_REGS = sizeof (ubicom32_regs) / sizeof (ubicom32_regs[0])
+};
+
+/* Indices into 2-element arrays representing "info all-registers" and "info
+   registers" formatting information.  */
+enum {
+  SOME = 0,
+  ALL  = 1
+};
+
+/* Register display information.  */
+
+struct ubicom32_regdisp
+  {
+    char *rawbuf;		/* space for any raw register value */
+    int namemax[2];		/* longest name in "info registers" and "info
+				   all-registers" */
+  };
+
+struct ubicom32_machine
+{
+  struct ubicom32_reg * regs;	/* Poiner to Machine register infromation database */
+  unsigned int num_regs;	/* Number of entries in register data base. */
+  struct gdbarch *gdbarch;	/* Associated gdbarch pointer. NULL if uninitialized */
+  struct ubicom32_regdisp regdisp;	/* Register display information */
+  struct gdbarch * (*arch_init_fn)(struct gdbarch_info info, struct gdbarch_list *arches); /* Arch initialization function */
+  int (*frame_chain_valid) (struct frame_info *fi); /* Frame chain valid function. */
+  unsigned int pc_regnum;	/* Index for PC register */
+  unsigned int sp_regnum;	/* Index for SP register */
+};
+
+struct ubicom32_machine *current_machine;
+
+/* Thread debugging
+   ----------------
+
+   The Ubicom32 has up to 8 hardware "threads", each of which is an execution
+   context with its own stack and register set.  The hardware steps each
+   thread one at a time in an order determined by various user-settable
+   scheduling parameters.
+
+   The multi-threading state is accessible through various registers:
+
+     - Bits 12..16 of rosr contain the number 0..31 of the thread that
+       will be executed next.
+
+     - 32-bit register mt_en specifies which threads can be scheduled to
+       run.
+
+     - 32-bit registers mt_active, mt_sched, and mt_pri respectively indicate
+       which threads are active, hard-real-time, and high priority.
+
+     - Hidden register UBICOM32_GDB_THREAD_REGNUM serves as a communication
+       channel for GDB to tell SID to switch to a new thread.
+
+   This module reads and writes those registers to implement remote.c gdbarch
+   hooks REMOTE_SET_THREAD, REMOTE_THREAD_ALIVE, REMOTE_CURRENT_THREAD,
+   REMOTE_THREADS_INFO, REMOTE_THREADS_EXTRA_INFO, and REMOTE_PID_TO_STR.
+
+   An alternative implementation would be to modify SID to understand
+   gdb/remote.c's thread protocol ('H' and thread-related 'q' packets).  */
+
+/* Return the hardware thread number corresponding to gdb-internal thread id
+   TID.  */
+
+#define TID_TO_TNUM(tid)	(((tid) & 31)-1)
+
+/* Return the hardware thread number corresponding to gdb-internal
+   process+thread id PTID.  */
+
+#define PTID_TO_TNUM(ptid)	TID_TO_TNUM (ptid_get_pid (ptid))
+
+/* Return a gdb-internal thread id corresponding to hardware thread number
+   TNUM.  */
+
+#define TNUM_TO_TID(tnum) \
+  ((ptid_get_pid (inferior_ptid) & ~31) | (tnum+1))
+
+/* Return a gdb-internal process+thread id corresponding to hardware thread
+   number TNUM.  */
+
+#define TNUM_TO_PTID(tnum)	pid_to_ptid (TNUM_TO_TID (tnum))
+
+/* Memory file buffer for formatting, needed for padding the results of
+   val_print().  */
+
+static struct ui_file *memfile = NULL;
+
+/* bsearch() comparison function: return -1, 0, or 1 according to whether
+   register number *NUMP is less than, equal to, or greater than register
+   *REGP's number.  */
+
+static int
+find_reg_num_cmp (const void *nump, const void *regp)
+{
+  int num;
+  struct ubicom32_reg *reg;
+
+  num = *(int *) nump;
+  reg = (struct ubicom32_reg *) regp;
+  return num < reg->num ? -1 : num > reg->num;
+}
+
+/* bsearch() comparison function: return -1, 0, or 1 according to whether
+   memory region *MEMP precedes, equals, or follows register *REGP's memory
+   location.  */
+
+static int
+addr_to_num_cmp (const void *memp, const void *regp)
+{
+  CORE_ADDR mem;
+  const struct ubicom32_reg *reg;
+
+  mem = *(int *) memp;
+  reg = regp;
+  return mem < reg->mem ? -1 : mem > reg->mem;
+}
+
+/* Return whether N1 == N2.  */
+static int
+eq (long n1, long n2)
+{
+  return n1 == n2;
+}
+
+/* Return whether N1 >= N2.  */
+static int
+ge (long n1, long n2)
+{
+  return n1 >= n2;
+}
+
+/* Return whether N1 < N2.  */
+static int
+lt (long n1, long n2)
+{
+  return n1 < n2;
+}
+
+enum addressing_modes {
+  DIRECT,
+  IMMEDIATE,
+  INDIRECT_WITH_INDEX,
+  INDIRECT_WITH_OFFSET,
+  INDIRECT,
+  INDIRECT_WITH_POST_INCREMENT,
+  INDIRECT_WITH_PRE_INCREMENT,
+};
+
+enum instructions {
+  MOVE4,
+  LEA1,
+  LEA4,
+  ADD4,
+  MOVEI,
+  PDEC,
+};
+
+static int
+analyze_general_operand(long *field, long *f_bit10, long *f_type,
+			long *f_r, long *f_M, long *f_i4_1,
+			long *f_An, long *f_direct, long *f_imm8,
+			long *f_imm7_1)
+{
+  int ret;
+
+  /* grab the An field any way */
+  *f_An = (*field >> 5) & 0x7;
+
+  if(*field & 0x400)
+    {
+      long imm7, imm7t;
+      *f_bit10 = 1;
+
+      /* 7 bit immediate with An register */
+
+      imm7t = (*field >> 8) & 0x3;
+      imm7 = *field & 0x1f;
+
+      imm7 |= (imm7t << 5);
+      *f_imm7_1 = imm7;
+      if(imm7)
+	ret = INDIRECT_WITH_OFFSET;
+      else
+	ret = INDIRECT;
+    }
+  else
+    {
+      /* one of the other addressing modes */
+      *f_type = (*field >> 8) & 0x3;
+
+      switch(*f_type)
+	{
+	case 0:
+	  ret = IMMEDIATE;
+	  *f_imm8 = *field & 0xff;
+
+	  /* we need to sign extend it */
+	  if(*f_imm8 & 0x80)
+	    *f_imm8 |= 0xffffff00;
+	  *f_An = 0;
+	  break;
+	case 1:
+	  ret = DIRECT;
+	  *f_direct = *field & 0xff;
+	  *f_direct *= 4;
+	  *f_An = 0;
+	  break;
+	case 2:
+	  /* need to examine the M bit */
+	  if(*field & 0x10)
+	    {
+	      *f_M = 1;
+	      ret = INDIRECT_WITH_PRE_INCREMENT;
+	    }
+	  else
+	    ret = INDIRECT_WITH_POST_INCREMENT;
+
+	  /* grab the i4 field */
+	  *f_i4_1 = *field & 0xf;
+
+	  /* we have to sign extend it if needed */
+	  if(*f_i4_1 & 0x8)
+	    *f_i4_1 |= 0xfffffff0;
+	  break;
+	case 3:
+	  ret = INDIRECT_WITH_INDEX;
+
+	  /* grab the index register */
+	  *f_r= *field & 0xf;
+	  break;
+	default:
+	  ret = -1;
+	}
+    }
+  return ret;
+}
+
+/* Try to fetch the instruction at *PC into INFO.  Return whether:
+     - the fetch was successful,
+     - the instruction number is NUM, and
+     - the conditions specified by the variable argument list are all true,
+   and if so advance *PC to the next instruction.
+
+   Each condition is specified by 3 arguments:
+     (1) a pointer to an operand field in INFO->cgen_fields,
+     (2) a function returning whether (1) and (3) match, and
+     (3) a value to compare to (1).
+
+   The last condition is followed by a null argument.  */
+
+static int
+fetch_insn (int num, CORE_ADDR *pc, CGEN_FIELDS *fields, ...)
+{
+  int len;
+  va_list args;
+  long *opnd, val;
+  int (*match) (long, long);
+  int insn;
+  int dest_type, s1_type;
+  int adjust_offsets = 1;
+
+  int instruction = -1;
+
+  memset (fields, 255, sizeof (CGEN_FIELDS));
+
+  /* read the instruction */
+  insn = read_memory_integer (*pc, 4);
+
+  /* start setting up the cgen_fields */
+  /* grab the primary opcode field */
+  fields->f_op1 = (insn >> 27) &0x1f;
+  if((fields->f_op1 != 0)&&
+     (fields->f_op1 != 0x19)&&
+     (fields->f_op1 != 0x0f))
+    return 0;
+
+  /* grab the destination field */
+  fields->f_d = (insn >> 16) &0x7ff;
+
+  /* analyze the destination bit fields */
+  dest_type = analyze_general_operand(&fields->f_d, &fields->f_d_bit10, &fields->f_d_type,
+				      &fields->f_d_r, &fields->f_d_M, &fields->f_d_i4_1,
+				      &fields->f_d_An, &fields->f_d_direct, &fields->f_d_imm8,
+				      &fields->f_d_imm7_1);
+
+
+  s1_type = -1;
+  if(fields->f_op1 == 0 || fields->f_op1 == 0x0f)
+    {
+      if(fields->f_op1 == 0)
+	{
+	  /* move.4 or a lea opcode. Grab op2 */
+	  fields->f_op2 = (insn >> 11) &0x1f;
+
+	  if((fields->f_op2 != 0x0c)&&
+	     (fields->f_op2 != 0x1f)&&
+	     (fields->f_op2 != 0x1c)&&
+	     (fields->f_op2 != 0x1e))
+	    /* does not match move.4, lea.1, lea.4 or pdec*/
+	    return 0;
+
+	  if(fields->f_op2 == 0x1f)
+	    {
+	      /* lea.1 case. Leave the offsets alone */
+	      adjust_offsets=0;
+	      instruction = LEA1;
+	    }
+	  else if(fields->f_op2 == 0x1c)
+	    instruction = LEA4;
+	  else if(fields->f_op2 == 0x1e)
+	    instruction = PDEC;
+	  else
+	    instruction = MOVE4;
+	}
+      else
+	instruction = ADD4;
+
+      if(instruction == ADD4)
+	{
+	  /* setup the f_s2 subfield */
+	  fields->f_s2 = (insn >> 11) & 0xf;
+	}
+
+      /* setup the f_s1 subfields */
+      fields->f_s1 = insn &0x7ff;
+
+      s1_type = analyze_general_operand(&fields->f_s1, &fields->f_s1_bit10, &fields->f_s1_type,
+					&fields->f_s1_r, &fields->f_s1_M, &fields->f_s1_i4_1,
+					&fields->f_s1_An, &fields->f_s1_direct, &fields->f_s1_imm8,
+					&fields->f_s1_imm7_1);
+
+      if(adjust_offsets)
+	{
+	  if(fields->f_d_i4_1)
+	    {
+	      fields->f_d_i4_4 = fields->f_d_i4_1*4;
+	      fields->f_d_i4_1 = 0;
+	    }
+
+	  if(fields->f_d_imm7_1)
+	    {
+	      fields->f_d_imm7_4 = fields->f_d_imm7_1*4;
+	      fields->f_d_imm7_1 = 0;
+	    }
+
+	  if(fields->f_s1_i4_1)
+	    {
+	      fields->f_s1_i4_4 = fields->f_s1_i4_1*4;
+	      fields->f_s1_i4_1 = 0;
+	    }
+
+	  if(instruction == PDEC)
+	    {
+	      fields->f_s1_imm7_1 *= -1;
+	      fields->f_s1_imm7_1 &= 0x7f;
+	    }
+
+	  if(fields->f_s1_imm7_1)
+	    {
+	      fields->f_s1_imm7_4 = fields->f_s1_imm7_1*4;
+	      fields->f_s1_imm7_1 = 0;
+	    }
+	}
+    }
+  else
+    {
+      instruction = MOVEI;
+      /* this is the movei case. Need to pick up the 16 bits and sign extend it */
+      fields->f_imm16_2 = insn & 0xffff;
+
+      /* check for sign extension */
+      if(fields->f_imm16_2 & 0x8000)
+	fields->f_imm16_2 |= 0xffff0000;
+    }
+
+  /* now do the CGNE_INSN_NUM stuff */
+  switch(num)
+    {
+    case UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_DIRECT:
+      if(instruction != MOVE4)
+	return 0;
+
+      if(dest_type != INDIRECT_WITH_PRE_INCREMENT)
+	return 0;
+
+      if(s1_type != DIRECT)
+	return 0;
+      break;
+    case UBICOM32_INSN_MOVEI_D_DIRECT:
+      if(instruction != MOVEI)
+	return 0;
+
+      if(dest_type != DIRECT)
+	return 0;
+      break;
+    case UBICOM32_INSN_LEA_1_D_DIRECT_S1_EA_INDIRECT_WITH_INDEX_1:
+      if(instruction != LEA1)
+	return 0;
+
+      if(dest_type != DIRECT)
+	return 0;
+
+      if(s1_type != INDIRECT_WITH_INDEX)
+	return 0;
+
+      break;
+    case UBICOM32_INSN_ADD_4_D_DIRECT_S1_DIRECT:
+      if(instruction != ADD4)
+	return 0;
+
+      if(dest_type != DIRECT)
+	return 0;
+
+      if(s1_type != DIRECT)
+	return 0;
+      break;
+    case UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_OFFSET_4_S1_DIRECT:
+      if(instruction != MOVE4)
+	return 0;
+
+      if(dest_type != INDIRECT_WITH_OFFSET)
+	return 0;
+
+      if(s1_type != DIRECT)
+	return 0;
+      break;
+    case UBICOM32_INSN_MOVE_4_D_INDIRECT_4_S1_DIRECT:
+      if(instruction != MOVE4)
+	return 0;
+
+      if(dest_type != INDIRECT)
+	return 0;
+
+      if(s1_type != DIRECT)
+	return 0;
+      break;
+    case UBICOM32_INSN_LEA_4_D_DIRECT_S1_EA_INDIRECT_WITH_OFFSET_4:
+      if(instruction != LEA4)
+	return 0;
+
+      if(dest_type != DIRECT)
+	return 0;
+
+      if(s1_type != INDIRECT_WITH_OFFSET)
+	return 0;
+      break;
+    case UBICOM32_INSN_PDEC_D_DIRECT_PDEC_S1_EA_INDIRECT_WITH_OFFSET_4:
+      if(instruction != PDEC)
+	return 0;
+
+      if(dest_type != DIRECT)
+	return 0;
+
+      if(s1_type != INDIRECT_WITH_OFFSET)
+	return 0;
+      break;
+    }
+
+  len = 4;
+
+  va_start (args, fields);
+  for (;;)
+    {
+      opnd = va_arg (args, long *);
+      if (!opnd)
+	break;
+
+      match = (int (*)(long, long)) va_arg (args, void *);
+      val = va_arg (args, long);
+      if (!match (*opnd, val))
+	return 0;
+    }
+
+  *pc += len;
+  return 1;
+}
+
+/* Debug.  */
+#define DEBUG_NONE 0
+#define DEBUG_NORMAL 1
+#define DEBUG_EXTRA 2
+#define DEBUG_MAX 3
+#define DEBUG_FRAME DEBUG_MAX
+static int ubicom32_tdep_debug = DEBUG_NORMAL;
+
+/* Frame info.  */
+struct ubicom32_unwind_cache
+{
+  CORE_ADDR entry_pc;
+  CORE_ADDR current_pc;
+  CORE_ADDR entry_sp;
+  CORE_ADDR current_sp;
+  /* Table indicating the location of each and every register.  */
+  struct trad_frame_saved_reg *saved_regs;
+};
+
+/* If a register has number NUM, return that register.  Otherwise, if
+   !CALLER, return null, else throw an error message identifying CALLER.  */
+static struct ubicom32_reg *
+machine_find_reg_num (int num, char *caller)
+{
+  struct ubicom32_reg *found;
+
+  found = bsearch (&num, current_machine->regs, current_machine->num_regs,
+		   sizeof (struct ubicom32_reg), find_reg_num_cmp);
+  if (found)
+    return found;
+  if (caller)
+    internal_error (__FILE__, __LINE__,
+		    "%s: invalid register target number %d", caller, num);
+  return NULL;
+}
+
+/* If a register is at memory location ADDR, return that register's number.
+   Otherwise, if !CALLER, return -1, else throw an error message identifying
+   CALLER.  */
+static int
+machine_addr_to_num (CORE_ADDR addr, char *caller)
+{
+  struct ubicom32_reg *found;
+
+  found = bsearch (&addr, current_machine->regs, current_machine->num_regs,
+		   sizeof (struct ubicom32_reg), addr_to_num_cmp);
+  if (found)
+    return found->num;
+  if (caller)
+    internal_error (__FILE__, __LINE__,
+		    "%s: invalid register address 0x%lx", caller, addr);
+  return -1;
+}
+
+static CORE_ADDR
+read_register(int regnum)
+{
+  char tmp, *ptr;
+  CORE_ADDR tmp1;
+  regcache_raw_read(get_current_regcache (), regnum, (gdb_byte *)&tmp1);
+
+  /* we have to szizzle the data. */
+  ptr = (char *)&tmp1;
+  tmp = ptr[3];
+  ptr[3] = ptr[0];
+  ptr[0] = tmp;
+  tmp = ptr[1];
+  ptr[1] = ptr[2];
+  ptr[2] = tmp;
+  return tmp1;
+}
+
+/* Parse the prologue of the function starting at PC.
+
+   If FRAME is null, return the address of the first instruction after the
+   prologue.  Otherwise, store saved register and frame pointer information in
+   FRAME.  */
+
+static struct ubicom32_unwind_cache *
+ubicom32_parse_prologue (struct frame_info *next_frame,
+		void **this_prologue_cache)
+
+{
+  struct ubicom32_unwind_cache *ubicom32_frame_info;
+  long const sp_regaddr = UBICOM32_SP_REGADDR;
+  long const fp_regaddr = UBICOM32_A6_REGADDR;
+  CGEN_FIELDS fields;
+  long sp_offset, fp_offset;
+  CORE_ADDR sp;
+  CORE_ADDR entry_sp;
+  CORE_ADDR fp;
+  CORE_ADDR start, end, start1, end1;
+  CORE_ADDR old_pc, pc;
+  int fpSetUp = 0;
+  int num_insns = 101;
+
+  int large, i;
+  int reg_val;
+
+  /* Table of offsets describing where each register is stored.  -1
+     denotes a register that was not saved.  */
+
+  long *saved_regs_offset;
+  long sizeof_saved_regs_offset = current_machine->num_regs * sizeof (*saved_regs_offset);
+  saved_regs_offset = alloca (sizeof_saved_regs_offset);
+  memset (saved_regs_offset, -1, sizeof_saved_regs_offset);
+
+  if ((*this_prologue_cache))
+    return (*this_prologue_cache);
+
+  if (ubicom32_tdep_debug >= DEBUG_FRAME)
+    fprintf_unfiltered (gdb_stdlog, "ubicom32_parse_prologue:\n");
+
+  ubicom32_frame_info = FRAME_OBSTACK_ZALLOC (struct ubicom32_unwind_cache);
+  (*this_prologue_cache) = ubicom32_frame_info;
+  ubicom32_frame_info->saved_regs = trad_frame_alloc_saved_regs (next_frame);
+
+  /* Starting point.  */
+  ubicom32_frame_info->current_pc = frame_pc_unwind (next_frame);
+  ubicom32_frame_info->entry_pc = frame_func_unwind (next_frame, NORMAL_FRAME);
+  ubicom32_frame_info->entry_sp = 0;
+  ubicom32_frame_info->current_sp = frame_sp_unwind (next_frame);
+
+  fp_offset = 0;
+
+  old_pc = pc = GDB_IMEM (ubicom32_frame_info->current_pc);
+  sp = GDB_IMEM (ubicom32_frame_info->current_sp);
+
+  /* find the start and the end of the function */
+  if(find_pc_partial_function (pc, NULL, &start, &end))
+    {
+      /* Start out with an enclosing (up, prev, outer) frame's SP set to
+	 NULL.  Hopefully the logic below will find a better value, if not
+	 well the frame will just terminate a little early.  Note that
+	 NULL is special - GDB assumes a ZERO and not GDB_DMEM(0)
+	 terminates a frame chain.  (If you've got your thinking cap on,
+	 you'll realize that this isn't even needed - saved_regs[] is
+	 already zero - but what the heck set it to zero here explicitly).  */
+
+      sp_offset = 0;
+      while(start < pc)
+	{
+	  num_insns --;
+	  if (num_insns == 0)
+	    break;
+
+	  if (num_insns == 100)
+	    {
+	      /* Do this only if this the first instruciton in the prologue. */
+	      /* move.4 -4(sp)++,d9  Copy 1st varargs argument to stack.  */
+	      if (fetch_insn (UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_DIRECT,
+			      &start, &fields,
+			      &fields.f_s1_direct, eq, UBICOM32_D9_REGADDR,
+			      &fields.f_d_An, eq, H_AR_SP,
+			      (long *) 0))
+		{
+		  int i;
+		  
+		  sp_offset += -fields.f_d_i4_4;
+		  
+		  for (i = 8; i >= 0; i--)
+		    {
+		      /* move.4 -4(sp)++,d8  Copy 2nd - 13th varargs arguments to stack.  */
+		      if(start < pc)
+			{
+			  if (!fetch_insn (UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_DIRECT,
+					   &start, &fields,
+					   &fields.f_d_i4_4, eq, -4l,
+					   &fields.f_s1_direct, eq, UBICOM32_D0_REGADDR + 4 * i,
+					   &fields.f_d_An, eq, H_AR_SP,
+					   (long *) 0))
+			    {
+			      break;
+			    }
+			  else
+			    {
+			      sp_offset += -fields.f_d_i4_4;
+			    }
+			}
+		      else
+			break;
+		    }
+
+		  if(i >= 0)
+		    {
+		      // did not quite complete the loop
+		      break;
+		    }
+		}
+	    }
+
+	  /* Try to determine the SP_OFFSET (the value added to the stack on
+	     entry).  If this fails, return the address of the instructions
+	     being parsed.  Set LARGE if the frame is >8-bits.  */
+	  /* movei d15,#-96  Copy negative frame size to a register.  */
+	  if (fetch_insn (UBICOM32_INSN_MOVEI_D_DIRECT,
+			       &start, &fields,
+			       &fields.f_imm16_2, lt, 0l,
+			       (long *) 0))
+	    {
+	      long regaddr;
+	      long subtrahend = fields.f_imm16_2;
+	      regaddr = fields.f_d_direct;
+
+	      /* Check that the code sequence really did compute ``SP = SP -
+		 SP_OFFSET''.  If it didn't bail out returning a PC pointing to
+		 the first instruction before this entire mess started.  */
+
+	      /* lea.1 sp,(sp,d15)  Subtract frame size from sp.  */
+	      if(start == pc)
+		break;
+	      if (!fetch_insn (UBICOM32_INSN_LEA_1_D_DIRECT_S1_EA_INDIRECT_WITH_INDEX_1,
+			       &start, &fields,
+			       &fields.f_d_direct, eq, sp_regaddr,
+			       &fields.f_s1_An, eq, H_AR_SP,
+			       &fields.f_s1_r, eq, regaddr / UBICOM32_REG_SIZE,
+			       (long *) 0)
+		  /* add.4 sp, sp, d15  Alternative insn.  */
+		  && !fetch_insn (UBICOM32_INSN_ADD_4_D_DIRECT_S1_DIRECT,
+				  &start, &fields,
+				  &fields.f_d_direct, eq, sp_regaddr,
+				  &fields.f_s1_direct, eq, sp_regaddr,
+				  &fields.f_s2, eq, regaddr / UBICOM32_REG_SIZE,
+				  (long*) 0)) 
+		{
+		  //break;
+		  continue;
+		}
+	      sp_offset += -subtrahend;	
+	    }
+	  /* move.4	-32(sp)++,a5 */
+	  else if(fetch_insn (UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_DIRECT,
+			      &start, &fields,
+			      &fields.f_d_An, eq, H_AR_SP,
+			      (long *) 0))
+	    {
+	      long saved_regaddr = fields.f_s1_direct;
+	      long regnum = machine_addr_to_num (saved_regaddr, "parse_prologue");
+	      gdb_assert (regnum >= 0 && regnum < current_machine->num_regs);
+
+	      sp_offset += -fields.f_d_i4_4;
+	      if( regnum > 9)
+		{
+		  if (saved_regs_offset[regnum] == -1)
+		    {
+		      saved_regs_offset[regnum] = sp_offset;
+		      
+		      if(regnum == UBICOM32_A5_REGNUM)
+			{
+			  // this is the frame pointer offset ??
+			  fp_offset = sp_offset;
+			  fpSetUp = 1;
+			}
+		    }
+		}
+	    }
+	  /* pdec sp, 48(sp) */
+	  else if (fetch_insn (UBICOM32_INSN_PDEC_D_DIRECT_PDEC_S1_EA_INDIRECT_WITH_OFFSET_4,
+			       &start, &fields,
+			       &fields.f_s1_An, eq, H_AR_SP,
+			       &fields.f_d_direct, eq, sp_regaddr,
+			       (long *) 0))
+	    {
+	      sp_offset += fields.f_s1_imm7_4;
+	      fp_offset = sp_offset;
+	      fpSetUp = 1;
+	    }
+
+	  /* move.4 4(sp),a6  Save call-preserved registers.  */
+	  else if (fetch_insn (UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_OFFSET_4_S1_DIRECT,
+			       &start, &fields,
+			       &fields.f_d_imm7_4, ge, 0l,
+			       &fields.f_d_An, eq, H_AR_SP,
+			       (long *) 0))
+	    {
+	      long saved_offset = sp_offset - fields.f_d_imm7_4;
+	      long saved_regaddr = fields.f_s1_direct;
+	      long regnum = machine_addr_to_num (saved_regaddr, "parse_prologue");
+	      gdb_assert (regnum >= 0 && regnum < current_machine->num_regs);
+
+	      if (regnum > 9)
+		{
+		  if (saved_regs_offset[regnum] == -1)
+		    {
+		      saved_regs_offset[regnum] = saved_offset;
+		      
+		      if(regnum == UBICOM32_A5_REGNUM)
+			{
+			  // this is the frame pointer offset ??
+			  fp_offset = sp_offset;
+			  fpSetUp = 1;
+			}
+		    }
+		}
+	    }
+	  /* move.4 (sp),a6  Likewise, in leaf frame.  */
+	  else if (fetch_insn (UBICOM32_INSN_MOVE_4_D_INDIRECT_4_S1_DIRECT,
+			       &start, &fields,
+			       &fields.f_d_An, eq, H_AR_SP,
+			       (long *) 0))
+	    {
+	      long saved_offset = sp_offset;
+	      long saved_regaddr = fields.f_s1_direct;
+	      long regnum = machine_addr_to_num (saved_regaddr, "parse_prologue");
+	      gdb_assert (regnum >= 0 && regnum < current_machine->num_regs);
+
+	      if (regnum > 9)
+		{
+		  if (saved_regs_offset[regnum] == -1)
+		    {
+		      saved_regs_offset[regnum] = saved_offset;
+		      if(regnum == UBICOM32_A5_REGNUM)
+			{
+			  // this is the frame pointer offset ??
+			  fp_offset = sp_offset;
+			  fpSetUp = 1;
+			}
+		    }
+		}
+	    }
+
+	  /* lea.4 a6, offset(sp)  Setup frame pointer.  */
+	  else if (fetch_insn (UBICOM32_INSN_LEA_4_D_DIRECT_S1_EA_INDIRECT_WITH_OFFSET_4,
+			       &start, &fields,
+			       &fields.f_s1_An, eq, H_AR_SP,
+			       &fields.f_d_direct, eq, fp_regaddr,
+			       (long *) 0))
+	    {
+	      fp_offset = sp_offset - fields.f_s1_imm7_4;
+	      fpSetUp = 1;
+	    }
+	  else
+	    {
+	      int insn;
+	      int major_opcode, opcode_extension;
+	      
+	      /* read the instruction */
+	      insn = read_memory_integer (start, 4);
+	  
+	      major_opcode = (insn >> 27) & 0x1f;
+	      opcode_extension = (insn >> 11) & 0x1f;
+	  
+	      /*
+	       * If the instruction is either JMP, CALL, CALLI or RET we are done.
+	       * RET Major opcode 0 Extension 4
+	       * BKPT Major opcode 0 Ex       7
+	       * SUSPEND                      1
+	       * For Major opc 0 if Ex is < 0A the exit.
+	       *
+	       * CALL Major opc 1B
+	       * CALLI Major opc 1C
+	       * JMP Major opc 1A
+	       */
+	      if ((major_opcode == 0) && (opcode_extension < 0xA))
+		{
+		  /* Time to get out.*/
+		  break;
+		}
+
+	      if ((major_opcode == 0x1A) || (major_opcode == 0x1B) || (major_opcode == 0x1E))
+		{
+		  break;
+		}
+
+	      /* nothing matches. Bump pc by 4 and try again.*/
+	      //printf("no match to mj opc 0x%x ext = 0x%x\n", major_opcode, opcode_s
+	      start += 4;
+	      continue;
+	    }
+	}
+
+      entry_sp = sp + sp_offset;
+      fp_offset = entry_sp - fp_offset;
+      ubicom32_frame_info->entry_sp = entry_sp;
+
+
+      /* SP and FP contain the real address and not where it is saved on the stack. */
+      trad_frame_set_value (ubicom32_frame_info->saved_regs, current_machine->sp_regnum, entry_sp);
+
+      /* Compute the address of each register saved on the stack using the
+	 FP and the SAVED_REG_OFFSETS.  */
+      for (i = 0; i < current_machine->num_regs; i++)
+	{
+	  if (i == current_machine->sp_regnum)
+	    continue;
+	  if (saved_regs_offset[i] >= 0)
+	    {
+	      /* read the register value from where it has been saved and put it in as a value. */
+	      int reg_val = read_memory_integer((entry_sp - saved_regs_offset[i]), 4);
+	      trad_frame_set_value (ubicom32_frame_info->saved_regs, i, reg_val);
+	    }
+	}
+
+      /* See if register A5 the return address was saved in the frame. */
+      if(saved_regs_offset[UBICOM32_A5_REGNUM] >= 0)
+	{
+	  /* A5 is saved in the stack frame. That is the new PC value. */
+	  reg_val = read_memory_integer((entry_sp - saved_regs_offset[UBICOM32_A5_REGNUM]), 4);
+	}
+      else
+	{
+	  /* Read A5 from the raw regcache. Usually that is the return address */
+	  reg_val = read_register(UBICOM32_A5_REGNUM);
+	}
+
+      (void)find_pc_partial_function (reg_val, NULL, &start, &end);
+      (void)find_pc_partial_function (reg_val-4, NULL, &start1, &end1);
+
+      if (start != start1)
+	reg_val -= 4;
+
+      trad_frame_set_value (ubicom32_frame_info->saved_regs, current_machine->pc_regnum, reg_val);
+    }
+  else
+    {
+      ubicom32_frame_info->entry_sp = ubicom32_frame_info->current_sp;
+    }
+
+  return ubicom32_frame_info;
+}
+
+static CORE_ADDR
+find_end_prologue (CORE_ADDR pc)
+{
+  long const sp_regaddr = UBICOM32_SP_REGADDR;
+  long const fp_regaddr = UBICOM32_A6_REGADDR;
+  CGEN_FIELDS fields;
+  long sp_offset, fp_offset;
+  CORE_ADDR start, end;
+  CORE_ADDR old_pc = pc;
+  int fpSetUp = 0;
+  CORE_ADDR end_prologue;
+  int large;
+  int insns = 101;
+  pc = GDB_IMEM (pc);
+
+  end_prologue = pc;
+
+  /* find the start and the end of the function */
+  (void)find_pc_partial_function (pc, NULL, &start, &end);
+
+  /* Go through all the save-register instructions computing an
+     SAVED_REGS_OFFSET (from the SP) for each.  */
+  pc = start;
+  while(pc < end)
+    {
+      insns--;
+      if (insns == 0)
+	{
+	  return end_prologue;
+	}
+
+      if (insns == 100)
+	{
+	  /* move.4 -4(sp)++,d9  Copy 1st varargs argument to stack.  */
+	  if (fetch_insn (UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_DIRECT,
+			  &pc, &fields,
+			  &fields.f_s1_direct, eq, UBICOM32_D9_REGADDR,
+			  &fields.f_d_An, eq, H_AR_SP,
+			  (long *) 0))
+	    {
+	      int i;
+	      
+	      for (i = 8; i >= 0; i--)
+		{
+		  /* move.4 -4(sp)++,d12  Copy 2nd - 13th varargs arguments to stack.  */
+		  if (!fetch_insn (UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_DIRECT,
+				   &pc, &fields,
+				   &fields.f_d_i4_4, eq, -4l,
+				   &fields.f_s1_direct, eq, UBICOM32_D0_REGADDR + 4 * i,
+				   &fields.f_d_An, eq, H_AR_SP,
+				   (long *) 0))
+		    {
+		      return pc;
+		    }
+		}
+	    }
+	}
+
+      /* movei d15,#-96  Copy negative frame size to a register.  */
+      if (fetch_insn (UBICOM32_INSN_MOVEI_D_DIRECT,
+		      &pc, &fields,
+		      &fields.f_imm16_2, lt, 0l,
+		      (long *) 0))
+	{
+	  long regaddr = fields.f_d_direct;
+	  //sp_offset += -fields.f_imm16_2;
+
+	  /* Check that the code sequence really did compute ``SP = SP -
+	     SP_OFFSET''.  If it didn't bail out returning a PC pointing to
+	     the first instruction before this entire mess started.  */
+
+	  /* lea.1 sp,(sp,d15)  Subtract frame size from sp.  */
+	  if (!fetch_insn (UBICOM32_INSN_LEA_1_D_DIRECT_S1_EA_INDIRECT_WITH_INDEX_1,
+			   &pc, &fields,
+			   &fields.f_d_direct, eq, sp_regaddr,
+			   &fields.f_s1_An, eq, H_AR_SP,
+			   &fields.f_s1_r, eq, regaddr / UBICOM32_REG_SIZE,
+			   (long *) 0)
+	      /* add.4 sp, sp, d15  Alternative insn.  */
+	      && !fetch_insn (UBICOM32_INSN_ADD_4_D_DIRECT_S1_DIRECT,
+			      &pc, &fields,
+			      &fields.f_d_direct, eq, sp_regaddr,
+			      &fields.f_s1_direct, eq, sp_regaddr,
+			      &fields.f_s2, eq, regaddr / UBICOM32_REG_SIZE,
+			      (long*) 0))
+	    {
+	      //return old_pc;
+	      continue;
+	    }
+
+	  fpSetUp = 1;
+	  end_prologue = pc;
+	}
+      /* move.4	-32(sp)++,a5 */
+      else if(fetch_insn (UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_DIRECT,
+			  &pc, &fields,
+			  &fields.f_d_An, eq, H_AR_SP,
+			  (long *) 0))
+	{
+	  long saved_regaddr = fields.f_s1_direct;
+	  long regnum = machine_addr_to_num (saved_regaddr, "parse_prologue");
+
+	  if (regnum > 9)
+	    {
+	      fpSetUp = 1;
+	      end_prologue = pc;
+	    }
+	}
+      /* pdec sp, 48(sp) */
+      else if (fetch_insn (UBICOM32_INSN_PDEC_D_DIRECT_PDEC_S1_EA_INDIRECT_WITH_OFFSET_4,
+			   &pc, &fields,
+			   &fields.f_s1_An, eq, H_AR_SP,
+			   &fields.f_d_direct, eq, sp_regaddr,
+			   (long *) 0))
+	{
+	  fpSetUp = 1;
+	  end_prologue = pc;
+	}
+      /* move.4 +4(sp),a6  Save call-preserved registers.  */
+      else if (fetch_insn (UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_OFFSET_4_S1_DIRECT,
+			   &pc, &fields,
+			   &fields.f_d_imm7_4, ge, 0l,
+			   &fields.f_d_An, eq, H_AR_SP,
+			   (long *) 0))
+	{
+	  long saved_regaddr = fields.f_s1_direct;
+	  long regnum = machine_addr_to_num (saved_regaddr, "parse_prologue");
+	  gdb_assert (regnum >= 0 && regnum < current_machine->num_regs);
+	  
+	  if (regnum > 9)
+	    {
+	      fpSetUp = 1;
+	      end_prologue = pc;
+	    }
+	}
+      /* move.4 (sp),a6  Likewise, in leaf frame.  */
+      else if (fetch_insn (UBICOM32_INSN_MOVE_4_D_INDIRECT_4_S1_DIRECT,
+			   &pc, &fields,
+			   &fields.f_d_An, eq, H_AR_SP,
+			   (long *) 0))
+	{
+	  long saved_regaddr = fields.f_s1_direct;
+	  long regnum = machine_addr_to_num (saved_regaddr, "parse_prologue");
+	  gdb_assert (regnum >= 0 && regnum < current_machine->num_regs);
+	  
+	  if (regnum > 9)
+	    {
+	      fpSetUp = 1;
+	      end_prologue = pc;
+	    }
+	}
+      else if(fetch_insn (UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_DIRECT,
+			  &pc, &fields,
+			  &fields.f_d_An, eq, H_AR_SP,
+			  (long *) 0))
+	{
+	  fpSetUp = 1;
+	  end_prologue = pc;
+	}
+      /* lea.4 a6, offset(sp)  Setup frame pointer.  */
+      else if (fetch_insn (UBICOM32_INSN_LEA_4_D_DIRECT_S1_EA_INDIRECT_WITH_OFFSET_4,
+			   &pc, &fields,
+			   &fields.f_s1_An, eq, H_AR_SP,
+			   &fields.f_d_direct, eq, fp_regaddr,
+			   (long *) 0))
+	{
+	  fpSetUp = 1;
+	  end_prologue = pc;
+	}
+      else
+	{
+	  int insn;
+	  int major_opcode, opcode_extension;
+
+	  /* read the instruction */
+	  insn = read_memory_integer (pc, 4);
+
+	  major_opcode = (insn >> 27) & 0x1f;
+	  opcode_extension = (insn >> 11) & 0x1f;
+	  
+	  /*
+	   * If the instruction is either JMP, CALL, CALLI or RET we are done.
+	   * RET Major opcode 0 Extension 4
+	   * BKPT Major opcode 0 Ex       7
+	   * SUSPEND                      1
+	   * For Major opc 0 if Ex is < 0A the exit.
+	   *
+	   * CALL Major opc 1B
+	   * CALLI Major opc 1C
+	   * JMP Major opc 1A
+	   */
+	  if ((major_opcode == 0) && (opcode_extension < 0xA))
+	    {
+	      /* Time to get out.*/
+	      return end_prologue;
+	    }
+
+	  if ((major_opcode == 0x1A) || (major_opcode == 0x1B) || (major_opcode == 0x1E))
+	    {
+	      return end_prologue;
+	    }
+
+	  /* nothing matches. Bump pc by 4 and try again.*/
+	  //printf("no match to mj opc 0x%x ext = 0x%x\n", major_opcode, opcode_extension);
+	  pc += 4;
+	  continue;
+	}
+    }
+
+  /* If you got here nothing matched */
+  return old_pc;
+}
+
+/* Return the address of the "real" code beyond the function entry prologue
+   found at PC.  */
+
+static CORE_ADDR
+ubicom32_skip_prologue (struct gdbarch *gdbarch, CORE_ADDR start_pc)
+{
+  /* TOOD: make use of gdbarch? */
+  return find_end_prologue (start_pc);
+}
+
+/* Assuming NEXT_FRAME->prev is a dummy, return the frame ID of that
+   dummy frame.  The frame ID's base needs to match the TOS value
+   saved by save_dummy_frame_tos(), and the PC match the dummy frame's
+   breakpoint.  */
+static struct frame_id
+ubicom32_unwind_dummy_id (struct gdbarch *gdbarch, struct frame_info *next_frame)
+{
+  ULONGEST base;
+
+  if (ubicom32_tdep_debug >= DEBUG_FRAME)
+    fprintf_unfiltered (gdb_stdlog, "ubicom32_unwind_dummy_id\n");
+
+  //frame_unwind_unsigned_register (next_frame, current_machine->sp_regnum, &base);
+  base = frame_unwind_register_unsigned (next_frame, current_machine->sp_regnum);
+  return frame_id_build (base, frame_pc_unwind (next_frame));
+}
+
+#if 0
+#define UBICOM32_MAIN_STRING "__main__"
+#endif
+#define UBICOM32_MAIN_STRING "main"
+#define UBICOM32_MAIN_STRING2 "system_main"
+#define UBICOM32_MAIN_STRING3 "arch_thread_main"
+#define UBICOM32_FLASH_ADDR 0x20000000
+#define UBICOM32_FLASH_END	0x2ffffffc
+#define UBICOM32_PRAM_START 0x40000000
+#define UBICOM32_PRAM_END 0x4007fffc
+#define UBICOM32_DATARAM_START 0x100000
+#define UBICOM32_DATARAM_END 0x10fffc
+
+//extern unsigned int entry_point_address(void);
+
+static int
+ubicom32_frame_chain_valid (struct frame_info *fi)
+{
+  int line;
+  int offset;
+  int unmapped;
+  char *filename = NULL;
+  char *name = NULL;
+  CORE_ADDR pc = frame_pc_unwind(fi);
+  CORE_ADDR sp = frame_sp_unwind(fi);
+  unsigned int entry = entry_point_address();
+
+  /* ubicom32v3 isn't handled correctly -- call from here */
+  if(entry != 0x20000000)
+    return ubicom32v3_frame_chain_valid(fi);
+
+  if (ubicom32_tdep_debug >= DEBUG_FRAME)
+    fprintf_unfiltered (gdb_stdlog, "ubicom32_frame_chain_valid pc = 0x%x sp = 0x%x\n", (unsigned int)pc, (unsigned int)sp);
+
+  if(pc < UBICOM32_FLASH_ADDR ||
+     (UBICOM32_FLASH_END < pc && pc < UBICOM32_PRAM_START) ||
+     pc > UBICOM32_PRAM_END)
+    {
+      /* pc is in some invalid zone */
+      return 0;
+    }
+
+  /* check if sp is valid at all */
+  if(sp < UBICOM32_DATARAM_START ||
+     sp > UBICOM32_DATARAM_END)
+    return 0;
+
+  /* check if the pc is valid at all */
+  if (!build_address_symbolic (pc, 0, &name, &offset, &filename, &line, &unmapped))
+    {
+      /* we got a hit */
+      if(name)
+	{
+	  if(strstr(name, UBICOM32_MAIN_STRING))
+	    {
+	      /* it is present */
+	      return 0;
+	    }
+	  else if(strstr(name, UBICOM32_MAIN_STRING2))
+	    {
+	      /* it is present */
+	      return 0;
+	    }
+	  else if(strstr(name, UBICOM32_MAIN_STRING3))
+	    {
+	      /* it is present */
+	      return 0;
+	    }
+	}
+    }
+
+  return 1;
+}
+
+/* Given a GDB frame, determine the address of the calling function's
+   frame.  This will be used to create a new GDB frame struct.  */
+static void
+ubicom32_frame_this_id (struct frame_info *next_frame,
+		    void **this_prologue_cache,
+		    struct frame_id *this_id)
+{
+  struct ubicom32_unwind_cache *info;
+  CORE_ADDR base;
+  CORE_ADDR func;
+  struct frame_id id;
+
+  if (ubicom32_tdep_debug >= DEBUG_FRAME)
+    fprintf_unfiltered (gdb_stdlog, "ubicom32_frame_this_id\n");
+
+  info = ubicom32_parse_prologue (next_frame, this_prologue_cache);
+
+  /* The FUNC is easy.  */
+  func = frame_func_unwind (next_frame, NORMAL_FRAME);
+
+#if 0
+  /* This is meant to halt the backtrace at "_start".  Make sure we
+     don't halt it at a generic dummy frame. */
+  if (inside_entry_file (func))
+    return;
+#endif
+
+  if (!current_machine->frame_chain_valid(next_frame))
+    {
+      if (frame_relative_level (next_frame) >= 0)
+	return;
+
+      info->entry_sp = info->current_sp;
+    }
+
+  base = info->entry_sp;
+  if (base == 0)
+    return;
+
+  id = frame_id_build (base, func);
+
+  /* Check that we're not going round in circles with the same frame
+     ID (but avoid applying the test to sentinel frames which do go
+     round in circles).  Can't use frame_id_eq() as that doesn't yet
+     compare the frame's PC value.  */
+  if (frame_relative_level (next_frame) >= 0
+      && get_frame_type (next_frame) != DUMMY_FRAME
+      && frame_id_eq (get_frame_id (next_frame), id))
+    {
+      if (ubicom32_tdep_debug >= DEBUG_FRAME)
+	fprintf_unfiltered (gdb_stdlog, "ubicom32_frame_this_id: circular\n");
+      return;
+    }
+
+  (*this_id) = id;
+}
+
+static void
+ubicom32_frame_prev_register (struct frame_info *next_frame,
+			  void **this_prologue_cache,
+			  int regnum, int *optimizedp,
+			  enum lval_type *lvalp, CORE_ADDR *addrp,
+			  int *realnump, gdb_byte *bufferp)
+{
+  struct ubicom32_unwind_cache *info
+    = ubicom32_parse_prologue (next_frame, this_prologue_cache);
+
+  if (ubicom32_tdep_debug >= DEBUG_FRAME)
+    fprintf_unfiltered (gdb_stdlog, "\nubicom32_frame_prev_register\n\n");
+  trad_frame_get_prev_register (next_frame, info->saved_regs, regnum,
+				optimizedp, lvalp, addrp, realnump, bufferp);
+}
+
+static CORE_ADDR
+ubicom32_frame_base_address (struct frame_info *next_frame, void **this_cache)
+{
+  struct ubicom32_unwind_cache *info;
+
+  if (ubicom32_tdep_debug >= DEBUG_FRAME)
+    fprintf_unfiltered (gdb_stdlog, "ubicom32_frame_base_address\n");
+
+  info = ubicom32_parse_prologue (next_frame, this_cache);
+  /* Note that gcc provides all debug information relative to the
+     post-locals SP, not the entry_sp!  */
+  return info->entry_sp;
+}
+
+static const struct frame_unwind ubicom32_frame_unwind = {
+  NORMAL_FRAME,
+  ubicom32_frame_this_id,
+  ubicom32_frame_prev_register
+};
+
+static const struct frame_base ubicom32_frame_base = {
+  &ubicom32_frame_unwind,
+  ubicom32_frame_base_address,
+  ubicom32_frame_base_address,
+  ubicom32_frame_base_address
+};
+
+static const struct frame_unwind *
+ubicom32_frame_p (struct frame_info *next_frame)
+{
+  return &ubicom32_frame_unwind;
+}
+
+/* ubicom32_unwind_pc.  */
+static CORE_ADDR
+ubicom32_unwind_pc (struct gdbarch *gdbarch, struct frame_info *next_frame)
+{
+  ULONGEST pc;
+  if (ubicom32_tdep_debug >= DEBUG_FRAME)
+    fprintf_unfiltered (gdb_stdlog, "ubicom32_unwind_pc\n");
+
+  //frame_unwind_unsigned_register (next_frame, current_machine->pc_regnum, &pc);
+  pc = frame_unwind_register_unsigned (next_frame, current_machine->pc_regnum);
+  return (pc);
+}
+
+/* ubicom32_unwind_sp.  */
+static CORE_ADDR
+ubicom32_unwind_sp (struct gdbarch *gdbarch, struct frame_info *next_frame)
+{
+  ULONGEST sp;
+  if (ubicom32_tdep_debug >= DEBUG_FRAME)
+    fprintf_unfiltered (gdb_stdlog, "ubicom32_unwind_sp\n");
+
+  //frame_unwind_unsigned_register (next_frame, current_machine->sp_regnum, &sp);
+  sp = frame_unwind_register_unsigned (next_frame, current_machine->sp_regnum);
+  return (sp);
+}
+
+/* Return PTID's program counter as an internal GDB address.  */
+
+static CORE_ADDR
+ubicom32_read_pc (struct regcache *regcache)
+{
+  CORE_ADDR pc;
+  char tmp, *ptr;
+
+  if (ubicom32_tdep_debug >= DEBUG_FRAME)
+    fprintf_unfiltered (gdb_stdlog, "ubicom32_read_pc\n");
+
+  regcache_raw_read(regcache, current_machine->pc_regnum, (gdb_byte *)&pc);
+
+  /* we have to szizzle the data. */
+  ptr = (char *)&pc;
+  tmp = ptr[3];
+  ptr[3] = ptr[0];
+  ptr[0] = tmp;
+  tmp = ptr[1];
+  ptr[1] = ptr[2];
+  ptr[2] = tmp;
+  return pc;
+}
+
+static void
+ubicom32_write_pc (struct regcache *regcache, CORE_ADDR pc)
+{
+  char tmp, *ptr;
+  CORE_ADDR tmp1;
+  /* we have to szizzle the data. */
+  ptr = (char *)&pc;
+  tmp = ptr[3];
+  ptr[3] = ptr[0];
+  ptr[0] = tmp;
+  tmp = ptr[1];
+  ptr[1] = ptr[2];
+  ptr[2] = tmp;
+
+  tmp1 = REAL_MEM(pc);
+  regcache_raw_write (regcache, current_machine->pc_regnum, (gdb_byte *)&tmp1);
+}
+
+/* Print the TYPE value in BUF using val_print() FORMAT, right-justifying to
+   WIDTH characters.  */
+
+static void
+display_val (struct type *type, char *buf, int format, int width,
+	     struct ui_file *file)
+{
+  char *memstr;
+  long len;
+  struct cleanup *cleanups;
+
+  /* Clear the buffer passed to val_print(), creating it first if needed.  */
+  if (!memfile)
+    memfile = mem_fileopen ();
+  else
+    ui_file_rewind (memfile);
+
+  val_print (type, buf, 0, 0, memfile, format, 1, 0, Val_pretty_default);
+
+  memstr = ui_file_xstrdup (memfile, &len);
+  cleanups = make_cleanup (xfree, memstr);
+
+  fprintf_filtered (file, "%*s", width, memstr);
+  do_cleanups (cleanups);
+}
+
+/* Return the internal GDB address corresponding to the real TYPE address
+   in BUF.  */
+
+static CORE_ADDR
+ubicom32_pointer_to_address (struct type *type, const gdb_byte *buf)
+{
+  CORE_ADDR addr;
+  enum type_code code;
+
+  addr = extract_unsigned_integer (buf, TYPE_LENGTH (type));
+
+  code = TYPE_CODE (TYPE_TARGET_TYPE (type));
+  if (code == TYPE_CODE_FUNC || code == TYPE_CODE_METHOD)
+    addr = GDB_IMEM (addr);
+  else
+    addr = GDB_DMEM (addr);
+
+  return addr;
+}
+
+/* Store in BUF the real TYPE address corresponding to internal GDB address
+   ADDR.  */
+
+static void
+ubicom32_address_to_pointer (struct type *type, gdb_byte *buf, CORE_ADDR addr)
+{
+  store_unsigned_integer (buf, TYPE_LENGTH (type), REAL_MEM (addr));
+}
+
+/* Given an arbitrary value, convert it to an integer and hence into
+   an address.  */
+
+static CORE_ADDR
+ubicom32_integer_to_address (struct gdbarch *gdbarch, struct type *type, const gdb_byte *buf)
+{
+  LONGEST i = unpack_long (type, buf);
+  if (i == GDB_IMEM (i) || i == GDB_DMEM (i))
+    /* Is the value already in one of the special address spaces? Yes,
+       just return it as is.  */
+    return i;
+  else
+    /* Assume the value is ment to live in data space.  If it isn't
+       then the user should have explicitly cast it some how.  */
+    return GDB_DMEM (i);
+}
+
+/* Extract a TYPE return value from raw register array REGBUF, and copy it
+   into VALBUF in virtual format. */
+
+static void
+ubicom32_extract_return_value (struct type *type, struct regcache *rcache, gdb_byte *valbuf)
+{
+  int offset;
+  unsigned char regbuf[UBICOM32_REG_SIZE *2];
+
+  /* read out UBICOM32_RET_REGNUM */
+  regcache_raw_read (rcache, UBICOM32_RET_REGNUM, &regbuf[UBICOM32_REG_SIZE]);
+
+  /* read out UBICOM32_RET2_REGNUM */
+  regcache_raw_read (rcache, UBICOM32_RET2_REGNUM, regbuf);
+
+  offset = UBICOM32_REG_SIZE - TYPE_LENGTH (type);
+  if (offset < 0)
+    offset = 0;
+  memcpy (valbuf, regbuf + offset,
+	  TYPE_LENGTH (type));
+}
+
+/* Store virtual-format VALBUF as a TYPE return value so that it will be
+   returned if the current function returns now.  */
+
+static void
+ubicom32_store_return_value (struct type *type, struct regcache *regcache, const gdb_byte *valbuf)
+{
+  regcache_raw_write (regcache, UBICOM32_RET_REGNUM, valbuf);
+
+  if (TYPE_LENGTH (type) == 8)
+    regcache_raw_write (regcache, UBICOM32_RET2_REGNUM, ((char *)valbuf + UBICOM32_REG_SIZE));
+}
+
+/* Handle the ubicom32 return value convention.  */
+
+static enum return_value_convention
+ubicom32_return_value (struct gdbarch *gdbarch, struct type *type,
+		       struct regcache *regcache, gdb_byte *readbuf,
+		       const gdb_byte *writebuf)
+{
+  if (TYPE_CODE (type) == TYPE_CODE_STRUCT
+      || TYPE_CODE (type) == TYPE_CODE_UNION
+      || TYPE_LENGTH (type) > 8)
+    /* Structs, unions, and anything larger than 8 bytes (2 registers)
+       goes on the stack.  */
+    return RETURN_VALUE_STRUCT_CONVENTION;
+
+  if (readbuf)
+    ubicom32_extract_return_value (type, regcache, readbuf);
+  if (writebuf)
+    ubicom32_store_return_value (type, regcache, writebuf);
+
+  return RETURN_VALUE_REGISTER_CONVENTION;
+}
+
+/* Return an instruction to set a breakpoint at PCPTR, adjusting PCPTR if
+   necessary, and store in LENPTR the size of the returned instruction.  */
+
+static const unsigned char *
+ubicom32_breakpoint_from_pc (struct gdbarch *gdbarch,
+			     CORE_ADDR *pcptr, int *lenptr)
+{
+  /* BKPT instruction.  */
+  static unsigned char breakpoint[] = { 0x00, 0x00, 0x38, 0x00 };
+
+  /* REAL_MEM here is a temporary hack to make Z-packets work with SID.
+     After that gets fixed, also revert the BREAKPOINT_FROM_PC move in
+     remote.c.  */
+  *pcptr = REAL_MEM (*pcptr);
+  *lenptr = sizeof breakpoint;
+  return breakpoint;
+}
+
+/* Return an instruction to set a breakpoint at PCPTR, adjusting PCPTR if
+   necessary, and store in LENPTR the size of the returned instruction.  */
+
+static const unsigned char *
+ubicom32_software_breakpoint_from_pc (struct gdbarch *gdbarch,
+				      CORE_ADDR *pcptr, int *lenptr)
+{
+  /* Software Breakpoint 'instruction' (not actually a valid
+   * instruction). Note that this used to be 0xaabbccdd, but in the mach
+   * v4 this now actually legal.
+   */
+  static unsigned char breakpoint[] = { 0xfa, 0xbb, 0xcc, 0xdd };
+
+  /* REAL_MEM here is a temporary hack to make Z-packets work with SID.
+     After that gets fixed, also revert the BREAKPOINT_FROM_PC move in
+     remote.c.  */
+  *pcptr = REAL_MEM (*pcptr);
+  *lenptr = sizeof breakpoint;
+  return breakpoint;
+}
+
+/* ubicom32_software_single_step() is called just before we want to
+   resume the inferior, if we want to single-step it but there is no
+   hardware or kernel single-step support (ubicom32uclinux on GNU/Linux
+   for example).  We find the target of the coming instruction and
+   breakpoint it.  */
+
+int
+ubicom32_software_single_step (struct frame_info *frame)
+{
+  /* The following is a derivative of ubicom32_posix_setup_single_step */
+  gdb_byte cptr[4];
+  unsigned int insn;
+  unsigned char base_opcode;
+  CORE_ADDR pc = get_frame_pc (frame);
+  CORE_ADDR target1_pc = pc + 4; /* reasonable default */
+
+  /* pull the current instruction from target. */
+  int status = read_memory_nobpt (pc, cptr, 4);
+  if (status) {
+    memory_error (status, pc);
+    return -1;
+  };
+
+  insn = cptr[0] << 24 | cptr[1] << 16 | cptr[2] << 8 | cptr[3];
+  base_opcode = (cptr[0] >> 3) & 0x1f;
+
+  /* analyze the instruction */
+  switch(base_opcode)
+    {
+    case 0x1a:
+      {
+	/* jump conditionals */
+	int offset = (insn & 0x1fffff)<<2;
+
+	if (offset & 0x00400000)
+	    offset |= 0xff800000; /* set up a negative number */
+
+	insert_single_step_breakpoint (pc + 4);
+	target1_pc = pc + offset;
+	break;
+      }
+    case 0x1b:
+      {
+	/* CALL */
+	int offset = ((int)(cptr[0] & 0x7))<<23 | ((insn & 0x1fffff)<<2);
+	if(offset & 0x02000000)
+	  offset |= 0xfc000000;
+	target1_pc = pc + offset;
+	break;
+      }
+    case 0x1e:
+      {
+	/* CALLI. Build the 18 bit offset from the instruction */
+	int offset = (((int)(cptr[0] & 0x7))<<15 | ((int)(cptr[1] & 0x1f) <<10) |
+		      ((int)(cptr[2] & 0x7) << 7) | ((int)(cptr[3] & 0x1f) << 2));
+	int address_register = (cptr[3] >> 5) & 0x7;
+
+	if (offset & (1<<17))
+	  offset |= ~((1 << 18) - 1);
+
+	/* Get the base address from the address register in the instruction. */
+	target1_pc = get_frame_register_unsigned (frame, UBICOM32_A0_REGNUM + address_register);
+
+	/* add the offset */
+	target1_pc += offset;
+	break;
+      }
+    case 0x00:
+    {
+	int op_extension = (int)(cptr[2] >> 3) & 0x1f;
+	if (op_extension == 4)
+	  {
+	    /* RET. Extract the S1 field from the instruction. */
+	    unsigned int ea;
+	    int s1 = insn & 0x7ff;
+	    int address_register = (s1 & 0xe0) >> 5;
+	    int data_register = (s1 & 0xf);
+	    int direct_register = (s1 & 0xff);
+	    int pre = s1 & 0x10;
+	    int indirect_offset = (((s1 & 0x300) >> 3) | (s1 & 0x1f)) << 2;
+	    int four_bit_immediate = data_register << 28;
+	    int eight_bit_immediate = direct_register << 24;
+	    four_bit_immediate = four_bit_immediate >> 26;
+	    eight_bit_immediate = eight_bit_immediate >> 22;
+
+	    if ((s1 & 0x700) == (0x1 << 8))
+	      {
+		/* Direct register */
+		if (direct_register < 32)
+		  target1_pc = get_frame_register_unsigned (frame, UBICOM32_D0_REGNUM + direct_register);
+		else if (direct_register < 40)
+		  target1_pc = get_frame_register_unsigned (frame, UBICOM32_A0_REGNUM + direct_register - 32);
+		else
+		  {
+		    printf_unfiltered("Unknown direct register %d\n", direct_register);
+		    return -1;
+		  }
+	      }
+	    else if ((s1 & 0x700) == 0)
+	      {
+		/* immediate mode. */
+		printf_unfiltered("Immediate mode is wrong.\n");
+		return -1;
+	      }
+	    else
+	      {
+		if (s1 & 0x400)
+		  {
+		    /* Indirect with offset. */
+		    target1_pc = indirect_offset;
+		    target1_pc += get_frame_register_unsigned (frame, UBICOM32_A0_REGNUM + address_register);
+		  }
+		else if ((s1 & 0x700) == (0x3 << 8))
+		  {
+		    /* Indirect with index. */
+		    target1_pc =  get_frame_register_unsigned (frame, UBICOM32_D0_REGNUM + data_register) << 2;
+		    target1_pc +=  get_frame_register_unsigned (frame, UBICOM32_A0_REGNUM + address_register);
+		  }
+		else if ((s1 & 0x700) == (0x2 << 8))
+		  {
+		    /* Indirect with pre/post increment .*/
+		    target1_pc = get_frame_register_unsigned (frame, UBICOM32_A0_REGNUM + address_register);
+
+		    if (pre)
+		      target1_pc += four_bit_immediate;
+		  }
+
+		/* read the memory we have computed above. It is the return address. */
+		status = read_memory_nobpt (target1_pc, cptr, 4);
+		if (status) {
+			memory_error (status, pc);
+			return -1;
+		}
+
+		target1_pc = (cptr[0] <<24 | cptr[1] << 16 | cptr[2] << 8 | cptr[3]);
+	      }
+	  }
+	else
+	  {
+	    target1_pc = pc+4;
+	  }
+	break;
+      }
+    default:
+	    target1_pc = pc+4;
+	    break;
+    }
+
+  insert_single_step_breakpoint (target1_pc);
+
+  return 1;
+}
+
+static CORE_ADDR
+find_func_descr (struct gdbarch *gdbarch, CORE_ADDR entry_point)
+{
+  CORE_ADDR descr;
+  char valbuf[4];
+  CORE_ADDR start_addr;
+
+  /* If we can't find the function in the symbol table, then we assume
+     that the function address is already in descriptor form.  */
+  if (!find_pc_partial_function (entry_point, NULL, &start_addr, NULL)
+      || entry_point != start_addr)
+    return entry_point;
+
+  descr = ubicom32_fdpic_find_canonical_descriptor (entry_point);
+
+  if (descr != 0)
+    return descr;
+
+  /* Construct a non-canonical descriptor from space allocated on
+     the stack.  */
+
+  descr = value_as_long (value_allocate_space_in_inferior (8));
+  store_unsigned_integer (valbuf, 4, entry_point);
+  write_memory (descr, valbuf, 4);
+  store_unsigned_integer (valbuf, 4,
+			  ubicom32_fdpic_find_global_pointer (entry_point));
+  write_memory (descr + 4, valbuf, 4);
+  return descr;
+}
+
+static CORE_ADDR
+ubicom32_convert_from_func_ptr_addr (struct gdbarch *gdbarch, CORE_ADDR addr,
+				struct target_ops *targ)
+{
+  CORE_ADDR entry_point;
+  CORE_ADDR got_address;
+
+  entry_point = get_target_memory_unsigned (targ, addr, 4);
+  got_address = get_target_memory_unsigned (targ, addr + 4, 4);
+
+  if (got_address == ubicom32_fdpic_find_global_pointer (entry_point))
+    return entry_point;
+  else
+    return addr;
+}
+
+/* Return a static string describing the state of thread TP->ptid.  */
+
+char *
+ubicom32_remote_threads_extra_info (struct thread_info *tp)
+{
+  static struct ui_file *buf = NULL;
+  static char *bufcpy = NULL;
+  int bit, mt_active, mt_pri, mt_sched, mt_en;
+  long buflen;
+  char mybuffer[1000];
+  char *printBuf = mybuffer;
+  char *buffer = mybuffer;
+
+  unsigned tid;
+
+  if (!buf)
+    buf = mem_fileopen ();
+  else
+    ui_file_rewind (buf);
+
+  mybuffer[0] = 0;
+  bit = 1 << PTID_TO_TNUM (tp->ptid);
+  tid = PIDGET(tp->ptid);
+  tid --;
+  mt_active = read_register (UBICOM32_MT_ACTIVE_REGNUM);
+  mt_en = read_register(UBICOM32_MT_EN_REGNUM);
+  mt_pri = read_register(UBICOM32_MT_PRI_REGNUM);
+  mt_sched = read_register (UBICOM32_MT_SCHED_REGNUM);
+
+  if(0<= tid && tid <= 32)
+    {
+      /* query about a Main processor thread */
+      unsigned int mask = 1<<tid;
+
+      if(!(mt_en & mask))
+	{
+	  // Not even enabled
+	  sprintf(buffer, "%s", "Disabled");
+	  buffer += strlen(buffer);
+	}
+      else
+	{
+	  if(!(mt_active & mask))
+	    {
+	      sprintf(buffer, "%s", "Suspended");
+	      buffer += strlen(buffer);
+	    }
+
+	  if(mt_sched &mask)
+	    {
+	      //HRT
+	      if(strlen(printBuf))
+		{
+		  sprintf(buffer, ", ");
+		  buffer += strlen(buffer);
+		}
+	      sprintf(buffer, "HRT ");
+	      buffer += strlen(buffer);
+	    }
+	  else
+	    {
+	      if(strlen(printBuf))
+		{
+		  sprintf(buffer, ", ");
+		  buffer += strlen(buffer);
+		}
+
+	      if(!(mt_pri &mask))
+		sprintf(buffer, "low priority");
+	      else
+		sprintf(buffer, "High priority");
+
+	      buffer += strlen(buffer);
+	    }
+	}
+    }
+  else if(tid == 32)
+    {
+      sprintf(buffer, "Coprocessor");
+    }
+
+  fputs_unfiltered(printBuf, buf);
+
+  if (bufcpy)
+    free (bufcpy);
+  bufcpy = ui_file_xstrdup (buf, &buflen);
+
+  if (!buflen)
+    return NULL;
+  return bufcpy;
+}
+
+/*************************** 5K related.******************************************************/
+
+struct ubicom32_reg ubicom32v3_regs[] = {
+  /* General data.  */
+  { "d0", 0, 4, &builtin_type_int32, 0x0, 0 },
+  { "d1", 1, 4, &builtin_type_int32, UBICOM32_D1_REGADDR, 0 },
+  { "d2", 2, 4, &builtin_type_int32, 0x8, 0 },
+  { "d3", 3, 4, &builtin_type_int32, 0xc, 0 },
+  { "d4", 4, 4, &builtin_type_int32, 0x10, 0 },
+  { "d5", 5, 4, &builtin_type_int32, 0x14, 0 },
+  { "d6", 6, 4, &builtin_type_int32, 0x18, 0 },
+  { "d7", 7, 4, &builtin_type_int32, 0x1c, 0 },
+  { "d8", 8, 4, &builtin_type_int32, UBICOM32_D8_REGADDR, 0 },
+  { "d9", 9, 4, &builtin_type_int32, 0x24, 0 },
+  { "d10", 10, 4, &builtin_type_int32, 0x28, 0 },
+  { "d11", 11, 4, &builtin_type_int32, 0x2c, 0 },
+  { "d12", 12, 4, &builtin_type_int32, 0x30, 0 },
+  { "d13", 13, 4, &builtin_type_int32, 0x34, 0 },
+  { "d14", 14, 4, &builtin_type_int32, 0x38, 0 },
+  { "d15", 15, 4, &builtin_type_int32, 0x3c, 0 },
+
+  /* 0x40 - 0x7f Reserved */
+
+ /* General address.  */
+  { "a0", UBICOM32_A0_REGNUM, 4, &builtin_type_int32, 0x80, 0 },
+  { "a1", UBICOM32_A1_REGNUM, 4, &builtin_type_int32, 0x84, 0 },
+  { "a2", UBICOM32_A2_REGNUM, 4, &builtin_type_int32, 0x88, 0 },
+  { "a3", UBICOM32_A3_REGNUM, 4, &builtin_type_int32, 0x8c, 0 },
+  { "a4", UBICOM32_A4_REGNUM, 4, &builtin_type_int32, 0x90, 0 },
+  { "a5", UBICOM32_A5_REGNUM, 4, &builtin_type_int32, 0x94, 0 },
+  { "a6", UBICOM32_A6_REGNUM, 4, &builtin_type_int32, UBICOM32_A6_REGADDR, 0 },
+  /* Stack pointer.  */
+  { "sp", UBICOM32_SP_REGNUM, 4, &builtin_type_int32, UBICOM32_SP_REGADDR, 0 },
+  /* High 16 bits of multiply accumulator.  */
+  { "mac_hi", 24, 4, &builtin_type_int32, 0xa0, REG_HIDESOME },
+  /* Low 32 bits of multiply accumulator.  */
+  { "mac_lo", 25, 4, &builtin_type_int32, 0xa4, REG_HIDESOME },
+  /* Rounded and clipped S16.15 image of multiply accumulator.  */
+  { "mac_rc16", 26, 4, &builtin_type_int32, 0xa8, REG_HIDESOME | REG_RDONLY },
+  /* 3rd source operand.  */
+  { "source_3", 27, 4, &builtin_type_uint32, 0xac, 0 },
+  /* Current thread's execution count. */
+  { "context_cnt", 28, 4, &builtin_type_uint32, 0xb0, REG_HIDESOME | REG_RDONLY },
+  /* Control/status.  */
+  { "csr", 29, 4, &builtin_type_uint32, 0xb4, 0 },
+  /* Read-only status.  */
+  { "rosr", UBICOM32_ROSR_REGNUM, 4, &builtin_type_uint32, 0xb8, 0 | REG_RDONLY },
+  /* Iread output.  */
+  { "iread_data", 31, 4, &builtin_type_uint32, 0xbc, 0 },
+  /* Low 32 bits of interrupt mask.  */
+  { "int_mask0", 32, 4, &builtin_type_uint32, 0xc0, REG_HIDESOME },
+  /* High 32 bits of interrupt mask.  */
+  { "int_mask1", 33, 4, &builtin_type_uint32, 0xc4, REG_HIDESOME },
+
+  /* 0xc8 - 0xcf Reserved */
+  /* Program counter.  */
+  { "pc", UBICOM32_PC_REGNUM, 4, &void_func_ptr, 0xd0, 0 },
+  { "trap_cause", 35, 4, &builtin_type_uint32, 0xd4, REG_HIDESOME },
+  { "acc1_hi", 36, 4, &builtin_type_uint32, 0xd8, 0 },
+  { "acc1_lo", 37, 4, &builtin_type_uint32, 0xdc, 0 },
+  { "previous_pc", 38, 4, &void_func_ptr, 0xe0, REG_RDONLY },
+
+  /* 0xd0 - 0xff  Reserved */
+  /* Chip identification.  */
+  { "chip_id", 39, 4, &builtin_type_uint32, 0x100, REG_HIDESOME | REG_RDONLY },
+  /* Low 32 bits of interrupt status.  */
+  { "int_stat0", 40, 4, &builtin_type_uint32, 0x104, REG_HIDESOME | REG_RDONLY },
+  /* High 32 bits of interrupt status.  */
+  { "int_stat1", 41, 4, &builtin_type_uint32, 0x108, REG_HIDESOME | REG_RDONLY },
+
+  /* 0x10c - 0x113 Reserved */
+  /* Set bits in int_stat0.  */
+  { "int_set0", 42, 4, &builtin_type_uint32, 0x114, REG_HIDESOME | REG_WRONLY },
+  /* Set bits in int_stat1.  */
+  { "int_set1", 43, 4, &builtin_type_uint32, 0x118, REG_HIDESOME | REG_WRONLY },
+
+  /* 0x11c - 0x123 Reserved */
+  /* Clear bits in int_stat0.  */
+  { "int_clr0", 44, 4, &builtin_type_uint32, 0x124, REG_HIDESOME | REG_WRONLY },
+  /* Clear bits in int_stat1.  */
+  { "int_clr1", 45, 4, &builtin_type_uint32, 0x128, REG_HIDESOME | REG_WRONLY },
+
+  /* 0x12c - 0x133 Reserved */
+  /* Global control.  */
+  { "global_ctrl", 46, 4, &builtin_type_uint32, 0x134, 0 },
+  /* Threads active status.  */
+  { "mt_active", UBICOM32V3_MT_ACTIVE_REGNUM, 4, &builtin_type_uint32, 0x138, REG_HIDESOME | REG_RDONLY },
+  /* Set bits in mt_active.  */
+  { "mt_active_set", 48, 4, &builtin_type_uint32, 0x13c, REG_HIDESOME | REG_WRONLY },
+  /* Clear bits in mt_active.  */
+  { "mt_active_clr", 49, 4, &builtin_type_uint32, 0x140, REG_HIDESOME | REG_WRONLY },
+  /* Debugging threads active status.  */
+  { "mt_dbg_active", 50, 4, &builtin_type_uint32, 0x144, REG_HIDESOME | REG_RDONLY },
+  /* Set bits in mt_dbg_active.  */
+  { "mt_dbg_active_set", 51, 4, &builtin_type_uint32, 0x148, REG_HIDESOME | REG_WRONLY },
+  /* Threads enabled.  */
+  { "mt_en", UBICOM32V3_MT_EN_REGNUM, 4, &builtin_type_uint32, 0x14C, REG_HIDESOME },
+  /* Thread priorities.  */
+  { "mt_pri", UBICOM32V3_MT_PRI_REGNUM, 4, &builtin_type_uint32, 0x150, REG_HIDESOME },
+  /* Thread scheduling policies.  */
+  { "mt_sched", UBICOM32V3_MT_SCHED_REGNUM, 4, &builtin_type_uint32, 0x154, REG_HIDESOME },
+  /* Threads stopped on a break condition.  */
+  { "mt_break", 55, 4, &builtin_type_uint32, 0x158, REG_HIDESOME | REG_RDONLY },
+  /* Clear bits in mt_break.  */
+  { "mt_break_clr", 56, 4, &builtin_type_uint32, 0x15C, REG_HIDESOME | REG_WRONLY },
+  /* Single-step threads.  */
+  { "mt_single_step", 57, 4, &builtin_type_uint32, 0x160, REG_HIDESOME },
+  /* Threads with minimum delay scheduling constraing.  */
+  { "mt_min_del_en", 58, 4, &builtin_type_uint32, 0x164, REG_HIDESOME },
+  { "mt_break_set", 59, 4, &builtin_type_uint32, 0x168, REG_HIDESOME | REG_WRONLY },
+
+  /* 0x16c - 0x16f reserved */
+  /* Data capture address.  */
+  { "dcapt", 60, 4, &builtin_type_uint32, 0x170, REG_HIDESOME },
+
+  /* 0x174 - 0x17b reserved */
+  /* Debugging threads active status clear register.  */
+  { "mt_dbg_active_clr", 61, 4, &builtin_type_int32, 0x17c, REG_HIDESOME | REG_WRONLY },
+  /* scratchpad registers */
+  { "scratchpad0", 62, 4, &builtin_type_uint32, 0x180, 0 },
+  { "scratchpad1", 63, 4, &builtin_type_uint32, 0x184, 0 },
+  { "scratchpad2", 64, 4, &builtin_type_uint32, 0x188, 0 },
+  { "scratchpad3", 65, 4, &builtin_type_uint32, 0x18c, 0 },
+
+  /* 0x190 - 0x19f Reserved */
+  { "chip_cfg", 66, 4, &builtin_type_uint32, 0x1a0, REG_HIDESOME },
+  { "mt_i_blocked", 67, 4, &builtin_type_uint32, 0x1a4, REG_HIDESOME|REG_RDONLY },
+  { "mt_d_blocked", 68, 4, &builtin_type_uint32, 0x1a8, REG_HIDESOME|REG_RDONLY },
+  { "mt_i_blocked_set", 69, 4, &builtin_type_uint32, 0x1ac, REG_HIDESOME|REG_WRONLY},
+  { "mt_d_blocked_set", 70, 4, &builtin_type_uint32, 0x1b0, REG_HIDESOME|REG_WRONLY},
+  { "mt_blocked_clr", 71, 4, &builtin_type_uint32, 0x1b4, REG_HIDESOME|REG_WRONLY},
+  { "mt_trap_en", 72, 4, &builtin_type_uint32, 0x1b8, REG_HIDESOME },
+  { "mt_trap", 73, 4, &builtin_type_uint32, 0x1bc, REG_HIDESOME|REG_RDONLY },
+  { "mt_trap_set", 74, 4, &builtin_type_uint32, 0x1c0, REG_HIDESOME|REG_WRONLY },
+  { "mt_trap_clr", 75, 4, &builtin_type_uint32, 0x1c4, REG_HIDESOME|REG_WRONLY },
+
+  /* 0x1c8-0x1FF Reserved */
+  { "i_range0_hi", 76, 4, &builtin_type_uint32, 0x200, REG_HIDESOME},
+  { "i_range1_hi", 77, 4, &builtin_type_uint32, 0x204, REG_HIDESOME},
+  { "i_range2_hi", 78, 4, &builtin_type_uint32, 0x208, REG_HIDESOME},
+
+  /* 0x20c-0x21f Reserved */
+  { "i_range0_lo", 79, 4, &builtin_type_uint32, 0x220, REG_HIDESOME},
+  { "i_range1_lo", 80, 4, &builtin_type_uint32, 0x224, REG_HIDESOME},
+  { "i_range2_lo", 81, 4, &builtin_type_uint32, 0x228, REG_HIDESOME},
+
+  /* 0x22c-0x23f Reserved */
+  { "i_range0_en", 82, 4, &builtin_type_uint32, 0x240, REG_HIDESOME},
+  { "i_range1_en", 83, 4, &builtin_type_uint32, 0x244, REG_HIDESOME},
+  { "i_range2_en", 84, 4, &builtin_type_uint32, 0x248, REG_HIDESOME},
+
+  /* 0x24c-0x25f Reserved */
+  { "d_range0_hi", 85, 4, &builtin_type_uint32, 0x260, REG_HIDESOME},
+  { "d_range1_hi", 86, 4, &builtin_type_uint32, 0x264, REG_HIDESOME},
+  { "d_range2_hi", 87, 4, &builtin_type_uint32, 0x268, REG_HIDESOME},
+  { "d_range3_hi", 88, 4, &builtin_type_uint32, 0x26c, REG_HIDESOME},
+
+  /* 0x270-0x27f Reserved */
+  { "d_range0_lo", 89, 4, &builtin_type_uint32, 0x280, REG_HIDESOME},
+  { "d_range1_lo", 90, 4, &builtin_type_uint32, 0x284, REG_HIDESOME},
+  { "d_range2_lo", 91, 4, &builtin_type_uint32, 0x288, REG_HIDESOME},
+  { "d_range3_lo", 92, 4, &builtin_type_uint32, 0x28c, REG_HIDESOME},
+
+  /* 0x290-0x29f Reserved */
+  { "d_range0_en", 93, 4, &builtin_type_uint32, 0x2a0, REG_HIDESOME},
+  { "d_range1_en", 94, 4, &builtin_type_uint32, 0x2a4, REG_HIDESOME},
+  { "d_range2_en", 95, 4, &builtin_type_uint32, 0x2a8, REG_HIDESOME},
+  { "d_range3_en", 96, 4, &builtin_type_uint32, 0x2ac, REG_HIDESOME},
+};
+
+/* Number of registers.  */
+enum {
+  NUM_UBICOM32V3_REGS = sizeof (ubicom32v3_regs) / sizeof (ubicom32v3_regs[0])
+};
+
+struct ubicom32_reg ubicom32v3_ver4_regs[] = {
+  /* General data.  */
+  { "d0", 0, 4, &builtin_type_int32, 0x0, 0 },
+  { "d1", 1, 4, &builtin_type_int32, UBICOM32_D1_REGADDR, 0 },
+  { "d2", 2, 4, &builtin_type_int32, 0x8, 0 },
+  { "d3", 3, 4, &builtin_type_int32, 0xc, 0 },
+  { "d4", 4, 4, &builtin_type_int32, 0x10, 0 },
+  { "d5", 5, 4, &builtin_type_int32, 0x14, 0 },
+  { "d6", 6, 4, &builtin_type_int32, 0x18, 0 },
+  { "d7", 7, 4, &builtin_type_int32, 0x1c, 0 },
+  { "d8", 8, 4, &builtin_type_int32, UBICOM32_D8_REGADDR, 0 },
+  { "d9", 9, 4, &builtin_type_int32, 0x24, 0 },
+  { "d10", 10, 4, &builtin_type_int32, 0x28, 0 },
+  { "d11", 11, 4, &builtin_type_int32, 0x2c, 0 },
+  { "d12", 12, 4, &builtin_type_int32, 0x30, 0 },
+  { "d13", 13, 4, &builtin_type_int32, 0x34, 0 },
+  { "d14", 14, 4, &builtin_type_int32, 0x38, 0 },
+  { "d15", 15, 4, &builtin_type_int32, 0x3c, 0 },
+
+  /* 0x40 - 0x7f Reserved */
+
+ /* General address.  */
+  { "a0", UBICOM32_A0_REGNUM, 4, &builtin_type_int32, 0x80, 0 },
+  { "a1", UBICOM32_A1_REGNUM, 4, &builtin_type_int32, 0x84, 0 },
+  { "a2", UBICOM32_A2_REGNUM, 4, &builtin_type_int32, 0x88, 0 },
+  { "a3", UBICOM32_A3_REGNUM, 4, &builtin_type_int32, 0x8c, 0 },
+  { "a4", UBICOM32_A4_REGNUM, 4, &builtin_type_int32, 0x90, 0 },
+  { "a5", UBICOM32_A5_REGNUM, 4, &builtin_type_int32, 0x94, 0 },
+  { "a6", UBICOM32_A6_REGNUM, 4, &builtin_type_int32, UBICOM32_A6_REGADDR, 0 },
+  /* Stack pointer.  */
+  { "sp", UBICOM32_SP_REGNUM, 4, &builtin_type_int32, UBICOM32_SP_REGADDR, 0 },
+  /* High 16 bits of multiply accumulator.  */
+  { "mac_hi", 24, 4, &builtin_type_int32, 0xa0, REG_HIDESOME },
+  /* Low 32 bits of multiply accumulator.  */
+  { "mac_lo", 25, 4, &builtin_type_int32, 0xa4, REG_HIDESOME },
+  /* Rounded and clipped S16.15 image of multiply accumulator.  */
+  { "mac_rc16", 26, 4, &builtin_type_int32, 0xa8, REG_HIDESOME | REG_RDONLY },
+  /* 3rd source operand.  */
+  { "source_3", 27, 4, &builtin_type_uint32, 0xac, 0 },
+  /* Current thread's execution count. */
+  { "context_cnt", 28, 4, &builtin_type_uint32, 0xb0, REG_HIDESOME | REG_RDONLY },
+  /* Control/status.  */
+  { "csr", 29, 4, &builtin_type_uint32, 0xb4, 0 },
+  /* Read-only status.  */
+  { "rosr", UBICOM32_ROSR_REGNUM, 4, &builtin_type_uint32, 0xb8, 0 | REG_RDONLY },
+  /* Iread output.  */
+  { "iread_data", 31, 4, &builtin_type_uint32, 0xbc, 0 },
+  /* Low 32 bits of interrupt mask.  */
+  { "int_mask0", 32, 4, &builtin_type_uint32, 0xc0, REG_HIDESOME },
+  /* High 32 bits of interrupt mask.  */
+  { "int_mask1", 33, 4, &builtin_type_uint32, 0xc4, REG_HIDESOME },
+
+  /* 0xc8 - 0xcf Reserved */
+  /* Program counter.  */
+  { "pc", UBICOM32_PC_REGNUM, 4, &void_func_ptr, 0xd0, 0 },
+  { "trap_cause", 35, 4, &builtin_type_uint32, 0xd4, REG_HIDESOME },
+  { "acc1_hi", 36, 4, &builtin_type_uint32, 0xd8, 0 },
+  { "acc1_lo", 37, 4, &builtin_type_uint32, 0xdc, 0 },
+  { "previous_pc", 38, 4, &void_func_ptr, 0xe0, REG_RDONLY },
+
+  /* 0xd0 - 0xff  Reserved */
+  /* Chip identification.  */
+  { "chip_id", 39, 4, &builtin_type_uint32, 0x100, REG_HIDESOME | REG_RDONLY },
+  /* Low 32 bits of interrupt status.  */
+  { "int_stat0", 40, 4, &builtin_type_uint32, 0x104, REG_HIDESOME | REG_RDONLY },
+  /* High 32 bits of interrupt status.  */
+  { "int_stat1", 41, 4, &builtin_type_uint32, 0x108, REG_HIDESOME | REG_RDONLY },
+
+  /* 0x10c - 0x113 Reserved */
+  /* Set bits in int_stat0.  */
+  { "int_set0", 42, 4, &builtin_type_uint32, 0x114, REG_HIDESOME | REG_WRONLY },
+  /* Set bits in int_stat1.  */
+  { "int_set1", 43, 4, &builtin_type_uint32, 0x118, REG_HIDESOME | REG_WRONLY },
+
+  /* 0x11c - 0x123 Reserved */
+  /* Clear bits in int_stat0.  */
+  { "int_clr0", 44, 4, &builtin_type_uint32, 0x124, REG_HIDESOME | REG_WRONLY },
+  /* Clear bits in int_stat1.  */
+  { "int_clr1", 45, 4, &builtin_type_uint32, 0x128, REG_HIDESOME | REG_WRONLY },
+
+  /* 0x12c - 0x133 Reserved */
+  /* Global control.  */
+  { "global_ctrl", 46, 4, &builtin_type_uint32, 0x134, 0 },
+  /* Threads active status.  */
+  { "mt_active", UBICOM32V3_MT_ACTIVE_REGNUM, 4, &builtin_type_uint32, 0x138, REG_HIDESOME | REG_RDONLY },
+  /* Set bits in mt_active.  */
+  { "mt_active_set", 48, 4, &builtin_type_uint32, 0x13c, REG_HIDESOME | REG_WRONLY },
+  /* Clear bits in mt_active.  */
+  { "mt_active_clr", 49, 4, &builtin_type_uint32, 0x140, REG_HIDESOME | REG_WRONLY },
+  /* Debugging threads active status.  */
+  { "mt_dbg_active", 50, 4, &builtin_type_uint32, 0x144, REG_HIDESOME | REG_RDONLY },
+  /* Set bits in mt_dbg_active.  */
+  { "mt_dbg_active_set", 51, 4, &builtin_type_uint32, 0x148, REG_HIDESOME | REG_WRONLY },
+  /* Threads enabled.  */
+  { "mt_en", UBICOM32V3_MT_EN_REGNUM, 4, &builtin_type_uint32, 0x14C, REG_HIDESOME },
+  /* Thread priorities.  */
+  { "mt_pri", UBICOM32V3_MT_PRI_REGNUM, 4, &builtin_type_uint32, 0x150, REG_HIDESOME },
+  /* Thread scheduling policies.  */
+  { "mt_sched", UBICOM32V3_MT_SCHED_REGNUM, 4, &builtin_type_uint32, 0x154, REG_HIDESOME },
+  /* Threads stopped on a break condition.  */
+  { "mt_break", 55, 4, &builtin_type_uint32, 0x158, REG_HIDESOME | REG_RDONLY },
+  /* Clear bits in mt_break.  */
+  { "mt_break_clr", 56, 4, &builtin_type_uint32, 0x15C, REG_HIDESOME | REG_WRONLY },
+  /* Single-step threads.  */
+  { "mt_single_step", 57, 4, &builtin_type_uint32, 0x160, REG_HIDESOME },
+  /* Threads with minimum delay scheduling constraing.  */
+  { "mt_min_del_en", 58, 4, &builtin_type_uint32, 0x164, REG_HIDESOME },
+  { "mt_break_set", 59, 4, &builtin_type_uint32, 0x168, REG_HIDESOME | REG_WRONLY },
+
+  /* 0x16c - 0x16f reserved */
+  /* Data capture address.  */
+  { "dcapt", 60, 4, &builtin_type_uint32, 0x170, REG_HIDESOME },
+
+  /* 0x174 - 0x17b reserved */
+  /* Debugging threads active status clear register.  */
+  { "mt_dbg_active_clr", 61, 4, &builtin_type_int32, 0x17c, REG_HIDESOME | REG_WRONLY },
+  /* scratchpad registers */
+  { "scratchpad0", 62, 4, &builtin_type_uint32, 0x180, 0 },
+  { "scratchpad1", 63, 4, &builtin_type_uint32, 0x184, 0 },
+  { "scratchpad2", 64, 4, &builtin_type_uint32, 0x188, 0 },
+  { "scratchpad3", 65, 4, &builtin_type_uint32, 0x18c, 0 },
+
+  /* 0x190 - 0x19f Reserved */
+  { "chip_cfg", 66, 4, &builtin_type_uint32, 0x1a0, REG_HIDESOME },
+  { "mt_i_blocked", 67, 4, &builtin_type_uint32, 0x1a4, REG_HIDESOME|REG_RDONLY },
+  { "mt_d_blocked", 68, 4, &builtin_type_uint32, 0x1a8, REG_HIDESOME|REG_RDONLY },
+  { "mt_i_blocked_set", 69, 4, &builtin_type_uint32, 0x1ac, REG_HIDESOME|REG_WRONLY},
+  { "mt_d_blocked_set", 70, 4, &builtin_type_uint32, 0x1b0, REG_HIDESOME|REG_WRONLY},
+  { "mt_blocked_clr", 71, 4, &builtin_type_uint32, 0x1b4, REG_HIDESOME|REG_WRONLY},
+  { "mt_trap_en", 72, 4, &builtin_type_uint32, 0x1b8, REG_HIDESOME },
+  { "mt_trap", 73, 4, &builtin_type_uint32, 0x1bc, REG_HIDESOME|REG_RDONLY },
+  { "mt_trap_set", 74, 4, &builtin_type_uint32, 0x1c0, REG_HIDESOME|REG_WRONLY },
+  { "mt_trap_clr", 75, 4, &builtin_type_uint32, 0x1c4, REG_HIDESOME|REG_WRONLY },
+
+  /* 0x1c8-0x1FF Reserved */
+  { "i_range0_hi", 76, 4, &builtin_type_uint32, 0x200, REG_HIDESOME},
+  { "i_range1_hi", 77, 4, &builtin_type_uint32, 0x204, REG_HIDESOME},
+  { "i_range2_hi", 78, 4, &builtin_type_uint32, 0x208, REG_HIDESOME},
+  { "i_range3_hi", 79, 4, &builtin_type_uint32, 0x20c, REG_HIDESOME},
+
+  /* 0x210-0x21f Reserved */
+  { "i_range0_lo", 80, 4, &builtin_type_uint32, 0x220, REG_HIDESOME},
+  { "i_range1_lo", 81, 4, &builtin_type_uint32, 0x224, REG_HIDESOME},
+  { "i_range2_lo", 82, 4, &builtin_type_uint32, 0x228, REG_HIDESOME},
+  { "i_range3_lo", 83, 4, &builtin_type_uint32, 0x22c, REG_HIDESOME},
+
+  /* 0x230-0x23f Reserved */
+  { "i_range0_en", 84, 4, &builtin_type_uint32, 0x240, REG_HIDESOME},
+  { "i_range1_en", 85, 4, &builtin_type_uint32, 0x244, REG_HIDESOME},
+  { "i_range2_en", 86, 4, &builtin_type_uint32, 0x248, REG_HIDESOME},
+  { "i_range3_en", 87, 4, &builtin_type_uint32, 0x24c, REG_HIDESOME},
+
+  /* 0x250-0x25f Reserved */
+  { "d_range0_hi", 88, 4, &builtin_type_uint32, 0x260, REG_HIDESOME},
+  { "d_range1_hi", 89, 4, &builtin_type_uint32, 0x264, REG_HIDESOME},
+  { "d_range2_hi", 90, 4, &builtin_type_uint32, 0x268, REG_HIDESOME},
+  { "d_range3_hi", 91, 4, &builtin_type_uint32, 0x26c, REG_HIDESOME},
+  { "d_range4_hi", 92, 4, &builtin_type_uint32, 0x270, REG_HIDESOME},
+
+  /* 0x274-0x27f Reserved */
+  { "d_range0_lo", 93, 4, &builtin_type_uint32, 0x280, REG_HIDESOME},
+  { "d_range1_lo", 94, 4, &builtin_type_uint32, 0x284, REG_HIDESOME},
+  { "d_range2_lo", 95, 4, &builtin_type_uint32, 0x288, REG_HIDESOME},
+  { "d_range3_lo", 96, 4, &builtin_type_uint32, 0x28c, REG_HIDESOME},
+  { "d_range4_lo", 97, 4, &builtin_type_uint32, 0x290, REG_HIDESOME},
+
+  /* 0x294-0x29f Reserved */
+  { "d_range0_en", 98, 4, &builtin_type_uint32, 0x2a0, REG_HIDESOME},
+  { "d_range1_en", 99, 4, &builtin_type_uint32, 0x2a4, REG_HIDESOME},
+  { "d_range2_en", 100, 4, &builtin_type_uint32, 0x2a8, REG_HIDESOME},
+  { "d_range3_en", 101, 4, &builtin_type_uint32, 0x2ac, REG_HIDESOME},
+  { "d_range4_en", 102, 4, &builtin_type_uint32, 0x2b0, REG_HIDESOME},
+};
+
+/* Number of registers.  */
+enum {
+  NUM_UBICOM32V3_VER4_REGS = sizeof (ubicom32v3_ver4_regs) / sizeof (ubicom32v3_ver4_regs[0])
+};
+
+struct ubicom32_reg ubicom32v3_ver5_regs[] = {
+  /* General data.  */
+  { "d0", 0, 4, &builtin_type_int32, 0x0, 0 },
+  { "d1", 1, 4, &builtin_type_int32, UBICOM32_D1_REGADDR, 0 },
+  { "d2", 2, 4, &builtin_type_int32, 0x8, 0 },
+  { "d3", 3, 4, &builtin_type_int32, 0xc, 0 },
+  { "d4", 4, 4, &builtin_type_int32, 0x10, 0 },
+  { "d5", 5, 4, &builtin_type_int32, 0x14, 0 },
+  { "d6", 6, 4, &builtin_type_int32, 0x18, 0 },
+  { "d7", 7, 4, &builtin_type_int32, 0x1c, 0 },
+  { "d8", 8, 4, &builtin_type_int32, UBICOM32_D8_REGADDR, 0 },
+  { "d9", 9, 4, &builtin_type_int32, 0x24, 0 },
+  { "d10", 10, 4, &builtin_type_int32, 0x28, 0 },
+  { "d11", 11, 4, &builtin_type_int32, 0x2c, 0 },
+  { "d12", 12, 4, &builtin_type_int32, 0x30, 0 },
+  { "d13", 13, 4, &builtin_type_int32, 0x34, 0 },
+  { "d14", 14, 4, &builtin_type_int32, 0x38, 0 },
+  { "d15", 15, 4, &builtin_type_int32, 0x3c, 0 },
+
+  /* 0x40 - 0x7f Reserved */
+
+ /* General address.  */
+  { "a0", UBICOM32_A0_REGNUM, 4, &builtin_type_int32, 0x80, 0 },
+  { "a1", UBICOM32_A1_REGNUM, 4, &builtin_type_int32, 0x84, 0 },
+  { "a2", UBICOM32_A2_REGNUM, 4, &builtin_type_int32, 0x88, 0 },
+  { "a3", UBICOM32_A3_REGNUM, 4, &builtin_type_int32, 0x8c, 0 },
+  { "a4", UBICOM32_A4_REGNUM, 4, &builtin_type_int32, 0x90, 0 },
+  { "a5", UBICOM32_A5_REGNUM, 4, &builtin_type_int32, 0x94, 0 },
+  { "a6", UBICOM32_A6_REGNUM, 4, &builtin_type_int32, UBICOM32_A6_REGADDR, 0 },
+  /* Stack pointer.  */
+  { "sp", UBICOM32_SP_REGNUM, 4, &builtin_type_int32, UBICOM32_SP_REGADDR, 0 },
+  /* High 16 bits of multiply accumulator.  */
+  { "mac_hi", 24, 4, &builtin_type_int32, 0xa0, REG_HIDESOME },
+  /* Low 32 bits of multiply accumulator.  */
+  { "mac_lo", 25, 4, &builtin_type_int32, 0xa4, REG_HIDESOME },
+  /* Rounded and clipped S16.15 image of multiply accumulator.  */
+  { "mac_rc16", 26, 4, &builtin_type_int32, 0xa8, REG_HIDESOME | REG_RDONLY },
+  /* 3rd source operand.  */
+  { "source_3", 27, 4, &builtin_type_uint32, 0xac, 0 },
+  /* Current thread's execution count. */
+  { "context_cnt", 28, 4, &builtin_type_uint32, 0xb0, REG_HIDESOME | REG_RDONLY },
+  /* Control/status.  */
+  { "csr", 29, 4, &builtin_type_uint32, 0xb4, 0 },
+  /* Read-only status.  */
+  { "rosr", UBICOM32_ROSR_REGNUM, 4, &builtin_type_uint32, 0xb8, 0 | REG_RDONLY },
+  /* Iread output.  */
+  { "iread_data", 31, 4, &builtin_type_uint32, 0xbc, 0 },
+  /* Low 32 bits of interrupt mask.  */
+  { "int_mask0", 32, 4, &builtin_type_uint32, 0xc0, REG_HIDESOME },
+  /* High 32 bits of interrupt mask.  */
+  { "int_mask1", 33, 4, &builtin_type_uint32, 0xc4, REG_HIDESOME },
+
+  /* 0xc8 - 0xcf Reserved */
+  /* Program counter.  */
+  { "pc", UBICOM32_PC_REGNUM, 4, &void_func_ptr, 0xd0, 0 },
+  { "trap_cause", 35, 4, &builtin_type_uint32, 0xd4, REG_HIDESOME },
+  { "acc1_hi", 36, 4, &builtin_type_uint32, 0xd8, 0 },
+  { "acc1_lo", 37, 4, &builtin_type_uint32, 0xdc, 0 },
+  { "previous_pc", 38, 4, &void_func_ptr, 0xe0, REG_RDONLY },
+
+  /* 0xd0 - 0xff  Reserved */
+  /* Chip identification.  */
+  { "chip_id", 39, 4, &builtin_type_uint32, 0x100, REG_HIDESOME | REG_RDONLY },
+  /* Low 32 bits of interrupt status.  */
+  { "int_stat0", 40, 4, &builtin_type_uint32, 0x104, REG_HIDESOME | REG_RDONLY },
+  /* High 32 bits of interrupt status.  */
+  { "int_stat1", 41, 4, &builtin_type_uint32, 0x108, REG_HIDESOME | REG_RDONLY },
+
+  /* 0x10c - 0x113 Reserved */
+  /* Set bits in int_stat0.  */
+  { "int_set0", 42, 4, &builtin_type_uint32, 0x114, REG_HIDESOME | REG_WRONLY },
+  /* Set bits in int_stat1.  */
+  { "int_set1", 43, 4, &builtin_type_uint32, 0x118, REG_HIDESOME | REG_WRONLY },
+
+  /* 0x11c - 0x123 Reserved */
+  /* Clear bits in int_stat0.  */
+  { "int_clr0", 44, 4, &builtin_type_uint32, 0x124, REG_HIDESOME | REG_WRONLY },
+  /* Clear bits in int_stat1.  */
+  { "int_clr1", 45, 4, &builtin_type_uint32, 0x128, REG_HIDESOME | REG_WRONLY },
+
+  /* 0x12c - 0x133 Reserved */
+  /* Global control.  */
+  { "global_ctrl", 46, 4, &builtin_type_uint32, 0x134, 0 },
+  /* Threads active status.  */
+  { "mt_active", UBICOM32V3_MT_ACTIVE_REGNUM, 4, &builtin_type_uint32, 0x138, REG_HIDESOME | REG_RDONLY },
+  /* Set bits in mt_active.  */
+  { "mt_active_set", 48, 4, &builtin_type_uint32, 0x13c, REG_HIDESOME | REG_WRONLY },
+  /* Clear bits in mt_active.  */
+  { "mt_active_clr", 49, 4, &builtin_type_uint32, 0x140, REG_HIDESOME | REG_WRONLY },
+  /* Debugging threads active status.  */
+  { "mt_dbg_active", 50, 4, &builtin_type_uint32, 0x144, REG_HIDESOME | REG_RDONLY },
+  /* Set bits in mt_dbg_active.  */
+  { "mt_dbg_active_set", 51, 4, &builtin_type_uint32, 0x148, REG_HIDESOME | REG_WRONLY },
+  /* Threads enabled.  */
+  { "mt_en", UBICOM32V3_MT_EN_REGNUM, 4, &builtin_type_uint32, 0x14C, REG_HIDESOME },
+  /* Thread priorities.  */
+  { "mt_pri", UBICOM32V3_MT_PRI_REGNUM, 4, &builtin_type_uint32, 0x150, REG_HIDESOME },
+  /* Thread scheduling policies.  */
+  { "mt_sched", UBICOM32V3_MT_SCHED_REGNUM, 4, &builtin_type_uint32, 0x154, REG_HIDESOME },
+  /* Threads stopped on a break condition.  */
+  { "mt_break", 55, 4, &builtin_type_uint32, 0x158, REG_HIDESOME | REG_RDONLY },
+  /* Clear bits in mt_break.  */
+  { "mt_break_clr", 56, 4, &builtin_type_uint32, 0x15C, REG_HIDESOME | REG_WRONLY },
+  /* Single-step threads.  */
+  { "mt_single_step", 57, 4, &builtin_type_uint32, 0x160, REG_HIDESOME },
+  /* Threads with minimum delay scheduling constraing.  */
+  { "mt_min_del_en", 58, 4, &builtin_type_uint32, 0x164, REG_HIDESOME },
+  { "mt_break_set", 59, 4, &builtin_type_uint32, 0x168, REG_HIDESOME | REG_WRONLY },
+
+  /* 0x16c - 0x16f reserved */
+  /* Data capture address.  */
+  { "dcapt", 60, 4, &builtin_type_uint32, 0x170, REG_HIDESOME },
+
+  /* 0x174 - 0x17b reserved */
+  /* Debugging threads active status clear register.  */
+  { "mt_dbg_active_clr", 61, 4, &builtin_type_int32, 0x17c, REG_HIDESOME | REG_WRONLY },
+  /* scratchpad registers */
+  { "scratchpad0", 62, 4, &builtin_type_uint32, 0x180, 0 },
+  { "scratchpad1", 63, 4, &builtin_type_uint32, 0x184, 0 },
+  { "scratchpad2", 64, 4, &builtin_type_uint32, 0x188, 0 },
+  { "scratchpad3", 65, 4, &builtin_type_uint32, 0x18c, 0 },
+
+  /* 0x190 - 0x19f Reserved */
+  { "chip_cfg", 66, 4, &builtin_type_uint32, 0x1a0, REG_HIDESOME },
+  { "mt_i_blocked", 67, 4, &builtin_type_uint32, 0x1a4, REG_HIDESOME|REG_RDONLY },
+  { "mt_d_blocked", 68, 4, &builtin_type_uint32, 0x1a8, REG_HIDESOME|REG_RDONLY },
+  { "mt_i_blocked_set", 69, 4, &builtin_type_uint32, 0x1ac, REG_HIDESOME|REG_WRONLY},
+  { "mt_d_blocked_set", 70, 4, &builtin_type_uint32, 0x1b0, REG_HIDESOME|REG_WRONLY},
+  { "mt_blocked_clr", 71, 4, &builtin_type_uint32, 0x1b4, REG_HIDESOME|REG_WRONLY},
+  { "mt_trap_en", 72, 4, &builtin_type_uint32, 0x1b8, REG_HIDESOME },
+  { "mt_trap", 73, 4, &builtin_type_uint32, 0x1bc, REG_HIDESOME|REG_RDONLY },
+  { "mt_trap_set", 74, 4, &builtin_type_uint32, 0x1c0, REG_HIDESOME|REG_WRONLY },
+  { "mt_trap_clr", 75, 4, &builtin_type_uint32, 0x1c4, REG_HIDESOME|REG_WRONLY },
+
+  /* 0x1c8-0x1FF Reserved */
+  { "i_range0_hi", 76, 4, &builtin_type_uint32, 0x200, REG_HIDESOME},
+  { "i_range1_hi", 77, 4, &builtin_type_uint32, 0x204, REG_HIDESOME},
+  { "i_range2_hi", 78, 4, &builtin_type_uint32, 0x208, REG_HIDESOME},
+  { "i_range3_hi", 79, 4, &builtin_type_uint32, 0x20c, REG_HIDESOME},
+
+  /* 0x210-0x21f Reserved */
+  { "i_range0_lo", 80, 4, &builtin_type_uint32, 0x220, REG_HIDESOME},
+  { "i_range1_lo", 81, 4, &builtin_type_uint32, 0x224, REG_HIDESOME},
+  { "i_range2_lo", 82, 4, &builtin_type_uint32, 0x228, REG_HIDESOME},
+  { "i_range3_lo", 83, 4, &builtin_type_uint32, 0x22c, REG_HIDESOME},
+
+  /* 0x230-0x23f Reserved */
+  { "i_range0_en", 84, 4, &builtin_type_uint32, 0x240, REG_HIDESOME},
+  { "i_range1_en", 85, 4, &builtin_type_uint32, 0x244, REG_HIDESOME},
+  { "i_range2_en", 86, 4, &builtin_type_uint32, 0x248, REG_HIDESOME},
+  { "i_range3_en", 87, 4, &builtin_type_uint32, 0x24c, REG_HIDESOME},
+
+  /* 0x250-0x25f Reserved */
+  { "d_range0_hi", 88, 4, &builtin_type_uint32, 0x260, REG_HIDESOME},
+  { "d_range1_hi", 89, 4, &builtin_type_uint32, 0x264, REG_HIDESOME},
+  { "d_range2_hi", 90, 4, &builtin_type_uint32, 0x268, REG_HIDESOME},
+  { "d_range3_hi", 91, 4, &builtin_type_uint32, 0x26c, REG_HIDESOME},
+  { "d_range4_hi", 92, 4, &builtin_type_uint32, 0x270, REG_HIDESOME},
+
+  /* 0x274-0x27f Reserved */
+  { "d_range0_lo", 93, 4, &builtin_type_uint32, 0x280, REG_HIDESOME},
+  { "d_range1_lo", 94, 4, &builtin_type_uint32, 0x284, REG_HIDESOME},
+  { "d_range2_lo", 95, 4, &builtin_type_uint32, 0x288, REG_HIDESOME},
+  { "d_range3_lo", 96, 4, &builtin_type_uint32, 0x28c, REG_HIDESOME},
+  { "d_range4_lo", 97, 4, &builtin_type_uint32, 0x290, REG_HIDESOME},
+
+  /* 0x294-0x29f Reserved */
+  { "d_range0_en", 98, 4, &builtin_type_uint32, 0x2a0, REG_HIDESOME},
+  { "d_range1_en", 99, 4, &builtin_type_uint32, 0x2a4, REG_HIDESOME},
+  { "d_range2_en", 100, 4, &builtin_type_uint32, 0x2a8, REG_HIDESOME},
+  { "d_range3_en", 101, 4, &builtin_type_uint32, 0x2ac, REG_HIDESOME},
+  { "d_range4_en", 102, 4, &builtin_type_uint32, 0x2b0, REG_HIDESOME},
+};
+
+/* Number of registers.  */
+enum {
+  NUM_UBICOM32V3_VER5_REGS = sizeof (ubicom32v3_ver5_regs) / sizeof (ubicom32v3_ver5_regs[0])
+};
+
+struct ubicom32_reg ubicom32_posix_regs[] = {
+  /* General data.  */
+  { "d0", 0, 4, &builtin_type_int32, 0x0, 0 },
+  { "d1", 1, 4, &builtin_type_int32, UBICOM32_D1_REGADDR, 0 },
+  { "d2", 2, 4, &builtin_type_int32, 0x8, 0 },
+  { "d3", 3, 4, &builtin_type_int32, 0xc, 0 },
+  { "d4", 4, 4, &builtin_type_int32, 0x10, 0 },
+  { "d5", 5, 4, &builtin_type_int32, 0x14, 0 },
+  { "d6", 6, 4, &builtin_type_int32, 0x18, 0 },
+  { "d7", 7, 4, &builtin_type_int32, 0x1c, 0 },
+  { "d8", 8, 4, &builtin_type_int32, UBICOM32_D8_REGADDR, 0 },
+  { "d9", 9, 4, &builtin_type_int32, 0x24, 0 },
+  { "d10", 10, 4, &builtin_type_int32, 0x28, 0 },
+  { "d11", 11, 4, &builtin_type_int32, 0x2c, 0 },
+  { "d12", 12, 4, &builtin_type_int32, 0x30, 0 },
+  { "d13", 13, 4, &builtin_type_int32, 0x34, 0 },
+  { "d14", 14, 4, &builtin_type_int32, 0x38, 0 },
+  { "d15", 15, 4, &builtin_type_int32, 0x3c, 0 },
+
+  /* 0x40 - 0x7f Reserved */
+
+ /* General address.  */
+  { "a0", UBICOM32_A0_REGNUM, 4, &builtin_type_int32, 0x80, 0 },
+  { "a1", UBICOM32_A1_REGNUM, 4, &builtin_type_int32, 0x84, 0 },
+  { "a2", UBICOM32_A2_REGNUM, 4, &builtin_type_int32, 0x88, 0 },
+  { "a3", UBICOM32_A3_REGNUM, 4, &builtin_type_int32, 0x8c, 0 },
+  { "a4", UBICOM32_A4_REGNUM, 4, &builtin_type_int32, 0x90, 0 },
+  { "a5", UBICOM32_A5_REGNUM, 4, &builtin_type_int32, 0x94, 0 },
+  { "a6", UBICOM32_A6_REGNUM, 4, &builtin_type_int32, UBICOM32_A6_REGADDR, 0 },
+  /* Stack pointer.  */
+  { "sp", UBICOM32_SP_REGNUM, 4, &builtin_type_int32, UBICOM32_SP_REGADDR, 0 },
+  /* High 16 bits of multiply accumulator.  */
+  { "acc0_hi", 24, 4, &builtin_type_int32, 0xa0, 0 },
+  /* Low 32 bits of multiply accumulator.  */
+  { "acc0_lo", 25, 4, &builtin_type_int32, 0xa4, 0 },
+  /* Rounded and clipped S16.15 image of multiply accumulator.  */
+  { "mac_rc16", 26, 4, &builtin_type_int32, 0xa8,  REG_RDONLY },
+  { "acc1_hi", 27, 4, &builtin_type_uint32, 0xa9, 0 },
+  { "acc1_lo", 28, 4, &builtin_type_uint32, 0xaa, 0 },
+  /* 3rd source operand.  */
+  { "source_3", 29, 4, &builtin_type_uint32, 0xac, 0 },
+  /* Current thread's execution count. */
+  { "context_cnt", 30, 4, &builtin_type_uint32, 0xb0, REG_HIDESOME | REG_RDONLY },
+  /* Control/status.  */
+  { "csr", 31, 4, &builtin_type_uint32, 0xb4, 0 },
+  /* Iread output.  */
+  { "iread_data", 32, 4, &builtin_type_uint32, 0xbc, 0 },
+  /* Low 32 bits of interrupt mask.  */
+  { "int_mask0", 33, 4, &builtin_type_uint32, 0xc0, REG_HIDESOME },
+  /* High 32 bits of interrupt mask.  */
+  { "int_mask1", 34, 4, &builtin_type_uint32, 0xc4, REG_HIDESOME },
+
+  /* 0xc8 - 0xcf Reserved */
+  /* Program counter.  */
+  { "trap_cause", 35, 4, &builtin_type_uint32, 0xc8, 0 },
+  { "pc", 36, 4, &void_func_ptr, 0xd0, 0 },
+};
+
+/* Number of registers.  */
+enum {
+  NUM_UBICOM32_POSIX_REGS = sizeof (ubicom32_posix_regs) / sizeof (ubicom32_posix_regs[0]),
+};
+
+#define UBICOM32_POSIX_PC_REGNUM 36
+
+struct ubicom32_reg ubicom32_uclinux_regs[] = {
+  /* General data.  */
+  { "d0", 0, 4, &builtin_type_int32, 0x0, 0 },
+  { "d1", 1, 4, &builtin_type_int32, UBICOM32_D1_REGADDR, 0 },
+  { "d2", 2, 4, &builtin_type_int32, 0x8, 0 },
+  { "d3", 3, 4, &builtin_type_int32, 0xc, 0 },
+  { "d4", 4, 4, &builtin_type_int32, 0x10, 0 },
+  { "d5", 5, 4, &builtin_type_int32, 0x14, 0 },
+  { "d6", 6, 4, &builtin_type_int32, 0x18, 0 },
+  { "d7", 7, 4, &builtin_type_int32, 0x1c, 0 },
+  { "d8", 8, 4, &builtin_type_int32, UBICOM32_D8_REGADDR, 0 },
+  { "d9", 9, 4, &builtin_type_int32, 0x24, 0 },
+  { "d10", 10, 4, &builtin_type_int32, 0x28, 0 },
+  { "d11", 11, 4, &builtin_type_int32, 0x2c, 0 },
+  { "d12", 12, 4, &builtin_type_int32, 0x30, 0 },
+  { "d13", 13, 4, &builtin_type_int32, 0x34, 0 },
+  { "d14", 14, 4, &builtin_type_int32, 0x38, 0 },
+  { "d15", 15, 4, &builtin_type_int32, 0x3c, 0 },
+
+  /* 0x40 - 0x7f Reserved */
+
+ /* General address.  */
+  { "a0", UBICOM32_A0_REGNUM, 4, &builtin_type_int32, 0x80, 0 },
+  { "a1", UBICOM32_A1_REGNUM, 4, &builtin_type_int32, 0x84, 0 },
+  { "a2", UBICOM32_A2_REGNUM, 4, &builtin_type_int32, 0x88, 0 },
+  { "a3", UBICOM32_A3_REGNUM, 4, &builtin_type_int32, 0x8c, 0 },
+  { "a4", UBICOM32_A4_REGNUM, 4, &builtin_type_int32, 0x90, 0 },
+  { "a5", UBICOM32_A5_REGNUM, 4, &builtin_type_int32, 0x94, 0 },
+  { "a6", UBICOM32_A6_REGNUM, 4, &builtin_type_int32, UBICOM32_A6_REGADDR, 0 },
+  /* Stack pointer.  */
+  { "sp", UBICOM32_SP_REGNUM, 4, &builtin_type_int32, UBICOM32_SP_REGADDR, 0 },
+  /* High 16 bits of multiply accumulator.  */
+  { "acc0_hi", 24, 4, &builtin_type_int32, 0xa0, 0 },
+  /* Low 32 bits of multiply accumulator.  */
+  { "acc0_lo", 25, 4, &builtin_type_int32, 0xa4, 0 },
+  /* Rounded and clipped S16.15 image of multiply accumulator.  */
+  { "mac_rc16", 26, 4, &builtin_type_int32, 0xa8,  REG_RDONLY },
+  { "acc1_hi", 27, 4, &builtin_type_uint32, 0xa9, 0 },
+  { "acc1_lo", 28, 4, &builtin_type_uint32, 0xaa, 0 },
+  /* 3rd source operand.  */
+  { "source_3", 29, 4, &builtin_type_uint32, 0xac, 0 },
+  /* Current thread's execution count. */
+  { "context_cnt", 30, 4, &builtin_type_uint32, 0xb0, REG_HIDESOME | REG_RDONLY },
+  /* Control/status.  */
+  { "csr", 31, 4, &builtin_type_uint32, 0xb4, 0 },
+  /* Iread output.  */
+  { "iread_data", 32, 4, &builtin_type_uint32, 0xbc, 0 },
+  /* Low 32 bits of interrupt mask.  */
+  { "int_mask0", 33, 4, &builtin_type_uint32, 0xc0, REG_HIDESOME },
+  /* High 32 bits of interrupt mask.  */
+  { "int_mask1", 34, 4, &builtin_type_uint32, 0xc4, REG_HIDESOME },
+
+  /* 0xc8 - 0xcf Reserved */
+  /* Program counter.  */
+  { "trap_cause", 35, 4, &builtin_type_uint32, 0xc8, 0 },
+  { "pc", 36, 4, &void_func_ptr, 0xd0, 0 },
+
+  { "text_addr", 37, 4, &builtin_type_uint32, 0xFF,  REG_RDONLY  },
+  { "text_end_addr", 38, 4, &builtin_type_uint32, 0xFF,  REG_RDONLY  },
+  { "data_addr", 39, 4, &builtin_type_uint32, 0xFF,  REG_RDONLY  },
+  { "fdpic_exec", 40, 4, &builtin_type_uint32, 0xFF,  REG_RDONLY  },
+  { "fdpic_interp", 41, 4, &builtin_type_uint32, 0xFF,  REG_RDONLY  },
+
+};
+
+/* Number of registers.  */
+enum {
+  NUM_UBICOM32_UCLINUX_REGS = sizeof (ubicom32_uclinux_regs) / sizeof (ubicom32_uclinux_regs[0]),
+};
+
+#define UBICOM32_UCLINUX_PC_REGNUM 36
+
+#if 0
+#define UBICOM32V3_MAIN_STRING "__main__"
+#endif
+#define UBICOM32V3_MAIN_STRING "main"
+#define UBICOM32V3_MAIN_STRING2 "system_main"
+#define UBICOM32V3_MAIN_STRING3 "arch_thread_main"
+#define UBICOM32V3_POSIX_STRING "posix_syscall"
+#define UBICOM32V3_LINUX_STRING "system_call"
+#define UBICOM32V3_START_KERNEL_STRING "start_kernel"
+#define UBICOM32V3_LINUX_INITRAMFS_STRING "__initramfs_start"
+#define UBICOM32V3_LINUX_DO_IRQ_STRING "do_IRQ"
+#define UBICOM32V3_FLASH_START	0x60000000
+#define UBICOM32V3_FLASH_END		0x60fffffc
+#define UBICOM32V3_PRAM_START	0x40000000
+#define UBICOM32V3_PRAM_END		0x47fffffc
+#define UBICOM32V3_DATARAM_START	0x3ffc0000
+#define UBICOM32V3_DATARAM_END	0x3fffffff
+
+static int
+ubicom32v3_frame_chain_valid (struct frame_info *fi)
+{
+  int line;
+  int offset;
+  int unmapped;
+  char *filename = NULL;
+  char *name = NULL;
+  CORE_ADDR pc = frame_pc_unwind(fi);
+  CORE_ADDR sp = frame_sp_unwind(fi);
+
+  if (ubicom32_tdep_debug >= DEBUG_FRAME)
+    fprintf_unfiltered (gdb_stdlog, "ubicom32v3_frame_chain_valid pc = 0x%x sp = 0x%x\n", (unsigned int)pc, (unsigned int)sp);
+
+  if(pc < UBICOM32V3_DATARAM_START ||
+     (UBICOM32V3_PRAM_END < pc && pc < UBICOM32V3_FLASH_START) ||
+     (UBICOM32V3_FLASH_END<pc))
+    {
+      /* pc is in some invalid zone */
+      return 0;
+    }
+
+  /* check if sp is valid at all */
+  if(sp < UBICOM32V3_DATARAM_START ||
+     sp > UBICOM32V3_PRAM_END)
+    return 0;
+
+  /* check if the pc is valid at all */
+  if (!build_address_symbolic (pc, 0, &name, &offset, &filename, &line, &unmapped))
+    {
+      /* we got a hit */
+      if(name)
+	{
+	  if(strstr(name, UBICOM32V3_MAIN_STRING))
+	    {
+	      /* it is present */
+	      return 0;
+	    }
+	  else if(strstr(name, UBICOM32V3_MAIN_STRING2))
+	    {
+	      /* it is present */
+	      return 0;
+	    }
+	  else if(strstr(name, UBICOM32V3_MAIN_STRING3))
+	    {
+	      /* it is present */
+	      return 0;
+	    }
+	  else if(strcmp(name, UBICOM32V3_POSIX_STRING)==0)
+	    {
+	      /* it is present */
+	      return 0;
+	    }
+	  else if(strcmp(name, UBICOM32V3_LINUX_STRING)==0)
+	    {
+	      /* it is present */
+	      return 0;
+	    }
+	  else if(strcmp(name, UBICOM32V3_START_KERNEL_STRING)==0)
+	    {
+	      /* it is present */
+	      return 0;
+	    }
+	  else if(strcmp(name, UBICOM32V3_LINUX_INITRAMFS_STRING)==0)
+	    {
+	      /* it is present */
+	      return 0;
+	    }
+	  else if(strcmp(name, UBICOM32V3_LINUX_DO_IRQ_STRING)==0)
+	    {
+	      /* it is present */
+	      return 0;
+	    }
+	}
+    }
+
+  return 1;
+}
+
+static int
+ubicom32_posix_frame_chain_valid (struct frame_info *fi)
+{
+  int line;
+  int offset;
+  int unmapped;
+  char *filename = NULL;
+  char *name = NULL;
+  CORE_ADDR pc = frame_pc_unwind(fi);
+  CORE_ADDR sp = frame_sp_unwind(fi);
+
+  if (ubicom32_tdep_debug >= DEBUG_FRAME)
+    fprintf_unfiltered (gdb_stdlog, "ubicom32_posix_frame_chain_valid pc = 0x%x sp = 0x%x\n", (unsigned int)pc, (unsigned int)sp);
+
+  if(pc < UBICOM32V3_PRAM_START ||
+     pc > UBICOM32V3_PRAM_END)
+    {
+      /* pc is in some invalid zone */
+      return 0;
+    }
+
+  /* check if sp is valid at all */
+  if(sp < UBICOM32V3_PRAM_START ||
+     sp > UBICOM32V3_PRAM_END)
+    return 0;
+
+  return 1;
+}
+
+/* Return the name of register number NUM, or null if no such register
+   exists in the current architecture.  */
+static const char *
+machine_register_name (int num)
+{
+  struct ubicom32_reg *reg;
+
+  reg = machine_find_reg_num (num, NULL);
+  if (!reg)
+    return NULL;
+  if (!reg->name)
+    return "";
+  return reg->name;
+}
+
+/* If REGNUM != -1, display only that register.  Otherwise, display all
+   registers if ALL and an interesting subset otherwise.  */
+static void
+machine_do_registers_info (struct gdbarch *gdbarch,
+			struct ui_file *file,
+			struct frame_info *frame,
+			int regnum, int all)
+{
+  int from, to, i, column, pad, width;
+  struct ubicom32_reg *reg;
+
+  if (regnum < 0)
+    {
+      from = 0;
+      to = current_machine->num_regs - 1;
+    }
+  else
+    {
+      from = to = regnum;
+      all = 1;
+    }
+
+  for (i = from, column = 0; i <= to; i++)
+    {
+      reg = current_machine->regs + i;
+      if (!reg->name || (!all && (reg->flags & REG_HIDESOME)))
+	continue;
+
+      /* Separate from previous value.  */
+      if (i > from)
+	{
+	  if (!column)
+	    fprintf_filtered (file, "\n");
+	  else
+	    fprintf_filtered (file, "    ");
+	}
+
+      /* Display the name, right-justified.  */
+      if (regnum >= 0)
+	pad = 0;
+      else
+	pad = current_machine->regdisp.namemax[all] - strlen (reg->name);
+      fprintf_filtered (file, "%*c%s  ", pad + 1, '$', reg->name);
+
+      /* Don't attempt to retrieve write-only values.  */
+      if (reg->flags & REG_WRONLY)
+	fprintf_filtered (file, "%-22s", "<write-only>");
+
+      /* Try to retrieve raw value.  */
+      else if (!frame_register_read (frame, i, current_machine->regdisp.rawbuf))
+	fprintf_filtered (file, "%-22s", "<unavailable>");
+
+      /* Display the retrieved value in hex and decimal.  */
+      else
+	{
+	  if (reg->type == &void_func_ptr && *reg->type == NULL)
+	    void_func_ptr = builtin_type_void_func_ptr;
+	  display_val (*reg->type, current_machine->regdisp.rawbuf, 'x', 10, file);
+	  display_val (*reg->type, current_machine->regdisp.rawbuf, 'd', 12, file);
+	}
+      column = !column;
+    }
+  fprintf_filtered (file, "\n");
+}
+
+static struct type *
+machine_register_type (struct gdbarch *gdbarch, int num)
+{
+  return builtin_type_uint32;
+}
+
+char *
+ubicom32v3_remote_threads_extra_info (struct thread_info *tp)
+{
+  static struct ui_file *buf = NULL;
+  static char *bufcpy = NULL;
+  int bit, mt_active, mt_pri, mt_sched, mt_en;
+  long buflen;
+  char mybuffer[1000];
+  char *printBuf = mybuffer;
+  char *buffer = mybuffer;
+
+  unsigned tid;
+
+  if (!buf)
+    buf = mem_fileopen ();
+  else
+    ui_file_rewind (buf);
+
+  mybuffer[0] = 0;
+  bit = 1 << PTID_TO_TNUM (tp->ptid);
+  tid = PIDGET(tp->ptid);
+  tid --;
+  mt_active = read_register (UBICOM32V3_MT_ACTIVE_REGNUM);
+  mt_en = read_register(UBICOM32V3_MT_EN_REGNUM);
+  mt_pri = read_register(UBICOM32V3_MT_PRI_REGNUM);
+  mt_sched = read_register (UBICOM32V3_MT_SCHED_REGNUM);
+
+  if(0<= tid && tid <= 32)
+    {
+      /* query about a Main processor thread */
+      unsigned int mask = 1<<tid;
+
+      if(!(mt_en & mask))
+	{
+	  // Not even enabled
+	  sprintf(buffer, "%s", "Disabled");
+	  buffer += strlen(buffer);
+	}
+      else
+	{
+	  if(!(mt_active & mask))
+	    {
+	      sprintf(buffer, "%s", "Suspended");
+	      buffer += strlen(buffer);
+	    }
+
+	  if(mt_sched &mask)
+	    {
+	      //HRT
+	      if(strlen(printBuf))
+		{
+		  sprintf(buffer, ", ");
+		  buffer += strlen(buffer);
+		}
+	      sprintf(buffer, "HRT ");
+	      buffer += strlen(buffer);
+	    }
+	  else
+	    {
+	      if(strlen(printBuf))
+		{
+		  sprintf(buffer, ", ");
+		  buffer += strlen(buffer);
+		}
+
+	      if(!(mt_pri &mask))
+		sprintf(buffer, "low priority");
+	      else
+		sprintf(buffer, "High priority");
+
+	      buffer += strlen(buffer);
+	    }
+	}
+    }
+
+  fputs_unfiltered(printBuf, buf);
+
+  if (bufcpy)
+    free (bufcpy);
+  bufcpy = ui_file_xstrdup (buf, &buflen);
+
+  if (!buflen)
+    return NULL;
+  return bufcpy;
+}
+
+/* Initialize register information in GDBARCH.  */
+/* Initialize the regdisp entry for each machine. */
+static void
+init_regsdisp (struct ubicom32_machine *machine)
+{
+  int offset, i, size, rawmax, virtmax;
+  int namelen, namemax[2];
+  struct ubicom32_reg *reg;
+
+  offset = rawmax = virtmax = 0;
+  namemax[SOME] = namemax[ALL] = 0;
+
+  for (i = 0; i < machine->num_regs; i++)
+    {
+      reg = machine->regs + i;
+      reg->offset = offset;
+      offset += reg->size;
+
+      if (reg->size > rawmax)
+	rawmax = reg->size;
+      if (reg->type == (&void_func_ptr))
+	size = 4;
+      else
+	size = TYPE_LENGTH (*reg->type);
+      if (size > virtmax)
+	virtmax = size;
+
+      if (reg->name)
+	{
+	  namelen = strlen (reg->name);
+	  if (!(reg->flags & REG_HIDESOME) && namelen > namemax[SOME])
+	    namemax[SOME] = namelen;
+	  if (namelen > namemax[ALL])
+	    namemax[ALL] = namelen;
+	}
+    }
+
+  machine->regdisp.rawbuf = xmalloc (rawmax);
+  machine->regdisp.namemax[SOME] = namemax[SOME];
+  machine->regdisp.namemax[ALL] = namemax[ALL];
+}
+
+
+/* Initialize arch attributes common to all ubicom32
+   platforms/machines */
+
+static struct gdbarch *
+ubicom32_arch_init_common(const struct gdbarch_info *info, const char *name, enum ubicom32_abi abi)
+{
+  struct gdbarch *gdbarch;
+  struct gdbarch_tdep *tdep = XMALLOC (struct gdbarch_tdep);
+  gdbarch = gdbarch_alloc (info, tdep);
+
+  tdep->ubicom32_abi = abi;
+  tdep->name = name;
+
+  /* set_gdbarch_sp_regnum, set_gdbarch_pc_regnum and
+     set_gdbarch_num_regs setup by caller*/
+
+  set_gdbarch_read_pc (gdbarch, ubicom32_read_pc);
+  set_gdbarch_write_pc (gdbarch, ubicom32_write_pc);
+
+  set_gdbarch_num_pseudo_regs (gdbarch, 0);
+
+  set_gdbarch_register_name (gdbarch, (gdbarch_register_name_ftype *)machine_register_name);
+  set_gdbarch_register_type (gdbarch, machine_register_type);
+  set_gdbarch_print_registers_info (gdbarch, machine_do_registers_info);
+
+  set_gdbarch_ptr_bit (gdbarch, 32);
+  set_gdbarch_short_bit (gdbarch, 16);
+  set_gdbarch_int_bit (gdbarch, 32);
+  set_gdbarch_long_bit (gdbarch, 32);
+  set_gdbarch_long_long_bit (gdbarch, 64);
+  set_gdbarch_float_bit (gdbarch, 32);
+  set_gdbarch_double_bit (gdbarch, 64);
+  set_gdbarch_long_double_bit (gdbarch, 64);
+  set_gdbarch_float_format (gdbarch, floatformats_ieee_single);
+  set_gdbarch_double_format (gdbarch, floatformats_ieee_double);
+  set_gdbarch_long_double_format (gdbarch, floatformats_ieee_double);
+
+  set_gdbarch_address_to_pointer (gdbarch, ubicom32_address_to_pointer);
+  set_gdbarch_pointer_to_address (gdbarch, ubicom32_pointer_to_address);
+  set_gdbarch_integer_to_address (gdbarch, ubicom32_integer_to_address);
+
+  set_gdbarch_call_dummy_location (gdbarch, AT_ENTRY_POINT);
+
+#if 0
+  set_gdbarch_extract_return_value (gdbarch, ubicom32_extract_return_value);
+  set_gdbarch_store_return_value (gdbarch, ubicom32_store_return_value);
+#endif
+
+  set_gdbarch_return_value (gdbarch, ubicom32_return_value);
+
+  set_gdbarch_decr_pc_after_break (gdbarch, 0);
+  set_gdbarch_inner_than (gdbarch, core_addr_lessthan);
+  set_gdbarch_skip_prologue (gdbarch, ubicom32_skip_prologue);
+  frame_unwind_append_sniffer (gdbarch, ubicom32_frame_p);
+  frame_base_set_default (gdbarch, &ubicom32_frame_base);
+  set_gdbarch_unwind_dummy_id (gdbarch, ubicom32_unwind_dummy_id);
+
+  set_gdbarch_frame_args_skip (gdbarch, 0);
+
+  set_gdbarch_unwind_pc(gdbarch, ubicom32_unwind_pc);
+  set_gdbarch_unwind_sp(gdbarch, ubicom32_unwind_sp);
+  set_gdbarch_print_insn (gdbarch, print_insn_ubicom32);
+
+  return gdbarch;
+}
+
+/* Initialize the current architecture based on INFO.  If possible, re-use an
+   architecture from ARCHES, which is a list of architectures already created
+   during this debugging session.
+
+   Called e.g. at program startup, when reading a core file, and when reading
+   a binary file. */
+
+static struct gdbarch *
+ubicom32v3_arch_init (struct gdbarch_info info, struct gdbarch_list *arches)
+{
+  struct gdbarch *gdbarch;
+  gdbarch = ubicom32_arch_init_common(&info, "Ubicom32 Version 3",
+				      UBICOM32_ABI_FLAT);
+
+  set_gdbarch_sp_regnum (gdbarch, UBICOM32V3_SP_REGNUM);
+  set_gdbarch_pc_regnum (gdbarch, UBICOM32V3_PC_REGNUM);
+  set_gdbarch_num_regs (gdbarch, NUM_UBICOM32V3_REGS);
+  set_gdbarch_breakpoint_from_pc (gdbarch, ubicom32_breakpoint_from_pc);
+  return gdbarch;
+}
+
+static struct gdbarch *
+ubicom32v3_ver4_arch_init (struct gdbarch_info info, struct gdbarch_list *arches)
+{
+  struct gdbarch *gdbarch;
+  gdbarch = ubicom32_arch_init_common(&info, "Ubicom32 Version 4",
+				      UBICOM32_ABI_FLAT);
+
+  set_gdbarch_sp_regnum (gdbarch, UBICOM32V3_SP_REGNUM);
+  set_gdbarch_pc_regnum (gdbarch, UBICOM32V3_PC_REGNUM);
+  set_gdbarch_num_regs (gdbarch, NUM_UBICOM32V3_VER4_REGS);
+  set_gdbarch_breakpoint_from_pc (gdbarch, ubicom32_breakpoint_from_pc);
+  return gdbarch;
+}
+
+static struct gdbarch *
+ubicom32v3_ver5_arch_init (struct gdbarch_info info, struct gdbarch_list *arches)
+{
+  struct gdbarch *gdbarch;
+  gdbarch = ubicom32_arch_init_common(&info, "Ubicom32 Version 4",
+				      UBICOM32_ABI_FLAT);
+
+  set_gdbarch_sp_regnum (gdbarch, UBICOM32V3_SP_REGNUM);
+  set_gdbarch_pc_regnum (gdbarch, UBICOM32V3_PC_REGNUM);
+  set_gdbarch_num_regs (gdbarch, NUM_UBICOM32V3_VER5_REGS);
+  set_gdbarch_breakpoint_from_pc (gdbarch, ubicom32_breakpoint_from_pc);
+  return gdbarch;
+}
+
+static struct gdbarch *
+ubicom32_posix_arch_init (struct gdbarch_info info, struct gdbarch_list *arches)
+{
+  struct gdbarch *gdbarch;
+  gdbarch = ubicom32_arch_init_common(&info, "Ubicom32 POSIX",
+				      UBICOM32_ABI_FLAT);
+
+  set_gdbarch_sp_regnum (gdbarch, UBICOM32V3_SP_REGNUM);
+  set_gdbarch_pc_regnum (gdbarch, UBICOM32_POSIX_PC_REGNUM);
+  set_gdbarch_num_regs (gdbarch, NUM_UBICOM32_POSIX_REGS);
+//// NAT this is incorrect for posix. is it really needed?
+  set_gdbarch_breakpoint_from_pc (gdbarch, ubicom32_breakpoint_from_pc);
+
+  return gdbarch;
+}
+
+static struct gdbarch *
+ubicom32_uclinux_arch_init (struct gdbarch_info info, struct gdbarch_list *arches)
+{
+  struct gdbarch *gdbarch;
+  enum ubicom32_abi abi;
+  int elf_flags;
+
+  /* Extract the ELF flags, if available.  */
+  if (info.abfd && bfd_get_flavour (info.abfd) == bfd_target_elf_flavour)
+    elf_flags = elf_elfheader (info.abfd)->e_flags;
+  else
+    elf_flags = 0;
+
+  if (elf_flags & EF_UBICOM32_FDPIC)
+    abi = UBICOM32_ABI_FDPIC;
+  else
+    abi = UBICOM32_ABI_FLAT;
+
+  gdbarch = ubicom32_arch_init_common(&info, "Ubicom32 uClinux", abi);
+
+  set_gdbarch_sp_regnum (gdbarch, UBICOM32V3_SP_REGNUM);
+  set_gdbarch_pc_regnum (gdbarch, UBICOM32_UCLINUX_PC_REGNUM);
+  set_gdbarch_num_regs (gdbarch, NUM_UBICOM32_UCLINUX_REGS);
+  set_gdbarch_breakpoint_from_pc (gdbarch, ubicom32_software_breakpoint_from_pc);
+
+  /* uCLinux cannot do single step in kernel so we need to do it in
+   * software */
+  set_gdbarch_software_single_step (gdbarch, ubicom32_software_single_step);
+
+  if (ubicom32_abi (gdbarch) == UBICOM32_ABI_FDPIC)
+    {
+      set_gdbarch_convert_from_func_ptr_addr (gdbarch,
+					      ubicom32_convert_from_func_ptr_addr);
+    }
+
+  /* Enable TLS support.  */
+  set_gdbarch_fetch_tls_load_module_address (gdbarch,
+					     ubicom32_fetch_objfile_link_map);
+
+  return gdbarch;
+}
+
+struct gdbarch * ubicom32_arch_init(struct gdbarch_info info, struct gdbarch_list *arches)
+{
+  struct gdbarch *gdbarch;
+  gdbarch = ubicom32_arch_init_common(&info, "Ubicom32 Version 2",
+				      UBICOM32_ABI_FLAT);
+
+  set_gdbarch_sp_regnum (gdbarch, UBICOM32_SP_REGNUM);
+  set_gdbarch_pc_regnum (gdbarch, UBICOM32_PC_REGNUM);
+  set_gdbarch_num_regs (gdbarch, NUM_UBICOM32_REGS);
+  set_gdbarch_breakpoint_from_pc (gdbarch, ubicom32_breakpoint_from_pc);
+  return gdbarch;
+}
+
+char *bfd_print_names[] = {
+  "ubicom32",
+  "ubicom32dsp",
+  "ubicom32ver4",
+  "ubicom32posix",
+  "ubicom32uclinux",
+  "ubicom32ver5",
+  NULL
+};
+
+struct ubicom32_machine machines[] = {
+  { ubicom32_regs, NUM_UBICOM32_REGS, NULL, {NULL, {0, 0}}, ubicom32_arch_init, ubicom32_frame_chain_valid, UBICOM32_PC_REGNUM, UBICOM32_SP_REGNUM}, /* ubicom32 mercury entry */
+  { ubicom32v3_regs, NUM_UBICOM32V3_REGS, NULL, {NULL, {0, 0}}, ubicom32v3_arch_init, ubicom32v3_frame_chain_valid, UBICOM32V3_PC_REGNUM, UBICOM32V3_SP_REGNUM}, /* ubicom32 mars entry */
+  { ubicom32v3_ver4_regs, NUM_UBICOM32V3_VER4_REGS, NULL, {NULL, {0, 0}}, ubicom32v3_ver4_arch_init, ubicom32v3_frame_chain_valid, UBICOM32V3_PC_REGNUM, UBICOM32V3_SP_REGNUM}, /* ubicom32 ares entry */
+  /* ipPOSIX */
+  { ubicom32_posix_regs, NUM_UBICOM32_POSIX_REGS, NULL, {NULL, {0, 0}},
+    ubicom32_posix_arch_init, ubicom32_posix_frame_chain_valid,
+    UBICOM32_POSIX_PC_REGNUM, UBICOM32V3_SP_REGNUM }, /* ubicom32 posix entry */
+  /* Linux without mmu */
+  { ubicom32_uclinux_regs, NUM_UBICOM32_UCLINUX_REGS, NULL, {NULL, {0, 0}},
+    ubicom32_uclinux_arch_init, ubicom32_posix_frame_chain_valid,
+    UBICOM32_UCLINUX_PC_REGNUM, UBICOM32V3_SP_REGNUM }, /* ubicom32 uclinux entry */
+  { ubicom32v3_ver5_regs, NUM_UBICOM32V3_VER5_REGS, NULL, {NULL, {0, 0}}, ubicom32v3_ver5_arch_init, ubicom32v3_frame_chain_valid, UBICOM32V3_PC_REGNUM, UBICOM32V3_SP_REGNUM} /* ubicom32 jupiter entry */
+};
+
+
+static struct gdbarch *
+ubicom32_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)
+{
+  int i;
+  /* Find a candidate among extant architectures.  Only one architecture so
+     far, so use simple search. */
+  arches = gdbarch_list_lookup_by_info (arches, &info);
+  if (arches != NULL)
+    {
+      return arches->gdbarch;
+    }
+
+  /* hunt and find the entry that matches the printable name. */
+  i = 0;
+  while (bfd_print_names[i])
+    {
+      if (!strcmp(bfd_print_names[i], info.bfd_arch_info->printable_name))
+	break;
+
+      i++;
+    }
+
+  if (bfd_print_names[i])
+    current_machine = &machines[i];
+  else
+    error("Unable to find a machine entry that matches the selected bfd.");
+
+  if(current_machine->gdbarch)
+    {
+      return current_machine->gdbarch;
+    }
+
+  current_machine->gdbarch = current_machine->arch_init_fn(info, arches);
+
+  return current_machine->gdbarch;
+}
+
+/* Module initialization.  */
+
+void
+_initialize_ubicom32_tdep (void)
+{
+  int i;
+  /* Initialize each register set regdisp entry.   */
+#if 0
+  if (void_func_ptr == NULL)
+    void_func_ptr = builtin_type_void_func_ptr;
+#endif
+  /*
+   * Initialize the machine structure.
+   */
+  init_regsdisp(&machines[0]);
+  init_regsdisp(&machines[1]);
+  init_regsdisp(&machines[2]);
+  init_regsdisp(&machines[3]);
+  init_regsdisp(&machines[4]);
+  init_regsdisp(&machines[5]);
+
+  gdbarch_register (bfd_arch_ubicom32, ubicom32_gdbarch_init, NULL);
+}
--- /dev/null
+++ b/gdb/ubicom32-tdep.h
@@ -0,0 +1,177 @@
+/* The ABIs for Blackfin.  */
+enum ubicom32_abi
+{
+  UBICOM32_ABI_FLAT,
+  UBICOM32_ABI_FDPIC,
+};
+
+/* Target-dependent structure in gdbarch.  */
+struct gdbarch_tdep
+{
+  /* Which ABI is in use?  */
+  const char *name;
+  enum ubicom32_abi ubicom32_abi;
+};
+
+/* Stack alignment and mask for parameters and return values.  */
+enum {
+  UBICOM32_ALIGN      = 4,
+  UBICOM32_ALIGN_MASK = (UBICOM32_ALIGN - 1)
+};
+
+/* Size of general data and address registers.  */
+enum {
+  UBICOM32_REG_SIZE   = 4
+};
+
+/* Size of an instruction.  */
+enum {
+  UBICOM32_INSN_SIZE  = 4
+};
+
+#define GDB_DMEM(addr)	(addr)
+#define GDB_IMEM(addr)	(addr)
+#define REAL_MEM(addr)	(addr)
+
+/* Special register numbers.  */
+enum ubicom32_gdb_regnum {
+  UBICOM32_D0_REGNUM = 0,			/* general data */
+  UBICOM32_D1_REGNUM = 1,			/* general data */
+  UBICOM32_D2_REGNUM = 2,			/* general data */
+  UBICOM32_D3_REGNUM = 3,			/* general data */
+  UBICOM32_D4_REGNUM = 4,			/* general data */
+  UBICOM32_D5_REGNUM = 5,			/* general data */
+  UBICOM32_D6_REGNUM = 6,			/* general data */
+  UBICOM32_D7_REGNUM = 7,			/* general data */
+  UBICOM32_D8_REGNUM = 8,			/* general data */
+  UBICOM32_D9_REGNUM = 9,			/* general data */
+  UBICOM32_D10_REGNUM = 10,			/* general data */
+  UBICOM32_D11_REGNUM = 11,			/* general data */
+  UBICOM32_D12_REGNUM = 12,			/* general data */
+  UBICOM32_D13_REGNUM = 13,			/* general data */
+  UBICOM32_D14_REGNUM = 14,			/* general data */
+  UBICOM32_D15_REGNUM = 15,			/* general data */
+  UBICOM32_A0_REGNUM = 16,			/* general address */
+  UBICOM32_A1_REGNUM = 17,			/* general address */
+  UBICOM32_A2_REGNUM = 18,			/* general address */
+  UBICOM32_A3_REGNUM = 19,			/* general address */
+  UBICOM32_A4_REGNUM = 20,			/* general address */
+  UBICOM32_A5_REGNUM = 21,			/* general address / link register */
+  UBICOM32_A6_REGNUM = 22,			/* general address / frame pointer  */
+  UBICOM32_A7_REGNUM = 23,			/* gerenal address / stack pointer */
+  UBICOM32_SP_REGNUM = UBICOM32_A7_REGNUM,	/* stack pointer */
+  UBICOM32_LR_REGNUM  = UBICOM32_A5_REGNUM,	/* link register (return address) */
+  UBICOM32_PC_REGNUM = 34,			/* program counter */
+  UBICOM32_RET_REGNUM = UBICOM32_D0_REGNUM,	/* return value */
+  UBICOM32_RET2_REGNUM = UBICOM32_D1_REGNUM,	/* 2nd word of 8-byte return value */
+  UBICOM32_SRET_REGNUM = UBICOM32_D0_REGNUM,	/* returned struct address */
+  UBICOM32_ROSR_REGNUM = 30,			/* read-only status */
+  UBICOM32_MT_ACTIVE_REGNUM	= 45,		/* threads active status */
+  UBICOM32_MT_EN_REGNUM = 48,			/* threads enabled */
+  UBICOM32_MT_PRI_REGNUM = 49,			/* thread priorities */
+  UBICOM32_MT_SCHED_REGNUM = 50,		/* thread scheduling policies */
+  UBICOM32_GDB_THREAD_REGNUM = 66,		/* change threads from GDB */
+  UBICOM32_FP_REGNUM = 67,			/* frame pointer */
+
+};
+
+/* Special register memory locations.  */
+enum {
+  UBICOM32_D0_REGADDR = 0x0,
+  UBICOM32_D1_REGADDR = 0x4,
+  UBICOM32_D7_REGADDR = 0x1c,
+  UBICOM32_D8_REGADDR = 0x20,
+  UBICOM32_D9_REGADDR = 0x24,
+  UBICOM32_D13_REGADDR = 0x34,
+  UBICOM32_D14_REGADDR = 0x38,
+  UBICOM32_A6_REGADDR = 0x98,
+  UBICOM32_SP_REGADDR = 0x9c
+};
+
+/* ubicom32v3/v4 related */
+/* Special register numbers.  */
+enum ubicom32v3_gdb_regnum {
+  UBICOM32V3_D0_REGNUM = 0,			/* general data */
+  UBICOM32V3_D1_REGNUM = 1,			/* general data */
+  UBICOM32V3_D2_REGNUM = 2,			/* general data */
+  UBICOM32V3_D3_REGNUM = 3,			/* general data */
+  UBICOM32V3_D4_REGNUM = 4,			/* general data */
+  UBICOM32V3_D5_REGNUM = 5,			/* general data */
+  UBICOM32V3_D6_REGNUM = 6,			/* general data */
+  UBICOM32V3_D7_REGNUM = 7,			/* general data */
+  UBICOM32V3_D8_REGNUM = 8,			/* general data */
+  UBICOM32V3_D9_REGNUM = 9,			/* general data */
+  UBICOM32V3_D10_REGNUM = 10,			/* general data */
+  UBICOM32V3_D11_REGNUM = 11,			/* general data */
+  UBICOM32V3_D12_REGNUM = 12,			/* general data */
+  UBICOM32V3_D13_REGNUM = 13,			/* general data */
+  UBICOM32V3_D14_REGNUM = 14,			/* general data */
+  UBICOM32V3_D15_REGNUM = 15,			/* general data */
+  UBICOM32V3_A0_REGNUM = 16,			/* general address */
+  UBICOM32V3_A1_REGNUM = 17,			/* general address */
+  UBICOM32V3_A2_REGNUM = 18,			/* general address */
+  UBICOM32V3_A3_REGNUM = 19,			/* general address */
+  UBICOM32V3_A4_REGNUM = 20,			/* general address */
+  UBICOM32V3_A5_REGNUM = 21,			/* general address / link register */
+  UBICOM32V3_A6_REGNUM = 22,			/* general address / frame pointer  */
+  UBICOM32V3_A7_REGNUM = 23,			/* gerenal address / stack pointer */
+  UBICOM32V3_SP_REGNUM = UBICOM32V3_A7_REGNUM,	/* stack pointer */
+  UBICOM32V3_LR_REGNUM  = UBICOM32V3_A5_REGNUM,	/* link register (return address) */
+  UBICOM32V3_PC_REGNUM = 34,			/* program counter */
+  UBICOM32V3_RET_REGNUM = UBICOM32V3_D0_REGNUM,	/* return value */
+  UBICOM32V3_RET2_REGNUM = UBICOM32V3_D1_REGNUM,/* 2nd word of 8-byte return value */
+  UBICOM32V3_SRET_REGNUM = UBICOM32V3_D0_REGNUM,/* returned struct address */
+  UBICOM32V3_ROSR_REGNUM = 30,			/* read-only status */
+  UBICOM32V3_MT_ACTIVE_REGNUM	= 47,		/* threads active status */
+  UBICOM32V3_MT_EN_REGNUM = 52,			/* threads enabled */
+  UBICOM32V3_MT_PRI_REGNUM = 53,		/* thread priorities */
+  UBICOM32V3_MT_SCHED_REGNUM = 54,		/* thread scheduling policies */
+};
+
+/* Special register memory locations.  */
+enum {
+  UBICOM32V3_D0_REGADDR = 0x0,
+  UBICOM32V3_D1_REGADDR = 0x4,
+  UBICOM32V3_D7_REGADDR = 0x1c,
+  UBICOM32V3_D8_REGADDR = 0x20,
+  UBICOM32V3_D14_REGADDR = 0x38,
+  UBICOM32V3_A6_REGADDR = 0x98,
+  UBICOM32V3_SP_REGADDR = 0x9c
+};
+
+/* Special registers used by uclinux */
+enum ubicom32uclinux_gdb_regnum {
+  UBICOM32_TEXT_ADDR_REGNUM = 37,		/* not a real regnum */
+  UBICOM32_TEXT_ADDR_END_REGNUM = 38,
+  UBICOM32_DATA_ADDR_REGNUM = 39,
+  UBICOM32_FDPIC_LOADMAP_EXEC_REGNUM = 40,
+  UBICOM32_FDPIC_LOADMAP_INTERP_REGNUM = 41,
+};
+/* Register flag bits.  */
+
+enum {
+  REG_HIDESOME = 0x01,		/* don't display in "info registers" */
+  REG_RDONLY = 0x02,		/* register is read-only */
+  REG_WRONLY = 0x04		/* register is write-only */
+};
+
+
+/* Fetch the interpreter and executable loadmap addresses (for shared
+   library support) for the FDPIC ABI.  Return 0 if successful, -1 if
+   not.  (E.g, -1 will be returned if the ABI isn't the FDPIC ABI.)  */
+extern int ubicom32_fdpic_loadmap_addresses (struct gdbarch *gdbarch,
+					 CORE_ADDR *interp_addr,
+					 CORE_ADDR *exec_addr);
+
+/* Given a function entry point, find and return the GOT address for the
+   containing load module.  */
+CORE_ADDR ubicom32_fdpic_find_global_pointer (CORE_ADDR addr);
+
+/* Given a function entry point, find and return the canonical descriptor
+   for that function, if one exists.  If no canonical descriptor could
+   be found, return 0.  */
+CORE_ADDR ubicom32_fdpic_find_canonical_descriptor (CORE_ADDR entry_point);
+
+/* Given an objfile, return the address of its link map.  This value is
+   needed for TLS support.  */
+CORE_ADDR ubicom32_fetch_objfile_link_map (struct objfile *objfile);
--- /dev/null
+++ b/gdb/ubicom32_dongle.c
@@ -0,0 +1,167 @@
+/* Target-dependent code for GDB, the GNU debugger.
+
+   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 
+   2009
+   Free Software Foundation, Inc.
+
+   This file is part of GDB.
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.
+*/
+#include <sys/types.h>
+#include <sys/time.h>
+#include <errno.h>
+#include <stdlib.h>
+#include <stdio.h>
+#include <netdb.h>
+#include <string.h>
+#include <unistd.h>
+#include "defs.h"
+#include "gdbcmd.h"
+#include "serial.h"
+#include "gdb_select.h"
+#include "ubicom32_dongle.h"
+
+static struct serial *ubicom32ispisd_desc = NULL;
+int ubicom32_dongle_timeout = 5;
+
+void
+dongle_error(const char *string)
+{
+  error("%s", string);
+}
+
+int
+dongle_interface_status(void)
+{
+  if(ubicom32ispisd_desc)
+    return 1;
+  else
+    return 0;
+}
+
+/* This shuts down the ISD connection and then shuts down the connection to the dongle */
+int
+dongle_close(void)
+{
+  serial_close(ubicom32ispisd_desc);
+  ubicom32ispisd_desc = NULL;
+  return 0;
+}
+
+
+int
+dongle_open(char *remote) {
+  ubicom32ispisd_desc = serial_open (remote);
+  if (ubicom32ispisd_desc == NULL)
+    return -1;
+  
+  serial_raw (ubicom32ispisd_desc);
+
+  return 0;
+}
+
+int
+dongle_read(char *pkt, unsigned int numbytes)
+{
+  unsigned int count =0;
+
+  while(count < numbytes)
+    {
+      int c;
+      if(ubicom32_dongle_timeout > 5)
+	c = serial_readchar (ubicom32ispisd_desc, ubicom32_dongle_timeout);
+      else
+	c = serial_readchar (ubicom32ispisd_desc, count == 0 ? 5 : 1);
+      if (c < 0)
+	{
+	  return -1;
+	}
+      *pkt++ = c;
+      count++;
+    }
+  return 0;
+}
+      
+int
+dongle_write (char *packet, unsigned int length)
+{
+  if (serial_write (ubicom32ispisd_desc, (char *) packet, length) != 0)
+    return -1;
+  else
+    return 0;
+}
+
+int
+dongle_poll(void)
+{
+  if (ubicom32ispisd_desc->bufcnt)
+    return 1;
+
+  while (1)
+    {
+      int numfds;
+      fd_set readfds, exceptfds;
+      struct timeval tv;
+
+      tv.tv_sec = 0;
+      tv.tv_usec = 10000;
+
+      FD_ZERO (&readfds);
+      FD_ZERO (&exceptfds);
+      FD_SET (ubicom32ispisd_desc->fd, &readfds);
+      FD_SET (ubicom32ispisd_desc->fd, &exceptfds);
+
+      numfds = gdb_select (ubicom32ispisd_desc->fd + 1, &readfds, 0, &exceptfds, &tv);
+
+      if (numfds <= 0)
+	{
+	  if (numfds == 0)
+	    return 0;		/* Nothing avaialble */
+	  else if (errno == EINTR)
+	    continue;
+	  else
+	    return -1;		/* Got an error from select or poll */
+	}
+      
+      /* Read data available. */
+      return 1;
+    }
+}
+
+
+static void
+set_dongle_timeout (char *args, int from_tty, struct cmd_list_element *c)
+{
+}  
+
+static void
+show_dongle_timeout (struct ui_file *file, int from_tty,
+		     struct cmd_list_element *c, const char *value)
+{
+  fprintf_filtered (file, _("\
+Dongle timeout is set to %s.\n"),
+		    value);
+}
+
+void
+_initialize_ubicom32_dongle (void)
+{
+  add_setshow_uinteger_cmd ("dongletimeout", no_class, &ubicom32_dongle_timeout, _("\
+Set timeout value for ubicom32 dongle."),  _("\
+Show timeout value for ubicom32 dongle."),NULL,
+			    set_dongle_timeout,
+			    show_dongle_timeout,
+			    &setlist, &showlist);
+}
--- /dev/null
+++ b/gdb/ubicom32_dongle.h
@@ -0,0 +1,28 @@
+/* Target-dependent code for GDB, the GNU debugger.
+
+   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 
+   2009
+   Free Software Foundation, Inc.
+
+   This file is part of GDB.
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.
+*/
+extern int dongle_interface_status (void);
+extern int dongle_close (void);
+extern int dongle_open (char *remote);
+extern int dongle_read (char *pkt, unsigned int numbytes);
+extern int dongle_write (char *packet, unsigned int length);
+extern void dongle_error (const char *);
+extern int dongle_poll(void);
--- a/include/dis-asm.h
+++ b/include/dis-asm.h
@@ -273,6 +273,7 @@ extern int print_insn_tic30		(bfd_vma, d
 extern int print_insn_tic4x		(bfd_vma, disassemble_info *);
 extern int print_insn_tic54x		(bfd_vma, disassemble_info *);
 extern int print_insn_tic80		(bfd_vma, disassemble_info *);
+extern int print_insn_ubicom32		(bfd_vma, disassemble_info *);
 extern int print_insn_v850		(bfd_vma, disassemble_info *);
 extern int print_insn_vax		(bfd_vma, disassemble_info *);
 extern int print_insn_w65		(bfd_vma, disassemble_info *);
--- /dev/null
+++ b/include/dis-asm_ubicom32.h
@@ -0,0 +1,339 @@
+/* Interface between the opcode library and its callers.
+
+   Copyright 1999, 2000, 2001, 2002, 2003, 2004, 2005
+   Free Software Foundation, Inc.
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 2, or (at your option)
+   any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program; if not, write to the Free Software
+   Foundation, Inc., 51 Franklin Street - Fifth Floor,
+   Boston, MA 02110-1301, USA.
+
+   Written by Cygnus Support, 1993.
+
+   The opcode library (libopcodes.a) provides instruction decoders for
+   a large variety of instruction sets, callable with an identical
+   interface, for making instruction-processing programs more independent
+   of the instruction set being processed.  */
+
+#ifndef DIS_ASM_H
+#define DIS_ASM_H
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#include <stdio.h>
+#include "bfd.h"
+
+typedef int (*fprintf_ftype) (void *, const char*, ...) ATTRIBUTE_FPTR_PRINTF_2;
+
+enum dis_insn_type {
+  dis_noninsn,			/* Not a valid instruction */
+  dis_nonbranch,		/* Not a branch instruction */
+  dis_branch,			/* Unconditional branch */
+  dis_condbranch,		/* Conditional branch */
+  dis_jsr,			/* Jump to subroutine */
+  dis_condjsr,			/* Conditional jump to subroutine */
+  dis_dref,			/* Data reference instruction */
+  dis_dref2			/* Two data references in instruction */
+};
+
+/* This struct is passed into the instruction decoding routine,
+   and is passed back out into each callback.  The various fields are used
+   for conveying information from your main routine into your callbacks,
+   for passing information into the instruction decoders (such as the
+   addresses of the callback functions), or for passing information
+   back from the instruction decoders to their callers.
+
+   It must be initialized before it is first passed; this can be done
+   by hand, or using one of the initialization macros below.  */
+
+typedef struct disassemble_info {
+  fprintf_ftype fprintf_func;
+  void *stream;
+  void *application_data;
+
+  /* Target description.  We could replace this with a pointer to the bfd,
+     but that would require one.  There currently isn't any such requirement
+     so to avoid introducing one we record these explicitly.  */
+  /* The bfd_flavour.  This can be bfd_target_unknown_flavour.  */
+  enum bfd_flavour flavour;
+  /* The bfd_arch value.  */
+  enum bfd_architecture arch;
+  /* The bfd_mach value.  */
+  unsigned long mach;
+  /* Endianness (for bi-endian cpus).  Mono-endian cpus can ignore this.  */
+  enum bfd_endian endian;
+  /* An arch/mach-specific bitmask of selected instruction subsets, mainly
+     for processors with run-time-switchable instruction sets.  The default,
+     zero, means that there is no constraint.  CGEN-based opcodes ports
+     may use ISA_foo masks.  */
+  void *insn_sets;
+
+  /* Some targets need information about the current section to accurately
+     display insns.  If this is NULL, the target disassembler function
+     will have to make its best guess.  */
+  asection *section;
+
+  /* An array of pointers to symbols either at the location being disassembled
+     or at the start of the function being disassembled.  The array is sorted
+     so that the first symbol is intended to be the one used.  The others are
+     present for any misc. purposes.  This is not set reliably, but if it is
+     not NULL, it is correct.  */
+  asymbol **symbols;
+  /* Number of symbols in array.  */
+  int num_symbols;
+
+  /* For use by the disassembler.
+     The top 16 bits are reserved for public use (and are documented here).
+     The bottom 16 bits are for the internal use of the disassembler.  */
+  unsigned long flags;
+#define INSN_HAS_RELOC	0x80000000
+  void *private_data;
+
+  /* Function used to get bytes to disassemble.  MEMADDR is the
+     address of the stuff to be disassembled, MYADDR is the address to
+     put the bytes in, and LENGTH is the number of bytes to read.
+     INFO is a pointer to this struct.
+     Returns an errno value or 0 for success.  */
+  int (*read_memory_func)
+    (bfd_vma memaddr, bfd_byte *myaddr, unsigned int length,
+     struct disassemble_info *info);
+
+  /* Function which should be called if we get an error that we can't
+     recover from.  STATUS is the errno value from read_memory_func and
+     MEMADDR is the address that we were trying to read.  INFO is a
+     pointer to this struct.  */
+  void (*memory_error_func)
+    (int status, bfd_vma memaddr, struct disassemble_info *info);
+
+  /* Function called to print ADDR.  */
+  void (*print_address_func)
+    (bfd_vma addr, struct disassemble_info *info);
+
+  /* Function called to determine if there is a symbol at the given ADDR.
+     If there is, the function returns 1, otherwise it returns 0.
+     This is used by ports which support an overlay manager where
+     the overlay number is held in the top part of an address.  In
+     some circumstances we want to include the overlay number in the
+     address, (normally because there is a symbol associated with
+     that address), but sometimes we want to mask out the overlay bits.  */
+  int (* symbol_at_address_func)
+    (bfd_vma addr, struct disassemble_info * info);
+
+  /* Function called to check if a SYMBOL is can be displayed to the user.
+     This is used by some ports that want to hide special symbols when
+     displaying debugging outout.  */
+  bfd_boolean (* symbol_is_valid)
+    (asymbol *, struct disassemble_info * info);
+
+  /* These are for buffer_read_memory.  */
+  bfd_byte *buffer;
+  bfd_vma buffer_vma;
+  unsigned int buffer_length;
+
+  /* This variable may be set by the instruction decoder.  It suggests
+      the number of bytes objdump should display on a single line.  If
+      the instruction decoder sets this, it should always set it to
+      the same value in order to get reasonable looking output.  */
+  int bytes_per_line;
+
+  /* The next two variables control the way objdump displays the raw data.  */
+  /* For example, if bytes_per_line is 8 and bytes_per_chunk is 4, the */
+  /* output will look like this:
+     00:   00000000 00000000
+     with the chunks displayed according to "display_endian". */
+  int bytes_per_chunk;
+  enum bfd_endian display_endian;
+
+  /* Number of octets per incremented target address
+     Normally one, but some DSPs have byte sizes of 16 or 32 bits.  */
+  unsigned int octets_per_byte;
+
+  /* The number of zeroes we want to see at the end of a section before we
+     start skipping them.  */
+  unsigned int skip_zeroes;
+
+  /* The number of zeroes to skip at the end of a section.  If the number
+     of zeroes at the end is between SKIP_ZEROES_AT_END and SKIP_ZEROES,
+     they will be disassembled.  If there are fewer than
+     SKIP_ZEROES_AT_END, they will be skipped.  This is a heuristic
+     attempt to avoid disassembling zeroes inserted by section
+     alignment.  */
+  unsigned int skip_zeroes_at_end;
+
+  /* Whether the disassembler always needs the relocations.  */
+  bfd_boolean disassembler_needs_relocs;
+
+  /* Results from instruction decoders.  Not all decoders yet support
+     this information.  This info is set each time an instruction is
+     decoded, and is only valid for the last such instruction.
+
+     To determine whether this decoder supports this information, set
+     insn_info_valid to 0, decode an instruction, then check it.  */
+
+  char insn_info_valid;		/* Branch info has been set. */
+  char branch_delay_insns;	/* How many sequential insn's will run before
+				   a branch takes effect.  (0 = normal) */
+  char data_size;		/* Size of data reference in insn, in bytes */
+  enum dis_insn_type insn_type;	/* Type of instruction */
+  bfd_vma target;		/* Target address of branch or dref, if known;
+				   zero if unknown.  */
+  bfd_vma target2;		/* Second target address for dref2 */
+
+  /* Command line options specific to the target disassembler.  */
+  char * disassembler_options;
+
+} disassemble_info;
+
+
+/* Standard disassemblers.  Disassemble one instruction at the given
+   target address.  Return number of octets processed.  */
+typedef int (*disassembler_ftype) (bfd_vma, disassemble_info *);
+
+extern int print_insn_big_mips		(bfd_vma, disassemble_info *);
+extern int print_insn_little_mips	(bfd_vma, disassemble_info *);
+extern int print_insn_i386		(bfd_vma, disassemble_info *);
+extern int print_insn_i386_att		(bfd_vma, disassemble_info *);
+extern int print_insn_i386_intel	(bfd_vma, disassemble_info *);
+extern int print_insn_ia64		(bfd_vma, disassemble_info *);
+extern int print_insn_i370		(bfd_vma, disassemble_info *);
+extern int print_insn_m68hc11		(bfd_vma, disassemble_info *);
+extern int print_insn_m68hc12		(bfd_vma, disassemble_info *);
+extern int print_insn_m68k		(bfd_vma, disassemble_info *);
+extern int print_insn_z80		(bfd_vma, disassemble_info *);
+extern int print_insn_z8001		(bfd_vma, disassemble_info *);
+extern int print_insn_z8002		(bfd_vma, disassemble_info *);
+extern int print_insn_h8300		(bfd_vma, disassemble_info *);
+extern int print_insn_h8300h		(bfd_vma, disassemble_info *);
+extern int print_insn_h8300s		(bfd_vma, disassemble_info *);
+extern int print_insn_h8500		(bfd_vma, disassemble_info *);
+extern int print_insn_alpha		(bfd_vma, disassemble_info *);
+extern int print_insn_big_arm		(bfd_vma, disassemble_info *);
+extern int print_insn_little_arm	(bfd_vma, disassemble_info *);
+extern int print_insn_sparc		(bfd_vma, disassemble_info *);
+extern int print_insn_avr		(bfd_vma, disassemble_info *);
+extern int print_insn_bfin		(bfd_vma, disassemble_info *);
+extern int print_insn_d10v		(bfd_vma, disassemble_info *);
+extern int print_insn_d30v		(bfd_vma, disassemble_info *);
+extern int print_insn_dlx 		(bfd_vma, disassemble_info *);
+extern int print_insn_fr30		(bfd_vma, disassemble_info *);
+extern int print_insn_hppa		(bfd_vma, disassemble_info *);
+extern int print_insn_i860		(bfd_vma, disassemble_info *);
+extern int print_insn_i960		(bfd_vma, disassemble_info *);
+extern int print_insn_m32r		(bfd_vma, disassemble_info *);
+extern int print_insn_m88k		(bfd_vma, disassemble_info *);
+extern int print_insn_maxq_little	(bfd_vma, disassemble_info *);
+extern int print_insn_maxq_big		(bfd_vma, disassemble_info *);
+extern int print_insn_mcore		(bfd_vma, disassemble_info *);
+extern int print_insn_mmix		(bfd_vma, disassemble_info *);
+extern int print_insn_mn10200		(bfd_vma, disassemble_info *);
+extern int print_insn_mn10300		(bfd_vma, disassemble_info *);
+extern int print_insn_mt                (bfd_vma, disassemble_info *);
+extern int print_insn_msp430		(bfd_vma, disassemble_info *);
+extern int print_insn_ns32k		(bfd_vma, disassemble_info *);
+extern int print_insn_crx               (bfd_vma, disassemble_info *);
+extern int print_insn_openrisc		(bfd_vma, disassemble_info *);
+extern int print_insn_big_or32		(bfd_vma, disassemble_info *);
+extern int print_insn_little_or32	(bfd_vma, disassemble_info *);
+extern int print_insn_pdp11		(bfd_vma, disassemble_info *);
+extern int print_insn_pj		(bfd_vma, disassemble_info *);
+extern int print_insn_big_powerpc	(bfd_vma, disassemble_info *);
+extern int print_insn_little_powerpc	(bfd_vma, disassemble_info *);
+extern int print_insn_rs6000		(bfd_vma, disassemble_info *);
+extern int print_insn_s390		(bfd_vma, disassemble_info *);
+extern int print_insn_sh		(bfd_vma, disassemble_info *);
+extern int print_insn_tic30		(bfd_vma, disassemble_info *);
+extern int print_insn_tic4x		(bfd_vma, disassemble_info *);
+extern int print_insn_tic54x		(bfd_vma, disassemble_info *);
+extern int print_insn_tic80		(bfd_vma, disassemble_info *);
+extern int print_insn_ubicom32		(bfd_vma, disassemble_info *);
+extern int print_insn_v850		(bfd_vma, disassemble_info *);
+extern int print_insn_vax		(bfd_vma, disassemble_info *);
+extern int print_insn_w65		(bfd_vma, disassemble_info *);
+extern int print_insn_xstormy16		(bfd_vma, disassemble_info *);
+extern int print_insn_xtensa		(bfd_vma, disassemble_info *);
+extern int print_insn_sh64		(bfd_vma, disassemble_info *);
+extern int print_insn_sh64x_media	(bfd_vma, disassemble_info *);
+extern int print_insn_frv		(bfd_vma, disassemble_info *);
+extern int print_insn_iq2000		(bfd_vma, disassemble_info *);
+extern int print_insn_xc16x		(bfd_vma, disassemble_info *);
+extern int print_insn_m32c	(bfd_vma, disassemble_info *);
+
+extern disassembler_ftype arc_get_disassembler (void *);
+extern disassembler_ftype cris_get_disassembler (bfd *);
+
+extern void print_mips_disassembler_options (FILE *);
+extern void print_ppc_disassembler_options (FILE *);
+extern void print_arm_disassembler_options (FILE *);
+extern void parse_arm_disassembler_option (char *);
+extern int get_arm_regname_num_options (void);
+extern int set_arm_regname_option (int);
+extern int get_arm_regnames (int, const char **, const char **, const char *const **);
+extern bfd_boolean arm_symbol_is_valid (asymbol *, struct disassemble_info *);
+
+/* Fetch the disassembler for a given BFD, if that support is available.  */
+extern disassembler_ftype disassembler (bfd *);
+
+/* Amend the disassemble_info structure as necessary for the target architecture.
+   Should only be called after initialising the info->arch field.  */
+extern void disassemble_init_for_target (struct disassemble_info * info);
+
+/* Document any target specific options available from the disassembler.  */
+extern void disassembler_usage (FILE *);
+
+
+/* This block of definitions is for particular callers who read instructions
+   into a buffer before calling the instruction decoder.  */
+
+/* Here is a function which callers may wish to use for read_memory_func.
+   It gets bytes from a buffer.  */
+extern int buffer_read_memory
+  (bfd_vma, bfd_byte *, unsigned int, struct disassemble_info *);
+
+/* This function goes with buffer_read_memory.
+   It prints a message using info->fprintf_func and info->stream.  */
+extern void perror_memory (int, bfd_vma, struct disassemble_info *);
+
+
+/* Just print the address in hex.  This is included for completeness even
+   though both GDB and objdump provide their own (to print symbolic
+   addresses).  */
+extern void generic_print_address
+  (bfd_vma, struct disassemble_info *);
+
+/* Always true.  */
+extern int generic_symbol_at_address
+  (bfd_vma, struct disassemble_info *);
+
+/* Also always true.  */
+extern bfd_boolean generic_symbol_is_valid
+  (asymbol *, struct disassemble_info *);
+
+/* Method to initialize a disassemble_info struct.  This should be
+   called by all applications creating such a struct.  */
+extern void init_disassemble_info (struct disassemble_info *info, void *stream,
+				   fprintf_ftype fprintf_func);
+
+/* For compatibility with existing code.  */
+#define INIT_DISASSEMBLE_INFO(INFO, STREAM, FPRINTF_FUNC) \
+  init_disassemble_info (&(INFO), (STREAM), (fprintf_ftype) (FPRINTF_FUNC))
+#define INIT_DISASSEMBLE_INFO_NO_ARCH(INFO, STREAM, FPRINTF_FUNC) \
+  init_disassemble_info (&(INFO), (STREAM), (fprintf_ftype) (FPRINTF_FUNC))
+
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* ! defined (DIS_ASM_H) */
--- a/include/elf/common.h
+++ b/include/elf/common.h
@@ -267,6 +267,9 @@
 
 #define EM_XSTORMY16		0xad45
 
+#define EM_UBICOM32 	        0xde3d	/* Ubicom32; no ABI */
+#define EM_UBICOM32MATH 	0xde3e	/* Ubicom32 co-processor; no ABI */
+
 /* mn10200 and mn10300 backend magic numbers.
    Written in the absense of an ABI.  */
 #define EM_CYGNUS_MN10300	0xbeef
--- /dev/null
+++ b/include/elf/ubicom32.h
@@ -0,0 +1,79 @@
+/* ubicom32 ELF support for BFD.
+   Copyright (C) 2000 Free Software Foundation, Inc.
+
+This file is part of BFD, the Binary File Descriptor library.
+
+This program is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2 of the License, or
+(at your option) any later version.
+
+This program is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with this program; if not, write to the Free Software Foundation, Inc.,
+59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
+
+#ifndef _ELF_UBICOM32_H
+#define _ELF_UBICOM32_H
+
+#include "elf/reloc-macros.h"
+
+/* Relocations.  */
+START_RELOC_NUMBERS (elf_ubicom32_reloc_type)
+  RELOC_NUMBER (R_UBICOM32_NONE, 0)
+  RELOC_NUMBER (R_UBICOM32_16, 1)
+  RELOC_NUMBER (R_UBICOM32_32, 2)
+  RELOC_NUMBER (R_UBICOM32_LO16, 3)
+  RELOC_NUMBER (R_UBICOM32_HI16, 4)
+  RELOC_NUMBER (R_UBICOM32_21_PCREL, 5)
+  RELOC_NUMBER (R_UBICOM32_24_PCREL, 6)
+  RELOC_NUMBER (R_UBICOM32_HI24, 7)
+  RELOC_NUMBER (R_UBICOM32_LO7_S, 8)
+  RELOC_NUMBER (R_UBICOM32_LO7_2_S, 9)
+  RELOC_NUMBER (R_UBICOM32_LO7_4_S, 10)
+  RELOC_NUMBER (R_UBICOM32_LO7_D, 11)
+  RELOC_NUMBER (R_UBICOM32_LO7_2_D, 12)
+  RELOC_NUMBER (R_UBICOM32_LO7_4_D, 13)
+  RELOC_NUMBER (R_UBICOM32_32_HARVARD, 14)
+  RELOC_NUMBER (R_UBICOM32_LO7_CALLI, 15)
+  RELOC_NUMBER (R_UBICOM32_LO16_CALLI, 16)
+  RELOC_NUMBER (R_UBICOM32_GOT_HI24, 17)
+  RELOC_NUMBER (R_UBICOM32_GOT_LO7_S, 18)
+  RELOC_NUMBER (R_UBICOM32_GOT_LO7_2_S, 19)
+  RELOC_NUMBER (R_UBICOM32_GOT_LO7_4_S, 20)
+  RELOC_NUMBER (R_UBICOM32_GOT_LO7_D, 21)
+  RELOC_NUMBER (R_UBICOM32_GOT_LO7_2_D, 22)
+  RELOC_NUMBER (R_UBICOM32_GOT_LO7_4_D, 23)
+  RELOC_NUMBER (R_UBICOM32_FUNCDESC_GOT_HI24, 24)
+  RELOC_NUMBER (R_UBICOM32_FUNCDESC_GOT_LO7_S, 25)
+  RELOC_NUMBER (R_UBICOM32_FUNCDESC_GOT_LO7_2_S, 26)
+  RELOC_NUMBER (R_UBICOM32_FUNCDESC_GOT_LO7_4_S, 27)
+  RELOC_NUMBER (R_UBICOM32_FUNCDESC_GOT_LO7_D, 28)
+  RELOC_NUMBER (R_UBICOM32_FUNCDESC_GOT_LO7_2_D, 29)
+  RELOC_NUMBER (R_UBICOM32_FUNCDESC_GOT_LO7_4_D, 30)
+  RELOC_NUMBER (R_UBICOM32_GOT_LO7_CALLI, 31)
+  RELOC_NUMBER (R_UBICOM32_FUNCDESC_GOT_LO7_CALLI, 32)
+  RELOC_NUMBER (R_UBICOM32_FUNCDESC_VALUE, 33)
+  RELOC_NUMBER (R_UBICOM32_FUNCDESC, 34)
+  RELOC_NUMBER (R_UBICOM32_GOTOFFSET_LO, 35)
+  RELOC_NUMBER (R_UBICOM32_GOTOFFSET_HI, 36)
+  RELOC_NUMBER (R_UBICOM32_FUNCDESC_GOTOFFSET_LO, 37)
+  RELOC_NUMBER (R_UBICOM32_FUNCDESC_GOTOFFSET_HI, 38)
+  RELOC_NUMBER (R_UBICOM32_GNU_VTINHERIT, 200)
+  RELOC_NUMBER (R_UBICOM32_GNU_VTENTRY, 201)
+END_RELOC_NUMBERS(R_UBICOM32_max)
+
+
+/*
+ * Processor specific flags for the ELF header e_flags field.
+ */
+#define EF_UBICOM32_PIC         0x80000000      /* -fpic */
+#define EF_UBICOM32_FDPIC       0x40000000      /* -mfdpic */
+
+#define EF_UBICOM32_PIC_FLAGS   (EF_UBICOM32_PIC | EF_UBICOM32_FDPIC)
+
+#endif /* _ELF_IP_H */
--- a/opcodes/Makefile.am
+++ b/opcodes/Makefile.am
@@ -50,6 +50,7 @@ HFILES = \
 	sh-opc.h \
 	sh64-opc.h \
 	sysdep.h \
+	ubicom32-desc.h ubicom32-opc.h \
 	w65-opc.h \
 	xc16x-desc.h xc16x-opc.h \
 	xstormy16-desc.h xstormy16-opc.h \
@@ -191,6 +192,11 @@ CFILES = \
 	tic54x-opc.c \
 	tic80-dis.c \
 	tic80-opc.c \
+	ubicom32-asm.c \
+	ubicom32-desc.c \
+	ubicom32-dis.c \
+	ubicom32-ibld.c \
+	ubicom32-opc.c \
 	v850-dis.c \
 	v850-opc.c \
 	vax-dis.c \
@@ -333,6 +339,11 @@ ALL_MACHINES = \
 	tic54x-opc.lo \
 	tic80-dis.lo \
 	tic80-opc.lo \
+	ubicom32-asm.lo \
+	ubicom32-desc.lo \
+	ubicom32-dis.lo \
+	ubicom32-ibld.lo \
+	ubicom32-opc.lo \
 	v850-dis.lo \
 	v850-opc.lo \
 	vax-dis.lo \
@@ -421,7 +432,7 @@ uninstall_libopcodes:
 	rm -f $(DESTDIR)$(bfdincludedir)/dis-asm.h
 
 CLEANFILES = \
-	stamp-ip2k stamp-m32c stamp-m32r stamp-fr30 stamp-frv \
+	stamp-ubicom32 stamp-ip2k stamp-m32c stamp-m32r stamp-fr30 stamp-frv \
 	stamp-openrisc stamp-iq2000 stamp-mep stamp-mt stamp-xstormy16 stamp-xc16x\
 	libopcodes.a stamp-lib dep.sed DEP DEPA DEP1 DEP2
 
@@ -438,10 +449,11 @@ CGENDEPS = \
 	$(CGENDIR)/opc-opinst.scm \
 	cgen-asm.in cgen-dis.in cgen-ibld.in
 
-CGEN_CPUS = fr30 frv ip2k m32c m32r mep mt openrisc xc16x xstormy16
+CGEN_CPUS = fr30 frv ip2k ubicom32 m32c m32r mep mt openrisc xc16x xstormy16
 
 if CGEN_MAINT
 IP2K_DEPS = stamp-ip2k
+UBICOM32_DEPS = stamp-ubicom32
 M32C_DEPS = stamp-m32c
 M32R_DEPS = stamp-m32r
 FR30_DEPS = stamp-fr30
@@ -454,6 +466,7 @@ XC16X_DEPS = stamp-xc16x
 XSTORMY16_DEPS = stamp-xstormy16
 else
 IP2K_DEPS =
+UBICOM32_DEPS =
 M32C_DEPS =
 M32R_DEPS =
 FR30_DEPS =
@@ -482,6 +495,13 @@ run-cgen-all:
 .PHONY: run-cgen-all
 
 # For now, require developers to configure with --enable-cgen-maint.
+$(srcdir)/ubicom32-desc.h $(srcdir)/ubicom32-desc.c $(srcdir)/ubicom32-opc.h $(srcdir)/ubicom32-opc.c $(srcdir)/ubicom32-ibld.c $(srcdir)/ubicom32-asm.c $(srcdir)/ubicom32-dis.c: $(UBICOM32_DEPS)
+#	@true
+stamp-ubicom32: $(CGENDEPS) $(CPUDIR)/ubicom32.cpu $(CPUDIR)/ubicom32.opc
+	$(MAKE) run-cgen arch=ubicom32 prefix=ubicom32 options= extrafiles=
+$(srcdir)/ip2k-desc.h $(srcdir)/ip2k-desc.c $(srcdir)/ip2k-opc.h $(srcdir)/ip2k-opc.c $(srcdir)/ip2k-ibld.c $(srcdir)/ip2k-asm.c $(srcdir)/ip2k-dis.c: $(IP2K_DEPS)
+	@true
+
 $(srcdir)/ip2k-desc.h $(srcdir)/ip2k-desc.c $(srcdir)/ip2k-opc.h $(srcdir)/ip2k-opc.c $(srcdir)/ip2k-ibld.c $(srcdir)/ip2k-asm.c $(srcdir)/ip2k-dis.c: $(IP2K_DEPS)
 	@true
 stamp-ip2k: $(CGENDEPS) $(CPUDIR)/ip2k.cpu $(CPUDIR)/ip2k.opc
@@ -844,6 +864,34 @@ ia64-gen.lo: ia64-gen.c $(INCDIR)/anside
   ia64-opc-i.c ia64-opc-m.c ia64-opc-b.c ia64-opc-f.c \
   ia64-opc-x.c ia64-opc-d.c
 ia64-asmtab.lo: ia64-asmtab.c
+ubicom32-asm.lo: ubicom32-asm.c sysdep.h config.h $(INCDIR)/ansidecl.h \
+  $(BFD_H) $(INCDIR)/ansidecl.h $(INCDIR)/symcat.h $(INCDIR)/symcat.h \
+  ubicom32-desc.h $(INCDIR)/opcode/cgen-bitset.h $(INCDIR)/opcode/cgen.h \
+  $(INCDIR)/symcat.h $(INCDIR)/opcode/cgen-bitset.h ubicom32-opc.h \
+  opintl.h $(INCDIR)/xregex.h $(INCDIR)/xregex2.h $(INCDIR)/libiberty.h \
+  $(INCDIR)/ansidecl.h $(INCDIR)/safe-ctype.h
+ubicom32-desc.lo: ubicom32-desc.c sysdep.h config.h $(INCDIR)/ansidecl.h \
+  $(BFD_H) $(INCDIR)/ansidecl.h $(INCDIR)/symcat.h $(INCDIR)/symcat.h \
+  ubicom32-desc.h $(INCDIR)/opcode/cgen-bitset.h $(INCDIR)/opcode/cgen.h \
+  $(INCDIR)/symcat.h $(INCDIR)/opcode/cgen-bitset.h ubicom32-opc.h \
+  opintl.h $(INCDIR)/libiberty.h $(INCDIR)/ansidecl.h \
+  $(INCDIR)/xregex.h $(INCDIR)/xregex2.h
+ubicom32-dis.lo: ubicom32-dis.c sysdep.h config.h $(INCDIR)/ansidecl.h \
+  $(INCDIR)/dis-asm.h $(BFD_H) $(INCDIR)/ansidecl.h $(INCDIR)/symcat.h \
+  $(BFD_H) $(INCDIR)/symcat.h $(INCDIR)/libiberty.h $(INCDIR)/ansidecl.h \
+  ubicom32-desc.h $(INCDIR)/opcode/cgen-bitset.h $(INCDIR)/opcode/cgen.h \
+  $(INCDIR)/symcat.h $(INCDIR)/opcode/cgen-bitset.h ubicom32-opc.h \
+  opintl.h
+ubicom32-ibld.lo: ubicom32-ibld.c sysdep.h config.h $(INCDIR)/ansidecl.h \
+  $(INCDIR)/dis-asm.h $(BFD_H) $(INCDIR)/ansidecl.h $(INCDIR)/symcat.h \
+  $(BFD_H) $(INCDIR)/symcat.h ubicom32-desc.h $(INCDIR)/opcode/cgen-bitset.h \
+  $(INCDIR)/opcode/cgen.h $(INCDIR)/symcat.h $(INCDIR)/opcode/cgen-bitset.h \
+  ubicom32-opc.h opintl.h $(INCDIR)/safe-ctype.h
+ubicom32-opc.lo: ubicom32-opc.c sysdep.h config.h $(INCDIR)/ansidecl.h \
+  $(BFD_H) $(INCDIR)/ansidecl.h $(INCDIR)/symcat.h $(INCDIR)/symcat.h \
+  ubicom32-desc.h $(INCDIR)/opcode/cgen-bitset.h $(INCDIR)/opcode/cgen.h \
+  $(INCDIR)/symcat.h $(INCDIR)/opcode/cgen-bitset.h ubicom32-opc.h \
+  $(INCDIR)/libiberty.h $(INCDIR)/ansidecl.h $(INCDIR)/safe-ctype.h
 ip2k-asm.lo: ip2k-asm.c sysdep.h config.h $(INCDIR)/ansidecl.h \
   $(BFD_H) $(INCDIR)/ansidecl.h $(INCDIR)/symcat.h $(INCDIR)/symcat.h \
   ip2k-desc.h $(INCDIR)/opcode/cgen-bitset.h $(INCDIR)/opcode/cgen.h \
--- a/opcodes/Makefile.in
+++ b/opcodes/Makefile.in
@@ -278,6 +278,7 @@ HFILES = \
 	sh-opc.h \
 	sh64-opc.h \
 	sysdep.h \
+	ubicom32-desc.h ubicom32-opc.h \
 	w65-opc.h \
 	xc16x-desc.h xc16x-opc.h \
 	xstormy16-desc.h xstormy16-opc.h \
@@ -420,6 +421,11 @@ CFILES = \
 	tic54x-opc.c \
 	tic80-dis.c \
 	tic80-opc.c \
+	ubicom32-asm.c \
+	ubicom32-desc.c \
+	ubicom32-dis.c \
+	ubicom32-ibld.c \
+	ubicom32-opc.c \
 	v850-dis.c \
 	v850-opc.c \
 	vax-dis.c \
@@ -562,6 +568,11 @@ ALL_MACHINES = \
 	tic54x-opc.lo \
 	tic80-dis.lo \
 	tic80-opc.lo \
+	ubicom32-asm.lo \
+	ubicom32-desc.lo \
+	ubicom32-dis.lo \
+	ubicom32-ibld.lo \
+	ubicom32-opc.lo \
 	v850-dis.lo \
 	v850-opc.lo \
 	vax-dis.lo \
@@ -604,7 +615,7 @@ libopcodes_la_LDFLAGS = -release `cat ..
 noinst_LIBRARIES = libopcodes.a
 POTFILES = $(HFILES) $(CFILES)
 CLEANFILES = \
-	stamp-ip2k stamp-m32c stamp-m32r stamp-fr30 stamp-frv \
+	stamp-ip2k stamp-ubicom32 stamp-m32c stamp-m32r stamp-fr30 stamp-frv \
 	stamp-openrisc stamp-iq2000 stamp-mep stamp-mt stamp-xstormy16 stamp-xc16x\
 	libopcodes.a stamp-lib dep.sed DEP DEPA DEP1 DEP2
 
@@ -619,9 +630,11 @@ CGENDEPS = \
 	$(CGENDIR)/opc-opinst.scm \
 	cgen-asm.in cgen-dis.in cgen-ibld.in
 
-CGEN_CPUS = fr30 frv ip2k m32c m32r mep mt openrisc xc16x xstormy16
+CGEN_CPUS = fr30 frv ip2k ubicom32 m32c m32r mep mt openrisc xc16x xstormy16
 @CGEN_MAINT_FALSE@IP2K_DEPS = 
 @CGEN_MAINT_TRUE@IP2K_DEPS = stamp-ip2k
+@CGEN_MAINT_FALSE@UBICOM32_DEPS = 
+@CGEN_MAINT_TRUE@UBICOM32_DEPS = stamp-ubicom32
 @CGEN_MAINT_FALSE@M32C_DEPS = 
 @CGEN_MAINT_TRUE@M32C_DEPS = stamp-m32c
 @CGEN_MAINT_FALSE@M32R_DEPS = 
@@ -1035,6 +1048,12 @@ run-cgen-all:
 .PHONY: run-cgen-all
 
 # For now, require developers to configure with --enable-cgen-maint.
+$(srcdir)/ubicom32-desc.h $(srcdir)/ubicom32-desc.c $(srcdir)/ubicom32-opc.h $(srcdir)/ubicom32-opc.c $(srcdir)/ubicom32-ibld.c $(srcdir)/ubicom32-asm.c $(srcdir)/ubicom32-dis.c: $(UBICOM32_DEPS)
+#	@true
+stamp-ubicom32: $(CGENDEPS) $(CPUDIR)/ubicom32.cpu $(CPUDIR)/ubicom32.opc
+	$(MAKE) run-cgen arch=ubicom32 prefix=ubicom32 \
+		archfile=$(CPUDIR)/ubicom32.cpu opcfile=$(CPUDIR)/ubicom32.opc options= extrafiles=
+
 $(srcdir)/ip2k-desc.h $(srcdir)/ip2k-desc.c $(srcdir)/ip2k-opc.h $(srcdir)/ip2k-opc.c $(srcdir)/ip2k-ibld.c $(srcdir)/ip2k-asm.c $(srcdir)/ip2k-dis.c: $(IP2K_DEPS)
 	@true
 stamp-ip2k: $(CGENDEPS) $(CPUDIR)/ip2k.cpu $(CPUDIR)/ip2k.opc
@@ -1396,6 +1415,34 @@ ia64-gen.lo: ia64-gen.c $(INCDIR)/anside
   ia64-opc-i.c ia64-opc-m.c ia64-opc-b.c ia64-opc-f.c \
   ia64-opc-x.c ia64-opc-d.c
 ia64-asmtab.lo: ia64-asmtab.c
+ubicom32-asm.lo: ubicom32-asm.c sysdep.h config.h $(INCDIR)/ansidecl.h \
+  $(BFD_H) $(INCDIR)/ansidecl.h $(INCDIR)/symcat.h $(INCDIR)/symcat.h \
+  ubicom32-desc.h $(INCDIR)/opcode/cgen-bitset.h $(INCDIR)/opcode/cgen.h \
+  $(INCDIR)/symcat.h $(INCDIR)/opcode/cgen-bitset.h ubicom32-opc.h \
+  opintl.h $(INCDIR)/xregex.h $(INCDIR)/xregex2.h $(INCDIR)/libiberty.h \
+  $(INCDIR)/ansidecl.h $(INCDIR)/safe-ctype.h
+ubicom32-desc.lo: ubicom32-desc.c sysdep.h config.h $(INCDIR)/ansidecl.h \
+  $(BFD_H) $(INCDIR)/ansidecl.h $(INCDIR)/symcat.h $(INCDIR)/symcat.h \
+  ubicom32-desc.h $(INCDIR)/opcode/cgen-bitset.h $(INCDIR)/opcode/cgen.h \
+  $(INCDIR)/symcat.h $(INCDIR)/opcode/cgen-bitset.h ubicom32-opc.h \
+  opintl.h $(INCDIR)/libiberty.h $(INCDIR)/ansidecl.h \
+  $(INCDIR)/xregex.h $(INCDIR)/xregex2.h
+ubicom32-dis.lo: ubicom32-dis.c sysdep.h config.h $(INCDIR)/ansidecl.h \
+  $(INCDIR)/dis-asm.h $(BFD_H) $(INCDIR)/ansidecl.h $(INCDIR)/symcat.h \
+  $(BFD_H) $(INCDIR)/symcat.h $(INCDIR)/libiberty.h $(INCDIR)/ansidecl.h \
+  ubicom32-desc.h $(INCDIR)/opcode/cgen-bitset.h $(INCDIR)/opcode/cgen.h \
+  $(INCDIR)/symcat.h $(INCDIR)/opcode/cgen-bitset.h ubicom32-opc.h \
+  opintl.h
+ubicom32-ibld.lo: ubicom32-ibld.c sysdep.h config.h $(INCDIR)/ansidecl.h \
+  $(INCDIR)/dis-asm.h $(BFD_H) $(INCDIR)/ansidecl.h $(INCDIR)/symcat.h \
+  $(BFD_H) $(INCDIR)/symcat.h ubicom32-desc.h $(INCDIR)/opcode/cgen-bitset.h \
+  $(INCDIR)/opcode/cgen.h $(INCDIR)/symcat.h $(INCDIR)/opcode/cgen-bitset.h \
+  ubicom32-opc.h opintl.h $(INCDIR)/safe-ctype.h
+ubicom32-opc.lo: ubicom32-opc.c sysdep.h config.h $(INCDIR)/ansidecl.h \
+  $(BFD_H) $(INCDIR)/ansidecl.h $(INCDIR)/symcat.h $(INCDIR)/symcat.h \
+  ubicom32-desc.h $(INCDIR)/opcode/cgen-bitset.h $(INCDIR)/opcode/cgen.h \
+  $(INCDIR)/symcat.h $(INCDIR)/opcode/cgen-bitset.h ubicom32-opc.h \
+  $(INCDIR)/libiberty.h $(INCDIR)/ansidecl.h $(INCDIR)/safe-ctype.h
 ip2k-asm.lo: ip2k-asm.c sysdep.h config.h $(INCDIR)/ansidecl.h \
   $(BFD_H) $(INCDIR)/ansidecl.h $(INCDIR)/symcat.h $(INCDIR)/symcat.h \
   ip2k-desc.h $(INCDIR)/opcode/cgen-bitset.h $(INCDIR)/opcode/cgen.h \
--- a/opcodes/configure
+++ b/opcodes/configure
@@ -11590,6 +11590,7 @@ if test x${all_targets} = xfalse ; then
         bfd_tic4x_arch)         ta="$ta tic4x-dis.lo" ;;
 	bfd_tic54x_arch)	ta="$ta tic54x-dis.lo tic54x-opc.lo" ;;
 	bfd_tic80_arch)		ta="$ta tic80-dis.lo tic80-opc.lo" ;;
+	bfd_ubicom32_arch)		ta="$ta ubicom32-asm.lo ubicom32-desc.lo ubicom32-dis.lo ubicom32-ibld.lo ubicom32-opc.lo" using_cgen=yes ;;
 	bfd_v850_arch)		ta="$ta v850-opc.lo v850-dis.lo" ;;
 	bfd_v850e_arch)		ta="$ta v850-opc.lo v850-dis.lo" ;;
 	bfd_v850ea_arch)	ta="$ta v850-opc.lo v850-dis.lo" ;;
--- a/opcodes/configure.in
+++ b/opcodes/configure.in
@@ -244,6 +244,7 @@ if test x${all_targets} = xfalse ; then
         bfd_tic4x_arch)         ta="$ta tic4x-dis.lo" ;;
 	bfd_tic54x_arch)	ta="$ta tic54x-dis.lo tic54x-opc.lo" ;;
 	bfd_tic80_arch)		ta="$ta tic80-dis.lo tic80-opc.lo" ;;
+	bfd_ubicom32_arch)		ta="$ta ubicom32-asm.lo ubicom32-desc.lo ubicom32-dis.lo ubicom32-ibld.lo ubicom32-opc.lo" using_cgen=yes ;;
 	bfd_v850_arch)		ta="$ta v850-opc.lo v850-dis.lo" ;;
 	bfd_v850e_arch)		ta="$ta v850-opc.lo v850-dis.lo" ;;
 	bfd_v850ea_arch)	ta="$ta v850-opc.lo v850-dis.lo" ;;
--- a/opcodes/disassemble.c
+++ b/opcodes/disassemble.c
@@ -77,6 +77,7 @@
 #define ARCH_tic4x
 #define ARCH_tic54x
 #define ARCH_tic80
+#define ARCH_ubicom32
 #define ARCH_v850
 #define ARCH_vax
 #define ARCH_w65
@@ -386,6 +387,11 @@ disassembler (abfd)
       disassemble = print_insn_tic80;
       break;
 #endif
+#ifdef ARCH_ubicom32
+    case bfd_arch_ubicom32:
+      disassemble = print_insn_ubicom32;
+      break;
+#endif
 #ifdef ARCH_v850
     case bfd_arch_v850:
       disassemble = print_insn_v850;
--- /dev/null
+++ b/opcodes/ubicom32-asm.c
@@ -0,0 +1,1937 @@
+/* Assembler interface for targets using CGEN. -*- C -*-
+   CGEN: Cpu tools GENerator
+
+   THIS FILE IS MACHINE GENERATED WITH CGEN.
+   - the resultant file is machine generated, cgen-asm.in isn't
+
+   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2005, 2007
+   Free Software Foundation, Inc.
+
+   This file is part of libopcodes.
+
+   This library is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 3, or (at your option)
+   any later version.
+
+   It is distributed in the hope that it will be useful, but WITHOUT
+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
+   License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program; if not, write to the Free Software Foundation, Inc.,
+   51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.  */
+
+
+/* ??? Eventually more and more of this stuff can go to cpu-independent files.
+   Keep that in mind.  */
+
+#include "sysdep.h"
+#include <stdio.h>
+#include "ansidecl.h"
+#include "bfd.h"
+#include "symcat.h"
+#include "ubicom32-desc.h"
+#include "ubicom32-opc.h"
+#include "opintl.h"
+#include "xregex.h"
+#include "libiberty.h"
+#include "safe-ctype.h"
+
+#undef  min
+#define min(a,b) ((a) < (b) ? (a) : (b))
+#undef  max
+#define max(a,b) ((a) > (b) ? (a) : (b))
+
+static const char * parse_insn_normal
+  (CGEN_CPU_DESC, const CGEN_INSN *, const char **, CGEN_FIELDS *);
+
+/* -- assembler routines inserted here.  */
+
+/* -- asm.c */
+
+/* Directly addressable registers on the UBICOM32.
+ */
+
+#define RW  0  /* read/write */
+#define RO  1  /* read-only  */
+#define WO  2  /* write-only */
+
+struct ubicom32_cgen_data_space_map ubicom32_cgen_data_space_map_mercury[] = {
+	{ 0x0,		"d0", RW, },	/* data registers */
+	/* d1, d2 and d3 are later */
+	{ 0x10,		"d4", RW, },
+	{ 0x14,		"d5", RW, },
+	{ 0x18,		"d6", RW, },
+	{ 0x1c,		"d7", RW, },
+	{ 0x20,		"d8", RW, },
+	{ 0x24,		"d9", RW, },
+	{ 0x28,		"d10", RW, },
+	{ 0x2c,		"d11", RW, },
+	{ 0x30,		"d12", RW, },
+	{ 0x34,		"d13", RW, },
+	{ 0x38,		"d14", RW, },
+	{ 0x3c,		"d15", RW, },
+	{ 0x4,		"d1", RW, },	/* put them here where they work */
+	{ 0x8,		"d2", RW, },
+	{ 0xc,		"d3", RW, },
+	{ A0_ADDRESS,	"a0", RW, },	/* address registers */
+	{ A1_ADDRESS,	"a1", RW, },
+	{ A2_ADDRESS,   "a2", RW, },
+	{ A3_ADDRESS,	"a3", RW, },
+	{ A4_ADDRESS,	"a4", RW, },
+	{ A5_ADDRESS,	"a5", RW, },
+	{ A6_ADDRESS,	"a6", RW, },
+	{ A7_ADDRESS,	"sp", RW, },	/* sp is a7; first so we use it */
+	{ A7_ADDRESS,	"a7", RW, },
+	{ 0xa0,		"mac_hi", RW, },
+	{ 0xa4,		"mac_lo", RW, },
+	{ 0xa8,         "mac_rc16", RW, },
+	{ 0xac,         "source3", RW, },
+	{ 0xac,         "source_3", RW, },
+	{ 0xb0,         "context_cnt", RO,},
+	{ 0xb0,         "inst_cnt", RO,},
+	{ 0xb4,		"csr", RW, },
+	{ 0xb8,         "rosr", RO, },
+	{ 0xbc,		"iread_data", RW, },
+	{ 0xc0,		"int_mask0", RW, },
+	{ 0xc4,		"int_mask1", RW, },
+	/* 0xc8 - 0xcf reserved for future interrupt masks */
+	{ 0xd0,         "pc", RW, },
+	/* 0xd4 - ff reserved */
+	{ 0x100,        "chip_id", RO, },
+	{ 0x104,	"int_stat0", RO, },
+	{ 0x108,	"int_stat1", RO, },
+	/* 0x10c - 0x113 reserved for future interrupt masks */
+	{ 0x114,        "int_set0", WO, },
+	{ 0x118,        "int_set1", WO, },
+        /* 0x11c - 0x123 reserved for future interrupt set */
+	{ 0x124,        "int_clr0", WO, },
+        { 0x128,        "int_clr1", WO, },
+        /* 0x13c - 0x133 reserved for future interrupt clear */
+	{ 0x134,	"global_ctrl", RW, },
+	{ 0x13c,        "mt_active_set", WO, },
+	{ 0x140,        "mt_active_clr", WO, },
+	{ 0x138,        "mt_active", RO, },
+	{ 0x148,        "mt_dbg_active_set", WO, },
+	{ 0x144,        "mt_dbg_active", RO, },
+	{ 0x14C,        "mt_en", RW, },
+	{ 0x150,        "mt_hpri", RW, }, 
+	{ 0x150,        "mt_pri", RW, }, 
+	{ 0x154,        "mt_hrt", RW, },
+	{ 0x154,        "mt_sched", RW, },
+	{ 0x15C,        "mt_break_clr", WO, },
+	{ 0x158,        "mt_break", RO, },
+	{ 0x160,        "mt_single_step", RW, },
+	{ 0x164,        "mt_min_delay_en", RW, },
+	{ 0x164,        "mt_min_del_en", RW, },
+
+	{ 0x16c,        "perr_addr", RO, },
+	{ 0x178,        "dcapt_tnum", RO, },
+	{ 0x174,        "dcapt_pc", RO, },
+	{ 0x170,        "dcapt", RW, },
+	/* 0x17c - 0x1ff reserved */
+	{ 0x17c,        "mt_dbg_active_clr", WO, },
+	{ 0x180,        "scratchpad0", RW, },
+	{ 0x184,        "scratchpad1", RW, },
+	{ 0x188,        "scratchpad2", RW, },
+	{ 0x18c,        "scratchpad3", RW, },
+
+	{ 0x0,		0, RW, },
+};
+
+struct ubicom32_cgen_data_space_map ubicom32_cgen_data_space_map_mars[] = {
+	{ 0x0,		"d0", RW, },	/* data registers */
+	/* d1, d2 and d3 are later */
+	{ 0x10,		"d4", RW, },
+	{ 0x14,		"d5", RW, },
+	{ 0x18,		"d6", RW, },
+	{ 0x1c,		"d7", RW, },
+	{ 0x20,		"d8", RW, },
+	{ 0x24,		"d9", RW, },
+	{ 0x28,		"d10", RW, },
+	{ 0x2c,		"d11", RW, },
+	{ 0x30,		"d12", RW, },
+	{ 0x34,		"d13", RW, },
+	{ 0x38,		"d14", RW, },
+	{ 0x3c,		"d15", RW, },
+	{ 0x4,		"d1", RW, },	/* put them here where they work */
+	{ 0x8,		"d2", RW, },
+	{ 0xc,		"d3", RW, },
+	{ A0_ADDRESS,	"a0", RW, },	/* address registers */
+	{ A1_ADDRESS,	"a1", RW, },
+	{ A2_ADDRESS,   "a2", RW, },
+	{ A3_ADDRESS,	"a3", RW, },
+	{ A4_ADDRESS,	"a4", RW, },
+	{ A5_ADDRESS,	"a5", RW, },
+	{ A6_ADDRESS,	"a6", RW, },
+	{ A7_ADDRESS,	"sp", RW, },	/* sp is a7; first so we use it */
+	{ A7_ADDRESS,	"a7", RW, },
+	{ 0xa0,		"mac_hi", RW, },
+	{ 0xa0,		"acc0_hi", RW, }, /* mac_hi and mac_lo are also known as acc0_hi and acc0_lo */
+	{ 0xa4,		"mac_lo", RW, },
+	{ 0xa4,		"acc0_lo", RW, },
+	{ 0xa8,         "mac_rc16", RW, },
+	{ 0xac,         "source3", RW, },
+	{ 0xac,         "source_3", RW, },
+	{ 0xb0,         "context_cnt", RO,},
+	{ 0xb0,         "inst_cnt", RO,},
+	{ 0xb4,		"csr", RW, },
+	{ 0xb8,         "rosr", RO, },
+	{ 0xbc,		"iread_data", RW, },
+	{ 0xc0,		"int_mask0", RW, },
+	{ 0xc4,		"int_mask1", RW, },
+	/* 0xc8 - 0xcf reserved for future interrupt masks */
+	{ 0xd0,         "pc", RW, },
+	{ 0xd4,         "trap_cause", RW, },
+	{ 0xd8,		"acc1_hi", RW, }, /* Defines for acc1 */
+	{ 0xdc,		"acc1_lo", RW, },
+	{ 0xe0,		"previous_pc", RO, },
+	{ 0xe4,		"ucsr", RW, },
+
+	/* 0xe8 - ff reserved */
+	{ 0x100,        "chip_id", RO, },
+	{ 0x104,	"int_stat0", RO, },
+	{ 0x108,	"int_stat1", RO, },
+	/* 0x10c - 0x113 reserved for future interrupt masks */
+	{ 0x114,        "int_set0", WO, },
+	{ 0x118,        "int_set1", WO, },
+        /* 0x11c - 0x123 reserved for future interrupt set */
+	{ 0x124,        "int_clr0", WO, },
+        { 0x128,        "int_clr1", WO, },
+        /* 0x130 - 0x133 reserved for future interrupt clear */
+	{ 0x134,	"global_ctrl", RW, },
+	{ 0x13c,        "mt_active_set", WO, },
+	{ 0x140,        "mt_active_clr", WO, },
+	{ 0x138,        "mt_active", RO, },
+	{ 0x148,        "mt_dbg_active_set", WO, },
+	{ 0x144,        "mt_dbg_active", RO, },
+	{ 0x14C,        "mt_en", RW, },
+	{ 0x150,        "mt_hpri", RW, }, 
+	{ 0x150,        "mt_pri", RW, }, 
+	{ 0x154,        "mt_hrt", RW, },
+	{ 0x154,        "mt_sched", RW, },
+	{ 0x15C,        "mt_break_clr", WO, },
+	{ 0x158,        "mt_break", RO, },
+	{ 0x160,        "mt_single_step", RW, },
+	{ 0x164,        "mt_min_delay_en", RW, },
+	{ 0x164,        "mt_min_del_en", RW, },
+	{ 0x168,        "mt_break_set", WO, },
+	/* 0x16c - 0x16f reserved */
+	{ 0x170,        "dcapt", RW, },
+	/* 0x174 - 0x17b reserved */
+	{ 0x17c,        "mt_dbg_active_clr", WO, },
+	{ 0x180,        "scratchpad0", RW, },
+	{ 0x184,        "scratchpad1", RW, },
+	{ 0x188,        "scratchpad2", RW, },
+	{ 0x18c,        "scratchpad3", RW, },
+	{ 0x190,        "scratchpad4", RW, },
+	{ 0x194,        "scratchpad5", RW, },
+	{ 0x198,        "scratchpad6", RW, },
+
+	/* 0x19c - 0x19f Reserved */
+	{ 0x1a0,        "chip_cfg", RW, },
+	{ 0x1a4,        "mt_i_blocked", RO, },
+	{ 0x1a8,	"mt_d_blocked", RO, },
+	{ 0x1ac,	"mt_i_blocked_set", WO},
+	{ 0x1b0, 	"mt_d_blocked_set", WO},
+	{ 0x1b4,	"mt_blocked_clr", WO},
+	{ 0x1b8,        "mt_trap_en", RW, },
+	{ 0x1bc,        "mt_trap", RO, },
+	{ 0x1c0,        "mt_trap_set", WO, },
+	{ 0x1c4,        "mt_trap_clr", WO, },
+	{ 0x1c8,        "sep", RW, },
+	/* 0x1cc-0x1FF Reserved */
+ 	{ 0x200,	"i_range0_hi", RW},
+	{ 0x204,	"i_range1_hi", RW},
+	{ 0x208,	"i_range2_hi", RW},
+	{ 0x20c,	"i_range3_hi", RW},
+
+	/* 0x210-0x21f Reserved */
+ 	{ 0x220,	"i_range0_lo", RW},
+	{ 0x224,	"i_range1_lo", RW},
+	{ 0x228,	"i_range2_lo", RW},
+	{ 0x22c,	"i_range3_lo", RW},
+
+	/* 0x230-0x23f Reserved */
+ 	{ 0x240,	"i_range0_en", RW},
+	{ 0x244,	"i_range1_en", RW},
+	{ 0x248,	"i_range2_en", RW},
+	{ 0x24c,	"i_range3_en", RW},
+
+	/* 0x250-0x25f Reserved */
+ 	{ 0x260,	"d_range0_hi", RW},
+	{ 0x264,	"d_range1_hi", RW},
+	{ 0x268,	"d_range2_hi", RW},
+	{ 0x26c,	"d_range3_hi", RW},
+	{ 0x270,	"d_range4_hi", RW},
+
+	/* 0x274-0x27f Reserved */
+ 	{ 0x280,	"d_range0_lo", RW},
+	{ 0x284,	"d_range1_lo", RW},
+	{ 0x288,	"d_range2_lo", RW},
+	{ 0x28c,	"d_range3_lo", RW},
+	{ 0x290,	"d_range4_lo", RW},
+
+	/* 0x294-0x29f Reserved */
+ 	{ 0x2a0,	"d_range0_en", RW},
+	{ 0x2a4,	"d_range1_en", RW},
+	{ 0x2a8,	"d_range2_en", RW},
+	{ 0x2ac,	"d_range3_en", RW},
+	{ 0x2b0,	"d_range4_en", RW},
+
+	/* 0x2b4-0x3ff Reserved */
+
+	{ 0x0,		0, RW, },
+};
+
+/* t_is_set will be 1 if .t is set for the madd.2 and msub.2 instructions */
+static unsigned char t_is_set =0;
+
+static const char *
+parse_t_is_set_for_addsub (
+			   CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,
+			   const char **strp,
+			   CGEN_KEYWORD *keyword_table,
+			   long *valuep)
+{
+  const char *errmsg;
+
+  t_is_set = 0;
+
+  errmsg = cgen_parse_keyword (cd, strp, keyword_table, valuep);
+  if (errmsg)
+    {
+      t_is_set = 0;
+
+      return errmsg;
+    }
+
+  if((int)*valuep)
+     t_is_set = 1;
+
+  return NULL;
+}
+
+char myerrmsg[128];
+
+/* 
+ * If accumulator is selected for madd.2 and msub.2 instructions then
+ * the T bit should not be selected. Flag an assembler error in those
+ * cases.
+ */
+static const char *
+parse_acc_for_addsub (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,
+		      const char **strp,
+		      CGEN_KEYWORD *keyword_table,
+		      long *valuep)
+{
+  const char *errmsg;
+
+  errmsg = cgen_parse_keyword (cd, strp, keyword_table, valuep);
+  if (errmsg)
+    {
+      t_is_set = 0;
+
+      return errmsg;
+    }
+
+  
+  if(t_is_set)
+    {
+      /* This is erroneous. */
+      sprintf(myerrmsg, "Extenstion \".t\" is illegal when using acc%d as Source 2 register.", (int)*valuep);
+      t_is_set=0;
+      return (myerrmsg);
+    }
+
+  t_is_set=0;
+  return NULL;
+}
+
+/*
+ * For dsp madd/msub cases if S2 is a data register then t_is_set flag should be set to zero.
+ */
+static const char *
+parse_dr_for_addsub (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,
+		     const char **strp,
+		     CGEN_KEYWORD *keyword_table,
+		     long *valuep)
+{
+  const char *errmsg;
+
+  errmsg = cgen_parse_keyword (cd, strp, keyword_table, valuep);
+  if (errmsg)
+    {
+      t_is_set = 0;
+
+      return errmsg;
+    }
+  t_is_set=0;
+  return NULL;
+}
+
+static const char *
+parse_bit5 (CGEN_CPU_DESC cd,
+	    const char **strp,
+	    int opindex,
+	    long *valuep)
+{
+  const char *errmsg;
+  char mode = 0;
+  long count = 0;
+  unsigned long value;
+
+  if (strncmp (*strp, "%bit", 4) == 0)
+    {
+      *strp += 4;
+      mode = 1;
+    }
+  else if (strncmp (*strp, "%msbbit", 7) == 0)
+    {
+      *strp += 7;
+      mode = 2;
+    }
+  else if (strncmp (*strp, "%lsbbit", 7) == 0)
+    {
+      *strp += 7;
+      mode = 3;
+    }
+
+  errmsg = cgen_parse_unsigned_integer (cd, strp, opindex, valuep);
+  if (errmsg) {
+    return errmsg;
+  }
+
+  if (mode) {
+    value = (unsigned long) *valuep;
+    if (value == 0) {
+      errmsg = _("Attempt to find bit index of 0");
+      return errmsg;
+    }
+    
+    if (mode == 1) {
+      count = 31;
+      while ((value & 0x80000000) == 0) {
+        count--;
+        value <<= 1;
+      }
+      if ((value & 0x7FFFFFFF) != 0) {
+        errmsg = _("More than one bit set in bitmask");
+        return errmsg;
+      }
+    } else if (mode == 2) {
+      count = 31;
+      while ((value & 0x80000000) == 0) {
+        count--;
+        value <<= 1;
+      }
+    } else if (mode == 3) {
+      count = 0;
+      while ((value & 0x00000001) == 0) {
+        count++;
+        value >>= 1;
+      }
+    }
+    
+    *valuep = count;
+  }
+
+  return errmsg;
+}
+
+/*
+ * For dsp madd/msub cases if S2 is a #bit5 then t_is_set flag should be set to zero.
+ */
+static const char *
+parse_bit5_for_addsub (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,
+		       const char **strp,
+		       int opindex,
+		       long *valuep)
+{
+  const char *errmsg;
+
+  errmsg = parse_bit5(cd, strp, opindex, valuep);
+  if (errmsg)
+    {
+      t_is_set = 0;
+
+      return errmsg;
+    }
+  t_is_set=0;
+  return NULL;
+}
+
+/* Parse signed 4 bit immediate value, being careful (hacky) to avoid
+   eating a `++' that might be present */
+static const char *
+parse_imm4 (CGEN_CPU_DESC cd,
+	    const char **strp,
+	    int opindex,
+	    long *valuep,
+	    int size)
+{
+  const char *errmsg;
+  char *plusplus;
+  long value;
+
+  plusplus = strstr(*strp, "++");
+  if (plusplus)
+    *plusplus = 0;
+  errmsg = cgen_parse_signed_integer (cd, strp, opindex, &value);
+  if (plusplus)
+    *plusplus = '+';
+
+  if (errmsg == NULL)
+    {
+      if ((size == 2 && (value % 2)) ||
+          (size == 4 && (value % 4)))
+	errmsg = _("unaligned increment");
+      else if ((size == 1 && (value < -8 || value > 7)) ||
+          (size == 2 && (value < -16 || value > 15)) ||
+          (size == 4 && (value < -32 || value > 31)))
+	errmsg = _("out of bounds increment");
+      else
+        *valuep = value;
+    }
+  return errmsg;
+}
+
+/* as above, for single byte addresses */
+static const char *
+parse_imm4_1 (CGEN_CPU_DESC cd,
+	      const char **strp,
+	      int opindex,
+	      long *valuep)
+{
+  return parse_imm4 (cd, strp, opindex, valuep, 1);
+}
+
+/* as above, for half-word addresses */
+static const char *
+parse_imm4_2 (CGEN_CPU_DESC cd,
+	      const char **strp,
+	      int opindex,
+	      long *valuep)
+{
+  return parse_imm4 (cd, strp, opindex, valuep, 2);
+}
+
+/* as above, for word addresses */
+static const char *
+parse_imm4_4 (CGEN_CPU_DESC cd,
+	      const char **strp,
+	      int opindex,
+	      long *valuep)
+{
+  return parse_imm4 (cd, strp, opindex, valuep, 4);
+}
+
+/* Parse a direct address.  This can be either `$xx' or a Register
+   Mnemonic.
+ */
+static const char *
+parse_direct_addr (CGEN_CPU_DESC cd,
+		   const char **strp,
+		   int opindex,
+		   long *valuep,
+		   int isdest)
+{
+  const char *errmsg = NULL;
+  bfd_vma value;
+  struct ubicom32_cgen_data_space_map *cur;
+  size_t len;
+
+  if(cd->machs & (1<<MACH_IP3035))
+    {
+      /* cpu is mercury */
+      cur = ubicom32_cgen_data_space_map_mercury;
+    }
+  else
+    {
+      /* cpu is mars */
+      cur = ubicom32_cgen_data_space_map_mars;
+    }
+
+  /* First, try to look for the literal register name. */
+  for (; cur->name; cur++)
+    if (strncasecmp(cur->name, *strp, (len = strlen(cur->name))) == 0 &&
+        !ISALNUM((*strp)[len]) && (*strp)[len] != '_' )
+      {
+	*strp += len;
+        /* fail if specifying a read-only register as a destination */
+	if (isdest && cur->type == RO)
+	  return _("attempt to write to read-only register");
+	
+	/* fail if specifying a write-only register as a source */
+	if ((isdest==0) && cur->type == WO)
+	  return _("attempt to read a write-only register");
+	value = cur->address;
+	errmsg = NULL;
+	break;
+      }
+  
+  /* Not found: try parsing it as a literal */
+  if (cur->name == NULL)
+    {
+      char *plusplus;
+      if (**strp == '(')
+	{
+	  return _("parentheses are reserved for indirect addressing");
+	}
+
+      if (strncasecmp(*strp, "%f", 2) == 0)
+	{
+	  *valuep = 0;
+	  return NULL;
+	}
+
+      /* we want to avoid parsing a negative post-increment expression as a numeric
+	 expression because the parser assumes zeroes exist between the pluses and
+	 issues an extraneous warning message. */
+      plusplus = strstr(*strp, "++");
+      if (plusplus)
+	*plusplus = 0;
+      errmsg = cgen_parse_signed_integer (cd, strp, opindex, &value);
+      if (plusplus)
+	*plusplus = '+';
+
+      if (errmsg)
+	return errmsg;
+    }
+
+  value &= 0x3ff;
+  *valuep = value;
+  return errmsg;
+}
+
+static const char *
+parse_d_direct_addr (CGEN_CPU_DESC cd,
+		     const char **strp,
+		     int opindex,
+		     long *valuep)
+{
+  return parse_direct_addr (cd, strp, opindex, valuep, 1);
+}
+
+static const char *
+parse_s1_direct_addr (CGEN_CPU_DESC cd,
+		      const char **strp,
+		      int opindex,
+		      long *valuep)
+{
+  return parse_direct_addr (cd, strp, opindex, valuep, 0);
+}
+
+/* support for source-1 and destination operand 7-bit immediates for indirect addressing */
+static const char *imm7_1_rangemsg = "7-bit byte immediate value out of range";
+static const char *imm7_2_rangemsg = "7-bit halfword immediate value out of range";
+static const char *imm7_4_rangemsg = "7-bit word immediate value out of range";
+static const char *imm7_pdec_rangemsg = "Pdec offset out of range. Allowed range is >=4 and <=512.";
+static const char *imm7_2_maskmsg = "7-bit halfword immediate not a multiple of 2";
+static const char *imm7_4_maskmsg = "7-bit word immediate not a multiple of 4";
+
+/* Parse 7-bit immediates, allow %lo() operator */
+static const char *
+parse_imm7_basic (CGEN_CPU_DESC cd,
+		  const char **strp,
+		  int opindex,
+		  unsigned long *valuep,
+		  const char *rangemsg,
+		  const char *maskmsg,
+		  bfd_vma max,
+		  int mask,
+		  int reloc)
+{
+  const char *errmsg;
+  enum cgen_parse_operand_result result_type = CGEN_PARSE_OPERAND_RESULT_NUMBER;
+  bfd_vma value;
+  int newreloc;
+
+  /* in this case we want low 7-bits to accompany the 24-bit immediate of a moveai instruction */
+  if (strncasecmp (*strp, "%lo(", 4) == 0)
+    {
+      *strp += 4;
+      errmsg = cgen_parse_address (cd, strp, opindex, reloc,
+				   &result_type, &value);
+      if (**strp != ')')
+	return _("missing `)'");
+      ++*strp;
+      if (errmsg == NULL
+  	  && result_type == CGEN_PARSE_OPERAND_RESULT_NUMBER)
+	value &= 0x7f;  /* always want 7 bits, regardless of imm7 type */
+      *valuep = value;
+      return errmsg;
+    }
+  else if (strncasecmp (*strp, "%got_lo(", strlen("%got_lo(")) == 0)
+    {
+      *strp += strlen("%got_lo(");
+
+      /* Switch the relocation to the GOT relocation. */
+      switch(reloc)
+	{
+	case BFD_RELOC_UBICOM32_LO7_S:
+	  reloc = BFD_RELOC_UBICOM32_GOT_LO7_S;
+	  break;
+	case BFD_RELOC_UBICOM32_LO7_2_S:
+	  reloc = BFD_RELOC_UBICOM32_GOT_LO7_2_S;
+	  break;
+	case BFD_RELOC_UBICOM32_LO7_4_S:
+	  reloc = BFD_RELOC_UBICOM32_GOT_LO7_4_S;
+	  break;
+	case BFD_RELOC_UBICOM32_LO7_D:
+	  reloc = BFD_RELOC_UBICOM32_GOT_LO7_D;
+	  break;
+	case BFD_RELOC_UBICOM32_LO7_2_D:
+	  reloc = BFD_RELOC_UBICOM32_GOT_LO7_2_D;
+	  break;
+	case BFD_RELOC_UBICOM32_LO7_4_D:
+	  reloc = BFD_RELOC_UBICOM32_GOT_LO7_4_D;
+	  break;
+	}
+      errmsg = cgen_parse_address (cd, strp, opindex, reloc,
+				   &result_type, &value);
+      if (**strp != ')')
+	return _("missing `)'");
+      ++*strp;
+      if (errmsg == NULL
+  	  && result_type == CGEN_PARSE_OPERAND_RESULT_NUMBER)
+	value &= 0x7f;  /* always want 7 bits, regardless of imm7 type */
+      *valuep = value;
+      return errmsg;
+    }
+  else if (strncasecmp (*strp, "%funcdesc_got_lo(", strlen("%funcdesc_got_lo(")) == 0)
+    {
+      *strp += strlen("%funcdesc_got_lo(");
+
+      /* Switch the relocation to the GOT relocation. */
+      switch(reloc)
+	{
+	case BFD_RELOC_UBICOM32_LO7_S:
+	  reloc = BFD_RELOC_UBICOM32_FUNCDESC_GOT_LO7_S;
+	  break;
+	case BFD_RELOC_UBICOM32_LO7_2_S:
+	  reloc = BFD_RELOC_UBICOM32_FUNCDESC_GOT_LO7_2_S;
+	  break;
+	case BFD_RELOC_UBICOM32_LO7_4_S:
+	  reloc = BFD_RELOC_UBICOM32_FUNCDESC_GOT_LO7_4_S;
+	  break;
+	case BFD_RELOC_UBICOM32_LO7_D:
+	  reloc = BFD_RELOC_UBICOM32_FUNCDESC_GOT_LO7_D;
+	  break;
+	case BFD_RELOC_UBICOM32_LO7_2_D:
+	  reloc = BFD_RELOC_UBICOM32_FUNCDESC_GOT_LO7_2_D;
+	  break;
+	case BFD_RELOC_UBICOM32_LO7_4_D:
+	  reloc = BFD_RELOC_UBICOM32_FUNCDESC_GOT_LO7_4_D;
+	  break;
+	}
+      errmsg = cgen_parse_address (cd, strp, opindex, reloc,
+				   &result_type, &value);
+      if (**strp != ')')
+	return _("missing `)'");
+      ++*strp;
+      if (errmsg == NULL
+  	  && result_type == CGEN_PARSE_OPERAND_RESULT_NUMBER)
+	value &= 0x7f;  /* always want 7 bits, regardless of imm7 type */
+      *valuep = value;
+      return errmsg;
+    }
+  else
+    {
+      if (**strp == '(')
+	{
+	  return _("parentheses are reserved for indirect addressing");
+	}
+
+      errmsg = cgen_parse_unsigned_integer (cd, strp, opindex, &value);
+    }
+
+  if (errmsg == NULL)
+    {
+      if (value > max)
+	return rangemsg;
+      if (value & mask)
+	return maskmsg;
+    }
+
+  *valuep = value & max;
+  return errmsg;
+}
+
+/* Parse 7-bit immediates, allow %lo() operator */
+static const char *
+parse_imm7_pdec (CGEN_CPU_DESC cd,
+		 const char **strp,
+		 int opindex,
+		 unsigned long *valuep,
+		 const char *rangemsg,
+		 const char *maskmsg,
+		 int reloc)
+{
+  const char *errmsg;
+  enum cgen_parse_operand_result result_type = CGEN_PARSE_OPERAND_RESULT_NUMBER;
+  bfd_vma value;
+
+  /* in this case we want low 7-bits to accompany the 24-bit immediate of a moveai instruction */
+  if (strncasecmp (*strp, "%lo(", 4) == 0)
+    {
+      *strp += 4;
+      errmsg = cgen_parse_address (cd, strp, opindex, reloc,
+				   &result_type, &value);
+      if (**strp != ')')
+	return _("missing `)'");
+      ++*strp;
+      if (errmsg == NULL
+  	  && result_type == CGEN_PARSE_OPERAND_RESULT_NUMBER)
+	value &= 0x7f;  /* always want 7 bits, regardless of imm7 type */
+      *valuep = value;
+      return errmsg;
+    }
+  else
+    {
+      if (**strp == '(')
+	{
+	  return _("parentheses are reserved for indirect addressing");
+	}
+
+      errmsg = cgen_parse_unsigned_integer (cd, strp, opindex, &value);
+    }
+
+  if (errmsg == NULL)
+    {
+      if (((long)value > 512) || ((long)value < 4))
+	return rangemsg;
+      if (value & 0x3)
+	return maskmsg;
+    }
+
+  *valuep = value;
+  return errmsg;
+}
+
+/* single byte imm7 */
+static const char *
+parse_imm7_1_s (CGEN_CPU_DESC cd,
+		const char **strp,
+		int opindex,
+		unsigned long *valuep)
+{
+  return parse_imm7_basic (cd, strp, opindex, valuep, _(imm7_1_rangemsg),
+			   NULL, 0x7f, 0, BFD_RELOC_UBICOM32_LO7_S);
+}
+
+/* halfword imm7 */
+static const char *
+parse_imm7_2_s (CGEN_CPU_DESC cd,
+		const char **strp,
+		int opindex,
+		unsigned long *valuep)
+{
+  return parse_imm7_basic (cd, strp, opindex, valuep, 
+			   _(imm7_2_rangemsg),
+			   _(imm7_2_maskmsg),
+			   0xfe, 0x1, BFD_RELOC_UBICOM32_LO7_2_S);
+}
+
+/* word imm7 */
+static const char *
+parse_imm7_4_s (CGEN_CPU_DESC cd,
+		const char **strp,
+		int opindex,
+		unsigned long *valuep)
+{
+  return parse_imm7_basic (cd, strp, opindex, valuep, 
+			   _(imm7_4_rangemsg),
+			   _(imm7_4_maskmsg),
+			   0x1fc, 0x3, BFD_RELOC_UBICOM32_LO7_4_S);
+}
+
+/* word imm7 */
+static const char *
+parse_pdec_imm7_4_s (CGEN_CPU_DESC cd,
+		     const char **strp,
+		     int opindex,
+		     unsigned long *valuep)
+{
+  unsigned long value;
+  const char *errmsg = parse_imm7_pdec (cd, strp, opindex, &value, 
+					_(imm7_pdec_rangemsg),
+					_(imm7_4_maskmsg),
+					BFD_RELOC_UBICOM32_LO7_4_S);
+
+  if(errmsg == NULL)
+    {
+      /* at this point we have a valid value. Take the 2's comp and truncate to 7 bits */
+      if(value == 0)
+	return _("Offset for PDEC source cannot be 0");
+
+      value = ~value;
+      value ++;
+      value &= 0x1fc;
+      *valuep = value;
+    }
+
+  return errmsg;
+}
+
+/* single byte dest imm7 */
+static const char *
+parse_imm7_1_d (CGEN_CPU_DESC cd,
+		const char **strp,
+		int opindex,
+		unsigned long *valuep)
+{
+  return parse_imm7_basic (cd, strp, opindex, valuep, _(imm7_1_rangemsg),
+			   NULL, 0x7f, 0, BFD_RELOC_UBICOM32_LO7_D);
+}
+
+/* halfword dest imm7 */
+static const char *
+parse_imm7_2_d (CGEN_CPU_DESC cd,
+		const char **strp,
+		int opindex,
+		unsigned long *valuep)
+{
+  return parse_imm7_basic (cd, strp, opindex, valuep, 
+			   _(imm7_2_rangemsg),
+			   _(imm7_2_maskmsg),
+			   0xfe, 0x1, BFD_RELOC_UBICOM32_LO7_2_D);
+}
+
+/* word dest imm7 */
+static const char *
+parse_imm7_4_d (CGEN_CPU_DESC cd,
+		const char **strp,
+		int opindex,
+		unsigned long *valuep)
+{
+  return parse_imm7_basic (cd, strp, opindex, valuep, 
+			   _(imm7_4_rangemsg),
+			   _(imm7_4_maskmsg),
+			   0x1fc, 0x3, BFD_RELOC_UBICOM32_LO7_4_D);
+}
+
+/* Parse 16-bit immediate, allow %hi() or %lo() operators */
+static const char *
+parse_imm16 (CGEN_CPU_DESC cd,
+	     const char **strp,
+	     int opindex,
+	     unsigned long *valuep)
+{
+  const char *errmsg;
+  enum cgen_parse_operand_result result_type = CGEN_PARSE_OPERAND_RESULT_NUMBER;
+  bfd_vma value;
+
+  if (strncasecmp (*strp, "%hi(", 4) == 0)
+    {
+      *strp += 4;
+      errmsg = cgen_parse_address (cd, strp, opindex, BFD_RELOC_HI16,
+				   &result_type, &value);
+      if (**strp != ')')
+	return _("missing `)'");
+      ++*strp;
+      if (errmsg == NULL
+  	  && result_type == CGEN_PARSE_OPERAND_RESULT_NUMBER)
+	value >>= 16;
+      *valuep = value;
+      return errmsg;
+    }
+  else if (strncasecmp (*strp, "%got_hi(", strlen("%got_hi(")) == 0)
+    {
+      *strp += strlen("%got_hi(");
+      errmsg = cgen_parse_address (cd, strp, opindex, BFD_RELOC_UBICOM32_GOTOFFSET_HI,
+				   &result_type, &value);
+      if (**strp != ')')
+	return _("missing `)'");
+      ++*strp;
+      if (errmsg == NULL
+  	  && result_type == CGEN_PARSE_OPERAND_RESULT_NUMBER)
+	value >>= 16;
+      *valuep = value;
+      return errmsg;
+    }
+  else if (strncasecmp (*strp, "%got_funcdesc_hi(", strlen("%got_funcdesc_hi(")) == 0)
+    {
+      *strp += strlen("%got_funcdesc_hi(");
+      errmsg = cgen_parse_address (cd, strp, opindex, BFD_RELOC_UBICOM32_FUNCDESC_GOTOFFSET_HI,
+				   &result_type, &value);
+      if (**strp != ')')
+	return _("missing `)'");
+      ++*strp;
+      if (errmsg == NULL
+  	  && result_type == CGEN_PARSE_OPERAND_RESULT_NUMBER)
+	value >>= 16;
+      *valuep = value;
+      return errmsg;
+    }
+  else if (strncasecmp (*strp, "%lo(", 4) == 0)
+    {
+      *strp += 4;
+      errmsg = cgen_parse_address (cd, strp, opindex, BFD_RELOC_LO16,
+				   &result_type, &value);
+      if (**strp != ')')
+	return _("missing `)'");
+      ++*strp;
+      if (errmsg == NULL
+  	  && result_type == CGEN_PARSE_OPERAND_RESULT_NUMBER)
+	value &= 0xffff;
+      *valuep = value;
+      return errmsg;
+    }
+  else if (strncasecmp (*strp, "%got_lo(", strlen("%got_lo(")) == 0)
+    {
+      *strp += strlen("%got_lo(");
+      errmsg = cgen_parse_address (cd, strp, opindex, BFD_RELOC_UBICOM32_GOTOFFSET_LO,
+				   &result_type, &value);
+      if (**strp != ')')
+	return _("missing `)'");
+      ++*strp;
+      if (errmsg == NULL
+  	  && result_type == CGEN_PARSE_OPERAND_RESULT_NUMBER)
+	value &= 0xffff;
+      *valuep = value;
+      return errmsg;
+    }
+  else if (strncasecmp (*strp, "%got_funcdesc_lo(", strlen("%got_funcdesc_lo(")) == 0)
+    {
+      *strp += strlen("%got_funcdesc_lo(");
+      errmsg = cgen_parse_address (cd, strp, opindex, BFD_RELOC_UBICOM32_FUNCDESC_GOTOFFSET_LO,
+				   &result_type, &value);
+      if (**strp != ')')
+	return _("missing `)'");
+      ++*strp;
+      if (errmsg == NULL
+  	  && result_type == CGEN_PARSE_OPERAND_RESULT_NUMBER)
+	value &= 0xffff;
+      *valuep = value;
+      return errmsg;
+    }
+  else
+    {
+      errmsg = cgen_parse_unsigned_integer (cd, strp, opindex, &value);
+    }
+
+  if (errmsg == NULL
+      && ((long)value > 65535 || (long)value < -32768))
+    return _("16-bit immediate value out of range");
+
+  *valuep = value & 0xffff;
+  return errmsg;
+}
+
+/* Parse 24-bit immediate for moveai instruction and allow %hi() operator */
+static const char *
+parse_imm24 (CGEN_CPU_DESC cd,
+	     const char **strp,
+	     int opindex,
+	     unsigned long *valuep)
+{
+  const char *errmsg;
+  enum cgen_parse_operand_result result_type = CGEN_PARSE_OPERAND_RESULT_NUMBER;
+  bfd_vma value;
+
+  if (strncasecmp (*strp, "%hi(", 4) == 0)
+    {
+      *strp += 4;
+      errmsg = cgen_parse_address (cd, strp, opindex, BFD_RELOC_UBICOM32_HI24,
+				   &result_type, &value);
+      if (**strp != ')')
+	return _("missing `)'");
+      ++*strp;
+      if (errmsg == NULL
+  	  && result_type == CGEN_PARSE_OPERAND_RESULT_NUMBER)
+	value >>= 7;
+      *valuep = value;
+      return errmsg;
+    }
+  else if (strncasecmp (*strp, "%got_hi(", strlen("%got_hi(")) == 0)
+    {
+      *strp += strlen("%got_hi(");
+      errmsg = cgen_parse_address (cd, strp, opindex, BFD_RELOC_UBICOM32_GOT_HI24,
+				   &result_type, &value);
+      if (**strp != ')')
+	return _("missing `)'");
+      ++*strp;
+      if (errmsg == NULL
+  	  && result_type == CGEN_PARSE_OPERAND_RESULT_NUMBER)
+	value >>= 7;
+      *valuep = value;
+      return errmsg;
+    }
+  else if (strncasecmp (*strp, "%funcdesc_got_hi(", strlen("%funcdesc_got_hi(")) == 0)
+    {
+      *strp += strlen("%funcdesc_got_hi(");
+      errmsg = cgen_parse_address (cd, strp, opindex, BFD_RELOC_UBICOM32_FUNCDESC_GOT_HI24,
+				   &result_type, &value);
+      if (**strp != ')')
+	return _("missing `)'");
+      ++*strp;
+      if (errmsg == NULL
+  	  && result_type == CGEN_PARSE_OPERAND_RESULT_NUMBER)
+	value >>= 7;
+      *valuep = value;
+      return errmsg;
+    }
+  else
+    {
+      errmsg = cgen_parse_unsigned_integer (cd, strp, opindex, &value);
+    }
+
+  if (errmsg == NULL
+      && ((long)value > 16777215 || (long)value < 0))
+    return _("24-bit immediate value out of range");
+
+  *valuep = value;
+  return errmsg;
+}
+
+/* Parse 24-bit immediate for moveai instruction and allow %hi() operator */
+static const char *
+parse_imm25 (CGEN_CPU_DESC cd,
+	     const char **strp,
+	     int opindex,
+	     unsigned long *valuep)
+{
+  const char *errmsg;
+  enum cgen_parse_operand_result result_type = CGEN_PARSE_OPERAND_RESULT_NUMBER;
+  bfd_vma value;
+
+  if (strncasecmp (*strp, "%hi(", 4) == 0)
+    {
+      *strp += 4;
+      errmsg = cgen_parse_address (cd, strp, opindex, BFD_RELOC_UBICOM32_HI24,
+				   &result_type, &value);
+      if (**strp != ')')
+	return _("missing `)'");
+      ++*strp;
+      if (errmsg == NULL
+  	  && result_type == CGEN_PARSE_OPERAND_RESULT_NUMBER)
+	value >>= 7;
+      *valuep = value;
+      return errmsg;
+    }
+  else if (strncasecmp (*strp, "%got_hi(", strlen("%got_hi(")) == 0)
+    {
+      *strp += strlen("%got_hi(");
+      errmsg = cgen_parse_address (cd, strp, opindex, BFD_RELOC_UBICOM32_GOT_HI24,
+				   &result_type, &value);
+      if (**strp != ')')
+	return _("missing `)'");
+      ++*strp;
+      if (errmsg == NULL
+  	  && result_type == CGEN_PARSE_OPERAND_RESULT_NUMBER)
+	value >>= 7;
+      *valuep = value;
+      return errmsg;
+    }
+  else if (strncasecmp (*strp, "%funcdesc_got_hi(", strlen("%funcdesc_got_hi(")) == 0)
+    {
+      *strp += strlen("%funcdesc_got_hi(");
+      errmsg = cgen_parse_address (cd, strp, opindex, BFD_RELOC_UBICOM32_FUNCDESC_GOT_HI24,
+				   &result_type, &value);
+      if (**strp != ')')
+	return _("missing `)'");
+      ++*strp;
+      if (errmsg == NULL
+  	  && result_type == CGEN_PARSE_OPERAND_RESULT_NUMBER)
+	value >>= 7;
+      *valuep = value;
+      return errmsg;
+    }
+  else
+    {
+      errmsg = cgen_parse_unsigned_integer (cd, strp, opindex, &value);
+    }
+
+  if (errmsg == NULL
+      && ((long)value > 33554431 || (long)value < 0))
+    return _("24-bit immediate value out of range");
+
+  *valuep = value;
+  return errmsg;
+}
+
+static const char *
+parse_offset21 (CGEN_CPU_DESC cd,
+		const char **strp,
+		int opindex,
+		int reloc ATTRIBUTE_UNUSED,
+		enum cgen_parse_operand_result *type_addr ATTRIBUTE_UNUSED, 
+		unsigned long *valuep)
+{
+  const char *errmsg;
+  enum cgen_parse_operand_result result_type = CGEN_PARSE_OPERAND_RESULT_NUMBER;
+  bfd_vma value;
+
+  if (**strp == '#')
+    {
+      ++*strp;
+      errmsg = cgen_parse_unsigned_integer (cd, strp, opindex, &value);
+    }
+  else
+    errmsg = cgen_parse_address (cd, strp, opindex, BFD_RELOC_UBICOM32_21_PCREL,
+			       &result_type, &value);
+
+  if (errmsg == NULL && result_type == CGEN_PARSE_OPERAND_RESULT_NUMBER)
+    {
+      /* we treat jmp #constant as being jump to pc + constant * 4 */
+      if ((long)value > 1048575 || (long)value < -1048576)
+        return _("21-bit relative offset out of range");
+    }
+
+  *valuep = value & 0x7fffff; /* address is actually 23 bits before shift */
+  return errmsg;
+}
+
+static const char *
+parse_offset16 (CGEN_CPU_DESC cd,
+		const char **strp,
+		int opindex,
+		unsigned long *valuep)
+{
+  const char *errmsg;
+  enum cgen_parse_operand_result result_type = CGEN_PARSE_OPERAND_RESULT_NUMBER;
+  bfd_vma value;
+
+  /* in this case we want low 7-bits to accompany the 24-bit immediate of a moveai instruction */
+  if (strncasecmp (*strp, "%lo(", 4) == 0)
+    {
+      *strp += 4;
+      errmsg = cgen_parse_address (cd, strp, opindex, BFD_RELOC_UBICOM32_LO7_CALLI,
+				   &result_type, &value);
+      if (errmsg != NULL)
+        return errmsg;
+
+      if (**strp != ')')
+	return _("missing `)'");
+      ++*strp;
+
+      if (result_type == CGEN_PARSE_OPERAND_RESULT_NUMBER)
+        *valuep = value & 0x7c;
+
+      return NULL;
+    }
+
+  if (strncasecmp (*strp, "%got_lo(", strlen("%got_lo(")) == 0)
+    {
+      *strp += strlen("%got_lo(");
+      errmsg = cgen_parse_address (cd, strp, opindex, BFD_RELOC_UBICOM32_GOT_LO7_CALLI,
+				   &result_type, &value);
+      if (errmsg != NULL)
+        return errmsg;
+
+      if (**strp != ')')
+	return _("missing `)'");
+      ++*strp;
+
+      if (result_type == CGEN_PARSE_OPERAND_RESULT_NUMBER)
+        *valuep = value & 0x7c;
+
+      return NULL;
+    }
+
+  if (strncasecmp (*strp, "%funcdesc_got_lo(", strlen("%funcdesc_got_lo(")) == 0)
+    {
+      *strp += strlen("%funcdesc_got_lo(");
+      errmsg = cgen_parse_address (cd, strp, opindex, BFD_RELOC_UBICOM32_FUNCDESC_GOT_LO7_CALLI,
+				   &result_type, &value);
+      if (errmsg != NULL)
+        return errmsg;
+
+      if (**strp != ')')
+	return _("missing `)'");
+      ++*strp;
+
+      if (result_type == CGEN_PARSE_OPERAND_RESULT_NUMBER)
+        *valuep = value & 0x7c;
+
+      return NULL;
+    }
+
+  if (strncasecmp (*strp, "%lo18(", 6) == 0)
+    {
+      *strp += 6;
+      errmsg = cgen_parse_address (cd, strp, opindex, BFD_RELOC_UBICOM32_LO16_CALLI,
+				   &result_type, &value);
+      if (errmsg != NULL)
+        return errmsg;
+
+      if (**strp != ')')
+	return _("missing `)'");
+      ++*strp;
+
+      if (result_type == CGEN_PARSE_OPERAND_RESULT_NUMBER)
+        *valuep = value & 0x0003fffc;
+
+      return NULL;
+    }
+
+  errmsg = cgen_parse_signed_integer (cd, strp, opindex, &value);
+  if (errmsg != NULL)
+    return errmsg;
+
+  /* ensure calli constant within limits and is multiple of 4 */
+  if (value & 0x3)
+    return _("calli offset must be multiple of 4");
+
+  if ((long)value > 131071 || (long)value < -131072)
+    return _("16-bit calli offset out of range");
+
+  *valuep = value & 0x0003fffc; /* address is actually 18 bits before shift */
+  return NULL;
+}
+
+static const char *
+parse_imm8 (CGEN_CPU_DESC cd,
+	    const char **strp,
+	    int opindex,
+	    unsigned long *valuep)
+{
+  const char *errmsg;
+  bfd_vma value;
+  int no_sign = 0;
+
+  if (**strp == '0' && TOUPPER(*(*strp+1)) == 'X')
+    no_sign = 1;
+
+  errmsg = cgen_parse_signed_integer (cd, strp, opindex, &value);
+
+  if (errmsg == NULL)
+    {
+      if ((no_sign && ((long)value > 255)) || 
+	  (!no_sign && (((long)value > 127) || ((long)value < -128))))
+        return _("8-bit immediate value out of range");
+    }
+
+  *valuep = value & 0xff;
+  return errmsg;
+}
+
+/* -- dis.c */
+
+const char * ubicom32_cgen_parse_operand
+  (CGEN_CPU_DESC, int, const char **, CGEN_FIELDS *);
+
+/* Main entry point for operand parsing.
+
+   This function is basically just a big switch statement.  Earlier versions
+   used tables to look up the function to use, but
+   - if the table contains both assembler and disassembler functions then
+     the disassembler contains much of the assembler and vice-versa,
+   - there's a lot of inlining possibilities as things grow,
+   - using a switch statement avoids the function call overhead.
+
+   This function could be moved into `parse_insn_normal', but keeping it
+   separate makes clear the interface between `parse_insn_normal' and each of
+   the handlers.  */
+
+const char *
+ubicom32_cgen_parse_operand (CGEN_CPU_DESC cd,
+			   int opindex,
+			   const char ** strp,
+			   CGEN_FIELDS * fields)
+{
+  const char * errmsg = NULL;
+  /* Used by scalar operands that still need to be parsed.  */
+  long junk ATTRIBUTE_UNUSED;
+
+  switch (opindex)
+    {
+    case UBICOM32_OPERAND_AM :
+      errmsg = cgen_parse_keyword (cd, strp, & ubicom32_cgen_opval_addr_names, & fields->f_Am);
+      break;
+    case UBICOM32_OPERAND_AN :
+      errmsg = cgen_parse_keyword (cd, strp, & ubicom32_cgen_opval_addr_names, & fields->f_An);
+      break;
+    case UBICOM32_OPERAND_C :
+      errmsg = cgen_parse_keyword (cd, strp, & ubicom32_cgen_opval_h_C, & fields->f_C);
+      break;
+    case UBICOM32_OPERAND_DN :
+      errmsg = cgen_parse_keyword (cd, strp, & ubicom32_cgen_opval_data_names, & fields->f_Dn);
+      break;
+    case UBICOM32_OPERAND_P :
+      errmsg = cgen_parse_keyword (cd, strp, & ubicom32_cgen_opval_h_P, & fields->f_P);
+      break;
+    case UBICOM32_OPERAND_ACC1HI :
+      errmsg = cgen_parse_unsigned_integer (cd, strp, UBICOM32_OPERAND_ACC1HI, (unsigned long *) (& junk));
+      break;
+    case UBICOM32_OPERAND_ACC1LO :
+      errmsg = cgen_parse_unsigned_integer (cd, strp, UBICOM32_OPERAND_ACC1LO, (unsigned long *) (& junk));
+      break;
+    case UBICOM32_OPERAND_BIT5 :
+      errmsg = parse_bit5 (cd, strp, UBICOM32_OPERAND_BIT5, (unsigned long *) (& fields->f_bit5));
+      break;
+    case UBICOM32_OPERAND_BIT5_ADDSUB :
+      errmsg = parse_bit5_for_addsub (cd, strp, UBICOM32_OPERAND_BIT5_ADDSUB, (unsigned long *) (& fields->f_bit5));
+      break;
+    case UBICOM32_OPERAND_CC :
+      errmsg = cgen_parse_keyword (cd, strp, & ubicom32_cgen_opval_h_cc, & fields->f_cond);
+      break;
+    case UBICOM32_OPERAND_D_AN :
+      errmsg = cgen_parse_keyword (cd, strp, & ubicom32_cgen_opval_addr_names, & fields->f_d_An);
+      break;
+    case UBICOM32_OPERAND_D_DIRECT_ADDR :
+      errmsg = parse_d_direct_addr (cd, strp, UBICOM32_OPERAND_D_DIRECT_ADDR, (unsigned long *) (& fields->f_d_direct));
+      break;
+    case UBICOM32_OPERAND_D_I4_1 :
+      errmsg = parse_imm4_1 (cd, strp, UBICOM32_OPERAND_D_I4_1, (long *) (& fields->f_d_i4_1));
+      break;
+    case UBICOM32_OPERAND_D_I4_2 :
+      errmsg = parse_imm4_2 (cd, strp, UBICOM32_OPERAND_D_I4_2, (long *) (& fields->f_d_i4_2));
+      break;
+    case UBICOM32_OPERAND_D_I4_4 :
+      errmsg = parse_imm4_4 (cd, strp, UBICOM32_OPERAND_D_I4_4, (long *) (& fields->f_d_i4_4));
+      break;
+    case UBICOM32_OPERAND_D_IMM7_1 :
+      errmsg = parse_imm7_1_d (cd, strp, UBICOM32_OPERAND_D_IMM7_1, (unsigned long *) (& fields->f_d_imm7_1));
+      break;
+    case UBICOM32_OPERAND_D_IMM7_2 :
+      errmsg = parse_imm7_2_d (cd, strp, UBICOM32_OPERAND_D_IMM7_2, (unsigned long *) (& fields->f_d_imm7_2));
+      break;
+    case UBICOM32_OPERAND_D_IMM7_4 :
+      errmsg = parse_imm7_4_d (cd, strp, UBICOM32_OPERAND_D_IMM7_4, (unsigned long *) (& fields->f_d_imm7_4));
+      break;
+    case UBICOM32_OPERAND_D_IMM8 :
+      errmsg = parse_imm8 (cd, strp, UBICOM32_OPERAND_D_IMM8, (long *) (& fields->f_d_imm8));
+      break;
+    case UBICOM32_OPERAND_D_R :
+      errmsg = cgen_parse_keyword (cd, strp, & ubicom32_cgen_opval_data_names, & fields->f_d_r);
+      break;
+    case UBICOM32_OPERAND_DSP_S2_ACC_REG_ADDSUB :
+      errmsg = parse_acc_for_addsub (cd, strp, & ubicom32_cgen_opval_acc_names, & fields->f_dsp_S2);
+      break;
+    case UBICOM32_OPERAND_DSP_S2_ACC_REG_MUL :
+      errmsg = cgen_parse_keyword (cd, strp, & ubicom32_cgen_opval_acc_names, & fields->f_dsp_S2);
+      break;
+    case UBICOM32_OPERAND_DSP_S2_DATA_REG :
+      errmsg = cgen_parse_keyword (cd, strp, & ubicom32_cgen_opval_data_names, & fields->f_dsp_S2);
+      break;
+    case UBICOM32_OPERAND_DSP_S2_DATA_REG_ADDSUB :
+      errmsg = parse_dr_for_addsub (cd, strp, & ubicom32_cgen_opval_data_names, & fields->f_dsp_S2);
+      break;
+    case UBICOM32_OPERAND_DSP_S2_SEL :
+      errmsg = cgen_parse_unsigned_integer (cd, strp, UBICOM32_OPERAND_DSP_S2_SEL, (unsigned long *) (& fields->f_dsp_S2_sel));
+      break;
+    case UBICOM32_OPERAND_DSP_C :
+      errmsg = cgen_parse_keyword (cd, strp, & ubicom32_cgen_opval_h_DSP_C, & fields->f_dsp_C);
+      break;
+    case UBICOM32_OPERAND_DSP_DESTA :
+      errmsg = cgen_parse_keyword (cd, strp, & ubicom32_cgen_opval_h_DSP_Dest_A, & fields->f_dsp_destA);
+      break;
+    case UBICOM32_OPERAND_DSP_T :
+      errmsg = cgen_parse_keyword (cd, strp, & ubicom32_cgen_opval_h_DSP_T, & fields->f_dsp_T);
+      break;
+    case UBICOM32_OPERAND_DSP_T_ADDSUB :
+      errmsg = parse_t_is_set_for_addsub (cd, strp, & ubicom32_cgen_opval_h_DSP_T_addsub, & fields->f_dsp_T);
+      break;
+    case UBICOM32_OPERAND_IMM16_1 :
+      errmsg = cgen_parse_signed_integer (cd, strp, UBICOM32_OPERAND_IMM16_1, (long *) (& fields->f_imm16_1));
+      break;
+    case UBICOM32_OPERAND_IMM16_2 :
+      errmsg = parse_imm16 (cd, strp, UBICOM32_OPERAND_IMM16_2, (long *) (& fields->f_imm16_2));
+      break;
+    case UBICOM32_OPERAND_IMM24 :
+      errmsg = parse_imm24 (cd, strp, UBICOM32_OPERAND_IMM24, (unsigned long *) (& fields->f_imm24));
+      break;
+    case UBICOM32_OPERAND_IMM25 :
+      errmsg = parse_imm25 (cd, strp, UBICOM32_OPERAND_IMM25, (unsigned long *) (& fields->f_imm25));
+      break;
+    case UBICOM32_OPERAND_INTERRUPT :
+      errmsg = cgen_parse_unsigned_integer (cd, strp, UBICOM32_OPERAND_INTERRUPT, (unsigned long *) (& fields->f_int));
+      break;
+    case UBICOM32_OPERAND_IREAD :
+      errmsg = cgen_parse_unsigned_integer (cd, strp, UBICOM32_OPERAND_IREAD, (unsigned long *) (& junk));
+      break;
+    case UBICOM32_OPERAND_IRQ_0 :
+      errmsg = cgen_parse_unsigned_integer (cd, strp, UBICOM32_OPERAND_IRQ_0, (unsigned long *) (& junk));
+      break;
+    case UBICOM32_OPERAND_IRQ_1 :
+      errmsg = cgen_parse_unsigned_integer (cd, strp, UBICOM32_OPERAND_IRQ_1, (unsigned long *) (& junk));
+      break;
+    case UBICOM32_OPERAND_MACHI :
+      errmsg = cgen_parse_unsigned_integer (cd, strp, UBICOM32_OPERAND_MACHI, (unsigned long *) (& junk));
+      break;
+    case UBICOM32_OPERAND_MACLO :
+      errmsg = cgen_parse_unsigned_integer (cd, strp, UBICOM32_OPERAND_MACLO, (unsigned long *) (& junk));
+      break;
+    case UBICOM32_OPERAND_OFFSET16 :
+      errmsg = parse_offset16 (cd, strp, UBICOM32_OPERAND_OFFSET16, (long *) (& fields->f_o16));
+      break;
+    case UBICOM32_OPERAND_OFFSET21 :
+      {
+        bfd_vma value = 0;
+        errmsg = parse_offset21 (cd, strp, UBICOM32_OPERAND_OFFSET21, 0, NULL,  & value);
+        fields->f_o21 = value;
+      }
+      break;
+    case UBICOM32_OPERAND_OFFSET24 :
+      {
+        bfd_vma value = 0;
+        errmsg = cgen_parse_address (cd, strp, UBICOM32_OPERAND_OFFSET24, 0, NULL,  & value);
+        fields->f_o24 = value;
+      }
+      break;
+    case UBICOM32_OPERAND_OPC1 :
+      errmsg = cgen_parse_unsigned_integer (cd, strp, UBICOM32_OPERAND_OPC1, (unsigned long *) (& fields->f_op1));
+      break;
+    case UBICOM32_OPERAND_OPC2 :
+      errmsg = cgen_parse_unsigned_integer (cd, strp, UBICOM32_OPERAND_OPC2, (unsigned long *) (& fields->f_op2));
+      break;
+    case UBICOM32_OPERAND_PDEC_S1_IMM7_4 :
+      errmsg = parse_pdec_imm7_4_s (cd, strp, UBICOM32_OPERAND_PDEC_S1_IMM7_4, (unsigned long *) (& fields->f_s1_imm7_4));
+      break;
+    case UBICOM32_OPERAND_S1_AN :
+      errmsg = cgen_parse_keyword (cd, strp, & ubicom32_cgen_opval_addr_names, & fields->f_s1_An);
+      break;
+    case UBICOM32_OPERAND_S1_DIRECT_ADDR :
+      errmsg = parse_s1_direct_addr (cd, strp, UBICOM32_OPERAND_S1_DIRECT_ADDR, (unsigned long *) (& fields->f_s1_direct));
+      break;
+    case UBICOM32_OPERAND_S1_I4_1 :
+      errmsg = parse_imm4_1 (cd, strp, UBICOM32_OPERAND_S1_I4_1, (long *) (& fields->f_s1_i4_1));
+      break;
+    case UBICOM32_OPERAND_S1_I4_2 :
+      errmsg = parse_imm4_2 (cd, strp, UBICOM32_OPERAND_S1_I4_2, (long *) (& fields->f_s1_i4_2));
+      break;
+    case UBICOM32_OPERAND_S1_I4_4 :
+      errmsg = parse_imm4_4 (cd, strp, UBICOM32_OPERAND_S1_I4_4, (long *) (& fields->f_s1_i4_4));
+      break;
+    case UBICOM32_OPERAND_S1_IMM7_1 :
+      errmsg = parse_imm7_1_s (cd, strp, UBICOM32_OPERAND_S1_IMM7_1, (unsigned long *) (& fields->f_s1_imm7_1));
+      break;
+    case UBICOM32_OPERAND_S1_IMM7_2 :
+      errmsg = parse_imm7_2_s (cd, strp, UBICOM32_OPERAND_S1_IMM7_2, (unsigned long *) (& fields->f_s1_imm7_2));
+      break;
+    case UBICOM32_OPERAND_S1_IMM7_4 :
+      errmsg = parse_imm7_4_s (cd, strp, UBICOM32_OPERAND_S1_IMM7_4, (unsigned long *) (& fields->f_s1_imm7_4));
+      break;
+    case UBICOM32_OPERAND_S1_IMM8 :
+      errmsg = parse_imm8 (cd, strp, UBICOM32_OPERAND_S1_IMM8, (long *) (& fields->f_s1_imm8));
+      break;
+    case UBICOM32_OPERAND_S1_R :
+      errmsg = cgen_parse_keyword (cd, strp, & ubicom32_cgen_opval_data_names, & fields->f_s1_r);
+      break;
+    case UBICOM32_OPERAND_S2 :
+      errmsg = cgen_parse_keyword (cd, strp, & ubicom32_cgen_opval_data_names, & fields->f_s2);
+      break;
+    case UBICOM32_OPERAND_SRC3 :
+      errmsg = cgen_parse_unsigned_integer (cd, strp, UBICOM32_OPERAND_SRC3, (unsigned long *) (& junk));
+      break;
+    case UBICOM32_OPERAND_X_BIT26 :
+      errmsg = cgen_parse_unsigned_integer (cd, strp, UBICOM32_OPERAND_X_BIT26, (unsigned long *) (& fields->f_bit26));
+      break;
+    case UBICOM32_OPERAND_X_D :
+      errmsg = cgen_parse_unsigned_integer (cd, strp, UBICOM32_OPERAND_X_D, (unsigned long *) (& fields->f_d));
+      break;
+    case UBICOM32_OPERAND_X_DN :
+      errmsg = cgen_parse_unsigned_integer (cd, strp, UBICOM32_OPERAND_X_DN, (unsigned long *) (& fields->f_Dn));
+      break;
+    case UBICOM32_OPERAND_X_OP2 :
+      errmsg = cgen_parse_unsigned_integer (cd, strp, UBICOM32_OPERAND_X_OP2, (unsigned long *) (& fields->f_op2));
+      break;
+    case UBICOM32_OPERAND_X_S1 :
+      errmsg = cgen_parse_unsigned_integer (cd, strp, UBICOM32_OPERAND_X_S1, (unsigned long *) (& fields->f_s1));
+      break;
+
+    default :
+      /* xgettext:c-format */
+      fprintf (stderr, _("Unrecognized field %d while parsing.\n"), opindex);
+      abort ();
+  }
+
+  return errmsg;
+}
+
+cgen_parse_fn * const ubicom32_cgen_parse_handlers[] = 
+{
+  parse_insn_normal,
+};
+
+void
+ubicom32_cgen_init_asm (CGEN_CPU_DESC cd)
+{
+  ubicom32_cgen_init_opcode_table (cd);
+  ubicom32_cgen_init_ibld_table (cd);
+  cd->parse_handlers = & ubicom32_cgen_parse_handlers[0];
+  cd->parse_operand = ubicom32_cgen_parse_operand;
+#ifdef CGEN_ASM_INIT_HOOK
+CGEN_ASM_INIT_HOOK
+#endif
+}
+
+
+
+/* Regex construction routine.
+
+   This translates an opcode syntax string into a regex string,
+   by replacing any non-character syntax element (such as an
+   opcode) with the pattern '.*'
+
+   It then compiles the regex and stores it in the opcode, for
+   later use by ubicom32_cgen_assemble_insn
+
+   Returns NULL for success, an error message for failure.  */
+
+char * 
+ubicom32_cgen_build_insn_regex (CGEN_INSN *insn)
+{  
+  CGEN_OPCODE *opc = (CGEN_OPCODE *) CGEN_INSN_OPCODE (insn);
+  const char *mnem = CGEN_INSN_MNEMONIC (insn);
+  char rxbuf[CGEN_MAX_RX_ELEMENTS];
+  char *rx = rxbuf;
+  const CGEN_SYNTAX_CHAR_TYPE *syn;
+  int reg_err;
+
+  syn = CGEN_SYNTAX_STRING (CGEN_OPCODE_SYNTAX (opc));
+
+  /* Mnemonics come first in the syntax string.  */
+  if (! CGEN_SYNTAX_MNEMONIC_P (* syn))
+    return _("missing mnemonic in syntax string");
+  ++syn;
+
+  /* Generate a case sensitive regular expression that emulates case
+     insensitive matching in the "C" locale.  We cannot generate a case
+     insensitive regular expression because in Turkish locales, 'i' and 'I'
+     are not equal modulo case conversion.  */
+
+  /* Copy the literal mnemonic out of the insn.  */
+  for (; *mnem; mnem++)
+    {
+      char c = *mnem;
+
+      if (ISALPHA (c))
+	{
+	  *rx++ = '[';
+	  *rx++ = TOLOWER (c);
+	  *rx++ = TOUPPER (c);
+	  *rx++ = ']';
+	}
+      else
+	*rx++ = c;
+    }
+
+  /* Copy any remaining literals from the syntax string into the rx.  */
+  for(; * syn != 0 && rx <= rxbuf + (CGEN_MAX_RX_ELEMENTS - 7 - 4); ++syn)
+    {
+      if (CGEN_SYNTAX_CHAR_P (* syn)) 
+	{
+	  char c = CGEN_SYNTAX_CHAR (* syn);
+
+	  switch (c) 
+	    {
+	      /* Escape any regex metacharacters in the syntax.  */
+	    case '.': case '[': case '\\': 
+	    case '*': case '^': case '$': 
+
+#ifdef CGEN_ESCAPE_EXTENDED_REGEX
+	    case '?': case '{': case '}': 
+	    case '(': case ')': case '*':
+	    case '|': case '+': case ']':
+#endif
+	      *rx++ = '\\';
+	      *rx++ = c;
+	      break;
+
+	    default:
+	      if (ISALPHA (c))
+		{
+		  *rx++ = '[';
+		  *rx++ = TOLOWER (c);
+		  *rx++ = TOUPPER (c);
+		  *rx++ = ']';
+		}
+	      else
+		*rx++ = c;
+	      break;
+	    }
+	}
+      else
+	{
+	  /* Replace non-syntax fields with globs.  */
+	  *rx++ = '.';
+	  *rx++ = '*';
+	}
+    }
+
+  /* Trailing whitespace ok.  */
+  * rx++ = '['; 
+  * rx++ = ' '; 
+  * rx++ = '\t'; 
+  * rx++ = ']'; 
+  * rx++ = '*'; 
+
+  /* But anchor it after that.  */
+  * rx++ = '$'; 
+  * rx = '\0';
+
+  CGEN_INSN_RX (insn) = xmalloc (sizeof (regex_t));
+  reg_err = regcomp ((regex_t *) CGEN_INSN_RX (insn), rxbuf, REG_NOSUB);
+
+  if (reg_err == 0) 
+    return NULL;
+  else
+    {
+      static char msg[80];
+
+      regerror (reg_err, (regex_t *) CGEN_INSN_RX (insn), msg, 80);
+      regfree ((regex_t *) CGEN_INSN_RX (insn));
+      free (CGEN_INSN_RX (insn));
+      (CGEN_INSN_RX (insn)) = NULL;
+      return msg;
+    }
+}
+
+
+/* Default insn parser.
+
+   The syntax string is scanned and operands are parsed and stored in FIELDS.
+   Relocs are queued as we go via other callbacks.
+
+   ??? Note that this is currently an all-or-nothing parser.  If we fail to
+   parse the instruction, we return 0 and the caller will start over from
+   the beginning.  Backtracking will be necessary in parsing subexpressions,
+   but that can be handled there.  Not handling backtracking here may get
+   expensive in the case of the m68k.  Deal with later.
+
+   Returns NULL for success, an error message for failure.  */
+
+static const char *
+parse_insn_normal (CGEN_CPU_DESC cd,
+		   const CGEN_INSN *insn,
+		   const char **strp,
+		   CGEN_FIELDS *fields)
+{
+  /* ??? Runtime added insns not handled yet.  */
+  const CGEN_SYNTAX *syntax = CGEN_INSN_SYNTAX (insn);
+  const char *str = *strp;
+  const char *errmsg;
+  const char *p;
+  const CGEN_SYNTAX_CHAR_TYPE * syn;
+#ifdef CGEN_MNEMONIC_OPERANDS
+  /* FIXME: wip */
+  int past_opcode_p;
+#endif
+
+  /* For now we assume the mnemonic is first (there are no leading operands).
+     We can parse it without needing to set up operand parsing.
+     GAS's input scrubber will ensure mnemonics are lowercase, but we may
+     not be called from GAS.  */
+  p = CGEN_INSN_MNEMONIC (insn);
+  while (*p && TOLOWER (*p) == TOLOWER (*str))
+    ++p, ++str;
+
+  if (* p)
+    return _("unrecognized instruction");
+
+#ifndef CGEN_MNEMONIC_OPERANDS
+  if (* str && ! ISSPACE (* str))
+    return _("unrecognized instruction");
+#endif
+
+  CGEN_INIT_PARSE (cd);
+  cgen_init_parse_operand (cd);
+#ifdef CGEN_MNEMONIC_OPERANDS
+  past_opcode_p = 0;
+#endif
+
+  /* We don't check for (*str != '\0') here because we want to parse
+     any trailing fake arguments in the syntax string.  */
+  syn = CGEN_SYNTAX_STRING (syntax);
+
+  /* Mnemonics come first for now, ensure valid string.  */
+  if (! CGEN_SYNTAX_MNEMONIC_P (* syn))
+    abort ();
+
+  ++syn;
+
+  while (* syn != 0)
+    {
+      /* Non operand chars must match exactly.  */
+      if (CGEN_SYNTAX_CHAR_P (* syn))
+	{
+	  /* FIXME: While we allow for non-GAS callers above, we assume the
+	     first char after the mnemonic part is a space.  */
+	  /* FIXME: We also take inappropriate advantage of the fact that
+	     GAS's input scrubber will remove extraneous blanks.  */
+	  if (TOLOWER (*str) == TOLOWER (CGEN_SYNTAX_CHAR (* syn)))
+	    {
+#ifdef CGEN_MNEMONIC_OPERANDS
+	      if (CGEN_SYNTAX_CHAR(* syn) == ' ')
+		past_opcode_p = 1;
+#endif
+	      ++ syn;
+	      ++ str;
+	    }
+	  else if (*str)
+	    {
+	      /* Syntax char didn't match.  Can't be this insn.  */
+	      static char msg [80];
+
+	      /* xgettext:c-format */
+	      sprintf (msg, _("syntax error (expected char `%c', found `%c')"),
+		       CGEN_SYNTAX_CHAR(*syn), *str);
+	      return msg;
+	    }
+	  else
+	    {
+	      /* Ran out of input.  */
+	      static char msg [80];
+
+	      /* xgettext:c-format */
+	      sprintf (msg, _("syntax error (expected char `%c', found end of instruction)"),
+		       CGEN_SYNTAX_CHAR(*syn));
+	      return msg;
+	    }
+	  continue;
+	}
+
+      /* We have an operand of some sort.  */
+      errmsg = cd->parse_operand (cd, CGEN_SYNTAX_FIELD (*syn),
+					  &str, fields);
+      if (errmsg)
+	return errmsg;
+
+      /* Done with this operand, continue with next one.  */
+      ++ syn;
+    }
+
+  /* If we're at the end of the syntax string, we're done.  */
+  if (* syn == 0)
+    {
+      /* FIXME: For the moment we assume a valid `str' can only contain
+	 blanks now.  IE: We needn't try again with a longer version of
+	 the insn and it is assumed that longer versions of insns appear
+	 before shorter ones (eg: lsr r2,r3,1 vs lsr r2,r3).  */
+      while (ISSPACE (* str))
+	++ str;
+
+      if (* str != '\0')
+	return _("junk at end of line"); /* FIXME: would like to include `str' */
+
+      return NULL;
+    }
+
+  /* We couldn't parse it.  */
+  return _("unrecognized instruction");
+}
+
+/* Main entry point.
+   This routine is called for each instruction to be assembled.
+   STR points to the insn to be assembled.
+   We assume all necessary tables have been initialized.
+   The assembled instruction, less any fixups, is stored in BUF.
+   Remember that if CGEN_INT_INSN_P then BUF is an int and thus the value
+   still needs to be converted to target byte order, otherwise BUF is an array
+   of bytes in target byte order.
+   The result is a pointer to the insn's entry in the opcode table,
+   or NULL if an error occured (an error message will have already been
+   printed).
+
+   Note that when processing (non-alias) macro-insns,
+   this function recurses.
+
+   ??? It's possible to make this cpu-independent.
+   One would have to deal with a few minor things.
+   At this point in time doing so would be more of a curiosity than useful
+   [for example this file isn't _that_ big], but keeping the possibility in
+   mind helps keep the design clean.  */
+
+const CGEN_INSN *
+ubicom32_cgen_assemble_insn (CGEN_CPU_DESC cd,
+			   const char *str,
+			   CGEN_FIELDS *fields,
+			   CGEN_INSN_BYTES_PTR buf,
+			   char **errmsg)
+{
+  const char *start;
+  CGEN_INSN_LIST *ilist;
+  const char *parse_errmsg = NULL;
+  const char *insert_errmsg = NULL;
+  int recognized_mnemonic = 0;
+
+  /* Skip leading white space.  */
+  while (ISSPACE (* str))
+    ++ str;
+
+  /* The instructions are stored in hashed lists.
+     Get the first in the list.  */
+  ilist = CGEN_ASM_LOOKUP_INSN (cd, str);
+
+  /* Keep looking until we find a match.  */
+  start = str;
+  for ( ; ilist != NULL ; ilist = CGEN_ASM_NEXT_INSN (ilist))
+    {
+      const CGEN_INSN *insn = ilist->insn;
+      recognized_mnemonic = 1;
+
+#ifdef CGEN_VALIDATE_INSN_SUPPORTED 
+      /* Not usually needed as unsupported opcodes
+	 shouldn't be in the hash lists.  */
+      /* Is this insn supported by the selected cpu?  */
+      if (! ubicom32_cgen_insn_supported (cd, insn))
+	continue;
+#endif
+      /* If the RELAXED attribute is set, this is an insn that shouldn't be
+	 chosen immediately.  Instead, it is used during assembler/linker
+	 relaxation if possible.  */
+      if (CGEN_INSN_ATTR_VALUE (insn, CGEN_INSN_RELAXED) != 0)
+	continue;
+
+      str = start;
+
+      /* Skip this insn if str doesn't look right lexically.  */
+      if (CGEN_INSN_RX (insn) != NULL &&
+	  regexec ((regex_t *) CGEN_INSN_RX (insn), str, 0, NULL, 0) == REG_NOMATCH)
+	continue;
+
+      /* Allow parse/insert handlers to obtain length of insn.  */
+      CGEN_FIELDS_BITSIZE (fields) = CGEN_INSN_BITSIZE (insn);
+
+      parse_errmsg = CGEN_PARSE_FN (cd, insn) (cd, insn, & str, fields);
+      if (parse_errmsg != NULL)
+	continue;
+
+      /* ??? 0 is passed for `pc'.  */
+      insert_errmsg = CGEN_INSERT_FN (cd, insn) (cd, insn, fields, buf,
+						 (bfd_vma) 0);
+      if (insert_errmsg != NULL)
+        continue;
+
+      /* It is up to the caller to actually output the insn and any
+         queued relocs.  */
+      return insn;
+    }
+
+  {
+    static char errbuf[150];
+#ifdef CGEN_VERBOSE_ASSEMBLER_ERRORS
+    const char *tmp_errmsg;
+
+    /* If requesting verbose error messages, use insert_errmsg.
+       Failing that, use parse_errmsg.  */
+    tmp_errmsg = (insert_errmsg ? insert_errmsg :
+		  parse_errmsg ? parse_errmsg :
+		  recognized_mnemonic ?
+		  _("unrecognized form of instruction") :
+		  _("unrecognized instruction"));
+
+    if (strlen (start) > 50)
+      /* xgettext:c-format */
+      sprintf (errbuf, "%s `%.50s...'", tmp_errmsg, start);
+    else 
+      /* xgettext:c-format */
+      sprintf (errbuf, "%s `%.50s'", tmp_errmsg, start);
+#else
+    if (strlen (start) > 50)
+      /* xgettext:c-format */
+      sprintf (errbuf, _("bad instruction `%.50s...'"), start);
+    else 
+      /* xgettext:c-format */
+      sprintf (errbuf, _("bad instruction `%.50s'"), start);
+#endif
+      
+    *errmsg = errbuf;
+    return NULL;
+  }
+}
--- /dev/null
+++ b/opcodes/ubicom32-desc.c
@@ -0,0 +1,16215 @@
+/* CPU data for ubicom32.
+
+THIS FILE IS MACHINE GENERATED WITH CGEN.
+
+Copyright 1996-2007 Free Software Foundation, Inc.
+
+This file is part of the GNU Binutils and/or GDB, the GNU debugger.
+
+   This file is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 3, or (at your option)
+   any later version.
+
+   It is distributed in the hope that it will be useful, but WITHOUT
+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
+   License for more details.
+
+   You should have received a copy of the GNU General Public License along
+   with this program; if not, write to the Free Software Foundation, Inc.,
+   51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.
+
+*/
+
+#include "sysdep.h"
+#include <stdio.h>
+#include <stdarg.h>
+#include "ansidecl.h"
+#include "bfd.h"
+#include "symcat.h"
+#include "ubicom32-desc.h"
+#include "ubicom32-opc.h"
+#include "opintl.h"
+#include "libiberty.h"
+#include "xregex.h"
+
+/* Attributes.  */
+
+static const CGEN_ATTR_ENTRY bool_attr[] =
+{
+  { "#f", 0 },
+  { "#t", 1 },
+  { 0, 0 }
+};
+
+static const CGEN_ATTR_ENTRY MACH_attr[] ATTRIBUTE_UNUSED =
+{
+  { "base", MACH_BASE },
+  { "ip3035", MACH_IP3035 },
+  { "ubicom32dsp", MACH_UBICOM32DSP },
+  { "ip3023compatibility", MACH_IP3023COMPATIBILITY },
+  { "ubicom32_ver4", MACH_UBICOM32_VER4 },
+  { "ubicom32_ver5", MACH_UBICOM32_VER5 },
+  { "ubicom32_oldmoveai", MACH_UBICOM32_OLDMOVEAI },
+  { "ubicom32_newmoveai", MACH_UBICOM32_NEWMOVEAI },
+  { "ubicom32_newmoveaisimulate", MACH_UBICOM32_NEWMOVEAISIMULATE },
+  { "max", MACH_MAX },
+  { 0, 0 }
+};
+
+static const CGEN_ATTR_ENTRY ISA_attr[] ATTRIBUTE_UNUSED =
+{
+  { "ubicom32", ISA_UBICOM32 },
+  { "max", ISA_MAX },
+  { 0, 0 }
+};
+
+const CGEN_ATTR_TABLE ubicom32_cgen_ifield_attr_table[] =
+{
+  { "MACH", & MACH_attr[0], & MACH_attr[0] },
+  { "VIRTUAL", &bool_attr[0], &bool_attr[0] },
+  { "PCREL-ADDR", &bool_attr[0], &bool_attr[0] },
+  { "ABS-ADDR", &bool_attr[0], &bool_attr[0] },
+  { "RESERVED", &bool_attr[0], &bool_attr[0] },
+  { "SIGN-OPT", &bool_attr[0], &bool_attr[0] },
+  { "SIGNED", &bool_attr[0], &bool_attr[0] },
+  { 0, 0, 0 }
+};
+
+const CGEN_ATTR_TABLE ubicom32_cgen_hardware_attr_table[] =
+{
+  { "MACH", & MACH_attr[0], & MACH_attr[0] },
+  { "VIRTUAL", &bool_attr[0], &bool_attr[0] },
+  { "CACHE-ADDR", &bool_attr[0], &bool_attr[0] },
+  { "PC", &bool_attr[0], &bool_attr[0] },
+  { "PROFILE", &bool_attr[0], &bool_attr[0] },
+  { 0, 0, 0 }
+};
+
+const CGEN_ATTR_TABLE ubicom32_cgen_operand_attr_table[] =
+{
+  { "MACH", & MACH_attr[0], & MACH_attr[0] },
+  { "VIRTUAL", &bool_attr[0], &bool_attr[0] },
+  { "PCREL-ADDR", &bool_attr[0], &bool_attr[0] },
+  { "ABS-ADDR", &bool_attr[0], &bool_attr[0] },
+  { "SIGN-OPT", &bool_attr[0], &bool_attr[0] },
+  { "SIGNED", &bool_attr[0], &bool_attr[0] },
+  { "NEGATIVE", &bool_attr[0], &bool_attr[0] },
+  { "RELAX", &bool_attr[0], &bool_attr[0] },
+  { "SEM-ONLY", &bool_attr[0], &bool_attr[0] },
+  { 0, 0, 0 }
+};
+
+const CGEN_ATTR_TABLE ubicom32_cgen_insn_attr_table[] =
+{
+  { "MACH", & MACH_attr[0], & MACH_attr[0] },
+  { "ALIAS", &bool_attr[0], &bool_attr[0] },
+  { "VIRTUAL", &bool_attr[0], &bool_attr[0] },
+  { "UNCOND-CTI", &bool_attr[0], &bool_attr[0] },
+  { "COND-CTI", &bool_attr[0], &bool_attr[0] },
+  { "SKIP-CTI", &bool_attr[0], &bool_attr[0] },
+  { "DELAY-SLOT", &bool_attr[0], &bool_attr[0] },
+  { "RELAXABLE", &bool_attr[0], &bool_attr[0] },
+  { "RELAXED", &bool_attr[0], &bool_attr[0] },
+  { "NO-DIS", &bool_attr[0], &bool_attr[0] },
+  { "PBB", &bool_attr[0], &bool_attr[0] },
+  { 0, 0, 0 }
+};
+
+/* Instruction set variants.  */
+
+static const CGEN_ISA ubicom32_cgen_isa_table[] = {
+  { "ubicom32", 32, 32, 32, 32 },
+  { 0, 0, 0, 0, 0 }
+};
+
+/* Machine variants.  */
+
+static const CGEN_MACH ubicom32_cgen_mach_table[] = {
+  { "ip3035", "ubicom32", MACH_IP3035, 0 },
+  { "ubicom32dsp", "ubicom32dsp", MACH_UBICOM32DSP, 0 },
+  { "ip3023compatibility", "ubicom32dsp", MACH_IP3023COMPATIBILITY, 0 },
+  { "ubicom32_ver4", "ubicom32ver4", MACH_UBICOM32_VER4, 0 },
+  { "ubicom32_ver5", "ubicom32ver5", MACH_UBICOM32_VER5, 0 },
+  { "ubicom32_oldmoveai", "ubicom32ver4", MACH_UBICOM32_OLDMOVEAI, 0 },
+  { "ubicom32_newmoveai", "ubicom32ver5", MACH_UBICOM32_NEWMOVEAI, 0 },
+  { 0, 0, 0, 0 }
+};
+
+static CGEN_KEYWORD_ENTRY ubicom32_cgen_opval_data_names_entries[] =
+{
+  { "d0", 0, {0, {{{0, 0}}}}, 0, 0 },
+  { "d1", 1, {0, {{{0, 0}}}}, 0, 0 },
+  { "d2", 2, {0, {{{0, 0}}}}, 0, 0 },
+  { "d3", 3, {0, {{{0, 0}}}}, 0, 0 },
+  { "d4", 4, {0, {{{0, 0}}}}, 0, 0 },
+  { "d5", 5, {0, {{{0, 0}}}}, 0, 0 },
+  { "d6", 6, {0, {{{0, 0}}}}, 0, 0 },
+  { "d7", 7, {0, {{{0, 0}}}}, 0, 0 },
+  { "d8", 8, {0, {{{0, 0}}}}, 0, 0 },
+  { "d9", 9, {0, {{{0, 0}}}}, 0, 0 },
+  { "d10", 10, {0, {{{0, 0}}}}, 0, 0 },
+  { "d11", 11, {0, {{{0, 0}}}}, 0, 0 },
+  { "d12", 12, {0, {{{0, 0}}}}, 0, 0 },
+  { "d13", 13, {0, {{{0, 0}}}}, 0, 0 },
+  { "d14", 14, {0, {{{0, 0}}}}, 0, 0 },
+  { "d15", 15, {0, {{{0, 0}}}}, 0, 0 }
+};
+
+CGEN_KEYWORD ubicom32_cgen_opval_data_names =
+{
+  & ubicom32_cgen_opval_data_names_entries[0],
+  16,
+  0, 0, 0, 0, ""
+};
+
+static CGEN_KEYWORD_ENTRY ubicom32_cgen_opval_addr_names_entries[] =
+{
+  { "sp", 7, {0, {{{0, 0}}}}, 0, 0 },
+  { "a0", 0, {0, {{{0, 0}}}}, 0, 0 },
+  { "a1", 1, {0, {{{0, 0}}}}, 0, 0 },
+  { "a2", 2, {0, {{{0, 0}}}}, 0, 0 },
+  { "a3", 3, {0, {{{0, 0}}}}, 0, 0 },
+  { "a4", 4, {0, {{{0, 0}}}}, 0, 0 },
+  { "a5", 5, {0, {{{0, 0}}}}, 0, 0 },
+  { "a6", 6, {0, {{{0, 0}}}}, 0, 0 },
+  { "a7", 7, {0, {{{0, 0}}}}, 0, 0 }
+};
+
+CGEN_KEYWORD ubicom32_cgen_opval_addr_names =
+{
+  & ubicom32_cgen_opval_addr_names_entries[0],
+  9,
+  0, 0, 0, 0, ""
+};
+
+static CGEN_KEYWORD_ENTRY ubicom32_cgen_opval_acc_names_entries[] =
+{
+  { "acc0", 0, {0, {{{0, 0}}}}, 0, 0 },
+  { "acc1", 1, {0, {{{0, 0}}}}, 0, 0 }
+};
+
+CGEN_KEYWORD ubicom32_cgen_opval_acc_names =
+{
+  & ubicom32_cgen_opval_acc_names_entries[0],
+  2,
+  0, 0, 0, 0, ""
+};
+
+static CGEN_KEYWORD_ENTRY ubicom32_cgen_opval_spad_names_entries[] =
+{
+  { "scratchpad0", 0, {0, {{{0, 0}}}}, 0, 0 },
+  { "scratchpad1", 0, {0, {{{0, 0}}}}, 0, 0 },
+  { "scratchpad2", 0, {0, {{{0, 0}}}}, 0, 0 },
+  { "scratchpad3", 0, {0, {{{0, 0}}}}, 0, 0 },
+  { "scratchpad4", 0, {0, {{{0, 0}}}}, 0, 0 },
+  { "scratchpad5", 0, {0, {{{0, 0}}}}, 0, 0 }
+};
+
+CGEN_KEYWORD ubicom32_cgen_opval_spad_names =
+{
+  & ubicom32_cgen_opval_spad_names_entries[0],
+  6,
+  0, 0, 0, 0, ""
+};
+
+static CGEN_KEYWORD_ENTRY ubicom32_cgen_opval_h_cc_entries[] =
+{
+  { "f", 0, {0, {{{0, 0}}}}, 0, 0 },
+  { "lo", 1, {0, {{{0, 0}}}}, 0, 0 },
+  { "cc", 1, {0, {{{0, 0}}}}, 0, 0 },
+  { "hs", 2, {0, {{{0, 0}}}}, 0, 0 },
+  { "cs", 2, {0, {{{0, 0}}}}, 0, 0 },
+  { "eq", 3, {0, {{{0, 0}}}}, 0, 0 },
+  { "ge", 4, {0, {{{0, 0}}}}, 0, 0 },
+  { "gt", 5, {0, {{{0, 0}}}}, 0, 0 },
+  { "hi", 6, {0, {{{0, 0}}}}, 0, 0 },
+  { "le", 7, {0, {{{0, 0}}}}, 0, 0 },
+  { "ls", 8, {0, {{{0, 0}}}}, 0, 0 },
+  { "lt", 9, {0, {{{0, 0}}}}, 0, 0 },
+  { "mi", 10, {0, {{{0, 0}}}}, 0, 0 },
+  { "ne", 11, {0, {{{0, 0}}}}, 0, 0 },
+  { "pl", 12, {0, {{{0, 0}}}}, 0, 0 },
+  { "t", 13, {0, {{{0, 0}}}}, 0, 0 },
+  { "vc", 14, {0, {{{0, 0}}}}, 0, 0 },
+  { "vs", 15, {0, {{{0, 0}}}}, 0, 0 }
+};
+
+CGEN_KEYWORD ubicom32_cgen_opval_h_cc =
+{
+  & ubicom32_cgen_opval_h_cc_entries[0],
+  18,
+  0, 0, 0, 0, ""
+};
+
+static CGEN_KEYWORD_ENTRY ubicom32_cgen_opval_h_C_entries[] =
+{
+  { "", 1, {0, {{{0, 0}}}}, 0, 0 },
+  { ".s", 0, {0, {{{0, 0}}}}, 0, 0 },
+  { ".w", 1, {0, {{{0, 0}}}}, 0, 0 }
+};
+
+CGEN_KEYWORD ubicom32_cgen_opval_h_C =
+{
+  & ubicom32_cgen_opval_h_C_entries[0],
+  3,
+  0, 0, 0, 0, ""
+};
+
+static CGEN_KEYWORD_ENTRY ubicom32_cgen_opval_h_P_entries[] =
+{
+  { ".t", 1, {0, {{{0, 0}}}}, 0, 0 },
+  { ".f", 0, {0, {{{0, 0}}}}, 0, 0 },
+  { "", 1, {0, {{{0, 0}}}}, 0, 0 }
+};
+
+CGEN_KEYWORD ubicom32_cgen_opval_h_P =
+{
+  & ubicom32_cgen_opval_h_P_entries[0],
+  3,
+  0, 0, 0, 0, ""
+};
+
+static CGEN_KEYWORD_ENTRY ubicom32_cgen_opval_h_DSP_C_entries[] =
+{
+  { ".c", 1, {0, {{{0, 0}}}}, 0, 0 },
+  { "", 0, {0, {{{0, 0}}}}, 0, 0 }
+};
+
+CGEN_KEYWORD ubicom32_cgen_opval_h_DSP_C =
+{
+  & ubicom32_cgen_opval_h_DSP_C_entries[0],
+  2,
+  0, 0, 0, 0, ""
+};
+
+static CGEN_KEYWORD_ENTRY ubicom32_cgen_opval_h_DSP_Dest_A_entries[] =
+{
+  { "acc0", 0, {0, {{{0, 0}}}}, 0, 0 },
+  { "acc1", 1, {0, {{{0, 0}}}}, 0, 0 }
+};
+
+CGEN_KEYWORD ubicom32_cgen_opval_h_DSP_Dest_A =
+{
+  & ubicom32_cgen_opval_h_DSP_Dest_A_entries[0],
+  2,
+  0, 0, 0, 0, ""
+};
+
+static CGEN_KEYWORD_ENTRY ubicom32_cgen_opval_h_DSP_T_entries[] =
+{
+  { "", 0, {0, {{{0, 0}}}}, 0, 0 },
+  { ".t", 1, {0, {{{0, 0}}}}, 0, 0 }
+};
+
+CGEN_KEYWORD ubicom32_cgen_opval_h_DSP_T =
+{
+  & ubicom32_cgen_opval_h_DSP_T_entries[0],
+  2,
+  0, 0, 0, 0, ""
+};
+
+static CGEN_KEYWORD_ENTRY ubicom32_cgen_opval_h_DSP_T_addsub_entries[] =
+{
+  { "", 0, {0, {{{0, 0}}}}, 0, 0 },
+  { ".t", 1, {0, {{{0, 0}}}}, 0, 0 }
+};
+
+CGEN_KEYWORD ubicom32_cgen_opval_h_DSP_T_addsub =
+{
+  & ubicom32_cgen_opval_h_DSP_T_addsub_entries[0],
+  2,
+  0, 0, 0, 0, ""
+};
+
+
+/* The hardware table.  */
+
+#if defined (__STDC__) || defined (ALMOST_STDC) || defined (HAVE_STRINGIZE)
+#define A(a) (1 << CGEN_HW_##a)
+#else
+#define A(a) (1 << CGEN_HW_/**/a)
+#endif
+
+const CGEN_HW_ENTRY ubicom32_cgen_hw_table[] =
+{
+  { "h-memory", HW_H_MEMORY, CGEN_ASM_NONE, 0, { 0, { { { (1<<MACH_BASE), 0 } } } } },
+  { "h-sint", HW_H_SINT, CGEN_ASM_NONE, 0, { 0, { { { (1<<MACH_BASE), 0 } } } } },
+  { "h-uint", HW_H_UINT, CGEN_ASM_NONE, 0, { 0, { { { (1<<MACH_BASE), 0 } } } } },
+  { "h-addr", HW_H_ADDR, CGEN_ASM_NONE, 0, { 0, { { { (1<<MACH_BASE), 0 } } } } },
+  { "h-iaddr", HW_H_IADDR, CGEN_ASM_NONE, 0, { 0, { { { (1<<MACH_BASE), 0 } } } } },
+  { "h-global-control", HW_H_GLOBAL_CONTROL, CGEN_ASM_NONE, 0, { 0|A(VIRTUAL), { { { (1<<MACH_BASE), 0 } } } } },
+  { "h-mt-break", HW_H_MT_BREAK, CGEN_ASM_NONE, 0, { 0|A(VIRTUAL), { { { (1<<MACH_BASE), 0 } } } } },
+  { "h-mt-active", HW_H_MT_ACTIVE, CGEN_ASM_NONE, 0, { 0|A(VIRTUAL), { { { (1<<MACH_BASE), 0 } } } } },
+  { "h-mt-enable", HW_H_MT_ENABLE, CGEN_ASM_NONE, 0, { 0|A(VIRTUAL), { { { (1<<MACH_BASE), 0 } } } } },
+  { "h-mt-priority", HW_H_MT_PRIORITY, CGEN_ASM_NONE, 0, { 0|A(VIRTUAL), { { { (1<<MACH_BASE), 0 } } } } },
+  { "h-mt-schedule", HW_H_MT_SCHEDULE, CGEN_ASM_NONE, 0, { 0|A(VIRTUAL), { { { (1<<MACH_BASE), 0 } } } } },
+  { "h-irq-status-0", HW_H_IRQ_STATUS_0, CGEN_ASM_NONE, 0, { 0|A(VIRTUAL), { { { (1<<MACH_BASE), 0 } } } } },
+  { "h-irq-status-1", HW_H_IRQ_STATUS_1, CGEN_ASM_NONE, 0, { 0|A(VIRTUAL), { { { (1<<MACH_BASE), 0 } } } } },
+  { "h-dr", HW_H_DR, CGEN_ASM_KEYWORD, (PTR) & ubicom32_cgen_opval_data_names, { 0|A(VIRTUAL), { { { (1<<MACH_BASE), 0 } } } } },
+  { "h-s1-dr", HW_H_S1_DR, CGEN_ASM_KEYWORD, (PTR) & ubicom32_cgen_opval_data_names, { 0|A(VIRTUAL), { { { (1<<MACH_BASE), 0 } } } } },
+  { "h-ar", HW_H_AR, CGEN_ASM_KEYWORD, (PTR) & ubicom32_cgen_opval_addr_names, { 0|A(VIRTUAL), { { { (1<<MACH_BASE), 0 } } } } },
+  { "h-ar-inc", HW_H_AR_INC, CGEN_ASM_NONE, 0, { 0, { { { (1<<MACH_BASE), 0 } } } } },
+  { "h-ar-inc-flag", HW_H_AR_INC_FLAG, CGEN_ASM_NONE, 0, { 0, { { { (1<<MACH_BASE), 0 } } } } },
+  { "h-mac-hi", HW_H_MAC_HI, CGEN_ASM_NONE, 0, { 0|A(VIRTUAL), { { { (1<<MACH_BASE), 0 } } } } },
+  { "h-mac-lo", HW_H_MAC_LO, CGEN_ASM_NONE, 0, { 0|A(VIRTUAL), { { { (1<<MACH_BASE), 0 } } } } },
+  { "h-src-3", HW_H_SRC_3, CGEN_ASM_NONE, 0, { 0|A(VIRTUAL), { { { (1<<MACH_BASE), 0 } } } } },
+  { "h-csr", HW_H_CSR, CGEN_ASM_NONE, 0, { 0|A(VIRTUAL), { { { (1<<MACH_BASE), 0 } } } } },
+  { "h-iread", HW_H_IREAD, CGEN_ASM_NONE, 0, { 0|A(VIRTUAL), { { { (1<<MACH_BASE), 0 } } } } },
+  { "h-acc1-hi", HW_H_ACC1_HI, CGEN_ASM_NONE, 0, { 0|A(VIRTUAL), { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } } },
+  { "h-acc1-lo", HW_H_ACC1_LO, CGEN_ASM_NONE, 0, { 0|A(VIRTUAL), { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } } },
+  { "h-pc", HW_H_PC, CGEN_ASM_NONE, 0, { 0|A(PROFILE)|A(PC), { { { (1<<MACH_BASE), 0 } } } } },
+  { "h-nbit-16", HW_H_NBIT_16, CGEN_ASM_NONE, 0, { 0|A(VIRTUAL), { { { (1<<MACH_BASE), 0 } } } } },
+  { "h-zbit-16", HW_H_ZBIT_16, CGEN_ASM_NONE, 0, { 0|A(VIRTUAL), { { { (1<<MACH_BASE), 0 } } } } },
+  { "h-vbit-16", HW_H_VBIT_16, CGEN_ASM_NONE, 0, { 0|A(VIRTUAL), { { { (1<<MACH_BASE), 0 } } } } },
+  { "h-cbit-16", HW_H_CBIT_16, CGEN_ASM_NONE, 0, { 0|A(VIRTUAL), { { { (1<<MACH_BASE), 0 } } } } },
+  { "h-nbit-32", HW_H_NBIT_32, CGEN_ASM_NONE, 0, { 0|A(VIRTUAL), { { { (1<<MACH_BASE), 0 } } } } },
+  { "h-zbit-32", HW_H_ZBIT_32, CGEN_ASM_NONE, 0, { 0|A(VIRTUAL), { { { (1<<MACH_BASE), 0 } } } } },
+  { "h-vbit-32", HW_H_VBIT_32, CGEN_ASM_NONE, 0, { 0|A(VIRTUAL), { { { (1<<MACH_BASE), 0 } } } } },
+  { "h-cbit-32", HW_H_CBIT_32, CGEN_ASM_NONE, 0, { 0|A(VIRTUAL), { { { (1<<MACH_BASE), 0 } } } } },
+  { "h-prev-privbit", HW_H_PREV_PRIVBIT, CGEN_ASM_NONE, 0, { 0|A(VIRTUAL), { { { (1<<MACH_BASE), 0 } } } } },
+  { "h-privbit", HW_H_PRIVBIT, CGEN_ASM_NONE, 0, { 0|A(VIRTUAL), { { { (1<<MACH_BASE), 0 } } } } },
+  { "h-cc", HW_H_CC, CGEN_ASM_KEYWORD, (PTR) & ubicom32_cgen_opval_h_cc, { 0, { { { (1<<MACH_BASE), 0 } } } } },
+  { "h-C", HW_H_C, CGEN_ASM_KEYWORD, (PTR) & ubicom32_cgen_opval_h_C, { 0, { { { (1<<MACH_BASE), 0 } } } } },
+  { "h-P", HW_H_P, CGEN_ASM_KEYWORD, (PTR) & ubicom32_cgen_opval_h_P, { 0, { { { (1<<MACH_BASE), 0 } } } } },
+  { "h-DSP-C", HW_H_DSP_C, CGEN_ASM_KEYWORD, (PTR) & ubicom32_cgen_opval_h_DSP_C, { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } } },
+  { "h-DSP-Dest-A", HW_H_DSP_DEST_A, CGEN_ASM_KEYWORD, (PTR) & ubicom32_cgen_opval_h_DSP_Dest_A, { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } } },
+  { "h-DSP-T", HW_H_DSP_T, CGEN_ASM_KEYWORD, (PTR) & ubicom32_cgen_opval_h_DSP_T, { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } } },
+  { "h-DSP-T-addsub", HW_H_DSP_T_ADDSUB, CGEN_ASM_KEYWORD, (PTR) & ubicom32_cgen_opval_h_DSP_T_addsub, { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } } },
+  { "h-DSP-S2-Acc-reg-mul", HW_H_DSP_S2_ACC_REG_MUL, CGEN_ASM_KEYWORD, (PTR) & ubicom32_cgen_opval_acc_names, { 0|A(VIRTUAL), { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } } },
+  { "h-DSP-S2-Acc-reg-addsub", HW_H_DSP_S2_ACC_REG_ADDSUB, CGEN_ASM_KEYWORD, (PTR) & ubicom32_cgen_opval_acc_names, { 0|A(VIRTUAL), { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } } },
+  { "h-sp", HW_H_SP, CGEN_ASM_KEYWORD, (PTR) & ubicom32_cgen_opval_spad_names, { 0|A(VIRTUAL), { { { (1<<MACH_BASE), 0 } } } } },
+  { 0, 0, CGEN_ASM_NONE, 0, { 0, { { { (1<<MACH_BASE), 0 } } } } }
+};
+
+#undef A
+
+
+/* The instruction field table.  */
+
+#if defined (__STDC__) || defined (ALMOST_STDC) || defined (HAVE_STRINGIZE)
+#define A(a) (1 << CGEN_IFLD_##a)
+#else
+#define A(a) (1 << CGEN_IFLD_/**/a)
+#endif
+
+const CGEN_IFLD ubicom32_cgen_ifld_table[] =
+{
+  { UBICOM32_F_NIL, "f-nil", 0, 0, 0, 0, { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+  { UBICOM32_F_ANYOF, "f-anyof", 0, 0, 0, 0, { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+  { UBICOM32_F_D, "f-d", 0, 32, 26, 11, { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+  { UBICOM32_F_D_BIT10, "f-d-bit10", 0, 32, 26, 1, { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+  { UBICOM32_F_D_TYPE, "f-d-type", 0, 32, 25, 2, { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+  { UBICOM32_F_D_R, "f-d-r", 0, 32, 20, 5, { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+  { UBICOM32_F_D_M, "f-d-M", 0, 32, 20, 1, { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+  { UBICOM32_F_D_I4_1, "f-d-i4-1", 0, 32, 19, 4, { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+  { UBICOM32_F_D_I4_2, "f-d-i4-2", 0, 32, 19, 4, { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+  { UBICOM32_F_D_I4_4, "f-d-i4-4", 0, 32, 19, 4, { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+  { UBICOM32_F_D_AN, "f-d-An", 0, 32, 23, 3, { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+  { UBICOM32_F_D_DIRECT, "f-d-direct", 0, 32, 23, 8, { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+  { UBICOM32_F_D_IMM8, "f-d-imm8", 0, 32, 23, 8, { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+  { UBICOM32_F_D_IMM7_T, "f-d-imm7-t", 0, 32, 25, 2, { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+  { UBICOM32_F_D_IMM7_B, "f-d-imm7-b", 0, 32, 20, 5, { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+  { UBICOM32_F_D_IMM7_1, "f-d-imm7-1", 0, 0, 0, 0,{ 0|A(VIRTUAL), { { { (1<<MACH_BASE), 0 } } } }  },
+  { UBICOM32_F_D_IMM7_2, "f-d-imm7-2", 0, 0, 0, 0,{ 0|A(VIRTUAL), { { { (1<<MACH_BASE), 0 } } } }  },
+  { UBICOM32_F_D_IMM7_4, "f-d-imm7-4", 0, 0, 0, 0,{ 0|A(VIRTUAL), { { { (1<<MACH_BASE), 0 } } } }  },
+  { UBICOM32_F_S1, "f-s1", 0, 32, 10, 11, { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+  { UBICOM32_F_S1_BIT10, "f-s1-bit10", 0, 32, 10, 1, { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+  { UBICOM32_F_S1_TYPE, "f-s1-type", 0, 32, 9, 2, { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+  { UBICOM32_F_S1_R, "f-s1-r", 0, 32, 4, 5, { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+  { UBICOM32_F_S1_M, "f-s1-M", 0, 32, 4, 1, { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+  { UBICOM32_F_S1_I4_1, "f-s1-i4-1", 0, 32, 3, 4, { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+  { UBICOM32_F_S1_I4_2, "f-s1-i4-2", 0, 32, 3, 4, { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+  { UBICOM32_F_S1_I4_4, "f-s1-i4-4", 0, 32, 3, 4, { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+  { UBICOM32_F_S1_AN, "f-s1-An", 0, 32, 7, 3, { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+  { UBICOM32_F_S1_DIRECT, "f-s1-direct", 0, 32, 7, 8, { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+  { UBICOM32_F_S1_IMM8, "f-s1-imm8", 0, 32, 7, 8, { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+  { UBICOM32_F_S1_IMM7_T, "f-s1-imm7-t", 0, 32, 9, 2, { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+  { UBICOM32_F_S1_IMM7_B, "f-s1-imm7-b", 0, 32, 4, 5, { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+  { UBICOM32_F_S1_IMM7_1, "f-s1-imm7-1", 0, 0, 0, 0,{ 0|A(VIRTUAL), { { { (1<<MACH_BASE), 0 } } } }  },
+  { UBICOM32_F_S1_IMM7_2, "f-s1-imm7-2", 0, 0, 0, 0,{ 0|A(VIRTUAL), { { { (1<<MACH_BASE), 0 } } } }  },
+  { UBICOM32_F_S1_IMM7_4, "f-s1-imm7-4", 0, 0, 0, 0,{ 0|A(VIRTUAL), { { { (1<<MACH_BASE), 0 } } } }  },
+  { UBICOM32_F_OP1, "f-op1", 0, 32, 31, 5, { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+  { UBICOM32_F_OPMOVEAI, "f-opmoveai", 0, 32, 31, 4, { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+  { UBICOM32_F_OP2, "f-op2", 0, 32, 15, 5, { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+  { UBICOM32_F_BIT26, "f-bit26", 0, 32, 26, 1, { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+  { UBICOM32_F_OPEXT, "f-opext", 0, 32, 25, 5, { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+  { UBICOM32_F_COND, "f-cond", 0, 32, 26, 4, { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+  { UBICOM32_F_IMM16_1, "f-imm16-1", 0, 32, 26, 16, { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+  { UBICOM32_F_IMM16_2, "f-imm16-2", 0, 32, 15, 16, { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+  { UBICOM32_F_O21, "f-o21", 0, 32, 20, 21, { 0|A(PCREL_ADDR), { { { (1<<MACH_BASE), 0 } } } }  },
+  { UBICOM32_F_O23_21, "f-o23-21", 0, 32, 26, 3, { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+  { UBICOM32_F_O20_0, "f-o20-0", 0, 32, 20, 21, { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+  { UBICOM32_F_O24, "f-o24", 0, 0, 0, 0,{ 0|A(PCREL_ADDR)|A(VIRTUAL), { { { (1<<MACH_BASE), 0 } } } }  },
+  { UBICOM32_F_IMM23_21, "f-imm23-21", 0, 32, 26, 3, { 0, { { { (1<<MACH_UBICOM32_OLDMOVEAI), 0 } } } }  },
+  { UBICOM32_F_IMM24, "f-imm24", 0, 0, 0, 0,{ 0|A(VIRTUAL), { { { (1<<MACH_UBICOM32_OLDMOVEAI), 0 } } } }  },
+  { UBICOM32_F_IMM24_21, "f-imm24-21", 0, 32, 27, 4, { 0, { { { (1<<MACH_UBICOM32_NEWMOVEAI), 0 } } } }  },
+  { UBICOM32_F_IMM25, "f-imm25", 0, 0, 0, 0,{ 0|A(VIRTUAL), { { { (1<<MACH_UBICOM32_NEWMOVEAI), 0 } } } }  },
+  { UBICOM32_F_O15_13, "f-o15-13", 0, 32, 26, 3, { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+  { UBICOM32_F_O12_8, "f-o12-8", 0, 32, 20, 5, { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+  { UBICOM32_F_O7_5, "f-o7-5", 0, 32, 10, 3, { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+  { UBICOM32_F_O4_0, "f-o4-0", 0, 32, 4, 5, { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+  { UBICOM32_F_O16, "f-o16", 0, 0, 0, 0,{ 0|A(VIRTUAL), { { { (1<<MACH_BASE), 0 } } } }  },
+  { UBICOM32_F_AN, "f-An", 0, 32, 23, 3, { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+  { UBICOM32_F_AM, "f-Am", 0, 32, 7, 3, { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+  { UBICOM32_F_DN, "f-Dn", 0, 32, 20, 5, { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+  { UBICOM32_F_BIT5, "f-bit5", 0, 32, 15, 5, { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+  { UBICOM32_F_P, "f-P", 0, 32, 22, 1, { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+  { UBICOM32_F_C, "f-C", 0, 32, 21, 1, { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+  { UBICOM32_F_INT, "f-int", 0, 32, 5, 6, { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+  { UBICOM32_F_DSP_C, "f-dsp-C", 0, 32, 20, 1, { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }  },
+  { UBICOM32_F_DSP_T, "f-dsp-T", 0, 32, 19, 1, { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }  },
+  { UBICOM32_F_DSP_S2_SEL, "f-dsp-S2-sel", 0, 32, 18, 1, { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }  },
+  { UBICOM32_F_DSP_R, "f-dsp-R", 0, 32, 17, 1, { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }  },
+  { UBICOM32_F_DSP_DESTA, "f-dsp-destA", 0, 32, 16, 1, { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }  },
+  { UBICOM32_F_DSP_B15, "f-dsp-b15", 0, 32, 15, 1, { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }  },
+  { UBICOM32_F_DSP_S2, "f-dsp-S2", 0, 32, 14, 4, { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }  },
+  { UBICOM32_F_DSP_J, "f-dsp-J", 0, 32, 26, 1, { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }  },
+  { UBICOM32_F_S2, "f-s2", 0, 32, 14, 4, { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+  { UBICOM32_F_B15, "f-b15", 0, 32, 15, 1, { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+  { 0, 0, 0, 0, 0, 0, { 0, { { { (1<<MACH_BASE), 0 } } } } }
+};
+
+#undef A
+
+
+
+/* multi ifield declarations */
+
+const CGEN_MAYBE_MULTI_IFLD UBICOM32_F_D_IMM7_1_MULTI_IFIELD [];
+const CGEN_MAYBE_MULTI_IFLD UBICOM32_F_D_IMM7_2_MULTI_IFIELD [];
+const CGEN_MAYBE_MULTI_IFLD UBICOM32_F_D_IMM7_4_MULTI_IFIELD [];
+const CGEN_MAYBE_MULTI_IFLD UBICOM32_F_S1_IMM7_1_MULTI_IFIELD [];
+const CGEN_MAYBE_MULTI_IFLD UBICOM32_F_S1_IMM7_2_MULTI_IFIELD [];
+const CGEN_MAYBE_MULTI_IFLD UBICOM32_F_S1_IMM7_4_MULTI_IFIELD [];
+const CGEN_MAYBE_MULTI_IFLD UBICOM32_F_O24_MULTI_IFIELD [];
+const CGEN_MAYBE_MULTI_IFLD UBICOM32_F_IMM24_MULTI_IFIELD [];
+const CGEN_MAYBE_MULTI_IFLD UBICOM32_F_IMM25_MULTI_IFIELD [];
+const CGEN_MAYBE_MULTI_IFLD UBICOM32_F_O16_MULTI_IFIELD [];
+
+
+/* multi ifield definitions */
+
+const CGEN_MAYBE_MULTI_IFLD UBICOM32_F_D_IMM7_1_MULTI_IFIELD [] =
+{
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_D_IMM7_T] } },
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_D_IMM7_B] } },
+    { 0, { (const PTR) 0 } }
+};
+const CGEN_MAYBE_MULTI_IFLD UBICOM32_F_D_IMM7_2_MULTI_IFIELD [] =
+{
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_D_IMM7_T] } },
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_D_IMM7_B] } },
+    { 0, { (const PTR) 0 } }
+};
+const CGEN_MAYBE_MULTI_IFLD UBICOM32_F_D_IMM7_4_MULTI_IFIELD [] =
+{
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_D_IMM7_T] } },
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_D_IMM7_B] } },
+    { 0, { (const PTR) 0 } }
+};
+const CGEN_MAYBE_MULTI_IFLD UBICOM32_F_S1_IMM7_1_MULTI_IFIELD [] =
+{
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_S1_IMM7_T] } },
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_S1_IMM7_B] } },
+    { 0, { (const PTR) 0 } }
+};
+const CGEN_MAYBE_MULTI_IFLD UBICOM32_F_S1_IMM7_2_MULTI_IFIELD [] =
+{
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_S1_IMM7_T] } },
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_S1_IMM7_B] } },
+    { 0, { (const PTR) 0 } }
+};
+const CGEN_MAYBE_MULTI_IFLD UBICOM32_F_S1_IMM7_4_MULTI_IFIELD [] =
+{
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_S1_IMM7_T] } },
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_S1_IMM7_B] } },
+    { 0, { (const PTR) 0 } }
+};
+const CGEN_MAYBE_MULTI_IFLD UBICOM32_F_O24_MULTI_IFIELD [] =
+{
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_O23_21] } },
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_O20_0] } },
+    { 0, { (const PTR) 0 } }
+};
+const CGEN_MAYBE_MULTI_IFLD UBICOM32_F_IMM24_MULTI_IFIELD [] =
+{
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_IMM23_21] } },
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_O20_0] } },
+    { 0, { (const PTR) 0 } }
+};
+const CGEN_MAYBE_MULTI_IFLD UBICOM32_F_IMM25_MULTI_IFIELD [] =
+{
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_IMM24_21] } },
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_O20_0] } },
+    { 0, { (const PTR) 0 } }
+};
+const CGEN_MAYBE_MULTI_IFLD UBICOM32_F_O16_MULTI_IFIELD [] =
+{
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_O15_13] } },
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_O12_8] } },
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_O7_5] } },
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_O4_0] } },
+    { 0, { (const PTR) 0 } }
+};
+
+/* The operand table.  */
+
+#if defined (__STDC__) || defined (ALMOST_STDC) || defined (HAVE_STRINGIZE)
+#define A(a) (1 << CGEN_OPERAND_##a)
+#else
+#define A(a) (1 << CGEN_OPERAND_/**/a)
+#endif
+#if defined (__STDC__) || defined (ALMOST_STDC) || defined (HAVE_STRINGIZE)
+#define OPERAND(op) UBICOM32_OPERAND_##op
+#else
+#define OPERAND(op) UBICOM32_OPERAND_/**/op
+#endif
+
+const CGEN_OPERAND ubicom32_cgen_operand_table[] =
+{
+/* pc: program counter */
+  { "pc", UBICOM32_OPERAND_PC, HW_H_PC, 0, 0,
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_NIL] } }, 
+    { 0|A(SEM_ONLY), { { { (1<<MACH_BASE), 0 } } } }  },
+/* s2: s2 register for op3 */
+  { "s2", UBICOM32_OPERAND_S2, HW_H_DR, 14, 4,
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_S2] } }, 
+    { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+/* src3: src-3 register */
+  { "src3", UBICOM32_OPERAND_SRC3, HW_H_SRC_3, 0, 0,
+    { 0, { (const PTR) 0 } }, 
+    { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+/* offset24: 24-bit relative word offset */
+  { "offset24", UBICOM32_OPERAND_OFFSET24, HW_H_IADDR, 20, 24,
+    { 2, { (const PTR) &UBICOM32_F_O24_MULTI_IFIELD[0] } }, 
+    { 0|A(PCREL_ADDR)|A(VIRTUAL), { { { (1<<MACH_BASE), 0 } } } }  },
+/* An: An register for call */
+  { "An", UBICOM32_OPERAND_AN, HW_H_AR, 23, 3,
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_AN] } }, 
+    { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+/* cc: condition code */
+  { "cc", UBICOM32_OPERAND_CC, HW_H_CC, 26, 4,
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_COND] } }, 
+    { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+/* C: condition code select bits */
+  { "C", UBICOM32_OPERAND_C, HW_H_C, 21, 1,
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_C] } }, 
+    { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+/* P: prediction bit */
+  { "P", UBICOM32_OPERAND_P, HW_H_P, 22, 1,
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_P] } }, 
+    { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+/* Am: Am register for calli */
+  { "Am", UBICOM32_OPERAND_AM, HW_H_AR, 7, 3,
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_AM] } }, 
+    { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+/* Dn: Dn reg for mac/mulu/mulf */
+  { "Dn", UBICOM32_OPERAND_DN, HW_H_DR, 20, 5,
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_DN] } }, 
+    { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+/* interrupt: interrupt code */
+  { "interrupt", UBICOM32_OPERAND_INTERRUPT, HW_H_UINT, 5, 6,
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_INT] } }, 
+    { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+/* imm16-1: 16 bit immediate for cmpi */
+  { "imm16-1", UBICOM32_OPERAND_IMM16_1, HW_H_SINT, 26, 16,
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_IMM16_1] } }, 
+    { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+/* x-op2: ignored secondary opcode */
+  { "x-op2", UBICOM32_OPERAND_X_OP2, HW_H_UINT, 15, 5,
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_OP2] } }, 
+    { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+/* x-bit26: ignored bit 26 */
+  { "x-bit26", UBICOM32_OPERAND_X_BIT26, HW_H_UINT, 26, 1,
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_BIT26] } }, 
+    { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+/* x-s1: ignored s1 operand */
+  { "x-s1", UBICOM32_OPERAND_X_S1, HW_H_UINT, 10, 11,
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_S1] } }, 
+    { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+/* x-d: ignored d operand */
+  { "x-d", UBICOM32_OPERAND_X_D, HW_H_UINT, 26, 11,
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_D] } }, 
+    { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+/* x-dn: ignored dn operand */
+  { "x-dn", UBICOM32_OPERAND_X_DN, HW_H_UINT, 20, 5,
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_DN] } }, 
+    { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+/* machi: mac hi register */
+  { "machi", UBICOM32_OPERAND_MACHI, HW_H_MAC_HI, 0, 0,
+    { 0, { (const PTR) 0 } }, 
+    { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+/* maclo: mac lo register */
+  { "maclo", UBICOM32_OPERAND_MACLO, HW_H_MAC_LO, 0, 0,
+    { 0, { (const PTR) 0 } }, 
+    { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+/* acc1hi: acc1 hi register */
+  { "acc1hi", UBICOM32_OPERAND_ACC1HI, HW_H_ACC1_HI, 0, 0,
+    { 0, { (const PTR) 0 } }, 
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }  },
+/* acc1lo: acc1 lo register */
+  { "acc1lo", UBICOM32_OPERAND_ACC1LO, HW_H_ACC1_LO, 0, 0,
+    { 0, { (const PTR) 0 } }, 
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }  },
+/* irq-0: irq status register 0 */
+  { "irq-0", UBICOM32_OPERAND_IRQ_0, HW_H_IRQ_STATUS_0, 0, 0,
+    { 0, { (const PTR) 0 } }, 
+    { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+/* irq-1: irq status register 1 */
+  { "irq-1", UBICOM32_OPERAND_IRQ_1, HW_H_IRQ_STATUS_1, 0, 0,
+    { 0, { (const PTR) 0 } }, 
+    { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+/* iread: iread register */
+  { "iread", UBICOM32_OPERAND_IREAD, HW_H_IREAD, 0, 0,
+    { 0, { (const PTR) 0 } }, 
+    { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+/* opc1: primary opcode */
+  { "opc1", UBICOM32_OPERAND_OPC1, HW_H_UINT, 31, 5,
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_OP1] } }, 
+    { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+/* opc2: secondary opcode */
+  { "opc2", UBICOM32_OPERAND_OPC2, HW_H_UINT, 15, 5,
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_OP2] } }, 
+    { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+/* An-inc: An pre/post inc flag */
+  { "An-inc", UBICOM32_OPERAND_AN_INC, HW_H_AR_INC_FLAG, 0, 0,
+    { 0, { (const PTR) 0 } }, 
+    { 0|A(SEM_ONLY), { { { (1<<MACH_BASE), 0 } } } }  },
+/* dsp-c: DSP Clip bit */
+  { "dsp-c", UBICOM32_OPERAND_DSP_C, HW_H_DSP_C, 20, 1,
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_DSP_C] } }, 
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }  },
+/* dsp-t: DSP Top Half bit */
+  { "dsp-t", UBICOM32_OPERAND_DSP_T, HW_H_DSP_T, 19, 1,
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_DSP_T] } }, 
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }  },
+/* dsp-destA: DSP Destination Acc Sel */
+  { "dsp-destA", UBICOM32_OPERAND_DSP_DESTA, HW_H_DSP_DEST_A, 16, 1,
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_DSP_DESTA] } }, 
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }  },
+/* dsp-S2-sel: DSP S2 reg Select */
+  { "dsp-S2-sel", UBICOM32_OPERAND_DSP_S2_SEL, HW_H_UINT, 18, 1,
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_DSP_S2_SEL] } }, 
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }  },
+/* dsp-S2-data-reg: DSP S2 is a data reg  */
+  { "dsp-S2-data-reg", UBICOM32_OPERAND_DSP_S2_DATA_REG, HW_H_DR, 14, 4,
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_DSP_S2] } }, 
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }  },
+/* dsp-S2-acc-reg-mul: DSP S2 reg is a  Acc Lo reg */
+  { "dsp-S2-acc-reg-mul", UBICOM32_OPERAND_DSP_S2_ACC_REG_MUL, HW_H_DSP_S2_ACC_REG_MUL, 14, 4,
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_DSP_S2] } }, 
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }  },
+/* dsp-S2-acc-reg-addsub: DSP S2 reg is a  Acc reg for madd and msuub */
+  { "dsp-S2-acc-reg-addsub", UBICOM32_OPERAND_DSP_S2_ACC_REG_ADDSUB, HW_H_DSP_S2_ACC_REG_ADDSUB, 14, 4,
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_DSP_S2] } }, 
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }  },
+/* dsp-S2-data-reg-addsub: DSP S2 reg is a data reg for madd and msuub */
+  { "dsp-S2-data-reg-addsub", UBICOM32_OPERAND_DSP_S2_DATA_REG_ADDSUB, HW_H_DR, 14, 4,
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_DSP_S2] } }, 
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }  },
+/* dsp-t-addsub: DSP Top Half spec for madd.2 and msub.2 */
+  { "dsp-t-addsub", UBICOM32_OPERAND_DSP_T_ADDSUB, HW_H_DSP_T_ADDSUB, 19, 1,
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_DSP_T] } }, 
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }  },
+/* bit5: immediate bit index */
+  { "bit5", UBICOM32_OPERAND_BIT5, HW_H_UINT, 15, 5,
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_BIT5] } }, 
+    { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+/* bit5-addsub: immediate bit index */
+  { "bit5-addsub", UBICOM32_OPERAND_BIT5_ADDSUB, HW_H_UINT, 15, 5,
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_BIT5] } }, 
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }  },
+/* dsp-src2-reg-acc-reg-mul:  */
+/* dsp-src2-reg-acc-reg-addsub:  */
+/* dsp-src2-data-reg:  */
+/* dsp-src2-data-reg-addsub:  */
+/* dsp-src2-data-reg-addsub2:  */
+/* dsp-imm-bit5:  */
+/* dsp-imm-bit5-addsub:  */
+/* dsp-imm-bit5-addsub2:  */
+/* imm-bit5:  */
+/* dyn-reg:  */
+/* op3: 5-bit immediate value or dynamic register specification */
+/* dsp-src2-mul: Data register or accumulator lo register specification */
+/* dsp-compatibility-src2-mul: Data register or accumulator lo register specification */
+/* dsp-src2-addsub: Data register or accumulator register specification for madd msub instructions */
+/* dsp-src2-addsub2: Data register or accumulator register specification for madd msub instructions */
+/* offset21: 21-bit relative offset */
+  { "offset21", UBICOM32_OPERAND_OFFSET21, HW_H_IADDR, 20, 21,
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_O21] } }, 
+    { 0|A(PCREL_ADDR), { { { (1<<MACH_BASE), 0 } } } }  },
+/* offset16: 16-bit calli offset */
+  { "offset16", UBICOM32_OPERAND_OFFSET16, HW_H_SINT, 4, 16,
+    { 4, { (const PTR) &UBICOM32_F_O16_MULTI_IFIELD[0] } }, 
+    { 0|A(VIRTUAL), { { { (1<<MACH_BASE), 0 } } } }  },
+/* imm24: 24-bit immediate */
+  { "imm24", UBICOM32_OPERAND_IMM24, HW_H_UINT, 20, 24,
+    { 2, { (const PTR) &UBICOM32_F_IMM24_MULTI_IFIELD[0] } }, 
+    { 0|A(VIRTUAL), { { { (1<<MACH_UBICOM32_OLDMOVEAI), 0 } } } }  },
+/* imm25: 25-bit immediate */
+  { "imm25", UBICOM32_OPERAND_IMM25, HW_H_UINT, 20, 25,
+    { 2, { (const PTR) &UBICOM32_F_IMM25_MULTI_IFIELD[0] } }, 
+    { 0|A(VIRTUAL), { { { (1<<MACH_UBICOM32_NEWMOVEAI), 0 } } } }  },
+/* nbit-16: 16-bit negative    bit */
+  { "nbit-16", UBICOM32_OPERAND_NBIT_16, HW_H_NBIT_16, 0, 0,
+    { 0, { (const PTR) 0 } }, 
+    { 0|A(SEM_ONLY), { { { (1<<MACH_BASE), 0 } } } }  },
+/* vbit-16: 16-bit overflow    bit */
+  { "vbit-16", UBICOM32_OPERAND_VBIT_16, HW_H_VBIT_16, 0, 0,
+    { 0, { (const PTR) 0 } }, 
+    { 0|A(SEM_ONLY), { { { (1<<MACH_BASE), 0 } } } }  },
+/* zbit-16: 16-bit zero        bit */
+  { "zbit-16", UBICOM32_OPERAND_ZBIT_16, HW_H_ZBIT_16, 0, 0,
+    { 0, { (const PTR) 0 } }, 
+    { 0|A(SEM_ONLY), { { { (1<<MACH_BASE), 0 } } } }  },
+/* cbit-16: 16-bit carry       bit */
+  { "cbit-16", UBICOM32_OPERAND_CBIT_16, HW_H_CBIT_16, 0, 0,
+    { 0, { (const PTR) 0 } }, 
+    { 0|A(SEM_ONLY), { { { (1<<MACH_BASE), 0 } } } }  },
+/* nbit-32: 32-bit negative    bit */
+  { "nbit-32", UBICOM32_OPERAND_NBIT_32, HW_H_NBIT_32, 0, 0,
+    { 0, { (const PTR) 0 } }, 
+    { 0|A(SEM_ONLY), { { { (1<<MACH_BASE), 0 } } } }  },
+/* vbit-32: 32-bit overflow    bit */
+  { "vbit-32", UBICOM32_OPERAND_VBIT_32, HW_H_VBIT_32, 0, 0,
+    { 0, { (const PTR) 0 } }, 
+    { 0|A(SEM_ONLY), { { { (1<<MACH_BASE), 0 } } } }  },
+/* zbit-32: 32-bit zero        bit */
+  { "zbit-32", UBICOM32_OPERAND_ZBIT_32, HW_H_ZBIT_32, 0, 0,
+    { 0, { (const PTR) 0 } }, 
+    { 0|A(SEM_ONLY), { { { (1<<MACH_BASE), 0 } } } }  },
+/* cbit-32: 32-bit carry       bit */
+  { "cbit-32", UBICOM32_OPERAND_CBIT_32, HW_H_CBIT_32, 0, 0,
+    { 0, { (const PTR) 0 } }, 
+    { 0|A(SEM_ONLY), { { { (1<<MACH_BASE), 0 } } } }  },
+/* privilege-bit: Privilege bit from CSR */
+  { "privilege-bit", UBICOM32_OPERAND_PRIVILEGE_BIT, HW_H_PRIVBIT, 0, 0,
+    { 0, { (const PTR) 0 } }, 
+    { 0|A(SEM_ONLY), { { { (1<<MACH_BASE), 0 } } } }  },
+/* prev-privilege-bit: Previous Privilege bit from CSR */
+  { "prev-privilege-bit", UBICOM32_OPERAND_PREV_PRIVILEGE_BIT, HW_H_PREV_PRIVBIT, 0, 0,
+    { 0, { (const PTR) 0 } }, 
+    { 0|A(SEM_ONLY), { { { (1<<MACH_BASE), 0 } } } }  },
+/* s1-imm7-1: 7-bit immediate byte */
+  { "s1-imm7-1", UBICOM32_OPERAND_S1_IMM7_1, HW_H_UINT, 4, 7,
+    { 2, { (const PTR) &UBICOM32_F_S1_IMM7_1_MULTI_IFIELD[0] } }, 
+    { 0|A(VIRTUAL), { { { (1<<MACH_BASE), 0 } } } }  },
+/* s1-imm7-2: 7-bit immediate halfword */
+  { "s1-imm7-2", UBICOM32_OPERAND_S1_IMM7_2, HW_H_UINT, 4, 7,
+    { 2, { (const PTR) &UBICOM32_F_S1_IMM7_2_MULTI_IFIELD[0] } }, 
+    { 0|A(VIRTUAL), { { { (1<<MACH_BASE), 0 } } } }  },
+/* s1-imm7-4: 7-bit immediate word */
+  { "s1-imm7-4", UBICOM32_OPERAND_S1_IMM7_4, HW_H_UINT, 4, 7,
+    { 2, { (const PTR) &UBICOM32_F_S1_IMM7_4_MULTI_IFIELD[0] } }, 
+    { 0|A(VIRTUAL), { { { (1<<MACH_BASE), 0 } } } }  },
+/* pdec-s1-imm7-4: 7-bit immediate word for pdec */
+  { "pdec-s1-imm7-4", UBICOM32_OPERAND_PDEC_S1_IMM7_4, HW_H_UINT, 4, 7,
+    { 2, { (const PTR) &UBICOM32_F_S1_IMM7_4_MULTI_IFIELD[0] } }, 
+    { 0|A(VIRTUAL), { { { (1<<MACH_BASE), 0 } } } }  },
+/* s1-imm8: 8-bit signed immediate */
+  { "s1-imm8", UBICOM32_OPERAND_S1_IMM8, HW_H_SINT, 7, 8,
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_S1_IMM8] } }, 
+    { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+/* s1-An: s1 address register */
+  { "s1-An", UBICOM32_OPERAND_S1_AN, HW_H_AR, 7, 3,
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_S1_AN] } }, 
+    { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+/* s1-r: s1 index register */
+  { "s1-r", UBICOM32_OPERAND_S1_R, HW_H_S1_DR, 4, 5,
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_S1_R] } }, 
+    { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+/* s1-An-inc: s1 An register pre/post inc */
+  { "s1-An-inc", UBICOM32_OPERAND_S1_AN_INC, HW_H_AR_INC, 7, 3,
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_S1_AN] } }, 
+    { 0|A(SEM_ONLY), { { { (1<<MACH_BASE), 0 } } } }  },
+/* s1-i4-1: 4 bit signed-immediate value */
+  { "s1-i4-1", UBICOM32_OPERAND_S1_I4_1, HW_H_SINT, 3, 4,
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_S1_I4_1] } }, 
+    { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+/* s1-i4-2: 4 bit signed-immediate value */
+  { "s1-i4-2", UBICOM32_OPERAND_S1_I4_2, HW_H_SINT, 3, 4,
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_S1_I4_2] } }, 
+    { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+/* s1-i4-4: 4 bit signed-immediate value */
+  { "s1-i4-4", UBICOM32_OPERAND_S1_I4_4, HW_H_SINT, 3, 4,
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_S1_I4_4] } }, 
+    { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+/* s1-indirect-1:  */
+/* s1-indirect-2:  */
+/* s1-indirect-4:  */
+/* s1-indirect-with-offset-1:  */
+/* s1-indirect-with-offset-2:  */
+/* s1-indirect-with-offset-4:  */
+/* s1-indirect-with-index-1:  */
+/* s1-indirect-with-index-2:  */
+/* s1-indirect-with-index-4:  */
+/* s1-indirect-with-post-increment-1:  */
+/* s1-indirect-with-post-increment-2:  */
+/* s1-indirect-with-post-increment-4:  */
+/* s1-indirect-with-pre-increment-1:  */
+/* s1-indirect-with-pre-increment-2:  */
+/* s1-indirect-with-pre-increment-4:  */
+/* s1-direct-addr: s1 direct address */
+  { "s1-direct-addr", UBICOM32_OPERAND_S1_DIRECT_ADDR, HW_H_UINT, 7, 8,
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_S1_DIRECT] } }, 
+    { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+/* s1-direct:  */
+/* s1-immediate:  */
+/* s1-1: source 1 operand 1 */
+/* s1-2: source 1 operand 2 */
+/* s1-4: source 1 operand 4 */
+/* s1-ea-indirect:  */
+/* s1-ea-indirect-with-offset-1:  */
+/* s1-ea-indirect-with-offset-2:  */
+/* s1-ea-indirect-with-offset-4:  */
+/* s1-ea-indirect-with-index-1:  */
+/* s1-ea-indirect-with-index-2:  */
+/* s1-ea-indirect-with-index-4:  */
+/* s1-ea-indirect-with-post-increment-1:  */
+/* s1-ea-indirect-with-post-increment-2:  */
+/* s1-ea-indirect-with-post-increment-4:  */
+/* s1-ea-indirect-with-pre-increment-1:  */
+/* s1-ea-indirect-with-pre-increment-2:  */
+/* s1-ea-indirect-with-pre-increment-4:  */
+/* s1-ea-immediate:  */
+/* s1-ea-direct:  */
+/* s1-ea-1: source 1 ea operand */
+/* s1-ea-2: source 1 ea operand */
+/* s1-ea-4: source 1 ea operand */
+/* s1-pea: source 1 pea operand */
+/* pdec-s1-ea-indirect-with-offset-4:  */
+/* pdec-pea-s1: source 1 pea operand for pdec instruction */
+/* d-imm7-1: 7-bit immediate byte */
+  { "d-imm7-1", UBICOM32_OPERAND_D_IMM7_1, HW_H_UINT, 20, 7,
+    { 2, { (const PTR) &UBICOM32_F_D_IMM7_1_MULTI_IFIELD[0] } }, 
+    { 0|A(VIRTUAL), { { { (1<<MACH_BASE), 0 } } } }  },
+/* d-imm7-2: 7-bit immediate halfword */
+  { "d-imm7-2", UBICOM32_OPERAND_D_IMM7_2, HW_H_UINT, 20, 7,
+    { 2, { (const PTR) &UBICOM32_F_D_IMM7_2_MULTI_IFIELD[0] } }, 
+    { 0|A(VIRTUAL), { { { (1<<MACH_BASE), 0 } } } }  },
+/* d-imm7-4: 7-bit immediate word */
+  { "d-imm7-4", UBICOM32_OPERAND_D_IMM7_4, HW_H_UINT, 20, 7,
+    { 2, { (const PTR) &UBICOM32_F_D_IMM7_4_MULTI_IFIELD[0] } }, 
+    { 0|A(VIRTUAL), { { { (1<<MACH_BASE), 0 } } } }  },
+/* d-imm8: 8-bit signed immediate */
+  { "d-imm8", UBICOM32_OPERAND_D_IMM8, HW_H_SINT, 23, 8,
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_D_IMM8] } }, 
+    { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+/* d-An: d address register */
+  { "d-An", UBICOM32_OPERAND_D_AN, HW_H_AR, 23, 3,
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_D_AN] } }, 
+    { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+/* d-r: d index register */
+  { "d-r", UBICOM32_OPERAND_D_R, HW_H_DR, 20, 5,
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_D_R] } }, 
+    { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+/* d-An-inc: d An register pre/post inc */
+  { "d-An-inc", UBICOM32_OPERAND_D_AN_INC, HW_H_AR_INC, 23, 3,
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_D_AN] } }, 
+    { 0|A(SEM_ONLY), { { { (1<<MACH_BASE), 0 } } } }  },
+/* d-i4-1: 4 bit signed-immediate value */
+  { "d-i4-1", UBICOM32_OPERAND_D_I4_1, HW_H_SINT, 19, 4,
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_D_I4_1] } }, 
+    { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+/* d-i4-2: 4 bit signed-immediate value */
+  { "d-i4-2", UBICOM32_OPERAND_D_I4_2, HW_H_SINT, 19, 4,
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_D_I4_2] } }, 
+    { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+/* d-i4-4: 4 bit signed-immediate value */
+  { "d-i4-4", UBICOM32_OPERAND_D_I4_4, HW_H_SINT, 19, 4,
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_D_I4_4] } }, 
+    { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+/* d-indirect-1:  */
+/* d-indirect-2:  */
+/* d-indirect-4:  */
+/* d-indirect-with-offset-1:  */
+/* d-indirect-with-offset-2:  */
+/* d-indirect-with-offset-4:  */
+/* d-indirect-with-index-1:  */
+/* d-indirect-with-index-2:  */
+/* d-indirect-with-index-4:  */
+/* d-indirect-with-post-increment-1:  */
+/* d-indirect-with-post-increment-2:  */
+/* d-indirect-with-post-increment-4:  */
+/* d-indirect-with-pre-increment-1:  */
+/* d-indirect-with-pre-increment-2:  */
+/* d-indirect-with-pre-increment-4:  */
+/* d-direct-addr: dest direct address */
+  { "d-direct-addr", UBICOM32_OPERAND_D_DIRECT_ADDR, HW_H_UINT, 23, 8,
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_D_DIRECT] } }, 
+    { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+/* d-direct:  */
+/* d-immediate-1:  */
+/* d-immediate-2:  */
+/* d-immediate-4:  */
+/* d-1: destination operand 1 */
+/* d-2: destination operand 2 */
+/* d-4: destination operand 4 */
+/* d-pea-indirect:  */
+/* d-pea-indirect-with-offset:  */
+/* d-pea-indirect-with-post-increment:  */
+/* d-pea-indirect-with-pre-increment:  */
+/* d-pea-indirect-with-index:  */
+/* d-pea: destination 1 pea operand */
+/* imm16-2: 16 bit immediate, for movei */
+  { "imm16-2", UBICOM32_OPERAND_IMM16_2, HW_H_SINT, 15, 16,
+    { 0, { (const PTR) &ubicom32_cgen_ifld_table[UBICOM32_F_IMM16_2] } }, 
+    { 0, { { { (1<<MACH_BASE), 0 } } } }  },
+/* sentinel */
+  { 0, 0, 0, 0, 0,
+    { 0, { (const PTR) 0 } },
+    { 0, { { { (1<<MACH_BASE), 0 } } } } }
+};
+
+#undef A
+
+
+/* The instruction table.  */
+
+#define OP(field) CGEN_SYNTAX_MAKE_FIELD (OPERAND (field))
+#if defined (__STDC__) || defined (ALMOST_STDC) || defined (HAVE_STRINGIZE)
+#define A(a) (1 << CGEN_INSN_##a)
+#else
+#define A(a) (1 << CGEN_INSN_/**/a)
+#endif
+
+static const CGEN_IBASE ubicom32_cgen_insn_table[MAX_INSNS] =
+{
+  /* Special null first entry.
+     A `num' value of zero is thus invalid.
+     Also, the special `invalid' insn resides here.  */
+  { 0, 0, 0, 0, { 0, { { { (1<<MACH_BASE), 0 } } } } },
+/* msub.2${dsp-c}${dsp-t-addsub} ${dsp-destA},${s1-direct-addr},${dsp-S2-data-reg-addsub} */
+  {
+    UBICOM32_INSN_DSP_MSUB_2_S1_DIRECT_DSP_SRC2_DATA_REG_ADDSUB2, "dsp-msub.2-s1-direct-dsp-src2-data-reg-addsub2", "msub.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msub.2${dsp-c}${dsp-t-addsub} ${dsp-destA},#${s1-imm8},${dsp-S2-data-reg-addsub} */
+  {
+    UBICOM32_INSN_DSP_MSUB_2_S1_IMMEDIATE_DSP_SRC2_DATA_REG_ADDSUB2, "dsp-msub.2-s1-immediate-dsp-src2-data-reg-addsub2", "msub.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msub.2${dsp-c}${dsp-t-addsub} ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-data-reg-addsub} */
+  {
+    UBICOM32_INSN_DSP_MSUB_2_S1_INDIRECT_WITH_INDEX_2_DSP_SRC2_DATA_REG_ADDSUB2, "dsp-msub.2-s1-indirect-with-index-2-dsp-src2-data-reg-addsub2", "msub.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msub.2${dsp-c}${dsp-t-addsub} ${dsp-destA},${s1-imm7-2}(${s1-An}),${dsp-S2-data-reg-addsub} */
+  {
+    UBICOM32_INSN_DSP_MSUB_2_S1_INDIRECT_WITH_OFFSET_2_DSP_SRC2_DATA_REG_ADDSUB2, "dsp-msub.2-s1-indirect-with-offset-2-dsp-src2-data-reg-addsub2", "msub.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msub.2${dsp-c}${dsp-t-addsub} ${dsp-destA},(${s1-An}),${dsp-S2-data-reg-addsub} */
+  {
+    UBICOM32_INSN_DSP_MSUB_2_S1_INDIRECT_2_DSP_SRC2_DATA_REG_ADDSUB2, "dsp-msub.2-s1-indirect-2-dsp-src2-data-reg-addsub2", "msub.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msub.2${dsp-c}${dsp-t-addsub} ${dsp-destA},(${s1-An})${s1-i4-2}++,${dsp-S2-data-reg-addsub} */
+  {
+    UBICOM32_INSN_DSP_MSUB_2_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_SRC2_DATA_REG_ADDSUB2, "dsp-msub.2-s1-indirect-with-post-increment-2-dsp-src2-data-reg-addsub2", "msub.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msub.2${dsp-c}${dsp-t-addsub} ${dsp-destA},${s1-i4-2}(${s1-An})++,${dsp-S2-data-reg-addsub} */
+  {
+    UBICOM32_INSN_DSP_MSUB_2_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_SRC2_DATA_REG_ADDSUB2, "dsp-msub.2-s1-indirect-with-pre-increment-2-dsp-src2-data-reg-addsub2", "msub.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msub.2${dsp-c}${dsp-t-addsub} ${dsp-destA},${s1-direct-addr},${dsp-S2-acc-reg-addsub} */
+  {
+    UBICOM32_INSN_DSP_MSUB_2_S1_DIRECT_DSP_SRC2_REG_ACC_REG_ADDSUB, "dsp-msub.2-s1-direct-dsp-src2-reg-acc-reg-addsub", "msub.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msub.2${dsp-c}${dsp-t-addsub} ${dsp-destA},#${s1-imm8},${dsp-S2-acc-reg-addsub} */
+  {
+    UBICOM32_INSN_DSP_MSUB_2_S1_IMMEDIATE_DSP_SRC2_REG_ACC_REG_ADDSUB, "dsp-msub.2-s1-immediate-dsp-src2-reg-acc-reg-addsub", "msub.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msub.2${dsp-c}${dsp-t-addsub} ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-acc-reg-addsub} */
+  {
+    UBICOM32_INSN_DSP_MSUB_2_S1_INDIRECT_WITH_INDEX_2_DSP_SRC2_REG_ACC_REG_ADDSUB, "dsp-msub.2-s1-indirect-with-index-2-dsp-src2-reg-acc-reg-addsub", "msub.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msub.2${dsp-c}${dsp-t-addsub} ${dsp-destA},${s1-imm7-2}(${s1-An}),${dsp-S2-acc-reg-addsub} */
+  {
+    UBICOM32_INSN_DSP_MSUB_2_S1_INDIRECT_WITH_OFFSET_2_DSP_SRC2_REG_ACC_REG_ADDSUB, "dsp-msub.2-s1-indirect-with-offset-2-dsp-src2-reg-acc-reg-addsub", "msub.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msub.2${dsp-c}${dsp-t-addsub} ${dsp-destA},(${s1-An}),${dsp-S2-acc-reg-addsub} */
+  {
+    UBICOM32_INSN_DSP_MSUB_2_S1_INDIRECT_2_DSP_SRC2_REG_ACC_REG_ADDSUB, "dsp-msub.2-s1-indirect-2-dsp-src2-reg-acc-reg-addsub", "msub.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msub.2${dsp-c}${dsp-t-addsub} ${dsp-destA},(${s1-An})${s1-i4-2}++,${dsp-S2-acc-reg-addsub} */
+  {
+    UBICOM32_INSN_DSP_MSUB_2_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_SRC2_REG_ACC_REG_ADDSUB, "dsp-msub.2-s1-indirect-with-post-increment-2-dsp-src2-reg-acc-reg-addsub", "msub.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msub.2${dsp-c}${dsp-t-addsub} ${dsp-destA},${s1-i4-2}(${s1-An})++,${dsp-S2-acc-reg-addsub} */
+  {
+    UBICOM32_INSN_DSP_MSUB_2_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_SRC2_REG_ACC_REG_ADDSUB, "dsp-msub.2-s1-indirect-with-pre-increment-2-dsp-src2-reg-acc-reg-addsub", "msub.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msub.2${dsp-c}${dsp-t-addsub} ${dsp-destA},${s1-direct-addr},#${bit5-addsub} */
+  {
+    UBICOM32_INSN_DSP_MSUB_2_S1_DIRECT_DSP_IMM_BIT5_ADDSUB2, "dsp-msub.2-s1-direct-dsp-imm-bit5-addsub2", "msub.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msub.2${dsp-c}${dsp-t-addsub} ${dsp-destA},#${s1-imm8},#${bit5-addsub} */
+  {
+    UBICOM32_INSN_DSP_MSUB_2_S1_IMMEDIATE_DSP_IMM_BIT5_ADDSUB2, "dsp-msub.2-s1-immediate-dsp-imm-bit5-addsub2", "msub.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msub.2${dsp-c}${dsp-t-addsub} ${dsp-destA},(${s1-An},${s1-r}),#${bit5-addsub} */
+  {
+    UBICOM32_INSN_DSP_MSUB_2_S1_INDIRECT_WITH_INDEX_2_DSP_IMM_BIT5_ADDSUB2, "dsp-msub.2-s1-indirect-with-index-2-dsp-imm-bit5-addsub2", "msub.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msub.2${dsp-c}${dsp-t-addsub} ${dsp-destA},${s1-imm7-2}(${s1-An}),#${bit5-addsub} */
+  {
+    UBICOM32_INSN_DSP_MSUB_2_S1_INDIRECT_WITH_OFFSET_2_DSP_IMM_BIT5_ADDSUB2, "dsp-msub.2-s1-indirect-with-offset-2-dsp-imm-bit5-addsub2", "msub.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msub.2${dsp-c}${dsp-t-addsub} ${dsp-destA},(${s1-An}),#${bit5-addsub} */
+  {
+    UBICOM32_INSN_DSP_MSUB_2_S1_INDIRECT_2_DSP_IMM_BIT5_ADDSUB2, "dsp-msub.2-s1-indirect-2-dsp-imm-bit5-addsub2", "msub.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msub.2${dsp-c}${dsp-t-addsub} ${dsp-destA},(${s1-An})${s1-i4-2}++,#${bit5-addsub} */
+  {
+    UBICOM32_INSN_DSP_MSUB_2_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_IMM_BIT5_ADDSUB2, "dsp-msub.2-s1-indirect-with-post-increment-2-dsp-imm-bit5-addsub2", "msub.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msub.2${dsp-c}${dsp-t-addsub} ${dsp-destA},${s1-i4-2}(${s1-An})++,#${bit5-addsub} */
+  {
+    UBICOM32_INSN_DSP_MSUB_2_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_IMM_BIT5_ADDSUB2, "dsp-msub.2-s1-indirect-with-pre-increment-2-dsp-imm-bit5-addsub2", "msub.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msub.4${dsp-c} ${dsp-destA},${s1-direct-addr},${dsp-S2-data-reg-addsub} */
+  {
+    UBICOM32_INSN_DSP_MSUB_4_S1_DIRECT_DSP_SRC2_DATA_REG_ADDSUB, "dsp-msub.4-s1-direct-dsp-src2-data-reg-addsub", "msub.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msub.4${dsp-c} ${dsp-destA},#${s1-imm8},${dsp-S2-data-reg-addsub} */
+  {
+    UBICOM32_INSN_DSP_MSUB_4_S1_IMMEDIATE_DSP_SRC2_DATA_REG_ADDSUB, "dsp-msub.4-s1-immediate-dsp-src2-data-reg-addsub", "msub.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msub.4${dsp-c} ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-data-reg-addsub} */
+  {
+    UBICOM32_INSN_DSP_MSUB_4_S1_INDIRECT_WITH_INDEX_4_DSP_SRC2_DATA_REG_ADDSUB, "dsp-msub.4-s1-indirect-with-index-4-dsp-src2-data-reg-addsub", "msub.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msub.4${dsp-c} ${dsp-destA},${s1-imm7-4}(${s1-An}),${dsp-S2-data-reg-addsub} */
+  {
+    UBICOM32_INSN_DSP_MSUB_4_S1_INDIRECT_WITH_OFFSET_4_DSP_SRC2_DATA_REG_ADDSUB, "dsp-msub.4-s1-indirect-with-offset-4-dsp-src2-data-reg-addsub", "msub.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msub.4${dsp-c} ${dsp-destA},(${s1-An}),${dsp-S2-data-reg-addsub} */
+  {
+    UBICOM32_INSN_DSP_MSUB_4_S1_INDIRECT_4_DSP_SRC2_DATA_REG_ADDSUB, "dsp-msub.4-s1-indirect-4-dsp-src2-data-reg-addsub", "msub.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msub.4${dsp-c} ${dsp-destA},(${s1-An})${s1-i4-4}++,${dsp-S2-data-reg-addsub} */
+  {
+    UBICOM32_INSN_DSP_MSUB_4_S1_INDIRECT_WITH_POST_INCREMENT_4_DSP_SRC2_DATA_REG_ADDSUB, "dsp-msub.4-s1-indirect-with-post-increment-4-dsp-src2-data-reg-addsub", "msub.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msub.4${dsp-c} ${dsp-destA},${s1-i4-4}(${s1-An})++,${dsp-S2-data-reg-addsub} */
+  {
+    UBICOM32_INSN_DSP_MSUB_4_S1_INDIRECT_WITH_PRE_INCREMENT_4_DSP_SRC2_DATA_REG_ADDSUB, "dsp-msub.4-s1-indirect-with-pre-increment-4-dsp-src2-data-reg-addsub", "msub.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msub.4${dsp-c} ${dsp-destA},${s1-direct-addr},${dsp-S2-acc-reg-addsub} */
+  {
+    UBICOM32_INSN_DSP_MSUB_4_S1_DIRECT_DSP_SRC2_REG_ACC_REG_ADDSUB, "dsp-msub.4-s1-direct-dsp-src2-reg-acc-reg-addsub", "msub.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msub.4${dsp-c} ${dsp-destA},#${s1-imm8},${dsp-S2-acc-reg-addsub} */
+  {
+    UBICOM32_INSN_DSP_MSUB_4_S1_IMMEDIATE_DSP_SRC2_REG_ACC_REG_ADDSUB, "dsp-msub.4-s1-immediate-dsp-src2-reg-acc-reg-addsub", "msub.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msub.4${dsp-c} ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-acc-reg-addsub} */
+  {
+    UBICOM32_INSN_DSP_MSUB_4_S1_INDIRECT_WITH_INDEX_4_DSP_SRC2_REG_ACC_REG_ADDSUB, "dsp-msub.4-s1-indirect-with-index-4-dsp-src2-reg-acc-reg-addsub", "msub.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msub.4${dsp-c} ${dsp-destA},${s1-imm7-4}(${s1-An}),${dsp-S2-acc-reg-addsub} */
+  {
+    UBICOM32_INSN_DSP_MSUB_4_S1_INDIRECT_WITH_OFFSET_4_DSP_SRC2_REG_ACC_REG_ADDSUB, "dsp-msub.4-s1-indirect-with-offset-4-dsp-src2-reg-acc-reg-addsub", "msub.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msub.4${dsp-c} ${dsp-destA},(${s1-An}),${dsp-S2-acc-reg-addsub} */
+  {
+    UBICOM32_INSN_DSP_MSUB_4_S1_INDIRECT_4_DSP_SRC2_REG_ACC_REG_ADDSUB, "dsp-msub.4-s1-indirect-4-dsp-src2-reg-acc-reg-addsub", "msub.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msub.4${dsp-c} ${dsp-destA},(${s1-An})${s1-i4-4}++,${dsp-S2-acc-reg-addsub} */
+  {
+    UBICOM32_INSN_DSP_MSUB_4_S1_INDIRECT_WITH_POST_INCREMENT_4_DSP_SRC2_REG_ACC_REG_ADDSUB, "dsp-msub.4-s1-indirect-with-post-increment-4-dsp-src2-reg-acc-reg-addsub", "msub.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msub.4${dsp-c} ${dsp-destA},${s1-i4-4}(${s1-An})++,${dsp-S2-acc-reg-addsub} */
+  {
+    UBICOM32_INSN_DSP_MSUB_4_S1_INDIRECT_WITH_PRE_INCREMENT_4_DSP_SRC2_REG_ACC_REG_ADDSUB, "dsp-msub.4-s1-indirect-with-pre-increment-4-dsp-src2-reg-acc-reg-addsub", "msub.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msub.4${dsp-c} ${dsp-destA},${s1-direct-addr},#${bit5-addsub} */
+  {
+    UBICOM32_INSN_DSP_MSUB_4_S1_DIRECT_DSP_IMM_BIT5_ADDSUB, "dsp-msub.4-s1-direct-dsp-imm-bit5-addsub", "msub.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msub.4${dsp-c} ${dsp-destA},#${s1-imm8},#${bit5-addsub} */
+  {
+    UBICOM32_INSN_DSP_MSUB_4_S1_IMMEDIATE_DSP_IMM_BIT5_ADDSUB, "dsp-msub.4-s1-immediate-dsp-imm-bit5-addsub", "msub.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msub.4${dsp-c} ${dsp-destA},(${s1-An},${s1-r}),#${bit5-addsub} */
+  {
+    UBICOM32_INSN_DSP_MSUB_4_S1_INDIRECT_WITH_INDEX_4_DSP_IMM_BIT5_ADDSUB, "dsp-msub.4-s1-indirect-with-index-4-dsp-imm-bit5-addsub", "msub.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msub.4${dsp-c} ${dsp-destA},${s1-imm7-4}(${s1-An}),#${bit5-addsub} */
+  {
+    UBICOM32_INSN_DSP_MSUB_4_S1_INDIRECT_WITH_OFFSET_4_DSP_IMM_BIT5_ADDSUB, "dsp-msub.4-s1-indirect-with-offset-4-dsp-imm-bit5-addsub", "msub.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msub.4${dsp-c} ${dsp-destA},(${s1-An}),#${bit5-addsub} */
+  {
+    UBICOM32_INSN_DSP_MSUB_4_S1_INDIRECT_4_DSP_IMM_BIT5_ADDSUB, "dsp-msub.4-s1-indirect-4-dsp-imm-bit5-addsub", "msub.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msub.4${dsp-c} ${dsp-destA},(${s1-An})${s1-i4-4}++,#${bit5-addsub} */
+  {
+    UBICOM32_INSN_DSP_MSUB_4_S1_INDIRECT_WITH_POST_INCREMENT_4_DSP_IMM_BIT5_ADDSUB, "dsp-msub.4-s1-indirect-with-post-increment-4-dsp-imm-bit5-addsub", "msub.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msub.4${dsp-c} ${dsp-destA},${s1-i4-4}(${s1-An})++,#${bit5-addsub} */
+  {
+    UBICOM32_INSN_DSP_MSUB_4_S1_INDIRECT_WITH_PRE_INCREMENT_4_DSP_IMM_BIT5_ADDSUB, "dsp-msub.4-s1-indirect-with-pre-increment-4-dsp-imm-bit5-addsub", "msub.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* madd.2${dsp-c}${dsp-t-addsub} ${dsp-destA},${s1-direct-addr},${dsp-S2-data-reg-addsub} */
+  {
+    UBICOM32_INSN_DSP_MADD_2_S1_DIRECT_DSP_SRC2_DATA_REG_ADDSUB2, "dsp-madd.2-s1-direct-dsp-src2-data-reg-addsub2", "madd.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* madd.2${dsp-c}${dsp-t-addsub} ${dsp-destA},#${s1-imm8},${dsp-S2-data-reg-addsub} */
+  {
+    UBICOM32_INSN_DSP_MADD_2_S1_IMMEDIATE_DSP_SRC2_DATA_REG_ADDSUB2, "dsp-madd.2-s1-immediate-dsp-src2-data-reg-addsub2", "madd.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* madd.2${dsp-c}${dsp-t-addsub} ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-data-reg-addsub} */
+  {
+    UBICOM32_INSN_DSP_MADD_2_S1_INDIRECT_WITH_INDEX_2_DSP_SRC2_DATA_REG_ADDSUB2, "dsp-madd.2-s1-indirect-with-index-2-dsp-src2-data-reg-addsub2", "madd.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* madd.2${dsp-c}${dsp-t-addsub} ${dsp-destA},${s1-imm7-2}(${s1-An}),${dsp-S2-data-reg-addsub} */
+  {
+    UBICOM32_INSN_DSP_MADD_2_S1_INDIRECT_WITH_OFFSET_2_DSP_SRC2_DATA_REG_ADDSUB2, "dsp-madd.2-s1-indirect-with-offset-2-dsp-src2-data-reg-addsub2", "madd.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* madd.2${dsp-c}${dsp-t-addsub} ${dsp-destA},(${s1-An}),${dsp-S2-data-reg-addsub} */
+  {
+    UBICOM32_INSN_DSP_MADD_2_S1_INDIRECT_2_DSP_SRC2_DATA_REG_ADDSUB2, "dsp-madd.2-s1-indirect-2-dsp-src2-data-reg-addsub2", "madd.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* madd.2${dsp-c}${dsp-t-addsub} ${dsp-destA},(${s1-An})${s1-i4-2}++,${dsp-S2-data-reg-addsub} */
+  {
+    UBICOM32_INSN_DSP_MADD_2_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_SRC2_DATA_REG_ADDSUB2, "dsp-madd.2-s1-indirect-with-post-increment-2-dsp-src2-data-reg-addsub2", "madd.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* madd.2${dsp-c}${dsp-t-addsub} ${dsp-destA},${s1-i4-2}(${s1-An})++,${dsp-S2-data-reg-addsub} */
+  {
+    UBICOM32_INSN_DSP_MADD_2_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_SRC2_DATA_REG_ADDSUB2, "dsp-madd.2-s1-indirect-with-pre-increment-2-dsp-src2-data-reg-addsub2", "madd.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* madd.2${dsp-c}${dsp-t-addsub} ${dsp-destA},${s1-direct-addr},${dsp-S2-acc-reg-addsub} */
+  {
+    UBICOM32_INSN_DSP_MADD_2_S1_DIRECT_DSP_SRC2_REG_ACC_REG_ADDSUB, "dsp-madd.2-s1-direct-dsp-src2-reg-acc-reg-addsub", "madd.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* madd.2${dsp-c}${dsp-t-addsub} ${dsp-destA},#${s1-imm8},${dsp-S2-acc-reg-addsub} */
+  {
+    UBICOM32_INSN_DSP_MADD_2_S1_IMMEDIATE_DSP_SRC2_REG_ACC_REG_ADDSUB, "dsp-madd.2-s1-immediate-dsp-src2-reg-acc-reg-addsub", "madd.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* madd.2${dsp-c}${dsp-t-addsub} ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-acc-reg-addsub} */
+  {
+    UBICOM32_INSN_DSP_MADD_2_S1_INDIRECT_WITH_INDEX_2_DSP_SRC2_REG_ACC_REG_ADDSUB, "dsp-madd.2-s1-indirect-with-index-2-dsp-src2-reg-acc-reg-addsub", "madd.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* madd.2${dsp-c}${dsp-t-addsub} ${dsp-destA},${s1-imm7-2}(${s1-An}),${dsp-S2-acc-reg-addsub} */
+  {
+    UBICOM32_INSN_DSP_MADD_2_S1_INDIRECT_WITH_OFFSET_2_DSP_SRC2_REG_ACC_REG_ADDSUB, "dsp-madd.2-s1-indirect-with-offset-2-dsp-src2-reg-acc-reg-addsub", "madd.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* madd.2${dsp-c}${dsp-t-addsub} ${dsp-destA},(${s1-An}),${dsp-S2-acc-reg-addsub} */
+  {
+    UBICOM32_INSN_DSP_MADD_2_S1_INDIRECT_2_DSP_SRC2_REG_ACC_REG_ADDSUB, "dsp-madd.2-s1-indirect-2-dsp-src2-reg-acc-reg-addsub", "madd.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* madd.2${dsp-c}${dsp-t-addsub} ${dsp-destA},(${s1-An})${s1-i4-2}++,${dsp-S2-acc-reg-addsub} */
+  {
+    UBICOM32_INSN_DSP_MADD_2_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_SRC2_REG_ACC_REG_ADDSUB, "dsp-madd.2-s1-indirect-with-post-increment-2-dsp-src2-reg-acc-reg-addsub", "madd.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* madd.2${dsp-c}${dsp-t-addsub} ${dsp-destA},${s1-i4-2}(${s1-An})++,${dsp-S2-acc-reg-addsub} */
+  {
+    UBICOM32_INSN_DSP_MADD_2_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_SRC2_REG_ACC_REG_ADDSUB, "dsp-madd.2-s1-indirect-with-pre-increment-2-dsp-src2-reg-acc-reg-addsub", "madd.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* madd.2${dsp-c}${dsp-t-addsub} ${dsp-destA},${s1-direct-addr},#${bit5-addsub} */
+  {
+    UBICOM32_INSN_DSP_MADD_2_S1_DIRECT_DSP_IMM_BIT5_ADDSUB2, "dsp-madd.2-s1-direct-dsp-imm-bit5-addsub2", "madd.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* madd.2${dsp-c}${dsp-t-addsub} ${dsp-destA},#${s1-imm8},#${bit5-addsub} */
+  {
+    UBICOM32_INSN_DSP_MADD_2_S1_IMMEDIATE_DSP_IMM_BIT5_ADDSUB2, "dsp-madd.2-s1-immediate-dsp-imm-bit5-addsub2", "madd.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* madd.2${dsp-c}${dsp-t-addsub} ${dsp-destA},(${s1-An},${s1-r}),#${bit5-addsub} */
+  {
+    UBICOM32_INSN_DSP_MADD_2_S1_INDIRECT_WITH_INDEX_2_DSP_IMM_BIT5_ADDSUB2, "dsp-madd.2-s1-indirect-with-index-2-dsp-imm-bit5-addsub2", "madd.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* madd.2${dsp-c}${dsp-t-addsub} ${dsp-destA},${s1-imm7-2}(${s1-An}),#${bit5-addsub} */
+  {
+    UBICOM32_INSN_DSP_MADD_2_S1_INDIRECT_WITH_OFFSET_2_DSP_IMM_BIT5_ADDSUB2, "dsp-madd.2-s1-indirect-with-offset-2-dsp-imm-bit5-addsub2", "madd.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* madd.2${dsp-c}${dsp-t-addsub} ${dsp-destA},(${s1-An}),#${bit5-addsub} */
+  {
+    UBICOM32_INSN_DSP_MADD_2_S1_INDIRECT_2_DSP_IMM_BIT5_ADDSUB2, "dsp-madd.2-s1-indirect-2-dsp-imm-bit5-addsub2", "madd.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* madd.2${dsp-c}${dsp-t-addsub} ${dsp-destA},(${s1-An})${s1-i4-2}++,#${bit5-addsub} */
+  {
+    UBICOM32_INSN_DSP_MADD_2_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_IMM_BIT5_ADDSUB2, "dsp-madd.2-s1-indirect-with-post-increment-2-dsp-imm-bit5-addsub2", "madd.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* madd.2${dsp-c}${dsp-t-addsub} ${dsp-destA},${s1-i4-2}(${s1-An})++,#${bit5-addsub} */
+  {
+    UBICOM32_INSN_DSP_MADD_2_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_IMM_BIT5_ADDSUB2, "dsp-madd.2-s1-indirect-with-pre-increment-2-dsp-imm-bit5-addsub2", "madd.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* madd.4${dsp-c} ${dsp-destA},${s1-direct-addr},${dsp-S2-data-reg-addsub} */
+  {
+    UBICOM32_INSN_DSP_MADD_4_S1_DIRECT_DSP_SRC2_DATA_REG_ADDSUB, "dsp-madd.4-s1-direct-dsp-src2-data-reg-addsub", "madd.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* madd.4${dsp-c} ${dsp-destA},#${s1-imm8},${dsp-S2-data-reg-addsub} */
+  {
+    UBICOM32_INSN_DSP_MADD_4_S1_IMMEDIATE_DSP_SRC2_DATA_REG_ADDSUB, "dsp-madd.4-s1-immediate-dsp-src2-data-reg-addsub", "madd.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* madd.4${dsp-c} ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-data-reg-addsub} */
+  {
+    UBICOM32_INSN_DSP_MADD_4_S1_INDIRECT_WITH_INDEX_4_DSP_SRC2_DATA_REG_ADDSUB, "dsp-madd.4-s1-indirect-with-index-4-dsp-src2-data-reg-addsub", "madd.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* madd.4${dsp-c} ${dsp-destA},${s1-imm7-4}(${s1-An}),${dsp-S2-data-reg-addsub} */
+  {
+    UBICOM32_INSN_DSP_MADD_4_S1_INDIRECT_WITH_OFFSET_4_DSP_SRC2_DATA_REG_ADDSUB, "dsp-madd.4-s1-indirect-with-offset-4-dsp-src2-data-reg-addsub", "madd.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* madd.4${dsp-c} ${dsp-destA},(${s1-An}),${dsp-S2-data-reg-addsub} */
+  {
+    UBICOM32_INSN_DSP_MADD_4_S1_INDIRECT_4_DSP_SRC2_DATA_REG_ADDSUB, "dsp-madd.4-s1-indirect-4-dsp-src2-data-reg-addsub", "madd.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* madd.4${dsp-c} ${dsp-destA},(${s1-An})${s1-i4-4}++,${dsp-S2-data-reg-addsub} */
+  {
+    UBICOM32_INSN_DSP_MADD_4_S1_INDIRECT_WITH_POST_INCREMENT_4_DSP_SRC2_DATA_REG_ADDSUB, "dsp-madd.4-s1-indirect-with-post-increment-4-dsp-src2-data-reg-addsub", "madd.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* madd.4${dsp-c} ${dsp-destA},${s1-i4-4}(${s1-An})++,${dsp-S2-data-reg-addsub} */
+  {
+    UBICOM32_INSN_DSP_MADD_4_S1_INDIRECT_WITH_PRE_INCREMENT_4_DSP_SRC2_DATA_REG_ADDSUB, "dsp-madd.4-s1-indirect-with-pre-increment-4-dsp-src2-data-reg-addsub", "madd.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* madd.4${dsp-c} ${dsp-destA},${s1-direct-addr},${dsp-S2-acc-reg-addsub} */
+  {
+    UBICOM32_INSN_DSP_MADD_4_S1_DIRECT_DSP_SRC2_REG_ACC_REG_ADDSUB, "dsp-madd.4-s1-direct-dsp-src2-reg-acc-reg-addsub", "madd.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* madd.4${dsp-c} ${dsp-destA},#${s1-imm8},${dsp-S2-acc-reg-addsub} */
+  {
+    UBICOM32_INSN_DSP_MADD_4_S1_IMMEDIATE_DSP_SRC2_REG_ACC_REG_ADDSUB, "dsp-madd.4-s1-immediate-dsp-src2-reg-acc-reg-addsub", "madd.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* madd.4${dsp-c} ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-acc-reg-addsub} */
+  {
+    UBICOM32_INSN_DSP_MADD_4_S1_INDIRECT_WITH_INDEX_4_DSP_SRC2_REG_ACC_REG_ADDSUB, "dsp-madd.4-s1-indirect-with-index-4-dsp-src2-reg-acc-reg-addsub", "madd.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* madd.4${dsp-c} ${dsp-destA},${s1-imm7-4}(${s1-An}),${dsp-S2-acc-reg-addsub} */
+  {
+    UBICOM32_INSN_DSP_MADD_4_S1_INDIRECT_WITH_OFFSET_4_DSP_SRC2_REG_ACC_REG_ADDSUB, "dsp-madd.4-s1-indirect-with-offset-4-dsp-src2-reg-acc-reg-addsub", "madd.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* madd.4${dsp-c} ${dsp-destA},(${s1-An}),${dsp-S2-acc-reg-addsub} */
+  {
+    UBICOM32_INSN_DSP_MADD_4_S1_INDIRECT_4_DSP_SRC2_REG_ACC_REG_ADDSUB, "dsp-madd.4-s1-indirect-4-dsp-src2-reg-acc-reg-addsub", "madd.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* madd.4${dsp-c} ${dsp-destA},(${s1-An})${s1-i4-4}++,${dsp-S2-acc-reg-addsub} */
+  {
+    UBICOM32_INSN_DSP_MADD_4_S1_INDIRECT_WITH_POST_INCREMENT_4_DSP_SRC2_REG_ACC_REG_ADDSUB, "dsp-madd.4-s1-indirect-with-post-increment-4-dsp-src2-reg-acc-reg-addsub", "madd.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* madd.4${dsp-c} ${dsp-destA},${s1-i4-4}(${s1-An})++,${dsp-S2-acc-reg-addsub} */
+  {
+    UBICOM32_INSN_DSP_MADD_4_S1_INDIRECT_WITH_PRE_INCREMENT_4_DSP_SRC2_REG_ACC_REG_ADDSUB, "dsp-madd.4-s1-indirect-with-pre-increment-4-dsp-src2-reg-acc-reg-addsub", "madd.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* madd.4${dsp-c} ${dsp-destA},${s1-direct-addr},#${bit5-addsub} */
+  {
+    UBICOM32_INSN_DSP_MADD_4_S1_DIRECT_DSP_IMM_BIT5_ADDSUB, "dsp-madd.4-s1-direct-dsp-imm-bit5-addsub", "madd.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* madd.4${dsp-c} ${dsp-destA},#${s1-imm8},#${bit5-addsub} */
+  {
+    UBICOM32_INSN_DSP_MADD_4_S1_IMMEDIATE_DSP_IMM_BIT5_ADDSUB, "dsp-madd.4-s1-immediate-dsp-imm-bit5-addsub", "madd.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* madd.4${dsp-c} ${dsp-destA},(${s1-An},${s1-r}),#${bit5-addsub} */
+  {
+    UBICOM32_INSN_DSP_MADD_4_S1_INDIRECT_WITH_INDEX_4_DSP_IMM_BIT5_ADDSUB, "dsp-madd.4-s1-indirect-with-index-4-dsp-imm-bit5-addsub", "madd.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* madd.4${dsp-c} ${dsp-destA},${s1-imm7-4}(${s1-An}),#${bit5-addsub} */
+  {
+    UBICOM32_INSN_DSP_MADD_4_S1_INDIRECT_WITH_OFFSET_4_DSP_IMM_BIT5_ADDSUB, "dsp-madd.4-s1-indirect-with-offset-4-dsp-imm-bit5-addsub", "madd.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* madd.4${dsp-c} ${dsp-destA},(${s1-An}),#${bit5-addsub} */
+  {
+    UBICOM32_INSN_DSP_MADD_4_S1_INDIRECT_4_DSP_IMM_BIT5_ADDSUB, "dsp-madd.4-s1-indirect-4-dsp-imm-bit5-addsub", "madd.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* madd.4${dsp-c} ${dsp-destA},(${s1-An})${s1-i4-4}++,#${bit5-addsub} */
+  {
+    UBICOM32_INSN_DSP_MADD_4_S1_INDIRECT_WITH_POST_INCREMENT_4_DSP_IMM_BIT5_ADDSUB, "dsp-madd.4-s1-indirect-with-post-increment-4-dsp-imm-bit5-addsub", "madd.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* madd.4${dsp-c} ${dsp-destA},${s1-i4-4}(${s1-An})++,#${bit5-addsub} */
+  {
+    UBICOM32_INSN_DSP_MADD_4_S1_INDIRECT_WITH_PRE_INCREMENT_4_DSP_IMM_BIT5_ADDSUB, "dsp-madd.4-s1-indirect-with-pre-increment-4-dsp-imm-bit5-addsub", "madd.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msuf${dsp-c}${dsp-t} ${dsp-destA},${s1-direct-addr},${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MSUF_S1_DIRECT_DSP_SRC2_DATA_REG, "dsp-msuf-s1-direct-dsp-src2-data-reg", "msuf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msuf${dsp-c}${dsp-t} ${dsp-destA},#${s1-imm8},${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MSUF_S1_IMMEDIATE_DSP_SRC2_DATA_REG, "dsp-msuf-s1-immediate-dsp-src2-data-reg", "msuf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msuf${dsp-c}${dsp-t} ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MSUF_S1_INDIRECT_WITH_INDEX_2_DSP_SRC2_DATA_REG, "dsp-msuf-s1-indirect-with-index-2-dsp-src2-data-reg", "msuf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msuf${dsp-c}${dsp-t} ${dsp-destA},${s1-imm7-2}(${s1-An}),${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MSUF_S1_INDIRECT_WITH_OFFSET_2_DSP_SRC2_DATA_REG, "dsp-msuf-s1-indirect-with-offset-2-dsp-src2-data-reg", "msuf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msuf${dsp-c}${dsp-t} ${dsp-destA},(${s1-An}),${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MSUF_S1_INDIRECT_2_DSP_SRC2_DATA_REG, "dsp-msuf-s1-indirect-2-dsp-src2-data-reg", "msuf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msuf${dsp-c}${dsp-t} ${dsp-destA},(${s1-An})${s1-i4-2}++,${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MSUF_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_SRC2_DATA_REG, "dsp-msuf-s1-indirect-with-post-increment-2-dsp-src2-data-reg", "msuf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msuf${dsp-c}${dsp-t} ${dsp-destA},${s1-i4-2}(${s1-An})++,${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MSUF_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_SRC2_DATA_REG, "dsp-msuf-s1-indirect-with-pre-increment-2-dsp-src2-data-reg", "msuf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msuf${dsp-c}${dsp-t} ${dsp-destA},${s1-direct-addr},${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MSUF_S1_DIRECT_DSP_SRC2_REG_ACC_REG_MUL, "dsp-msuf-s1-direct-dsp-src2-reg-acc-reg-mul", "msuf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msuf${dsp-c}${dsp-t} ${dsp-destA},#${s1-imm8},${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MSUF_S1_IMMEDIATE_DSP_SRC2_REG_ACC_REG_MUL, "dsp-msuf-s1-immediate-dsp-src2-reg-acc-reg-mul", "msuf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msuf${dsp-c}${dsp-t} ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MSUF_S1_INDIRECT_WITH_INDEX_2_DSP_SRC2_REG_ACC_REG_MUL, "dsp-msuf-s1-indirect-with-index-2-dsp-src2-reg-acc-reg-mul", "msuf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msuf${dsp-c}${dsp-t} ${dsp-destA},${s1-imm7-2}(${s1-An}),${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MSUF_S1_INDIRECT_WITH_OFFSET_2_DSP_SRC2_REG_ACC_REG_MUL, "dsp-msuf-s1-indirect-with-offset-2-dsp-src2-reg-acc-reg-mul", "msuf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msuf${dsp-c}${dsp-t} ${dsp-destA},(${s1-An}),${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MSUF_S1_INDIRECT_2_DSP_SRC2_REG_ACC_REG_MUL, "dsp-msuf-s1-indirect-2-dsp-src2-reg-acc-reg-mul", "msuf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msuf${dsp-c}${dsp-t} ${dsp-destA},(${s1-An})${s1-i4-2}++,${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MSUF_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_SRC2_REG_ACC_REG_MUL, "dsp-msuf-s1-indirect-with-post-increment-2-dsp-src2-reg-acc-reg-mul", "msuf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msuf${dsp-c}${dsp-t} ${dsp-destA},${s1-i4-2}(${s1-An})++,${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MSUF_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_SRC2_REG_ACC_REG_MUL, "dsp-msuf-s1-indirect-with-pre-increment-2-dsp-src2-reg-acc-reg-mul", "msuf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msuf${dsp-c}${dsp-t} ${dsp-destA},${s1-direct-addr},#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MSUF_S1_DIRECT_DSP_IMM_BIT5, "dsp-msuf-s1-direct-dsp-imm-bit5", "msuf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msuf${dsp-c}${dsp-t} ${dsp-destA},#${s1-imm8},#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MSUF_S1_IMMEDIATE_DSP_IMM_BIT5, "dsp-msuf-s1-immediate-dsp-imm-bit5", "msuf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msuf${dsp-c}${dsp-t} ${dsp-destA},(${s1-An},${s1-r}),#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MSUF_S1_INDIRECT_WITH_INDEX_2_DSP_IMM_BIT5, "dsp-msuf-s1-indirect-with-index-2-dsp-imm-bit5", "msuf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msuf${dsp-c}${dsp-t} ${dsp-destA},${s1-imm7-2}(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MSUF_S1_INDIRECT_WITH_OFFSET_2_DSP_IMM_BIT5, "dsp-msuf-s1-indirect-with-offset-2-dsp-imm-bit5", "msuf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msuf${dsp-c}${dsp-t} ${dsp-destA},(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MSUF_S1_INDIRECT_2_DSP_IMM_BIT5, "dsp-msuf-s1-indirect-2-dsp-imm-bit5", "msuf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msuf${dsp-c}${dsp-t} ${dsp-destA},(${s1-An})${s1-i4-2}++,#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MSUF_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_IMM_BIT5, "dsp-msuf-s1-indirect-with-post-increment-2-dsp-imm-bit5", "msuf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* msuf${dsp-c}${dsp-t} ${dsp-destA},${s1-i4-2}(${s1-An})++,#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MSUF_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_IMM_BIT5, "dsp-msuf-s1-indirect-with-pre-increment-2-dsp-imm-bit5", "msuf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macus${dsp-c}${dsp-t} ${dsp-destA},${s1-direct-addr},${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MACUS_S1_DIRECT_DSP_SRC2_DATA_REG, "dsp-macus-s1-direct-dsp-src2-data-reg", "macus", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macus${dsp-c}${dsp-t} ${dsp-destA},#${s1-imm8},${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MACUS_S1_IMMEDIATE_DSP_SRC2_DATA_REG, "dsp-macus-s1-immediate-dsp-src2-data-reg", "macus", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macus${dsp-c}${dsp-t} ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MACUS_S1_INDIRECT_WITH_INDEX_2_DSP_SRC2_DATA_REG, "dsp-macus-s1-indirect-with-index-2-dsp-src2-data-reg", "macus", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macus${dsp-c}${dsp-t} ${dsp-destA},${s1-imm7-2}(${s1-An}),${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MACUS_S1_INDIRECT_WITH_OFFSET_2_DSP_SRC2_DATA_REG, "dsp-macus-s1-indirect-with-offset-2-dsp-src2-data-reg", "macus", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macus${dsp-c}${dsp-t} ${dsp-destA},(${s1-An}),${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MACUS_S1_INDIRECT_2_DSP_SRC2_DATA_REG, "dsp-macus-s1-indirect-2-dsp-src2-data-reg", "macus", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macus${dsp-c}${dsp-t} ${dsp-destA},(${s1-An})${s1-i4-2}++,${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MACUS_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_SRC2_DATA_REG, "dsp-macus-s1-indirect-with-post-increment-2-dsp-src2-data-reg", "macus", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macus${dsp-c}${dsp-t} ${dsp-destA},${s1-i4-2}(${s1-An})++,${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MACUS_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_SRC2_DATA_REG, "dsp-macus-s1-indirect-with-pre-increment-2-dsp-src2-data-reg", "macus", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macus${dsp-c}${dsp-t} ${dsp-destA},${s1-direct-addr},${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MACUS_S1_DIRECT_DSP_SRC2_REG_ACC_REG_MUL, "dsp-macus-s1-direct-dsp-src2-reg-acc-reg-mul", "macus", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macus${dsp-c}${dsp-t} ${dsp-destA},#${s1-imm8},${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MACUS_S1_IMMEDIATE_DSP_SRC2_REG_ACC_REG_MUL, "dsp-macus-s1-immediate-dsp-src2-reg-acc-reg-mul", "macus", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macus${dsp-c}${dsp-t} ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MACUS_S1_INDIRECT_WITH_INDEX_2_DSP_SRC2_REG_ACC_REG_MUL, "dsp-macus-s1-indirect-with-index-2-dsp-src2-reg-acc-reg-mul", "macus", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macus${dsp-c}${dsp-t} ${dsp-destA},${s1-imm7-2}(${s1-An}),${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MACUS_S1_INDIRECT_WITH_OFFSET_2_DSP_SRC2_REG_ACC_REG_MUL, "dsp-macus-s1-indirect-with-offset-2-dsp-src2-reg-acc-reg-mul", "macus", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macus${dsp-c}${dsp-t} ${dsp-destA},(${s1-An}),${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MACUS_S1_INDIRECT_2_DSP_SRC2_REG_ACC_REG_MUL, "dsp-macus-s1-indirect-2-dsp-src2-reg-acc-reg-mul", "macus", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macus${dsp-c}${dsp-t} ${dsp-destA},(${s1-An})${s1-i4-2}++,${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MACUS_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_SRC2_REG_ACC_REG_MUL, "dsp-macus-s1-indirect-with-post-increment-2-dsp-src2-reg-acc-reg-mul", "macus", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macus${dsp-c}${dsp-t} ${dsp-destA},${s1-i4-2}(${s1-An})++,${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MACUS_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_SRC2_REG_ACC_REG_MUL, "dsp-macus-s1-indirect-with-pre-increment-2-dsp-src2-reg-acc-reg-mul", "macus", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macus${dsp-c}${dsp-t} ${dsp-destA},${s1-direct-addr},#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MACUS_S1_DIRECT_DSP_IMM_BIT5, "dsp-macus-s1-direct-dsp-imm-bit5", "macus", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macus${dsp-c}${dsp-t} ${dsp-destA},#${s1-imm8},#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MACUS_S1_IMMEDIATE_DSP_IMM_BIT5, "dsp-macus-s1-immediate-dsp-imm-bit5", "macus", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macus${dsp-c}${dsp-t} ${dsp-destA},(${s1-An},${s1-r}),#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MACUS_S1_INDIRECT_WITH_INDEX_2_DSP_IMM_BIT5, "dsp-macus-s1-indirect-with-index-2-dsp-imm-bit5", "macus", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macus${dsp-c}${dsp-t} ${dsp-destA},${s1-imm7-2}(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MACUS_S1_INDIRECT_WITH_OFFSET_2_DSP_IMM_BIT5, "dsp-macus-s1-indirect-with-offset-2-dsp-imm-bit5", "macus", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macus${dsp-c}${dsp-t} ${dsp-destA},(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MACUS_S1_INDIRECT_2_DSP_IMM_BIT5, "dsp-macus-s1-indirect-2-dsp-imm-bit5", "macus", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macus${dsp-c}${dsp-t} ${dsp-destA},(${s1-An})${s1-i4-2}++,#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MACUS_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_IMM_BIT5, "dsp-macus-s1-indirect-with-post-increment-2-dsp-imm-bit5", "macus", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macus${dsp-c}${dsp-t} ${dsp-destA},${s1-i4-2}(${s1-An})++,#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MACUS_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_IMM_BIT5, "dsp-macus-s1-indirect-with-pre-increment-2-dsp-imm-bit5", "macus", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macf${dsp-c}${dsp-t} ${dsp-destA},${s1-direct-addr},${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MACF_S1_DIRECT_DSP_SRC2_DATA_REG, "dsp-macf-s1-direct-dsp-src2-data-reg", "macf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macf${dsp-c}${dsp-t} ${dsp-destA},#${s1-imm8},${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MACF_S1_IMMEDIATE_DSP_SRC2_DATA_REG, "dsp-macf-s1-immediate-dsp-src2-data-reg", "macf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macf${dsp-c}${dsp-t} ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MACF_S1_INDIRECT_WITH_INDEX_2_DSP_SRC2_DATA_REG, "dsp-macf-s1-indirect-with-index-2-dsp-src2-data-reg", "macf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macf${dsp-c}${dsp-t} ${dsp-destA},${s1-imm7-2}(${s1-An}),${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MACF_S1_INDIRECT_WITH_OFFSET_2_DSP_SRC2_DATA_REG, "dsp-macf-s1-indirect-with-offset-2-dsp-src2-data-reg", "macf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macf${dsp-c}${dsp-t} ${dsp-destA},(${s1-An}),${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MACF_S1_INDIRECT_2_DSP_SRC2_DATA_REG, "dsp-macf-s1-indirect-2-dsp-src2-data-reg", "macf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macf${dsp-c}${dsp-t} ${dsp-destA},(${s1-An})${s1-i4-2}++,${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MACF_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_SRC2_DATA_REG, "dsp-macf-s1-indirect-with-post-increment-2-dsp-src2-data-reg", "macf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macf${dsp-c}${dsp-t} ${dsp-destA},${s1-i4-2}(${s1-An})++,${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MACF_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_SRC2_DATA_REG, "dsp-macf-s1-indirect-with-pre-increment-2-dsp-src2-data-reg", "macf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macf${dsp-c}${dsp-t} ${dsp-destA},${s1-direct-addr},${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MACF_S1_DIRECT_DSP_SRC2_REG_ACC_REG_MUL, "dsp-macf-s1-direct-dsp-src2-reg-acc-reg-mul", "macf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macf${dsp-c}${dsp-t} ${dsp-destA},#${s1-imm8},${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MACF_S1_IMMEDIATE_DSP_SRC2_REG_ACC_REG_MUL, "dsp-macf-s1-immediate-dsp-src2-reg-acc-reg-mul", "macf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macf${dsp-c}${dsp-t} ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MACF_S1_INDIRECT_WITH_INDEX_2_DSP_SRC2_REG_ACC_REG_MUL, "dsp-macf-s1-indirect-with-index-2-dsp-src2-reg-acc-reg-mul", "macf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macf${dsp-c}${dsp-t} ${dsp-destA},${s1-imm7-2}(${s1-An}),${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MACF_S1_INDIRECT_WITH_OFFSET_2_DSP_SRC2_REG_ACC_REG_MUL, "dsp-macf-s1-indirect-with-offset-2-dsp-src2-reg-acc-reg-mul", "macf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macf${dsp-c}${dsp-t} ${dsp-destA},(${s1-An}),${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MACF_S1_INDIRECT_2_DSP_SRC2_REG_ACC_REG_MUL, "dsp-macf-s1-indirect-2-dsp-src2-reg-acc-reg-mul", "macf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macf${dsp-c}${dsp-t} ${dsp-destA},(${s1-An})${s1-i4-2}++,${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MACF_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_SRC2_REG_ACC_REG_MUL, "dsp-macf-s1-indirect-with-post-increment-2-dsp-src2-reg-acc-reg-mul", "macf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macf${dsp-c}${dsp-t} ${dsp-destA},${s1-i4-2}(${s1-An})++,${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MACF_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_SRC2_REG_ACC_REG_MUL, "dsp-macf-s1-indirect-with-pre-increment-2-dsp-src2-reg-acc-reg-mul", "macf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macf${dsp-c}${dsp-t} ${dsp-destA},${s1-direct-addr},#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MACF_S1_DIRECT_DSP_IMM_BIT5, "dsp-macf-s1-direct-dsp-imm-bit5", "macf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macf${dsp-c}${dsp-t} ${dsp-destA},#${s1-imm8},#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MACF_S1_IMMEDIATE_DSP_IMM_BIT5, "dsp-macf-s1-immediate-dsp-imm-bit5", "macf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macf${dsp-c}${dsp-t} ${dsp-destA},(${s1-An},${s1-r}),#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MACF_S1_INDIRECT_WITH_INDEX_2_DSP_IMM_BIT5, "dsp-macf-s1-indirect-with-index-2-dsp-imm-bit5", "macf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macf${dsp-c}${dsp-t} ${dsp-destA},${s1-imm7-2}(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MACF_S1_INDIRECT_WITH_OFFSET_2_DSP_IMM_BIT5, "dsp-macf-s1-indirect-with-offset-2-dsp-imm-bit5", "macf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macf${dsp-c}${dsp-t} ${dsp-destA},(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MACF_S1_INDIRECT_2_DSP_IMM_BIT5, "dsp-macf-s1-indirect-2-dsp-imm-bit5", "macf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macf${dsp-c}${dsp-t} ${dsp-destA},(${s1-An})${s1-i4-2}++,#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MACF_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_IMM_BIT5, "dsp-macf-s1-indirect-with-post-increment-2-dsp-imm-bit5", "macf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macf${dsp-c}${dsp-t} ${dsp-destA},${s1-i4-2}(${s1-An})++,#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MACF_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_IMM_BIT5, "dsp-macf-s1-indirect-with-pre-increment-2-dsp-imm-bit5", "macf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulf${dsp-c}${dsp-t} ${dsp-destA},${s1-direct-addr},${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MULF_S1_DIRECT_DSP_SRC2_DATA_REG, "dsp-mulf-s1-direct-dsp-src2-data-reg", "mulf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulf${dsp-c}${dsp-t} ${dsp-destA},#${s1-imm8},${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MULF_S1_IMMEDIATE_DSP_SRC2_DATA_REG, "dsp-mulf-s1-immediate-dsp-src2-data-reg", "mulf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulf${dsp-c}${dsp-t} ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MULF_S1_INDIRECT_WITH_INDEX_2_DSP_SRC2_DATA_REG, "dsp-mulf-s1-indirect-with-index-2-dsp-src2-data-reg", "mulf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulf${dsp-c}${dsp-t} ${dsp-destA},${s1-imm7-2}(${s1-An}),${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MULF_S1_INDIRECT_WITH_OFFSET_2_DSP_SRC2_DATA_REG, "dsp-mulf-s1-indirect-with-offset-2-dsp-src2-data-reg", "mulf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulf${dsp-c}${dsp-t} ${dsp-destA},(${s1-An}),${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MULF_S1_INDIRECT_2_DSP_SRC2_DATA_REG, "dsp-mulf-s1-indirect-2-dsp-src2-data-reg", "mulf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulf${dsp-c}${dsp-t} ${dsp-destA},(${s1-An})${s1-i4-2}++,${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MULF_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_SRC2_DATA_REG, "dsp-mulf-s1-indirect-with-post-increment-2-dsp-src2-data-reg", "mulf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulf${dsp-c}${dsp-t} ${dsp-destA},${s1-i4-2}(${s1-An})++,${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MULF_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_SRC2_DATA_REG, "dsp-mulf-s1-indirect-with-pre-increment-2-dsp-src2-data-reg", "mulf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulf${dsp-c}${dsp-t} ${dsp-destA},${s1-direct-addr},${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MULF_S1_DIRECT_DSP_SRC2_REG_ACC_REG_MUL, "dsp-mulf-s1-direct-dsp-src2-reg-acc-reg-mul", "mulf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulf${dsp-c}${dsp-t} ${dsp-destA},#${s1-imm8},${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MULF_S1_IMMEDIATE_DSP_SRC2_REG_ACC_REG_MUL, "dsp-mulf-s1-immediate-dsp-src2-reg-acc-reg-mul", "mulf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulf${dsp-c}${dsp-t} ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MULF_S1_INDIRECT_WITH_INDEX_2_DSP_SRC2_REG_ACC_REG_MUL, "dsp-mulf-s1-indirect-with-index-2-dsp-src2-reg-acc-reg-mul", "mulf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulf${dsp-c}${dsp-t} ${dsp-destA},${s1-imm7-2}(${s1-An}),${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MULF_S1_INDIRECT_WITH_OFFSET_2_DSP_SRC2_REG_ACC_REG_MUL, "dsp-mulf-s1-indirect-with-offset-2-dsp-src2-reg-acc-reg-mul", "mulf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulf${dsp-c}${dsp-t} ${dsp-destA},(${s1-An}),${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MULF_S1_INDIRECT_2_DSP_SRC2_REG_ACC_REG_MUL, "dsp-mulf-s1-indirect-2-dsp-src2-reg-acc-reg-mul", "mulf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulf${dsp-c}${dsp-t} ${dsp-destA},(${s1-An})${s1-i4-2}++,${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MULF_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_SRC2_REG_ACC_REG_MUL, "dsp-mulf-s1-indirect-with-post-increment-2-dsp-src2-reg-acc-reg-mul", "mulf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulf${dsp-c}${dsp-t} ${dsp-destA},${s1-i4-2}(${s1-An})++,${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MULF_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_SRC2_REG_ACC_REG_MUL, "dsp-mulf-s1-indirect-with-pre-increment-2-dsp-src2-reg-acc-reg-mul", "mulf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulf${dsp-c}${dsp-t} ${dsp-destA},${s1-direct-addr},#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MULF_S1_DIRECT_DSP_IMM_BIT5, "dsp-mulf-s1-direct-dsp-imm-bit5", "mulf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulf${dsp-c}${dsp-t} ${dsp-destA},#${s1-imm8},#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MULF_S1_IMMEDIATE_DSP_IMM_BIT5, "dsp-mulf-s1-immediate-dsp-imm-bit5", "mulf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulf${dsp-c}${dsp-t} ${dsp-destA},(${s1-An},${s1-r}),#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MULF_S1_INDIRECT_WITH_INDEX_2_DSP_IMM_BIT5, "dsp-mulf-s1-indirect-with-index-2-dsp-imm-bit5", "mulf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulf${dsp-c}${dsp-t} ${dsp-destA},${s1-imm7-2}(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MULF_S1_INDIRECT_WITH_OFFSET_2_DSP_IMM_BIT5, "dsp-mulf-s1-indirect-with-offset-2-dsp-imm-bit5", "mulf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulf${dsp-c}${dsp-t} ${dsp-destA},(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MULF_S1_INDIRECT_2_DSP_IMM_BIT5, "dsp-mulf-s1-indirect-2-dsp-imm-bit5", "mulf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulf${dsp-c}${dsp-t} ${dsp-destA},(${s1-An})${s1-i4-2}++,#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MULF_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_IMM_BIT5, "dsp-mulf-s1-indirect-with-post-increment-2-dsp-imm-bit5", "mulf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulf${dsp-c}${dsp-t} ${dsp-destA},${s1-i4-2}(${s1-An})++,#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MULF_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_IMM_BIT5, "dsp-mulf-s1-indirect-with-pre-increment-2-dsp-imm-bit5", "mulf", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macu${dsp-c}${dsp-t} ${dsp-destA},${s1-direct-addr},${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MACU_S1_DIRECT_DSP_SRC2_DATA_REG, "dsp-macu-s1-direct-dsp-src2-data-reg", "macu", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macu${dsp-c}${dsp-t} ${dsp-destA},#${s1-imm8},${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MACU_S1_IMMEDIATE_DSP_SRC2_DATA_REG, "dsp-macu-s1-immediate-dsp-src2-data-reg", "macu", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macu${dsp-c}${dsp-t} ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MACU_S1_INDIRECT_WITH_INDEX_2_DSP_SRC2_DATA_REG, "dsp-macu-s1-indirect-with-index-2-dsp-src2-data-reg", "macu", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macu${dsp-c}${dsp-t} ${dsp-destA},${s1-imm7-2}(${s1-An}),${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MACU_S1_INDIRECT_WITH_OFFSET_2_DSP_SRC2_DATA_REG, "dsp-macu-s1-indirect-with-offset-2-dsp-src2-data-reg", "macu", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macu${dsp-c}${dsp-t} ${dsp-destA},(${s1-An}),${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MACU_S1_INDIRECT_2_DSP_SRC2_DATA_REG, "dsp-macu-s1-indirect-2-dsp-src2-data-reg", "macu", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macu${dsp-c}${dsp-t} ${dsp-destA},(${s1-An})${s1-i4-2}++,${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MACU_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_SRC2_DATA_REG, "dsp-macu-s1-indirect-with-post-increment-2-dsp-src2-data-reg", "macu", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macu${dsp-c}${dsp-t} ${dsp-destA},${s1-i4-2}(${s1-An})++,${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MACU_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_SRC2_DATA_REG, "dsp-macu-s1-indirect-with-pre-increment-2-dsp-src2-data-reg", "macu", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macu${dsp-c}${dsp-t} ${dsp-destA},${s1-direct-addr},${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MACU_S1_DIRECT_DSP_SRC2_REG_ACC_REG_MUL, "dsp-macu-s1-direct-dsp-src2-reg-acc-reg-mul", "macu", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macu${dsp-c}${dsp-t} ${dsp-destA},#${s1-imm8},${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MACU_S1_IMMEDIATE_DSP_SRC2_REG_ACC_REG_MUL, "dsp-macu-s1-immediate-dsp-src2-reg-acc-reg-mul", "macu", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macu${dsp-c}${dsp-t} ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MACU_S1_INDIRECT_WITH_INDEX_2_DSP_SRC2_REG_ACC_REG_MUL, "dsp-macu-s1-indirect-with-index-2-dsp-src2-reg-acc-reg-mul", "macu", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macu${dsp-c}${dsp-t} ${dsp-destA},${s1-imm7-2}(${s1-An}),${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MACU_S1_INDIRECT_WITH_OFFSET_2_DSP_SRC2_REG_ACC_REG_MUL, "dsp-macu-s1-indirect-with-offset-2-dsp-src2-reg-acc-reg-mul", "macu", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macu${dsp-c}${dsp-t} ${dsp-destA},(${s1-An}),${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MACU_S1_INDIRECT_2_DSP_SRC2_REG_ACC_REG_MUL, "dsp-macu-s1-indirect-2-dsp-src2-reg-acc-reg-mul", "macu", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macu${dsp-c}${dsp-t} ${dsp-destA},(${s1-An})${s1-i4-2}++,${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MACU_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_SRC2_REG_ACC_REG_MUL, "dsp-macu-s1-indirect-with-post-increment-2-dsp-src2-reg-acc-reg-mul", "macu", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macu${dsp-c}${dsp-t} ${dsp-destA},${s1-i4-2}(${s1-An})++,${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MACU_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_SRC2_REG_ACC_REG_MUL, "dsp-macu-s1-indirect-with-pre-increment-2-dsp-src2-reg-acc-reg-mul", "macu", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macu${dsp-c}${dsp-t} ${dsp-destA},${s1-direct-addr},#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MACU_S1_DIRECT_DSP_IMM_BIT5, "dsp-macu-s1-direct-dsp-imm-bit5", "macu", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macu${dsp-c}${dsp-t} ${dsp-destA},#${s1-imm8},#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MACU_S1_IMMEDIATE_DSP_IMM_BIT5, "dsp-macu-s1-immediate-dsp-imm-bit5", "macu", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macu${dsp-c}${dsp-t} ${dsp-destA},(${s1-An},${s1-r}),#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MACU_S1_INDIRECT_WITH_INDEX_2_DSP_IMM_BIT5, "dsp-macu-s1-indirect-with-index-2-dsp-imm-bit5", "macu", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macu${dsp-c}${dsp-t} ${dsp-destA},${s1-imm7-2}(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MACU_S1_INDIRECT_WITH_OFFSET_2_DSP_IMM_BIT5, "dsp-macu-s1-indirect-with-offset-2-dsp-imm-bit5", "macu", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macu${dsp-c}${dsp-t} ${dsp-destA},(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MACU_S1_INDIRECT_2_DSP_IMM_BIT5, "dsp-macu-s1-indirect-2-dsp-imm-bit5", "macu", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macu${dsp-c}${dsp-t} ${dsp-destA},(${s1-An})${s1-i4-2}++,#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MACU_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_IMM_BIT5, "dsp-macu-s1-indirect-with-post-increment-2-dsp-imm-bit5", "macu", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macu${dsp-c}${dsp-t} ${dsp-destA},${s1-i4-2}(${s1-An})++,#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MACU_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_IMM_BIT5, "dsp-macu-s1-indirect-with-pre-increment-2-dsp-imm-bit5", "macu", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macu.4 ${dsp-destA},${s1-direct-addr},${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MACU_4_S1_DIRECT_DSP_SRC2_DATA_REG, "dsp-macu.4-s1-direct-dsp-src2-data-reg", "macu.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* macu.4 ${dsp-destA},#${s1-imm8},${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MACU_4_S1_IMMEDIATE_DSP_SRC2_DATA_REG, "dsp-macu.4-s1-immediate-dsp-src2-data-reg", "macu.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* macu.4 ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MACU_4_S1_INDIRECT_WITH_INDEX_4_DSP_SRC2_DATA_REG, "dsp-macu.4-s1-indirect-with-index-4-dsp-src2-data-reg", "macu.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* macu.4 ${dsp-destA},${s1-imm7-4}(${s1-An}),${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MACU_4_S1_INDIRECT_WITH_OFFSET_4_DSP_SRC2_DATA_REG, "dsp-macu.4-s1-indirect-with-offset-4-dsp-src2-data-reg", "macu.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* macu.4 ${dsp-destA},(${s1-An}),${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MACU_4_S1_INDIRECT_4_DSP_SRC2_DATA_REG, "dsp-macu.4-s1-indirect-4-dsp-src2-data-reg", "macu.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* macu.4 ${dsp-destA},(${s1-An})${s1-i4-4}++,${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MACU_4_S1_INDIRECT_WITH_POST_INCREMENT_4_DSP_SRC2_DATA_REG, "dsp-macu.4-s1-indirect-with-post-increment-4-dsp-src2-data-reg", "macu.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* macu.4 ${dsp-destA},${s1-i4-4}(${s1-An})++,${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MACU_4_S1_INDIRECT_WITH_PRE_INCREMENT_4_DSP_SRC2_DATA_REG, "dsp-macu.4-s1-indirect-with-pre-increment-4-dsp-src2-data-reg", "macu.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* macu.4 ${dsp-destA},${s1-direct-addr},${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MACU_4_S1_DIRECT_DSP_SRC2_REG_ACC_REG_MUL, "dsp-macu.4-s1-direct-dsp-src2-reg-acc-reg-mul", "macu.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* macu.4 ${dsp-destA},#${s1-imm8},${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MACU_4_S1_IMMEDIATE_DSP_SRC2_REG_ACC_REG_MUL, "dsp-macu.4-s1-immediate-dsp-src2-reg-acc-reg-mul", "macu.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* macu.4 ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MACU_4_S1_INDIRECT_WITH_INDEX_4_DSP_SRC2_REG_ACC_REG_MUL, "dsp-macu.4-s1-indirect-with-index-4-dsp-src2-reg-acc-reg-mul", "macu.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* macu.4 ${dsp-destA},${s1-imm7-4}(${s1-An}),${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MACU_4_S1_INDIRECT_WITH_OFFSET_4_DSP_SRC2_REG_ACC_REG_MUL, "dsp-macu.4-s1-indirect-with-offset-4-dsp-src2-reg-acc-reg-mul", "macu.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* macu.4 ${dsp-destA},(${s1-An}),${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MACU_4_S1_INDIRECT_4_DSP_SRC2_REG_ACC_REG_MUL, "dsp-macu.4-s1-indirect-4-dsp-src2-reg-acc-reg-mul", "macu.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* macu.4 ${dsp-destA},(${s1-An})${s1-i4-4}++,${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MACU_4_S1_INDIRECT_WITH_POST_INCREMENT_4_DSP_SRC2_REG_ACC_REG_MUL, "dsp-macu.4-s1-indirect-with-post-increment-4-dsp-src2-reg-acc-reg-mul", "macu.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* macu.4 ${dsp-destA},${s1-i4-4}(${s1-An})++,${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MACU_4_S1_INDIRECT_WITH_PRE_INCREMENT_4_DSP_SRC2_REG_ACC_REG_MUL, "dsp-macu.4-s1-indirect-with-pre-increment-4-dsp-src2-reg-acc-reg-mul", "macu.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* macu.4 ${dsp-destA},${s1-direct-addr},#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MACU_4_S1_DIRECT_DSP_IMM_BIT5, "dsp-macu.4-s1-direct-dsp-imm-bit5", "macu.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* macu.4 ${dsp-destA},#${s1-imm8},#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MACU_4_S1_IMMEDIATE_DSP_IMM_BIT5, "dsp-macu.4-s1-immediate-dsp-imm-bit5", "macu.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* macu.4 ${dsp-destA},(${s1-An},${s1-r}),#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MACU_4_S1_INDIRECT_WITH_INDEX_4_DSP_IMM_BIT5, "dsp-macu.4-s1-indirect-with-index-4-dsp-imm-bit5", "macu.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* macu.4 ${dsp-destA},${s1-imm7-4}(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MACU_4_S1_INDIRECT_WITH_OFFSET_4_DSP_IMM_BIT5, "dsp-macu.4-s1-indirect-with-offset-4-dsp-imm-bit5", "macu.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* macu.4 ${dsp-destA},(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MACU_4_S1_INDIRECT_4_DSP_IMM_BIT5, "dsp-macu.4-s1-indirect-4-dsp-imm-bit5", "macu.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* macu.4 ${dsp-destA},(${s1-An})${s1-i4-4}++,#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MACU_4_S1_INDIRECT_WITH_POST_INCREMENT_4_DSP_IMM_BIT5, "dsp-macu.4-s1-indirect-with-post-increment-4-dsp-imm-bit5", "macu.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* macu.4 ${dsp-destA},${s1-i4-4}(${s1-An})++,#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MACU_4_S1_INDIRECT_WITH_PRE_INCREMENT_4_DSP_IMM_BIT5, "dsp-macu.4-s1-indirect-with-pre-increment-4-dsp-imm-bit5", "macu.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* mulu.4 ${dsp-destA},${s1-direct-addr},${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MULU_4_S1_DIRECT_DSP_SRC2_DATA_REG, "dsp-mulu.4-s1-direct-dsp-src2-data-reg", "mulu.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulu.4 ${dsp-destA},#${s1-imm8},${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MULU_4_S1_IMMEDIATE_DSP_SRC2_DATA_REG, "dsp-mulu.4-s1-immediate-dsp-src2-data-reg", "mulu.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulu.4 ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MULU_4_S1_INDIRECT_WITH_INDEX_4_DSP_SRC2_DATA_REG, "dsp-mulu.4-s1-indirect-with-index-4-dsp-src2-data-reg", "mulu.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulu.4 ${dsp-destA},${s1-imm7-4}(${s1-An}),${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MULU_4_S1_INDIRECT_WITH_OFFSET_4_DSP_SRC2_DATA_REG, "dsp-mulu.4-s1-indirect-with-offset-4-dsp-src2-data-reg", "mulu.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulu.4 ${dsp-destA},(${s1-An}),${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MULU_4_S1_INDIRECT_4_DSP_SRC2_DATA_REG, "dsp-mulu.4-s1-indirect-4-dsp-src2-data-reg", "mulu.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulu.4 ${dsp-destA},(${s1-An})${s1-i4-4}++,${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MULU_4_S1_INDIRECT_WITH_POST_INCREMENT_4_DSP_SRC2_DATA_REG, "dsp-mulu.4-s1-indirect-with-post-increment-4-dsp-src2-data-reg", "mulu.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulu.4 ${dsp-destA},${s1-i4-4}(${s1-An})++,${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MULU_4_S1_INDIRECT_WITH_PRE_INCREMENT_4_DSP_SRC2_DATA_REG, "dsp-mulu.4-s1-indirect-with-pre-increment-4-dsp-src2-data-reg", "mulu.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulu.4 ${dsp-destA},${s1-direct-addr},${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MULU_4_S1_DIRECT_DSP_SRC2_REG_ACC_REG_MUL, "dsp-mulu.4-s1-direct-dsp-src2-reg-acc-reg-mul", "mulu.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulu.4 ${dsp-destA},#${s1-imm8},${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MULU_4_S1_IMMEDIATE_DSP_SRC2_REG_ACC_REG_MUL, "dsp-mulu.4-s1-immediate-dsp-src2-reg-acc-reg-mul", "mulu.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulu.4 ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MULU_4_S1_INDIRECT_WITH_INDEX_4_DSP_SRC2_REG_ACC_REG_MUL, "dsp-mulu.4-s1-indirect-with-index-4-dsp-src2-reg-acc-reg-mul", "mulu.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulu.4 ${dsp-destA},${s1-imm7-4}(${s1-An}),${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MULU_4_S1_INDIRECT_WITH_OFFSET_4_DSP_SRC2_REG_ACC_REG_MUL, "dsp-mulu.4-s1-indirect-with-offset-4-dsp-src2-reg-acc-reg-mul", "mulu.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulu.4 ${dsp-destA},(${s1-An}),${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MULU_4_S1_INDIRECT_4_DSP_SRC2_REG_ACC_REG_MUL, "dsp-mulu.4-s1-indirect-4-dsp-src2-reg-acc-reg-mul", "mulu.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulu.4 ${dsp-destA},(${s1-An})${s1-i4-4}++,${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MULU_4_S1_INDIRECT_WITH_POST_INCREMENT_4_DSP_SRC2_REG_ACC_REG_MUL, "dsp-mulu.4-s1-indirect-with-post-increment-4-dsp-src2-reg-acc-reg-mul", "mulu.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulu.4 ${dsp-destA},${s1-i4-4}(${s1-An})++,${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MULU_4_S1_INDIRECT_WITH_PRE_INCREMENT_4_DSP_SRC2_REG_ACC_REG_MUL, "dsp-mulu.4-s1-indirect-with-pre-increment-4-dsp-src2-reg-acc-reg-mul", "mulu.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulu.4 ${dsp-destA},${s1-direct-addr},#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MULU_4_S1_DIRECT_DSP_IMM_BIT5, "dsp-mulu.4-s1-direct-dsp-imm-bit5", "mulu.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulu.4 ${dsp-destA},#${s1-imm8},#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MULU_4_S1_IMMEDIATE_DSP_IMM_BIT5, "dsp-mulu.4-s1-immediate-dsp-imm-bit5", "mulu.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulu.4 ${dsp-destA},(${s1-An},${s1-r}),#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MULU_4_S1_INDIRECT_WITH_INDEX_4_DSP_IMM_BIT5, "dsp-mulu.4-s1-indirect-with-index-4-dsp-imm-bit5", "mulu.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulu.4 ${dsp-destA},${s1-imm7-4}(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MULU_4_S1_INDIRECT_WITH_OFFSET_4_DSP_IMM_BIT5, "dsp-mulu.4-s1-indirect-with-offset-4-dsp-imm-bit5", "mulu.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulu.4 ${dsp-destA},(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MULU_4_S1_INDIRECT_4_DSP_IMM_BIT5, "dsp-mulu.4-s1-indirect-4-dsp-imm-bit5", "mulu.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulu.4 ${dsp-destA},(${s1-An})${s1-i4-4}++,#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MULU_4_S1_INDIRECT_WITH_POST_INCREMENT_4_DSP_IMM_BIT5, "dsp-mulu.4-s1-indirect-with-post-increment-4-dsp-imm-bit5", "mulu.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulu.4 ${dsp-destA},${s1-i4-4}(${s1-An})++,#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MULU_4_S1_INDIRECT_WITH_PRE_INCREMENT_4_DSP_IMM_BIT5, "dsp-mulu.4-s1-indirect-with-pre-increment-4-dsp-imm-bit5", "mulu.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulu${dsp-t} ${dsp-destA},${s1-direct-addr},${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MULU_S1_DIRECT_DSP_SRC2_DATA_REG, "dsp-mulu-s1-direct-dsp-src2-data-reg", "mulu", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulu${dsp-t} ${dsp-destA},#${s1-imm8},${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MULU_S1_IMMEDIATE_DSP_SRC2_DATA_REG, "dsp-mulu-s1-immediate-dsp-src2-data-reg", "mulu", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulu${dsp-t} ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MULU_S1_INDIRECT_WITH_INDEX_2_DSP_SRC2_DATA_REG, "dsp-mulu-s1-indirect-with-index-2-dsp-src2-data-reg", "mulu", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulu${dsp-t} ${dsp-destA},${s1-imm7-2}(${s1-An}),${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MULU_S1_INDIRECT_WITH_OFFSET_2_DSP_SRC2_DATA_REG, "dsp-mulu-s1-indirect-with-offset-2-dsp-src2-data-reg", "mulu", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulu${dsp-t} ${dsp-destA},(${s1-An}),${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MULU_S1_INDIRECT_2_DSP_SRC2_DATA_REG, "dsp-mulu-s1-indirect-2-dsp-src2-data-reg", "mulu", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulu${dsp-t} ${dsp-destA},(${s1-An})${s1-i4-2}++,${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MULU_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_SRC2_DATA_REG, "dsp-mulu-s1-indirect-with-post-increment-2-dsp-src2-data-reg", "mulu", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulu${dsp-t} ${dsp-destA},${s1-i4-2}(${s1-An})++,${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MULU_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_SRC2_DATA_REG, "dsp-mulu-s1-indirect-with-pre-increment-2-dsp-src2-data-reg", "mulu", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulu${dsp-t} ${dsp-destA},${s1-direct-addr},${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MULU_S1_DIRECT_DSP_SRC2_REG_ACC_REG_MUL, "dsp-mulu-s1-direct-dsp-src2-reg-acc-reg-mul", "mulu", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulu${dsp-t} ${dsp-destA},#${s1-imm8},${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MULU_S1_IMMEDIATE_DSP_SRC2_REG_ACC_REG_MUL, "dsp-mulu-s1-immediate-dsp-src2-reg-acc-reg-mul", "mulu", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulu${dsp-t} ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MULU_S1_INDIRECT_WITH_INDEX_2_DSP_SRC2_REG_ACC_REG_MUL, "dsp-mulu-s1-indirect-with-index-2-dsp-src2-reg-acc-reg-mul", "mulu", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulu${dsp-t} ${dsp-destA},${s1-imm7-2}(${s1-An}),${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MULU_S1_INDIRECT_WITH_OFFSET_2_DSP_SRC2_REG_ACC_REG_MUL, "dsp-mulu-s1-indirect-with-offset-2-dsp-src2-reg-acc-reg-mul", "mulu", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulu${dsp-t} ${dsp-destA},(${s1-An}),${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MULU_S1_INDIRECT_2_DSP_SRC2_REG_ACC_REG_MUL, "dsp-mulu-s1-indirect-2-dsp-src2-reg-acc-reg-mul", "mulu", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulu${dsp-t} ${dsp-destA},(${s1-An})${s1-i4-2}++,${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MULU_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_SRC2_REG_ACC_REG_MUL, "dsp-mulu-s1-indirect-with-post-increment-2-dsp-src2-reg-acc-reg-mul", "mulu", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulu${dsp-t} ${dsp-destA},${s1-i4-2}(${s1-An})++,${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MULU_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_SRC2_REG_ACC_REG_MUL, "dsp-mulu-s1-indirect-with-pre-increment-2-dsp-src2-reg-acc-reg-mul", "mulu", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulu${dsp-t} ${dsp-destA},${s1-direct-addr},#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MULU_S1_DIRECT_DSP_IMM_BIT5, "dsp-mulu-s1-direct-dsp-imm-bit5", "mulu", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulu${dsp-t} ${dsp-destA},#${s1-imm8},#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MULU_S1_IMMEDIATE_DSP_IMM_BIT5, "dsp-mulu-s1-immediate-dsp-imm-bit5", "mulu", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulu${dsp-t} ${dsp-destA},(${s1-An},${s1-r}),#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MULU_S1_INDIRECT_WITH_INDEX_2_DSP_IMM_BIT5, "dsp-mulu-s1-indirect-with-index-2-dsp-imm-bit5", "mulu", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulu${dsp-t} ${dsp-destA},${s1-imm7-2}(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MULU_S1_INDIRECT_WITH_OFFSET_2_DSP_IMM_BIT5, "dsp-mulu-s1-indirect-with-offset-2-dsp-imm-bit5", "mulu", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulu${dsp-t} ${dsp-destA},(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MULU_S1_INDIRECT_2_DSP_IMM_BIT5, "dsp-mulu-s1-indirect-2-dsp-imm-bit5", "mulu", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulu${dsp-t} ${dsp-destA},(${s1-An})${s1-i4-2}++,#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MULU_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_IMM_BIT5, "dsp-mulu-s1-indirect-with-post-increment-2-dsp-imm-bit5", "mulu", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* mulu${dsp-t} ${dsp-destA},${s1-i4-2}(${s1-An})++,#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MULU_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_IMM_BIT5, "dsp-mulu-s1-indirect-with-pre-increment-2-dsp-imm-bit5", "mulu", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macs${dsp-c}${dsp-t} ${dsp-destA},${s1-direct-addr},${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MACS_S1_DIRECT_DSP_SRC2_DATA_REG, "dsp-macs-s1-direct-dsp-src2-data-reg", "macs", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macs${dsp-c}${dsp-t} ${dsp-destA},#${s1-imm8},${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MACS_S1_IMMEDIATE_DSP_SRC2_DATA_REG, "dsp-macs-s1-immediate-dsp-src2-data-reg", "macs", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macs${dsp-c}${dsp-t} ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MACS_S1_INDIRECT_WITH_INDEX_2_DSP_SRC2_DATA_REG, "dsp-macs-s1-indirect-with-index-2-dsp-src2-data-reg", "macs", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macs${dsp-c}${dsp-t} ${dsp-destA},${s1-imm7-2}(${s1-An}),${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MACS_S1_INDIRECT_WITH_OFFSET_2_DSP_SRC2_DATA_REG, "dsp-macs-s1-indirect-with-offset-2-dsp-src2-data-reg", "macs", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macs${dsp-c}${dsp-t} ${dsp-destA},(${s1-An}),${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MACS_S1_INDIRECT_2_DSP_SRC2_DATA_REG, "dsp-macs-s1-indirect-2-dsp-src2-data-reg", "macs", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macs${dsp-c}${dsp-t} ${dsp-destA},(${s1-An})${s1-i4-2}++,${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MACS_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_SRC2_DATA_REG, "dsp-macs-s1-indirect-with-post-increment-2-dsp-src2-data-reg", "macs", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macs${dsp-c}${dsp-t} ${dsp-destA},${s1-i4-2}(${s1-An})++,${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MACS_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_SRC2_DATA_REG, "dsp-macs-s1-indirect-with-pre-increment-2-dsp-src2-data-reg", "macs", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macs${dsp-c}${dsp-t} ${dsp-destA},${s1-direct-addr},${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MACS_S1_DIRECT_DSP_SRC2_REG_ACC_REG_MUL, "dsp-macs-s1-direct-dsp-src2-reg-acc-reg-mul", "macs", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macs${dsp-c}${dsp-t} ${dsp-destA},#${s1-imm8},${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MACS_S1_IMMEDIATE_DSP_SRC2_REG_ACC_REG_MUL, "dsp-macs-s1-immediate-dsp-src2-reg-acc-reg-mul", "macs", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macs${dsp-c}${dsp-t} ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MACS_S1_INDIRECT_WITH_INDEX_2_DSP_SRC2_REG_ACC_REG_MUL, "dsp-macs-s1-indirect-with-index-2-dsp-src2-reg-acc-reg-mul", "macs", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macs${dsp-c}${dsp-t} ${dsp-destA},${s1-imm7-2}(${s1-An}),${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MACS_S1_INDIRECT_WITH_OFFSET_2_DSP_SRC2_REG_ACC_REG_MUL, "dsp-macs-s1-indirect-with-offset-2-dsp-src2-reg-acc-reg-mul", "macs", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macs${dsp-c}${dsp-t} ${dsp-destA},(${s1-An}),${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MACS_S1_INDIRECT_2_DSP_SRC2_REG_ACC_REG_MUL, "dsp-macs-s1-indirect-2-dsp-src2-reg-acc-reg-mul", "macs", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macs${dsp-c}${dsp-t} ${dsp-destA},(${s1-An})${s1-i4-2}++,${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MACS_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_SRC2_REG_ACC_REG_MUL, "dsp-macs-s1-indirect-with-post-increment-2-dsp-src2-reg-acc-reg-mul", "macs", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macs${dsp-c}${dsp-t} ${dsp-destA},${s1-i4-2}(${s1-An})++,${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MACS_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_SRC2_REG_ACC_REG_MUL, "dsp-macs-s1-indirect-with-pre-increment-2-dsp-src2-reg-acc-reg-mul", "macs", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macs${dsp-c}${dsp-t} ${dsp-destA},${s1-direct-addr},#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MACS_S1_DIRECT_DSP_IMM_BIT5, "dsp-macs-s1-direct-dsp-imm-bit5", "macs", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macs${dsp-c}${dsp-t} ${dsp-destA},#${s1-imm8},#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MACS_S1_IMMEDIATE_DSP_IMM_BIT5, "dsp-macs-s1-immediate-dsp-imm-bit5", "macs", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macs${dsp-c}${dsp-t} ${dsp-destA},(${s1-An},${s1-r}),#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MACS_S1_INDIRECT_WITH_INDEX_2_DSP_IMM_BIT5, "dsp-macs-s1-indirect-with-index-2-dsp-imm-bit5", "macs", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macs${dsp-c}${dsp-t} ${dsp-destA},${s1-imm7-2}(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MACS_S1_INDIRECT_WITH_OFFSET_2_DSP_IMM_BIT5, "dsp-macs-s1-indirect-with-offset-2-dsp-imm-bit5", "macs", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macs${dsp-c}${dsp-t} ${dsp-destA},(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MACS_S1_INDIRECT_2_DSP_IMM_BIT5, "dsp-macs-s1-indirect-2-dsp-imm-bit5", "macs", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macs${dsp-c}${dsp-t} ${dsp-destA},(${s1-An})${s1-i4-2}++,#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MACS_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_IMM_BIT5, "dsp-macs-s1-indirect-with-post-increment-2-dsp-imm-bit5", "macs", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macs${dsp-c}${dsp-t} ${dsp-destA},${s1-i4-2}(${s1-An})++,#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MACS_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_IMM_BIT5, "dsp-macs-s1-indirect-with-pre-increment-2-dsp-imm-bit5", "macs", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* macs.4 ${dsp-destA},${s1-direct-addr},${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MACS_4_S1_DIRECT_DSP_SRC2_DATA_REG, "dsp-macs.4-s1-direct-dsp-src2-data-reg", "macs.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* macs.4 ${dsp-destA},#${s1-imm8},${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MACS_4_S1_IMMEDIATE_DSP_SRC2_DATA_REG, "dsp-macs.4-s1-immediate-dsp-src2-data-reg", "macs.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* macs.4 ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MACS_4_S1_INDIRECT_WITH_INDEX_4_DSP_SRC2_DATA_REG, "dsp-macs.4-s1-indirect-with-index-4-dsp-src2-data-reg", "macs.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* macs.4 ${dsp-destA},${s1-imm7-4}(${s1-An}),${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MACS_4_S1_INDIRECT_WITH_OFFSET_4_DSP_SRC2_DATA_REG, "dsp-macs.4-s1-indirect-with-offset-4-dsp-src2-data-reg", "macs.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* macs.4 ${dsp-destA},(${s1-An}),${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MACS_4_S1_INDIRECT_4_DSP_SRC2_DATA_REG, "dsp-macs.4-s1-indirect-4-dsp-src2-data-reg", "macs.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* macs.4 ${dsp-destA},(${s1-An})${s1-i4-4}++,${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MACS_4_S1_INDIRECT_WITH_POST_INCREMENT_4_DSP_SRC2_DATA_REG, "dsp-macs.4-s1-indirect-with-post-increment-4-dsp-src2-data-reg", "macs.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* macs.4 ${dsp-destA},${s1-i4-4}(${s1-An})++,${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MACS_4_S1_INDIRECT_WITH_PRE_INCREMENT_4_DSP_SRC2_DATA_REG, "dsp-macs.4-s1-indirect-with-pre-increment-4-dsp-src2-data-reg", "macs.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* macs.4 ${dsp-destA},${s1-direct-addr},${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MACS_4_S1_DIRECT_DSP_SRC2_REG_ACC_REG_MUL, "dsp-macs.4-s1-direct-dsp-src2-reg-acc-reg-mul", "macs.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* macs.4 ${dsp-destA},#${s1-imm8},${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MACS_4_S1_IMMEDIATE_DSP_SRC2_REG_ACC_REG_MUL, "dsp-macs.4-s1-immediate-dsp-src2-reg-acc-reg-mul", "macs.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* macs.4 ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MACS_4_S1_INDIRECT_WITH_INDEX_4_DSP_SRC2_REG_ACC_REG_MUL, "dsp-macs.4-s1-indirect-with-index-4-dsp-src2-reg-acc-reg-mul", "macs.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* macs.4 ${dsp-destA},${s1-imm7-4}(${s1-An}),${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MACS_4_S1_INDIRECT_WITH_OFFSET_4_DSP_SRC2_REG_ACC_REG_MUL, "dsp-macs.4-s1-indirect-with-offset-4-dsp-src2-reg-acc-reg-mul", "macs.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* macs.4 ${dsp-destA},(${s1-An}),${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MACS_4_S1_INDIRECT_4_DSP_SRC2_REG_ACC_REG_MUL, "dsp-macs.4-s1-indirect-4-dsp-src2-reg-acc-reg-mul", "macs.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* macs.4 ${dsp-destA},(${s1-An})${s1-i4-4}++,${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MACS_4_S1_INDIRECT_WITH_POST_INCREMENT_4_DSP_SRC2_REG_ACC_REG_MUL, "dsp-macs.4-s1-indirect-with-post-increment-4-dsp-src2-reg-acc-reg-mul", "macs.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* macs.4 ${dsp-destA},${s1-i4-4}(${s1-An})++,${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MACS_4_S1_INDIRECT_WITH_PRE_INCREMENT_4_DSP_SRC2_REG_ACC_REG_MUL, "dsp-macs.4-s1-indirect-with-pre-increment-4-dsp-src2-reg-acc-reg-mul", "macs.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* macs.4 ${dsp-destA},${s1-direct-addr},#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MACS_4_S1_DIRECT_DSP_IMM_BIT5, "dsp-macs.4-s1-direct-dsp-imm-bit5", "macs.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* macs.4 ${dsp-destA},#${s1-imm8},#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MACS_4_S1_IMMEDIATE_DSP_IMM_BIT5, "dsp-macs.4-s1-immediate-dsp-imm-bit5", "macs.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* macs.4 ${dsp-destA},(${s1-An},${s1-r}),#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MACS_4_S1_INDIRECT_WITH_INDEX_4_DSP_IMM_BIT5, "dsp-macs.4-s1-indirect-with-index-4-dsp-imm-bit5", "macs.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* macs.4 ${dsp-destA},${s1-imm7-4}(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MACS_4_S1_INDIRECT_WITH_OFFSET_4_DSP_IMM_BIT5, "dsp-macs.4-s1-indirect-with-offset-4-dsp-imm-bit5", "macs.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* macs.4 ${dsp-destA},(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MACS_4_S1_INDIRECT_4_DSP_IMM_BIT5, "dsp-macs.4-s1-indirect-4-dsp-imm-bit5", "macs.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* macs.4 ${dsp-destA},(${s1-An})${s1-i4-4}++,#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MACS_4_S1_INDIRECT_WITH_POST_INCREMENT_4_DSP_IMM_BIT5, "dsp-macs.4-s1-indirect-with-post-increment-4-dsp-imm-bit5", "macs.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* macs.4 ${dsp-destA},${s1-i4-4}(${s1-An})++,#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MACS_4_S1_INDIRECT_WITH_PRE_INCREMENT_4_DSP_IMM_BIT5, "dsp-macs.4-s1-indirect-with-pre-increment-4-dsp-imm-bit5", "macs.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* muls.4 ${dsp-destA},${s1-direct-addr},${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MULS_4_S1_DIRECT_DSP_SRC2_DATA_REG, "dsp-muls.4-s1-direct-dsp-src2-data-reg", "muls.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* muls.4 ${dsp-destA},#${s1-imm8},${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MULS_4_S1_IMMEDIATE_DSP_SRC2_DATA_REG, "dsp-muls.4-s1-immediate-dsp-src2-data-reg", "muls.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* muls.4 ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MULS_4_S1_INDIRECT_WITH_INDEX_4_DSP_SRC2_DATA_REG, "dsp-muls.4-s1-indirect-with-index-4-dsp-src2-data-reg", "muls.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* muls.4 ${dsp-destA},${s1-imm7-4}(${s1-An}),${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MULS_4_S1_INDIRECT_WITH_OFFSET_4_DSP_SRC2_DATA_REG, "dsp-muls.4-s1-indirect-with-offset-4-dsp-src2-data-reg", "muls.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* muls.4 ${dsp-destA},(${s1-An}),${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MULS_4_S1_INDIRECT_4_DSP_SRC2_DATA_REG, "dsp-muls.4-s1-indirect-4-dsp-src2-data-reg", "muls.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* muls.4 ${dsp-destA},(${s1-An})${s1-i4-4}++,${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MULS_4_S1_INDIRECT_WITH_POST_INCREMENT_4_DSP_SRC2_DATA_REG, "dsp-muls.4-s1-indirect-with-post-increment-4-dsp-src2-data-reg", "muls.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* muls.4 ${dsp-destA},${s1-i4-4}(${s1-An})++,${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MULS_4_S1_INDIRECT_WITH_PRE_INCREMENT_4_DSP_SRC2_DATA_REG, "dsp-muls.4-s1-indirect-with-pre-increment-4-dsp-src2-data-reg", "muls.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* muls.4 ${dsp-destA},${s1-direct-addr},${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MULS_4_S1_DIRECT_DSP_SRC2_REG_ACC_REG_MUL, "dsp-muls.4-s1-direct-dsp-src2-reg-acc-reg-mul", "muls.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* muls.4 ${dsp-destA},#${s1-imm8},${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MULS_4_S1_IMMEDIATE_DSP_SRC2_REG_ACC_REG_MUL, "dsp-muls.4-s1-immediate-dsp-src2-reg-acc-reg-mul", "muls.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* muls.4 ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MULS_4_S1_INDIRECT_WITH_INDEX_4_DSP_SRC2_REG_ACC_REG_MUL, "dsp-muls.4-s1-indirect-with-index-4-dsp-src2-reg-acc-reg-mul", "muls.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* muls.4 ${dsp-destA},${s1-imm7-4}(${s1-An}),${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MULS_4_S1_INDIRECT_WITH_OFFSET_4_DSP_SRC2_REG_ACC_REG_MUL, "dsp-muls.4-s1-indirect-with-offset-4-dsp-src2-reg-acc-reg-mul", "muls.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* muls.4 ${dsp-destA},(${s1-An}),${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MULS_4_S1_INDIRECT_4_DSP_SRC2_REG_ACC_REG_MUL, "dsp-muls.4-s1-indirect-4-dsp-src2-reg-acc-reg-mul", "muls.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* muls.4 ${dsp-destA},(${s1-An})${s1-i4-4}++,${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MULS_4_S1_INDIRECT_WITH_POST_INCREMENT_4_DSP_SRC2_REG_ACC_REG_MUL, "dsp-muls.4-s1-indirect-with-post-increment-4-dsp-src2-reg-acc-reg-mul", "muls.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* muls.4 ${dsp-destA},${s1-i4-4}(${s1-An})++,${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MULS_4_S1_INDIRECT_WITH_PRE_INCREMENT_4_DSP_SRC2_REG_ACC_REG_MUL, "dsp-muls.4-s1-indirect-with-pre-increment-4-dsp-src2-reg-acc-reg-mul", "muls.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* muls.4 ${dsp-destA},${s1-direct-addr},#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MULS_4_S1_DIRECT_DSP_IMM_BIT5, "dsp-muls.4-s1-direct-dsp-imm-bit5", "muls.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* muls.4 ${dsp-destA},#${s1-imm8},#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MULS_4_S1_IMMEDIATE_DSP_IMM_BIT5, "dsp-muls.4-s1-immediate-dsp-imm-bit5", "muls.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* muls.4 ${dsp-destA},(${s1-An},${s1-r}),#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MULS_4_S1_INDIRECT_WITH_INDEX_4_DSP_IMM_BIT5, "dsp-muls.4-s1-indirect-with-index-4-dsp-imm-bit5", "muls.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* muls.4 ${dsp-destA},${s1-imm7-4}(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MULS_4_S1_INDIRECT_WITH_OFFSET_4_DSP_IMM_BIT5, "dsp-muls.4-s1-indirect-with-offset-4-dsp-imm-bit5", "muls.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* muls.4 ${dsp-destA},(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MULS_4_S1_INDIRECT_4_DSP_IMM_BIT5, "dsp-muls.4-s1-indirect-4-dsp-imm-bit5", "muls.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* muls.4 ${dsp-destA},(${s1-An})${s1-i4-4}++,#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MULS_4_S1_INDIRECT_WITH_POST_INCREMENT_4_DSP_IMM_BIT5, "dsp-muls.4-s1-indirect-with-post-increment-4-dsp-imm-bit5", "muls.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* muls.4 ${dsp-destA},${s1-i4-4}(${s1-An})++,#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MULS_4_S1_INDIRECT_WITH_PRE_INCREMENT_4_DSP_IMM_BIT5, "dsp-muls.4-s1-indirect-with-pre-increment-4-dsp-imm-bit5", "muls.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* muls${dsp-t} ${dsp-destA},${s1-direct-addr},${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MULS_S1_DIRECT_DSP_SRC2_DATA_REG, "dsp-muls-s1-direct-dsp-src2-data-reg", "muls", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* muls${dsp-t} ${dsp-destA},#${s1-imm8},${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MULS_S1_IMMEDIATE_DSP_SRC2_DATA_REG, "dsp-muls-s1-immediate-dsp-src2-data-reg", "muls", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* muls${dsp-t} ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MULS_S1_INDIRECT_WITH_INDEX_2_DSP_SRC2_DATA_REG, "dsp-muls-s1-indirect-with-index-2-dsp-src2-data-reg", "muls", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* muls${dsp-t} ${dsp-destA},${s1-imm7-2}(${s1-An}),${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MULS_S1_INDIRECT_WITH_OFFSET_2_DSP_SRC2_DATA_REG, "dsp-muls-s1-indirect-with-offset-2-dsp-src2-data-reg", "muls", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* muls${dsp-t} ${dsp-destA},(${s1-An}),${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MULS_S1_INDIRECT_2_DSP_SRC2_DATA_REG, "dsp-muls-s1-indirect-2-dsp-src2-data-reg", "muls", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* muls${dsp-t} ${dsp-destA},(${s1-An})${s1-i4-2}++,${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MULS_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_SRC2_DATA_REG, "dsp-muls-s1-indirect-with-post-increment-2-dsp-src2-data-reg", "muls", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* muls${dsp-t} ${dsp-destA},${s1-i4-2}(${s1-An})++,${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_DSP_MULS_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_SRC2_DATA_REG, "dsp-muls-s1-indirect-with-pre-increment-2-dsp-src2-data-reg", "muls", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* muls${dsp-t} ${dsp-destA},${s1-direct-addr},${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MULS_S1_DIRECT_DSP_SRC2_REG_ACC_REG_MUL, "dsp-muls-s1-direct-dsp-src2-reg-acc-reg-mul", "muls", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* muls${dsp-t} ${dsp-destA},#${s1-imm8},${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MULS_S1_IMMEDIATE_DSP_SRC2_REG_ACC_REG_MUL, "dsp-muls-s1-immediate-dsp-src2-reg-acc-reg-mul", "muls", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* muls${dsp-t} ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MULS_S1_INDIRECT_WITH_INDEX_2_DSP_SRC2_REG_ACC_REG_MUL, "dsp-muls-s1-indirect-with-index-2-dsp-src2-reg-acc-reg-mul", "muls", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* muls${dsp-t} ${dsp-destA},${s1-imm7-2}(${s1-An}),${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MULS_S1_INDIRECT_WITH_OFFSET_2_DSP_SRC2_REG_ACC_REG_MUL, "dsp-muls-s1-indirect-with-offset-2-dsp-src2-reg-acc-reg-mul", "muls", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* muls${dsp-t} ${dsp-destA},(${s1-An}),${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MULS_S1_INDIRECT_2_DSP_SRC2_REG_ACC_REG_MUL, "dsp-muls-s1-indirect-2-dsp-src2-reg-acc-reg-mul", "muls", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* muls${dsp-t} ${dsp-destA},(${s1-An})${s1-i4-2}++,${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MULS_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_SRC2_REG_ACC_REG_MUL, "dsp-muls-s1-indirect-with-post-increment-2-dsp-src2-reg-acc-reg-mul", "muls", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* muls${dsp-t} ${dsp-destA},${s1-i4-2}(${s1-An})++,${dsp-S2-acc-reg-mul} */
+  {
+    UBICOM32_INSN_DSP_MULS_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_SRC2_REG_ACC_REG_MUL, "dsp-muls-s1-indirect-with-pre-increment-2-dsp-src2-reg-acc-reg-mul", "muls", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* muls${dsp-t} ${dsp-destA},${s1-direct-addr},#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MULS_S1_DIRECT_DSP_IMM_BIT5, "dsp-muls-s1-direct-dsp-imm-bit5", "muls", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* muls${dsp-t} ${dsp-destA},#${s1-imm8},#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MULS_S1_IMMEDIATE_DSP_IMM_BIT5, "dsp-muls-s1-immediate-dsp-imm-bit5", "muls", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* muls${dsp-t} ${dsp-destA},(${s1-An},${s1-r}),#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MULS_S1_INDIRECT_WITH_INDEX_2_DSP_IMM_BIT5, "dsp-muls-s1-indirect-with-index-2-dsp-imm-bit5", "muls", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* muls${dsp-t} ${dsp-destA},${s1-imm7-2}(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MULS_S1_INDIRECT_WITH_OFFSET_2_DSP_IMM_BIT5, "dsp-muls-s1-indirect-with-offset-2-dsp-imm-bit5", "muls", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* muls${dsp-t} ${dsp-destA},(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MULS_S1_INDIRECT_2_DSP_IMM_BIT5, "dsp-muls-s1-indirect-2-dsp-imm-bit5", "muls", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* muls${dsp-t} ${dsp-destA},(${s1-An})${s1-i4-2}++,#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MULS_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_IMM_BIT5, "dsp-muls-s1-indirect-with-post-increment-2-dsp-imm-bit5", "muls", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* muls${dsp-t} ${dsp-destA},${s1-i4-2}(${s1-An})++,#${bit5} */
+  {
+    UBICOM32_INSN_DSP_MULS_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_IMM_BIT5, "dsp-muls-s1-indirect-with-pre-increment-2-dsp-imm-bit5", "muls", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* sysret ${d-direct-addr},${s1-direct-addr} */
+  {
+    UBICOM32_INSN_SYSRET_D_DIRECT_S1_DIRECT, "sysret-d-direct-s1-direct", "sysret", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* sysret #${d-imm8},${s1-direct-addr} */
+  {
+    UBICOM32_INSN_SYSRET_D_IMMEDIATE_4_S1_DIRECT, "sysret-d-immediate-4-s1-direct", "sysret", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* sysret (${d-An},${d-r}),${s1-direct-addr} */
+  {
+    UBICOM32_INSN_SYSRET_D_INDIRECT_WITH_INDEX_4_S1_DIRECT, "sysret-d-indirect-with-index-4-s1-direct", "sysret", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* sysret ${d-imm7-4}(${d-An}),${s1-direct-addr} */
+  {
+    UBICOM32_INSN_SYSRET_D_INDIRECT_WITH_OFFSET_4_S1_DIRECT, "sysret-d-indirect-with-offset-4-s1-direct", "sysret", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* sysret (${d-An}),${s1-direct-addr} */
+  {
+    UBICOM32_INSN_SYSRET_D_INDIRECT_4_S1_DIRECT, "sysret-d-indirect-4-s1-direct", "sysret", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* sysret (${d-An})${d-i4-4}++,${s1-direct-addr} */
+  {
+    UBICOM32_INSN_SYSRET_D_INDIRECT_WITH_POST_INCREMENT_4_S1_DIRECT, "sysret-d-indirect-with-post-increment-4-s1-direct", "sysret", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* sysret ${d-i4-4}(${d-An})++,${s1-direct-addr} */
+  {
+    UBICOM32_INSN_SYSRET_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_DIRECT, "sysret-d-indirect-with-pre-increment-4-s1-direct", "sysret", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* sysret ${d-direct-addr},#${s1-imm8} */
+  {
+    UBICOM32_INSN_SYSRET_D_DIRECT_S1_IMMEDIATE, "sysret-d-direct-s1-immediate", "sysret", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* sysret #${d-imm8},#${s1-imm8} */
+  {
+    UBICOM32_INSN_SYSRET_D_IMMEDIATE_4_S1_IMMEDIATE, "sysret-d-immediate-4-s1-immediate", "sysret", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* sysret (${d-An},${d-r}),#${s1-imm8} */
+  {
+    UBICOM32_INSN_SYSRET_D_INDIRECT_WITH_INDEX_4_S1_IMMEDIATE, "sysret-d-indirect-with-index-4-s1-immediate", "sysret", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* sysret ${d-imm7-4}(${d-An}),#${s1-imm8} */
+  {
+    UBICOM32_INSN_SYSRET_D_INDIRECT_WITH_OFFSET_4_S1_IMMEDIATE, "sysret-d-indirect-with-offset-4-s1-immediate", "sysret", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* sysret (${d-An}),#${s1-imm8} */
+  {
+    UBICOM32_INSN_SYSRET_D_INDIRECT_4_S1_IMMEDIATE, "sysret-d-indirect-4-s1-immediate", "sysret", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* sysret (${d-An})${d-i4-4}++,#${s1-imm8} */
+  {
+    UBICOM32_INSN_SYSRET_D_INDIRECT_WITH_POST_INCREMENT_4_S1_IMMEDIATE, "sysret-d-indirect-with-post-increment-4-s1-immediate", "sysret", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* sysret ${d-i4-4}(${d-An})++,#${s1-imm8} */
+  {
+    UBICOM32_INSN_SYSRET_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_IMMEDIATE, "sysret-d-indirect-with-pre-increment-4-s1-immediate", "sysret", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* sysret ${d-direct-addr},(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_SYSRET_D_DIRECT_S1_INDIRECT_WITH_INDEX_4, "sysret-d-direct-s1-indirect-with-index-4", "sysret", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* sysret #${d-imm8},(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_SYSRET_D_IMMEDIATE_4_S1_INDIRECT_WITH_INDEX_4, "sysret-d-immediate-4-s1-indirect-with-index-4", "sysret", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* sysret (${d-An},${d-r}),(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_SYSRET_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_INDEX_4, "sysret-d-indirect-with-index-4-s1-indirect-with-index-4", "sysret", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* sysret ${d-imm7-4}(${d-An}),(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_SYSRET_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_INDEX_4, "sysret-d-indirect-with-offset-4-s1-indirect-with-index-4", "sysret", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* sysret (${d-An}),(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_SYSRET_D_INDIRECT_4_S1_INDIRECT_WITH_INDEX_4, "sysret-d-indirect-4-s1-indirect-with-index-4", "sysret", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* sysret (${d-An})${d-i4-4}++,(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_SYSRET_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, "sysret-d-indirect-with-post-increment-4-s1-indirect-with-index-4", "sysret", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* sysret ${d-i4-4}(${d-An})++,(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_SYSRET_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, "sysret-d-indirect-with-pre-increment-4-s1-indirect-with-index-4", "sysret", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* sysret ${d-direct-addr},${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_SYSRET_D_DIRECT_S1_INDIRECT_WITH_OFFSET_4, "sysret-d-direct-s1-indirect-with-offset-4", "sysret", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* sysret #${d-imm8},${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_SYSRET_D_IMMEDIATE_4_S1_INDIRECT_WITH_OFFSET_4, "sysret-d-immediate-4-s1-indirect-with-offset-4", "sysret", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* sysret (${d-An},${d-r}),${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_SYSRET_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_OFFSET_4, "sysret-d-indirect-with-index-4-s1-indirect-with-offset-4", "sysret", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* sysret ${d-imm7-4}(${d-An}),${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_SYSRET_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_OFFSET_4, "sysret-d-indirect-with-offset-4-s1-indirect-with-offset-4", "sysret", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* sysret (${d-An}),${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_SYSRET_D_INDIRECT_4_S1_INDIRECT_WITH_OFFSET_4, "sysret-d-indirect-4-s1-indirect-with-offset-4", "sysret", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* sysret (${d-An})${d-i4-4}++,${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_SYSRET_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, "sysret-d-indirect-with-post-increment-4-s1-indirect-with-offset-4", "sysret", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* sysret ${d-i4-4}(${d-An})++,${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_SYSRET_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, "sysret-d-indirect-with-pre-increment-4-s1-indirect-with-offset-4", "sysret", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* sysret ${d-direct-addr},(${s1-An}) */
+  {
+    UBICOM32_INSN_SYSRET_D_DIRECT_S1_INDIRECT_4, "sysret-d-direct-s1-indirect-4", "sysret", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* sysret #${d-imm8},(${s1-An}) */
+  {
+    UBICOM32_INSN_SYSRET_D_IMMEDIATE_4_S1_INDIRECT_4, "sysret-d-immediate-4-s1-indirect-4", "sysret", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* sysret (${d-An},${d-r}),(${s1-An}) */
+  {
+    UBICOM32_INSN_SYSRET_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_4, "sysret-d-indirect-with-index-4-s1-indirect-4", "sysret", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* sysret ${d-imm7-4}(${d-An}),(${s1-An}) */
+  {
+    UBICOM32_INSN_SYSRET_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_4, "sysret-d-indirect-with-offset-4-s1-indirect-4", "sysret", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* sysret (${d-An}),(${s1-An}) */
+  {
+    UBICOM32_INSN_SYSRET_D_INDIRECT_4_S1_INDIRECT_4, "sysret-d-indirect-4-s1-indirect-4", "sysret", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* sysret (${d-An})${d-i4-4}++,(${s1-An}) */
+  {
+    UBICOM32_INSN_SYSRET_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_4, "sysret-d-indirect-with-post-increment-4-s1-indirect-4", "sysret", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* sysret ${d-i4-4}(${d-An})++,(${s1-An}) */
+  {
+    UBICOM32_INSN_SYSRET_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_4, "sysret-d-indirect-with-pre-increment-4-s1-indirect-4", "sysret", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* sysret ${d-direct-addr},(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_SYSRET_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_4, "sysret-d-direct-s1-indirect-with-post-increment-4", "sysret", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* sysret #${d-imm8},(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_SYSRET_D_IMMEDIATE_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "sysret-d-immediate-4-s1-indirect-with-post-increment-4", "sysret", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* sysret (${d-An},${d-r}),(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_SYSRET_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "sysret-d-indirect-with-index-4-s1-indirect-with-post-increment-4", "sysret", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* sysret ${d-imm7-4}(${d-An}),(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_SYSRET_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "sysret-d-indirect-with-offset-4-s1-indirect-with-post-increment-4", "sysret", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* sysret (${d-An}),(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_SYSRET_D_INDIRECT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "sysret-d-indirect-4-s1-indirect-with-post-increment-4", "sysret", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* sysret (${d-An})${d-i4-4}++,(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_SYSRET_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "sysret-d-indirect-with-post-increment-4-s1-indirect-with-post-increment-4", "sysret", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* sysret ${d-i4-4}(${d-An})++,(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_SYSRET_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "sysret-d-indirect-with-pre-increment-4-s1-indirect-with-post-increment-4", "sysret", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* sysret ${d-direct-addr},${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_SYSRET_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_4, "sysret-d-direct-s1-indirect-with-pre-increment-4", "sysret", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* sysret #${d-imm8},${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_SYSRET_D_IMMEDIATE_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "sysret-d-immediate-4-s1-indirect-with-pre-increment-4", "sysret", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* sysret (${d-An},${d-r}),${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_SYSRET_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "sysret-d-indirect-with-index-4-s1-indirect-with-pre-increment-4", "sysret", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* sysret ${d-imm7-4}(${d-An}),${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_SYSRET_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "sysret-d-indirect-with-offset-4-s1-indirect-with-pre-increment-4", "sysret", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* sysret (${d-An}),${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_SYSRET_D_INDIRECT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "sysret-d-indirect-4-s1-indirect-with-pre-increment-4", "sysret", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* sysret (${d-An})${d-i4-4}++,${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_SYSRET_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "sysret-d-indirect-with-post-increment-4-s1-indirect-with-pre-increment-4", "sysret", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* sysret ${d-i4-4}(${d-An})++,${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_SYSRET_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "sysret-d-indirect-with-pre-increment-4-s1-indirect-with-pre-increment-4", "sysret", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* syscall ${d-direct-addr} */
+  {
+    UBICOM32_INSN_SYSCALL_D_DIRECT, "syscall-d-direct", "syscall", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* syscall #${d-imm8} */
+  {
+    UBICOM32_INSN_SYSCALL_D_IMMEDIATE_4, "syscall-d-immediate-4", "syscall", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* syscall (${d-An},${d-r}) */
+  {
+    UBICOM32_INSN_SYSCALL_D_INDIRECT_WITH_INDEX_4, "syscall-d-indirect-with-index-4", "syscall", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* syscall ${d-imm7-4}(${d-An}) */
+  {
+    UBICOM32_INSN_SYSCALL_D_INDIRECT_WITH_OFFSET_4, "syscall-d-indirect-with-offset-4", "syscall", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* syscall (${d-An}) */
+  {
+    UBICOM32_INSN_SYSCALL_D_INDIRECT_4, "syscall-d-indirect-4", "syscall", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* syscall (${d-An})${d-i4-4}++ */
+  {
+    UBICOM32_INSN_SYSCALL_D_INDIRECT_WITH_POST_INCREMENT_4, "syscall-d-indirect-with-post-increment-4", "syscall", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* syscall ${d-i4-4}(${d-An})++ */
+  {
+    UBICOM32_INSN_SYSCALL_D_INDIRECT_WITH_PRE_INCREMENT_4, "syscall-d-indirect-with-pre-increment-4", "syscall", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* prefetch ${d-direct-addr} */
+  {
+    UBICOM32_INSN_PREFETCH_D_DIRECT, "prefetch-d-direct", "prefetch", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* prefetch #${d-imm8} */
+  {
+    UBICOM32_INSN_PREFETCH_D_IMMEDIATE_4, "prefetch-d-immediate-4", "prefetch", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* prefetch (${d-An},${d-r}) */
+  {
+    UBICOM32_INSN_PREFETCH_D_INDIRECT_WITH_INDEX_4, "prefetch-d-indirect-with-index-4", "prefetch", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* prefetch ${d-imm7-4}(${d-An}) */
+  {
+    UBICOM32_INSN_PREFETCH_D_INDIRECT_WITH_OFFSET_4, "prefetch-d-indirect-with-offset-4", "prefetch", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* prefetch (${d-An}) */
+  {
+    UBICOM32_INSN_PREFETCH_D_INDIRECT_4, "prefetch-d-indirect-4", "prefetch", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* prefetch (${d-An})${d-i4-4}++ */
+  {
+    UBICOM32_INSN_PREFETCH_D_INDIRECT_WITH_POST_INCREMENT_4, "prefetch-d-indirect-with-post-increment-4", "prefetch", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* prefetch ${d-i4-4}(${d-An})++ */
+  {
+    UBICOM32_INSN_PREFETCH_D_INDIRECT_WITH_PRE_INCREMENT_4, "prefetch-d-indirect-with-pre-increment-4", "prefetch", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* sync ${d-direct-addr} */
+  {
+    UBICOM32_INSN_SYNC_D_DIRECT, "sync-d-direct", "sync", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* sync #${d-imm8} */
+  {
+    UBICOM32_INSN_SYNC_D_IMMEDIATE_4, "sync-d-immediate-4", "sync", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* sync (${d-An},${d-r}) */
+  {
+    UBICOM32_INSN_SYNC_D_INDIRECT_WITH_INDEX_4, "sync-d-indirect-with-index-4", "sync", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* sync ${d-imm7-4}(${d-An}) */
+  {
+    UBICOM32_INSN_SYNC_D_INDIRECT_WITH_OFFSET_4, "sync-d-indirect-with-offset-4", "sync", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* sync (${d-An}) */
+  {
+    UBICOM32_INSN_SYNC_D_INDIRECT_4, "sync-d-indirect-4", "sync", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* sync (${d-An})${d-i4-4}++ */
+  {
+    UBICOM32_INSN_SYNC_D_INDIRECT_WITH_POST_INCREMENT_4, "sync-d-indirect-with-post-increment-4", "sync", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* sync ${d-i4-4}(${d-An})++ */
+  {
+    UBICOM32_INSN_SYNC_D_INDIRECT_WITH_PRE_INCREMENT_4, "sync-d-indirect-with-pre-increment-4", "sync", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* flush ${d-direct-addr} */
+  {
+    UBICOM32_INSN_FLUSH_D_DIRECT, "flush-d-direct", "flush", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* flush #${d-imm8} */
+  {
+    UBICOM32_INSN_FLUSH_D_IMMEDIATE_4, "flush-d-immediate-4", "flush", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* flush (${d-An},${d-r}) */
+  {
+    UBICOM32_INSN_FLUSH_D_INDIRECT_WITH_INDEX_4, "flush-d-indirect-with-index-4", "flush", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* flush ${d-imm7-4}(${d-An}) */
+  {
+    UBICOM32_INSN_FLUSH_D_INDIRECT_WITH_OFFSET_4, "flush-d-indirect-with-offset-4", "flush", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* flush (${d-An}) */
+  {
+    UBICOM32_INSN_FLUSH_D_INDIRECT_4, "flush-d-indirect-4", "flush", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* flush (${d-An})${d-i4-4}++ */
+  {
+    UBICOM32_INSN_FLUSH_D_INDIRECT_WITH_POST_INCREMENT_4, "flush-d-indirect-with-post-increment-4", "flush", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* flush ${d-i4-4}(${d-An})++ */
+  {
+    UBICOM32_INSN_FLUSH_D_INDIRECT_WITH_PRE_INCREMENT_4, "flush-d-indirect-with-pre-increment-4", "flush", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* iread (${s1-An}) */
+  {
+    UBICOM32_INSN_IREAD_S1_EA_INDIRECT, "iread-s1-ea-indirect", "iread", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* iread (${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_IREAD_S1_EA_INDIRECT_WITH_INDEX_4, "iread-s1-ea-indirect-with-index-4", "iread", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* iread (${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_IREAD_S1_EA_INDIRECT_WITH_POST_INCREMENT_4, "iread-s1-ea-indirect-with-post-increment-4", "iread", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* iread ${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_IREAD_S1_EA_INDIRECT_WITH_PRE_INCREMENT_4, "iread-s1-ea-indirect-with-pre-increment-4", "iread", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* iread ${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_IREAD_S1_EA_INDIRECT_WITH_OFFSET_4, "iread-s1-ea-indirect-with-offset-4", "iread", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* iwrite (${d-An},${d-r}),${s1-direct-addr} */
+  {
+    UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_WITH_INDEX_S1_DIRECT, "iwrite-d-pea-indirect-with-index-s1-direct", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* iwrite ${d-imm7-4}(${d-An}),${s1-direct-addr} */
+  {
+    UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_WITH_OFFSET_S1_DIRECT, "iwrite-d-pea-indirect-with-offset-s1-direct", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* iwrite (${d-An}),${s1-direct-addr} */
+  {
+    UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_S1_DIRECT, "iwrite-d-pea-indirect-s1-direct", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* iwrite (${d-An})${d-i4-4}++,${s1-direct-addr} */
+  {
+    UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_WITH_POST_INCREMENT_S1_DIRECT, "iwrite-d-pea-indirect-with-post-increment-s1-direct", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* iwrite ${d-i4-4}(${d-An})++,${s1-direct-addr} */
+  {
+    UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_WITH_PRE_INCREMENT_S1_DIRECT, "iwrite-d-pea-indirect-with-pre-increment-s1-direct", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* iwrite (${d-An},${d-r}),#${s1-imm8} */
+  {
+    UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_WITH_INDEX_S1_IMMEDIATE, "iwrite-d-pea-indirect-with-index-s1-immediate", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* iwrite ${d-imm7-4}(${d-An}),#${s1-imm8} */
+  {
+    UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_WITH_OFFSET_S1_IMMEDIATE, "iwrite-d-pea-indirect-with-offset-s1-immediate", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* iwrite (${d-An}),#${s1-imm8} */
+  {
+    UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_S1_IMMEDIATE, "iwrite-d-pea-indirect-s1-immediate", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* iwrite (${d-An})${d-i4-4}++,#${s1-imm8} */
+  {
+    UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_WITH_POST_INCREMENT_S1_IMMEDIATE, "iwrite-d-pea-indirect-with-post-increment-s1-immediate", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* iwrite ${d-i4-4}(${d-An})++,#${s1-imm8} */
+  {
+    UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_WITH_PRE_INCREMENT_S1_IMMEDIATE, "iwrite-d-pea-indirect-with-pre-increment-s1-immediate", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* iwrite (${d-An},${d-r}),(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_WITH_INDEX_S1_INDIRECT_WITH_INDEX_4, "iwrite-d-pea-indirect-with-index-s1-indirect-with-index-4", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* iwrite ${d-imm7-4}(${d-An}),(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_WITH_OFFSET_S1_INDIRECT_WITH_INDEX_4, "iwrite-d-pea-indirect-with-offset-s1-indirect-with-index-4", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* iwrite (${d-An}),(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_S1_INDIRECT_WITH_INDEX_4, "iwrite-d-pea-indirect-s1-indirect-with-index-4", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* iwrite (${d-An})${d-i4-4}++,(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_WITH_POST_INCREMENT_S1_INDIRECT_WITH_INDEX_4, "iwrite-d-pea-indirect-with-post-increment-s1-indirect-with-index-4", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* iwrite ${d-i4-4}(${d-An})++,(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_WITH_PRE_INCREMENT_S1_INDIRECT_WITH_INDEX_4, "iwrite-d-pea-indirect-with-pre-increment-s1-indirect-with-index-4", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* iwrite (${d-An},${d-r}),${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_WITH_INDEX_S1_INDIRECT_WITH_OFFSET_4, "iwrite-d-pea-indirect-with-index-s1-indirect-with-offset-4", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* iwrite ${d-imm7-4}(${d-An}),${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_WITH_OFFSET_S1_INDIRECT_WITH_OFFSET_4, "iwrite-d-pea-indirect-with-offset-s1-indirect-with-offset-4", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* iwrite (${d-An}),${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_S1_INDIRECT_WITH_OFFSET_4, "iwrite-d-pea-indirect-s1-indirect-with-offset-4", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* iwrite (${d-An})${d-i4-4}++,${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_WITH_POST_INCREMENT_S1_INDIRECT_WITH_OFFSET_4, "iwrite-d-pea-indirect-with-post-increment-s1-indirect-with-offset-4", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* iwrite ${d-i4-4}(${d-An})++,${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_WITH_PRE_INCREMENT_S1_INDIRECT_WITH_OFFSET_4, "iwrite-d-pea-indirect-with-pre-increment-s1-indirect-with-offset-4", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* iwrite (${d-An},${d-r}),(${s1-An}) */
+  {
+    UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_WITH_INDEX_S1_INDIRECT_4, "iwrite-d-pea-indirect-with-index-s1-indirect-4", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* iwrite ${d-imm7-4}(${d-An}),(${s1-An}) */
+  {
+    UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_WITH_OFFSET_S1_INDIRECT_4, "iwrite-d-pea-indirect-with-offset-s1-indirect-4", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* iwrite (${d-An}),(${s1-An}) */
+  {
+    UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_S1_INDIRECT_4, "iwrite-d-pea-indirect-s1-indirect-4", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* iwrite (${d-An})${d-i4-4}++,(${s1-An}) */
+  {
+    UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_WITH_POST_INCREMENT_S1_INDIRECT_4, "iwrite-d-pea-indirect-with-post-increment-s1-indirect-4", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* iwrite ${d-i4-4}(${d-An})++,(${s1-An}) */
+  {
+    UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_WITH_PRE_INCREMENT_S1_INDIRECT_4, "iwrite-d-pea-indirect-with-pre-increment-s1-indirect-4", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* iwrite (${d-An},${d-r}),(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_WITH_INDEX_S1_INDIRECT_WITH_POST_INCREMENT_4, "iwrite-d-pea-indirect-with-index-s1-indirect-with-post-increment-4", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* iwrite ${d-imm7-4}(${d-An}),(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_WITH_OFFSET_S1_INDIRECT_WITH_POST_INCREMENT_4, "iwrite-d-pea-indirect-with-offset-s1-indirect-with-post-increment-4", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* iwrite (${d-An}),(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_S1_INDIRECT_WITH_POST_INCREMENT_4, "iwrite-d-pea-indirect-s1-indirect-with-post-increment-4", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* iwrite (${d-An})${d-i4-4}++,(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_WITH_POST_INCREMENT_S1_INDIRECT_WITH_POST_INCREMENT_4, "iwrite-d-pea-indirect-with-post-increment-s1-indirect-with-post-increment-4", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* iwrite ${d-i4-4}(${d-An})++,(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_WITH_PRE_INCREMENT_S1_INDIRECT_WITH_POST_INCREMENT_4, "iwrite-d-pea-indirect-with-pre-increment-s1-indirect-with-post-increment-4", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* iwrite (${d-An},${d-r}),${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_WITH_INDEX_S1_INDIRECT_WITH_PRE_INCREMENT_4, "iwrite-d-pea-indirect-with-index-s1-indirect-with-pre-increment-4", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* iwrite ${d-imm7-4}(${d-An}),${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_WITH_OFFSET_S1_INDIRECT_WITH_PRE_INCREMENT_4, "iwrite-d-pea-indirect-with-offset-s1-indirect-with-pre-increment-4", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* iwrite (${d-An}),${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_4, "iwrite-d-pea-indirect-s1-indirect-with-pre-increment-4", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* iwrite (${d-An})${d-i4-4}++,${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_WITH_POST_INCREMENT_S1_INDIRECT_WITH_PRE_INCREMENT_4, "iwrite-d-pea-indirect-with-post-increment-s1-indirect-with-pre-increment-4", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* iwrite ${d-i4-4}(${d-An})++,${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_WITH_PRE_INCREMENT_S1_INDIRECT_WITH_PRE_INCREMENT_4, "iwrite-d-pea-indirect-with-pre-increment-s1-indirect-with-pre-increment-4", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* tbclr ${d-direct-addr},${s1-direct-addr} */
+  {
+    UBICOM32_INSN_TBCLR_D_DIRECT_S1_DIRECT, "tbclr-d-direct-s1-direct", "tbclr", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbclr #${d-imm8},${s1-direct-addr} */
+  {
+    UBICOM32_INSN_TBCLR_D_IMMEDIATE_4_S1_DIRECT, "tbclr-d-immediate-4-s1-direct", "tbclr", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbclr (${d-An},${d-r}),${s1-direct-addr} */
+  {
+    UBICOM32_INSN_TBCLR_D_INDIRECT_WITH_INDEX_4_S1_DIRECT, "tbclr-d-indirect-with-index-4-s1-direct", "tbclr", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbclr ${d-imm7-4}(${d-An}),${s1-direct-addr} */
+  {
+    UBICOM32_INSN_TBCLR_D_INDIRECT_WITH_OFFSET_4_S1_DIRECT, "tbclr-d-indirect-with-offset-4-s1-direct", "tbclr", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbclr (${d-An}),${s1-direct-addr} */
+  {
+    UBICOM32_INSN_TBCLR_D_INDIRECT_4_S1_DIRECT, "tbclr-d-indirect-4-s1-direct", "tbclr", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbclr (${d-An})${d-i4-4}++,${s1-direct-addr} */
+  {
+    UBICOM32_INSN_TBCLR_D_INDIRECT_WITH_POST_INCREMENT_4_S1_DIRECT, "tbclr-d-indirect-with-post-increment-4-s1-direct", "tbclr", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbclr ${d-i4-4}(${d-An})++,${s1-direct-addr} */
+  {
+    UBICOM32_INSN_TBCLR_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_DIRECT, "tbclr-d-indirect-with-pre-increment-4-s1-direct", "tbclr", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbclr ${d-direct-addr},#${s1-imm8} */
+  {
+    UBICOM32_INSN_TBCLR_D_DIRECT_S1_IMMEDIATE, "tbclr-d-direct-s1-immediate", "tbclr", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbclr #${d-imm8},#${s1-imm8} */
+  {
+    UBICOM32_INSN_TBCLR_D_IMMEDIATE_4_S1_IMMEDIATE, "tbclr-d-immediate-4-s1-immediate", "tbclr", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbclr (${d-An},${d-r}),#${s1-imm8} */
+  {
+    UBICOM32_INSN_TBCLR_D_INDIRECT_WITH_INDEX_4_S1_IMMEDIATE, "tbclr-d-indirect-with-index-4-s1-immediate", "tbclr", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbclr ${d-imm7-4}(${d-An}),#${s1-imm8} */
+  {
+    UBICOM32_INSN_TBCLR_D_INDIRECT_WITH_OFFSET_4_S1_IMMEDIATE, "tbclr-d-indirect-with-offset-4-s1-immediate", "tbclr", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbclr (${d-An}),#${s1-imm8} */
+  {
+    UBICOM32_INSN_TBCLR_D_INDIRECT_4_S1_IMMEDIATE, "tbclr-d-indirect-4-s1-immediate", "tbclr", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbclr (${d-An})${d-i4-4}++,#${s1-imm8} */
+  {
+    UBICOM32_INSN_TBCLR_D_INDIRECT_WITH_POST_INCREMENT_4_S1_IMMEDIATE, "tbclr-d-indirect-with-post-increment-4-s1-immediate", "tbclr", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbclr ${d-i4-4}(${d-An})++,#${s1-imm8} */
+  {
+    UBICOM32_INSN_TBCLR_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_IMMEDIATE, "tbclr-d-indirect-with-pre-increment-4-s1-immediate", "tbclr", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbclr ${d-direct-addr},(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_TBCLR_D_DIRECT_S1_INDIRECT_WITH_INDEX_4, "tbclr-d-direct-s1-indirect-with-index-4", "tbclr", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbclr #${d-imm8},(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_TBCLR_D_IMMEDIATE_4_S1_INDIRECT_WITH_INDEX_4, "tbclr-d-immediate-4-s1-indirect-with-index-4", "tbclr", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbclr (${d-An},${d-r}),(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_TBCLR_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_INDEX_4, "tbclr-d-indirect-with-index-4-s1-indirect-with-index-4", "tbclr", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbclr ${d-imm7-4}(${d-An}),(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_TBCLR_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_INDEX_4, "tbclr-d-indirect-with-offset-4-s1-indirect-with-index-4", "tbclr", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbclr (${d-An}),(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_TBCLR_D_INDIRECT_4_S1_INDIRECT_WITH_INDEX_4, "tbclr-d-indirect-4-s1-indirect-with-index-4", "tbclr", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbclr (${d-An})${d-i4-4}++,(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_TBCLR_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, "tbclr-d-indirect-with-post-increment-4-s1-indirect-with-index-4", "tbclr", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbclr ${d-i4-4}(${d-An})++,(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_TBCLR_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, "tbclr-d-indirect-with-pre-increment-4-s1-indirect-with-index-4", "tbclr", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbclr ${d-direct-addr},${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_TBCLR_D_DIRECT_S1_INDIRECT_WITH_OFFSET_4, "tbclr-d-direct-s1-indirect-with-offset-4", "tbclr", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbclr #${d-imm8},${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_TBCLR_D_IMMEDIATE_4_S1_INDIRECT_WITH_OFFSET_4, "tbclr-d-immediate-4-s1-indirect-with-offset-4", "tbclr", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbclr (${d-An},${d-r}),${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_TBCLR_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_OFFSET_4, "tbclr-d-indirect-with-index-4-s1-indirect-with-offset-4", "tbclr", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbclr ${d-imm7-4}(${d-An}),${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_TBCLR_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_OFFSET_4, "tbclr-d-indirect-with-offset-4-s1-indirect-with-offset-4", "tbclr", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbclr (${d-An}),${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_TBCLR_D_INDIRECT_4_S1_INDIRECT_WITH_OFFSET_4, "tbclr-d-indirect-4-s1-indirect-with-offset-4", "tbclr", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbclr (${d-An})${d-i4-4}++,${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_TBCLR_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, "tbclr-d-indirect-with-post-increment-4-s1-indirect-with-offset-4", "tbclr", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbclr ${d-i4-4}(${d-An})++,${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_TBCLR_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, "tbclr-d-indirect-with-pre-increment-4-s1-indirect-with-offset-4", "tbclr", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbclr ${d-direct-addr},(${s1-An}) */
+  {
+    UBICOM32_INSN_TBCLR_D_DIRECT_S1_INDIRECT_4, "tbclr-d-direct-s1-indirect-4", "tbclr", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbclr #${d-imm8},(${s1-An}) */
+  {
+    UBICOM32_INSN_TBCLR_D_IMMEDIATE_4_S1_INDIRECT_4, "tbclr-d-immediate-4-s1-indirect-4", "tbclr", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbclr (${d-An},${d-r}),(${s1-An}) */
+  {
+    UBICOM32_INSN_TBCLR_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_4, "tbclr-d-indirect-with-index-4-s1-indirect-4", "tbclr", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbclr ${d-imm7-4}(${d-An}),(${s1-An}) */
+  {
+    UBICOM32_INSN_TBCLR_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_4, "tbclr-d-indirect-with-offset-4-s1-indirect-4", "tbclr", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbclr (${d-An}),(${s1-An}) */
+  {
+    UBICOM32_INSN_TBCLR_D_INDIRECT_4_S1_INDIRECT_4, "tbclr-d-indirect-4-s1-indirect-4", "tbclr", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbclr (${d-An})${d-i4-4}++,(${s1-An}) */
+  {
+    UBICOM32_INSN_TBCLR_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_4, "tbclr-d-indirect-with-post-increment-4-s1-indirect-4", "tbclr", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbclr ${d-i4-4}(${d-An})++,(${s1-An}) */
+  {
+    UBICOM32_INSN_TBCLR_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_4, "tbclr-d-indirect-with-pre-increment-4-s1-indirect-4", "tbclr", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbclr ${d-direct-addr},(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_TBCLR_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_4, "tbclr-d-direct-s1-indirect-with-post-increment-4", "tbclr", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbclr #${d-imm8},(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_TBCLR_D_IMMEDIATE_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "tbclr-d-immediate-4-s1-indirect-with-post-increment-4", "tbclr", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbclr (${d-An},${d-r}),(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_TBCLR_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "tbclr-d-indirect-with-index-4-s1-indirect-with-post-increment-4", "tbclr", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbclr ${d-imm7-4}(${d-An}),(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_TBCLR_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "tbclr-d-indirect-with-offset-4-s1-indirect-with-post-increment-4", "tbclr", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbclr (${d-An}),(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_TBCLR_D_INDIRECT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "tbclr-d-indirect-4-s1-indirect-with-post-increment-4", "tbclr", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbclr (${d-An})${d-i4-4}++,(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_TBCLR_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "tbclr-d-indirect-with-post-increment-4-s1-indirect-with-post-increment-4", "tbclr", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbclr ${d-i4-4}(${d-An})++,(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_TBCLR_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "tbclr-d-indirect-with-pre-increment-4-s1-indirect-with-post-increment-4", "tbclr", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbclr ${d-direct-addr},${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_TBCLR_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_4, "tbclr-d-direct-s1-indirect-with-pre-increment-4", "tbclr", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbclr #${d-imm8},${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_TBCLR_D_IMMEDIATE_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "tbclr-d-immediate-4-s1-indirect-with-pre-increment-4", "tbclr", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbclr (${d-An},${d-r}),${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_TBCLR_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "tbclr-d-indirect-with-index-4-s1-indirect-with-pre-increment-4", "tbclr", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbclr ${d-imm7-4}(${d-An}),${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_TBCLR_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "tbclr-d-indirect-with-offset-4-s1-indirect-with-pre-increment-4", "tbclr", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbclr (${d-An}),${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_TBCLR_D_INDIRECT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "tbclr-d-indirect-4-s1-indirect-with-pre-increment-4", "tbclr", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbclr (${d-An})${d-i4-4}++,${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_TBCLR_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "tbclr-d-indirect-with-post-increment-4-s1-indirect-with-pre-increment-4", "tbclr", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbclr ${d-i4-4}(${d-An})++,${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_TBCLR_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "tbclr-d-indirect-with-pre-increment-4-s1-indirect-with-pre-increment-4", "tbclr", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbset ${d-direct-addr},${s1-direct-addr} */
+  {
+    UBICOM32_INSN_TBSET_D_DIRECT_S1_DIRECT, "tbset-d-direct-s1-direct", "tbset", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbset #${d-imm8},${s1-direct-addr} */
+  {
+    UBICOM32_INSN_TBSET_D_IMMEDIATE_4_S1_DIRECT, "tbset-d-immediate-4-s1-direct", "tbset", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbset (${d-An},${d-r}),${s1-direct-addr} */
+  {
+    UBICOM32_INSN_TBSET_D_INDIRECT_WITH_INDEX_4_S1_DIRECT, "tbset-d-indirect-with-index-4-s1-direct", "tbset", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbset ${d-imm7-4}(${d-An}),${s1-direct-addr} */
+  {
+    UBICOM32_INSN_TBSET_D_INDIRECT_WITH_OFFSET_4_S1_DIRECT, "tbset-d-indirect-with-offset-4-s1-direct", "tbset", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbset (${d-An}),${s1-direct-addr} */
+  {
+    UBICOM32_INSN_TBSET_D_INDIRECT_4_S1_DIRECT, "tbset-d-indirect-4-s1-direct", "tbset", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbset (${d-An})${d-i4-4}++,${s1-direct-addr} */
+  {
+    UBICOM32_INSN_TBSET_D_INDIRECT_WITH_POST_INCREMENT_4_S1_DIRECT, "tbset-d-indirect-with-post-increment-4-s1-direct", "tbset", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbset ${d-i4-4}(${d-An})++,${s1-direct-addr} */
+  {
+    UBICOM32_INSN_TBSET_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_DIRECT, "tbset-d-indirect-with-pre-increment-4-s1-direct", "tbset", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbset ${d-direct-addr},#${s1-imm8} */
+  {
+    UBICOM32_INSN_TBSET_D_DIRECT_S1_IMMEDIATE, "tbset-d-direct-s1-immediate", "tbset", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbset #${d-imm8},#${s1-imm8} */
+  {
+    UBICOM32_INSN_TBSET_D_IMMEDIATE_4_S1_IMMEDIATE, "tbset-d-immediate-4-s1-immediate", "tbset", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbset (${d-An},${d-r}),#${s1-imm8} */
+  {
+    UBICOM32_INSN_TBSET_D_INDIRECT_WITH_INDEX_4_S1_IMMEDIATE, "tbset-d-indirect-with-index-4-s1-immediate", "tbset", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbset ${d-imm7-4}(${d-An}),#${s1-imm8} */
+  {
+    UBICOM32_INSN_TBSET_D_INDIRECT_WITH_OFFSET_4_S1_IMMEDIATE, "tbset-d-indirect-with-offset-4-s1-immediate", "tbset", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbset (${d-An}),#${s1-imm8} */
+  {
+    UBICOM32_INSN_TBSET_D_INDIRECT_4_S1_IMMEDIATE, "tbset-d-indirect-4-s1-immediate", "tbset", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbset (${d-An})${d-i4-4}++,#${s1-imm8} */
+  {
+    UBICOM32_INSN_TBSET_D_INDIRECT_WITH_POST_INCREMENT_4_S1_IMMEDIATE, "tbset-d-indirect-with-post-increment-4-s1-immediate", "tbset", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbset ${d-i4-4}(${d-An})++,#${s1-imm8} */
+  {
+    UBICOM32_INSN_TBSET_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_IMMEDIATE, "tbset-d-indirect-with-pre-increment-4-s1-immediate", "tbset", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbset ${d-direct-addr},(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_TBSET_D_DIRECT_S1_INDIRECT_WITH_INDEX_4, "tbset-d-direct-s1-indirect-with-index-4", "tbset", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbset #${d-imm8},(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_TBSET_D_IMMEDIATE_4_S1_INDIRECT_WITH_INDEX_4, "tbset-d-immediate-4-s1-indirect-with-index-4", "tbset", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbset (${d-An},${d-r}),(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_TBSET_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_INDEX_4, "tbset-d-indirect-with-index-4-s1-indirect-with-index-4", "tbset", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbset ${d-imm7-4}(${d-An}),(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_TBSET_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_INDEX_4, "tbset-d-indirect-with-offset-4-s1-indirect-with-index-4", "tbset", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbset (${d-An}),(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_TBSET_D_INDIRECT_4_S1_INDIRECT_WITH_INDEX_4, "tbset-d-indirect-4-s1-indirect-with-index-4", "tbset", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbset (${d-An})${d-i4-4}++,(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_TBSET_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, "tbset-d-indirect-with-post-increment-4-s1-indirect-with-index-4", "tbset", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbset ${d-i4-4}(${d-An})++,(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_TBSET_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, "tbset-d-indirect-with-pre-increment-4-s1-indirect-with-index-4", "tbset", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbset ${d-direct-addr},${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_TBSET_D_DIRECT_S1_INDIRECT_WITH_OFFSET_4, "tbset-d-direct-s1-indirect-with-offset-4", "tbset", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbset #${d-imm8},${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_TBSET_D_IMMEDIATE_4_S1_INDIRECT_WITH_OFFSET_4, "tbset-d-immediate-4-s1-indirect-with-offset-4", "tbset", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbset (${d-An},${d-r}),${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_TBSET_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_OFFSET_4, "tbset-d-indirect-with-index-4-s1-indirect-with-offset-4", "tbset", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbset ${d-imm7-4}(${d-An}),${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_TBSET_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_OFFSET_4, "tbset-d-indirect-with-offset-4-s1-indirect-with-offset-4", "tbset", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbset (${d-An}),${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_TBSET_D_INDIRECT_4_S1_INDIRECT_WITH_OFFSET_4, "tbset-d-indirect-4-s1-indirect-with-offset-4", "tbset", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbset (${d-An})${d-i4-4}++,${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_TBSET_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, "tbset-d-indirect-with-post-increment-4-s1-indirect-with-offset-4", "tbset", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbset ${d-i4-4}(${d-An})++,${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_TBSET_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, "tbset-d-indirect-with-pre-increment-4-s1-indirect-with-offset-4", "tbset", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbset ${d-direct-addr},(${s1-An}) */
+  {
+    UBICOM32_INSN_TBSET_D_DIRECT_S1_INDIRECT_4, "tbset-d-direct-s1-indirect-4", "tbset", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbset #${d-imm8},(${s1-An}) */
+  {
+    UBICOM32_INSN_TBSET_D_IMMEDIATE_4_S1_INDIRECT_4, "tbset-d-immediate-4-s1-indirect-4", "tbset", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbset (${d-An},${d-r}),(${s1-An}) */
+  {
+    UBICOM32_INSN_TBSET_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_4, "tbset-d-indirect-with-index-4-s1-indirect-4", "tbset", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbset ${d-imm7-4}(${d-An}),(${s1-An}) */
+  {
+    UBICOM32_INSN_TBSET_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_4, "tbset-d-indirect-with-offset-4-s1-indirect-4", "tbset", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbset (${d-An}),(${s1-An}) */
+  {
+    UBICOM32_INSN_TBSET_D_INDIRECT_4_S1_INDIRECT_4, "tbset-d-indirect-4-s1-indirect-4", "tbset", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbset (${d-An})${d-i4-4}++,(${s1-An}) */
+  {
+    UBICOM32_INSN_TBSET_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_4, "tbset-d-indirect-with-post-increment-4-s1-indirect-4", "tbset", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbset ${d-i4-4}(${d-An})++,(${s1-An}) */
+  {
+    UBICOM32_INSN_TBSET_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_4, "tbset-d-indirect-with-pre-increment-4-s1-indirect-4", "tbset", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbset ${d-direct-addr},(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_TBSET_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_4, "tbset-d-direct-s1-indirect-with-post-increment-4", "tbset", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbset #${d-imm8},(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_TBSET_D_IMMEDIATE_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "tbset-d-immediate-4-s1-indirect-with-post-increment-4", "tbset", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbset (${d-An},${d-r}),(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_TBSET_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "tbset-d-indirect-with-index-4-s1-indirect-with-post-increment-4", "tbset", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbset ${d-imm7-4}(${d-An}),(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_TBSET_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "tbset-d-indirect-with-offset-4-s1-indirect-with-post-increment-4", "tbset", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbset (${d-An}),(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_TBSET_D_INDIRECT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "tbset-d-indirect-4-s1-indirect-with-post-increment-4", "tbset", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbset (${d-An})${d-i4-4}++,(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_TBSET_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "tbset-d-indirect-with-post-increment-4-s1-indirect-with-post-increment-4", "tbset", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbset ${d-i4-4}(${d-An})++,(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_TBSET_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "tbset-d-indirect-with-pre-increment-4-s1-indirect-with-post-increment-4", "tbset", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbset ${d-direct-addr},${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_TBSET_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_4, "tbset-d-direct-s1-indirect-with-pre-increment-4", "tbset", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbset #${d-imm8},${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_TBSET_D_IMMEDIATE_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "tbset-d-immediate-4-s1-indirect-with-pre-increment-4", "tbset", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbset (${d-An},${d-r}),${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_TBSET_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "tbset-d-indirect-with-index-4-s1-indirect-with-pre-increment-4", "tbset", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbset ${d-imm7-4}(${d-An}),${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_TBSET_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "tbset-d-indirect-with-offset-4-s1-indirect-with-pre-increment-4", "tbset", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbset (${d-An}),${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_TBSET_D_INDIRECT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "tbset-d-indirect-4-s1-indirect-with-pre-increment-4", "tbset", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbset (${d-An})${d-i4-4}++,${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_TBSET_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "tbset-d-indirect-with-post-increment-4-s1-indirect-with-pre-increment-4", "tbset", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* tbset ${d-i4-4}(${d-An})++,${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_TBSET_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "tbset-d-indirect-with-pre-increment-4-s1-indirect-with-pre-increment-4", "tbset", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER5), 0 } } } }
+  },
+/* setcsr ${s1-direct-addr} */
+  {
+    UBICOM32_INSN_SETCSR_S1_DIRECT, "setcsr-s1-direct", "setcsr", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* setcsr #${s1-imm8} */
+  {
+    UBICOM32_INSN_SETCSR_S1_IMMEDIATE, "setcsr-s1-immediate", "setcsr", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* setcsr (${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_SETCSR_S1_INDIRECT_WITH_INDEX_4, "setcsr-s1-indirect-with-index-4", "setcsr", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* setcsr ${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_SETCSR_S1_INDIRECT_WITH_OFFSET_4, "setcsr-s1-indirect-with-offset-4", "setcsr", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* setcsr (${s1-An}) */
+  {
+    UBICOM32_INSN_SETCSR_S1_INDIRECT_4, "setcsr-s1-indirect-4", "setcsr", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* setcsr (${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_SETCSR_S1_INDIRECT_WITH_POST_INCREMENT_4, "setcsr-s1-indirect-with-post-increment-4", "setcsr", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* setcsr ${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_SETCSR_S1_INDIRECT_WITH_PRE_INCREMENT_4, "setcsr-s1-indirect-with-pre-increment-4", "setcsr", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bkpt ${s1-direct-addr} */
+  {
+    UBICOM32_INSN_BKPT_S1_DIRECT, "bkpt-s1-direct", "bkpt", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bkpt #${s1-imm8} */
+  {
+    UBICOM32_INSN_BKPT_S1_IMMEDIATE, "bkpt-s1-immediate", "bkpt", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bkpt (${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_BKPT_S1_INDIRECT_WITH_INDEX_4, "bkpt-s1-indirect-with-index-4", "bkpt", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bkpt ${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_BKPT_S1_INDIRECT_WITH_OFFSET_4, "bkpt-s1-indirect-with-offset-4", "bkpt", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bkpt (${s1-An}) */
+  {
+    UBICOM32_INSN_BKPT_S1_INDIRECT_4, "bkpt-s1-indirect-4", "bkpt", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bkpt (${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_BKPT_S1_INDIRECT_WITH_POST_INCREMENT_4, "bkpt-s1-indirect-with-post-increment-4", "bkpt", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bkpt ${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_BKPT_S1_INDIRECT_WITH_PRE_INCREMENT_4, "bkpt-s1-indirect-with-pre-increment-4", "bkpt", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ret ${s1-direct-addr} */
+  {
+    UBICOM32_INSN_RET_S1_DIRECT, "ret-s1-direct", "ret", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ret #${s1-imm8} */
+  {
+    UBICOM32_INSN_RET_S1_IMMEDIATE, "ret-s1-immediate", "ret", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ret (${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_RET_S1_INDIRECT_WITH_INDEX_4, "ret-s1-indirect-with-index-4", "ret", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ret ${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_RET_S1_INDIRECT_WITH_OFFSET_4, "ret-s1-indirect-with-offset-4", "ret", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ret (${s1-An}) */
+  {
+    UBICOM32_INSN_RET_S1_INDIRECT_4, "ret-s1-indirect-4", "ret", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ret (${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_RET_S1_INDIRECT_WITH_POST_INCREMENT_4, "ret-s1-indirect-with-post-increment-4", "ret", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ret ${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_RET_S1_INDIRECT_WITH_PRE_INCREMENT_4, "ret-s1-indirect-with-pre-increment-4", "ret", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* movea ${d-direct-addr},${s1-direct-addr} */
+  {
+    UBICOM32_INSN_MOVEA_D_DIRECT_S1_DIRECT, "movea-d-direct-s1-direct", "movea", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* movea #${d-imm8},${s1-direct-addr} */
+  {
+    UBICOM32_INSN_MOVEA_D_IMMEDIATE_4_S1_DIRECT, "movea-d-immediate-4-s1-direct", "movea", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* movea (${d-An},${d-r}),${s1-direct-addr} */
+  {
+    UBICOM32_INSN_MOVEA_D_INDIRECT_WITH_INDEX_4_S1_DIRECT, "movea-d-indirect-with-index-4-s1-direct", "movea", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* movea ${d-imm7-4}(${d-An}),${s1-direct-addr} */
+  {
+    UBICOM32_INSN_MOVEA_D_INDIRECT_WITH_OFFSET_4_S1_DIRECT, "movea-d-indirect-with-offset-4-s1-direct", "movea", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* movea (${d-An}),${s1-direct-addr} */
+  {
+    UBICOM32_INSN_MOVEA_D_INDIRECT_4_S1_DIRECT, "movea-d-indirect-4-s1-direct", "movea", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* movea (${d-An})${d-i4-4}++,${s1-direct-addr} */
+  {
+    UBICOM32_INSN_MOVEA_D_INDIRECT_WITH_POST_INCREMENT_4_S1_DIRECT, "movea-d-indirect-with-post-increment-4-s1-direct", "movea", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* movea ${d-i4-4}(${d-An})++,${s1-direct-addr} */
+  {
+    UBICOM32_INSN_MOVEA_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_DIRECT, "movea-d-indirect-with-pre-increment-4-s1-direct", "movea", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* movea ${d-direct-addr},#${s1-imm8} */
+  {
+    UBICOM32_INSN_MOVEA_D_DIRECT_S1_IMMEDIATE, "movea-d-direct-s1-immediate", "movea", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* movea #${d-imm8},#${s1-imm8} */
+  {
+    UBICOM32_INSN_MOVEA_D_IMMEDIATE_4_S1_IMMEDIATE, "movea-d-immediate-4-s1-immediate", "movea", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* movea (${d-An},${d-r}),#${s1-imm8} */
+  {
+    UBICOM32_INSN_MOVEA_D_INDIRECT_WITH_INDEX_4_S1_IMMEDIATE, "movea-d-indirect-with-index-4-s1-immediate", "movea", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* movea ${d-imm7-4}(${d-An}),#${s1-imm8} */
+  {
+    UBICOM32_INSN_MOVEA_D_INDIRECT_WITH_OFFSET_4_S1_IMMEDIATE, "movea-d-indirect-with-offset-4-s1-immediate", "movea", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* movea (${d-An}),#${s1-imm8} */
+  {
+    UBICOM32_INSN_MOVEA_D_INDIRECT_4_S1_IMMEDIATE, "movea-d-indirect-4-s1-immediate", "movea", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* movea (${d-An})${d-i4-4}++,#${s1-imm8} */
+  {
+    UBICOM32_INSN_MOVEA_D_INDIRECT_WITH_POST_INCREMENT_4_S1_IMMEDIATE, "movea-d-indirect-with-post-increment-4-s1-immediate", "movea", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* movea ${d-i4-4}(${d-An})++,#${s1-imm8} */
+  {
+    UBICOM32_INSN_MOVEA_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_IMMEDIATE, "movea-d-indirect-with-pre-increment-4-s1-immediate", "movea", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* movea ${d-direct-addr},(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_MOVEA_D_DIRECT_S1_INDIRECT_WITH_INDEX_4, "movea-d-direct-s1-indirect-with-index-4", "movea", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* movea #${d-imm8},(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_MOVEA_D_IMMEDIATE_4_S1_INDIRECT_WITH_INDEX_4, "movea-d-immediate-4-s1-indirect-with-index-4", "movea", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* movea (${d-An},${d-r}),(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_MOVEA_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_INDEX_4, "movea-d-indirect-with-index-4-s1-indirect-with-index-4", "movea", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* movea ${d-imm7-4}(${d-An}),(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_MOVEA_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_INDEX_4, "movea-d-indirect-with-offset-4-s1-indirect-with-index-4", "movea", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* movea (${d-An}),(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_MOVEA_D_INDIRECT_4_S1_INDIRECT_WITH_INDEX_4, "movea-d-indirect-4-s1-indirect-with-index-4", "movea", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* movea (${d-An})${d-i4-4}++,(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_MOVEA_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, "movea-d-indirect-with-post-increment-4-s1-indirect-with-index-4", "movea", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* movea ${d-i4-4}(${d-An})++,(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_MOVEA_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, "movea-d-indirect-with-pre-increment-4-s1-indirect-with-index-4", "movea", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* movea ${d-direct-addr},${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_MOVEA_D_DIRECT_S1_INDIRECT_WITH_OFFSET_4, "movea-d-direct-s1-indirect-with-offset-4", "movea", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* movea #${d-imm8},${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_MOVEA_D_IMMEDIATE_4_S1_INDIRECT_WITH_OFFSET_4, "movea-d-immediate-4-s1-indirect-with-offset-4", "movea", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* movea (${d-An},${d-r}),${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_MOVEA_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_OFFSET_4, "movea-d-indirect-with-index-4-s1-indirect-with-offset-4", "movea", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* movea ${d-imm7-4}(${d-An}),${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_MOVEA_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_OFFSET_4, "movea-d-indirect-with-offset-4-s1-indirect-with-offset-4", "movea", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* movea (${d-An}),${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_MOVEA_D_INDIRECT_4_S1_INDIRECT_WITH_OFFSET_4, "movea-d-indirect-4-s1-indirect-with-offset-4", "movea", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* movea (${d-An})${d-i4-4}++,${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_MOVEA_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, "movea-d-indirect-with-post-increment-4-s1-indirect-with-offset-4", "movea", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* movea ${d-i4-4}(${d-An})++,${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_MOVEA_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, "movea-d-indirect-with-pre-increment-4-s1-indirect-with-offset-4", "movea", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* movea ${d-direct-addr},(${s1-An}) */
+  {
+    UBICOM32_INSN_MOVEA_D_DIRECT_S1_INDIRECT_4, "movea-d-direct-s1-indirect-4", "movea", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* movea #${d-imm8},(${s1-An}) */
+  {
+    UBICOM32_INSN_MOVEA_D_IMMEDIATE_4_S1_INDIRECT_4, "movea-d-immediate-4-s1-indirect-4", "movea", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* movea (${d-An},${d-r}),(${s1-An}) */
+  {
+    UBICOM32_INSN_MOVEA_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_4, "movea-d-indirect-with-index-4-s1-indirect-4", "movea", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* movea ${d-imm7-4}(${d-An}),(${s1-An}) */
+  {
+    UBICOM32_INSN_MOVEA_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_4, "movea-d-indirect-with-offset-4-s1-indirect-4", "movea", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* movea (${d-An}),(${s1-An}) */
+  {
+    UBICOM32_INSN_MOVEA_D_INDIRECT_4_S1_INDIRECT_4, "movea-d-indirect-4-s1-indirect-4", "movea", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* movea (${d-An})${d-i4-4}++,(${s1-An}) */
+  {
+    UBICOM32_INSN_MOVEA_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_4, "movea-d-indirect-with-post-increment-4-s1-indirect-4", "movea", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* movea ${d-i4-4}(${d-An})++,(${s1-An}) */
+  {
+    UBICOM32_INSN_MOVEA_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_4, "movea-d-indirect-with-pre-increment-4-s1-indirect-4", "movea", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* movea ${d-direct-addr},(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_MOVEA_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_4, "movea-d-direct-s1-indirect-with-post-increment-4", "movea", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* movea #${d-imm8},(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_MOVEA_D_IMMEDIATE_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "movea-d-immediate-4-s1-indirect-with-post-increment-4", "movea", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* movea (${d-An},${d-r}),(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_MOVEA_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "movea-d-indirect-with-index-4-s1-indirect-with-post-increment-4", "movea", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* movea ${d-imm7-4}(${d-An}),(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_MOVEA_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "movea-d-indirect-with-offset-4-s1-indirect-with-post-increment-4", "movea", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* movea (${d-An}),(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_MOVEA_D_INDIRECT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "movea-d-indirect-4-s1-indirect-with-post-increment-4", "movea", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* movea (${d-An})${d-i4-4}++,(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_MOVEA_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "movea-d-indirect-with-post-increment-4-s1-indirect-with-post-increment-4", "movea", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* movea ${d-i4-4}(${d-An})++,(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_MOVEA_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "movea-d-indirect-with-pre-increment-4-s1-indirect-with-post-increment-4", "movea", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* movea ${d-direct-addr},${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_MOVEA_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_4, "movea-d-direct-s1-indirect-with-pre-increment-4", "movea", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* movea #${d-imm8},${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_MOVEA_D_IMMEDIATE_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "movea-d-immediate-4-s1-indirect-with-pre-increment-4", "movea", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* movea (${d-An},${d-r}),${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_MOVEA_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "movea-d-indirect-with-index-4-s1-indirect-with-pre-increment-4", "movea", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* movea ${d-imm7-4}(${d-An}),${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_MOVEA_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "movea-d-indirect-with-offset-4-s1-indirect-with-pre-increment-4", "movea", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* movea (${d-An}),${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_MOVEA_D_INDIRECT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "movea-d-indirect-4-s1-indirect-with-pre-increment-4", "movea", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* movea (${d-An})${d-i4-4}++,${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_MOVEA_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "movea-d-indirect-with-post-increment-4-s1-indirect-with-pre-increment-4", "movea", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* movea ${d-i4-4}(${d-An})++,${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_MOVEA_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "movea-d-indirect-with-pre-increment-4-s1-indirect-with-pre-increment-4", "movea", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* move.4 ${d-direct-addr},${s1-direct-addr} */
+  {
+    UBICOM32_INSN_MOVE_4_D_DIRECT_S1_DIRECT, "move.4-d-direct-s1-direct", "move.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.4 #${d-imm8},${s1-direct-addr} */
+  {
+    UBICOM32_INSN_MOVE_4_D_IMMEDIATE_4_S1_DIRECT, "move.4-d-immediate-4-s1-direct", "move.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.4 (${d-An},${d-r}),${s1-direct-addr} */
+  {
+    UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_INDEX_4_S1_DIRECT, "move.4-d-indirect-with-index-4-s1-direct", "move.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.4 ${d-imm7-4}(${d-An}),${s1-direct-addr} */
+  {
+    UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_OFFSET_4_S1_DIRECT, "move.4-d-indirect-with-offset-4-s1-direct", "move.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.4 (${d-An}),${s1-direct-addr} */
+  {
+    UBICOM32_INSN_MOVE_4_D_INDIRECT_4_S1_DIRECT, "move.4-d-indirect-4-s1-direct", "move.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.4 (${d-An})${d-i4-4}++,${s1-direct-addr} */
+  {
+    UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_DIRECT, "move.4-d-indirect-with-post-increment-4-s1-direct", "move.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.4 ${d-i4-4}(${d-An})++,${s1-direct-addr} */
+  {
+    UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_DIRECT, "move.4-d-indirect-with-pre-increment-4-s1-direct", "move.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.4 ${d-direct-addr},#${s1-imm8} */
+  {
+    UBICOM32_INSN_MOVE_4_D_DIRECT_S1_IMMEDIATE, "move.4-d-direct-s1-immediate", "move.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.4 #${d-imm8},#${s1-imm8} */
+  {
+    UBICOM32_INSN_MOVE_4_D_IMMEDIATE_4_S1_IMMEDIATE, "move.4-d-immediate-4-s1-immediate", "move.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.4 (${d-An},${d-r}),#${s1-imm8} */
+  {
+    UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_INDEX_4_S1_IMMEDIATE, "move.4-d-indirect-with-index-4-s1-immediate", "move.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.4 ${d-imm7-4}(${d-An}),#${s1-imm8} */
+  {
+    UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_OFFSET_4_S1_IMMEDIATE, "move.4-d-indirect-with-offset-4-s1-immediate", "move.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.4 (${d-An}),#${s1-imm8} */
+  {
+    UBICOM32_INSN_MOVE_4_D_INDIRECT_4_S1_IMMEDIATE, "move.4-d-indirect-4-s1-immediate", "move.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.4 (${d-An})${d-i4-4}++,#${s1-imm8} */
+  {
+    UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_IMMEDIATE, "move.4-d-indirect-with-post-increment-4-s1-immediate", "move.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.4 ${d-i4-4}(${d-An})++,#${s1-imm8} */
+  {
+    UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_IMMEDIATE, "move.4-d-indirect-with-pre-increment-4-s1-immediate", "move.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.4 ${d-direct-addr},(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_MOVE_4_D_DIRECT_S1_INDIRECT_WITH_INDEX_4, "move.4-d-direct-s1-indirect-with-index-4", "move.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.4 #${d-imm8},(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_MOVE_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_INDEX_4, "move.4-d-immediate-4-s1-indirect-with-index-4", "move.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.4 (${d-An},${d-r}),(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_INDEX_4, "move.4-d-indirect-with-index-4-s1-indirect-with-index-4", "move.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.4 ${d-imm7-4}(${d-An}),(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_INDEX_4, "move.4-d-indirect-with-offset-4-s1-indirect-with-index-4", "move.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.4 (${d-An}),(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_MOVE_4_D_INDIRECT_4_S1_INDIRECT_WITH_INDEX_4, "move.4-d-indirect-4-s1-indirect-with-index-4", "move.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.4 (${d-An})${d-i4-4}++,(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, "move.4-d-indirect-with-post-increment-4-s1-indirect-with-index-4", "move.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.4 ${d-i4-4}(${d-An})++,(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, "move.4-d-indirect-with-pre-increment-4-s1-indirect-with-index-4", "move.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.4 ${d-direct-addr},${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_MOVE_4_D_DIRECT_S1_INDIRECT_WITH_OFFSET_4, "move.4-d-direct-s1-indirect-with-offset-4", "move.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.4 #${d-imm8},${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_MOVE_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_OFFSET_4, "move.4-d-immediate-4-s1-indirect-with-offset-4", "move.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.4 (${d-An},${d-r}),${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_OFFSET_4, "move.4-d-indirect-with-index-4-s1-indirect-with-offset-4", "move.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.4 ${d-imm7-4}(${d-An}),${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_OFFSET_4, "move.4-d-indirect-with-offset-4-s1-indirect-with-offset-4", "move.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.4 (${d-An}),${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_MOVE_4_D_INDIRECT_4_S1_INDIRECT_WITH_OFFSET_4, "move.4-d-indirect-4-s1-indirect-with-offset-4", "move.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.4 (${d-An})${d-i4-4}++,${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, "move.4-d-indirect-with-post-increment-4-s1-indirect-with-offset-4", "move.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.4 ${d-i4-4}(${d-An})++,${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, "move.4-d-indirect-with-pre-increment-4-s1-indirect-with-offset-4", "move.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.4 ${d-direct-addr},(${s1-An}) */
+  {
+    UBICOM32_INSN_MOVE_4_D_DIRECT_S1_INDIRECT_4, "move.4-d-direct-s1-indirect-4", "move.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.4 #${d-imm8},(${s1-An}) */
+  {
+    UBICOM32_INSN_MOVE_4_D_IMMEDIATE_4_S1_INDIRECT_4, "move.4-d-immediate-4-s1-indirect-4", "move.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.4 (${d-An},${d-r}),(${s1-An}) */
+  {
+    UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_4, "move.4-d-indirect-with-index-4-s1-indirect-4", "move.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.4 ${d-imm7-4}(${d-An}),(${s1-An}) */
+  {
+    UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_4, "move.4-d-indirect-with-offset-4-s1-indirect-4", "move.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.4 (${d-An}),(${s1-An}) */
+  {
+    UBICOM32_INSN_MOVE_4_D_INDIRECT_4_S1_INDIRECT_4, "move.4-d-indirect-4-s1-indirect-4", "move.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.4 (${d-An})${d-i4-4}++,(${s1-An}) */
+  {
+    UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_4, "move.4-d-indirect-with-post-increment-4-s1-indirect-4", "move.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.4 ${d-i4-4}(${d-An})++,(${s1-An}) */
+  {
+    UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_4, "move.4-d-indirect-with-pre-increment-4-s1-indirect-4", "move.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.4 ${d-direct-addr},(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_MOVE_4_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_4, "move.4-d-direct-s1-indirect-with-post-increment-4", "move.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.4 #${d-imm8},(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_MOVE_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "move.4-d-immediate-4-s1-indirect-with-post-increment-4", "move.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.4 (${d-An},${d-r}),(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "move.4-d-indirect-with-index-4-s1-indirect-with-post-increment-4", "move.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.4 ${d-imm7-4}(${d-An}),(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "move.4-d-indirect-with-offset-4-s1-indirect-with-post-increment-4", "move.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.4 (${d-An}),(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_MOVE_4_D_INDIRECT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "move.4-d-indirect-4-s1-indirect-with-post-increment-4", "move.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.4 (${d-An})${d-i4-4}++,(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "move.4-d-indirect-with-post-increment-4-s1-indirect-with-post-increment-4", "move.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.4 ${d-i4-4}(${d-An})++,(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "move.4-d-indirect-with-pre-increment-4-s1-indirect-with-post-increment-4", "move.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.4 ${d-direct-addr},${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_MOVE_4_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_4, "move.4-d-direct-s1-indirect-with-pre-increment-4", "move.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.4 #${d-imm8},${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_MOVE_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "move.4-d-immediate-4-s1-indirect-with-pre-increment-4", "move.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.4 (${d-An},${d-r}),${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "move.4-d-indirect-with-index-4-s1-indirect-with-pre-increment-4", "move.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.4 ${d-imm7-4}(${d-An}),${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "move.4-d-indirect-with-offset-4-s1-indirect-with-pre-increment-4", "move.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.4 (${d-An}),${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_MOVE_4_D_INDIRECT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "move.4-d-indirect-4-s1-indirect-with-pre-increment-4", "move.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.4 (${d-An})${d-i4-4}++,${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "move.4-d-indirect-with-post-increment-4-s1-indirect-with-pre-increment-4", "move.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.4 ${d-i4-4}(${d-An})++,${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "move.4-d-indirect-with-pre-increment-4-s1-indirect-with-pre-increment-4", "move.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* iread (${s1-An}) */
+  {
+    UBICOM32_INSN_COMPATIBILITY_IREAD_S1_EA_INDIRECT, "compatibility-iread-s1-ea-indirect", "iread", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* iread (${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_COMPATIBILITY_IREAD_S1_EA_INDIRECT_WITH_INDEX_4, "compatibility-iread-s1-ea-indirect-with-index-4", "iread", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* iread (${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_COMPATIBILITY_IREAD_S1_EA_INDIRECT_WITH_POST_INCREMENT_4, "compatibility-iread-s1-ea-indirect-with-post-increment-4", "iread", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* iread ${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_COMPATIBILITY_IREAD_S1_EA_INDIRECT_WITH_PRE_INCREMENT_4, "compatibility-iread-s1-ea-indirect-with-pre-increment-4", "iread", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* iread ${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_COMPATIBILITY_IREAD_S1_EA_INDIRECT_WITH_OFFSET_4, "compatibility-iread-s1-ea-indirect-with-offset-4", "iread", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* iwrite (${d-An},${d-r}),${s1-direct-addr} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_WITH_INDEX_S1_DIRECT, "compatibility-iwrite-d-pea-indirect-with-index-s1-direct", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* iwrite ${d-imm7-4}(${d-An}),${s1-direct-addr} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_WITH_OFFSET_S1_DIRECT, "compatibility-iwrite-d-pea-indirect-with-offset-s1-direct", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* iwrite (${d-An}),${s1-direct-addr} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_S1_DIRECT, "compatibility-iwrite-d-pea-indirect-s1-direct", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* iwrite (${d-An})${d-i4-4}++,${s1-direct-addr} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_WITH_POST_INCREMENT_S1_DIRECT, "compatibility-iwrite-d-pea-indirect-with-post-increment-s1-direct", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* iwrite ${d-i4-4}(${d-An})++,${s1-direct-addr} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_WITH_PRE_INCREMENT_S1_DIRECT, "compatibility-iwrite-d-pea-indirect-with-pre-increment-s1-direct", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* iwrite (${d-An},${d-r}),#${s1-imm8} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_WITH_INDEX_S1_IMMEDIATE, "compatibility-iwrite-d-pea-indirect-with-index-s1-immediate", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* iwrite ${d-imm7-4}(${d-An}),#${s1-imm8} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_WITH_OFFSET_S1_IMMEDIATE, "compatibility-iwrite-d-pea-indirect-with-offset-s1-immediate", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* iwrite (${d-An}),#${s1-imm8} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_S1_IMMEDIATE, "compatibility-iwrite-d-pea-indirect-s1-immediate", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* iwrite (${d-An})${d-i4-4}++,#${s1-imm8} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_WITH_POST_INCREMENT_S1_IMMEDIATE, "compatibility-iwrite-d-pea-indirect-with-post-increment-s1-immediate", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* iwrite ${d-i4-4}(${d-An})++,#${s1-imm8} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_WITH_PRE_INCREMENT_S1_IMMEDIATE, "compatibility-iwrite-d-pea-indirect-with-pre-increment-s1-immediate", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* iwrite (${d-An},${d-r}),(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_WITH_INDEX_S1_INDIRECT_WITH_INDEX_4, "compatibility-iwrite-d-pea-indirect-with-index-s1-indirect-with-index-4", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* iwrite ${d-imm7-4}(${d-An}),(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_WITH_OFFSET_S1_INDIRECT_WITH_INDEX_4, "compatibility-iwrite-d-pea-indirect-with-offset-s1-indirect-with-index-4", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* iwrite (${d-An}),(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_S1_INDIRECT_WITH_INDEX_4, "compatibility-iwrite-d-pea-indirect-s1-indirect-with-index-4", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* iwrite (${d-An})${d-i4-4}++,(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_WITH_POST_INCREMENT_S1_INDIRECT_WITH_INDEX_4, "compatibility-iwrite-d-pea-indirect-with-post-increment-s1-indirect-with-index-4", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* iwrite ${d-i4-4}(${d-An})++,(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_WITH_PRE_INCREMENT_S1_INDIRECT_WITH_INDEX_4, "compatibility-iwrite-d-pea-indirect-with-pre-increment-s1-indirect-with-index-4", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* iwrite (${d-An},${d-r}),${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_WITH_INDEX_S1_INDIRECT_WITH_OFFSET_4, "compatibility-iwrite-d-pea-indirect-with-index-s1-indirect-with-offset-4", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* iwrite ${d-imm7-4}(${d-An}),${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_WITH_OFFSET_S1_INDIRECT_WITH_OFFSET_4, "compatibility-iwrite-d-pea-indirect-with-offset-s1-indirect-with-offset-4", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* iwrite (${d-An}),${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_S1_INDIRECT_WITH_OFFSET_4, "compatibility-iwrite-d-pea-indirect-s1-indirect-with-offset-4", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* iwrite (${d-An})${d-i4-4}++,${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_WITH_POST_INCREMENT_S1_INDIRECT_WITH_OFFSET_4, "compatibility-iwrite-d-pea-indirect-with-post-increment-s1-indirect-with-offset-4", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* iwrite ${d-i4-4}(${d-An})++,${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_WITH_PRE_INCREMENT_S1_INDIRECT_WITH_OFFSET_4, "compatibility-iwrite-d-pea-indirect-with-pre-increment-s1-indirect-with-offset-4", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* iwrite (${d-An},${d-r}),(${s1-An}) */
+  {
+    UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_WITH_INDEX_S1_INDIRECT_4, "compatibility-iwrite-d-pea-indirect-with-index-s1-indirect-4", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* iwrite ${d-imm7-4}(${d-An}),(${s1-An}) */
+  {
+    UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_WITH_OFFSET_S1_INDIRECT_4, "compatibility-iwrite-d-pea-indirect-with-offset-s1-indirect-4", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* iwrite (${d-An}),(${s1-An}) */
+  {
+    UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_S1_INDIRECT_4, "compatibility-iwrite-d-pea-indirect-s1-indirect-4", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* iwrite (${d-An})${d-i4-4}++,(${s1-An}) */
+  {
+    UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_WITH_POST_INCREMENT_S1_INDIRECT_4, "compatibility-iwrite-d-pea-indirect-with-post-increment-s1-indirect-4", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* iwrite ${d-i4-4}(${d-An})++,(${s1-An}) */
+  {
+    UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_WITH_PRE_INCREMENT_S1_INDIRECT_4, "compatibility-iwrite-d-pea-indirect-with-pre-increment-s1-indirect-4", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* iwrite (${d-An},${d-r}),(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_WITH_INDEX_S1_INDIRECT_WITH_POST_INCREMENT_4, "compatibility-iwrite-d-pea-indirect-with-index-s1-indirect-with-post-increment-4", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* iwrite ${d-imm7-4}(${d-An}),(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_WITH_OFFSET_S1_INDIRECT_WITH_POST_INCREMENT_4, "compatibility-iwrite-d-pea-indirect-with-offset-s1-indirect-with-post-increment-4", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* iwrite (${d-An}),(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_S1_INDIRECT_WITH_POST_INCREMENT_4, "compatibility-iwrite-d-pea-indirect-s1-indirect-with-post-increment-4", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* iwrite (${d-An})${d-i4-4}++,(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_WITH_POST_INCREMENT_S1_INDIRECT_WITH_POST_INCREMENT_4, "compatibility-iwrite-d-pea-indirect-with-post-increment-s1-indirect-with-post-increment-4", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* iwrite ${d-i4-4}(${d-An})++,(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_WITH_PRE_INCREMENT_S1_INDIRECT_WITH_POST_INCREMENT_4, "compatibility-iwrite-d-pea-indirect-with-pre-increment-s1-indirect-with-post-increment-4", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* iwrite (${d-An},${d-r}),${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_WITH_INDEX_S1_INDIRECT_WITH_PRE_INCREMENT_4, "compatibility-iwrite-d-pea-indirect-with-index-s1-indirect-with-pre-increment-4", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* iwrite ${d-imm7-4}(${d-An}),${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_WITH_OFFSET_S1_INDIRECT_WITH_PRE_INCREMENT_4, "compatibility-iwrite-d-pea-indirect-with-offset-s1-indirect-with-pre-increment-4", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* iwrite (${d-An}),${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_4, "compatibility-iwrite-d-pea-indirect-s1-indirect-with-pre-increment-4", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* iwrite (${d-An})${d-i4-4}++,${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_WITH_POST_INCREMENT_S1_INDIRECT_WITH_PRE_INCREMENT_4, "compatibility-iwrite-d-pea-indirect-with-post-increment-s1-indirect-with-pre-increment-4", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* iwrite ${d-i4-4}(${d-An})++,${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_WITH_PRE_INCREMENT_S1_INDIRECT_WITH_PRE_INCREMENT_4, "compatibility-iwrite-d-pea-indirect-with-pre-increment-s1-indirect-with-pre-increment-4", "iwrite", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* move.2 ${d-direct-addr},${s1-direct-addr} */
+  {
+    UBICOM32_INSN_MOVE_2_D_DIRECT_S1_DIRECT, "move.2-d-direct-s1-direct", "move.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.2 #${d-imm8},${s1-direct-addr} */
+  {
+    UBICOM32_INSN_MOVE_2_D_IMMEDIATE_2_S1_DIRECT, "move.2-d-immediate-2-s1-direct", "move.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.2 (${d-An},${d-r}),${s1-direct-addr} */
+  {
+    UBICOM32_INSN_MOVE_2_D_INDIRECT_WITH_INDEX_2_S1_DIRECT, "move.2-d-indirect-with-index-2-s1-direct", "move.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.2 ${d-imm7-2}(${d-An}),${s1-direct-addr} */
+  {
+    UBICOM32_INSN_MOVE_2_D_INDIRECT_WITH_OFFSET_2_S1_DIRECT, "move.2-d-indirect-with-offset-2-s1-direct", "move.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.2 (${d-An}),${s1-direct-addr} */
+  {
+    UBICOM32_INSN_MOVE_2_D_INDIRECT_2_S1_DIRECT, "move.2-d-indirect-2-s1-direct", "move.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.2 (${d-An})${d-i4-2}++,${s1-direct-addr} */
+  {
+    UBICOM32_INSN_MOVE_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_DIRECT, "move.2-d-indirect-with-post-increment-2-s1-direct", "move.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.2 ${d-i4-2}(${d-An})++,${s1-direct-addr} */
+  {
+    UBICOM32_INSN_MOVE_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_DIRECT, "move.2-d-indirect-with-pre-increment-2-s1-direct", "move.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.2 ${d-direct-addr},#${s1-imm8} */
+  {
+    UBICOM32_INSN_MOVE_2_D_DIRECT_S1_IMMEDIATE, "move.2-d-direct-s1-immediate", "move.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.2 #${d-imm8},#${s1-imm8} */
+  {
+    UBICOM32_INSN_MOVE_2_D_IMMEDIATE_2_S1_IMMEDIATE, "move.2-d-immediate-2-s1-immediate", "move.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.2 (${d-An},${d-r}),#${s1-imm8} */
+  {
+    UBICOM32_INSN_MOVE_2_D_INDIRECT_WITH_INDEX_2_S1_IMMEDIATE, "move.2-d-indirect-with-index-2-s1-immediate", "move.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.2 ${d-imm7-2}(${d-An}),#${s1-imm8} */
+  {
+    UBICOM32_INSN_MOVE_2_D_INDIRECT_WITH_OFFSET_2_S1_IMMEDIATE, "move.2-d-indirect-with-offset-2-s1-immediate", "move.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.2 (${d-An}),#${s1-imm8} */
+  {
+    UBICOM32_INSN_MOVE_2_D_INDIRECT_2_S1_IMMEDIATE, "move.2-d-indirect-2-s1-immediate", "move.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.2 (${d-An})${d-i4-2}++,#${s1-imm8} */
+  {
+    UBICOM32_INSN_MOVE_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_IMMEDIATE, "move.2-d-indirect-with-post-increment-2-s1-immediate", "move.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.2 ${d-i4-2}(${d-An})++,#${s1-imm8} */
+  {
+    UBICOM32_INSN_MOVE_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_IMMEDIATE, "move.2-d-indirect-with-pre-increment-2-s1-immediate", "move.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.2 ${d-direct-addr},(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_MOVE_2_D_DIRECT_S1_INDIRECT_WITH_INDEX_2, "move.2-d-direct-s1-indirect-with-index-2", "move.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.2 #${d-imm8},(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_MOVE_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_INDEX_2, "move.2-d-immediate-2-s1-indirect-with-index-2", "move.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.2 (${d-An},${d-r}),(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_MOVE_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_INDEX_2, "move.2-d-indirect-with-index-2-s1-indirect-with-index-2", "move.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.2 ${d-imm7-2}(${d-An}),(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_MOVE_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_INDEX_2, "move.2-d-indirect-with-offset-2-s1-indirect-with-index-2", "move.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.2 (${d-An}),(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_MOVE_2_D_INDIRECT_2_S1_INDIRECT_WITH_INDEX_2, "move.2-d-indirect-2-s1-indirect-with-index-2", "move.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.2 (${d-An})${d-i4-2}++,(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_MOVE_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_INDEX_2, "move.2-d-indirect-with-post-increment-2-s1-indirect-with-index-2", "move.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.2 ${d-i4-2}(${d-An})++,(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_MOVE_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_INDEX_2, "move.2-d-indirect-with-pre-increment-2-s1-indirect-with-index-2", "move.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.2 ${d-direct-addr},${s1-imm7-2}(${s1-An}) */
+  {
+    UBICOM32_INSN_MOVE_2_D_DIRECT_S1_INDIRECT_WITH_OFFSET_2, "move.2-d-direct-s1-indirect-with-offset-2", "move.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.2 #${d-imm8},${s1-imm7-2}(${s1-An}) */
+  {
+    UBICOM32_INSN_MOVE_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_OFFSET_2, "move.2-d-immediate-2-s1-indirect-with-offset-2", "move.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.2 (${d-An},${d-r}),${s1-imm7-2}(${s1-An}) */
+  {
+    UBICOM32_INSN_MOVE_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_OFFSET_2, "move.2-d-indirect-with-index-2-s1-indirect-with-offset-2", "move.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.2 ${d-imm7-2}(${d-An}),${s1-imm7-2}(${s1-An}) */
+  {
+    UBICOM32_INSN_MOVE_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_OFFSET_2, "move.2-d-indirect-with-offset-2-s1-indirect-with-offset-2", "move.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.2 (${d-An}),${s1-imm7-2}(${s1-An}) */
+  {
+    UBICOM32_INSN_MOVE_2_D_INDIRECT_2_S1_INDIRECT_WITH_OFFSET_2, "move.2-d-indirect-2-s1-indirect-with-offset-2", "move.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.2 (${d-An})${d-i4-2}++,${s1-imm7-2}(${s1-An}) */
+  {
+    UBICOM32_INSN_MOVE_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_OFFSET_2, "move.2-d-indirect-with-post-increment-2-s1-indirect-with-offset-2", "move.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.2 ${d-i4-2}(${d-An})++,${s1-imm7-2}(${s1-An}) */
+  {
+    UBICOM32_INSN_MOVE_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_OFFSET_2, "move.2-d-indirect-with-pre-increment-2-s1-indirect-with-offset-2", "move.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.2 ${d-direct-addr},(${s1-An}) */
+  {
+    UBICOM32_INSN_MOVE_2_D_DIRECT_S1_INDIRECT_2, "move.2-d-direct-s1-indirect-2", "move.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.2 #${d-imm8},(${s1-An}) */
+  {
+    UBICOM32_INSN_MOVE_2_D_IMMEDIATE_2_S1_INDIRECT_2, "move.2-d-immediate-2-s1-indirect-2", "move.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.2 (${d-An},${d-r}),(${s1-An}) */
+  {
+    UBICOM32_INSN_MOVE_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_2, "move.2-d-indirect-with-index-2-s1-indirect-2", "move.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.2 ${d-imm7-2}(${d-An}),(${s1-An}) */
+  {
+    UBICOM32_INSN_MOVE_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_2, "move.2-d-indirect-with-offset-2-s1-indirect-2", "move.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.2 (${d-An}),(${s1-An}) */
+  {
+    UBICOM32_INSN_MOVE_2_D_INDIRECT_2_S1_INDIRECT_2, "move.2-d-indirect-2-s1-indirect-2", "move.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.2 (${d-An})${d-i4-2}++,(${s1-An}) */
+  {
+    UBICOM32_INSN_MOVE_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_2, "move.2-d-indirect-with-post-increment-2-s1-indirect-2", "move.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.2 ${d-i4-2}(${d-An})++,(${s1-An}) */
+  {
+    UBICOM32_INSN_MOVE_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_2, "move.2-d-indirect-with-pre-increment-2-s1-indirect-2", "move.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.2 ${d-direct-addr},(${s1-An})${s1-i4-2}++ */
+  {
+    UBICOM32_INSN_MOVE_2_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_2, "move.2-d-direct-s1-indirect-with-post-increment-2", "move.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.2 #${d-imm8},(${s1-An})${s1-i4-2}++ */
+  {
+    UBICOM32_INSN_MOVE_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_POST_INCREMENT_2, "move.2-d-immediate-2-s1-indirect-with-post-increment-2", "move.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.2 (${d-An},${d-r}),(${s1-An})${s1-i4-2}++ */
+  {
+    UBICOM32_INSN_MOVE_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_POST_INCREMENT_2, "move.2-d-indirect-with-index-2-s1-indirect-with-post-increment-2", "move.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.2 ${d-imm7-2}(${d-An}),(${s1-An})${s1-i4-2}++ */
+  {
+    UBICOM32_INSN_MOVE_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_POST_INCREMENT_2, "move.2-d-indirect-with-offset-2-s1-indirect-with-post-increment-2", "move.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.2 (${d-An}),(${s1-An})${s1-i4-2}++ */
+  {
+    UBICOM32_INSN_MOVE_2_D_INDIRECT_2_S1_INDIRECT_WITH_POST_INCREMENT_2, "move.2-d-indirect-2-s1-indirect-with-post-increment-2", "move.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.2 (${d-An})${d-i4-2}++,(${s1-An})${s1-i4-2}++ */
+  {
+    UBICOM32_INSN_MOVE_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_POST_INCREMENT_2, "move.2-d-indirect-with-post-increment-2-s1-indirect-with-post-increment-2", "move.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.2 ${d-i4-2}(${d-An})++,(${s1-An})${s1-i4-2}++ */
+  {
+    UBICOM32_INSN_MOVE_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_POST_INCREMENT_2, "move.2-d-indirect-with-pre-increment-2-s1-indirect-with-post-increment-2", "move.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.2 ${d-direct-addr},${s1-i4-2}(${s1-An})++ */
+  {
+    UBICOM32_INSN_MOVE_2_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_2, "move.2-d-direct-s1-indirect-with-pre-increment-2", "move.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.2 #${d-imm8},${s1-i4-2}(${s1-An})++ */
+  {
+    UBICOM32_INSN_MOVE_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, "move.2-d-immediate-2-s1-indirect-with-pre-increment-2", "move.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.2 (${d-An},${d-r}),${s1-i4-2}(${s1-An})++ */
+  {
+    UBICOM32_INSN_MOVE_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, "move.2-d-indirect-with-index-2-s1-indirect-with-pre-increment-2", "move.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.2 ${d-imm7-2}(${d-An}),${s1-i4-2}(${s1-An})++ */
+  {
+    UBICOM32_INSN_MOVE_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, "move.2-d-indirect-with-offset-2-s1-indirect-with-pre-increment-2", "move.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.2 (${d-An}),${s1-i4-2}(${s1-An})++ */
+  {
+    UBICOM32_INSN_MOVE_2_D_INDIRECT_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, "move.2-d-indirect-2-s1-indirect-with-pre-increment-2", "move.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.2 (${d-An})${d-i4-2}++,${s1-i4-2}(${s1-An})++ */
+  {
+    UBICOM32_INSN_MOVE_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, "move.2-d-indirect-with-post-increment-2-s1-indirect-with-pre-increment-2", "move.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.2 ${d-i4-2}(${d-An})++,${s1-i4-2}(${s1-An})++ */
+  {
+    UBICOM32_INSN_MOVE_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, "move.2-d-indirect-with-pre-increment-2-s1-indirect-with-pre-increment-2", "move.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.1 ${d-direct-addr},${s1-direct-addr} */
+  {
+    UBICOM32_INSN_MOVE_1_D_DIRECT_S1_DIRECT, "move.1-d-direct-s1-direct", "move.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.1 #${d-imm8},${s1-direct-addr} */
+  {
+    UBICOM32_INSN_MOVE_1_D_IMMEDIATE_1_S1_DIRECT, "move.1-d-immediate-1-s1-direct", "move.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.1 (${d-An},${d-r}),${s1-direct-addr} */
+  {
+    UBICOM32_INSN_MOVE_1_D_INDIRECT_WITH_INDEX_1_S1_DIRECT, "move.1-d-indirect-with-index-1-s1-direct", "move.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.1 ${d-imm7-1}(${d-An}),${s1-direct-addr} */
+  {
+    UBICOM32_INSN_MOVE_1_D_INDIRECT_WITH_OFFSET_1_S1_DIRECT, "move.1-d-indirect-with-offset-1-s1-direct", "move.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.1 (${d-An}),${s1-direct-addr} */
+  {
+    UBICOM32_INSN_MOVE_1_D_INDIRECT_1_S1_DIRECT, "move.1-d-indirect-1-s1-direct", "move.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.1 (${d-An})${d-i4-1}++,${s1-direct-addr} */
+  {
+    UBICOM32_INSN_MOVE_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_DIRECT, "move.1-d-indirect-with-post-increment-1-s1-direct", "move.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.1 ${d-i4-1}(${d-An})++,${s1-direct-addr} */
+  {
+    UBICOM32_INSN_MOVE_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_DIRECT, "move.1-d-indirect-with-pre-increment-1-s1-direct", "move.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.1 ${d-direct-addr},#${s1-imm8} */
+  {
+    UBICOM32_INSN_MOVE_1_D_DIRECT_S1_IMMEDIATE, "move.1-d-direct-s1-immediate", "move.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.1 #${d-imm8},#${s1-imm8} */
+  {
+    UBICOM32_INSN_MOVE_1_D_IMMEDIATE_1_S1_IMMEDIATE, "move.1-d-immediate-1-s1-immediate", "move.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.1 (${d-An},${d-r}),#${s1-imm8} */
+  {
+    UBICOM32_INSN_MOVE_1_D_INDIRECT_WITH_INDEX_1_S1_IMMEDIATE, "move.1-d-indirect-with-index-1-s1-immediate", "move.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.1 ${d-imm7-1}(${d-An}),#${s1-imm8} */
+  {
+    UBICOM32_INSN_MOVE_1_D_INDIRECT_WITH_OFFSET_1_S1_IMMEDIATE, "move.1-d-indirect-with-offset-1-s1-immediate", "move.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.1 (${d-An}),#${s1-imm8} */
+  {
+    UBICOM32_INSN_MOVE_1_D_INDIRECT_1_S1_IMMEDIATE, "move.1-d-indirect-1-s1-immediate", "move.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.1 (${d-An})${d-i4-1}++,#${s1-imm8} */
+  {
+    UBICOM32_INSN_MOVE_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_IMMEDIATE, "move.1-d-indirect-with-post-increment-1-s1-immediate", "move.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.1 ${d-i4-1}(${d-An})++,#${s1-imm8} */
+  {
+    UBICOM32_INSN_MOVE_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_IMMEDIATE, "move.1-d-indirect-with-pre-increment-1-s1-immediate", "move.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.1 ${d-direct-addr},(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_MOVE_1_D_DIRECT_S1_INDIRECT_WITH_INDEX_1, "move.1-d-direct-s1-indirect-with-index-1", "move.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.1 #${d-imm8},(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_MOVE_1_D_IMMEDIATE_1_S1_INDIRECT_WITH_INDEX_1, "move.1-d-immediate-1-s1-indirect-with-index-1", "move.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.1 (${d-An},${d-r}),(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_MOVE_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_WITH_INDEX_1, "move.1-d-indirect-with-index-1-s1-indirect-with-index-1", "move.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.1 ${d-imm7-1}(${d-An}),(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_MOVE_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_WITH_INDEX_1, "move.1-d-indirect-with-offset-1-s1-indirect-with-index-1", "move.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.1 (${d-An}),(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_MOVE_1_D_INDIRECT_1_S1_INDIRECT_WITH_INDEX_1, "move.1-d-indirect-1-s1-indirect-with-index-1", "move.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.1 (${d-An})${d-i4-1}++,(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_MOVE_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_WITH_INDEX_1, "move.1-d-indirect-with-post-increment-1-s1-indirect-with-index-1", "move.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.1 ${d-i4-1}(${d-An})++,(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_MOVE_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_WITH_INDEX_1, "move.1-d-indirect-with-pre-increment-1-s1-indirect-with-index-1", "move.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.1 ${d-direct-addr},${s1-imm7-1}(${s1-An}) */
+  {
+    UBICOM32_INSN_MOVE_1_D_DIRECT_S1_INDIRECT_WITH_OFFSET_1, "move.1-d-direct-s1-indirect-with-offset-1", "move.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.1 #${d-imm8},${s1-imm7-1}(${s1-An}) */
+  {
+    UBICOM32_INSN_MOVE_1_D_IMMEDIATE_1_S1_INDIRECT_WITH_OFFSET_1, "move.1-d-immediate-1-s1-indirect-with-offset-1", "move.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.1 (${d-An},${d-r}),${s1-imm7-1}(${s1-An}) */
+  {
+    UBICOM32_INSN_MOVE_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_WITH_OFFSET_1, "move.1-d-indirect-with-index-1-s1-indirect-with-offset-1", "move.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.1 ${d-imm7-1}(${d-An}),${s1-imm7-1}(${s1-An}) */
+  {
+    UBICOM32_INSN_MOVE_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_WITH_OFFSET_1, "move.1-d-indirect-with-offset-1-s1-indirect-with-offset-1", "move.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.1 (${d-An}),${s1-imm7-1}(${s1-An}) */
+  {
+    UBICOM32_INSN_MOVE_1_D_INDIRECT_1_S1_INDIRECT_WITH_OFFSET_1, "move.1-d-indirect-1-s1-indirect-with-offset-1", "move.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.1 (${d-An})${d-i4-1}++,${s1-imm7-1}(${s1-An}) */
+  {
+    UBICOM32_INSN_MOVE_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_WITH_OFFSET_1, "move.1-d-indirect-with-post-increment-1-s1-indirect-with-offset-1", "move.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.1 ${d-i4-1}(${d-An})++,${s1-imm7-1}(${s1-An}) */
+  {
+    UBICOM32_INSN_MOVE_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_WITH_OFFSET_1, "move.1-d-indirect-with-pre-increment-1-s1-indirect-with-offset-1", "move.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.1 ${d-direct-addr},(${s1-An}) */
+  {
+    UBICOM32_INSN_MOVE_1_D_DIRECT_S1_INDIRECT_1, "move.1-d-direct-s1-indirect-1", "move.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.1 #${d-imm8},(${s1-An}) */
+  {
+    UBICOM32_INSN_MOVE_1_D_IMMEDIATE_1_S1_INDIRECT_1, "move.1-d-immediate-1-s1-indirect-1", "move.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.1 (${d-An},${d-r}),(${s1-An}) */
+  {
+    UBICOM32_INSN_MOVE_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_1, "move.1-d-indirect-with-index-1-s1-indirect-1", "move.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.1 ${d-imm7-1}(${d-An}),(${s1-An}) */
+  {
+    UBICOM32_INSN_MOVE_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_1, "move.1-d-indirect-with-offset-1-s1-indirect-1", "move.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.1 (${d-An}),(${s1-An}) */
+  {
+    UBICOM32_INSN_MOVE_1_D_INDIRECT_1_S1_INDIRECT_1, "move.1-d-indirect-1-s1-indirect-1", "move.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.1 (${d-An})${d-i4-1}++,(${s1-An}) */
+  {
+    UBICOM32_INSN_MOVE_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_1, "move.1-d-indirect-with-post-increment-1-s1-indirect-1", "move.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.1 ${d-i4-1}(${d-An})++,(${s1-An}) */
+  {
+    UBICOM32_INSN_MOVE_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_1, "move.1-d-indirect-with-pre-increment-1-s1-indirect-1", "move.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.1 ${d-direct-addr},(${s1-An})${s1-i4-1}++ */
+  {
+    UBICOM32_INSN_MOVE_1_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_1, "move.1-d-direct-s1-indirect-with-post-increment-1", "move.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.1 #${d-imm8},(${s1-An})${s1-i4-1}++ */
+  {
+    UBICOM32_INSN_MOVE_1_D_IMMEDIATE_1_S1_INDIRECT_WITH_POST_INCREMENT_1, "move.1-d-immediate-1-s1-indirect-with-post-increment-1", "move.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.1 (${d-An},${d-r}),(${s1-An})${s1-i4-1}++ */
+  {
+    UBICOM32_INSN_MOVE_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_WITH_POST_INCREMENT_1, "move.1-d-indirect-with-index-1-s1-indirect-with-post-increment-1", "move.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.1 ${d-imm7-1}(${d-An}),(${s1-An})${s1-i4-1}++ */
+  {
+    UBICOM32_INSN_MOVE_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_WITH_POST_INCREMENT_1, "move.1-d-indirect-with-offset-1-s1-indirect-with-post-increment-1", "move.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.1 (${d-An}),(${s1-An})${s1-i4-1}++ */
+  {
+    UBICOM32_INSN_MOVE_1_D_INDIRECT_1_S1_INDIRECT_WITH_POST_INCREMENT_1, "move.1-d-indirect-1-s1-indirect-with-post-increment-1", "move.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.1 (${d-An})${d-i4-1}++,(${s1-An})${s1-i4-1}++ */
+  {
+    UBICOM32_INSN_MOVE_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_WITH_POST_INCREMENT_1, "move.1-d-indirect-with-post-increment-1-s1-indirect-with-post-increment-1", "move.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.1 ${d-i4-1}(${d-An})++,(${s1-An})${s1-i4-1}++ */
+  {
+    UBICOM32_INSN_MOVE_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_WITH_POST_INCREMENT_1, "move.1-d-indirect-with-pre-increment-1-s1-indirect-with-post-increment-1", "move.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.1 ${d-direct-addr},${s1-i4-1}(${s1-An})++ */
+  {
+    UBICOM32_INSN_MOVE_1_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_1, "move.1-d-direct-s1-indirect-with-pre-increment-1", "move.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.1 #${d-imm8},${s1-i4-1}(${s1-An})++ */
+  {
+    UBICOM32_INSN_MOVE_1_D_IMMEDIATE_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, "move.1-d-immediate-1-s1-indirect-with-pre-increment-1", "move.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.1 (${d-An},${d-r}),${s1-i4-1}(${s1-An})++ */
+  {
+    UBICOM32_INSN_MOVE_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, "move.1-d-indirect-with-index-1-s1-indirect-with-pre-increment-1", "move.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.1 ${d-imm7-1}(${d-An}),${s1-i4-1}(${s1-An})++ */
+  {
+    UBICOM32_INSN_MOVE_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, "move.1-d-indirect-with-offset-1-s1-indirect-with-pre-increment-1", "move.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.1 (${d-An}),${s1-i4-1}(${s1-An})++ */
+  {
+    UBICOM32_INSN_MOVE_1_D_INDIRECT_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, "move.1-d-indirect-1-s1-indirect-with-pre-increment-1", "move.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.1 (${d-An})${d-i4-1}++,${s1-i4-1}(${s1-An})++ */
+  {
+    UBICOM32_INSN_MOVE_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, "move.1-d-indirect-with-post-increment-1-s1-indirect-with-pre-increment-1", "move.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* move.1 ${d-i4-1}(${d-An})++,${s1-i4-1}(${s1-An})++ */
+  {
+    UBICOM32_INSN_MOVE_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, "move.1-d-indirect-with-pre-increment-1-s1-indirect-with-pre-increment-1", "move.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.2 ${d-direct-addr},${s1-direct-addr} */
+  {
+    UBICOM32_INSN_EXT_2_D_DIRECT_S1_DIRECT, "ext.2-d-direct-s1-direct", "ext.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.2 #${d-imm8},${s1-direct-addr} */
+  {
+    UBICOM32_INSN_EXT_2_D_IMMEDIATE_2_S1_DIRECT, "ext.2-d-immediate-2-s1-direct", "ext.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.2 (${d-An},${d-r}),${s1-direct-addr} */
+  {
+    UBICOM32_INSN_EXT_2_D_INDIRECT_WITH_INDEX_2_S1_DIRECT, "ext.2-d-indirect-with-index-2-s1-direct", "ext.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.2 ${d-imm7-2}(${d-An}),${s1-direct-addr} */
+  {
+    UBICOM32_INSN_EXT_2_D_INDIRECT_WITH_OFFSET_2_S1_DIRECT, "ext.2-d-indirect-with-offset-2-s1-direct", "ext.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.2 (${d-An}),${s1-direct-addr} */
+  {
+    UBICOM32_INSN_EXT_2_D_INDIRECT_2_S1_DIRECT, "ext.2-d-indirect-2-s1-direct", "ext.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.2 (${d-An})${d-i4-2}++,${s1-direct-addr} */
+  {
+    UBICOM32_INSN_EXT_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_DIRECT, "ext.2-d-indirect-with-post-increment-2-s1-direct", "ext.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.2 ${d-i4-2}(${d-An})++,${s1-direct-addr} */
+  {
+    UBICOM32_INSN_EXT_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_DIRECT, "ext.2-d-indirect-with-pre-increment-2-s1-direct", "ext.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.2 ${d-direct-addr},#${s1-imm8} */
+  {
+    UBICOM32_INSN_EXT_2_D_DIRECT_S1_IMMEDIATE, "ext.2-d-direct-s1-immediate", "ext.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.2 #${d-imm8},#${s1-imm8} */
+  {
+    UBICOM32_INSN_EXT_2_D_IMMEDIATE_2_S1_IMMEDIATE, "ext.2-d-immediate-2-s1-immediate", "ext.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.2 (${d-An},${d-r}),#${s1-imm8} */
+  {
+    UBICOM32_INSN_EXT_2_D_INDIRECT_WITH_INDEX_2_S1_IMMEDIATE, "ext.2-d-indirect-with-index-2-s1-immediate", "ext.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.2 ${d-imm7-2}(${d-An}),#${s1-imm8} */
+  {
+    UBICOM32_INSN_EXT_2_D_INDIRECT_WITH_OFFSET_2_S1_IMMEDIATE, "ext.2-d-indirect-with-offset-2-s1-immediate", "ext.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.2 (${d-An}),#${s1-imm8} */
+  {
+    UBICOM32_INSN_EXT_2_D_INDIRECT_2_S1_IMMEDIATE, "ext.2-d-indirect-2-s1-immediate", "ext.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.2 (${d-An})${d-i4-2}++,#${s1-imm8} */
+  {
+    UBICOM32_INSN_EXT_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_IMMEDIATE, "ext.2-d-indirect-with-post-increment-2-s1-immediate", "ext.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.2 ${d-i4-2}(${d-An})++,#${s1-imm8} */
+  {
+    UBICOM32_INSN_EXT_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_IMMEDIATE, "ext.2-d-indirect-with-pre-increment-2-s1-immediate", "ext.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.2 ${d-direct-addr},(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_EXT_2_D_DIRECT_S1_INDIRECT_WITH_INDEX_2, "ext.2-d-direct-s1-indirect-with-index-2", "ext.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.2 #${d-imm8},(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_EXT_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_INDEX_2, "ext.2-d-immediate-2-s1-indirect-with-index-2", "ext.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.2 (${d-An},${d-r}),(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_EXT_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_INDEX_2, "ext.2-d-indirect-with-index-2-s1-indirect-with-index-2", "ext.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.2 ${d-imm7-2}(${d-An}),(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_EXT_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_INDEX_2, "ext.2-d-indirect-with-offset-2-s1-indirect-with-index-2", "ext.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.2 (${d-An}),(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_EXT_2_D_INDIRECT_2_S1_INDIRECT_WITH_INDEX_2, "ext.2-d-indirect-2-s1-indirect-with-index-2", "ext.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.2 (${d-An})${d-i4-2}++,(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_EXT_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_INDEX_2, "ext.2-d-indirect-with-post-increment-2-s1-indirect-with-index-2", "ext.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.2 ${d-i4-2}(${d-An})++,(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_EXT_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_INDEX_2, "ext.2-d-indirect-with-pre-increment-2-s1-indirect-with-index-2", "ext.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.2 ${d-direct-addr},${s1-imm7-2}(${s1-An}) */
+  {
+    UBICOM32_INSN_EXT_2_D_DIRECT_S1_INDIRECT_WITH_OFFSET_2, "ext.2-d-direct-s1-indirect-with-offset-2", "ext.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.2 #${d-imm8},${s1-imm7-2}(${s1-An}) */
+  {
+    UBICOM32_INSN_EXT_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_OFFSET_2, "ext.2-d-immediate-2-s1-indirect-with-offset-2", "ext.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.2 (${d-An},${d-r}),${s1-imm7-2}(${s1-An}) */
+  {
+    UBICOM32_INSN_EXT_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_OFFSET_2, "ext.2-d-indirect-with-index-2-s1-indirect-with-offset-2", "ext.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.2 ${d-imm7-2}(${d-An}),${s1-imm7-2}(${s1-An}) */
+  {
+    UBICOM32_INSN_EXT_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_OFFSET_2, "ext.2-d-indirect-with-offset-2-s1-indirect-with-offset-2", "ext.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.2 (${d-An}),${s1-imm7-2}(${s1-An}) */
+  {
+    UBICOM32_INSN_EXT_2_D_INDIRECT_2_S1_INDIRECT_WITH_OFFSET_2, "ext.2-d-indirect-2-s1-indirect-with-offset-2", "ext.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.2 (${d-An})${d-i4-2}++,${s1-imm7-2}(${s1-An}) */
+  {
+    UBICOM32_INSN_EXT_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_OFFSET_2, "ext.2-d-indirect-with-post-increment-2-s1-indirect-with-offset-2", "ext.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.2 ${d-i4-2}(${d-An})++,${s1-imm7-2}(${s1-An}) */
+  {
+    UBICOM32_INSN_EXT_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_OFFSET_2, "ext.2-d-indirect-with-pre-increment-2-s1-indirect-with-offset-2", "ext.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.2 ${d-direct-addr},(${s1-An}) */
+  {
+    UBICOM32_INSN_EXT_2_D_DIRECT_S1_INDIRECT_2, "ext.2-d-direct-s1-indirect-2", "ext.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.2 #${d-imm8},(${s1-An}) */
+  {
+    UBICOM32_INSN_EXT_2_D_IMMEDIATE_2_S1_INDIRECT_2, "ext.2-d-immediate-2-s1-indirect-2", "ext.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.2 (${d-An},${d-r}),(${s1-An}) */
+  {
+    UBICOM32_INSN_EXT_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_2, "ext.2-d-indirect-with-index-2-s1-indirect-2", "ext.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.2 ${d-imm7-2}(${d-An}),(${s1-An}) */
+  {
+    UBICOM32_INSN_EXT_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_2, "ext.2-d-indirect-with-offset-2-s1-indirect-2", "ext.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.2 (${d-An}),(${s1-An}) */
+  {
+    UBICOM32_INSN_EXT_2_D_INDIRECT_2_S1_INDIRECT_2, "ext.2-d-indirect-2-s1-indirect-2", "ext.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.2 (${d-An})${d-i4-2}++,(${s1-An}) */
+  {
+    UBICOM32_INSN_EXT_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_2, "ext.2-d-indirect-with-post-increment-2-s1-indirect-2", "ext.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.2 ${d-i4-2}(${d-An})++,(${s1-An}) */
+  {
+    UBICOM32_INSN_EXT_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_2, "ext.2-d-indirect-with-pre-increment-2-s1-indirect-2", "ext.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.2 ${d-direct-addr},(${s1-An})${s1-i4-2}++ */
+  {
+    UBICOM32_INSN_EXT_2_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_2, "ext.2-d-direct-s1-indirect-with-post-increment-2", "ext.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.2 #${d-imm8},(${s1-An})${s1-i4-2}++ */
+  {
+    UBICOM32_INSN_EXT_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_POST_INCREMENT_2, "ext.2-d-immediate-2-s1-indirect-with-post-increment-2", "ext.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.2 (${d-An},${d-r}),(${s1-An})${s1-i4-2}++ */
+  {
+    UBICOM32_INSN_EXT_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_POST_INCREMENT_2, "ext.2-d-indirect-with-index-2-s1-indirect-with-post-increment-2", "ext.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.2 ${d-imm7-2}(${d-An}),(${s1-An})${s1-i4-2}++ */
+  {
+    UBICOM32_INSN_EXT_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_POST_INCREMENT_2, "ext.2-d-indirect-with-offset-2-s1-indirect-with-post-increment-2", "ext.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.2 (${d-An}),(${s1-An})${s1-i4-2}++ */
+  {
+    UBICOM32_INSN_EXT_2_D_INDIRECT_2_S1_INDIRECT_WITH_POST_INCREMENT_2, "ext.2-d-indirect-2-s1-indirect-with-post-increment-2", "ext.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.2 (${d-An})${d-i4-2}++,(${s1-An})${s1-i4-2}++ */
+  {
+    UBICOM32_INSN_EXT_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_POST_INCREMENT_2, "ext.2-d-indirect-with-post-increment-2-s1-indirect-with-post-increment-2", "ext.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.2 ${d-i4-2}(${d-An})++,(${s1-An})${s1-i4-2}++ */
+  {
+    UBICOM32_INSN_EXT_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_POST_INCREMENT_2, "ext.2-d-indirect-with-pre-increment-2-s1-indirect-with-post-increment-2", "ext.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.2 ${d-direct-addr},${s1-i4-2}(${s1-An})++ */
+  {
+    UBICOM32_INSN_EXT_2_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_2, "ext.2-d-direct-s1-indirect-with-pre-increment-2", "ext.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.2 #${d-imm8},${s1-i4-2}(${s1-An})++ */
+  {
+    UBICOM32_INSN_EXT_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, "ext.2-d-immediate-2-s1-indirect-with-pre-increment-2", "ext.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.2 (${d-An},${d-r}),${s1-i4-2}(${s1-An})++ */
+  {
+    UBICOM32_INSN_EXT_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, "ext.2-d-indirect-with-index-2-s1-indirect-with-pre-increment-2", "ext.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.2 ${d-imm7-2}(${d-An}),${s1-i4-2}(${s1-An})++ */
+  {
+    UBICOM32_INSN_EXT_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, "ext.2-d-indirect-with-offset-2-s1-indirect-with-pre-increment-2", "ext.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.2 (${d-An}),${s1-i4-2}(${s1-An})++ */
+  {
+    UBICOM32_INSN_EXT_2_D_INDIRECT_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, "ext.2-d-indirect-2-s1-indirect-with-pre-increment-2", "ext.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.2 (${d-An})${d-i4-2}++,${s1-i4-2}(${s1-An})++ */
+  {
+    UBICOM32_INSN_EXT_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, "ext.2-d-indirect-with-post-increment-2-s1-indirect-with-pre-increment-2", "ext.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.2 ${d-i4-2}(${d-An})++,${s1-i4-2}(${s1-An})++ */
+  {
+    UBICOM32_INSN_EXT_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, "ext.2-d-indirect-with-pre-increment-2-s1-indirect-with-pre-increment-2", "ext.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.1 ${d-direct-addr},${s1-direct-addr} */
+  {
+    UBICOM32_INSN_EXT_1_D_DIRECT_S1_DIRECT, "ext.1-d-direct-s1-direct", "ext.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.1 #${d-imm8},${s1-direct-addr} */
+  {
+    UBICOM32_INSN_EXT_1_D_IMMEDIATE_1_S1_DIRECT, "ext.1-d-immediate-1-s1-direct", "ext.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.1 (${d-An},${d-r}),${s1-direct-addr} */
+  {
+    UBICOM32_INSN_EXT_1_D_INDIRECT_WITH_INDEX_1_S1_DIRECT, "ext.1-d-indirect-with-index-1-s1-direct", "ext.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.1 ${d-imm7-1}(${d-An}),${s1-direct-addr} */
+  {
+    UBICOM32_INSN_EXT_1_D_INDIRECT_WITH_OFFSET_1_S1_DIRECT, "ext.1-d-indirect-with-offset-1-s1-direct", "ext.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.1 (${d-An}),${s1-direct-addr} */
+  {
+    UBICOM32_INSN_EXT_1_D_INDIRECT_1_S1_DIRECT, "ext.1-d-indirect-1-s1-direct", "ext.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.1 (${d-An})${d-i4-1}++,${s1-direct-addr} */
+  {
+    UBICOM32_INSN_EXT_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_DIRECT, "ext.1-d-indirect-with-post-increment-1-s1-direct", "ext.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.1 ${d-i4-1}(${d-An})++,${s1-direct-addr} */
+  {
+    UBICOM32_INSN_EXT_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_DIRECT, "ext.1-d-indirect-with-pre-increment-1-s1-direct", "ext.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.1 ${d-direct-addr},#${s1-imm8} */
+  {
+    UBICOM32_INSN_EXT_1_D_DIRECT_S1_IMMEDIATE, "ext.1-d-direct-s1-immediate", "ext.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.1 #${d-imm8},#${s1-imm8} */
+  {
+    UBICOM32_INSN_EXT_1_D_IMMEDIATE_1_S1_IMMEDIATE, "ext.1-d-immediate-1-s1-immediate", "ext.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.1 (${d-An},${d-r}),#${s1-imm8} */
+  {
+    UBICOM32_INSN_EXT_1_D_INDIRECT_WITH_INDEX_1_S1_IMMEDIATE, "ext.1-d-indirect-with-index-1-s1-immediate", "ext.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.1 ${d-imm7-1}(${d-An}),#${s1-imm8} */
+  {
+    UBICOM32_INSN_EXT_1_D_INDIRECT_WITH_OFFSET_1_S1_IMMEDIATE, "ext.1-d-indirect-with-offset-1-s1-immediate", "ext.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.1 (${d-An}),#${s1-imm8} */
+  {
+    UBICOM32_INSN_EXT_1_D_INDIRECT_1_S1_IMMEDIATE, "ext.1-d-indirect-1-s1-immediate", "ext.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.1 (${d-An})${d-i4-1}++,#${s1-imm8} */
+  {
+    UBICOM32_INSN_EXT_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_IMMEDIATE, "ext.1-d-indirect-with-post-increment-1-s1-immediate", "ext.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.1 ${d-i4-1}(${d-An})++,#${s1-imm8} */
+  {
+    UBICOM32_INSN_EXT_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_IMMEDIATE, "ext.1-d-indirect-with-pre-increment-1-s1-immediate", "ext.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.1 ${d-direct-addr},(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_EXT_1_D_DIRECT_S1_INDIRECT_WITH_INDEX_1, "ext.1-d-direct-s1-indirect-with-index-1", "ext.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.1 #${d-imm8},(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_EXT_1_D_IMMEDIATE_1_S1_INDIRECT_WITH_INDEX_1, "ext.1-d-immediate-1-s1-indirect-with-index-1", "ext.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.1 (${d-An},${d-r}),(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_EXT_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_WITH_INDEX_1, "ext.1-d-indirect-with-index-1-s1-indirect-with-index-1", "ext.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.1 ${d-imm7-1}(${d-An}),(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_EXT_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_WITH_INDEX_1, "ext.1-d-indirect-with-offset-1-s1-indirect-with-index-1", "ext.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.1 (${d-An}),(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_EXT_1_D_INDIRECT_1_S1_INDIRECT_WITH_INDEX_1, "ext.1-d-indirect-1-s1-indirect-with-index-1", "ext.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.1 (${d-An})${d-i4-1}++,(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_EXT_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_WITH_INDEX_1, "ext.1-d-indirect-with-post-increment-1-s1-indirect-with-index-1", "ext.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.1 ${d-i4-1}(${d-An})++,(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_EXT_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_WITH_INDEX_1, "ext.1-d-indirect-with-pre-increment-1-s1-indirect-with-index-1", "ext.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.1 ${d-direct-addr},${s1-imm7-1}(${s1-An}) */
+  {
+    UBICOM32_INSN_EXT_1_D_DIRECT_S1_INDIRECT_WITH_OFFSET_1, "ext.1-d-direct-s1-indirect-with-offset-1", "ext.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.1 #${d-imm8},${s1-imm7-1}(${s1-An}) */
+  {
+    UBICOM32_INSN_EXT_1_D_IMMEDIATE_1_S1_INDIRECT_WITH_OFFSET_1, "ext.1-d-immediate-1-s1-indirect-with-offset-1", "ext.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.1 (${d-An},${d-r}),${s1-imm7-1}(${s1-An}) */
+  {
+    UBICOM32_INSN_EXT_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_WITH_OFFSET_1, "ext.1-d-indirect-with-index-1-s1-indirect-with-offset-1", "ext.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.1 ${d-imm7-1}(${d-An}),${s1-imm7-1}(${s1-An}) */
+  {
+    UBICOM32_INSN_EXT_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_WITH_OFFSET_1, "ext.1-d-indirect-with-offset-1-s1-indirect-with-offset-1", "ext.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.1 (${d-An}),${s1-imm7-1}(${s1-An}) */
+  {
+    UBICOM32_INSN_EXT_1_D_INDIRECT_1_S1_INDIRECT_WITH_OFFSET_1, "ext.1-d-indirect-1-s1-indirect-with-offset-1", "ext.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.1 (${d-An})${d-i4-1}++,${s1-imm7-1}(${s1-An}) */
+  {
+    UBICOM32_INSN_EXT_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_WITH_OFFSET_1, "ext.1-d-indirect-with-post-increment-1-s1-indirect-with-offset-1", "ext.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.1 ${d-i4-1}(${d-An})++,${s1-imm7-1}(${s1-An}) */
+  {
+    UBICOM32_INSN_EXT_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_WITH_OFFSET_1, "ext.1-d-indirect-with-pre-increment-1-s1-indirect-with-offset-1", "ext.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.1 ${d-direct-addr},(${s1-An}) */
+  {
+    UBICOM32_INSN_EXT_1_D_DIRECT_S1_INDIRECT_1, "ext.1-d-direct-s1-indirect-1", "ext.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.1 #${d-imm8},(${s1-An}) */
+  {
+    UBICOM32_INSN_EXT_1_D_IMMEDIATE_1_S1_INDIRECT_1, "ext.1-d-immediate-1-s1-indirect-1", "ext.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.1 (${d-An},${d-r}),(${s1-An}) */
+  {
+    UBICOM32_INSN_EXT_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_1, "ext.1-d-indirect-with-index-1-s1-indirect-1", "ext.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.1 ${d-imm7-1}(${d-An}),(${s1-An}) */
+  {
+    UBICOM32_INSN_EXT_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_1, "ext.1-d-indirect-with-offset-1-s1-indirect-1", "ext.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.1 (${d-An}),(${s1-An}) */
+  {
+    UBICOM32_INSN_EXT_1_D_INDIRECT_1_S1_INDIRECT_1, "ext.1-d-indirect-1-s1-indirect-1", "ext.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.1 (${d-An})${d-i4-1}++,(${s1-An}) */
+  {
+    UBICOM32_INSN_EXT_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_1, "ext.1-d-indirect-with-post-increment-1-s1-indirect-1", "ext.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.1 ${d-i4-1}(${d-An})++,(${s1-An}) */
+  {
+    UBICOM32_INSN_EXT_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_1, "ext.1-d-indirect-with-pre-increment-1-s1-indirect-1", "ext.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.1 ${d-direct-addr},(${s1-An})${s1-i4-1}++ */
+  {
+    UBICOM32_INSN_EXT_1_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_1, "ext.1-d-direct-s1-indirect-with-post-increment-1", "ext.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.1 #${d-imm8},(${s1-An})${s1-i4-1}++ */
+  {
+    UBICOM32_INSN_EXT_1_D_IMMEDIATE_1_S1_INDIRECT_WITH_POST_INCREMENT_1, "ext.1-d-immediate-1-s1-indirect-with-post-increment-1", "ext.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.1 (${d-An},${d-r}),(${s1-An})${s1-i4-1}++ */
+  {
+    UBICOM32_INSN_EXT_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_WITH_POST_INCREMENT_1, "ext.1-d-indirect-with-index-1-s1-indirect-with-post-increment-1", "ext.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.1 ${d-imm7-1}(${d-An}),(${s1-An})${s1-i4-1}++ */
+  {
+    UBICOM32_INSN_EXT_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_WITH_POST_INCREMENT_1, "ext.1-d-indirect-with-offset-1-s1-indirect-with-post-increment-1", "ext.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.1 (${d-An}),(${s1-An})${s1-i4-1}++ */
+  {
+    UBICOM32_INSN_EXT_1_D_INDIRECT_1_S1_INDIRECT_WITH_POST_INCREMENT_1, "ext.1-d-indirect-1-s1-indirect-with-post-increment-1", "ext.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.1 (${d-An})${d-i4-1}++,(${s1-An})${s1-i4-1}++ */
+  {
+    UBICOM32_INSN_EXT_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_WITH_POST_INCREMENT_1, "ext.1-d-indirect-with-post-increment-1-s1-indirect-with-post-increment-1", "ext.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.1 ${d-i4-1}(${d-An})++,(${s1-An})${s1-i4-1}++ */
+  {
+    UBICOM32_INSN_EXT_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_WITH_POST_INCREMENT_1, "ext.1-d-indirect-with-pre-increment-1-s1-indirect-with-post-increment-1", "ext.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.1 ${d-direct-addr},${s1-i4-1}(${s1-An})++ */
+  {
+    UBICOM32_INSN_EXT_1_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_1, "ext.1-d-direct-s1-indirect-with-pre-increment-1", "ext.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.1 #${d-imm8},${s1-i4-1}(${s1-An})++ */
+  {
+    UBICOM32_INSN_EXT_1_D_IMMEDIATE_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, "ext.1-d-immediate-1-s1-indirect-with-pre-increment-1", "ext.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.1 (${d-An},${d-r}),${s1-i4-1}(${s1-An})++ */
+  {
+    UBICOM32_INSN_EXT_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, "ext.1-d-indirect-with-index-1-s1-indirect-with-pre-increment-1", "ext.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.1 ${d-imm7-1}(${d-An}),${s1-i4-1}(${s1-An})++ */
+  {
+    UBICOM32_INSN_EXT_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, "ext.1-d-indirect-with-offset-1-s1-indirect-with-pre-increment-1", "ext.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.1 (${d-An}),${s1-i4-1}(${s1-An})++ */
+  {
+    UBICOM32_INSN_EXT_1_D_INDIRECT_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, "ext.1-d-indirect-1-s1-indirect-with-pre-increment-1", "ext.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.1 (${d-An})${d-i4-1}++,${s1-i4-1}(${s1-An})++ */
+  {
+    UBICOM32_INSN_EXT_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, "ext.1-d-indirect-with-post-increment-1-s1-indirect-with-pre-increment-1", "ext.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* ext.1 ${d-i4-1}(${d-An})++,${s1-i4-1}(${s1-An})++ */
+  {
+    UBICOM32_INSN_EXT_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, "ext.1-d-indirect-with-pre-increment-1-s1-indirect-with-pre-increment-1", "ext.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* movei ${d-direct-addr},#${imm16-2} */
+  {
+    UBICOM32_INSN_MOVEI_D_DIRECT, "movei-d-direct", "movei", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* movei #${d-imm8},#${imm16-2} */
+  {
+    UBICOM32_INSN_MOVEI_D_IMMEDIATE_2, "movei-d-immediate-2", "movei", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* movei (${d-An},${d-r}),#${imm16-2} */
+  {
+    UBICOM32_INSN_MOVEI_D_INDIRECT_WITH_INDEX_2, "movei-d-indirect-with-index-2", "movei", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* movei ${d-imm7-2}(${d-An}),#${imm16-2} */
+  {
+    UBICOM32_INSN_MOVEI_D_INDIRECT_WITH_OFFSET_2, "movei-d-indirect-with-offset-2", "movei", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* movei (${d-An}),#${imm16-2} */
+  {
+    UBICOM32_INSN_MOVEI_D_INDIRECT_2, "movei-d-indirect-2", "movei", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* movei (${d-An})${d-i4-2}++,#${imm16-2} */
+  {
+    UBICOM32_INSN_MOVEI_D_INDIRECT_WITH_POST_INCREMENT_2, "movei-d-indirect-with-post-increment-2", "movei", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* movei ${d-i4-2}(${d-An})++,#${imm16-2} */
+  {
+    UBICOM32_INSN_MOVEI_D_INDIRECT_WITH_PRE_INCREMENT_2, "movei-d-indirect-with-pre-increment-2", "movei", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bclr ${d-direct-addr},${s1-direct-addr},#${bit5} */
+  {
+    UBICOM32_INSN_BCLR_D_DIRECT_S1_DIRECT, "bclr-d-direct-s1-direct", "bclr", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bclr #${d-imm8},${s1-direct-addr},#${bit5} */
+  {
+    UBICOM32_INSN_BCLR_D_IMMEDIATE_4_S1_DIRECT, "bclr-d-immediate-4-s1-direct", "bclr", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bclr (${d-An},${d-r}),${s1-direct-addr},#${bit5} */
+  {
+    UBICOM32_INSN_BCLR_D_INDIRECT_WITH_INDEX_4_S1_DIRECT, "bclr-d-indirect-with-index-4-s1-direct", "bclr", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bclr ${d-imm7-4}(${d-An}),${s1-direct-addr},#${bit5} */
+  {
+    UBICOM32_INSN_BCLR_D_INDIRECT_WITH_OFFSET_4_S1_DIRECT, "bclr-d-indirect-with-offset-4-s1-direct", "bclr", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bclr (${d-An}),${s1-direct-addr},#${bit5} */
+  {
+    UBICOM32_INSN_BCLR_D_INDIRECT_4_S1_DIRECT, "bclr-d-indirect-4-s1-direct", "bclr", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bclr (${d-An})${d-i4-4}++,${s1-direct-addr},#${bit5} */
+  {
+    UBICOM32_INSN_BCLR_D_INDIRECT_WITH_POST_INCREMENT_4_S1_DIRECT, "bclr-d-indirect-with-post-increment-4-s1-direct", "bclr", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bclr ${d-i4-4}(${d-An})++,${s1-direct-addr},#${bit5} */
+  {
+    UBICOM32_INSN_BCLR_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_DIRECT, "bclr-d-indirect-with-pre-increment-4-s1-direct", "bclr", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bclr ${d-direct-addr},#${s1-imm8},#${bit5} */
+  {
+    UBICOM32_INSN_BCLR_D_DIRECT_S1_IMMEDIATE, "bclr-d-direct-s1-immediate", "bclr", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bclr #${d-imm8},#${s1-imm8},#${bit5} */
+  {
+    UBICOM32_INSN_BCLR_D_IMMEDIATE_4_S1_IMMEDIATE, "bclr-d-immediate-4-s1-immediate", "bclr", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bclr (${d-An},${d-r}),#${s1-imm8},#${bit5} */
+  {
+    UBICOM32_INSN_BCLR_D_INDIRECT_WITH_INDEX_4_S1_IMMEDIATE, "bclr-d-indirect-with-index-4-s1-immediate", "bclr", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bclr ${d-imm7-4}(${d-An}),#${s1-imm8},#${bit5} */
+  {
+    UBICOM32_INSN_BCLR_D_INDIRECT_WITH_OFFSET_4_S1_IMMEDIATE, "bclr-d-indirect-with-offset-4-s1-immediate", "bclr", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bclr (${d-An}),#${s1-imm8},#${bit5} */
+  {
+    UBICOM32_INSN_BCLR_D_INDIRECT_4_S1_IMMEDIATE, "bclr-d-indirect-4-s1-immediate", "bclr", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bclr (${d-An})${d-i4-4}++,#${s1-imm8},#${bit5} */
+  {
+    UBICOM32_INSN_BCLR_D_INDIRECT_WITH_POST_INCREMENT_4_S1_IMMEDIATE, "bclr-d-indirect-with-post-increment-4-s1-immediate", "bclr", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bclr ${d-i4-4}(${d-An})++,#${s1-imm8},#${bit5} */
+  {
+    UBICOM32_INSN_BCLR_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_IMMEDIATE, "bclr-d-indirect-with-pre-increment-4-s1-immediate", "bclr", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bclr ${d-direct-addr},(${s1-An},${s1-r}),#${bit5} */
+  {
+    UBICOM32_INSN_BCLR_D_DIRECT_S1_INDIRECT_WITH_INDEX_4, "bclr-d-direct-s1-indirect-with-index-4", "bclr", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bclr #${d-imm8},(${s1-An},${s1-r}),#${bit5} */
+  {
+    UBICOM32_INSN_BCLR_D_IMMEDIATE_4_S1_INDIRECT_WITH_INDEX_4, "bclr-d-immediate-4-s1-indirect-with-index-4", "bclr", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bclr (${d-An},${d-r}),(${s1-An},${s1-r}),#${bit5} */
+  {
+    UBICOM32_INSN_BCLR_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_INDEX_4, "bclr-d-indirect-with-index-4-s1-indirect-with-index-4", "bclr", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bclr ${d-imm7-4}(${d-An}),(${s1-An},${s1-r}),#${bit5} */
+  {
+    UBICOM32_INSN_BCLR_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_INDEX_4, "bclr-d-indirect-with-offset-4-s1-indirect-with-index-4", "bclr", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bclr (${d-An}),(${s1-An},${s1-r}),#${bit5} */
+  {
+    UBICOM32_INSN_BCLR_D_INDIRECT_4_S1_INDIRECT_WITH_INDEX_4, "bclr-d-indirect-4-s1-indirect-with-index-4", "bclr", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bclr (${d-An})${d-i4-4}++,(${s1-An},${s1-r}),#${bit5} */
+  {
+    UBICOM32_INSN_BCLR_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, "bclr-d-indirect-with-post-increment-4-s1-indirect-with-index-4", "bclr", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bclr ${d-i4-4}(${d-An})++,(${s1-An},${s1-r}),#${bit5} */
+  {
+    UBICOM32_INSN_BCLR_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, "bclr-d-indirect-with-pre-increment-4-s1-indirect-with-index-4", "bclr", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bclr ${d-direct-addr},${s1-imm7-4}(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_BCLR_D_DIRECT_S1_INDIRECT_WITH_OFFSET_4, "bclr-d-direct-s1-indirect-with-offset-4", "bclr", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bclr #${d-imm8},${s1-imm7-4}(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_BCLR_D_IMMEDIATE_4_S1_INDIRECT_WITH_OFFSET_4, "bclr-d-immediate-4-s1-indirect-with-offset-4", "bclr", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bclr (${d-An},${d-r}),${s1-imm7-4}(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_BCLR_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_OFFSET_4, "bclr-d-indirect-with-index-4-s1-indirect-with-offset-4", "bclr", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bclr ${d-imm7-4}(${d-An}),${s1-imm7-4}(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_BCLR_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_OFFSET_4, "bclr-d-indirect-with-offset-4-s1-indirect-with-offset-4", "bclr", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bclr (${d-An}),${s1-imm7-4}(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_BCLR_D_INDIRECT_4_S1_INDIRECT_WITH_OFFSET_4, "bclr-d-indirect-4-s1-indirect-with-offset-4", "bclr", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bclr (${d-An})${d-i4-4}++,${s1-imm7-4}(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_BCLR_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, "bclr-d-indirect-with-post-increment-4-s1-indirect-with-offset-4", "bclr", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bclr ${d-i4-4}(${d-An})++,${s1-imm7-4}(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_BCLR_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, "bclr-d-indirect-with-pre-increment-4-s1-indirect-with-offset-4", "bclr", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bclr ${d-direct-addr},(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_BCLR_D_DIRECT_S1_INDIRECT_4, "bclr-d-direct-s1-indirect-4", "bclr", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bclr #${d-imm8},(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_BCLR_D_IMMEDIATE_4_S1_INDIRECT_4, "bclr-d-immediate-4-s1-indirect-4", "bclr", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bclr (${d-An},${d-r}),(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_BCLR_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_4, "bclr-d-indirect-with-index-4-s1-indirect-4", "bclr", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bclr ${d-imm7-4}(${d-An}),(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_BCLR_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_4, "bclr-d-indirect-with-offset-4-s1-indirect-4", "bclr", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bclr (${d-An}),(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_BCLR_D_INDIRECT_4_S1_INDIRECT_4, "bclr-d-indirect-4-s1-indirect-4", "bclr", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bclr (${d-An})${d-i4-4}++,(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_BCLR_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_4, "bclr-d-indirect-with-post-increment-4-s1-indirect-4", "bclr", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bclr ${d-i4-4}(${d-An})++,(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_BCLR_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_4, "bclr-d-indirect-with-pre-increment-4-s1-indirect-4", "bclr", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bclr ${d-direct-addr},(${s1-An})${s1-i4-4}++,#${bit5} */
+  {
+    UBICOM32_INSN_BCLR_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_4, "bclr-d-direct-s1-indirect-with-post-increment-4", "bclr", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bclr #${d-imm8},(${s1-An})${s1-i4-4}++,#${bit5} */
+  {
+    UBICOM32_INSN_BCLR_D_IMMEDIATE_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "bclr-d-immediate-4-s1-indirect-with-post-increment-4", "bclr", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bclr (${d-An},${d-r}),(${s1-An})${s1-i4-4}++,#${bit5} */
+  {
+    UBICOM32_INSN_BCLR_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "bclr-d-indirect-with-index-4-s1-indirect-with-post-increment-4", "bclr", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bclr ${d-imm7-4}(${d-An}),(${s1-An})${s1-i4-4}++,#${bit5} */
+  {
+    UBICOM32_INSN_BCLR_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "bclr-d-indirect-with-offset-4-s1-indirect-with-post-increment-4", "bclr", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bclr (${d-An}),(${s1-An})${s1-i4-4}++,#${bit5} */
+  {
+    UBICOM32_INSN_BCLR_D_INDIRECT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "bclr-d-indirect-4-s1-indirect-with-post-increment-4", "bclr", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bclr (${d-An})${d-i4-4}++,(${s1-An})${s1-i4-4}++,#${bit5} */
+  {
+    UBICOM32_INSN_BCLR_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "bclr-d-indirect-with-post-increment-4-s1-indirect-with-post-increment-4", "bclr", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bclr ${d-i4-4}(${d-An})++,(${s1-An})${s1-i4-4}++,#${bit5} */
+  {
+    UBICOM32_INSN_BCLR_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "bclr-d-indirect-with-pre-increment-4-s1-indirect-with-post-increment-4", "bclr", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bclr ${d-direct-addr},${s1-i4-4}(${s1-An})++,#${bit5} */
+  {
+    UBICOM32_INSN_BCLR_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_4, "bclr-d-direct-s1-indirect-with-pre-increment-4", "bclr", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bclr #${d-imm8},${s1-i4-4}(${s1-An})++,#${bit5} */
+  {
+    UBICOM32_INSN_BCLR_D_IMMEDIATE_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "bclr-d-immediate-4-s1-indirect-with-pre-increment-4", "bclr", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bclr (${d-An},${d-r}),${s1-i4-4}(${s1-An})++,#${bit5} */
+  {
+    UBICOM32_INSN_BCLR_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "bclr-d-indirect-with-index-4-s1-indirect-with-pre-increment-4", "bclr", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bclr ${d-imm7-4}(${d-An}),${s1-i4-4}(${s1-An})++,#${bit5} */
+  {
+    UBICOM32_INSN_BCLR_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "bclr-d-indirect-with-offset-4-s1-indirect-with-pre-increment-4", "bclr", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bclr (${d-An}),${s1-i4-4}(${s1-An})++,#${bit5} */
+  {
+    UBICOM32_INSN_BCLR_D_INDIRECT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "bclr-d-indirect-4-s1-indirect-with-pre-increment-4", "bclr", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bclr (${d-An})${d-i4-4}++,${s1-i4-4}(${s1-An})++,#${bit5} */
+  {
+    UBICOM32_INSN_BCLR_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "bclr-d-indirect-with-post-increment-4-s1-indirect-with-pre-increment-4", "bclr", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bclr ${d-i4-4}(${d-An})++,${s1-i4-4}(${s1-An})++,#${bit5} */
+  {
+    UBICOM32_INSN_BCLR_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "bclr-d-indirect-with-pre-increment-4-s1-indirect-with-pre-increment-4", "bclr", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bset ${d-direct-addr},${s1-direct-addr},#${bit5} */
+  {
+    UBICOM32_INSN_BSET_D_DIRECT_S1_DIRECT, "bset-d-direct-s1-direct", "bset", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bset #${d-imm8},${s1-direct-addr},#${bit5} */
+  {
+    UBICOM32_INSN_BSET_D_IMMEDIATE_4_S1_DIRECT, "bset-d-immediate-4-s1-direct", "bset", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bset (${d-An},${d-r}),${s1-direct-addr},#${bit5} */
+  {
+    UBICOM32_INSN_BSET_D_INDIRECT_WITH_INDEX_4_S1_DIRECT, "bset-d-indirect-with-index-4-s1-direct", "bset", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bset ${d-imm7-4}(${d-An}),${s1-direct-addr},#${bit5} */
+  {
+    UBICOM32_INSN_BSET_D_INDIRECT_WITH_OFFSET_4_S1_DIRECT, "bset-d-indirect-with-offset-4-s1-direct", "bset", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bset (${d-An}),${s1-direct-addr},#${bit5} */
+  {
+    UBICOM32_INSN_BSET_D_INDIRECT_4_S1_DIRECT, "bset-d-indirect-4-s1-direct", "bset", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bset (${d-An})${d-i4-4}++,${s1-direct-addr},#${bit5} */
+  {
+    UBICOM32_INSN_BSET_D_INDIRECT_WITH_POST_INCREMENT_4_S1_DIRECT, "bset-d-indirect-with-post-increment-4-s1-direct", "bset", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bset ${d-i4-4}(${d-An})++,${s1-direct-addr},#${bit5} */
+  {
+    UBICOM32_INSN_BSET_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_DIRECT, "bset-d-indirect-with-pre-increment-4-s1-direct", "bset", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bset ${d-direct-addr},#${s1-imm8},#${bit5} */
+  {
+    UBICOM32_INSN_BSET_D_DIRECT_S1_IMMEDIATE, "bset-d-direct-s1-immediate", "bset", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bset #${d-imm8},#${s1-imm8},#${bit5} */
+  {
+    UBICOM32_INSN_BSET_D_IMMEDIATE_4_S1_IMMEDIATE, "bset-d-immediate-4-s1-immediate", "bset", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bset (${d-An},${d-r}),#${s1-imm8},#${bit5} */
+  {
+    UBICOM32_INSN_BSET_D_INDIRECT_WITH_INDEX_4_S1_IMMEDIATE, "bset-d-indirect-with-index-4-s1-immediate", "bset", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bset ${d-imm7-4}(${d-An}),#${s1-imm8},#${bit5} */
+  {
+    UBICOM32_INSN_BSET_D_INDIRECT_WITH_OFFSET_4_S1_IMMEDIATE, "bset-d-indirect-with-offset-4-s1-immediate", "bset", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bset (${d-An}),#${s1-imm8},#${bit5} */
+  {
+    UBICOM32_INSN_BSET_D_INDIRECT_4_S1_IMMEDIATE, "bset-d-indirect-4-s1-immediate", "bset", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bset (${d-An})${d-i4-4}++,#${s1-imm8},#${bit5} */
+  {
+    UBICOM32_INSN_BSET_D_INDIRECT_WITH_POST_INCREMENT_4_S1_IMMEDIATE, "bset-d-indirect-with-post-increment-4-s1-immediate", "bset", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bset ${d-i4-4}(${d-An})++,#${s1-imm8},#${bit5} */
+  {
+    UBICOM32_INSN_BSET_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_IMMEDIATE, "bset-d-indirect-with-pre-increment-4-s1-immediate", "bset", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bset ${d-direct-addr},(${s1-An},${s1-r}),#${bit5} */
+  {
+    UBICOM32_INSN_BSET_D_DIRECT_S1_INDIRECT_WITH_INDEX_4, "bset-d-direct-s1-indirect-with-index-4", "bset", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bset #${d-imm8},(${s1-An},${s1-r}),#${bit5} */
+  {
+    UBICOM32_INSN_BSET_D_IMMEDIATE_4_S1_INDIRECT_WITH_INDEX_4, "bset-d-immediate-4-s1-indirect-with-index-4", "bset", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bset (${d-An},${d-r}),(${s1-An},${s1-r}),#${bit5} */
+  {
+    UBICOM32_INSN_BSET_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_INDEX_4, "bset-d-indirect-with-index-4-s1-indirect-with-index-4", "bset", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bset ${d-imm7-4}(${d-An}),(${s1-An},${s1-r}),#${bit5} */
+  {
+    UBICOM32_INSN_BSET_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_INDEX_4, "bset-d-indirect-with-offset-4-s1-indirect-with-index-4", "bset", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bset (${d-An}),(${s1-An},${s1-r}),#${bit5} */
+  {
+    UBICOM32_INSN_BSET_D_INDIRECT_4_S1_INDIRECT_WITH_INDEX_4, "bset-d-indirect-4-s1-indirect-with-index-4", "bset", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bset (${d-An})${d-i4-4}++,(${s1-An},${s1-r}),#${bit5} */
+  {
+    UBICOM32_INSN_BSET_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, "bset-d-indirect-with-post-increment-4-s1-indirect-with-index-4", "bset", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bset ${d-i4-4}(${d-An})++,(${s1-An},${s1-r}),#${bit5} */
+  {
+    UBICOM32_INSN_BSET_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, "bset-d-indirect-with-pre-increment-4-s1-indirect-with-index-4", "bset", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bset ${d-direct-addr},${s1-imm7-4}(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_BSET_D_DIRECT_S1_INDIRECT_WITH_OFFSET_4, "bset-d-direct-s1-indirect-with-offset-4", "bset", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bset #${d-imm8},${s1-imm7-4}(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_BSET_D_IMMEDIATE_4_S1_INDIRECT_WITH_OFFSET_4, "bset-d-immediate-4-s1-indirect-with-offset-4", "bset", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bset (${d-An},${d-r}),${s1-imm7-4}(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_BSET_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_OFFSET_4, "bset-d-indirect-with-index-4-s1-indirect-with-offset-4", "bset", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bset ${d-imm7-4}(${d-An}),${s1-imm7-4}(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_BSET_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_OFFSET_4, "bset-d-indirect-with-offset-4-s1-indirect-with-offset-4", "bset", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bset (${d-An}),${s1-imm7-4}(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_BSET_D_INDIRECT_4_S1_INDIRECT_WITH_OFFSET_4, "bset-d-indirect-4-s1-indirect-with-offset-4", "bset", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bset (${d-An})${d-i4-4}++,${s1-imm7-4}(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_BSET_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, "bset-d-indirect-with-post-increment-4-s1-indirect-with-offset-4", "bset", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bset ${d-i4-4}(${d-An})++,${s1-imm7-4}(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_BSET_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, "bset-d-indirect-with-pre-increment-4-s1-indirect-with-offset-4", "bset", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bset ${d-direct-addr},(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_BSET_D_DIRECT_S1_INDIRECT_4, "bset-d-direct-s1-indirect-4", "bset", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bset #${d-imm8},(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_BSET_D_IMMEDIATE_4_S1_INDIRECT_4, "bset-d-immediate-4-s1-indirect-4", "bset", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bset (${d-An},${d-r}),(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_BSET_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_4, "bset-d-indirect-with-index-4-s1-indirect-4", "bset", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bset ${d-imm7-4}(${d-An}),(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_BSET_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_4, "bset-d-indirect-with-offset-4-s1-indirect-4", "bset", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bset (${d-An}),(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_BSET_D_INDIRECT_4_S1_INDIRECT_4, "bset-d-indirect-4-s1-indirect-4", "bset", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bset (${d-An})${d-i4-4}++,(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_BSET_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_4, "bset-d-indirect-with-post-increment-4-s1-indirect-4", "bset", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bset ${d-i4-4}(${d-An})++,(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_BSET_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_4, "bset-d-indirect-with-pre-increment-4-s1-indirect-4", "bset", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bset ${d-direct-addr},(${s1-An})${s1-i4-4}++,#${bit5} */
+  {
+    UBICOM32_INSN_BSET_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_4, "bset-d-direct-s1-indirect-with-post-increment-4", "bset", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bset #${d-imm8},(${s1-An})${s1-i4-4}++,#${bit5} */
+  {
+    UBICOM32_INSN_BSET_D_IMMEDIATE_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "bset-d-immediate-4-s1-indirect-with-post-increment-4", "bset", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bset (${d-An},${d-r}),(${s1-An})${s1-i4-4}++,#${bit5} */
+  {
+    UBICOM32_INSN_BSET_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "bset-d-indirect-with-index-4-s1-indirect-with-post-increment-4", "bset", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bset ${d-imm7-4}(${d-An}),(${s1-An})${s1-i4-4}++,#${bit5} */
+  {
+    UBICOM32_INSN_BSET_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "bset-d-indirect-with-offset-4-s1-indirect-with-post-increment-4", "bset", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bset (${d-An}),(${s1-An})${s1-i4-4}++,#${bit5} */
+  {
+    UBICOM32_INSN_BSET_D_INDIRECT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "bset-d-indirect-4-s1-indirect-with-post-increment-4", "bset", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bset (${d-An})${d-i4-4}++,(${s1-An})${s1-i4-4}++,#${bit5} */
+  {
+    UBICOM32_INSN_BSET_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "bset-d-indirect-with-post-increment-4-s1-indirect-with-post-increment-4", "bset", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bset ${d-i4-4}(${d-An})++,(${s1-An})${s1-i4-4}++,#${bit5} */
+  {
+    UBICOM32_INSN_BSET_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "bset-d-indirect-with-pre-increment-4-s1-indirect-with-post-increment-4", "bset", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bset ${d-direct-addr},${s1-i4-4}(${s1-An})++,#${bit5} */
+  {
+    UBICOM32_INSN_BSET_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_4, "bset-d-direct-s1-indirect-with-pre-increment-4", "bset", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bset #${d-imm8},${s1-i4-4}(${s1-An})++,#${bit5} */
+  {
+    UBICOM32_INSN_BSET_D_IMMEDIATE_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "bset-d-immediate-4-s1-indirect-with-pre-increment-4", "bset", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bset (${d-An},${d-r}),${s1-i4-4}(${s1-An})++,#${bit5} */
+  {
+    UBICOM32_INSN_BSET_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "bset-d-indirect-with-index-4-s1-indirect-with-pre-increment-4", "bset", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bset ${d-imm7-4}(${d-An}),${s1-i4-4}(${s1-An})++,#${bit5} */
+  {
+    UBICOM32_INSN_BSET_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "bset-d-indirect-with-offset-4-s1-indirect-with-pre-increment-4", "bset", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bset (${d-An}),${s1-i4-4}(${s1-An})++,#${bit5} */
+  {
+    UBICOM32_INSN_BSET_D_INDIRECT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "bset-d-indirect-4-s1-indirect-with-pre-increment-4", "bset", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bset (${d-An})${d-i4-4}++,${s1-i4-4}(${s1-An})++,#${bit5} */
+  {
+    UBICOM32_INSN_BSET_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "bset-d-indirect-with-post-increment-4-s1-indirect-with-pre-increment-4", "bset", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bset ${d-i4-4}(${d-An})++,${s1-i4-4}(${s1-An})++,#${bit5} */
+  {
+    UBICOM32_INSN_BSET_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "bset-d-indirect-with-pre-increment-4-s1-indirect-with-pre-increment-4", "bset", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* btst ${s1-direct-addr},#${bit5} */
+  {
+    UBICOM32_INSN_BTST_S1_DIRECT_IMM_BIT5, "btst-s1-direct-imm-bit5", "btst", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* btst #${s1-imm8},#${bit5} */
+  {
+    UBICOM32_INSN_BTST_S1_IMMEDIATE_IMM_BIT5, "btst-s1-immediate-imm-bit5", "btst", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* btst (${s1-An},${s1-r}),#${bit5} */
+  {
+    UBICOM32_INSN_BTST_S1_INDIRECT_WITH_INDEX_4_IMM_BIT5, "btst-s1-indirect-with-index-4-imm-bit5", "btst", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* btst ${s1-imm7-4}(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_BTST_S1_INDIRECT_WITH_OFFSET_4_IMM_BIT5, "btst-s1-indirect-with-offset-4-imm-bit5", "btst", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* btst (${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_BTST_S1_INDIRECT_4_IMM_BIT5, "btst-s1-indirect-4-imm-bit5", "btst", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* btst (${s1-An})${s1-i4-4}++,#${bit5} */
+  {
+    UBICOM32_INSN_BTST_S1_INDIRECT_WITH_POST_INCREMENT_4_IMM_BIT5, "btst-s1-indirect-with-post-increment-4-imm-bit5", "btst", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* btst ${s1-i4-4}(${s1-An})++,#${bit5} */
+  {
+    UBICOM32_INSN_BTST_S1_INDIRECT_WITH_PRE_INCREMENT_4_IMM_BIT5, "btst-s1-indirect-with-pre-increment-4-imm-bit5", "btst", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* btst ${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_BTST_S1_DIRECT_DYN_REG, "btst-s1-direct-dyn-reg", "btst", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* btst #${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_BTST_S1_IMMEDIATE_DYN_REG, "btst-s1-immediate-dyn-reg", "btst", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* btst (${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_BTST_S1_INDIRECT_WITH_INDEX_4_DYN_REG, "btst-s1-indirect-with-index-4-dyn-reg", "btst", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* btst ${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_BTST_S1_INDIRECT_WITH_OFFSET_4_DYN_REG, "btst-s1-indirect-with-offset-4-dyn-reg", "btst", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* btst (${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_BTST_S1_INDIRECT_4_DYN_REG, "btst-s1-indirect-4-dyn-reg", "btst", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* btst (${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_BTST_S1_INDIRECT_WITH_POST_INCREMENT_4_DYN_REG, "btst-s1-indirect-with-post-increment-4-dyn-reg", "btst", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* btst ${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_BTST_S1_INDIRECT_WITH_PRE_INCREMENT_4_DYN_REG, "btst-s1-indirect-with-pre-increment-4-dyn-reg", "btst", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* shmrg.2 ${Dn},${s1-direct-addr},#${bit5} */
+  {
+    UBICOM32_INSN_SHMRG_2_IMM_BIT5_S1_DIRECT, "shmrg.2-imm-bit5-s1-direct", "shmrg.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* shmrg.2 ${Dn},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_SHMRG_2_DYN_REG_S1_DIRECT, "shmrg.2-dyn-reg-s1-direct", "shmrg.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* shmrg.2 ${Dn},#${s1-imm8},#${bit5} */
+  {
+    UBICOM32_INSN_SHMRG_2_IMM_BIT5_S1_IMMEDIATE, "shmrg.2-imm-bit5-s1-immediate", "shmrg.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* shmrg.2 ${Dn},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_SHMRG_2_DYN_REG_S1_IMMEDIATE, "shmrg.2-dyn-reg-s1-immediate", "shmrg.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* shmrg.2 ${Dn},(${s1-An},${s1-r}),#${bit5} */
+  {
+    UBICOM32_INSN_SHMRG_2_IMM_BIT5_S1_INDIRECT_WITH_INDEX_2, "shmrg.2-imm-bit5-s1-indirect-with-index-2", "shmrg.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* shmrg.2 ${Dn},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_SHMRG_2_DYN_REG_S1_INDIRECT_WITH_INDEX_2, "shmrg.2-dyn-reg-s1-indirect-with-index-2", "shmrg.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* shmrg.2 ${Dn},${s1-imm7-2}(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_SHMRG_2_IMM_BIT5_S1_INDIRECT_WITH_OFFSET_2, "shmrg.2-imm-bit5-s1-indirect-with-offset-2", "shmrg.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* shmrg.2 ${Dn},${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SHMRG_2_DYN_REG_S1_INDIRECT_WITH_OFFSET_2, "shmrg.2-dyn-reg-s1-indirect-with-offset-2", "shmrg.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* shmrg.2 ${Dn},(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_SHMRG_2_IMM_BIT5_S1_INDIRECT_2, "shmrg.2-imm-bit5-s1-indirect-2", "shmrg.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* shmrg.2 ${Dn},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SHMRG_2_DYN_REG_S1_INDIRECT_2, "shmrg.2-dyn-reg-s1-indirect-2", "shmrg.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* shmrg.2 ${Dn},(${s1-An})${s1-i4-2}++,#${bit5} */
+  {
+    UBICOM32_INSN_SHMRG_2_IMM_BIT5_S1_INDIRECT_WITH_POST_INCREMENT_2, "shmrg.2-imm-bit5-s1-indirect-with-post-increment-2", "shmrg.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* shmrg.2 ${Dn},(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    UBICOM32_INSN_SHMRG_2_DYN_REG_S1_INDIRECT_WITH_POST_INCREMENT_2, "shmrg.2-dyn-reg-s1-indirect-with-post-increment-2", "shmrg.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* shmrg.2 ${Dn},${s1-i4-2}(${s1-An})++,#${bit5} */
+  {
+    UBICOM32_INSN_SHMRG_2_IMM_BIT5_S1_INDIRECT_WITH_PRE_INCREMENT_2, "shmrg.2-imm-bit5-s1-indirect-with-pre-increment-2", "shmrg.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* shmrg.2 ${Dn},${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_SHMRG_2_DYN_REG_S1_INDIRECT_WITH_PRE_INCREMENT_2, "shmrg.2-dyn-reg-s1-indirect-with-pre-increment-2", "shmrg.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* shmrg.1 ${Dn},${s1-direct-addr},#${bit5} */
+  {
+    UBICOM32_INSN_SHMRG_1_IMM_BIT5_S1_DIRECT, "shmrg.1-imm-bit5-s1-direct", "shmrg.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* shmrg.1 ${Dn},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_SHMRG_1_DYN_REG_S1_DIRECT, "shmrg.1-dyn-reg-s1-direct", "shmrg.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* shmrg.1 ${Dn},#${s1-imm8},#${bit5} */
+  {
+    UBICOM32_INSN_SHMRG_1_IMM_BIT5_S1_IMMEDIATE, "shmrg.1-imm-bit5-s1-immediate", "shmrg.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* shmrg.1 ${Dn},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_SHMRG_1_DYN_REG_S1_IMMEDIATE, "shmrg.1-dyn-reg-s1-immediate", "shmrg.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* shmrg.1 ${Dn},(${s1-An},${s1-r}),#${bit5} */
+  {
+    UBICOM32_INSN_SHMRG_1_IMM_BIT5_S1_INDIRECT_WITH_INDEX_1, "shmrg.1-imm-bit5-s1-indirect-with-index-1", "shmrg.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* shmrg.1 ${Dn},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_SHMRG_1_DYN_REG_S1_INDIRECT_WITH_INDEX_1, "shmrg.1-dyn-reg-s1-indirect-with-index-1", "shmrg.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* shmrg.1 ${Dn},${s1-imm7-1}(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_SHMRG_1_IMM_BIT5_S1_INDIRECT_WITH_OFFSET_1, "shmrg.1-imm-bit5-s1-indirect-with-offset-1", "shmrg.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* shmrg.1 ${Dn},${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SHMRG_1_DYN_REG_S1_INDIRECT_WITH_OFFSET_1, "shmrg.1-dyn-reg-s1-indirect-with-offset-1", "shmrg.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* shmrg.1 ${Dn},(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_SHMRG_1_IMM_BIT5_S1_INDIRECT_1, "shmrg.1-imm-bit5-s1-indirect-1", "shmrg.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* shmrg.1 ${Dn},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SHMRG_1_DYN_REG_S1_INDIRECT_1, "shmrg.1-dyn-reg-s1-indirect-1", "shmrg.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* shmrg.1 ${Dn},(${s1-An})${s1-i4-1}++,#${bit5} */
+  {
+    UBICOM32_INSN_SHMRG_1_IMM_BIT5_S1_INDIRECT_WITH_POST_INCREMENT_1, "shmrg.1-imm-bit5-s1-indirect-with-post-increment-1", "shmrg.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* shmrg.1 ${Dn},(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    UBICOM32_INSN_SHMRG_1_DYN_REG_S1_INDIRECT_WITH_POST_INCREMENT_1, "shmrg.1-dyn-reg-s1-indirect-with-post-increment-1", "shmrg.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* shmrg.1 ${Dn},${s1-i4-1}(${s1-An})++,#${bit5} */
+  {
+    UBICOM32_INSN_SHMRG_1_IMM_BIT5_S1_INDIRECT_WITH_PRE_INCREMENT_1, "shmrg.1-imm-bit5-s1-indirect-with-pre-increment-1", "shmrg.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* shmrg.1 ${Dn},${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_SHMRG_1_DYN_REG_S1_INDIRECT_WITH_PRE_INCREMENT_1, "shmrg.1-dyn-reg-s1-indirect-with-pre-increment-1", "shmrg.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* crcgen ${s1-direct-addr},#${bit5} */
+  {
+    UBICOM32_INSN_CRCGEN_S1_DIRECT_IMM_BIT5, "crcgen-s1-direct-imm-bit5", "crcgen", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* crcgen #${s1-imm8},#${bit5} */
+  {
+    UBICOM32_INSN_CRCGEN_S1_IMMEDIATE_IMM_BIT5, "crcgen-s1-immediate-imm-bit5", "crcgen", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* crcgen (${s1-An},${s1-r}),#${bit5} */
+  {
+    UBICOM32_INSN_CRCGEN_S1_INDIRECT_WITH_INDEX_1_IMM_BIT5, "crcgen-s1-indirect-with-index-1-imm-bit5", "crcgen", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* crcgen ${s1-imm7-1}(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_CRCGEN_S1_INDIRECT_WITH_OFFSET_1_IMM_BIT5, "crcgen-s1-indirect-with-offset-1-imm-bit5", "crcgen", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* crcgen (${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_CRCGEN_S1_INDIRECT_1_IMM_BIT5, "crcgen-s1-indirect-1-imm-bit5", "crcgen", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* crcgen (${s1-An})${s1-i4-1}++,#${bit5} */
+  {
+    UBICOM32_INSN_CRCGEN_S1_INDIRECT_WITH_POST_INCREMENT_1_IMM_BIT5, "crcgen-s1-indirect-with-post-increment-1-imm-bit5", "crcgen", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* crcgen ${s1-i4-1}(${s1-An})++,#${bit5} */
+  {
+    UBICOM32_INSN_CRCGEN_S1_INDIRECT_WITH_PRE_INCREMENT_1_IMM_BIT5, "crcgen-s1-indirect-with-pre-increment-1-imm-bit5", "crcgen", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* crcgen ${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_CRCGEN_S1_DIRECT_DYN_REG, "crcgen-s1-direct-dyn-reg", "crcgen", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* crcgen #${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_CRCGEN_S1_IMMEDIATE_DYN_REG, "crcgen-s1-immediate-dyn-reg", "crcgen", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* crcgen (${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_CRCGEN_S1_INDIRECT_WITH_INDEX_1_DYN_REG, "crcgen-s1-indirect-with-index-1-dyn-reg", "crcgen", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* crcgen ${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_CRCGEN_S1_INDIRECT_WITH_OFFSET_1_DYN_REG, "crcgen-s1-indirect-with-offset-1-dyn-reg", "crcgen", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* crcgen (${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_CRCGEN_S1_INDIRECT_1_DYN_REG, "crcgen-s1-indirect-1-dyn-reg", "crcgen", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* crcgen (${s1-An})${s1-i4-1}++,${s2} */
+  {
+    UBICOM32_INSN_CRCGEN_S1_INDIRECT_WITH_POST_INCREMENT_1_DYN_REG, "crcgen-s1-indirect-with-post-increment-1-dyn-reg", "crcgen", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* crcgen ${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_CRCGEN_S1_INDIRECT_WITH_PRE_INCREMENT_1_DYN_REG, "crcgen-s1-indirect-with-pre-increment-1-dyn-reg", "crcgen", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bfextu ${Dn},${s1-direct-addr},#${bit5} */
+  {
+    UBICOM32_INSN_BFEXTU_S1_DIRECT_IMM_BIT5, "bfextu-s1-direct-imm-bit5", "bfextu", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bfextu ${Dn},#${s1-imm8},#${bit5} */
+  {
+    UBICOM32_INSN_BFEXTU_S1_IMMEDIATE_IMM_BIT5, "bfextu-s1-immediate-imm-bit5", "bfextu", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bfextu ${Dn},(${s1-An},${s1-r}),#${bit5} */
+  {
+    UBICOM32_INSN_BFEXTU_S1_INDIRECT_WITH_INDEX_4_IMM_BIT5, "bfextu-s1-indirect-with-index-4-imm-bit5", "bfextu", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bfextu ${Dn},${s1-imm7-4}(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_BFEXTU_S1_INDIRECT_WITH_OFFSET_4_IMM_BIT5, "bfextu-s1-indirect-with-offset-4-imm-bit5", "bfextu", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bfextu ${Dn},(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_BFEXTU_S1_INDIRECT_4_IMM_BIT5, "bfextu-s1-indirect-4-imm-bit5", "bfextu", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bfextu ${Dn},(${s1-An})${s1-i4-4}++,#${bit5} */
+  {
+    UBICOM32_INSN_BFEXTU_S1_INDIRECT_WITH_POST_INCREMENT_4_IMM_BIT5, "bfextu-s1-indirect-with-post-increment-4-imm-bit5", "bfextu", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bfextu ${Dn},${s1-i4-4}(${s1-An})++,#${bit5} */
+  {
+    UBICOM32_INSN_BFEXTU_S1_INDIRECT_WITH_PRE_INCREMENT_4_IMM_BIT5, "bfextu-s1-indirect-with-pre-increment-4-imm-bit5", "bfextu", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bfextu ${Dn},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_BFEXTU_S1_DIRECT_DYN_REG, "bfextu-s1-direct-dyn-reg", "bfextu", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bfextu ${Dn},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_BFEXTU_S1_IMMEDIATE_DYN_REG, "bfextu-s1-immediate-dyn-reg", "bfextu", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bfextu ${Dn},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_BFEXTU_S1_INDIRECT_WITH_INDEX_4_DYN_REG, "bfextu-s1-indirect-with-index-4-dyn-reg", "bfextu", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bfextu ${Dn},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_BFEXTU_S1_INDIRECT_WITH_OFFSET_4_DYN_REG, "bfextu-s1-indirect-with-offset-4-dyn-reg", "bfextu", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bfextu ${Dn},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_BFEXTU_S1_INDIRECT_4_DYN_REG, "bfextu-s1-indirect-4-dyn-reg", "bfextu", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bfextu ${Dn},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_BFEXTU_S1_INDIRECT_WITH_POST_INCREMENT_4_DYN_REG, "bfextu-s1-indirect-with-post-increment-4-dyn-reg", "bfextu", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bfextu ${Dn},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_BFEXTU_S1_INDIRECT_WITH_PRE_INCREMENT_4_DYN_REG, "bfextu-s1-indirect-with-pre-increment-4-dyn-reg", "bfextu", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bfrvrs ${Dn},${s1-direct-addr},#${bit5} */
+  {
+    UBICOM32_INSN_BFRVRS_S1_DIRECT_IMM_BIT5, "bfrvrs-s1-direct-imm-bit5", "bfrvrs", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bfrvrs ${Dn},#${s1-imm8},#${bit5} */
+  {
+    UBICOM32_INSN_BFRVRS_S1_IMMEDIATE_IMM_BIT5, "bfrvrs-s1-immediate-imm-bit5", "bfrvrs", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bfrvrs ${Dn},(${s1-An},${s1-r}),#${bit5} */
+  {
+    UBICOM32_INSN_BFRVRS_S1_INDIRECT_WITH_INDEX_4_IMM_BIT5, "bfrvrs-s1-indirect-with-index-4-imm-bit5", "bfrvrs", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bfrvrs ${Dn},${s1-imm7-4}(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_BFRVRS_S1_INDIRECT_WITH_OFFSET_4_IMM_BIT5, "bfrvrs-s1-indirect-with-offset-4-imm-bit5", "bfrvrs", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bfrvrs ${Dn},(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_BFRVRS_S1_INDIRECT_4_IMM_BIT5, "bfrvrs-s1-indirect-4-imm-bit5", "bfrvrs", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bfrvrs ${Dn},(${s1-An})${s1-i4-4}++,#${bit5} */
+  {
+    UBICOM32_INSN_BFRVRS_S1_INDIRECT_WITH_POST_INCREMENT_4_IMM_BIT5, "bfrvrs-s1-indirect-with-post-increment-4-imm-bit5", "bfrvrs", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bfrvrs ${Dn},${s1-i4-4}(${s1-An})++,#${bit5} */
+  {
+    UBICOM32_INSN_BFRVRS_S1_INDIRECT_WITH_PRE_INCREMENT_4_IMM_BIT5, "bfrvrs-s1-indirect-with-pre-increment-4-imm-bit5", "bfrvrs", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bfrvrs ${Dn},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_BFRVRS_S1_DIRECT_DYN_REG, "bfrvrs-s1-direct-dyn-reg", "bfrvrs", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bfrvrs ${Dn},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_BFRVRS_S1_IMMEDIATE_DYN_REG, "bfrvrs-s1-immediate-dyn-reg", "bfrvrs", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bfrvrs ${Dn},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_BFRVRS_S1_INDIRECT_WITH_INDEX_4_DYN_REG, "bfrvrs-s1-indirect-with-index-4-dyn-reg", "bfrvrs", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bfrvrs ${Dn},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_BFRVRS_S1_INDIRECT_WITH_OFFSET_4_DYN_REG, "bfrvrs-s1-indirect-with-offset-4-dyn-reg", "bfrvrs", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bfrvrs ${Dn},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_BFRVRS_S1_INDIRECT_4_DYN_REG, "bfrvrs-s1-indirect-4-dyn-reg", "bfrvrs", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bfrvrs ${Dn},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_BFRVRS_S1_INDIRECT_WITH_POST_INCREMENT_4_DYN_REG, "bfrvrs-s1-indirect-with-post-increment-4-dyn-reg", "bfrvrs", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* bfrvrs ${Dn},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_BFRVRS_S1_INDIRECT_WITH_PRE_INCREMENT_4_DYN_REG, "bfrvrs-s1-indirect-with-pre-increment-4-dyn-reg", "bfrvrs", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* merge ${Dn},${s1-direct-addr},#${bit5} */
+  {
+    UBICOM32_INSN_MERGE_S1_DIRECT_IMM_BIT5, "merge-s1-direct-imm-bit5", "merge", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* merge ${Dn},#${s1-imm8},#${bit5} */
+  {
+    UBICOM32_INSN_MERGE_S1_IMMEDIATE_IMM_BIT5, "merge-s1-immediate-imm-bit5", "merge", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* merge ${Dn},(${s1-An},${s1-r}),#${bit5} */
+  {
+    UBICOM32_INSN_MERGE_S1_INDIRECT_WITH_INDEX_4_IMM_BIT5, "merge-s1-indirect-with-index-4-imm-bit5", "merge", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* merge ${Dn},${s1-imm7-4}(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_MERGE_S1_INDIRECT_WITH_OFFSET_4_IMM_BIT5, "merge-s1-indirect-with-offset-4-imm-bit5", "merge", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* merge ${Dn},(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_MERGE_S1_INDIRECT_4_IMM_BIT5, "merge-s1-indirect-4-imm-bit5", "merge", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* merge ${Dn},(${s1-An})${s1-i4-4}++,#${bit5} */
+  {
+    UBICOM32_INSN_MERGE_S1_INDIRECT_WITH_POST_INCREMENT_4_IMM_BIT5, "merge-s1-indirect-with-post-increment-4-imm-bit5", "merge", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* merge ${Dn},${s1-i4-4}(${s1-An})++,#${bit5} */
+  {
+    UBICOM32_INSN_MERGE_S1_INDIRECT_WITH_PRE_INCREMENT_4_IMM_BIT5, "merge-s1-indirect-with-pre-increment-4-imm-bit5", "merge", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* merge ${Dn},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_MERGE_S1_DIRECT_DYN_REG, "merge-s1-direct-dyn-reg", "merge", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* merge ${Dn},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_MERGE_S1_IMMEDIATE_DYN_REG, "merge-s1-immediate-dyn-reg", "merge", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* merge ${Dn},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_MERGE_S1_INDIRECT_WITH_INDEX_4_DYN_REG, "merge-s1-indirect-with-index-4-dyn-reg", "merge", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* merge ${Dn},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_MERGE_S1_INDIRECT_WITH_OFFSET_4_DYN_REG, "merge-s1-indirect-with-offset-4-dyn-reg", "merge", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* merge ${Dn},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_MERGE_S1_INDIRECT_4_DYN_REG, "merge-s1-indirect-4-dyn-reg", "merge", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* merge ${Dn},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_MERGE_S1_INDIRECT_WITH_POST_INCREMENT_4_DYN_REG, "merge-s1-indirect-with-post-increment-4-dyn-reg", "merge", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* merge ${Dn},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_MERGE_S1_INDIRECT_WITH_PRE_INCREMENT_4_DYN_REG, "merge-s1-indirect-with-pre-increment-4-dyn-reg", "merge", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* shftd ${Dn},${s1-direct-addr},#${bit5} */
+  {
+    UBICOM32_INSN_SHFTD_S1_DIRECT_IMM_BIT5, "shftd-s1-direct-imm-bit5", "shftd", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* shftd ${Dn},#${s1-imm8},#${bit5} */
+  {
+    UBICOM32_INSN_SHFTD_S1_IMMEDIATE_IMM_BIT5, "shftd-s1-immediate-imm-bit5", "shftd", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* shftd ${Dn},(${s1-An},${s1-r}),#${bit5} */
+  {
+    UBICOM32_INSN_SHFTD_S1_INDIRECT_WITH_INDEX_4_IMM_BIT5, "shftd-s1-indirect-with-index-4-imm-bit5", "shftd", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* shftd ${Dn},${s1-imm7-4}(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_SHFTD_S1_INDIRECT_WITH_OFFSET_4_IMM_BIT5, "shftd-s1-indirect-with-offset-4-imm-bit5", "shftd", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* shftd ${Dn},(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_SHFTD_S1_INDIRECT_4_IMM_BIT5, "shftd-s1-indirect-4-imm-bit5", "shftd", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* shftd ${Dn},(${s1-An})${s1-i4-4}++,#${bit5} */
+  {
+    UBICOM32_INSN_SHFTD_S1_INDIRECT_WITH_POST_INCREMENT_4_IMM_BIT5, "shftd-s1-indirect-with-post-increment-4-imm-bit5", "shftd", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* shftd ${Dn},${s1-i4-4}(${s1-An})++,#${bit5} */
+  {
+    UBICOM32_INSN_SHFTD_S1_INDIRECT_WITH_PRE_INCREMENT_4_IMM_BIT5, "shftd-s1-indirect-with-pre-increment-4-imm-bit5", "shftd", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* shftd ${Dn},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_SHFTD_S1_DIRECT_DYN_REG, "shftd-s1-direct-dyn-reg", "shftd", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* shftd ${Dn},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_SHFTD_S1_IMMEDIATE_DYN_REG, "shftd-s1-immediate-dyn-reg", "shftd", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* shftd ${Dn},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_SHFTD_S1_INDIRECT_WITH_INDEX_4_DYN_REG, "shftd-s1-indirect-with-index-4-dyn-reg", "shftd", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* shftd ${Dn},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SHFTD_S1_INDIRECT_WITH_OFFSET_4_DYN_REG, "shftd-s1-indirect-with-offset-4-dyn-reg", "shftd", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* shftd ${Dn},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SHFTD_S1_INDIRECT_4_DYN_REG, "shftd-s1-indirect-4-dyn-reg", "shftd", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* shftd ${Dn},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_SHFTD_S1_INDIRECT_WITH_POST_INCREMENT_4_DYN_REG, "shftd-s1-indirect-with-post-increment-4-dyn-reg", "shftd", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* shftd ${Dn},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_SHFTD_S1_INDIRECT_WITH_PRE_INCREMENT_4_DYN_REG, "shftd-s1-indirect-with-pre-increment-4-dyn-reg", "shftd", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* asr.1 ${Dn},${s1-direct-addr},#${bit5} */
+  {
+    UBICOM32_INSN_ASR_1_IMM_BIT5_S1_DIRECT, "asr.1-imm-bit5-s1-direct", "asr.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* asr.1 ${Dn},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_ASR_1_DYN_REG_S1_DIRECT, "asr.1-dyn-reg-s1-direct", "asr.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* asr.1 ${Dn},#${s1-imm8},#${bit5} */
+  {
+    UBICOM32_INSN_ASR_1_IMM_BIT5_S1_IMMEDIATE, "asr.1-imm-bit5-s1-immediate", "asr.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* asr.1 ${Dn},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_ASR_1_DYN_REG_S1_IMMEDIATE, "asr.1-dyn-reg-s1-immediate", "asr.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* asr.1 ${Dn},(${s1-An},${s1-r}),#${bit5} */
+  {
+    UBICOM32_INSN_ASR_1_IMM_BIT5_S1_INDIRECT_WITH_INDEX_1, "asr.1-imm-bit5-s1-indirect-with-index-1", "asr.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* asr.1 ${Dn},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_ASR_1_DYN_REG_S1_INDIRECT_WITH_INDEX_1, "asr.1-dyn-reg-s1-indirect-with-index-1", "asr.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* asr.1 ${Dn},${s1-imm7-1}(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_ASR_1_IMM_BIT5_S1_INDIRECT_WITH_OFFSET_1, "asr.1-imm-bit5-s1-indirect-with-offset-1", "asr.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* asr.1 ${Dn},${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ASR_1_DYN_REG_S1_INDIRECT_WITH_OFFSET_1, "asr.1-dyn-reg-s1-indirect-with-offset-1", "asr.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* asr.1 ${Dn},(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_ASR_1_IMM_BIT5_S1_INDIRECT_1, "asr.1-imm-bit5-s1-indirect-1", "asr.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* asr.1 ${Dn},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ASR_1_DYN_REG_S1_INDIRECT_1, "asr.1-dyn-reg-s1-indirect-1", "asr.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* asr.1 ${Dn},(${s1-An})${s1-i4-1}++,#${bit5} */
+  {
+    UBICOM32_INSN_ASR_1_IMM_BIT5_S1_INDIRECT_WITH_POST_INCREMENT_1, "asr.1-imm-bit5-s1-indirect-with-post-increment-1", "asr.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* asr.1 ${Dn},(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    UBICOM32_INSN_ASR_1_DYN_REG_S1_INDIRECT_WITH_POST_INCREMENT_1, "asr.1-dyn-reg-s1-indirect-with-post-increment-1", "asr.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* asr.1 ${Dn},${s1-i4-1}(${s1-An})++,#${bit5} */
+  {
+    UBICOM32_INSN_ASR_1_IMM_BIT5_S1_INDIRECT_WITH_PRE_INCREMENT_1, "asr.1-imm-bit5-s1-indirect-with-pre-increment-1", "asr.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* asr.1 ${Dn},${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_ASR_1_DYN_REG_S1_INDIRECT_WITH_PRE_INCREMENT_1, "asr.1-dyn-reg-s1-indirect-with-pre-increment-1", "asr.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* lsl.1 ${Dn},${s1-direct-addr},#${bit5} */
+  {
+    UBICOM32_INSN_LSL_1_IMM_BIT5_S1_DIRECT, "lsl.1-imm-bit5-s1-direct", "lsl.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* lsl.1 ${Dn},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_LSL_1_DYN_REG_S1_DIRECT, "lsl.1-dyn-reg-s1-direct", "lsl.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* lsl.1 ${Dn},#${s1-imm8},#${bit5} */
+  {
+    UBICOM32_INSN_LSL_1_IMM_BIT5_S1_IMMEDIATE, "lsl.1-imm-bit5-s1-immediate", "lsl.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* lsl.1 ${Dn},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_LSL_1_DYN_REG_S1_IMMEDIATE, "lsl.1-dyn-reg-s1-immediate", "lsl.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* lsl.1 ${Dn},(${s1-An},${s1-r}),#${bit5} */
+  {
+    UBICOM32_INSN_LSL_1_IMM_BIT5_S1_INDIRECT_WITH_INDEX_1, "lsl.1-imm-bit5-s1-indirect-with-index-1", "lsl.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* lsl.1 ${Dn},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_LSL_1_DYN_REG_S1_INDIRECT_WITH_INDEX_1, "lsl.1-dyn-reg-s1-indirect-with-index-1", "lsl.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* lsl.1 ${Dn},${s1-imm7-1}(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_LSL_1_IMM_BIT5_S1_INDIRECT_WITH_OFFSET_1, "lsl.1-imm-bit5-s1-indirect-with-offset-1", "lsl.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* lsl.1 ${Dn},${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_LSL_1_DYN_REG_S1_INDIRECT_WITH_OFFSET_1, "lsl.1-dyn-reg-s1-indirect-with-offset-1", "lsl.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* lsl.1 ${Dn},(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_LSL_1_IMM_BIT5_S1_INDIRECT_1, "lsl.1-imm-bit5-s1-indirect-1", "lsl.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* lsl.1 ${Dn},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_LSL_1_DYN_REG_S1_INDIRECT_1, "lsl.1-dyn-reg-s1-indirect-1", "lsl.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* lsl.1 ${Dn},(${s1-An})${s1-i4-1}++,#${bit5} */
+  {
+    UBICOM32_INSN_LSL_1_IMM_BIT5_S1_INDIRECT_WITH_POST_INCREMENT_1, "lsl.1-imm-bit5-s1-indirect-with-post-increment-1", "lsl.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* lsl.1 ${Dn},(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    UBICOM32_INSN_LSL_1_DYN_REG_S1_INDIRECT_WITH_POST_INCREMENT_1, "lsl.1-dyn-reg-s1-indirect-with-post-increment-1", "lsl.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* lsl.1 ${Dn},${s1-i4-1}(${s1-An})++,#${bit5} */
+  {
+    UBICOM32_INSN_LSL_1_IMM_BIT5_S1_INDIRECT_WITH_PRE_INCREMENT_1, "lsl.1-imm-bit5-s1-indirect-with-pre-increment-1", "lsl.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* lsl.1 ${Dn},${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_LSL_1_DYN_REG_S1_INDIRECT_WITH_PRE_INCREMENT_1, "lsl.1-dyn-reg-s1-indirect-with-pre-increment-1", "lsl.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* lsr.1 ${Dn},${s1-direct-addr},#${bit5} */
+  {
+    UBICOM32_INSN_LSR_1_IMM_BIT5_S1_DIRECT, "lsr.1-imm-bit5-s1-direct", "lsr.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* lsr.1 ${Dn},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_LSR_1_DYN_REG_S1_DIRECT, "lsr.1-dyn-reg-s1-direct", "lsr.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* lsr.1 ${Dn},#${s1-imm8},#${bit5} */
+  {
+    UBICOM32_INSN_LSR_1_IMM_BIT5_S1_IMMEDIATE, "lsr.1-imm-bit5-s1-immediate", "lsr.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* lsr.1 ${Dn},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_LSR_1_DYN_REG_S1_IMMEDIATE, "lsr.1-dyn-reg-s1-immediate", "lsr.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* lsr.1 ${Dn},(${s1-An},${s1-r}),#${bit5} */
+  {
+    UBICOM32_INSN_LSR_1_IMM_BIT5_S1_INDIRECT_WITH_INDEX_1, "lsr.1-imm-bit5-s1-indirect-with-index-1", "lsr.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* lsr.1 ${Dn},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_LSR_1_DYN_REG_S1_INDIRECT_WITH_INDEX_1, "lsr.1-dyn-reg-s1-indirect-with-index-1", "lsr.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* lsr.1 ${Dn},${s1-imm7-1}(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_LSR_1_IMM_BIT5_S1_INDIRECT_WITH_OFFSET_1, "lsr.1-imm-bit5-s1-indirect-with-offset-1", "lsr.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* lsr.1 ${Dn},${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_LSR_1_DYN_REG_S1_INDIRECT_WITH_OFFSET_1, "lsr.1-dyn-reg-s1-indirect-with-offset-1", "lsr.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* lsr.1 ${Dn},(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_LSR_1_IMM_BIT5_S1_INDIRECT_1, "lsr.1-imm-bit5-s1-indirect-1", "lsr.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* lsr.1 ${Dn},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_LSR_1_DYN_REG_S1_INDIRECT_1, "lsr.1-dyn-reg-s1-indirect-1", "lsr.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* lsr.1 ${Dn},(${s1-An})${s1-i4-1}++,#${bit5} */
+  {
+    UBICOM32_INSN_LSR_1_IMM_BIT5_S1_INDIRECT_WITH_POST_INCREMENT_1, "lsr.1-imm-bit5-s1-indirect-with-post-increment-1", "lsr.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* lsr.1 ${Dn},(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    UBICOM32_INSN_LSR_1_DYN_REG_S1_INDIRECT_WITH_POST_INCREMENT_1, "lsr.1-dyn-reg-s1-indirect-with-post-increment-1", "lsr.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* lsr.1 ${Dn},${s1-i4-1}(${s1-An})++,#${bit5} */
+  {
+    UBICOM32_INSN_LSR_1_IMM_BIT5_S1_INDIRECT_WITH_PRE_INCREMENT_1, "lsr.1-imm-bit5-s1-indirect-with-pre-increment-1", "lsr.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* lsr.1 ${Dn},${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_LSR_1_DYN_REG_S1_INDIRECT_WITH_PRE_INCREMENT_1, "lsr.1-dyn-reg-s1-indirect-with-pre-increment-1", "lsr.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* asr.2 ${Dn},${s1-direct-addr},#${bit5} */
+  {
+    UBICOM32_INSN_ASR_2_IMM_BIT5_S1_DIRECT, "asr.2-imm-bit5-s1-direct", "asr.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* asr.2 ${Dn},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_ASR_2_DYN_REG_S1_DIRECT, "asr.2-dyn-reg-s1-direct", "asr.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* asr.2 ${Dn},#${s1-imm8},#${bit5} */
+  {
+    UBICOM32_INSN_ASR_2_IMM_BIT5_S1_IMMEDIATE, "asr.2-imm-bit5-s1-immediate", "asr.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* asr.2 ${Dn},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_ASR_2_DYN_REG_S1_IMMEDIATE, "asr.2-dyn-reg-s1-immediate", "asr.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* asr.2 ${Dn},(${s1-An},${s1-r}),#${bit5} */
+  {
+    UBICOM32_INSN_ASR_2_IMM_BIT5_S1_INDIRECT_WITH_INDEX_2, "asr.2-imm-bit5-s1-indirect-with-index-2", "asr.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* asr.2 ${Dn},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_ASR_2_DYN_REG_S1_INDIRECT_WITH_INDEX_2, "asr.2-dyn-reg-s1-indirect-with-index-2", "asr.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* asr.2 ${Dn},${s1-imm7-2}(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_ASR_2_IMM_BIT5_S1_INDIRECT_WITH_OFFSET_2, "asr.2-imm-bit5-s1-indirect-with-offset-2", "asr.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* asr.2 ${Dn},${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ASR_2_DYN_REG_S1_INDIRECT_WITH_OFFSET_2, "asr.2-dyn-reg-s1-indirect-with-offset-2", "asr.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* asr.2 ${Dn},(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_ASR_2_IMM_BIT5_S1_INDIRECT_2, "asr.2-imm-bit5-s1-indirect-2", "asr.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* asr.2 ${Dn},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ASR_2_DYN_REG_S1_INDIRECT_2, "asr.2-dyn-reg-s1-indirect-2", "asr.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* asr.2 ${Dn},(${s1-An})${s1-i4-2}++,#${bit5} */
+  {
+    UBICOM32_INSN_ASR_2_IMM_BIT5_S1_INDIRECT_WITH_POST_INCREMENT_2, "asr.2-imm-bit5-s1-indirect-with-post-increment-2", "asr.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* asr.2 ${Dn},(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    UBICOM32_INSN_ASR_2_DYN_REG_S1_INDIRECT_WITH_POST_INCREMENT_2, "asr.2-dyn-reg-s1-indirect-with-post-increment-2", "asr.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* asr.2 ${Dn},${s1-i4-2}(${s1-An})++,#${bit5} */
+  {
+    UBICOM32_INSN_ASR_2_IMM_BIT5_S1_INDIRECT_WITH_PRE_INCREMENT_2, "asr.2-imm-bit5-s1-indirect-with-pre-increment-2", "asr.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* asr.2 ${Dn},${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_ASR_2_DYN_REG_S1_INDIRECT_WITH_PRE_INCREMENT_2, "asr.2-dyn-reg-s1-indirect-with-pre-increment-2", "asr.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lsl.2 ${Dn},${s1-direct-addr},#${bit5} */
+  {
+    UBICOM32_INSN_LSL_2_IMM_BIT5_S1_DIRECT, "lsl.2-imm-bit5-s1-direct", "lsl.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lsl.2 ${Dn},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_LSL_2_DYN_REG_S1_DIRECT, "lsl.2-dyn-reg-s1-direct", "lsl.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lsl.2 ${Dn},#${s1-imm8},#${bit5} */
+  {
+    UBICOM32_INSN_LSL_2_IMM_BIT5_S1_IMMEDIATE, "lsl.2-imm-bit5-s1-immediate", "lsl.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lsl.2 ${Dn},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_LSL_2_DYN_REG_S1_IMMEDIATE, "lsl.2-dyn-reg-s1-immediate", "lsl.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lsl.2 ${Dn},(${s1-An},${s1-r}),#${bit5} */
+  {
+    UBICOM32_INSN_LSL_2_IMM_BIT5_S1_INDIRECT_WITH_INDEX_2, "lsl.2-imm-bit5-s1-indirect-with-index-2", "lsl.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lsl.2 ${Dn},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_LSL_2_DYN_REG_S1_INDIRECT_WITH_INDEX_2, "lsl.2-dyn-reg-s1-indirect-with-index-2", "lsl.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lsl.2 ${Dn},${s1-imm7-2}(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_LSL_2_IMM_BIT5_S1_INDIRECT_WITH_OFFSET_2, "lsl.2-imm-bit5-s1-indirect-with-offset-2", "lsl.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lsl.2 ${Dn},${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_LSL_2_DYN_REG_S1_INDIRECT_WITH_OFFSET_2, "lsl.2-dyn-reg-s1-indirect-with-offset-2", "lsl.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lsl.2 ${Dn},(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_LSL_2_IMM_BIT5_S1_INDIRECT_2, "lsl.2-imm-bit5-s1-indirect-2", "lsl.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lsl.2 ${Dn},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_LSL_2_DYN_REG_S1_INDIRECT_2, "lsl.2-dyn-reg-s1-indirect-2", "lsl.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lsl.2 ${Dn},(${s1-An})${s1-i4-2}++,#${bit5} */
+  {
+    UBICOM32_INSN_LSL_2_IMM_BIT5_S1_INDIRECT_WITH_POST_INCREMENT_2, "lsl.2-imm-bit5-s1-indirect-with-post-increment-2", "lsl.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lsl.2 ${Dn},(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    UBICOM32_INSN_LSL_2_DYN_REG_S1_INDIRECT_WITH_POST_INCREMENT_2, "lsl.2-dyn-reg-s1-indirect-with-post-increment-2", "lsl.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lsl.2 ${Dn},${s1-i4-2}(${s1-An})++,#${bit5} */
+  {
+    UBICOM32_INSN_LSL_2_IMM_BIT5_S1_INDIRECT_WITH_PRE_INCREMENT_2, "lsl.2-imm-bit5-s1-indirect-with-pre-increment-2", "lsl.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lsl.2 ${Dn},${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_LSL_2_DYN_REG_S1_INDIRECT_WITH_PRE_INCREMENT_2, "lsl.2-dyn-reg-s1-indirect-with-pre-increment-2", "lsl.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lsr.2 ${Dn},${s1-direct-addr},#${bit5} */
+  {
+    UBICOM32_INSN_LSR_2_IMM_BIT5_S1_DIRECT, "lsr.2-imm-bit5-s1-direct", "lsr.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lsr.2 ${Dn},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_LSR_2_DYN_REG_S1_DIRECT, "lsr.2-dyn-reg-s1-direct", "lsr.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lsr.2 ${Dn},#${s1-imm8},#${bit5} */
+  {
+    UBICOM32_INSN_LSR_2_IMM_BIT5_S1_IMMEDIATE, "lsr.2-imm-bit5-s1-immediate", "lsr.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lsr.2 ${Dn},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_LSR_2_DYN_REG_S1_IMMEDIATE, "lsr.2-dyn-reg-s1-immediate", "lsr.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lsr.2 ${Dn},(${s1-An},${s1-r}),#${bit5} */
+  {
+    UBICOM32_INSN_LSR_2_IMM_BIT5_S1_INDIRECT_WITH_INDEX_2, "lsr.2-imm-bit5-s1-indirect-with-index-2", "lsr.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lsr.2 ${Dn},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_LSR_2_DYN_REG_S1_INDIRECT_WITH_INDEX_2, "lsr.2-dyn-reg-s1-indirect-with-index-2", "lsr.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lsr.2 ${Dn},${s1-imm7-2}(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_LSR_2_IMM_BIT5_S1_INDIRECT_WITH_OFFSET_2, "lsr.2-imm-bit5-s1-indirect-with-offset-2", "lsr.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lsr.2 ${Dn},${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_LSR_2_DYN_REG_S1_INDIRECT_WITH_OFFSET_2, "lsr.2-dyn-reg-s1-indirect-with-offset-2", "lsr.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lsr.2 ${Dn},(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_LSR_2_IMM_BIT5_S1_INDIRECT_2, "lsr.2-imm-bit5-s1-indirect-2", "lsr.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lsr.2 ${Dn},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_LSR_2_DYN_REG_S1_INDIRECT_2, "lsr.2-dyn-reg-s1-indirect-2", "lsr.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lsr.2 ${Dn},(${s1-An})${s1-i4-2}++,#${bit5} */
+  {
+    UBICOM32_INSN_LSR_2_IMM_BIT5_S1_INDIRECT_WITH_POST_INCREMENT_2, "lsr.2-imm-bit5-s1-indirect-with-post-increment-2", "lsr.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lsr.2 ${Dn},(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    UBICOM32_INSN_LSR_2_DYN_REG_S1_INDIRECT_WITH_POST_INCREMENT_2, "lsr.2-dyn-reg-s1-indirect-with-post-increment-2", "lsr.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lsr.2 ${Dn},${s1-i4-2}(${s1-An})++,#${bit5} */
+  {
+    UBICOM32_INSN_LSR_2_IMM_BIT5_S1_INDIRECT_WITH_PRE_INCREMENT_2, "lsr.2-imm-bit5-s1-indirect-with-pre-increment-2", "lsr.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lsr.2 ${Dn},${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_LSR_2_DYN_REG_S1_INDIRECT_WITH_PRE_INCREMENT_2, "lsr.2-dyn-reg-s1-indirect-with-pre-increment-2", "lsr.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* asr.4 ${Dn},${s1-direct-addr},#${bit5} */
+  {
+    UBICOM32_INSN_ASR_4_IMM_BIT5_S1_DIRECT, "asr.4-imm-bit5-s1-direct", "asr.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* asr.4 ${Dn},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_ASR_4_DYN_REG_S1_DIRECT, "asr.4-dyn-reg-s1-direct", "asr.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* asr.4 ${Dn},#${s1-imm8},#${bit5} */
+  {
+    UBICOM32_INSN_ASR_4_IMM_BIT5_S1_IMMEDIATE, "asr.4-imm-bit5-s1-immediate", "asr.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* asr.4 ${Dn},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_ASR_4_DYN_REG_S1_IMMEDIATE, "asr.4-dyn-reg-s1-immediate", "asr.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* asr.4 ${Dn},(${s1-An},${s1-r}),#${bit5} */
+  {
+    UBICOM32_INSN_ASR_4_IMM_BIT5_S1_INDIRECT_WITH_INDEX_4, "asr.4-imm-bit5-s1-indirect-with-index-4", "asr.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* asr.4 ${Dn},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_ASR_4_DYN_REG_S1_INDIRECT_WITH_INDEX_4, "asr.4-dyn-reg-s1-indirect-with-index-4", "asr.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* asr.4 ${Dn},${s1-imm7-4}(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_ASR_4_IMM_BIT5_S1_INDIRECT_WITH_OFFSET_4, "asr.4-imm-bit5-s1-indirect-with-offset-4", "asr.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* asr.4 ${Dn},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ASR_4_DYN_REG_S1_INDIRECT_WITH_OFFSET_4, "asr.4-dyn-reg-s1-indirect-with-offset-4", "asr.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* asr.4 ${Dn},(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_ASR_4_IMM_BIT5_S1_INDIRECT_4, "asr.4-imm-bit5-s1-indirect-4", "asr.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* asr.4 ${Dn},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ASR_4_DYN_REG_S1_INDIRECT_4, "asr.4-dyn-reg-s1-indirect-4", "asr.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* asr.4 ${Dn},(${s1-An})${s1-i4-4}++,#${bit5} */
+  {
+    UBICOM32_INSN_ASR_4_IMM_BIT5_S1_INDIRECT_WITH_POST_INCREMENT_4, "asr.4-imm-bit5-s1-indirect-with-post-increment-4", "asr.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* asr.4 ${Dn},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_ASR_4_DYN_REG_S1_INDIRECT_WITH_POST_INCREMENT_4, "asr.4-dyn-reg-s1-indirect-with-post-increment-4", "asr.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* asr.4 ${Dn},${s1-i4-4}(${s1-An})++,#${bit5} */
+  {
+    UBICOM32_INSN_ASR_4_IMM_BIT5_S1_INDIRECT_WITH_PRE_INCREMENT_4, "asr.4-imm-bit5-s1-indirect-with-pre-increment-4", "asr.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* asr.4 ${Dn},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_ASR_4_DYN_REG_S1_INDIRECT_WITH_PRE_INCREMENT_4, "asr.4-dyn-reg-s1-indirect-with-pre-increment-4", "asr.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lsl.4 ${Dn},${s1-direct-addr},#${bit5} */
+  {
+    UBICOM32_INSN_LSL_4_IMM_BIT5_S1_DIRECT, "lsl.4-imm-bit5-s1-direct", "lsl.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lsl.4 ${Dn},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_LSL_4_DYN_REG_S1_DIRECT, "lsl.4-dyn-reg-s1-direct", "lsl.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lsl.4 ${Dn},#${s1-imm8},#${bit5} */
+  {
+    UBICOM32_INSN_LSL_4_IMM_BIT5_S1_IMMEDIATE, "lsl.4-imm-bit5-s1-immediate", "lsl.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lsl.4 ${Dn},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_LSL_4_DYN_REG_S1_IMMEDIATE, "lsl.4-dyn-reg-s1-immediate", "lsl.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lsl.4 ${Dn},(${s1-An},${s1-r}),#${bit5} */
+  {
+    UBICOM32_INSN_LSL_4_IMM_BIT5_S1_INDIRECT_WITH_INDEX_4, "lsl.4-imm-bit5-s1-indirect-with-index-4", "lsl.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lsl.4 ${Dn},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_LSL_4_DYN_REG_S1_INDIRECT_WITH_INDEX_4, "lsl.4-dyn-reg-s1-indirect-with-index-4", "lsl.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lsl.4 ${Dn},${s1-imm7-4}(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_LSL_4_IMM_BIT5_S1_INDIRECT_WITH_OFFSET_4, "lsl.4-imm-bit5-s1-indirect-with-offset-4", "lsl.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lsl.4 ${Dn},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_LSL_4_DYN_REG_S1_INDIRECT_WITH_OFFSET_4, "lsl.4-dyn-reg-s1-indirect-with-offset-4", "lsl.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lsl.4 ${Dn},(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_LSL_4_IMM_BIT5_S1_INDIRECT_4, "lsl.4-imm-bit5-s1-indirect-4", "lsl.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lsl.4 ${Dn},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_LSL_4_DYN_REG_S1_INDIRECT_4, "lsl.4-dyn-reg-s1-indirect-4", "lsl.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lsl.4 ${Dn},(${s1-An})${s1-i4-4}++,#${bit5} */
+  {
+    UBICOM32_INSN_LSL_4_IMM_BIT5_S1_INDIRECT_WITH_POST_INCREMENT_4, "lsl.4-imm-bit5-s1-indirect-with-post-increment-4", "lsl.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lsl.4 ${Dn},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_LSL_4_DYN_REG_S1_INDIRECT_WITH_POST_INCREMENT_4, "lsl.4-dyn-reg-s1-indirect-with-post-increment-4", "lsl.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lsl.4 ${Dn},${s1-i4-4}(${s1-An})++,#${bit5} */
+  {
+    UBICOM32_INSN_LSL_4_IMM_BIT5_S1_INDIRECT_WITH_PRE_INCREMENT_4, "lsl.4-imm-bit5-s1-indirect-with-pre-increment-4", "lsl.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lsl.4 ${Dn},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_LSL_4_DYN_REG_S1_INDIRECT_WITH_PRE_INCREMENT_4, "lsl.4-dyn-reg-s1-indirect-with-pre-increment-4", "lsl.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lsr.4 ${Dn},${s1-direct-addr},#${bit5} */
+  {
+    UBICOM32_INSN_LSR_4_IMM_BIT5_S1_DIRECT, "lsr.4-imm-bit5-s1-direct", "lsr.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lsr.4 ${Dn},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_LSR_4_DYN_REG_S1_DIRECT, "lsr.4-dyn-reg-s1-direct", "lsr.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lsr.4 ${Dn},#${s1-imm8},#${bit5} */
+  {
+    UBICOM32_INSN_LSR_4_IMM_BIT5_S1_IMMEDIATE, "lsr.4-imm-bit5-s1-immediate", "lsr.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lsr.4 ${Dn},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_LSR_4_DYN_REG_S1_IMMEDIATE, "lsr.4-dyn-reg-s1-immediate", "lsr.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lsr.4 ${Dn},(${s1-An},${s1-r}),#${bit5} */
+  {
+    UBICOM32_INSN_LSR_4_IMM_BIT5_S1_INDIRECT_WITH_INDEX_4, "lsr.4-imm-bit5-s1-indirect-with-index-4", "lsr.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lsr.4 ${Dn},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_LSR_4_DYN_REG_S1_INDIRECT_WITH_INDEX_4, "lsr.4-dyn-reg-s1-indirect-with-index-4", "lsr.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lsr.4 ${Dn},${s1-imm7-4}(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_LSR_4_IMM_BIT5_S1_INDIRECT_WITH_OFFSET_4, "lsr.4-imm-bit5-s1-indirect-with-offset-4", "lsr.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lsr.4 ${Dn},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_LSR_4_DYN_REG_S1_INDIRECT_WITH_OFFSET_4, "lsr.4-dyn-reg-s1-indirect-with-offset-4", "lsr.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lsr.4 ${Dn},(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_LSR_4_IMM_BIT5_S1_INDIRECT_4, "lsr.4-imm-bit5-s1-indirect-4", "lsr.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lsr.4 ${Dn},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_LSR_4_DYN_REG_S1_INDIRECT_4, "lsr.4-dyn-reg-s1-indirect-4", "lsr.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lsr.4 ${Dn},(${s1-An})${s1-i4-4}++,#${bit5} */
+  {
+    UBICOM32_INSN_LSR_4_IMM_BIT5_S1_INDIRECT_WITH_POST_INCREMENT_4, "lsr.4-imm-bit5-s1-indirect-with-post-increment-4", "lsr.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lsr.4 ${Dn},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_LSR_4_DYN_REG_S1_INDIRECT_WITH_POST_INCREMENT_4, "lsr.4-dyn-reg-s1-indirect-with-post-increment-4", "lsr.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lsr.4 ${Dn},${s1-i4-4}(${s1-An})++,#${bit5} */
+  {
+    UBICOM32_INSN_LSR_4_IMM_BIT5_S1_INDIRECT_WITH_PRE_INCREMENT_4, "lsr.4-imm-bit5-s1-indirect-with-pre-increment-4", "lsr.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lsr.4 ${Dn},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_LSR_4_DYN_REG_S1_INDIRECT_WITH_PRE_INCREMENT_4, "lsr.4-dyn-reg-s1-indirect-with-pre-increment-4", "lsr.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* mac ${s1-direct-addr},${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_MAC_S1_DIRECT_DSP_SRC2_DATA_REG, "compatibility-mac-s1-direct-dsp-src2-data-reg", "mac", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* mac #${s1-imm8},${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_MAC_S1_IMMEDIATE_DSP_SRC2_DATA_REG, "compatibility-mac-s1-immediate-dsp-src2-data-reg", "mac", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* mac (${s1-An},${s1-r}),${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_MAC_S1_INDIRECT_WITH_INDEX_2_DSP_SRC2_DATA_REG, "compatibility-mac-s1-indirect-with-index-2-dsp-src2-data-reg", "mac", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* mac ${s1-imm7-2}(${s1-An}),${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_MAC_S1_INDIRECT_WITH_OFFSET_2_DSP_SRC2_DATA_REG, "compatibility-mac-s1-indirect-with-offset-2-dsp-src2-data-reg", "mac", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* mac (${s1-An}),${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_MAC_S1_INDIRECT_2_DSP_SRC2_DATA_REG, "compatibility-mac-s1-indirect-2-dsp-src2-data-reg", "mac", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* mac (${s1-An})${s1-i4-2}++,${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_MAC_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_SRC2_DATA_REG, "compatibility-mac-s1-indirect-with-post-increment-2-dsp-src2-data-reg", "mac", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* mac ${s1-i4-2}(${s1-An})++,${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_MAC_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_SRC2_DATA_REG, "compatibility-mac-s1-indirect-with-pre-increment-2-dsp-src2-data-reg", "mac", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* mac ${s1-direct-addr},#${bit5} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_MAC_S1_DIRECT_DSP_IMM_BIT5, "compatibility-mac-s1-direct-dsp-imm-bit5", "mac", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* mac #${s1-imm8},#${bit5} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_MAC_S1_IMMEDIATE_DSP_IMM_BIT5, "compatibility-mac-s1-immediate-dsp-imm-bit5", "mac", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* mac (${s1-An},${s1-r}),#${bit5} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_MAC_S1_INDIRECT_WITH_INDEX_2_DSP_IMM_BIT5, "compatibility-mac-s1-indirect-with-index-2-dsp-imm-bit5", "mac", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* mac ${s1-imm7-2}(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_MAC_S1_INDIRECT_WITH_OFFSET_2_DSP_IMM_BIT5, "compatibility-mac-s1-indirect-with-offset-2-dsp-imm-bit5", "mac", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* mac (${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_MAC_S1_INDIRECT_2_DSP_IMM_BIT5, "compatibility-mac-s1-indirect-2-dsp-imm-bit5", "mac", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* mac (${s1-An})${s1-i4-2}++,#${bit5} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_MAC_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_IMM_BIT5, "compatibility-mac-s1-indirect-with-post-increment-2-dsp-imm-bit5", "mac", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* mac ${s1-i4-2}(${s1-An})++,#${bit5} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_MAC_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_IMM_BIT5, "compatibility-mac-s1-indirect-with-pre-increment-2-dsp-imm-bit5", "mac", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* mac ${s1-direct-addr},#${bit5} */
+  {
+    UBICOM32_INSN_MAC_S1_DIRECT_IMM_BIT5, "mac-s1-direct-imm-bit5", "mac", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* mac #${s1-imm8},#${bit5} */
+  {
+    UBICOM32_INSN_MAC_S1_IMMEDIATE_IMM_BIT5, "mac-s1-immediate-imm-bit5", "mac", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* mac (${s1-An},${s1-r}),#${bit5} */
+  {
+    UBICOM32_INSN_MAC_S1_INDIRECT_WITH_INDEX_2_IMM_BIT5, "mac-s1-indirect-with-index-2-imm-bit5", "mac", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* mac ${s1-imm7-2}(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_MAC_S1_INDIRECT_WITH_OFFSET_2_IMM_BIT5, "mac-s1-indirect-with-offset-2-imm-bit5", "mac", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* mac (${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_MAC_S1_INDIRECT_2_IMM_BIT5, "mac-s1-indirect-2-imm-bit5", "mac", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* mac (${s1-An})${s1-i4-2}++,#${bit5} */
+  {
+    UBICOM32_INSN_MAC_S1_INDIRECT_WITH_POST_INCREMENT_2_IMM_BIT5, "mac-s1-indirect-with-post-increment-2-imm-bit5", "mac", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* mac ${s1-i4-2}(${s1-An})++,#${bit5} */
+  {
+    UBICOM32_INSN_MAC_S1_INDIRECT_WITH_PRE_INCREMENT_2_IMM_BIT5, "mac-s1-indirect-with-pre-increment-2-imm-bit5", "mac", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* mac ${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_MAC_S1_DIRECT_DYN_REG, "mac-s1-direct-dyn-reg", "mac", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* mac #${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_MAC_S1_IMMEDIATE_DYN_REG, "mac-s1-immediate-dyn-reg", "mac", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* mac (${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_MAC_S1_INDIRECT_WITH_INDEX_2_DYN_REG, "mac-s1-indirect-with-index-2-dyn-reg", "mac", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* mac ${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_MAC_S1_INDIRECT_WITH_OFFSET_2_DYN_REG, "mac-s1-indirect-with-offset-2-dyn-reg", "mac", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* mac (${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_MAC_S1_INDIRECT_2_DYN_REG, "mac-s1-indirect-2-dyn-reg", "mac", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* mac (${s1-An})${s1-i4-2}++,${s2} */
+  {
+    UBICOM32_INSN_MAC_S1_INDIRECT_WITH_POST_INCREMENT_2_DYN_REG, "mac-s1-indirect-with-post-increment-2-dyn-reg", "mac", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* mac ${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_MAC_S1_INDIRECT_WITH_PRE_INCREMENT_2_DYN_REG, "mac-s1-indirect-with-pre-increment-2-dyn-reg", "mac", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* mulf ${s1-direct-addr},${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_MULF_S1_DIRECT_DSP_SRC2_DATA_REG, "compatibility-mulf-s1-direct-dsp-src2-data-reg", "mulf", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* mulf #${s1-imm8},${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_MULF_S1_IMMEDIATE_DSP_SRC2_DATA_REG, "compatibility-mulf-s1-immediate-dsp-src2-data-reg", "mulf", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* mulf (${s1-An},${s1-r}),${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_MULF_S1_INDIRECT_WITH_INDEX_2_DSP_SRC2_DATA_REG, "compatibility-mulf-s1-indirect-with-index-2-dsp-src2-data-reg", "mulf", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* mulf ${s1-imm7-2}(${s1-An}),${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_MULF_S1_INDIRECT_WITH_OFFSET_2_DSP_SRC2_DATA_REG, "compatibility-mulf-s1-indirect-with-offset-2-dsp-src2-data-reg", "mulf", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* mulf (${s1-An}),${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_MULF_S1_INDIRECT_2_DSP_SRC2_DATA_REG, "compatibility-mulf-s1-indirect-2-dsp-src2-data-reg", "mulf", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* mulf (${s1-An})${s1-i4-2}++,${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_MULF_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_SRC2_DATA_REG, "compatibility-mulf-s1-indirect-with-post-increment-2-dsp-src2-data-reg", "mulf", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* mulf ${s1-i4-2}(${s1-An})++,${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_MULF_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_SRC2_DATA_REG, "compatibility-mulf-s1-indirect-with-pre-increment-2-dsp-src2-data-reg", "mulf", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* mulf ${s1-direct-addr},#${bit5} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_MULF_S1_DIRECT_DSP_IMM_BIT5, "compatibility-mulf-s1-direct-dsp-imm-bit5", "mulf", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* mulf #${s1-imm8},#${bit5} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_MULF_S1_IMMEDIATE_DSP_IMM_BIT5, "compatibility-mulf-s1-immediate-dsp-imm-bit5", "mulf", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* mulf (${s1-An},${s1-r}),#${bit5} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_MULF_S1_INDIRECT_WITH_INDEX_2_DSP_IMM_BIT5, "compatibility-mulf-s1-indirect-with-index-2-dsp-imm-bit5", "mulf", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* mulf ${s1-imm7-2}(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_MULF_S1_INDIRECT_WITH_OFFSET_2_DSP_IMM_BIT5, "compatibility-mulf-s1-indirect-with-offset-2-dsp-imm-bit5", "mulf", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* mulf (${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_MULF_S1_INDIRECT_2_DSP_IMM_BIT5, "compatibility-mulf-s1-indirect-2-dsp-imm-bit5", "mulf", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* mulf (${s1-An})${s1-i4-2}++,#${bit5} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_MULF_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_IMM_BIT5, "compatibility-mulf-s1-indirect-with-post-increment-2-dsp-imm-bit5", "mulf", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* mulf ${s1-i4-2}(${s1-An})++,#${bit5} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_MULF_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_IMM_BIT5, "compatibility-mulf-s1-indirect-with-pre-increment-2-dsp-imm-bit5", "mulf", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* mulf ${s1-direct-addr},#${bit5} */
+  {
+    UBICOM32_INSN_MULF_S1_DIRECT_IMM_BIT5, "mulf-s1-direct-imm-bit5", "mulf", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* mulf #${s1-imm8},#${bit5} */
+  {
+    UBICOM32_INSN_MULF_S1_IMMEDIATE_IMM_BIT5, "mulf-s1-immediate-imm-bit5", "mulf", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* mulf (${s1-An},${s1-r}),#${bit5} */
+  {
+    UBICOM32_INSN_MULF_S1_INDIRECT_WITH_INDEX_2_IMM_BIT5, "mulf-s1-indirect-with-index-2-imm-bit5", "mulf", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* mulf ${s1-imm7-2}(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_MULF_S1_INDIRECT_WITH_OFFSET_2_IMM_BIT5, "mulf-s1-indirect-with-offset-2-imm-bit5", "mulf", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* mulf (${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_MULF_S1_INDIRECT_2_IMM_BIT5, "mulf-s1-indirect-2-imm-bit5", "mulf", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* mulf (${s1-An})${s1-i4-2}++,#${bit5} */
+  {
+    UBICOM32_INSN_MULF_S1_INDIRECT_WITH_POST_INCREMENT_2_IMM_BIT5, "mulf-s1-indirect-with-post-increment-2-imm-bit5", "mulf", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* mulf ${s1-i4-2}(${s1-An})++,#${bit5} */
+  {
+    UBICOM32_INSN_MULF_S1_INDIRECT_WITH_PRE_INCREMENT_2_IMM_BIT5, "mulf-s1-indirect-with-pre-increment-2-imm-bit5", "mulf", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* mulf ${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_MULF_S1_DIRECT_DYN_REG, "mulf-s1-direct-dyn-reg", "mulf", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* mulf #${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_MULF_S1_IMMEDIATE_DYN_REG, "mulf-s1-immediate-dyn-reg", "mulf", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* mulf (${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_MULF_S1_INDIRECT_WITH_INDEX_2_DYN_REG, "mulf-s1-indirect-with-index-2-dyn-reg", "mulf", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* mulf ${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_MULF_S1_INDIRECT_WITH_OFFSET_2_DYN_REG, "mulf-s1-indirect-with-offset-2-dyn-reg", "mulf", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* mulf (${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_MULF_S1_INDIRECT_2_DYN_REG, "mulf-s1-indirect-2-dyn-reg", "mulf", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* mulf (${s1-An})${s1-i4-2}++,${s2} */
+  {
+    UBICOM32_INSN_MULF_S1_INDIRECT_WITH_POST_INCREMENT_2_DYN_REG, "mulf-s1-indirect-with-post-increment-2-dyn-reg", "mulf", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* mulf ${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_MULF_S1_INDIRECT_WITH_PRE_INCREMENT_2_DYN_REG, "mulf-s1-indirect-with-pre-increment-2-dyn-reg", "mulf", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* mulu ${s1-direct-addr},${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_MULU_S1_DIRECT_DSP_SRC2_DATA_REG, "compatibility-mulu-s1-direct-dsp-src2-data-reg", "mulu", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* mulu #${s1-imm8},${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_MULU_S1_IMMEDIATE_DSP_SRC2_DATA_REG, "compatibility-mulu-s1-immediate-dsp-src2-data-reg", "mulu", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* mulu (${s1-An},${s1-r}),${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_MULU_S1_INDIRECT_WITH_INDEX_2_DSP_SRC2_DATA_REG, "compatibility-mulu-s1-indirect-with-index-2-dsp-src2-data-reg", "mulu", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* mulu ${s1-imm7-2}(${s1-An}),${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_MULU_S1_INDIRECT_WITH_OFFSET_2_DSP_SRC2_DATA_REG, "compatibility-mulu-s1-indirect-with-offset-2-dsp-src2-data-reg", "mulu", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* mulu (${s1-An}),${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_MULU_S1_INDIRECT_2_DSP_SRC2_DATA_REG, "compatibility-mulu-s1-indirect-2-dsp-src2-data-reg", "mulu", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* mulu (${s1-An})${s1-i4-2}++,${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_MULU_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_SRC2_DATA_REG, "compatibility-mulu-s1-indirect-with-post-increment-2-dsp-src2-data-reg", "mulu", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* mulu ${s1-i4-2}(${s1-An})++,${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_MULU_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_SRC2_DATA_REG, "compatibility-mulu-s1-indirect-with-pre-increment-2-dsp-src2-data-reg", "mulu", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* mulu ${s1-direct-addr},#${bit5} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_MULU_S1_DIRECT_DSP_IMM_BIT5, "compatibility-mulu-s1-direct-dsp-imm-bit5", "mulu", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* mulu #${s1-imm8},#${bit5} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_MULU_S1_IMMEDIATE_DSP_IMM_BIT5, "compatibility-mulu-s1-immediate-dsp-imm-bit5", "mulu", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* mulu (${s1-An},${s1-r}),#${bit5} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_MULU_S1_INDIRECT_WITH_INDEX_2_DSP_IMM_BIT5, "compatibility-mulu-s1-indirect-with-index-2-dsp-imm-bit5", "mulu", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* mulu ${s1-imm7-2}(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_MULU_S1_INDIRECT_WITH_OFFSET_2_DSP_IMM_BIT5, "compatibility-mulu-s1-indirect-with-offset-2-dsp-imm-bit5", "mulu", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* mulu (${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_MULU_S1_INDIRECT_2_DSP_IMM_BIT5, "compatibility-mulu-s1-indirect-2-dsp-imm-bit5", "mulu", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* mulu (${s1-An})${s1-i4-2}++,#${bit5} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_MULU_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_IMM_BIT5, "compatibility-mulu-s1-indirect-with-post-increment-2-dsp-imm-bit5", "mulu", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* mulu ${s1-i4-2}(${s1-An})++,#${bit5} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_MULU_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_IMM_BIT5, "compatibility-mulu-s1-indirect-with-pre-increment-2-dsp-imm-bit5", "mulu", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* mulu ${s1-direct-addr},#${bit5} */
+  {
+    UBICOM32_INSN_MULU_S1_DIRECT_IMM_BIT5, "mulu-s1-direct-imm-bit5", "mulu", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* mulu #${s1-imm8},#${bit5} */
+  {
+    UBICOM32_INSN_MULU_S1_IMMEDIATE_IMM_BIT5, "mulu-s1-immediate-imm-bit5", "mulu", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* mulu (${s1-An},${s1-r}),#${bit5} */
+  {
+    UBICOM32_INSN_MULU_S1_INDIRECT_WITH_INDEX_2_IMM_BIT5, "mulu-s1-indirect-with-index-2-imm-bit5", "mulu", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* mulu ${s1-imm7-2}(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_MULU_S1_INDIRECT_WITH_OFFSET_2_IMM_BIT5, "mulu-s1-indirect-with-offset-2-imm-bit5", "mulu", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* mulu (${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_MULU_S1_INDIRECT_2_IMM_BIT5, "mulu-s1-indirect-2-imm-bit5", "mulu", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* mulu (${s1-An})${s1-i4-2}++,#${bit5} */
+  {
+    UBICOM32_INSN_MULU_S1_INDIRECT_WITH_POST_INCREMENT_2_IMM_BIT5, "mulu-s1-indirect-with-post-increment-2-imm-bit5", "mulu", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* mulu ${s1-i4-2}(${s1-An})++,#${bit5} */
+  {
+    UBICOM32_INSN_MULU_S1_INDIRECT_WITH_PRE_INCREMENT_2_IMM_BIT5, "mulu-s1-indirect-with-pre-increment-2-imm-bit5", "mulu", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* mulu ${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_MULU_S1_DIRECT_DYN_REG, "mulu-s1-direct-dyn-reg", "mulu", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* mulu #${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_MULU_S1_IMMEDIATE_DYN_REG, "mulu-s1-immediate-dyn-reg", "mulu", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* mulu (${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_MULU_S1_INDIRECT_WITH_INDEX_2_DYN_REG, "mulu-s1-indirect-with-index-2-dyn-reg", "mulu", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* mulu ${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_MULU_S1_INDIRECT_WITH_OFFSET_2_DYN_REG, "mulu-s1-indirect-with-offset-2-dyn-reg", "mulu", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* mulu (${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_MULU_S1_INDIRECT_2_DYN_REG, "mulu-s1-indirect-2-dyn-reg", "mulu", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* mulu (${s1-An})${s1-i4-2}++,${s2} */
+  {
+    UBICOM32_INSN_MULU_S1_INDIRECT_WITH_POST_INCREMENT_2_DYN_REG, "mulu-s1-indirect-with-post-increment-2-dyn-reg", "mulu", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* mulu ${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_MULU_S1_INDIRECT_WITH_PRE_INCREMENT_2_DYN_REG, "mulu-s1-indirect-with-pre-increment-2-dyn-reg", "mulu", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* muls ${s1-direct-addr},${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_MULS_S1_DIRECT_DSP_SRC2_DATA_REG, "compatibility-muls-s1-direct-dsp-src2-data-reg", "muls", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* muls #${s1-imm8},${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_MULS_S1_IMMEDIATE_DSP_SRC2_DATA_REG, "compatibility-muls-s1-immediate-dsp-src2-data-reg", "muls", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* muls (${s1-An},${s1-r}),${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_MULS_S1_INDIRECT_WITH_INDEX_2_DSP_SRC2_DATA_REG, "compatibility-muls-s1-indirect-with-index-2-dsp-src2-data-reg", "muls", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* muls ${s1-imm7-2}(${s1-An}),${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_MULS_S1_INDIRECT_WITH_OFFSET_2_DSP_SRC2_DATA_REG, "compatibility-muls-s1-indirect-with-offset-2-dsp-src2-data-reg", "muls", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* muls (${s1-An}),${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_MULS_S1_INDIRECT_2_DSP_SRC2_DATA_REG, "compatibility-muls-s1-indirect-2-dsp-src2-data-reg", "muls", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* muls (${s1-An})${s1-i4-2}++,${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_MULS_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_SRC2_DATA_REG, "compatibility-muls-s1-indirect-with-post-increment-2-dsp-src2-data-reg", "muls", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* muls ${s1-i4-2}(${s1-An})++,${dsp-S2-data-reg} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_MULS_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_SRC2_DATA_REG, "compatibility-muls-s1-indirect-with-pre-increment-2-dsp-src2-data-reg", "muls", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* muls ${s1-direct-addr},#${bit5} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_MULS_S1_DIRECT_DSP_IMM_BIT5, "compatibility-muls-s1-direct-dsp-imm-bit5", "muls", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* muls #${s1-imm8},#${bit5} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_MULS_S1_IMMEDIATE_DSP_IMM_BIT5, "compatibility-muls-s1-immediate-dsp-imm-bit5", "muls", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* muls (${s1-An},${s1-r}),#${bit5} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_MULS_S1_INDIRECT_WITH_INDEX_2_DSP_IMM_BIT5, "compatibility-muls-s1-indirect-with-index-2-dsp-imm-bit5", "muls", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* muls ${s1-imm7-2}(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_MULS_S1_INDIRECT_WITH_OFFSET_2_DSP_IMM_BIT5, "compatibility-muls-s1-indirect-with-offset-2-dsp-imm-bit5", "muls", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* muls (${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_MULS_S1_INDIRECT_2_DSP_IMM_BIT5, "compatibility-muls-s1-indirect-2-dsp-imm-bit5", "muls", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* muls (${s1-An})${s1-i4-2}++,#${bit5} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_MULS_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_IMM_BIT5, "compatibility-muls-s1-indirect-with-post-increment-2-dsp-imm-bit5", "muls", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* muls ${s1-i4-2}(${s1-An})++,#${bit5} */
+  {
+    UBICOM32_INSN_COMPATIBILITY_MULS_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_IMM_BIT5, "compatibility-muls-s1-indirect-with-pre-increment-2-dsp-imm-bit5", "muls", 32,
+    { 0, { { { (1<<MACH_IP3023COMPATIBILITY), 0 } } } }
+  },
+/* muls ${s1-direct-addr},#${bit5} */
+  {
+    UBICOM32_INSN_MULS_S1_DIRECT_IMM_BIT5, "muls-s1-direct-imm-bit5", "muls", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* muls #${s1-imm8},#${bit5} */
+  {
+    UBICOM32_INSN_MULS_S1_IMMEDIATE_IMM_BIT5, "muls-s1-immediate-imm-bit5", "muls", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* muls (${s1-An},${s1-r}),#${bit5} */
+  {
+    UBICOM32_INSN_MULS_S1_INDIRECT_WITH_INDEX_2_IMM_BIT5, "muls-s1-indirect-with-index-2-imm-bit5", "muls", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* muls ${s1-imm7-2}(${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_MULS_S1_INDIRECT_WITH_OFFSET_2_IMM_BIT5, "muls-s1-indirect-with-offset-2-imm-bit5", "muls", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* muls (${s1-An}),#${bit5} */
+  {
+    UBICOM32_INSN_MULS_S1_INDIRECT_2_IMM_BIT5, "muls-s1-indirect-2-imm-bit5", "muls", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* muls (${s1-An})${s1-i4-2}++,#${bit5} */
+  {
+    UBICOM32_INSN_MULS_S1_INDIRECT_WITH_POST_INCREMENT_2_IMM_BIT5, "muls-s1-indirect-with-post-increment-2-imm-bit5", "muls", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* muls ${s1-i4-2}(${s1-An})++,#${bit5} */
+  {
+    UBICOM32_INSN_MULS_S1_INDIRECT_WITH_PRE_INCREMENT_2_IMM_BIT5, "muls-s1-indirect-with-pre-increment-2-imm-bit5", "muls", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* muls ${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_MULS_S1_DIRECT_DYN_REG, "muls-s1-direct-dyn-reg", "muls", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* muls #${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_MULS_S1_IMMEDIATE_DYN_REG, "muls-s1-immediate-dyn-reg", "muls", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* muls (${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_MULS_S1_INDIRECT_WITH_INDEX_2_DYN_REG, "muls-s1-indirect-with-index-2-dyn-reg", "muls", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* muls ${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_MULS_S1_INDIRECT_WITH_OFFSET_2_DYN_REG, "muls-s1-indirect-with-offset-2-dyn-reg", "muls", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* muls (${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_MULS_S1_INDIRECT_2_DYN_REG, "muls-s1-indirect-2-dyn-reg", "muls", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* muls (${s1-An})${s1-i4-2}++,${s2} */
+  {
+    UBICOM32_INSN_MULS_S1_INDIRECT_WITH_POST_INCREMENT_2_DYN_REG, "muls-s1-indirect-with-post-increment-2-dyn-reg", "muls", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* muls ${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_MULS_S1_INDIRECT_WITH_PRE_INCREMENT_2_DYN_REG, "muls-s1-indirect-with-pre-increment-2-dyn-reg", "muls", 32,
+    { 0, { { { (1<<MACH_IP3035), 0 } } } }
+  },
+/* swapb.4 ${d-direct-addr},${s1-direct-addr} */
+  {
+    UBICOM32_INSN_SWAPB_4_D_DIRECT_S1_DIRECT, "swapb.4-d-direct-s1-direct", "swapb.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.4 #${d-imm8},${s1-direct-addr} */
+  {
+    UBICOM32_INSN_SWAPB_4_D_IMMEDIATE_4_S1_DIRECT, "swapb.4-d-immediate-4-s1-direct", "swapb.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.4 (${d-An},${d-r}),${s1-direct-addr} */
+  {
+    UBICOM32_INSN_SWAPB_4_D_INDIRECT_WITH_INDEX_4_S1_DIRECT, "swapb.4-d-indirect-with-index-4-s1-direct", "swapb.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.4 ${d-imm7-4}(${d-An}),${s1-direct-addr} */
+  {
+    UBICOM32_INSN_SWAPB_4_D_INDIRECT_WITH_OFFSET_4_S1_DIRECT, "swapb.4-d-indirect-with-offset-4-s1-direct", "swapb.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.4 (${d-An}),${s1-direct-addr} */
+  {
+    UBICOM32_INSN_SWAPB_4_D_INDIRECT_4_S1_DIRECT, "swapb.4-d-indirect-4-s1-direct", "swapb.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.4 (${d-An})${d-i4-4}++,${s1-direct-addr} */
+  {
+    UBICOM32_INSN_SWAPB_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_DIRECT, "swapb.4-d-indirect-with-post-increment-4-s1-direct", "swapb.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.4 ${d-i4-4}(${d-An})++,${s1-direct-addr} */
+  {
+    UBICOM32_INSN_SWAPB_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_DIRECT, "swapb.4-d-indirect-with-pre-increment-4-s1-direct", "swapb.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.4 ${d-direct-addr},#${s1-imm8} */
+  {
+    UBICOM32_INSN_SWAPB_4_D_DIRECT_S1_IMMEDIATE, "swapb.4-d-direct-s1-immediate", "swapb.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.4 #${d-imm8},#${s1-imm8} */
+  {
+    UBICOM32_INSN_SWAPB_4_D_IMMEDIATE_4_S1_IMMEDIATE, "swapb.4-d-immediate-4-s1-immediate", "swapb.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.4 (${d-An},${d-r}),#${s1-imm8} */
+  {
+    UBICOM32_INSN_SWAPB_4_D_INDIRECT_WITH_INDEX_4_S1_IMMEDIATE, "swapb.4-d-indirect-with-index-4-s1-immediate", "swapb.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.4 ${d-imm7-4}(${d-An}),#${s1-imm8} */
+  {
+    UBICOM32_INSN_SWAPB_4_D_INDIRECT_WITH_OFFSET_4_S1_IMMEDIATE, "swapb.4-d-indirect-with-offset-4-s1-immediate", "swapb.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.4 (${d-An}),#${s1-imm8} */
+  {
+    UBICOM32_INSN_SWAPB_4_D_INDIRECT_4_S1_IMMEDIATE, "swapb.4-d-indirect-4-s1-immediate", "swapb.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.4 (${d-An})${d-i4-4}++,#${s1-imm8} */
+  {
+    UBICOM32_INSN_SWAPB_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_IMMEDIATE, "swapb.4-d-indirect-with-post-increment-4-s1-immediate", "swapb.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.4 ${d-i4-4}(${d-An})++,#${s1-imm8} */
+  {
+    UBICOM32_INSN_SWAPB_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_IMMEDIATE, "swapb.4-d-indirect-with-pre-increment-4-s1-immediate", "swapb.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.4 ${d-direct-addr},(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_SWAPB_4_D_DIRECT_S1_INDIRECT_WITH_INDEX_4, "swapb.4-d-direct-s1-indirect-with-index-4", "swapb.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.4 #${d-imm8},(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_SWAPB_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_INDEX_4, "swapb.4-d-immediate-4-s1-indirect-with-index-4", "swapb.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.4 (${d-An},${d-r}),(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_SWAPB_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_INDEX_4, "swapb.4-d-indirect-with-index-4-s1-indirect-with-index-4", "swapb.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.4 ${d-imm7-4}(${d-An}),(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_SWAPB_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_INDEX_4, "swapb.4-d-indirect-with-offset-4-s1-indirect-with-index-4", "swapb.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.4 (${d-An}),(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_SWAPB_4_D_INDIRECT_4_S1_INDIRECT_WITH_INDEX_4, "swapb.4-d-indirect-4-s1-indirect-with-index-4", "swapb.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.4 (${d-An})${d-i4-4}++,(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_SWAPB_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, "swapb.4-d-indirect-with-post-increment-4-s1-indirect-with-index-4", "swapb.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.4 ${d-i4-4}(${d-An})++,(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_SWAPB_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, "swapb.4-d-indirect-with-pre-increment-4-s1-indirect-with-index-4", "swapb.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.4 ${d-direct-addr},${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_SWAPB_4_D_DIRECT_S1_INDIRECT_WITH_OFFSET_4, "swapb.4-d-direct-s1-indirect-with-offset-4", "swapb.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.4 #${d-imm8},${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_SWAPB_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_OFFSET_4, "swapb.4-d-immediate-4-s1-indirect-with-offset-4", "swapb.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.4 (${d-An},${d-r}),${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_SWAPB_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_OFFSET_4, "swapb.4-d-indirect-with-index-4-s1-indirect-with-offset-4", "swapb.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.4 ${d-imm7-4}(${d-An}),${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_SWAPB_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_OFFSET_4, "swapb.4-d-indirect-with-offset-4-s1-indirect-with-offset-4", "swapb.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.4 (${d-An}),${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_SWAPB_4_D_INDIRECT_4_S1_INDIRECT_WITH_OFFSET_4, "swapb.4-d-indirect-4-s1-indirect-with-offset-4", "swapb.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.4 (${d-An})${d-i4-4}++,${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_SWAPB_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, "swapb.4-d-indirect-with-post-increment-4-s1-indirect-with-offset-4", "swapb.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.4 ${d-i4-4}(${d-An})++,${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_SWAPB_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, "swapb.4-d-indirect-with-pre-increment-4-s1-indirect-with-offset-4", "swapb.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.4 ${d-direct-addr},(${s1-An}) */
+  {
+    UBICOM32_INSN_SWAPB_4_D_DIRECT_S1_INDIRECT_4, "swapb.4-d-direct-s1-indirect-4", "swapb.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.4 #${d-imm8},(${s1-An}) */
+  {
+    UBICOM32_INSN_SWAPB_4_D_IMMEDIATE_4_S1_INDIRECT_4, "swapb.4-d-immediate-4-s1-indirect-4", "swapb.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.4 (${d-An},${d-r}),(${s1-An}) */
+  {
+    UBICOM32_INSN_SWAPB_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_4, "swapb.4-d-indirect-with-index-4-s1-indirect-4", "swapb.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.4 ${d-imm7-4}(${d-An}),(${s1-An}) */
+  {
+    UBICOM32_INSN_SWAPB_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_4, "swapb.4-d-indirect-with-offset-4-s1-indirect-4", "swapb.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.4 (${d-An}),(${s1-An}) */
+  {
+    UBICOM32_INSN_SWAPB_4_D_INDIRECT_4_S1_INDIRECT_4, "swapb.4-d-indirect-4-s1-indirect-4", "swapb.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.4 (${d-An})${d-i4-4}++,(${s1-An}) */
+  {
+    UBICOM32_INSN_SWAPB_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_4, "swapb.4-d-indirect-with-post-increment-4-s1-indirect-4", "swapb.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.4 ${d-i4-4}(${d-An})++,(${s1-An}) */
+  {
+    UBICOM32_INSN_SWAPB_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_4, "swapb.4-d-indirect-with-pre-increment-4-s1-indirect-4", "swapb.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.4 ${d-direct-addr},(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_SWAPB_4_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_4, "swapb.4-d-direct-s1-indirect-with-post-increment-4", "swapb.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.4 #${d-imm8},(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_SWAPB_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "swapb.4-d-immediate-4-s1-indirect-with-post-increment-4", "swapb.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.4 (${d-An},${d-r}),(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_SWAPB_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "swapb.4-d-indirect-with-index-4-s1-indirect-with-post-increment-4", "swapb.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.4 ${d-imm7-4}(${d-An}),(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_SWAPB_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "swapb.4-d-indirect-with-offset-4-s1-indirect-with-post-increment-4", "swapb.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.4 (${d-An}),(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_SWAPB_4_D_INDIRECT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "swapb.4-d-indirect-4-s1-indirect-with-post-increment-4", "swapb.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.4 (${d-An})${d-i4-4}++,(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_SWAPB_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "swapb.4-d-indirect-with-post-increment-4-s1-indirect-with-post-increment-4", "swapb.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.4 ${d-i4-4}(${d-An})++,(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_SWAPB_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "swapb.4-d-indirect-with-pre-increment-4-s1-indirect-with-post-increment-4", "swapb.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.4 ${d-direct-addr},${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_SWAPB_4_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_4, "swapb.4-d-direct-s1-indirect-with-pre-increment-4", "swapb.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.4 #${d-imm8},${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_SWAPB_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "swapb.4-d-immediate-4-s1-indirect-with-pre-increment-4", "swapb.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.4 (${d-An},${d-r}),${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_SWAPB_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "swapb.4-d-indirect-with-index-4-s1-indirect-with-pre-increment-4", "swapb.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.4 ${d-imm7-4}(${d-An}),${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_SWAPB_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "swapb.4-d-indirect-with-offset-4-s1-indirect-with-pre-increment-4", "swapb.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.4 (${d-An}),${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_SWAPB_4_D_INDIRECT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "swapb.4-d-indirect-4-s1-indirect-with-pre-increment-4", "swapb.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.4 (${d-An})${d-i4-4}++,${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_SWAPB_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "swapb.4-d-indirect-with-post-increment-4-s1-indirect-with-pre-increment-4", "swapb.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.4 ${d-i4-4}(${d-An})++,${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_SWAPB_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "swapb.4-d-indirect-with-pre-increment-4-s1-indirect-with-pre-increment-4", "swapb.4", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.2 ${d-direct-addr},${s1-direct-addr} */
+  {
+    UBICOM32_INSN_SWAPB_2_D_DIRECT_S1_DIRECT, "swapb.2-d-direct-s1-direct", "swapb.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.2 #${d-imm8},${s1-direct-addr} */
+  {
+    UBICOM32_INSN_SWAPB_2_D_IMMEDIATE_2_S1_DIRECT, "swapb.2-d-immediate-2-s1-direct", "swapb.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.2 (${d-An},${d-r}),${s1-direct-addr} */
+  {
+    UBICOM32_INSN_SWAPB_2_D_INDIRECT_WITH_INDEX_2_S1_DIRECT, "swapb.2-d-indirect-with-index-2-s1-direct", "swapb.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.2 ${d-imm7-2}(${d-An}),${s1-direct-addr} */
+  {
+    UBICOM32_INSN_SWAPB_2_D_INDIRECT_WITH_OFFSET_2_S1_DIRECT, "swapb.2-d-indirect-with-offset-2-s1-direct", "swapb.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.2 (${d-An}),${s1-direct-addr} */
+  {
+    UBICOM32_INSN_SWAPB_2_D_INDIRECT_2_S1_DIRECT, "swapb.2-d-indirect-2-s1-direct", "swapb.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.2 (${d-An})${d-i4-2}++,${s1-direct-addr} */
+  {
+    UBICOM32_INSN_SWAPB_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_DIRECT, "swapb.2-d-indirect-with-post-increment-2-s1-direct", "swapb.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.2 ${d-i4-2}(${d-An})++,${s1-direct-addr} */
+  {
+    UBICOM32_INSN_SWAPB_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_DIRECT, "swapb.2-d-indirect-with-pre-increment-2-s1-direct", "swapb.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.2 ${d-direct-addr},#${s1-imm8} */
+  {
+    UBICOM32_INSN_SWAPB_2_D_DIRECT_S1_IMMEDIATE, "swapb.2-d-direct-s1-immediate", "swapb.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.2 #${d-imm8},#${s1-imm8} */
+  {
+    UBICOM32_INSN_SWAPB_2_D_IMMEDIATE_2_S1_IMMEDIATE, "swapb.2-d-immediate-2-s1-immediate", "swapb.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.2 (${d-An},${d-r}),#${s1-imm8} */
+  {
+    UBICOM32_INSN_SWAPB_2_D_INDIRECT_WITH_INDEX_2_S1_IMMEDIATE, "swapb.2-d-indirect-with-index-2-s1-immediate", "swapb.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.2 ${d-imm7-2}(${d-An}),#${s1-imm8} */
+  {
+    UBICOM32_INSN_SWAPB_2_D_INDIRECT_WITH_OFFSET_2_S1_IMMEDIATE, "swapb.2-d-indirect-with-offset-2-s1-immediate", "swapb.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.2 (${d-An}),#${s1-imm8} */
+  {
+    UBICOM32_INSN_SWAPB_2_D_INDIRECT_2_S1_IMMEDIATE, "swapb.2-d-indirect-2-s1-immediate", "swapb.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.2 (${d-An})${d-i4-2}++,#${s1-imm8} */
+  {
+    UBICOM32_INSN_SWAPB_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_IMMEDIATE, "swapb.2-d-indirect-with-post-increment-2-s1-immediate", "swapb.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.2 ${d-i4-2}(${d-An})++,#${s1-imm8} */
+  {
+    UBICOM32_INSN_SWAPB_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_IMMEDIATE, "swapb.2-d-indirect-with-pre-increment-2-s1-immediate", "swapb.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.2 ${d-direct-addr},(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_SWAPB_2_D_DIRECT_S1_INDIRECT_WITH_INDEX_2, "swapb.2-d-direct-s1-indirect-with-index-2", "swapb.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.2 #${d-imm8},(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_SWAPB_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_INDEX_2, "swapb.2-d-immediate-2-s1-indirect-with-index-2", "swapb.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.2 (${d-An},${d-r}),(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_SWAPB_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_INDEX_2, "swapb.2-d-indirect-with-index-2-s1-indirect-with-index-2", "swapb.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.2 ${d-imm7-2}(${d-An}),(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_SWAPB_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_INDEX_2, "swapb.2-d-indirect-with-offset-2-s1-indirect-with-index-2", "swapb.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.2 (${d-An}),(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_SWAPB_2_D_INDIRECT_2_S1_INDIRECT_WITH_INDEX_2, "swapb.2-d-indirect-2-s1-indirect-with-index-2", "swapb.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.2 (${d-An})${d-i4-2}++,(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_SWAPB_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_INDEX_2, "swapb.2-d-indirect-with-post-increment-2-s1-indirect-with-index-2", "swapb.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.2 ${d-i4-2}(${d-An})++,(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_SWAPB_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_INDEX_2, "swapb.2-d-indirect-with-pre-increment-2-s1-indirect-with-index-2", "swapb.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.2 ${d-direct-addr},${s1-imm7-2}(${s1-An}) */
+  {
+    UBICOM32_INSN_SWAPB_2_D_DIRECT_S1_INDIRECT_WITH_OFFSET_2, "swapb.2-d-direct-s1-indirect-with-offset-2", "swapb.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.2 #${d-imm8},${s1-imm7-2}(${s1-An}) */
+  {
+    UBICOM32_INSN_SWAPB_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_OFFSET_2, "swapb.2-d-immediate-2-s1-indirect-with-offset-2", "swapb.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.2 (${d-An},${d-r}),${s1-imm7-2}(${s1-An}) */
+  {
+    UBICOM32_INSN_SWAPB_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_OFFSET_2, "swapb.2-d-indirect-with-index-2-s1-indirect-with-offset-2", "swapb.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.2 ${d-imm7-2}(${d-An}),${s1-imm7-2}(${s1-An}) */
+  {
+    UBICOM32_INSN_SWAPB_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_OFFSET_2, "swapb.2-d-indirect-with-offset-2-s1-indirect-with-offset-2", "swapb.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.2 (${d-An}),${s1-imm7-2}(${s1-An}) */
+  {
+    UBICOM32_INSN_SWAPB_2_D_INDIRECT_2_S1_INDIRECT_WITH_OFFSET_2, "swapb.2-d-indirect-2-s1-indirect-with-offset-2", "swapb.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.2 (${d-An})${d-i4-2}++,${s1-imm7-2}(${s1-An}) */
+  {
+    UBICOM32_INSN_SWAPB_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_OFFSET_2, "swapb.2-d-indirect-with-post-increment-2-s1-indirect-with-offset-2", "swapb.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.2 ${d-i4-2}(${d-An})++,${s1-imm7-2}(${s1-An}) */
+  {
+    UBICOM32_INSN_SWAPB_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_OFFSET_2, "swapb.2-d-indirect-with-pre-increment-2-s1-indirect-with-offset-2", "swapb.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.2 ${d-direct-addr},(${s1-An}) */
+  {
+    UBICOM32_INSN_SWAPB_2_D_DIRECT_S1_INDIRECT_2, "swapb.2-d-direct-s1-indirect-2", "swapb.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.2 #${d-imm8},(${s1-An}) */
+  {
+    UBICOM32_INSN_SWAPB_2_D_IMMEDIATE_2_S1_INDIRECT_2, "swapb.2-d-immediate-2-s1-indirect-2", "swapb.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.2 (${d-An},${d-r}),(${s1-An}) */
+  {
+    UBICOM32_INSN_SWAPB_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_2, "swapb.2-d-indirect-with-index-2-s1-indirect-2", "swapb.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.2 ${d-imm7-2}(${d-An}),(${s1-An}) */
+  {
+    UBICOM32_INSN_SWAPB_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_2, "swapb.2-d-indirect-with-offset-2-s1-indirect-2", "swapb.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.2 (${d-An}),(${s1-An}) */
+  {
+    UBICOM32_INSN_SWAPB_2_D_INDIRECT_2_S1_INDIRECT_2, "swapb.2-d-indirect-2-s1-indirect-2", "swapb.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.2 (${d-An})${d-i4-2}++,(${s1-An}) */
+  {
+    UBICOM32_INSN_SWAPB_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_2, "swapb.2-d-indirect-with-post-increment-2-s1-indirect-2", "swapb.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.2 ${d-i4-2}(${d-An})++,(${s1-An}) */
+  {
+    UBICOM32_INSN_SWAPB_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_2, "swapb.2-d-indirect-with-pre-increment-2-s1-indirect-2", "swapb.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.2 ${d-direct-addr},(${s1-An})${s1-i4-2}++ */
+  {
+    UBICOM32_INSN_SWAPB_2_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_2, "swapb.2-d-direct-s1-indirect-with-post-increment-2", "swapb.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.2 #${d-imm8},(${s1-An})${s1-i4-2}++ */
+  {
+    UBICOM32_INSN_SWAPB_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_POST_INCREMENT_2, "swapb.2-d-immediate-2-s1-indirect-with-post-increment-2", "swapb.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.2 (${d-An},${d-r}),(${s1-An})${s1-i4-2}++ */
+  {
+    UBICOM32_INSN_SWAPB_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_POST_INCREMENT_2, "swapb.2-d-indirect-with-index-2-s1-indirect-with-post-increment-2", "swapb.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.2 ${d-imm7-2}(${d-An}),(${s1-An})${s1-i4-2}++ */
+  {
+    UBICOM32_INSN_SWAPB_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_POST_INCREMENT_2, "swapb.2-d-indirect-with-offset-2-s1-indirect-with-post-increment-2", "swapb.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.2 (${d-An}),(${s1-An})${s1-i4-2}++ */
+  {
+    UBICOM32_INSN_SWAPB_2_D_INDIRECT_2_S1_INDIRECT_WITH_POST_INCREMENT_2, "swapb.2-d-indirect-2-s1-indirect-with-post-increment-2", "swapb.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.2 (${d-An})${d-i4-2}++,(${s1-An})${s1-i4-2}++ */
+  {
+    UBICOM32_INSN_SWAPB_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_POST_INCREMENT_2, "swapb.2-d-indirect-with-post-increment-2-s1-indirect-with-post-increment-2", "swapb.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.2 ${d-i4-2}(${d-An})++,(${s1-An})${s1-i4-2}++ */
+  {
+    UBICOM32_INSN_SWAPB_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_POST_INCREMENT_2, "swapb.2-d-indirect-with-pre-increment-2-s1-indirect-with-post-increment-2", "swapb.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.2 ${d-direct-addr},${s1-i4-2}(${s1-An})++ */
+  {
+    UBICOM32_INSN_SWAPB_2_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_2, "swapb.2-d-direct-s1-indirect-with-pre-increment-2", "swapb.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.2 #${d-imm8},${s1-i4-2}(${s1-An})++ */
+  {
+    UBICOM32_INSN_SWAPB_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, "swapb.2-d-immediate-2-s1-indirect-with-pre-increment-2", "swapb.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.2 (${d-An},${d-r}),${s1-i4-2}(${s1-An})++ */
+  {
+    UBICOM32_INSN_SWAPB_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, "swapb.2-d-indirect-with-index-2-s1-indirect-with-pre-increment-2", "swapb.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.2 ${d-imm7-2}(${d-An}),${s1-i4-2}(${s1-An})++ */
+  {
+    UBICOM32_INSN_SWAPB_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, "swapb.2-d-indirect-with-offset-2-s1-indirect-with-pre-increment-2", "swapb.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.2 (${d-An}),${s1-i4-2}(${s1-An})++ */
+  {
+    UBICOM32_INSN_SWAPB_2_D_INDIRECT_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, "swapb.2-d-indirect-2-s1-indirect-with-pre-increment-2", "swapb.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.2 (${d-An})${d-i4-2}++,${s1-i4-2}(${s1-An})++ */
+  {
+    UBICOM32_INSN_SWAPB_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, "swapb.2-d-indirect-with-post-increment-2-s1-indirect-with-pre-increment-2", "swapb.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* swapb.2 ${d-i4-2}(${d-An})++,${s1-i4-2}(${s1-An})++ */
+  {
+    UBICOM32_INSN_SWAPB_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, "swapb.2-d-indirect-with-pre-increment-2-s1-indirect-with-pre-increment-2", "swapb.2", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pdec ${d-direct-addr},${pdec-s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_PDEC_D_DIRECT_PDEC_S1_EA_INDIRECT_WITH_OFFSET_4, "pdec-d-direct-pdec-s1-ea-indirect-with-offset-4", "pdec", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* pdec #${d-imm8},${pdec-s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_PDEC_D_IMMEDIATE_4_PDEC_S1_EA_INDIRECT_WITH_OFFSET_4, "pdec-d-immediate-4-pdec-s1-ea-indirect-with-offset-4", "pdec", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* pdec (${d-An},${d-r}),${pdec-s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_PDEC_D_INDIRECT_WITH_INDEX_4_PDEC_S1_EA_INDIRECT_WITH_OFFSET_4, "pdec-d-indirect-with-index-4-pdec-s1-ea-indirect-with-offset-4", "pdec", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* pdec ${d-imm7-4}(${d-An}),${pdec-s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_PDEC_D_INDIRECT_WITH_OFFSET_4_PDEC_S1_EA_INDIRECT_WITH_OFFSET_4, "pdec-d-indirect-with-offset-4-pdec-s1-ea-indirect-with-offset-4", "pdec", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* pdec (${d-An}),${pdec-s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_PDEC_D_INDIRECT_4_PDEC_S1_EA_INDIRECT_WITH_OFFSET_4, "pdec-d-indirect-4-pdec-s1-ea-indirect-with-offset-4", "pdec", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* pdec (${d-An})${d-i4-4}++,${pdec-s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_PDEC_D_INDIRECT_WITH_POST_INCREMENT_4_PDEC_S1_EA_INDIRECT_WITH_OFFSET_4, "pdec-d-indirect-with-post-increment-4-pdec-s1-ea-indirect-with-offset-4", "pdec", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* pdec ${d-i4-4}(${d-An})++,${pdec-s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_PDEC_D_INDIRECT_WITH_PRE_INCREMENT_4_PDEC_S1_EA_INDIRECT_WITH_OFFSET_4, "pdec-d-indirect-with-pre-increment-4-pdec-s1-ea-indirect-with-offset-4", "pdec", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.4 ${d-direct-addr},(${s1-An}) */
+  {
+    UBICOM32_INSN_LEA_4_D_DIRECT_S1_EA_INDIRECT, "lea.4-d-direct-s1-ea-indirect", "lea.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.4 #${d-imm8},(${s1-An}) */
+  {
+    UBICOM32_INSN_LEA_4_D_IMMEDIATE_4_S1_EA_INDIRECT, "lea.4-d-immediate-4-s1-ea-indirect", "lea.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.4 (${d-An},${d-r}),(${s1-An}) */
+  {
+    UBICOM32_INSN_LEA_4_D_INDIRECT_WITH_INDEX_4_S1_EA_INDIRECT, "lea.4-d-indirect-with-index-4-s1-ea-indirect", "lea.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.4 ${d-imm7-4}(${d-An}),(${s1-An}) */
+  {
+    UBICOM32_INSN_LEA_4_D_INDIRECT_WITH_OFFSET_4_S1_EA_INDIRECT, "lea.4-d-indirect-with-offset-4-s1-ea-indirect", "lea.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.4 (${d-An}),(${s1-An}) */
+  {
+    UBICOM32_INSN_LEA_4_D_INDIRECT_4_S1_EA_INDIRECT, "lea.4-d-indirect-4-s1-ea-indirect", "lea.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.4 (${d-An})${d-i4-4}++,(${s1-An}) */
+  {
+    UBICOM32_INSN_LEA_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_EA_INDIRECT, "lea.4-d-indirect-with-post-increment-4-s1-ea-indirect", "lea.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.4 ${d-i4-4}(${d-An})++,(${s1-An}) */
+  {
+    UBICOM32_INSN_LEA_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_EA_INDIRECT, "lea.4-d-indirect-with-pre-increment-4-s1-ea-indirect", "lea.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.4 ${d-direct-addr},${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_LEA_4_D_DIRECT_S1_EA_INDIRECT_WITH_OFFSET_4, "lea.4-d-direct-s1-ea-indirect-with-offset-4", "lea.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.4 #${d-imm8},${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_LEA_4_D_IMMEDIATE_4_S1_EA_INDIRECT_WITH_OFFSET_4, "lea.4-d-immediate-4-s1-ea-indirect-with-offset-4", "lea.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.4 (${d-An},${d-r}),${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_LEA_4_D_INDIRECT_WITH_INDEX_4_S1_EA_INDIRECT_WITH_OFFSET_4, "lea.4-d-indirect-with-index-4-s1-ea-indirect-with-offset-4", "lea.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.4 ${d-imm7-4}(${d-An}),${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_LEA_4_D_INDIRECT_WITH_OFFSET_4_S1_EA_INDIRECT_WITH_OFFSET_4, "lea.4-d-indirect-with-offset-4-s1-ea-indirect-with-offset-4", "lea.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.4 (${d-An}),${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_LEA_4_D_INDIRECT_4_S1_EA_INDIRECT_WITH_OFFSET_4, "lea.4-d-indirect-4-s1-ea-indirect-with-offset-4", "lea.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.4 (${d-An})${d-i4-4}++,${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_LEA_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_EA_INDIRECT_WITH_OFFSET_4, "lea.4-d-indirect-with-post-increment-4-s1-ea-indirect-with-offset-4", "lea.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.4 ${d-i4-4}(${d-An})++,${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_LEA_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_EA_INDIRECT_WITH_OFFSET_4, "lea.4-d-indirect-with-pre-increment-4-s1-ea-indirect-with-offset-4", "lea.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.4 ${d-direct-addr},(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_LEA_4_D_DIRECT_S1_EA_INDIRECT_WITH_INDEX_4, "lea.4-d-direct-s1-ea-indirect-with-index-4", "lea.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.4 #${d-imm8},(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_LEA_4_D_IMMEDIATE_4_S1_EA_INDIRECT_WITH_INDEX_4, "lea.4-d-immediate-4-s1-ea-indirect-with-index-4", "lea.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.4 (${d-An},${d-r}),(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_LEA_4_D_INDIRECT_WITH_INDEX_4_S1_EA_INDIRECT_WITH_INDEX_4, "lea.4-d-indirect-with-index-4-s1-ea-indirect-with-index-4", "lea.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.4 ${d-imm7-4}(${d-An}),(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_LEA_4_D_INDIRECT_WITH_OFFSET_4_S1_EA_INDIRECT_WITH_INDEX_4, "lea.4-d-indirect-with-offset-4-s1-ea-indirect-with-index-4", "lea.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.4 (${d-An}),(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_LEA_4_D_INDIRECT_4_S1_EA_INDIRECT_WITH_INDEX_4, "lea.4-d-indirect-4-s1-ea-indirect-with-index-4", "lea.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.4 (${d-An})${d-i4-4}++,(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_LEA_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_EA_INDIRECT_WITH_INDEX_4, "lea.4-d-indirect-with-post-increment-4-s1-ea-indirect-with-index-4", "lea.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.4 ${d-i4-4}(${d-An})++,(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_LEA_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_EA_INDIRECT_WITH_INDEX_4, "lea.4-d-indirect-with-pre-increment-4-s1-ea-indirect-with-index-4", "lea.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.4 ${d-direct-addr},(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_LEA_4_D_DIRECT_S1_EA_INDIRECT_WITH_POST_INCREMENT_4, "lea.4-d-direct-s1-ea-indirect-with-post-increment-4", "lea.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.4 #${d-imm8},(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_LEA_4_D_IMMEDIATE_4_S1_EA_INDIRECT_WITH_POST_INCREMENT_4, "lea.4-d-immediate-4-s1-ea-indirect-with-post-increment-4", "lea.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.4 (${d-An},${d-r}),(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_LEA_4_D_INDIRECT_WITH_INDEX_4_S1_EA_INDIRECT_WITH_POST_INCREMENT_4, "lea.4-d-indirect-with-index-4-s1-ea-indirect-with-post-increment-4", "lea.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.4 ${d-imm7-4}(${d-An}),(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_LEA_4_D_INDIRECT_WITH_OFFSET_4_S1_EA_INDIRECT_WITH_POST_INCREMENT_4, "lea.4-d-indirect-with-offset-4-s1-ea-indirect-with-post-increment-4", "lea.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.4 (${d-An}),(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_LEA_4_D_INDIRECT_4_S1_EA_INDIRECT_WITH_POST_INCREMENT_4, "lea.4-d-indirect-4-s1-ea-indirect-with-post-increment-4", "lea.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.4 (${d-An})${d-i4-4}++,(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_LEA_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_EA_INDIRECT_WITH_POST_INCREMENT_4, "lea.4-d-indirect-with-post-increment-4-s1-ea-indirect-with-post-increment-4", "lea.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.4 ${d-i4-4}(${d-An})++,(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_LEA_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_EA_INDIRECT_WITH_POST_INCREMENT_4, "lea.4-d-indirect-with-pre-increment-4-s1-ea-indirect-with-post-increment-4", "lea.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.4 ${d-direct-addr},${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_LEA_4_D_DIRECT_S1_EA_INDIRECT_WITH_PRE_INCREMENT_4, "lea.4-d-direct-s1-ea-indirect-with-pre-increment-4", "lea.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.4 #${d-imm8},${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_LEA_4_D_IMMEDIATE_4_S1_EA_INDIRECT_WITH_PRE_INCREMENT_4, "lea.4-d-immediate-4-s1-ea-indirect-with-pre-increment-4", "lea.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.4 (${d-An},${d-r}),${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_LEA_4_D_INDIRECT_WITH_INDEX_4_S1_EA_INDIRECT_WITH_PRE_INCREMENT_4, "lea.4-d-indirect-with-index-4-s1-ea-indirect-with-pre-increment-4", "lea.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.4 ${d-imm7-4}(${d-An}),${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_LEA_4_D_INDIRECT_WITH_OFFSET_4_S1_EA_INDIRECT_WITH_PRE_INCREMENT_4, "lea.4-d-indirect-with-offset-4-s1-ea-indirect-with-pre-increment-4", "lea.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.4 (${d-An}),${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_LEA_4_D_INDIRECT_4_S1_EA_INDIRECT_WITH_PRE_INCREMENT_4, "lea.4-d-indirect-4-s1-ea-indirect-with-pre-increment-4", "lea.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.4 (${d-An})${d-i4-4}++,${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_LEA_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_EA_INDIRECT_WITH_PRE_INCREMENT_4, "lea.4-d-indirect-with-post-increment-4-s1-ea-indirect-with-pre-increment-4", "lea.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.4 ${d-i4-4}(${d-An})++,${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_LEA_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_EA_INDIRECT_WITH_PRE_INCREMENT_4, "lea.4-d-indirect-with-pre-increment-4-s1-ea-indirect-with-pre-increment-4", "lea.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.4 ${d-direct-addr},#${s1-imm8} */
+  {
+    UBICOM32_INSN_LEA_4_D_DIRECT_S1_EA_IMMEDIATE, "lea.4-d-direct-s1-ea-immediate", "lea.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.4 #${d-imm8},#${s1-imm8} */
+  {
+    UBICOM32_INSN_LEA_4_D_IMMEDIATE_4_S1_EA_IMMEDIATE, "lea.4-d-immediate-4-s1-ea-immediate", "lea.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.4 (${d-An},${d-r}),#${s1-imm8} */
+  {
+    UBICOM32_INSN_LEA_4_D_INDIRECT_WITH_INDEX_4_S1_EA_IMMEDIATE, "lea.4-d-indirect-with-index-4-s1-ea-immediate", "lea.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.4 ${d-imm7-4}(${d-An}),#${s1-imm8} */
+  {
+    UBICOM32_INSN_LEA_4_D_INDIRECT_WITH_OFFSET_4_S1_EA_IMMEDIATE, "lea.4-d-indirect-with-offset-4-s1-ea-immediate", "lea.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.4 (${d-An}),#${s1-imm8} */
+  {
+    UBICOM32_INSN_LEA_4_D_INDIRECT_4_S1_EA_IMMEDIATE, "lea.4-d-indirect-4-s1-ea-immediate", "lea.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.4 (${d-An})${d-i4-4}++,#${s1-imm8} */
+  {
+    UBICOM32_INSN_LEA_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_EA_IMMEDIATE, "lea.4-d-indirect-with-post-increment-4-s1-ea-immediate", "lea.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.4 ${d-i4-4}(${d-An})++,#${s1-imm8} */
+  {
+    UBICOM32_INSN_LEA_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_EA_IMMEDIATE, "lea.4-d-indirect-with-pre-increment-4-s1-ea-immediate", "lea.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.2 ${d-direct-addr},(${s1-An}) */
+  {
+    UBICOM32_INSN_LEA_2_D_DIRECT_S1_EA_INDIRECT, "lea.2-d-direct-s1-ea-indirect", "lea.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.2 #${d-imm8},(${s1-An}) */
+  {
+    UBICOM32_INSN_LEA_2_D_IMMEDIATE_4_S1_EA_INDIRECT, "lea.2-d-immediate-4-s1-ea-indirect", "lea.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.2 (${d-An},${d-r}),(${s1-An}) */
+  {
+    UBICOM32_INSN_LEA_2_D_INDIRECT_WITH_INDEX_4_S1_EA_INDIRECT, "lea.2-d-indirect-with-index-4-s1-ea-indirect", "lea.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.2 ${d-imm7-4}(${d-An}),(${s1-An}) */
+  {
+    UBICOM32_INSN_LEA_2_D_INDIRECT_WITH_OFFSET_4_S1_EA_INDIRECT, "lea.2-d-indirect-with-offset-4-s1-ea-indirect", "lea.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.2 (${d-An}),(${s1-An}) */
+  {
+    UBICOM32_INSN_LEA_2_D_INDIRECT_4_S1_EA_INDIRECT, "lea.2-d-indirect-4-s1-ea-indirect", "lea.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.2 (${d-An})${d-i4-4}++,(${s1-An}) */
+  {
+    UBICOM32_INSN_LEA_2_D_INDIRECT_WITH_POST_INCREMENT_4_S1_EA_INDIRECT, "lea.2-d-indirect-with-post-increment-4-s1-ea-indirect", "lea.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.2 ${d-i4-4}(${d-An})++,(${s1-An}) */
+  {
+    UBICOM32_INSN_LEA_2_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_EA_INDIRECT, "lea.2-d-indirect-with-pre-increment-4-s1-ea-indirect", "lea.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.2 ${d-direct-addr},${s1-imm7-2}(${s1-An}) */
+  {
+    UBICOM32_INSN_LEA_2_D_DIRECT_S1_EA_INDIRECT_WITH_OFFSET_2, "lea.2-d-direct-s1-ea-indirect-with-offset-2", "lea.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.2 #${d-imm8},${s1-imm7-2}(${s1-An}) */
+  {
+    UBICOM32_INSN_LEA_2_D_IMMEDIATE_4_S1_EA_INDIRECT_WITH_OFFSET_2, "lea.2-d-immediate-4-s1-ea-indirect-with-offset-2", "lea.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.2 (${d-An},${d-r}),${s1-imm7-2}(${s1-An}) */
+  {
+    UBICOM32_INSN_LEA_2_D_INDIRECT_WITH_INDEX_4_S1_EA_INDIRECT_WITH_OFFSET_2, "lea.2-d-indirect-with-index-4-s1-ea-indirect-with-offset-2", "lea.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.2 ${d-imm7-4}(${d-An}),${s1-imm7-2}(${s1-An}) */
+  {
+    UBICOM32_INSN_LEA_2_D_INDIRECT_WITH_OFFSET_4_S1_EA_INDIRECT_WITH_OFFSET_2, "lea.2-d-indirect-with-offset-4-s1-ea-indirect-with-offset-2", "lea.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.2 (${d-An}),${s1-imm7-2}(${s1-An}) */
+  {
+    UBICOM32_INSN_LEA_2_D_INDIRECT_4_S1_EA_INDIRECT_WITH_OFFSET_2, "lea.2-d-indirect-4-s1-ea-indirect-with-offset-2", "lea.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.2 (${d-An})${d-i4-4}++,${s1-imm7-2}(${s1-An}) */
+  {
+    UBICOM32_INSN_LEA_2_D_INDIRECT_WITH_POST_INCREMENT_4_S1_EA_INDIRECT_WITH_OFFSET_2, "lea.2-d-indirect-with-post-increment-4-s1-ea-indirect-with-offset-2", "lea.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.2 ${d-i4-4}(${d-An})++,${s1-imm7-2}(${s1-An}) */
+  {
+    UBICOM32_INSN_LEA_2_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_EA_INDIRECT_WITH_OFFSET_2, "lea.2-d-indirect-with-pre-increment-4-s1-ea-indirect-with-offset-2", "lea.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.2 ${d-direct-addr},(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_LEA_2_D_DIRECT_S1_EA_INDIRECT_WITH_INDEX_2, "lea.2-d-direct-s1-ea-indirect-with-index-2", "lea.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.2 #${d-imm8},(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_LEA_2_D_IMMEDIATE_4_S1_EA_INDIRECT_WITH_INDEX_2, "lea.2-d-immediate-4-s1-ea-indirect-with-index-2", "lea.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.2 (${d-An},${d-r}),(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_LEA_2_D_INDIRECT_WITH_INDEX_4_S1_EA_INDIRECT_WITH_INDEX_2, "lea.2-d-indirect-with-index-4-s1-ea-indirect-with-index-2", "lea.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.2 ${d-imm7-4}(${d-An}),(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_LEA_2_D_INDIRECT_WITH_OFFSET_4_S1_EA_INDIRECT_WITH_INDEX_2, "lea.2-d-indirect-with-offset-4-s1-ea-indirect-with-index-2", "lea.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.2 (${d-An}),(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_LEA_2_D_INDIRECT_4_S1_EA_INDIRECT_WITH_INDEX_2, "lea.2-d-indirect-4-s1-ea-indirect-with-index-2", "lea.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.2 (${d-An})${d-i4-4}++,(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_LEA_2_D_INDIRECT_WITH_POST_INCREMENT_4_S1_EA_INDIRECT_WITH_INDEX_2, "lea.2-d-indirect-with-post-increment-4-s1-ea-indirect-with-index-2", "lea.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.2 ${d-i4-4}(${d-An})++,(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_LEA_2_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_EA_INDIRECT_WITH_INDEX_2, "lea.2-d-indirect-with-pre-increment-4-s1-ea-indirect-with-index-2", "lea.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.2 ${d-direct-addr},(${s1-An})${s1-i4-2}++ */
+  {
+    UBICOM32_INSN_LEA_2_D_DIRECT_S1_EA_INDIRECT_WITH_POST_INCREMENT_2, "lea.2-d-direct-s1-ea-indirect-with-post-increment-2", "lea.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.2 #${d-imm8},(${s1-An})${s1-i4-2}++ */
+  {
+    UBICOM32_INSN_LEA_2_D_IMMEDIATE_4_S1_EA_INDIRECT_WITH_POST_INCREMENT_2, "lea.2-d-immediate-4-s1-ea-indirect-with-post-increment-2", "lea.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.2 (${d-An},${d-r}),(${s1-An})${s1-i4-2}++ */
+  {
+    UBICOM32_INSN_LEA_2_D_INDIRECT_WITH_INDEX_4_S1_EA_INDIRECT_WITH_POST_INCREMENT_2, "lea.2-d-indirect-with-index-4-s1-ea-indirect-with-post-increment-2", "lea.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.2 ${d-imm7-4}(${d-An}),(${s1-An})${s1-i4-2}++ */
+  {
+    UBICOM32_INSN_LEA_2_D_INDIRECT_WITH_OFFSET_4_S1_EA_INDIRECT_WITH_POST_INCREMENT_2, "lea.2-d-indirect-with-offset-4-s1-ea-indirect-with-post-increment-2", "lea.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.2 (${d-An}),(${s1-An})${s1-i4-2}++ */
+  {
+    UBICOM32_INSN_LEA_2_D_INDIRECT_4_S1_EA_INDIRECT_WITH_POST_INCREMENT_2, "lea.2-d-indirect-4-s1-ea-indirect-with-post-increment-2", "lea.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.2 (${d-An})${d-i4-4}++,(${s1-An})${s1-i4-2}++ */
+  {
+    UBICOM32_INSN_LEA_2_D_INDIRECT_WITH_POST_INCREMENT_4_S1_EA_INDIRECT_WITH_POST_INCREMENT_2, "lea.2-d-indirect-with-post-increment-4-s1-ea-indirect-with-post-increment-2", "lea.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.2 ${d-i4-4}(${d-An})++,(${s1-An})${s1-i4-2}++ */
+  {
+    UBICOM32_INSN_LEA_2_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_EA_INDIRECT_WITH_POST_INCREMENT_2, "lea.2-d-indirect-with-pre-increment-4-s1-ea-indirect-with-post-increment-2", "lea.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.2 ${d-direct-addr},${s1-i4-2}(${s1-An})++ */
+  {
+    UBICOM32_INSN_LEA_2_D_DIRECT_S1_EA_INDIRECT_WITH_PRE_INCREMENT_2, "lea.2-d-direct-s1-ea-indirect-with-pre-increment-2", "lea.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.2 #${d-imm8},${s1-i4-2}(${s1-An})++ */
+  {
+    UBICOM32_INSN_LEA_2_D_IMMEDIATE_4_S1_EA_INDIRECT_WITH_PRE_INCREMENT_2, "lea.2-d-immediate-4-s1-ea-indirect-with-pre-increment-2", "lea.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.2 (${d-An},${d-r}),${s1-i4-2}(${s1-An})++ */
+  {
+    UBICOM32_INSN_LEA_2_D_INDIRECT_WITH_INDEX_4_S1_EA_INDIRECT_WITH_PRE_INCREMENT_2, "lea.2-d-indirect-with-index-4-s1-ea-indirect-with-pre-increment-2", "lea.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.2 ${d-imm7-4}(${d-An}),${s1-i4-2}(${s1-An})++ */
+  {
+    UBICOM32_INSN_LEA_2_D_INDIRECT_WITH_OFFSET_4_S1_EA_INDIRECT_WITH_PRE_INCREMENT_2, "lea.2-d-indirect-with-offset-4-s1-ea-indirect-with-pre-increment-2", "lea.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.2 (${d-An}),${s1-i4-2}(${s1-An})++ */
+  {
+    UBICOM32_INSN_LEA_2_D_INDIRECT_4_S1_EA_INDIRECT_WITH_PRE_INCREMENT_2, "lea.2-d-indirect-4-s1-ea-indirect-with-pre-increment-2", "lea.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.2 (${d-An})${d-i4-4}++,${s1-i4-2}(${s1-An})++ */
+  {
+    UBICOM32_INSN_LEA_2_D_INDIRECT_WITH_POST_INCREMENT_4_S1_EA_INDIRECT_WITH_PRE_INCREMENT_2, "lea.2-d-indirect-with-post-increment-4-s1-ea-indirect-with-pre-increment-2", "lea.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.2 ${d-i4-4}(${d-An})++,${s1-i4-2}(${s1-An})++ */
+  {
+    UBICOM32_INSN_LEA_2_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_EA_INDIRECT_WITH_PRE_INCREMENT_2, "lea.2-d-indirect-with-pre-increment-4-s1-ea-indirect-with-pre-increment-2", "lea.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.2 ${d-direct-addr},#${s1-imm8} */
+  {
+    UBICOM32_INSN_LEA_2_D_DIRECT_S1_EA_IMMEDIATE, "lea.2-d-direct-s1-ea-immediate", "lea.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.2 #${d-imm8},#${s1-imm8} */
+  {
+    UBICOM32_INSN_LEA_2_D_IMMEDIATE_4_S1_EA_IMMEDIATE, "lea.2-d-immediate-4-s1-ea-immediate", "lea.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.2 (${d-An},${d-r}),#${s1-imm8} */
+  {
+    UBICOM32_INSN_LEA_2_D_INDIRECT_WITH_INDEX_4_S1_EA_IMMEDIATE, "lea.2-d-indirect-with-index-4-s1-ea-immediate", "lea.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.2 ${d-imm7-4}(${d-An}),#${s1-imm8} */
+  {
+    UBICOM32_INSN_LEA_2_D_INDIRECT_WITH_OFFSET_4_S1_EA_IMMEDIATE, "lea.2-d-indirect-with-offset-4-s1-ea-immediate", "lea.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.2 (${d-An}),#${s1-imm8} */
+  {
+    UBICOM32_INSN_LEA_2_D_INDIRECT_4_S1_EA_IMMEDIATE, "lea.2-d-indirect-4-s1-ea-immediate", "lea.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.2 (${d-An})${d-i4-4}++,#${s1-imm8} */
+  {
+    UBICOM32_INSN_LEA_2_D_INDIRECT_WITH_POST_INCREMENT_4_S1_EA_IMMEDIATE, "lea.2-d-indirect-with-post-increment-4-s1-ea-immediate", "lea.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.2 ${d-i4-4}(${d-An})++,#${s1-imm8} */
+  {
+    UBICOM32_INSN_LEA_2_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_EA_IMMEDIATE, "lea.2-d-indirect-with-pre-increment-4-s1-ea-immediate", "lea.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.1 ${d-direct-addr},(${s1-An}) */
+  {
+    UBICOM32_INSN_LEA_1_D_DIRECT_S1_EA_INDIRECT, "lea.1-d-direct-s1-ea-indirect", "lea.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.1 #${d-imm8},(${s1-An}) */
+  {
+    UBICOM32_INSN_LEA_1_D_IMMEDIATE_4_S1_EA_INDIRECT, "lea.1-d-immediate-4-s1-ea-indirect", "lea.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.1 (${d-An},${d-r}),(${s1-An}) */
+  {
+    UBICOM32_INSN_LEA_1_D_INDIRECT_WITH_INDEX_4_S1_EA_INDIRECT, "lea.1-d-indirect-with-index-4-s1-ea-indirect", "lea.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.1 ${d-imm7-4}(${d-An}),(${s1-An}) */
+  {
+    UBICOM32_INSN_LEA_1_D_INDIRECT_WITH_OFFSET_4_S1_EA_INDIRECT, "lea.1-d-indirect-with-offset-4-s1-ea-indirect", "lea.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.1 (${d-An}),(${s1-An}) */
+  {
+    UBICOM32_INSN_LEA_1_D_INDIRECT_4_S1_EA_INDIRECT, "lea.1-d-indirect-4-s1-ea-indirect", "lea.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.1 (${d-An})${d-i4-4}++,(${s1-An}) */
+  {
+    UBICOM32_INSN_LEA_1_D_INDIRECT_WITH_POST_INCREMENT_4_S1_EA_INDIRECT, "lea.1-d-indirect-with-post-increment-4-s1-ea-indirect", "lea.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.1 ${d-i4-4}(${d-An})++,(${s1-An}) */
+  {
+    UBICOM32_INSN_LEA_1_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_EA_INDIRECT, "lea.1-d-indirect-with-pre-increment-4-s1-ea-indirect", "lea.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.1 ${d-direct-addr},${s1-imm7-1}(${s1-An}) */
+  {
+    UBICOM32_INSN_LEA_1_D_DIRECT_S1_EA_INDIRECT_WITH_OFFSET_1, "lea.1-d-direct-s1-ea-indirect-with-offset-1", "lea.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.1 #${d-imm8},${s1-imm7-1}(${s1-An}) */
+  {
+    UBICOM32_INSN_LEA_1_D_IMMEDIATE_4_S1_EA_INDIRECT_WITH_OFFSET_1, "lea.1-d-immediate-4-s1-ea-indirect-with-offset-1", "lea.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.1 (${d-An},${d-r}),${s1-imm7-1}(${s1-An}) */
+  {
+    UBICOM32_INSN_LEA_1_D_INDIRECT_WITH_INDEX_4_S1_EA_INDIRECT_WITH_OFFSET_1, "lea.1-d-indirect-with-index-4-s1-ea-indirect-with-offset-1", "lea.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.1 ${d-imm7-4}(${d-An}),${s1-imm7-1}(${s1-An}) */
+  {
+    UBICOM32_INSN_LEA_1_D_INDIRECT_WITH_OFFSET_4_S1_EA_INDIRECT_WITH_OFFSET_1, "lea.1-d-indirect-with-offset-4-s1-ea-indirect-with-offset-1", "lea.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.1 (${d-An}),${s1-imm7-1}(${s1-An}) */
+  {
+    UBICOM32_INSN_LEA_1_D_INDIRECT_4_S1_EA_INDIRECT_WITH_OFFSET_1, "lea.1-d-indirect-4-s1-ea-indirect-with-offset-1", "lea.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.1 (${d-An})${d-i4-4}++,${s1-imm7-1}(${s1-An}) */
+  {
+    UBICOM32_INSN_LEA_1_D_INDIRECT_WITH_POST_INCREMENT_4_S1_EA_INDIRECT_WITH_OFFSET_1, "lea.1-d-indirect-with-post-increment-4-s1-ea-indirect-with-offset-1", "lea.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.1 ${d-i4-4}(${d-An})++,${s1-imm7-1}(${s1-An}) */
+  {
+    UBICOM32_INSN_LEA_1_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_EA_INDIRECT_WITH_OFFSET_1, "lea.1-d-indirect-with-pre-increment-4-s1-ea-indirect-with-offset-1", "lea.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.1 ${d-direct-addr},(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_LEA_1_D_DIRECT_S1_EA_INDIRECT_WITH_INDEX_1, "lea.1-d-direct-s1-ea-indirect-with-index-1", "lea.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.1 #${d-imm8},(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_LEA_1_D_IMMEDIATE_4_S1_EA_INDIRECT_WITH_INDEX_1, "lea.1-d-immediate-4-s1-ea-indirect-with-index-1", "lea.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.1 (${d-An},${d-r}),(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_LEA_1_D_INDIRECT_WITH_INDEX_4_S1_EA_INDIRECT_WITH_INDEX_1, "lea.1-d-indirect-with-index-4-s1-ea-indirect-with-index-1", "lea.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.1 ${d-imm7-4}(${d-An}),(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_LEA_1_D_INDIRECT_WITH_OFFSET_4_S1_EA_INDIRECT_WITH_INDEX_1, "lea.1-d-indirect-with-offset-4-s1-ea-indirect-with-index-1", "lea.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.1 (${d-An}),(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_LEA_1_D_INDIRECT_4_S1_EA_INDIRECT_WITH_INDEX_1, "lea.1-d-indirect-4-s1-ea-indirect-with-index-1", "lea.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.1 (${d-An})${d-i4-4}++,(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_LEA_1_D_INDIRECT_WITH_POST_INCREMENT_4_S1_EA_INDIRECT_WITH_INDEX_1, "lea.1-d-indirect-with-post-increment-4-s1-ea-indirect-with-index-1", "lea.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.1 ${d-i4-4}(${d-An})++,(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_LEA_1_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_EA_INDIRECT_WITH_INDEX_1, "lea.1-d-indirect-with-pre-increment-4-s1-ea-indirect-with-index-1", "lea.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.1 ${d-direct-addr},(${s1-An})${s1-i4-1}++ */
+  {
+    UBICOM32_INSN_LEA_1_D_DIRECT_S1_EA_INDIRECT_WITH_POST_INCREMENT_1, "lea.1-d-direct-s1-ea-indirect-with-post-increment-1", "lea.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.1 #${d-imm8},(${s1-An})${s1-i4-1}++ */
+  {
+    UBICOM32_INSN_LEA_1_D_IMMEDIATE_4_S1_EA_INDIRECT_WITH_POST_INCREMENT_1, "lea.1-d-immediate-4-s1-ea-indirect-with-post-increment-1", "lea.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.1 (${d-An},${d-r}),(${s1-An})${s1-i4-1}++ */
+  {
+    UBICOM32_INSN_LEA_1_D_INDIRECT_WITH_INDEX_4_S1_EA_INDIRECT_WITH_POST_INCREMENT_1, "lea.1-d-indirect-with-index-4-s1-ea-indirect-with-post-increment-1", "lea.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.1 ${d-imm7-4}(${d-An}),(${s1-An})${s1-i4-1}++ */
+  {
+    UBICOM32_INSN_LEA_1_D_INDIRECT_WITH_OFFSET_4_S1_EA_INDIRECT_WITH_POST_INCREMENT_1, "lea.1-d-indirect-with-offset-4-s1-ea-indirect-with-post-increment-1", "lea.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.1 (${d-An}),(${s1-An})${s1-i4-1}++ */
+  {
+    UBICOM32_INSN_LEA_1_D_INDIRECT_4_S1_EA_INDIRECT_WITH_POST_INCREMENT_1, "lea.1-d-indirect-4-s1-ea-indirect-with-post-increment-1", "lea.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.1 (${d-An})${d-i4-4}++,(${s1-An})${s1-i4-1}++ */
+  {
+    UBICOM32_INSN_LEA_1_D_INDIRECT_WITH_POST_INCREMENT_4_S1_EA_INDIRECT_WITH_POST_INCREMENT_1, "lea.1-d-indirect-with-post-increment-4-s1-ea-indirect-with-post-increment-1", "lea.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.1 ${d-i4-4}(${d-An})++,(${s1-An})${s1-i4-1}++ */
+  {
+    UBICOM32_INSN_LEA_1_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_EA_INDIRECT_WITH_POST_INCREMENT_1, "lea.1-d-indirect-with-pre-increment-4-s1-ea-indirect-with-post-increment-1", "lea.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.1 ${d-direct-addr},${s1-i4-1}(${s1-An})++ */
+  {
+    UBICOM32_INSN_LEA_1_D_DIRECT_S1_EA_INDIRECT_WITH_PRE_INCREMENT_1, "lea.1-d-direct-s1-ea-indirect-with-pre-increment-1", "lea.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.1 #${d-imm8},${s1-i4-1}(${s1-An})++ */
+  {
+    UBICOM32_INSN_LEA_1_D_IMMEDIATE_4_S1_EA_INDIRECT_WITH_PRE_INCREMENT_1, "lea.1-d-immediate-4-s1-ea-indirect-with-pre-increment-1", "lea.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.1 (${d-An},${d-r}),${s1-i4-1}(${s1-An})++ */
+  {
+    UBICOM32_INSN_LEA_1_D_INDIRECT_WITH_INDEX_4_S1_EA_INDIRECT_WITH_PRE_INCREMENT_1, "lea.1-d-indirect-with-index-4-s1-ea-indirect-with-pre-increment-1", "lea.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.1 ${d-imm7-4}(${d-An}),${s1-i4-1}(${s1-An})++ */
+  {
+    UBICOM32_INSN_LEA_1_D_INDIRECT_WITH_OFFSET_4_S1_EA_INDIRECT_WITH_PRE_INCREMENT_1, "lea.1-d-indirect-with-offset-4-s1-ea-indirect-with-pre-increment-1", "lea.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.1 (${d-An}),${s1-i4-1}(${s1-An})++ */
+  {
+    UBICOM32_INSN_LEA_1_D_INDIRECT_4_S1_EA_INDIRECT_WITH_PRE_INCREMENT_1, "lea.1-d-indirect-4-s1-ea-indirect-with-pre-increment-1", "lea.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.1 (${d-An})${d-i4-4}++,${s1-i4-1}(${s1-An})++ */
+  {
+    UBICOM32_INSN_LEA_1_D_INDIRECT_WITH_POST_INCREMENT_4_S1_EA_INDIRECT_WITH_PRE_INCREMENT_1, "lea.1-d-indirect-with-post-increment-4-s1-ea-indirect-with-pre-increment-1", "lea.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.1 ${d-i4-4}(${d-An})++,${s1-i4-1}(${s1-An})++ */
+  {
+    UBICOM32_INSN_LEA_1_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_EA_INDIRECT_WITH_PRE_INCREMENT_1, "lea.1-d-indirect-with-pre-increment-4-s1-ea-indirect-with-pre-increment-1", "lea.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.1 ${d-direct-addr},#${s1-imm8} */
+  {
+    UBICOM32_INSN_LEA_1_D_DIRECT_S1_EA_IMMEDIATE, "lea.1-d-direct-s1-ea-immediate", "lea.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.1 #${d-imm8},#${s1-imm8} */
+  {
+    UBICOM32_INSN_LEA_1_D_IMMEDIATE_4_S1_EA_IMMEDIATE, "lea.1-d-immediate-4-s1-ea-immediate", "lea.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.1 (${d-An},${d-r}),#${s1-imm8} */
+  {
+    UBICOM32_INSN_LEA_1_D_INDIRECT_WITH_INDEX_4_S1_EA_IMMEDIATE, "lea.1-d-indirect-with-index-4-s1-ea-immediate", "lea.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.1 ${d-imm7-4}(${d-An}),#${s1-imm8} */
+  {
+    UBICOM32_INSN_LEA_1_D_INDIRECT_WITH_OFFSET_4_S1_EA_IMMEDIATE, "lea.1-d-indirect-with-offset-4-s1-ea-immediate", "lea.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.1 (${d-An}),#${s1-imm8} */
+  {
+    UBICOM32_INSN_LEA_1_D_INDIRECT_4_S1_EA_IMMEDIATE, "lea.1-d-indirect-4-s1-ea-immediate", "lea.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.1 (${d-An})${d-i4-4}++,#${s1-imm8} */
+  {
+    UBICOM32_INSN_LEA_1_D_INDIRECT_WITH_POST_INCREMENT_4_S1_EA_IMMEDIATE, "lea.1-d-indirect-with-post-increment-4-s1-ea-immediate", "lea.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* lea.1 ${d-i4-4}(${d-An})++,#${s1-imm8} */
+  {
+    UBICOM32_INSN_LEA_1_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_EA_IMMEDIATE, "lea.1-d-indirect-with-pre-increment-4-s1-ea-immediate", "lea.1", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* cmpi ${s1-direct-addr},#${imm16-1} */
+  {
+    UBICOM32_INSN_CMPI_S1_DIRECT, "cmpi-s1-direct", "cmpi", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* cmpi #${s1-imm8},#${imm16-1} */
+  {
+    UBICOM32_INSN_CMPI_S1_IMMEDIATE, "cmpi-s1-immediate", "cmpi", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* cmpi (${s1-An},${s1-r}),#${imm16-1} */
+  {
+    UBICOM32_INSN_CMPI_S1_INDIRECT_WITH_INDEX_2, "cmpi-s1-indirect-with-index-2", "cmpi", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* cmpi ${s1-imm7-2}(${s1-An}),#${imm16-1} */
+  {
+    UBICOM32_INSN_CMPI_S1_INDIRECT_WITH_OFFSET_2, "cmpi-s1-indirect-with-offset-2", "cmpi", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* cmpi (${s1-An}),#${imm16-1} */
+  {
+    UBICOM32_INSN_CMPI_S1_INDIRECT_2, "cmpi-s1-indirect-2", "cmpi", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* cmpi (${s1-An})${s1-i4-2}++,#${imm16-1} */
+  {
+    UBICOM32_INSN_CMPI_S1_INDIRECT_WITH_POST_INCREMENT_2, "cmpi-s1-indirect-with-post-increment-2", "cmpi", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* cmpi ${s1-i4-2}(${s1-An})++,#${imm16-1} */
+  {
+    UBICOM32_INSN_CMPI_S1_INDIRECT_WITH_PRE_INCREMENT_2, "cmpi-s1-indirect-with-pre-increment-2", "cmpi", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* pxadds.u ${d-direct-addr},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_PXADDS_U_D_DIRECT_S1_DIRECT, "pxadds.u-d-direct-s1-direct", "pxadds.u", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds.u #${d-imm8},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_PXADDS_U_D_IMMEDIATE_2_S1_DIRECT, "pxadds.u-d-immediate-2-s1-direct", "pxadds.u", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds.u (${d-An},${d-r}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_PXADDS_U_D_INDIRECT_WITH_INDEX_2_S1_DIRECT, "pxadds.u-d-indirect-with-index-2-s1-direct", "pxadds.u", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds.u ${d-imm7-2}(${d-An}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_PXADDS_U_D_INDIRECT_WITH_OFFSET_2_S1_DIRECT, "pxadds.u-d-indirect-with-offset-2-s1-direct", "pxadds.u", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds.u (${d-An}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_PXADDS_U_D_INDIRECT_2_S1_DIRECT, "pxadds.u-d-indirect-2-s1-direct", "pxadds.u", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds.u (${d-An})${d-i4-2}++,${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_PXADDS_U_D_INDIRECT_WITH_POST_INCREMENT_2_S1_DIRECT, "pxadds.u-d-indirect-with-post-increment-2-s1-direct", "pxadds.u", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds.u ${d-i4-2}(${d-An})++,${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_PXADDS_U_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_DIRECT, "pxadds.u-d-indirect-with-pre-increment-2-s1-direct", "pxadds.u", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds.u ${d-direct-addr},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_PXADDS_U_D_DIRECT_S1_IMMEDIATE, "pxadds.u-d-direct-s1-immediate", "pxadds.u", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds.u #${d-imm8},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_PXADDS_U_D_IMMEDIATE_2_S1_IMMEDIATE, "pxadds.u-d-immediate-2-s1-immediate", "pxadds.u", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds.u (${d-An},${d-r}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_PXADDS_U_D_INDIRECT_WITH_INDEX_2_S1_IMMEDIATE, "pxadds.u-d-indirect-with-index-2-s1-immediate", "pxadds.u", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds.u ${d-imm7-2}(${d-An}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_PXADDS_U_D_INDIRECT_WITH_OFFSET_2_S1_IMMEDIATE, "pxadds.u-d-indirect-with-offset-2-s1-immediate", "pxadds.u", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds.u (${d-An}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_PXADDS_U_D_INDIRECT_2_S1_IMMEDIATE, "pxadds.u-d-indirect-2-s1-immediate", "pxadds.u", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds.u (${d-An})${d-i4-2}++,#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_PXADDS_U_D_INDIRECT_WITH_POST_INCREMENT_2_S1_IMMEDIATE, "pxadds.u-d-indirect-with-post-increment-2-s1-immediate", "pxadds.u", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds.u ${d-i4-2}(${d-An})++,#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_PXADDS_U_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_IMMEDIATE, "pxadds.u-d-indirect-with-pre-increment-2-s1-immediate", "pxadds.u", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds.u ${d-direct-addr},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_PXADDS_U_D_DIRECT_S1_INDIRECT_WITH_INDEX_4, "pxadds.u-d-direct-s1-indirect-with-index-4", "pxadds.u", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds.u #${d-imm8},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_PXADDS_U_D_IMMEDIATE_2_S1_INDIRECT_WITH_INDEX_4, "pxadds.u-d-immediate-2-s1-indirect-with-index-4", "pxadds.u", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds.u (${d-An},${d-r}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_PXADDS_U_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_INDEX_4, "pxadds.u-d-indirect-with-index-2-s1-indirect-with-index-4", "pxadds.u", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds.u ${d-imm7-2}(${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_PXADDS_U_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_INDEX_4, "pxadds.u-d-indirect-with-offset-2-s1-indirect-with-index-4", "pxadds.u", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds.u (${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_PXADDS_U_D_INDIRECT_2_S1_INDIRECT_WITH_INDEX_4, "pxadds.u-d-indirect-2-s1-indirect-with-index-4", "pxadds.u", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds.u (${d-An})${d-i4-2}++,(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_PXADDS_U_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_INDEX_4, "pxadds.u-d-indirect-with-post-increment-2-s1-indirect-with-index-4", "pxadds.u", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds.u ${d-i4-2}(${d-An})++,(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_PXADDS_U_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_INDEX_4, "pxadds.u-d-indirect-with-pre-increment-2-s1-indirect-with-index-4", "pxadds.u", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds.u ${d-direct-addr},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXADDS_U_D_DIRECT_S1_INDIRECT_WITH_OFFSET_4, "pxadds.u-d-direct-s1-indirect-with-offset-4", "pxadds.u", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds.u #${d-imm8},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXADDS_U_D_IMMEDIATE_2_S1_INDIRECT_WITH_OFFSET_4, "pxadds.u-d-immediate-2-s1-indirect-with-offset-4", "pxadds.u", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds.u (${d-An},${d-r}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXADDS_U_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_OFFSET_4, "pxadds.u-d-indirect-with-index-2-s1-indirect-with-offset-4", "pxadds.u", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds.u ${d-imm7-2}(${d-An}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXADDS_U_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_OFFSET_4, "pxadds.u-d-indirect-with-offset-2-s1-indirect-with-offset-4", "pxadds.u", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds.u (${d-An}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXADDS_U_D_INDIRECT_2_S1_INDIRECT_WITH_OFFSET_4, "pxadds.u-d-indirect-2-s1-indirect-with-offset-4", "pxadds.u", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds.u (${d-An})${d-i4-2}++,${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXADDS_U_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_OFFSET_4, "pxadds.u-d-indirect-with-post-increment-2-s1-indirect-with-offset-4", "pxadds.u", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds.u ${d-i4-2}(${d-An})++,${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXADDS_U_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_OFFSET_4, "pxadds.u-d-indirect-with-pre-increment-2-s1-indirect-with-offset-4", "pxadds.u", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds.u ${d-direct-addr},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXADDS_U_D_DIRECT_S1_INDIRECT_4, "pxadds.u-d-direct-s1-indirect-4", "pxadds.u", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds.u #${d-imm8},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXADDS_U_D_IMMEDIATE_2_S1_INDIRECT_4, "pxadds.u-d-immediate-2-s1-indirect-4", "pxadds.u", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds.u (${d-An},${d-r}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXADDS_U_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_4, "pxadds.u-d-indirect-with-index-2-s1-indirect-4", "pxadds.u", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds.u ${d-imm7-2}(${d-An}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXADDS_U_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_4, "pxadds.u-d-indirect-with-offset-2-s1-indirect-4", "pxadds.u", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds.u (${d-An}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXADDS_U_D_INDIRECT_2_S1_INDIRECT_4, "pxadds.u-d-indirect-2-s1-indirect-4", "pxadds.u", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds.u (${d-An})${d-i4-2}++,(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXADDS_U_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_4, "pxadds.u-d-indirect-with-post-increment-2-s1-indirect-4", "pxadds.u", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds.u ${d-i4-2}(${d-An})++,(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXADDS_U_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_4, "pxadds.u-d-indirect-with-pre-increment-2-s1-indirect-4", "pxadds.u", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds.u ${d-direct-addr},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_PXADDS_U_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_4, "pxadds.u-d-direct-s1-indirect-with-post-increment-4", "pxadds.u", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds.u #${d-imm8},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_PXADDS_U_D_IMMEDIATE_2_S1_INDIRECT_WITH_POST_INCREMENT_4, "pxadds.u-d-immediate-2-s1-indirect-with-post-increment-4", "pxadds.u", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds.u (${d-An},${d-r}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_PXADDS_U_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_POST_INCREMENT_4, "pxadds.u-d-indirect-with-index-2-s1-indirect-with-post-increment-4", "pxadds.u", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds.u ${d-imm7-2}(${d-An}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_PXADDS_U_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_POST_INCREMENT_4, "pxadds.u-d-indirect-with-offset-2-s1-indirect-with-post-increment-4", "pxadds.u", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds.u (${d-An}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_PXADDS_U_D_INDIRECT_2_S1_INDIRECT_WITH_POST_INCREMENT_4, "pxadds.u-d-indirect-2-s1-indirect-with-post-increment-4", "pxadds.u", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds.u (${d-An})${d-i4-2}++,(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_PXADDS_U_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_POST_INCREMENT_4, "pxadds.u-d-indirect-with-post-increment-2-s1-indirect-with-post-increment-4", "pxadds.u", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds.u ${d-i4-2}(${d-An})++,(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_PXADDS_U_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_POST_INCREMENT_4, "pxadds.u-d-indirect-with-pre-increment-2-s1-indirect-with-post-increment-4", "pxadds.u", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds.u ${d-direct-addr},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_PXADDS_U_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_4, "pxadds.u-d-direct-s1-indirect-with-pre-increment-4", "pxadds.u", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds.u #${d-imm8},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_PXADDS_U_D_IMMEDIATE_2_S1_INDIRECT_WITH_PRE_INCREMENT_4, "pxadds.u-d-immediate-2-s1-indirect-with-pre-increment-4", "pxadds.u", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds.u (${d-An},${d-r}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_PXADDS_U_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_PRE_INCREMENT_4, "pxadds.u-d-indirect-with-index-2-s1-indirect-with-pre-increment-4", "pxadds.u", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds.u ${d-imm7-2}(${d-An}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_PXADDS_U_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_PRE_INCREMENT_4, "pxadds.u-d-indirect-with-offset-2-s1-indirect-with-pre-increment-4", "pxadds.u", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds.u (${d-An}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_PXADDS_U_D_INDIRECT_2_S1_INDIRECT_WITH_PRE_INCREMENT_4, "pxadds.u-d-indirect-2-s1-indirect-with-pre-increment-4", "pxadds.u", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds.u (${d-An})${d-i4-2}++,${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_PXADDS_U_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_PRE_INCREMENT_4, "pxadds.u-d-indirect-with-post-increment-2-s1-indirect-with-pre-increment-4", "pxadds.u", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds.u ${d-i4-2}(${d-An})++,${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_PXADDS_U_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_PRE_INCREMENT_4, "pxadds.u-d-indirect-with-pre-increment-2-s1-indirect-with-pre-increment-4", "pxadds.u", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds ${d-direct-addr},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_PXADDS_D_DIRECT_S1_DIRECT, "pxadds-d-direct-s1-direct", "pxadds", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds #${d-imm8},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_PXADDS_D_IMMEDIATE_2_S1_DIRECT, "pxadds-d-immediate-2-s1-direct", "pxadds", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds (${d-An},${d-r}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_PXADDS_D_INDIRECT_WITH_INDEX_2_S1_DIRECT, "pxadds-d-indirect-with-index-2-s1-direct", "pxadds", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds ${d-imm7-2}(${d-An}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_PXADDS_D_INDIRECT_WITH_OFFSET_2_S1_DIRECT, "pxadds-d-indirect-with-offset-2-s1-direct", "pxadds", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds (${d-An}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_PXADDS_D_INDIRECT_2_S1_DIRECT, "pxadds-d-indirect-2-s1-direct", "pxadds", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds (${d-An})${d-i4-2}++,${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_PXADDS_D_INDIRECT_WITH_POST_INCREMENT_2_S1_DIRECT, "pxadds-d-indirect-with-post-increment-2-s1-direct", "pxadds", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds ${d-i4-2}(${d-An})++,${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_PXADDS_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_DIRECT, "pxadds-d-indirect-with-pre-increment-2-s1-direct", "pxadds", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds ${d-direct-addr},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_PXADDS_D_DIRECT_S1_IMMEDIATE, "pxadds-d-direct-s1-immediate", "pxadds", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds #${d-imm8},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_PXADDS_D_IMMEDIATE_2_S1_IMMEDIATE, "pxadds-d-immediate-2-s1-immediate", "pxadds", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds (${d-An},${d-r}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_PXADDS_D_INDIRECT_WITH_INDEX_2_S1_IMMEDIATE, "pxadds-d-indirect-with-index-2-s1-immediate", "pxadds", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds ${d-imm7-2}(${d-An}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_PXADDS_D_INDIRECT_WITH_OFFSET_2_S1_IMMEDIATE, "pxadds-d-indirect-with-offset-2-s1-immediate", "pxadds", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds (${d-An}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_PXADDS_D_INDIRECT_2_S1_IMMEDIATE, "pxadds-d-indirect-2-s1-immediate", "pxadds", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds (${d-An})${d-i4-2}++,#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_PXADDS_D_INDIRECT_WITH_POST_INCREMENT_2_S1_IMMEDIATE, "pxadds-d-indirect-with-post-increment-2-s1-immediate", "pxadds", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds ${d-i4-2}(${d-An})++,#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_PXADDS_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_IMMEDIATE, "pxadds-d-indirect-with-pre-increment-2-s1-immediate", "pxadds", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds ${d-direct-addr},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_PXADDS_D_DIRECT_S1_INDIRECT_WITH_INDEX_4, "pxadds-d-direct-s1-indirect-with-index-4", "pxadds", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds #${d-imm8},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_PXADDS_D_IMMEDIATE_2_S1_INDIRECT_WITH_INDEX_4, "pxadds-d-immediate-2-s1-indirect-with-index-4", "pxadds", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds (${d-An},${d-r}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_PXADDS_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_INDEX_4, "pxadds-d-indirect-with-index-2-s1-indirect-with-index-4", "pxadds", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds ${d-imm7-2}(${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_PXADDS_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_INDEX_4, "pxadds-d-indirect-with-offset-2-s1-indirect-with-index-4", "pxadds", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds (${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_PXADDS_D_INDIRECT_2_S1_INDIRECT_WITH_INDEX_4, "pxadds-d-indirect-2-s1-indirect-with-index-4", "pxadds", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds (${d-An})${d-i4-2}++,(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_PXADDS_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_INDEX_4, "pxadds-d-indirect-with-post-increment-2-s1-indirect-with-index-4", "pxadds", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds ${d-i4-2}(${d-An})++,(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_PXADDS_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_INDEX_4, "pxadds-d-indirect-with-pre-increment-2-s1-indirect-with-index-4", "pxadds", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds ${d-direct-addr},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXADDS_D_DIRECT_S1_INDIRECT_WITH_OFFSET_4, "pxadds-d-direct-s1-indirect-with-offset-4", "pxadds", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds #${d-imm8},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXADDS_D_IMMEDIATE_2_S1_INDIRECT_WITH_OFFSET_4, "pxadds-d-immediate-2-s1-indirect-with-offset-4", "pxadds", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds (${d-An},${d-r}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXADDS_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_OFFSET_4, "pxadds-d-indirect-with-index-2-s1-indirect-with-offset-4", "pxadds", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds ${d-imm7-2}(${d-An}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXADDS_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_OFFSET_4, "pxadds-d-indirect-with-offset-2-s1-indirect-with-offset-4", "pxadds", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds (${d-An}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXADDS_D_INDIRECT_2_S1_INDIRECT_WITH_OFFSET_4, "pxadds-d-indirect-2-s1-indirect-with-offset-4", "pxadds", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds (${d-An})${d-i4-2}++,${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXADDS_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_OFFSET_4, "pxadds-d-indirect-with-post-increment-2-s1-indirect-with-offset-4", "pxadds", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds ${d-i4-2}(${d-An})++,${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXADDS_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_OFFSET_4, "pxadds-d-indirect-with-pre-increment-2-s1-indirect-with-offset-4", "pxadds", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds ${d-direct-addr},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXADDS_D_DIRECT_S1_INDIRECT_4, "pxadds-d-direct-s1-indirect-4", "pxadds", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds #${d-imm8},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXADDS_D_IMMEDIATE_2_S1_INDIRECT_4, "pxadds-d-immediate-2-s1-indirect-4", "pxadds", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds (${d-An},${d-r}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXADDS_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_4, "pxadds-d-indirect-with-index-2-s1-indirect-4", "pxadds", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds ${d-imm7-2}(${d-An}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXADDS_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_4, "pxadds-d-indirect-with-offset-2-s1-indirect-4", "pxadds", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds (${d-An}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXADDS_D_INDIRECT_2_S1_INDIRECT_4, "pxadds-d-indirect-2-s1-indirect-4", "pxadds", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds (${d-An})${d-i4-2}++,(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXADDS_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_4, "pxadds-d-indirect-with-post-increment-2-s1-indirect-4", "pxadds", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds ${d-i4-2}(${d-An})++,(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXADDS_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_4, "pxadds-d-indirect-with-pre-increment-2-s1-indirect-4", "pxadds", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds ${d-direct-addr},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_PXADDS_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_4, "pxadds-d-direct-s1-indirect-with-post-increment-4", "pxadds", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds #${d-imm8},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_PXADDS_D_IMMEDIATE_2_S1_INDIRECT_WITH_POST_INCREMENT_4, "pxadds-d-immediate-2-s1-indirect-with-post-increment-4", "pxadds", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds (${d-An},${d-r}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_PXADDS_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_POST_INCREMENT_4, "pxadds-d-indirect-with-index-2-s1-indirect-with-post-increment-4", "pxadds", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds ${d-imm7-2}(${d-An}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_PXADDS_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_POST_INCREMENT_4, "pxadds-d-indirect-with-offset-2-s1-indirect-with-post-increment-4", "pxadds", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds (${d-An}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_PXADDS_D_INDIRECT_2_S1_INDIRECT_WITH_POST_INCREMENT_4, "pxadds-d-indirect-2-s1-indirect-with-post-increment-4", "pxadds", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds (${d-An})${d-i4-2}++,(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_PXADDS_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_POST_INCREMENT_4, "pxadds-d-indirect-with-post-increment-2-s1-indirect-with-post-increment-4", "pxadds", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds ${d-i4-2}(${d-An})++,(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_PXADDS_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_POST_INCREMENT_4, "pxadds-d-indirect-with-pre-increment-2-s1-indirect-with-post-increment-4", "pxadds", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds ${d-direct-addr},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_PXADDS_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_4, "pxadds-d-direct-s1-indirect-with-pre-increment-4", "pxadds", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds #${d-imm8},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_PXADDS_D_IMMEDIATE_2_S1_INDIRECT_WITH_PRE_INCREMENT_4, "pxadds-d-immediate-2-s1-indirect-with-pre-increment-4", "pxadds", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds (${d-An},${d-r}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_PXADDS_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_PRE_INCREMENT_4, "pxadds-d-indirect-with-index-2-s1-indirect-with-pre-increment-4", "pxadds", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds ${d-imm7-2}(${d-An}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_PXADDS_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_PRE_INCREMENT_4, "pxadds-d-indirect-with-offset-2-s1-indirect-with-pre-increment-4", "pxadds", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds (${d-An}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_PXADDS_D_INDIRECT_2_S1_INDIRECT_WITH_PRE_INCREMENT_4, "pxadds-d-indirect-2-s1-indirect-with-pre-increment-4", "pxadds", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds (${d-An})${d-i4-2}++,${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_PXADDS_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_PRE_INCREMENT_4, "pxadds-d-indirect-with-post-increment-2-s1-indirect-with-pre-increment-4", "pxadds", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxadds ${d-i4-2}(${d-An})++,${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_PXADDS_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_PRE_INCREMENT_4, "pxadds-d-indirect-with-pre-increment-2-s1-indirect-with-pre-increment-4", "pxadds", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxhi.s ${Dn},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_PXHI_S_S1_DIRECT, "pxhi.s-s1-direct", "pxhi.s", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxhi.s ${Dn},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_PXHI_S_S1_IMMEDIATE, "pxhi.s-s1-immediate", "pxhi.s", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxhi.s ${Dn},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_PXHI_S_S1_INDIRECT_WITH_INDEX_4, "pxhi.s-s1-indirect-with-index-4", "pxhi.s", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxhi.s ${Dn},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXHI_S_S1_INDIRECT_WITH_OFFSET_4, "pxhi.s-s1-indirect-with-offset-4", "pxhi.s", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxhi.s ${Dn},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXHI_S_S1_INDIRECT_4, "pxhi.s-s1-indirect-4", "pxhi.s", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxhi.s ${Dn},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_PXHI_S_S1_INDIRECT_WITH_POST_INCREMENT_4, "pxhi.s-s1-indirect-with-post-increment-4", "pxhi.s", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxhi.s ${Dn},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_PXHI_S_S1_INDIRECT_WITH_PRE_INCREMENT_4, "pxhi.s-s1-indirect-with-pre-increment-4", "pxhi.s", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxhi ${Dn},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_PXHI_S1_DIRECT, "pxhi-s1-direct", "pxhi", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxhi ${Dn},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_PXHI_S1_IMMEDIATE, "pxhi-s1-immediate", "pxhi", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxhi ${Dn},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_PXHI_S1_INDIRECT_WITH_INDEX_4, "pxhi-s1-indirect-with-index-4", "pxhi", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxhi ${Dn},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXHI_S1_INDIRECT_WITH_OFFSET_4, "pxhi-s1-indirect-with-offset-4", "pxhi", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxhi ${Dn},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXHI_S1_INDIRECT_4, "pxhi-s1-indirect-4", "pxhi", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxhi ${Dn},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_PXHI_S1_INDIRECT_WITH_POST_INCREMENT_4, "pxhi-s1-indirect-with-post-increment-4", "pxhi", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxhi ${Dn},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_PXHI_S1_INDIRECT_WITH_PRE_INCREMENT_4, "pxhi-s1-indirect-with-pre-increment-4", "pxhi", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi.s ${d-direct-addr},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_PXVI_S_D_DIRECT_S1_DIRECT, "pxvi.s-d-direct-s1-direct", "pxvi.s", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi.s #${d-imm8},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_PXVI_S_D_IMMEDIATE_4_S1_DIRECT, "pxvi.s-d-immediate-4-s1-direct", "pxvi.s", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi.s (${d-An},${d-r}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_PXVI_S_D_INDIRECT_WITH_INDEX_4_S1_DIRECT, "pxvi.s-d-indirect-with-index-4-s1-direct", "pxvi.s", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi.s ${d-imm7-4}(${d-An}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_PXVI_S_D_INDIRECT_WITH_OFFSET_4_S1_DIRECT, "pxvi.s-d-indirect-with-offset-4-s1-direct", "pxvi.s", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi.s (${d-An}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_PXVI_S_D_INDIRECT_4_S1_DIRECT, "pxvi.s-d-indirect-4-s1-direct", "pxvi.s", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi.s (${d-An})${d-i4-4}++,${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_PXVI_S_D_INDIRECT_WITH_POST_INCREMENT_4_S1_DIRECT, "pxvi.s-d-indirect-with-post-increment-4-s1-direct", "pxvi.s", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi.s ${d-i4-4}(${d-An})++,${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_PXVI_S_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_DIRECT, "pxvi.s-d-indirect-with-pre-increment-4-s1-direct", "pxvi.s", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi.s ${d-direct-addr},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_PXVI_S_D_DIRECT_S1_IMMEDIATE, "pxvi.s-d-direct-s1-immediate", "pxvi.s", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi.s #${d-imm8},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_PXVI_S_D_IMMEDIATE_4_S1_IMMEDIATE, "pxvi.s-d-immediate-4-s1-immediate", "pxvi.s", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi.s (${d-An},${d-r}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_PXVI_S_D_INDIRECT_WITH_INDEX_4_S1_IMMEDIATE, "pxvi.s-d-indirect-with-index-4-s1-immediate", "pxvi.s", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi.s ${d-imm7-4}(${d-An}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_PXVI_S_D_INDIRECT_WITH_OFFSET_4_S1_IMMEDIATE, "pxvi.s-d-indirect-with-offset-4-s1-immediate", "pxvi.s", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi.s (${d-An}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_PXVI_S_D_INDIRECT_4_S1_IMMEDIATE, "pxvi.s-d-indirect-4-s1-immediate", "pxvi.s", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi.s (${d-An})${d-i4-4}++,#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_PXVI_S_D_INDIRECT_WITH_POST_INCREMENT_4_S1_IMMEDIATE, "pxvi.s-d-indirect-with-post-increment-4-s1-immediate", "pxvi.s", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi.s ${d-i4-4}(${d-An})++,#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_PXVI_S_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_IMMEDIATE, "pxvi.s-d-indirect-with-pre-increment-4-s1-immediate", "pxvi.s", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi.s ${d-direct-addr},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_PXVI_S_D_DIRECT_S1_INDIRECT_WITH_INDEX_4, "pxvi.s-d-direct-s1-indirect-with-index-4", "pxvi.s", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi.s #${d-imm8},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_PXVI_S_D_IMMEDIATE_4_S1_INDIRECT_WITH_INDEX_4, "pxvi.s-d-immediate-4-s1-indirect-with-index-4", "pxvi.s", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi.s (${d-An},${d-r}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_PXVI_S_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_INDEX_4, "pxvi.s-d-indirect-with-index-4-s1-indirect-with-index-4", "pxvi.s", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi.s ${d-imm7-4}(${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_PXVI_S_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_INDEX_4, "pxvi.s-d-indirect-with-offset-4-s1-indirect-with-index-4", "pxvi.s", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi.s (${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_PXVI_S_D_INDIRECT_4_S1_INDIRECT_WITH_INDEX_4, "pxvi.s-d-indirect-4-s1-indirect-with-index-4", "pxvi.s", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi.s (${d-An})${d-i4-4}++,(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_PXVI_S_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, "pxvi.s-d-indirect-with-post-increment-4-s1-indirect-with-index-4", "pxvi.s", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi.s ${d-i4-4}(${d-An})++,(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_PXVI_S_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, "pxvi.s-d-indirect-with-pre-increment-4-s1-indirect-with-index-4", "pxvi.s", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi.s ${d-direct-addr},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXVI_S_D_DIRECT_S1_INDIRECT_WITH_OFFSET_4, "pxvi.s-d-direct-s1-indirect-with-offset-4", "pxvi.s", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi.s #${d-imm8},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXVI_S_D_IMMEDIATE_4_S1_INDIRECT_WITH_OFFSET_4, "pxvi.s-d-immediate-4-s1-indirect-with-offset-4", "pxvi.s", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi.s (${d-An},${d-r}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXVI_S_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_OFFSET_4, "pxvi.s-d-indirect-with-index-4-s1-indirect-with-offset-4", "pxvi.s", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi.s ${d-imm7-4}(${d-An}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXVI_S_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_OFFSET_4, "pxvi.s-d-indirect-with-offset-4-s1-indirect-with-offset-4", "pxvi.s", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi.s (${d-An}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXVI_S_D_INDIRECT_4_S1_INDIRECT_WITH_OFFSET_4, "pxvi.s-d-indirect-4-s1-indirect-with-offset-4", "pxvi.s", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi.s (${d-An})${d-i4-4}++,${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXVI_S_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, "pxvi.s-d-indirect-with-post-increment-4-s1-indirect-with-offset-4", "pxvi.s", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi.s ${d-i4-4}(${d-An})++,${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXVI_S_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, "pxvi.s-d-indirect-with-pre-increment-4-s1-indirect-with-offset-4", "pxvi.s", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi.s ${d-direct-addr},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXVI_S_D_DIRECT_S1_INDIRECT_4, "pxvi.s-d-direct-s1-indirect-4", "pxvi.s", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi.s #${d-imm8},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXVI_S_D_IMMEDIATE_4_S1_INDIRECT_4, "pxvi.s-d-immediate-4-s1-indirect-4", "pxvi.s", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi.s (${d-An},${d-r}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXVI_S_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_4, "pxvi.s-d-indirect-with-index-4-s1-indirect-4", "pxvi.s", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi.s ${d-imm7-4}(${d-An}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXVI_S_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_4, "pxvi.s-d-indirect-with-offset-4-s1-indirect-4", "pxvi.s", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi.s (${d-An}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXVI_S_D_INDIRECT_4_S1_INDIRECT_4, "pxvi.s-d-indirect-4-s1-indirect-4", "pxvi.s", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi.s (${d-An})${d-i4-4}++,(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXVI_S_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_4, "pxvi.s-d-indirect-with-post-increment-4-s1-indirect-4", "pxvi.s", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi.s ${d-i4-4}(${d-An})++,(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXVI_S_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_4, "pxvi.s-d-indirect-with-pre-increment-4-s1-indirect-4", "pxvi.s", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi.s ${d-direct-addr},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_PXVI_S_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_4, "pxvi.s-d-direct-s1-indirect-with-post-increment-4", "pxvi.s", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi.s #${d-imm8},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_PXVI_S_D_IMMEDIATE_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "pxvi.s-d-immediate-4-s1-indirect-with-post-increment-4", "pxvi.s", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi.s (${d-An},${d-r}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_PXVI_S_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "pxvi.s-d-indirect-with-index-4-s1-indirect-with-post-increment-4", "pxvi.s", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi.s ${d-imm7-4}(${d-An}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_PXVI_S_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "pxvi.s-d-indirect-with-offset-4-s1-indirect-with-post-increment-4", "pxvi.s", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi.s (${d-An}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_PXVI_S_D_INDIRECT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "pxvi.s-d-indirect-4-s1-indirect-with-post-increment-4", "pxvi.s", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi.s (${d-An})${d-i4-4}++,(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_PXVI_S_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "pxvi.s-d-indirect-with-post-increment-4-s1-indirect-with-post-increment-4", "pxvi.s", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi.s ${d-i4-4}(${d-An})++,(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_PXVI_S_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "pxvi.s-d-indirect-with-pre-increment-4-s1-indirect-with-post-increment-4", "pxvi.s", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi.s ${d-direct-addr},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_PXVI_S_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_4, "pxvi.s-d-direct-s1-indirect-with-pre-increment-4", "pxvi.s", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi.s #${d-imm8},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_PXVI_S_D_IMMEDIATE_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "pxvi.s-d-immediate-4-s1-indirect-with-pre-increment-4", "pxvi.s", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi.s (${d-An},${d-r}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_PXVI_S_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "pxvi.s-d-indirect-with-index-4-s1-indirect-with-pre-increment-4", "pxvi.s", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi.s ${d-imm7-4}(${d-An}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_PXVI_S_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "pxvi.s-d-indirect-with-offset-4-s1-indirect-with-pre-increment-4", "pxvi.s", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi.s (${d-An}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_PXVI_S_D_INDIRECT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "pxvi.s-d-indirect-4-s1-indirect-with-pre-increment-4", "pxvi.s", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi.s (${d-An})${d-i4-4}++,${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_PXVI_S_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "pxvi.s-d-indirect-with-post-increment-4-s1-indirect-with-pre-increment-4", "pxvi.s", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi.s ${d-i4-4}(${d-An})++,${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_PXVI_S_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "pxvi.s-d-indirect-with-pre-increment-4-s1-indirect-with-pre-increment-4", "pxvi.s", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi ${d-direct-addr},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_PXVI_D_DIRECT_S1_DIRECT, "pxvi-d-direct-s1-direct", "pxvi", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi #${d-imm8},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_PXVI_D_IMMEDIATE_4_S1_DIRECT, "pxvi-d-immediate-4-s1-direct", "pxvi", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi (${d-An},${d-r}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_PXVI_D_INDIRECT_WITH_INDEX_4_S1_DIRECT, "pxvi-d-indirect-with-index-4-s1-direct", "pxvi", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi ${d-imm7-4}(${d-An}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_PXVI_D_INDIRECT_WITH_OFFSET_4_S1_DIRECT, "pxvi-d-indirect-with-offset-4-s1-direct", "pxvi", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi (${d-An}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_PXVI_D_INDIRECT_4_S1_DIRECT, "pxvi-d-indirect-4-s1-direct", "pxvi", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi (${d-An})${d-i4-4}++,${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_PXVI_D_INDIRECT_WITH_POST_INCREMENT_4_S1_DIRECT, "pxvi-d-indirect-with-post-increment-4-s1-direct", "pxvi", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi ${d-i4-4}(${d-An})++,${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_PXVI_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_DIRECT, "pxvi-d-indirect-with-pre-increment-4-s1-direct", "pxvi", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi ${d-direct-addr},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_PXVI_D_DIRECT_S1_IMMEDIATE, "pxvi-d-direct-s1-immediate", "pxvi", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi #${d-imm8},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_PXVI_D_IMMEDIATE_4_S1_IMMEDIATE, "pxvi-d-immediate-4-s1-immediate", "pxvi", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi (${d-An},${d-r}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_PXVI_D_INDIRECT_WITH_INDEX_4_S1_IMMEDIATE, "pxvi-d-indirect-with-index-4-s1-immediate", "pxvi", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi ${d-imm7-4}(${d-An}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_PXVI_D_INDIRECT_WITH_OFFSET_4_S1_IMMEDIATE, "pxvi-d-indirect-with-offset-4-s1-immediate", "pxvi", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi (${d-An}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_PXVI_D_INDIRECT_4_S1_IMMEDIATE, "pxvi-d-indirect-4-s1-immediate", "pxvi", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi (${d-An})${d-i4-4}++,#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_PXVI_D_INDIRECT_WITH_POST_INCREMENT_4_S1_IMMEDIATE, "pxvi-d-indirect-with-post-increment-4-s1-immediate", "pxvi", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi ${d-i4-4}(${d-An})++,#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_PXVI_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_IMMEDIATE, "pxvi-d-indirect-with-pre-increment-4-s1-immediate", "pxvi", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi ${d-direct-addr},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_PXVI_D_DIRECT_S1_INDIRECT_WITH_INDEX_4, "pxvi-d-direct-s1-indirect-with-index-4", "pxvi", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi #${d-imm8},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_PXVI_D_IMMEDIATE_4_S1_INDIRECT_WITH_INDEX_4, "pxvi-d-immediate-4-s1-indirect-with-index-4", "pxvi", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi (${d-An},${d-r}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_PXVI_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_INDEX_4, "pxvi-d-indirect-with-index-4-s1-indirect-with-index-4", "pxvi", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi ${d-imm7-4}(${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_PXVI_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_INDEX_4, "pxvi-d-indirect-with-offset-4-s1-indirect-with-index-4", "pxvi", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi (${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_PXVI_D_INDIRECT_4_S1_INDIRECT_WITH_INDEX_4, "pxvi-d-indirect-4-s1-indirect-with-index-4", "pxvi", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi (${d-An})${d-i4-4}++,(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_PXVI_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, "pxvi-d-indirect-with-post-increment-4-s1-indirect-with-index-4", "pxvi", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi ${d-i4-4}(${d-An})++,(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_PXVI_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, "pxvi-d-indirect-with-pre-increment-4-s1-indirect-with-index-4", "pxvi", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi ${d-direct-addr},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXVI_D_DIRECT_S1_INDIRECT_WITH_OFFSET_4, "pxvi-d-direct-s1-indirect-with-offset-4", "pxvi", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi #${d-imm8},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXVI_D_IMMEDIATE_4_S1_INDIRECT_WITH_OFFSET_4, "pxvi-d-immediate-4-s1-indirect-with-offset-4", "pxvi", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi (${d-An},${d-r}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXVI_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_OFFSET_4, "pxvi-d-indirect-with-index-4-s1-indirect-with-offset-4", "pxvi", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi ${d-imm7-4}(${d-An}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXVI_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_OFFSET_4, "pxvi-d-indirect-with-offset-4-s1-indirect-with-offset-4", "pxvi", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi (${d-An}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXVI_D_INDIRECT_4_S1_INDIRECT_WITH_OFFSET_4, "pxvi-d-indirect-4-s1-indirect-with-offset-4", "pxvi", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi (${d-An})${d-i4-4}++,${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXVI_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, "pxvi-d-indirect-with-post-increment-4-s1-indirect-with-offset-4", "pxvi", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi ${d-i4-4}(${d-An})++,${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXVI_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, "pxvi-d-indirect-with-pre-increment-4-s1-indirect-with-offset-4", "pxvi", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi ${d-direct-addr},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXVI_D_DIRECT_S1_INDIRECT_4, "pxvi-d-direct-s1-indirect-4", "pxvi", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi #${d-imm8},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXVI_D_IMMEDIATE_4_S1_INDIRECT_4, "pxvi-d-immediate-4-s1-indirect-4", "pxvi", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi (${d-An},${d-r}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXVI_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_4, "pxvi-d-indirect-with-index-4-s1-indirect-4", "pxvi", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi ${d-imm7-4}(${d-An}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXVI_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_4, "pxvi-d-indirect-with-offset-4-s1-indirect-4", "pxvi", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi (${d-An}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXVI_D_INDIRECT_4_S1_INDIRECT_4, "pxvi-d-indirect-4-s1-indirect-4", "pxvi", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi (${d-An})${d-i4-4}++,(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXVI_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_4, "pxvi-d-indirect-with-post-increment-4-s1-indirect-4", "pxvi", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi ${d-i4-4}(${d-An})++,(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXVI_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_4, "pxvi-d-indirect-with-pre-increment-4-s1-indirect-4", "pxvi", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi ${d-direct-addr},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_PXVI_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_4, "pxvi-d-direct-s1-indirect-with-post-increment-4", "pxvi", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi #${d-imm8},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_PXVI_D_IMMEDIATE_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "pxvi-d-immediate-4-s1-indirect-with-post-increment-4", "pxvi", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi (${d-An},${d-r}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_PXVI_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "pxvi-d-indirect-with-index-4-s1-indirect-with-post-increment-4", "pxvi", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi ${d-imm7-4}(${d-An}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_PXVI_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "pxvi-d-indirect-with-offset-4-s1-indirect-with-post-increment-4", "pxvi", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi (${d-An}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_PXVI_D_INDIRECT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "pxvi-d-indirect-4-s1-indirect-with-post-increment-4", "pxvi", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi (${d-An})${d-i4-4}++,(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_PXVI_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "pxvi-d-indirect-with-post-increment-4-s1-indirect-with-post-increment-4", "pxvi", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi ${d-i4-4}(${d-An})++,(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_PXVI_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "pxvi-d-indirect-with-pre-increment-4-s1-indirect-with-post-increment-4", "pxvi", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi ${d-direct-addr},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_PXVI_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_4, "pxvi-d-direct-s1-indirect-with-pre-increment-4", "pxvi", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi #${d-imm8},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_PXVI_D_IMMEDIATE_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "pxvi-d-immediate-4-s1-indirect-with-pre-increment-4", "pxvi", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi (${d-An},${d-r}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_PXVI_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "pxvi-d-indirect-with-index-4-s1-indirect-with-pre-increment-4", "pxvi", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi ${d-imm7-4}(${d-An}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_PXVI_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "pxvi-d-indirect-with-offset-4-s1-indirect-with-pre-increment-4", "pxvi", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi (${d-An}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_PXVI_D_INDIRECT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "pxvi-d-indirect-4-s1-indirect-with-pre-increment-4", "pxvi", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi (${d-An})${d-i4-4}++,${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_PXVI_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "pxvi-d-indirect-with-post-increment-4-s1-indirect-with-pre-increment-4", "pxvi", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxvi ${d-i4-4}(${d-An})++,${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_PXVI_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "pxvi-d-indirect-with-pre-increment-4-s1-indirect-with-pre-increment-4", "pxvi", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend.t ${d-direct-addr},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_T_D_DIRECT_S1_DIRECT, "pxblend.t-d-direct-s1-direct", "pxblend.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend.t #${d-imm8},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_T_D_IMMEDIATE_4_S1_DIRECT, "pxblend.t-d-immediate-4-s1-direct", "pxblend.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend.t (${d-An},${d-r}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_T_D_INDIRECT_WITH_INDEX_4_S1_DIRECT, "pxblend.t-d-indirect-with-index-4-s1-direct", "pxblend.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend.t ${d-imm7-4}(${d-An}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_T_D_INDIRECT_WITH_OFFSET_4_S1_DIRECT, "pxblend.t-d-indirect-with-offset-4-s1-direct", "pxblend.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend.t (${d-An}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_T_D_INDIRECT_4_S1_DIRECT, "pxblend.t-d-indirect-4-s1-direct", "pxblend.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend.t (${d-An})${d-i4-4}++,${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_T_D_INDIRECT_WITH_POST_INCREMENT_4_S1_DIRECT, "pxblend.t-d-indirect-with-post-increment-4-s1-direct", "pxblend.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend.t ${d-i4-4}(${d-An})++,${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_T_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_DIRECT, "pxblend.t-d-indirect-with-pre-increment-4-s1-direct", "pxblend.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend.t ${d-direct-addr},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_T_D_DIRECT_S1_IMMEDIATE, "pxblend.t-d-direct-s1-immediate", "pxblend.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend.t #${d-imm8},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_T_D_IMMEDIATE_4_S1_IMMEDIATE, "pxblend.t-d-immediate-4-s1-immediate", "pxblend.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend.t (${d-An},${d-r}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_T_D_INDIRECT_WITH_INDEX_4_S1_IMMEDIATE, "pxblend.t-d-indirect-with-index-4-s1-immediate", "pxblend.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend.t ${d-imm7-4}(${d-An}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_T_D_INDIRECT_WITH_OFFSET_4_S1_IMMEDIATE, "pxblend.t-d-indirect-with-offset-4-s1-immediate", "pxblend.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend.t (${d-An}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_T_D_INDIRECT_4_S1_IMMEDIATE, "pxblend.t-d-indirect-4-s1-immediate", "pxblend.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend.t (${d-An})${d-i4-4}++,#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_T_D_INDIRECT_WITH_POST_INCREMENT_4_S1_IMMEDIATE, "pxblend.t-d-indirect-with-post-increment-4-s1-immediate", "pxblend.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend.t ${d-i4-4}(${d-An})++,#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_T_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_IMMEDIATE, "pxblend.t-d-indirect-with-pre-increment-4-s1-immediate", "pxblend.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend.t ${d-direct-addr},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_T_D_DIRECT_S1_INDIRECT_WITH_INDEX_4, "pxblend.t-d-direct-s1-indirect-with-index-4", "pxblend.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend.t #${d-imm8},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_T_D_IMMEDIATE_4_S1_INDIRECT_WITH_INDEX_4, "pxblend.t-d-immediate-4-s1-indirect-with-index-4", "pxblend.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend.t (${d-An},${d-r}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_T_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_INDEX_4, "pxblend.t-d-indirect-with-index-4-s1-indirect-with-index-4", "pxblend.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend.t ${d-imm7-4}(${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_T_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_INDEX_4, "pxblend.t-d-indirect-with-offset-4-s1-indirect-with-index-4", "pxblend.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend.t (${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_T_D_INDIRECT_4_S1_INDIRECT_WITH_INDEX_4, "pxblend.t-d-indirect-4-s1-indirect-with-index-4", "pxblend.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend.t (${d-An})${d-i4-4}++,(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_T_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, "pxblend.t-d-indirect-with-post-increment-4-s1-indirect-with-index-4", "pxblend.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend.t ${d-i4-4}(${d-An})++,(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_T_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, "pxblend.t-d-indirect-with-pre-increment-4-s1-indirect-with-index-4", "pxblend.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend.t ${d-direct-addr},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_T_D_DIRECT_S1_INDIRECT_WITH_OFFSET_4, "pxblend.t-d-direct-s1-indirect-with-offset-4", "pxblend.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend.t #${d-imm8},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_T_D_IMMEDIATE_4_S1_INDIRECT_WITH_OFFSET_4, "pxblend.t-d-immediate-4-s1-indirect-with-offset-4", "pxblend.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend.t (${d-An},${d-r}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_T_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_OFFSET_4, "pxblend.t-d-indirect-with-index-4-s1-indirect-with-offset-4", "pxblend.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend.t ${d-imm7-4}(${d-An}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_T_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_OFFSET_4, "pxblend.t-d-indirect-with-offset-4-s1-indirect-with-offset-4", "pxblend.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend.t (${d-An}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_T_D_INDIRECT_4_S1_INDIRECT_WITH_OFFSET_4, "pxblend.t-d-indirect-4-s1-indirect-with-offset-4", "pxblend.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend.t (${d-An})${d-i4-4}++,${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_T_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, "pxblend.t-d-indirect-with-post-increment-4-s1-indirect-with-offset-4", "pxblend.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend.t ${d-i4-4}(${d-An})++,${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_T_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, "pxblend.t-d-indirect-with-pre-increment-4-s1-indirect-with-offset-4", "pxblend.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend.t ${d-direct-addr},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_T_D_DIRECT_S1_INDIRECT_4, "pxblend.t-d-direct-s1-indirect-4", "pxblend.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend.t #${d-imm8},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_T_D_IMMEDIATE_4_S1_INDIRECT_4, "pxblend.t-d-immediate-4-s1-indirect-4", "pxblend.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend.t (${d-An},${d-r}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_T_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_4, "pxblend.t-d-indirect-with-index-4-s1-indirect-4", "pxblend.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend.t ${d-imm7-4}(${d-An}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_T_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_4, "pxblend.t-d-indirect-with-offset-4-s1-indirect-4", "pxblend.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend.t (${d-An}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_T_D_INDIRECT_4_S1_INDIRECT_4, "pxblend.t-d-indirect-4-s1-indirect-4", "pxblend.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend.t (${d-An})${d-i4-4}++,(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_T_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_4, "pxblend.t-d-indirect-with-post-increment-4-s1-indirect-4", "pxblend.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend.t ${d-i4-4}(${d-An})++,(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_T_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_4, "pxblend.t-d-indirect-with-pre-increment-4-s1-indirect-4", "pxblend.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend.t ${d-direct-addr},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_T_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_4, "pxblend.t-d-direct-s1-indirect-with-post-increment-4", "pxblend.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend.t #${d-imm8},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_T_D_IMMEDIATE_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "pxblend.t-d-immediate-4-s1-indirect-with-post-increment-4", "pxblend.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend.t (${d-An},${d-r}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_T_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "pxblend.t-d-indirect-with-index-4-s1-indirect-with-post-increment-4", "pxblend.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend.t ${d-imm7-4}(${d-An}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_T_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "pxblend.t-d-indirect-with-offset-4-s1-indirect-with-post-increment-4", "pxblend.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend.t (${d-An}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_T_D_INDIRECT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "pxblend.t-d-indirect-4-s1-indirect-with-post-increment-4", "pxblend.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend.t (${d-An})${d-i4-4}++,(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_T_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "pxblend.t-d-indirect-with-post-increment-4-s1-indirect-with-post-increment-4", "pxblend.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend.t ${d-i4-4}(${d-An})++,(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_T_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "pxblend.t-d-indirect-with-pre-increment-4-s1-indirect-with-post-increment-4", "pxblend.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend.t ${d-direct-addr},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_T_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_4, "pxblend.t-d-direct-s1-indirect-with-pre-increment-4", "pxblend.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend.t #${d-imm8},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_T_D_IMMEDIATE_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "pxblend.t-d-immediate-4-s1-indirect-with-pre-increment-4", "pxblend.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend.t (${d-An},${d-r}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_T_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "pxblend.t-d-indirect-with-index-4-s1-indirect-with-pre-increment-4", "pxblend.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend.t ${d-imm7-4}(${d-An}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_T_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "pxblend.t-d-indirect-with-offset-4-s1-indirect-with-pre-increment-4", "pxblend.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend.t (${d-An}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_T_D_INDIRECT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "pxblend.t-d-indirect-4-s1-indirect-with-pre-increment-4", "pxblend.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend.t (${d-An})${d-i4-4}++,${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_T_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "pxblend.t-d-indirect-with-post-increment-4-s1-indirect-with-pre-increment-4", "pxblend.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend.t ${d-i4-4}(${d-An})++,${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_T_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "pxblend.t-d-indirect-with-pre-increment-4-s1-indirect-with-pre-increment-4", "pxblend.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend ${d-direct-addr},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_D_DIRECT_S1_DIRECT, "pxblend-d-direct-s1-direct", "pxblend", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend #${d-imm8},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_D_IMMEDIATE_4_S1_DIRECT, "pxblend-d-immediate-4-s1-direct", "pxblend", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend (${d-An},${d-r}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_D_INDIRECT_WITH_INDEX_4_S1_DIRECT, "pxblend-d-indirect-with-index-4-s1-direct", "pxblend", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend ${d-imm7-4}(${d-An}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_D_INDIRECT_WITH_OFFSET_4_S1_DIRECT, "pxblend-d-indirect-with-offset-4-s1-direct", "pxblend", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend (${d-An}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_D_INDIRECT_4_S1_DIRECT, "pxblend-d-indirect-4-s1-direct", "pxblend", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend (${d-An})${d-i4-4}++,${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_D_INDIRECT_WITH_POST_INCREMENT_4_S1_DIRECT, "pxblend-d-indirect-with-post-increment-4-s1-direct", "pxblend", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend ${d-i4-4}(${d-An})++,${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_DIRECT, "pxblend-d-indirect-with-pre-increment-4-s1-direct", "pxblend", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend ${d-direct-addr},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_D_DIRECT_S1_IMMEDIATE, "pxblend-d-direct-s1-immediate", "pxblend", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend #${d-imm8},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_D_IMMEDIATE_4_S1_IMMEDIATE, "pxblend-d-immediate-4-s1-immediate", "pxblend", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend (${d-An},${d-r}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_D_INDIRECT_WITH_INDEX_4_S1_IMMEDIATE, "pxblend-d-indirect-with-index-4-s1-immediate", "pxblend", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend ${d-imm7-4}(${d-An}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_D_INDIRECT_WITH_OFFSET_4_S1_IMMEDIATE, "pxblend-d-indirect-with-offset-4-s1-immediate", "pxblend", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend (${d-An}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_D_INDIRECT_4_S1_IMMEDIATE, "pxblend-d-indirect-4-s1-immediate", "pxblend", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend (${d-An})${d-i4-4}++,#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_D_INDIRECT_WITH_POST_INCREMENT_4_S1_IMMEDIATE, "pxblend-d-indirect-with-post-increment-4-s1-immediate", "pxblend", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend ${d-i4-4}(${d-An})++,#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_IMMEDIATE, "pxblend-d-indirect-with-pre-increment-4-s1-immediate", "pxblend", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend ${d-direct-addr},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_D_DIRECT_S1_INDIRECT_WITH_INDEX_4, "pxblend-d-direct-s1-indirect-with-index-4", "pxblend", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend #${d-imm8},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_D_IMMEDIATE_4_S1_INDIRECT_WITH_INDEX_4, "pxblend-d-immediate-4-s1-indirect-with-index-4", "pxblend", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend (${d-An},${d-r}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_INDEX_4, "pxblend-d-indirect-with-index-4-s1-indirect-with-index-4", "pxblend", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend ${d-imm7-4}(${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_INDEX_4, "pxblend-d-indirect-with-offset-4-s1-indirect-with-index-4", "pxblend", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend (${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_D_INDIRECT_4_S1_INDIRECT_WITH_INDEX_4, "pxblend-d-indirect-4-s1-indirect-with-index-4", "pxblend", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend (${d-An})${d-i4-4}++,(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, "pxblend-d-indirect-with-post-increment-4-s1-indirect-with-index-4", "pxblend", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend ${d-i4-4}(${d-An})++,(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, "pxblend-d-indirect-with-pre-increment-4-s1-indirect-with-index-4", "pxblend", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend ${d-direct-addr},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_D_DIRECT_S1_INDIRECT_WITH_OFFSET_4, "pxblend-d-direct-s1-indirect-with-offset-4", "pxblend", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend #${d-imm8},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_D_IMMEDIATE_4_S1_INDIRECT_WITH_OFFSET_4, "pxblend-d-immediate-4-s1-indirect-with-offset-4", "pxblend", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend (${d-An},${d-r}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_OFFSET_4, "pxblend-d-indirect-with-index-4-s1-indirect-with-offset-4", "pxblend", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend ${d-imm7-4}(${d-An}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_OFFSET_4, "pxblend-d-indirect-with-offset-4-s1-indirect-with-offset-4", "pxblend", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend (${d-An}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_D_INDIRECT_4_S1_INDIRECT_WITH_OFFSET_4, "pxblend-d-indirect-4-s1-indirect-with-offset-4", "pxblend", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend (${d-An})${d-i4-4}++,${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, "pxblend-d-indirect-with-post-increment-4-s1-indirect-with-offset-4", "pxblend", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend ${d-i4-4}(${d-An})++,${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, "pxblend-d-indirect-with-pre-increment-4-s1-indirect-with-offset-4", "pxblend", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend ${d-direct-addr},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_D_DIRECT_S1_INDIRECT_4, "pxblend-d-direct-s1-indirect-4", "pxblend", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend #${d-imm8},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_D_IMMEDIATE_4_S1_INDIRECT_4, "pxblend-d-immediate-4-s1-indirect-4", "pxblend", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend (${d-An},${d-r}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_4, "pxblend-d-indirect-with-index-4-s1-indirect-4", "pxblend", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend ${d-imm7-4}(${d-An}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_4, "pxblend-d-indirect-with-offset-4-s1-indirect-4", "pxblend", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend (${d-An}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_D_INDIRECT_4_S1_INDIRECT_4, "pxblend-d-indirect-4-s1-indirect-4", "pxblend", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend (${d-An})${d-i4-4}++,(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_4, "pxblend-d-indirect-with-post-increment-4-s1-indirect-4", "pxblend", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend ${d-i4-4}(${d-An})++,(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_4, "pxblend-d-indirect-with-pre-increment-4-s1-indirect-4", "pxblend", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend ${d-direct-addr},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_4, "pxblend-d-direct-s1-indirect-with-post-increment-4", "pxblend", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend #${d-imm8},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_D_IMMEDIATE_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "pxblend-d-immediate-4-s1-indirect-with-post-increment-4", "pxblend", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend (${d-An},${d-r}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "pxblend-d-indirect-with-index-4-s1-indirect-with-post-increment-4", "pxblend", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend ${d-imm7-4}(${d-An}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "pxblend-d-indirect-with-offset-4-s1-indirect-with-post-increment-4", "pxblend", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend (${d-An}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_D_INDIRECT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "pxblend-d-indirect-4-s1-indirect-with-post-increment-4", "pxblend", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend (${d-An})${d-i4-4}++,(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "pxblend-d-indirect-with-post-increment-4-s1-indirect-with-post-increment-4", "pxblend", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend ${d-i4-4}(${d-An})++,(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "pxblend-d-indirect-with-pre-increment-4-s1-indirect-with-post-increment-4", "pxblend", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend ${d-direct-addr},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_4, "pxblend-d-direct-s1-indirect-with-pre-increment-4", "pxblend", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend #${d-imm8},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_D_IMMEDIATE_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "pxblend-d-immediate-4-s1-indirect-with-pre-increment-4", "pxblend", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend (${d-An},${d-r}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "pxblend-d-indirect-with-index-4-s1-indirect-with-pre-increment-4", "pxblend", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend ${d-imm7-4}(${d-An}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "pxblend-d-indirect-with-offset-4-s1-indirect-with-pre-increment-4", "pxblend", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend (${d-An}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_D_INDIRECT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "pxblend-d-indirect-4-s1-indirect-with-pre-increment-4", "pxblend", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend (${d-An})${d-i4-4}++,${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "pxblend-d-indirect-with-post-increment-4-s1-indirect-with-pre-increment-4", "pxblend", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxblend ${d-i4-4}(${d-An})++,${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_PXBLEND_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "pxblend-d-indirect-with-pre-increment-4-s1-indirect-with-pre-increment-4", "pxblend", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv.t ${d-direct-addr},${s1-direct-addr} */
+  {
+    UBICOM32_INSN_PXCNV_T_D_DIRECT_S1_DIRECT, "pxcnv.t-d-direct-s1-direct", "pxcnv.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv.t #${d-imm8},${s1-direct-addr} */
+  {
+    UBICOM32_INSN_PXCNV_T_D_IMMEDIATE_2_S1_DIRECT, "pxcnv.t-d-immediate-2-s1-direct", "pxcnv.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv.t (${d-An},${d-r}),${s1-direct-addr} */
+  {
+    UBICOM32_INSN_PXCNV_T_D_INDIRECT_WITH_INDEX_2_S1_DIRECT, "pxcnv.t-d-indirect-with-index-2-s1-direct", "pxcnv.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv.t ${d-imm7-2}(${d-An}),${s1-direct-addr} */
+  {
+    UBICOM32_INSN_PXCNV_T_D_INDIRECT_WITH_OFFSET_2_S1_DIRECT, "pxcnv.t-d-indirect-with-offset-2-s1-direct", "pxcnv.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv.t (${d-An}),${s1-direct-addr} */
+  {
+    UBICOM32_INSN_PXCNV_T_D_INDIRECT_2_S1_DIRECT, "pxcnv.t-d-indirect-2-s1-direct", "pxcnv.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv.t (${d-An})${d-i4-2}++,${s1-direct-addr} */
+  {
+    UBICOM32_INSN_PXCNV_T_D_INDIRECT_WITH_POST_INCREMENT_2_S1_DIRECT, "pxcnv.t-d-indirect-with-post-increment-2-s1-direct", "pxcnv.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv.t ${d-i4-2}(${d-An})++,${s1-direct-addr} */
+  {
+    UBICOM32_INSN_PXCNV_T_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_DIRECT, "pxcnv.t-d-indirect-with-pre-increment-2-s1-direct", "pxcnv.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv.t ${d-direct-addr},#${s1-imm8} */
+  {
+    UBICOM32_INSN_PXCNV_T_D_DIRECT_S1_IMMEDIATE, "pxcnv.t-d-direct-s1-immediate", "pxcnv.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv.t #${d-imm8},#${s1-imm8} */
+  {
+    UBICOM32_INSN_PXCNV_T_D_IMMEDIATE_2_S1_IMMEDIATE, "pxcnv.t-d-immediate-2-s1-immediate", "pxcnv.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv.t (${d-An},${d-r}),#${s1-imm8} */
+  {
+    UBICOM32_INSN_PXCNV_T_D_INDIRECT_WITH_INDEX_2_S1_IMMEDIATE, "pxcnv.t-d-indirect-with-index-2-s1-immediate", "pxcnv.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv.t ${d-imm7-2}(${d-An}),#${s1-imm8} */
+  {
+    UBICOM32_INSN_PXCNV_T_D_INDIRECT_WITH_OFFSET_2_S1_IMMEDIATE, "pxcnv.t-d-indirect-with-offset-2-s1-immediate", "pxcnv.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv.t (${d-An}),#${s1-imm8} */
+  {
+    UBICOM32_INSN_PXCNV_T_D_INDIRECT_2_S1_IMMEDIATE, "pxcnv.t-d-indirect-2-s1-immediate", "pxcnv.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv.t (${d-An})${d-i4-2}++,#${s1-imm8} */
+  {
+    UBICOM32_INSN_PXCNV_T_D_INDIRECT_WITH_POST_INCREMENT_2_S1_IMMEDIATE, "pxcnv.t-d-indirect-with-post-increment-2-s1-immediate", "pxcnv.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv.t ${d-i4-2}(${d-An})++,#${s1-imm8} */
+  {
+    UBICOM32_INSN_PXCNV_T_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_IMMEDIATE, "pxcnv.t-d-indirect-with-pre-increment-2-s1-immediate", "pxcnv.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv.t ${d-direct-addr},(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_PXCNV_T_D_DIRECT_S1_INDIRECT_WITH_INDEX_4, "pxcnv.t-d-direct-s1-indirect-with-index-4", "pxcnv.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv.t #${d-imm8},(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_PXCNV_T_D_IMMEDIATE_2_S1_INDIRECT_WITH_INDEX_4, "pxcnv.t-d-immediate-2-s1-indirect-with-index-4", "pxcnv.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv.t (${d-An},${d-r}),(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_PXCNV_T_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_INDEX_4, "pxcnv.t-d-indirect-with-index-2-s1-indirect-with-index-4", "pxcnv.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv.t ${d-imm7-2}(${d-An}),(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_PXCNV_T_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_INDEX_4, "pxcnv.t-d-indirect-with-offset-2-s1-indirect-with-index-4", "pxcnv.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv.t (${d-An}),(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_PXCNV_T_D_INDIRECT_2_S1_INDIRECT_WITH_INDEX_4, "pxcnv.t-d-indirect-2-s1-indirect-with-index-4", "pxcnv.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv.t (${d-An})${d-i4-2}++,(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_PXCNV_T_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_INDEX_4, "pxcnv.t-d-indirect-with-post-increment-2-s1-indirect-with-index-4", "pxcnv.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv.t ${d-i4-2}(${d-An})++,(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_PXCNV_T_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_INDEX_4, "pxcnv.t-d-indirect-with-pre-increment-2-s1-indirect-with-index-4", "pxcnv.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv.t ${d-direct-addr},${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_PXCNV_T_D_DIRECT_S1_INDIRECT_WITH_OFFSET_4, "pxcnv.t-d-direct-s1-indirect-with-offset-4", "pxcnv.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv.t #${d-imm8},${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_PXCNV_T_D_IMMEDIATE_2_S1_INDIRECT_WITH_OFFSET_4, "pxcnv.t-d-immediate-2-s1-indirect-with-offset-4", "pxcnv.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv.t (${d-An},${d-r}),${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_PXCNV_T_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_OFFSET_4, "pxcnv.t-d-indirect-with-index-2-s1-indirect-with-offset-4", "pxcnv.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv.t ${d-imm7-2}(${d-An}),${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_PXCNV_T_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_OFFSET_4, "pxcnv.t-d-indirect-with-offset-2-s1-indirect-with-offset-4", "pxcnv.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv.t (${d-An}),${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_PXCNV_T_D_INDIRECT_2_S1_INDIRECT_WITH_OFFSET_4, "pxcnv.t-d-indirect-2-s1-indirect-with-offset-4", "pxcnv.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv.t (${d-An})${d-i4-2}++,${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_PXCNV_T_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_OFFSET_4, "pxcnv.t-d-indirect-with-post-increment-2-s1-indirect-with-offset-4", "pxcnv.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv.t ${d-i4-2}(${d-An})++,${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_PXCNV_T_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_OFFSET_4, "pxcnv.t-d-indirect-with-pre-increment-2-s1-indirect-with-offset-4", "pxcnv.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv.t ${d-direct-addr},(${s1-An}) */
+  {
+    UBICOM32_INSN_PXCNV_T_D_DIRECT_S1_INDIRECT_4, "pxcnv.t-d-direct-s1-indirect-4", "pxcnv.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv.t #${d-imm8},(${s1-An}) */
+  {
+    UBICOM32_INSN_PXCNV_T_D_IMMEDIATE_2_S1_INDIRECT_4, "pxcnv.t-d-immediate-2-s1-indirect-4", "pxcnv.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv.t (${d-An},${d-r}),(${s1-An}) */
+  {
+    UBICOM32_INSN_PXCNV_T_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_4, "pxcnv.t-d-indirect-with-index-2-s1-indirect-4", "pxcnv.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv.t ${d-imm7-2}(${d-An}),(${s1-An}) */
+  {
+    UBICOM32_INSN_PXCNV_T_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_4, "pxcnv.t-d-indirect-with-offset-2-s1-indirect-4", "pxcnv.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv.t (${d-An}),(${s1-An}) */
+  {
+    UBICOM32_INSN_PXCNV_T_D_INDIRECT_2_S1_INDIRECT_4, "pxcnv.t-d-indirect-2-s1-indirect-4", "pxcnv.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv.t (${d-An})${d-i4-2}++,(${s1-An}) */
+  {
+    UBICOM32_INSN_PXCNV_T_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_4, "pxcnv.t-d-indirect-with-post-increment-2-s1-indirect-4", "pxcnv.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv.t ${d-i4-2}(${d-An})++,(${s1-An}) */
+  {
+    UBICOM32_INSN_PXCNV_T_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_4, "pxcnv.t-d-indirect-with-pre-increment-2-s1-indirect-4", "pxcnv.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv.t ${d-direct-addr},(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_PXCNV_T_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_4, "pxcnv.t-d-direct-s1-indirect-with-post-increment-4", "pxcnv.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv.t #${d-imm8},(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_PXCNV_T_D_IMMEDIATE_2_S1_INDIRECT_WITH_POST_INCREMENT_4, "pxcnv.t-d-immediate-2-s1-indirect-with-post-increment-4", "pxcnv.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv.t (${d-An},${d-r}),(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_PXCNV_T_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_POST_INCREMENT_4, "pxcnv.t-d-indirect-with-index-2-s1-indirect-with-post-increment-4", "pxcnv.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv.t ${d-imm7-2}(${d-An}),(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_PXCNV_T_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_POST_INCREMENT_4, "pxcnv.t-d-indirect-with-offset-2-s1-indirect-with-post-increment-4", "pxcnv.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv.t (${d-An}),(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_PXCNV_T_D_INDIRECT_2_S1_INDIRECT_WITH_POST_INCREMENT_4, "pxcnv.t-d-indirect-2-s1-indirect-with-post-increment-4", "pxcnv.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv.t (${d-An})${d-i4-2}++,(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_PXCNV_T_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_POST_INCREMENT_4, "pxcnv.t-d-indirect-with-post-increment-2-s1-indirect-with-post-increment-4", "pxcnv.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv.t ${d-i4-2}(${d-An})++,(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_PXCNV_T_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_POST_INCREMENT_4, "pxcnv.t-d-indirect-with-pre-increment-2-s1-indirect-with-post-increment-4", "pxcnv.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv.t ${d-direct-addr},${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_PXCNV_T_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_4, "pxcnv.t-d-direct-s1-indirect-with-pre-increment-4", "pxcnv.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv.t #${d-imm8},${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_PXCNV_T_D_IMMEDIATE_2_S1_INDIRECT_WITH_PRE_INCREMENT_4, "pxcnv.t-d-immediate-2-s1-indirect-with-pre-increment-4", "pxcnv.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv.t (${d-An},${d-r}),${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_PXCNV_T_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_PRE_INCREMENT_4, "pxcnv.t-d-indirect-with-index-2-s1-indirect-with-pre-increment-4", "pxcnv.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv.t ${d-imm7-2}(${d-An}),${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_PXCNV_T_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_PRE_INCREMENT_4, "pxcnv.t-d-indirect-with-offset-2-s1-indirect-with-pre-increment-4", "pxcnv.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv.t (${d-An}),${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_PXCNV_T_D_INDIRECT_2_S1_INDIRECT_WITH_PRE_INCREMENT_4, "pxcnv.t-d-indirect-2-s1-indirect-with-pre-increment-4", "pxcnv.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv.t (${d-An})${d-i4-2}++,${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_PXCNV_T_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_PRE_INCREMENT_4, "pxcnv.t-d-indirect-with-post-increment-2-s1-indirect-with-pre-increment-4", "pxcnv.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv.t ${d-i4-2}(${d-An})++,${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_PXCNV_T_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_PRE_INCREMENT_4, "pxcnv.t-d-indirect-with-pre-increment-2-s1-indirect-with-pre-increment-4", "pxcnv.t", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv ${d-direct-addr},${s1-direct-addr} */
+  {
+    UBICOM32_INSN_PXCNV_D_DIRECT_S1_DIRECT, "pxcnv-d-direct-s1-direct", "pxcnv", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv #${d-imm8},${s1-direct-addr} */
+  {
+    UBICOM32_INSN_PXCNV_D_IMMEDIATE_2_S1_DIRECT, "pxcnv-d-immediate-2-s1-direct", "pxcnv", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv (${d-An},${d-r}),${s1-direct-addr} */
+  {
+    UBICOM32_INSN_PXCNV_D_INDIRECT_WITH_INDEX_2_S1_DIRECT, "pxcnv-d-indirect-with-index-2-s1-direct", "pxcnv", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv ${d-imm7-2}(${d-An}),${s1-direct-addr} */
+  {
+    UBICOM32_INSN_PXCNV_D_INDIRECT_WITH_OFFSET_2_S1_DIRECT, "pxcnv-d-indirect-with-offset-2-s1-direct", "pxcnv", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv (${d-An}),${s1-direct-addr} */
+  {
+    UBICOM32_INSN_PXCNV_D_INDIRECT_2_S1_DIRECT, "pxcnv-d-indirect-2-s1-direct", "pxcnv", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv (${d-An})${d-i4-2}++,${s1-direct-addr} */
+  {
+    UBICOM32_INSN_PXCNV_D_INDIRECT_WITH_POST_INCREMENT_2_S1_DIRECT, "pxcnv-d-indirect-with-post-increment-2-s1-direct", "pxcnv", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv ${d-i4-2}(${d-An})++,${s1-direct-addr} */
+  {
+    UBICOM32_INSN_PXCNV_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_DIRECT, "pxcnv-d-indirect-with-pre-increment-2-s1-direct", "pxcnv", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv ${d-direct-addr},#${s1-imm8} */
+  {
+    UBICOM32_INSN_PXCNV_D_DIRECT_S1_IMMEDIATE, "pxcnv-d-direct-s1-immediate", "pxcnv", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv #${d-imm8},#${s1-imm8} */
+  {
+    UBICOM32_INSN_PXCNV_D_IMMEDIATE_2_S1_IMMEDIATE, "pxcnv-d-immediate-2-s1-immediate", "pxcnv", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv (${d-An},${d-r}),#${s1-imm8} */
+  {
+    UBICOM32_INSN_PXCNV_D_INDIRECT_WITH_INDEX_2_S1_IMMEDIATE, "pxcnv-d-indirect-with-index-2-s1-immediate", "pxcnv", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv ${d-imm7-2}(${d-An}),#${s1-imm8} */
+  {
+    UBICOM32_INSN_PXCNV_D_INDIRECT_WITH_OFFSET_2_S1_IMMEDIATE, "pxcnv-d-indirect-with-offset-2-s1-immediate", "pxcnv", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv (${d-An}),#${s1-imm8} */
+  {
+    UBICOM32_INSN_PXCNV_D_INDIRECT_2_S1_IMMEDIATE, "pxcnv-d-indirect-2-s1-immediate", "pxcnv", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv (${d-An})${d-i4-2}++,#${s1-imm8} */
+  {
+    UBICOM32_INSN_PXCNV_D_INDIRECT_WITH_POST_INCREMENT_2_S1_IMMEDIATE, "pxcnv-d-indirect-with-post-increment-2-s1-immediate", "pxcnv", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv ${d-i4-2}(${d-An})++,#${s1-imm8} */
+  {
+    UBICOM32_INSN_PXCNV_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_IMMEDIATE, "pxcnv-d-indirect-with-pre-increment-2-s1-immediate", "pxcnv", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv ${d-direct-addr},(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_PXCNV_D_DIRECT_S1_INDIRECT_WITH_INDEX_4, "pxcnv-d-direct-s1-indirect-with-index-4", "pxcnv", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv #${d-imm8},(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_PXCNV_D_IMMEDIATE_2_S1_INDIRECT_WITH_INDEX_4, "pxcnv-d-immediate-2-s1-indirect-with-index-4", "pxcnv", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv (${d-An},${d-r}),(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_PXCNV_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_INDEX_4, "pxcnv-d-indirect-with-index-2-s1-indirect-with-index-4", "pxcnv", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv ${d-imm7-2}(${d-An}),(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_PXCNV_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_INDEX_4, "pxcnv-d-indirect-with-offset-2-s1-indirect-with-index-4", "pxcnv", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv (${d-An}),(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_PXCNV_D_INDIRECT_2_S1_INDIRECT_WITH_INDEX_4, "pxcnv-d-indirect-2-s1-indirect-with-index-4", "pxcnv", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv (${d-An})${d-i4-2}++,(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_PXCNV_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_INDEX_4, "pxcnv-d-indirect-with-post-increment-2-s1-indirect-with-index-4", "pxcnv", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv ${d-i4-2}(${d-An})++,(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_PXCNV_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_INDEX_4, "pxcnv-d-indirect-with-pre-increment-2-s1-indirect-with-index-4", "pxcnv", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv ${d-direct-addr},${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_PXCNV_D_DIRECT_S1_INDIRECT_WITH_OFFSET_4, "pxcnv-d-direct-s1-indirect-with-offset-4", "pxcnv", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv #${d-imm8},${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_PXCNV_D_IMMEDIATE_2_S1_INDIRECT_WITH_OFFSET_4, "pxcnv-d-immediate-2-s1-indirect-with-offset-4", "pxcnv", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv (${d-An},${d-r}),${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_PXCNV_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_OFFSET_4, "pxcnv-d-indirect-with-index-2-s1-indirect-with-offset-4", "pxcnv", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv ${d-imm7-2}(${d-An}),${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_PXCNV_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_OFFSET_4, "pxcnv-d-indirect-with-offset-2-s1-indirect-with-offset-4", "pxcnv", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv (${d-An}),${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_PXCNV_D_INDIRECT_2_S1_INDIRECT_WITH_OFFSET_4, "pxcnv-d-indirect-2-s1-indirect-with-offset-4", "pxcnv", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv (${d-An})${d-i4-2}++,${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_PXCNV_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_OFFSET_4, "pxcnv-d-indirect-with-post-increment-2-s1-indirect-with-offset-4", "pxcnv", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv ${d-i4-2}(${d-An})++,${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_PXCNV_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_OFFSET_4, "pxcnv-d-indirect-with-pre-increment-2-s1-indirect-with-offset-4", "pxcnv", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv ${d-direct-addr},(${s1-An}) */
+  {
+    UBICOM32_INSN_PXCNV_D_DIRECT_S1_INDIRECT_4, "pxcnv-d-direct-s1-indirect-4", "pxcnv", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv #${d-imm8},(${s1-An}) */
+  {
+    UBICOM32_INSN_PXCNV_D_IMMEDIATE_2_S1_INDIRECT_4, "pxcnv-d-immediate-2-s1-indirect-4", "pxcnv", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv (${d-An},${d-r}),(${s1-An}) */
+  {
+    UBICOM32_INSN_PXCNV_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_4, "pxcnv-d-indirect-with-index-2-s1-indirect-4", "pxcnv", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv ${d-imm7-2}(${d-An}),(${s1-An}) */
+  {
+    UBICOM32_INSN_PXCNV_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_4, "pxcnv-d-indirect-with-offset-2-s1-indirect-4", "pxcnv", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv (${d-An}),(${s1-An}) */
+  {
+    UBICOM32_INSN_PXCNV_D_INDIRECT_2_S1_INDIRECT_4, "pxcnv-d-indirect-2-s1-indirect-4", "pxcnv", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv (${d-An})${d-i4-2}++,(${s1-An}) */
+  {
+    UBICOM32_INSN_PXCNV_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_4, "pxcnv-d-indirect-with-post-increment-2-s1-indirect-4", "pxcnv", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv ${d-i4-2}(${d-An})++,(${s1-An}) */
+  {
+    UBICOM32_INSN_PXCNV_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_4, "pxcnv-d-indirect-with-pre-increment-2-s1-indirect-4", "pxcnv", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv ${d-direct-addr},(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_PXCNV_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_4, "pxcnv-d-direct-s1-indirect-with-post-increment-4", "pxcnv", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv #${d-imm8},(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_PXCNV_D_IMMEDIATE_2_S1_INDIRECT_WITH_POST_INCREMENT_4, "pxcnv-d-immediate-2-s1-indirect-with-post-increment-4", "pxcnv", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv (${d-An},${d-r}),(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_PXCNV_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_POST_INCREMENT_4, "pxcnv-d-indirect-with-index-2-s1-indirect-with-post-increment-4", "pxcnv", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv ${d-imm7-2}(${d-An}),(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_PXCNV_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_POST_INCREMENT_4, "pxcnv-d-indirect-with-offset-2-s1-indirect-with-post-increment-4", "pxcnv", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv (${d-An}),(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_PXCNV_D_INDIRECT_2_S1_INDIRECT_WITH_POST_INCREMENT_4, "pxcnv-d-indirect-2-s1-indirect-with-post-increment-4", "pxcnv", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv (${d-An})${d-i4-2}++,(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_PXCNV_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_POST_INCREMENT_4, "pxcnv-d-indirect-with-post-increment-2-s1-indirect-with-post-increment-4", "pxcnv", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv ${d-i4-2}(${d-An})++,(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_PXCNV_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_POST_INCREMENT_4, "pxcnv-d-indirect-with-pre-increment-2-s1-indirect-with-post-increment-4", "pxcnv", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv ${d-direct-addr},${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_PXCNV_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_4, "pxcnv-d-direct-s1-indirect-with-pre-increment-4", "pxcnv", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv #${d-imm8},${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_PXCNV_D_IMMEDIATE_2_S1_INDIRECT_WITH_PRE_INCREMENT_4, "pxcnv-d-immediate-2-s1-indirect-with-pre-increment-4", "pxcnv", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv (${d-An},${d-r}),${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_PXCNV_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_PRE_INCREMENT_4, "pxcnv-d-indirect-with-index-2-s1-indirect-with-pre-increment-4", "pxcnv", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv ${d-imm7-2}(${d-An}),${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_PXCNV_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_PRE_INCREMENT_4, "pxcnv-d-indirect-with-offset-2-s1-indirect-with-pre-increment-4", "pxcnv", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv (${d-An}),${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_PXCNV_D_INDIRECT_2_S1_INDIRECT_WITH_PRE_INCREMENT_4, "pxcnv-d-indirect-2-s1-indirect-with-pre-increment-4", "pxcnv", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv (${d-An})${d-i4-2}++,${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_PXCNV_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_PRE_INCREMENT_4, "pxcnv-d-indirect-with-post-increment-2-s1-indirect-with-pre-increment-4", "pxcnv", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* pxcnv ${d-i4-2}(${d-An})++,${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_PXCNV_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_PRE_INCREMENT_4, "pxcnv-d-indirect-with-pre-increment-2-s1-indirect-with-pre-increment-4", "pxcnv", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* subc ${d-direct-addr},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_SUBC_D_DIRECT_S1_DIRECT, "subc-d-direct-s1-direct", "subc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* subc #${d-imm8},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_SUBC_D_IMMEDIATE_4_S1_DIRECT, "subc-d-immediate-4-s1-direct", "subc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* subc (${d-An},${d-r}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_SUBC_D_INDIRECT_WITH_INDEX_4_S1_DIRECT, "subc-d-indirect-with-index-4-s1-direct", "subc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* subc ${d-imm7-4}(${d-An}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_SUBC_D_INDIRECT_WITH_OFFSET_4_S1_DIRECT, "subc-d-indirect-with-offset-4-s1-direct", "subc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* subc (${d-An}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_SUBC_D_INDIRECT_4_S1_DIRECT, "subc-d-indirect-4-s1-direct", "subc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* subc (${d-An})${d-i4-4}++,${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_SUBC_D_INDIRECT_WITH_POST_INCREMENT_4_S1_DIRECT, "subc-d-indirect-with-post-increment-4-s1-direct", "subc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* subc ${d-i4-4}(${d-An})++,${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_SUBC_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_DIRECT, "subc-d-indirect-with-pre-increment-4-s1-direct", "subc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* subc ${d-direct-addr},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_SUBC_D_DIRECT_S1_IMMEDIATE, "subc-d-direct-s1-immediate", "subc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* subc #${d-imm8},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_SUBC_D_IMMEDIATE_4_S1_IMMEDIATE, "subc-d-immediate-4-s1-immediate", "subc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* subc (${d-An},${d-r}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_SUBC_D_INDIRECT_WITH_INDEX_4_S1_IMMEDIATE, "subc-d-indirect-with-index-4-s1-immediate", "subc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* subc ${d-imm7-4}(${d-An}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_SUBC_D_INDIRECT_WITH_OFFSET_4_S1_IMMEDIATE, "subc-d-indirect-with-offset-4-s1-immediate", "subc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* subc (${d-An}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_SUBC_D_INDIRECT_4_S1_IMMEDIATE, "subc-d-indirect-4-s1-immediate", "subc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* subc (${d-An})${d-i4-4}++,#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_SUBC_D_INDIRECT_WITH_POST_INCREMENT_4_S1_IMMEDIATE, "subc-d-indirect-with-post-increment-4-s1-immediate", "subc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* subc ${d-i4-4}(${d-An})++,#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_SUBC_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_IMMEDIATE, "subc-d-indirect-with-pre-increment-4-s1-immediate", "subc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* subc ${d-direct-addr},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_SUBC_D_DIRECT_S1_INDIRECT_WITH_INDEX_4, "subc-d-direct-s1-indirect-with-index-4", "subc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* subc #${d-imm8},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_SUBC_D_IMMEDIATE_4_S1_INDIRECT_WITH_INDEX_4, "subc-d-immediate-4-s1-indirect-with-index-4", "subc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* subc (${d-An},${d-r}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_SUBC_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_INDEX_4, "subc-d-indirect-with-index-4-s1-indirect-with-index-4", "subc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* subc ${d-imm7-4}(${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_SUBC_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_INDEX_4, "subc-d-indirect-with-offset-4-s1-indirect-with-index-4", "subc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* subc (${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_SUBC_D_INDIRECT_4_S1_INDIRECT_WITH_INDEX_4, "subc-d-indirect-4-s1-indirect-with-index-4", "subc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* subc (${d-An})${d-i4-4}++,(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_SUBC_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, "subc-d-indirect-with-post-increment-4-s1-indirect-with-index-4", "subc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* subc ${d-i4-4}(${d-An})++,(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_SUBC_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, "subc-d-indirect-with-pre-increment-4-s1-indirect-with-index-4", "subc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* subc ${d-direct-addr},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SUBC_D_DIRECT_S1_INDIRECT_WITH_OFFSET_4, "subc-d-direct-s1-indirect-with-offset-4", "subc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* subc #${d-imm8},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SUBC_D_IMMEDIATE_4_S1_INDIRECT_WITH_OFFSET_4, "subc-d-immediate-4-s1-indirect-with-offset-4", "subc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* subc (${d-An},${d-r}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SUBC_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_OFFSET_4, "subc-d-indirect-with-index-4-s1-indirect-with-offset-4", "subc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* subc ${d-imm7-4}(${d-An}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SUBC_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_OFFSET_4, "subc-d-indirect-with-offset-4-s1-indirect-with-offset-4", "subc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* subc (${d-An}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SUBC_D_INDIRECT_4_S1_INDIRECT_WITH_OFFSET_4, "subc-d-indirect-4-s1-indirect-with-offset-4", "subc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* subc (${d-An})${d-i4-4}++,${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SUBC_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, "subc-d-indirect-with-post-increment-4-s1-indirect-with-offset-4", "subc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* subc ${d-i4-4}(${d-An})++,${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SUBC_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, "subc-d-indirect-with-pre-increment-4-s1-indirect-with-offset-4", "subc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* subc ${d-direct-addr},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SUBC_D_DIRECT_S1_INDIRECT_4, "subc-d-direct-s1-indirect-4", "subc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* subc #${d-imm8},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SUBC_D_IMMEDIATE_4_S1_INDIRECT_4, "subc-d-immediate-4-s1-indirect-4", "subc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* subc (${d-An},${d-r}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SUBC_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_4, "subc-d-indirect-with-index-4-s1-indirect-4", "subc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* subc ${d-imm7-4}(${d-An}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SUBC_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_4, "subc-d-indirect-with-offset-4-s1-indirect-4", "subc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* subc (${d-An}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SUBC_D_INDIRECT_4_S1_INDIRECT_4, "subc-d-indirect-4-s1-indirect-4", "subc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* subc (${d-An})${d-i4-4}++,(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SUBC_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_4, "subc-d-indirect-with-post-increment-4-s1-indirect-4", "subc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* subc ${d-i4-4}(${d-An})++,(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SUBC_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_4, "subc-d-indirect-with-pre-increment-4-s1-indirect-4", "subc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* subc ${d-direct-addr},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_SUBC_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_4, "subc-d-direct-s1-indirect-with-post-increment-4", "subc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* subc #${d-imm8},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_SUBC_D_IMMEDIATE_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "subc-d-immediate-4-s1-indirect-with-post-increment-4", "subc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* subc (${d-An},${d-r}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_SUBC_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "subc-d-indirect-with-index-4-s1-indirect-with-post-increment-4", "subc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* subc ${d-imm7-4}(${d-An}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_SUBC_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "subc-d-indirect-with-offset-4-s1-indirect-with-post-increment-4", "subc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* subc (${d-An}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_SUBC_D_INDIRECT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "subc-d-indirect-4-s1-indirect-with-post-increment-4", "subc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* subc (${d-An})${d-i4-4}++,(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_SUBC_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "subc-d-indirect-with-post-increment-4-s1-indirect-with-post-increment-4", "subc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* subc ${d-i4-4}(${d-An})++,(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_SUBC_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "subc-d-indirect-with-pre-increment-4-s1-indirect-with-post-increment-4", "subc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* subc ${d-direct-addr},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_SUBC_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_4, "subc-d-direct-s1-indirect-with-pre-increment-4", "subc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* subc #${d-imm8},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_SUBC_D_IMMEDIATE_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "subc-d-immediate-4-s1-indirect-with-pre-increment-4", "subc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* subc (${d-An},${d-r}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_SUBC_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "subc-d-indirect-with-index-4-s1-indirect-with-pre-increment-4", "subc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* subc ${d-imm7-4}(${d-An}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_SUBC_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "subc-d-indirect-with-offset-4-s1-indirect-with-pre-increment-4", "subc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* subc (${d-An}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_SUBC_D_INDIRECT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "subc-d-indirect-4-s1-indirect-with-pre-increment-4", "subc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* subc (${d-An})${d-i4-4}++,${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_SUBC_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "subc-d-indirect-with-post-increment-4-s1-indirect-with-pre-increment-4", "subc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* subc ${d-i4-4}(${d-An})++,${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_SUBC_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "subc-d-indirect-with-pre-increment-4-s1-indirect-with-pre-increment-4", "subc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* addc ${d-direct-addr},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_ADDC_D_DIRECT_S1_DIRECT, "addc-d-direct-s1-direct", "addc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* addc #${d-imm8},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_ADDC_D_IMMEDIATE_4_S1_DIRECT, "addc-d-immediate-4-s1-direct", "addc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* addc (${d-An},${d-r}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_ADDC_D_INDIRECT_WITH_INDEX_4_S1_DIRECT, "addc-d-indirect-with-index-4-s1-direct", "addc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* addc ${d-imm7-4}(${d-An}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_ADDC_D_INDIRECT_WITH_OFFSET_4_S1_DIRECT, "addc-d-indirect-with-offset-4-s1-direct", "addc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* addc (${d-An}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_ADDC_D_INDIRECT_4_S1_DIRECT, "addc-d-indirect-4-s1-direct", "addc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* addc (${d-An})${d-i4-4}++,${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_ADDC_D_INDIRECT_WITH_POST_INCREMENT_4_S1_DIRECT, "addc-d-indirect-with-post-increment-4-s1-direct", "addc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* addc ${d-i4-4}(${d-An})++,${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_ADDC_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_DIRECT, "addc-d-indirect-with-pre-increment-4-s1-direct", "addc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* addc ${d-direct-addr},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_ADDC_D_DIRECT_S1_IMMEDIATE, "addc-d-direct-s1-immediate", "addc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* addc #${d-imm8},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_ADDC_D_IMMEDIATE_4_S1_IMMEDIATE, "addc-d-immediate-4-s1-immediate", "addc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* addc (${d-An},${d-r}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_ADDC_D_INDIRECT_WITH_INDEX_4_S1_IMMEDIATE, "addc-d-indirect-with-index-4-s1-immediate", "addc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* addc ${d-imm7-4}(${d-An}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_ADDC_D_INDIRECT_WITH_OFFSET_4_S1_IMMEDIATE, "addc-d-indirect-with-offset-4-s1-immediate", "addc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* addc (${d-An}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_ADDC_D_INDIRECT_4_S1_IMMEDIATE, "addc-d-indirect-4-s1-immediate", "addc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* addc (${d-An})${d-i4-4}++,#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_ADDC_D_INDIRECT_WITH_POST_INCREMENT_4_S1_IMMEDIATE, "addc-d-indirect-with-post-increment-4-s1-immediate", "addc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* addc ${d-i4-4}(${d-An})++,#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_ADDC_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_IMMEDIATE, "addc-d-indirect-with-pre-increment-4-s1-immediate", "addc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* addc ${d-direct-addr},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_ADDC_D_DIRECT_S1_INDIRECT_WITH_INDEX_4, "addc-d-direct-s1-indirect-with-index-4", "addc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* addc #${d-imm8},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_ADDC_D_IMMEDIATE_4_S1_INDIRECT_WITH_INDEX_4, "addc-d-immediate-4-s1-indirect-with-index-4", "addc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* addc (${d-An},${d-r}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_ADDC_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_INDEX_4, "addc-d-indirect-with-index-4-s1-indirect-with-index-4", "addc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* addc ${d-imm7-4}(${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_ADDC_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_INDEX_4, "addc-d-indirect-with-offset-4-s1-indirect-with-index-4", "addc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* addc (${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_ADDC_D_INDIRECT_4_S1_INDIRECT_WITH_INDEX_4, "addc-d-indirect-4-s1-indirect-with-index-4", "addc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* addc (${d-An})${d-i4-4}++,(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_ADDC_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, "addc-d-indirect-with-post-increment-4-s1-indirect-with-index-4", "addc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* addc ${d-i4-4}(${d-An})++,(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_ADDC_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, "addc-d-indirect-with-pre-increment-4-s1-indirect-with-index-4", "addc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* addc ${d-direct-addr},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ADDC_D_DIRECT_S1_INDIRECT_WITH_OFFSET_4, "addc-d-direct-s1-indirect-with-offset-4", "addc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* addc #${d-imm8},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ADDC_D_IMMEDIATE_4_S1_INDIRECT_WITH_OFFSET_4, "addc-d-immediate-4-s1-indirect-with-offset-4", "addc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* addc (${d-An},${d-r}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ADDC_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_OFFSET_4, "addc-d-indirect-with-index-4-s1-indirect-with-offset-4", "addc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* addc ${d-imm7-4}(${d-An}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ADDC_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_OFFSET_4, "addc-d-indirect-with-offset-4-s1-indirect-with-offset-4", "addc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* addc (${d-An}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ADDC_D_INDIRECT_4_S1_INDIRECT_WITH_OFFSET_4, "addc-d-indirect-4-s1-indirect-with-offset-4", "addc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* addc (${d-An})${d-i4-4}++,${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ADDC_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, "addc-d-indirect-with-post-increment-4-s1-indirect-with-offset-4", "addc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* addc ${d-i4-4}(${d-An})++,${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ADDC_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, "addc-d-indirect-with-pre-increment-4-s1-indirect-with-offset-4", "addc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* addc ${d-direct-addr},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ADDC_D_DIRECT_S1_INDIRECT_4, "addc-d-direct-s1-indirect-4", "addc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* addc #${d-imm8},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ADDC_D_IMMEDIATE_4_S1_INDIRECT_4, "addc-d-immediate-4-s1-indirect-4", "addc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* addc (${d-An},${d-r}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ADDC_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_4, "addc-d-indirect-with-index-4-s1-indirect-4", "addc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* addc ${d-imm7-4}(${d-An}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ADDC_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_4, "addc-d-indirect-with-offset-4-s1-indirect-4", "addc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* addc (${d-An}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ADDC_D_INDIRECT_4_S1_INDIRECT_4, "addc-d-indirect-4-s1-indirect-4", "addc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* addc (${d-An})${d-i4-4}++,(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ADDC_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_4, "addc-d-indirect-with-post-increment-4-s1-indirect-4", "addc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* addc ${d-i4-4}(${d-An})++,(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ADDC_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_4, "addc-d-indirect-with-pre-increment-4-s1-indirect-4", "addc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* addc ${d-direct-addr},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_ADDC_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_4, "addc-d-direct-s1-indirect-with-post-increment-4", "addc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* addc #${d-imm8},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_ADDC_D_IMMEDIATE_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "addc-d-immediate-4-s1-indirect-with-post-increment-4", "addc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* addc (${d-An},${d-r}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_ADDC_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "addc-d-indirect-with-index-4-s1-indirect-with-post-increment-4", "addc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* addc ${d-imm7-4}(${d-An}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_ADDC_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "addc-d-indirect-with-offset-4-s1-indirect-with-post-increment-4", "addc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* addc (${d-An}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_ADDC_D_INDIRECT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "addc-d-indirect-4-s1-indirect-with-post-increment-4", "addc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* addc (${d-An})${d-i4-4}++,(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_ADDC_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "addc-d-indirect-with-post-increment-4-s1-indirect-with-post-increment-4", "addc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* addc ${d-i4-4}(${d-An})++,(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_ADDC_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "addc-d-indirect-with-pre-increment-4-s1-indirect-with-post-increment-4", "addc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* addc ${d-direct-addr},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_ADDC_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_4, "addc-d-direct-s1-indirect-with-pre-increment-4", "addc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* addc #${d-imm8},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_ADDC_D_IMMEDIATE_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "addc-d-immediate-4-s1-indirect-with-pre-increment-4", "addc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* addc (${d-An},${d-r}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_ADDC_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "addc-d-indirect-with-index-4-s1-indirect-with-pre-increment-4", "addc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* addc ${d-imm7-4}(${d-An}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_ADDC_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "addc-d-indirect-with-offset-4-s1-indirect-with-pre-increment-4", "addc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* addc (${d-An}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_ADDC_D_INDIRECT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "addc-d-indirect-4-s1-indirect-with-pre-increment-4", "addc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* addc (${d-An})${d-i4-4}++,${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_ADDC_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "addc-d-indirect-with-post-increment-4-s1-indirect-with-pre-increment-4", "addc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* addc ${d-i4-4}(${d-An})++,${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_ADDC_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "addc-d-indirect-with-pre-increment-4-s1-indirect-with-pre-increment-4", "addc", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.1 ${d-direct-addr},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_SUB_1_D_DIRECT_S1_DIRECT, "sub.1-d-direct-s1-direct", "sub.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* sub.1 #${d-imm8},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_SUB_1_D_IMMEDIATE_1_S1_DIRECT, "sub.1-d-immediate-1-s1-direct", "sub.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* sub.1 (${d-An},${d-r}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_SUB_1_D_INDIRECT_WITH_INDEX_1_S1_DIRECT, "sub.1-d-indirect-with-index-1-s1-direct", "sub.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* sub.1 ${d-imm7-1}(${d-An}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_SUB_1_D_INDIRECT_WITH_OFFSET_1_S1_DIRECT, "sub.1-d-indirect-with-offset-1-s1-direct", "sub.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* sub.1 (${d-An}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_SUB_1_D_INDIRECT_1_S1_DIRECT, "sub.1-d-indirect-1-s1-direct", "sub.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* sub.1 (${d-An})${d-i4-1}++,${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_SUB_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_DIRECT, "sub.1-d-indirect-with-post-increment-1-s1-direct", "sub.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* sub.1 ${d-i4-1}(${d-An})++,${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_SUB_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_DIRECT, "sub.1-d-indirect-with-pre-increment-1-s1-direct", "sub.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* sub.1 ${d-direct-addr},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_SUB_1_D_DIRECT_S1_IMMEDIATE, "sub.1-d-direct-s1-immediate", "sub.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* sub.1 #${d-imm8},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_SUB_1_D_IMMEDIATE_1_S1_IMMEDIATE, "sub.1-d-immediate-1-s1-immediate", "sub.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* sub.1 (${d-An},${d-r}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_SUB_1_D_INDIRECT_WITH_INDEX_1_S1_IMMEDIATE, "sub.1-d-indirect-with-index-1-s1-immediate", "sub.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* sub.1 ${d-imm7-1}(${d-An}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_SUB_1_D_INDIRECT_WITH_OFFSET_1_S1_IMMEDIATE, "sub.1-d-indirect-with-offset-1-s1-immediate", "sub.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* sub.1 (${d-An}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_SUB_1_D_INDIRECT_1_S1_IMMEDIATE, "sub.1-d-indirect-1-s1-immediate", "sub.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* sub.1 (${d-An})${d-i4-1}++,#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_SUB_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_IMMEDIATE, "sub.1-d-indirect-with-post-increment-1-s1-immediate", "sub.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* sub.1 ${d-i4-1}(${d-An})++,#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_SUB_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_IMMEDIATE, "sub.1-d-indirect-with-pre-increment-1-s1-immediate", "sub.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* sub.1 ${d-direct-addr},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_SUB_1_D_DIRECT_S1_INDIRECT_WITH_INDEX_1, "sub.1-d-direct-s1-indirect-with-index-1", "sub.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* sub.1 #${d-imm8},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_SUB_1_D_IMMEDIATE_1_S1_INDIRECT_WITH_INDEX_1, "sub.1-d-immediate-1-s1-indirect-with-index-1", "sub.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* sub.1 (${d-An},${d-r}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_SUB_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_WITH_INDEX_1, "sub.1-d-indirect-with-index-1-s1-indirect-with-index-1", "sub.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* sub.1 ${d-imm7-1}(${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_SUB_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_WITH_INDEX_1, "sub.1-d-indirect-with-offset-1-s1-indirect-with-index-1", "sub.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* sub.1 (${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_SUB_1_D_INDIRECT_1_S1_INDIRECT_WITH_INDEX_1, "sub.1-d-indirect-1-s1-indirect-with-index-1", "sub.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* sub.1 (${d-An})${d-i4-1}++,(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_SUB_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_WITH_INDEX_1, "sub.1-d-indirect-with-post-increment-1-s1-indirect-with-index-1", "sub.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* sub.1 ${d-i4-1}(${d-An})++,(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_SUB_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_WITH_INDEX_1, "sub.1-d-indirect-with-pre-increment-1-s1-indirect-with-index-1", "sub.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* sub.1 ${d-direct-addr},${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SUB_1_D_DIRECT_S1_INDIRECT_WITH_OFFSET_1, "sub.1-d-direct-s1-indirect-with-offset-1", "sub.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* sub.1 #${d-imm8},${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SUB_1_D_IMMEDIATE_1_S1_INDIRECT_WITH_OFFSET_1, "sub.1-d-immediate-1-s1-indirect-with-offset-1", "sub.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* sub.1 (${d-An},${d-r}),${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SUB_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_WITH_OFFSET_1, "sub.1-d-indirect-with-index-1-s1-indirect-with-offset-1", "sub.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* sub.1 ${d-imm7-1}(${d-An}),${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SUB_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_WITH_OFFSET_1, "sub.1-d-indirect-with-offset-1-s1-indirect-with-offset-1", "sub.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* sub.1 (${d-An}),${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SUB_1_D_INDIRECT_1_S1_INDIRECT_WITH_OFFSET_1, "sub.1-d-indirect-1-s1-indirect-with-offset-1", "sub.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* sub.1 (${d-An})${d-i4-1}++,${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SUB_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_WITH_OFFSET_1, "sub.1-d-indirect-with-post-increment-1-s1-indirect-with-offset-1", "sub.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* sub.1 ${d-i4-1}(${d-An})++,${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SUB_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_WITH_OFFSET_1, "sub.1-d-indirect-with-pre-increment-1-s1-indirect-with-offset-1", "sub.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* sub.1 ${d-direct-addr},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SUB_1_D_DIRECT_S1_INDIRECT_1, "sub.1-d-direct-s1-indirect-1", "sub.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* sub.1 #${d-imm8},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SUB_1_D_IMMEDIATE_1_S1_INDIRECT_1, "sub.1-d-immediate-1-s1-indirect-1", "sub.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* sub.1 (${d-An},${d-r}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SUB_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_1, "sub.1-d-indirect-with-index-1-s1-indirect-1", "sub.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* sub.1 ${d-imm7-1}(${d-An}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SUB_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_1, "sub.1-d-indirect-with-offset-1-s1-indirect-1", "sub.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* sub.1 (${d-An}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SUB_1_D_INDIRECT_1_S1_INDIRECT_1, "sub.1-d-indirect-1-s1-indirect-1", "sub.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* sub.1 (${d-An})${d-i4-1}++,(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SUB_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_1, "sub.1-d-indirect-with-post-increment-1-s1-indirect-1", "sub.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* sub.1 ${d-i4-1}(${d-An})++,(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SUB_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_1, "sub.1-d-indirect-with-pre-increment-1-s1-indirect-1", "sub.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* sub.1 ${d-direct-addr},(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    UBICOM32_INSN_SUB_1_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_1, "sub.1-d-direct-s1-indirect-with-post-increment-1", "sub.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* sub.1 #${d-imm8},(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    UBICOM32_INSN_SUB_1_D_IMMEDIATE_1_S1_INDIRECT_WITH_POST_INCREMENT_1, "sub.1-d-immediate-1-s1-indirect-with-post-increment-1", "sub.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* sub.1 (${d-An},${d-r}),(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    UBICOM32_INSN_SUB_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_WITH_POST_INCREMENT_1, "sub.1-d-indirect-with-index-1-s1-indirect-with-post-increment-1", "sub.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* sub.1 ${d-imm7-1}(${d-An}),(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    UBICOM32_INSN_SUB_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_WITH_POST_INCREMENT_1, "sub.1-d-indirect-with-offset-1-s1-indirect-with-post-increment-1", "sub.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* sub.1 (${d-An}),(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    UBICOM32_INSN_SUB_1_D_INDIRECT_1_S1_INDIRECT_WITH_POST_INCREMENT_1, "sub.1-d-indirect-1-s1-indirect-with-post-increment-1", "sub.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* sub.1 (${d-An})${d-i4-1}++,(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    UBICOM32_INSN_SUB_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_WITH_POST_INCREMENT_1, "sub.1-d-indirect-with-post-increment-1-s1-indirect-with-post-increment-1", "sub.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* sub.1 ${d-i4-1}(${d-An})++,(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    UBICOM32_INSN_SUB_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_WITH_POST_INCREMENT_1, "sub.1-d-indirect-with-pre-increment-1-s1-indirect-with-post-increment-1", "sub.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* sub.1 ${d-direct-addr},${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_SUB_1_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_1, "sub.1-d-direct-s1-indirect-with-pre-increment-1", "sub.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* sub.1 #${d-imm8},${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_SUB_1_D_IMMEDIATE_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, "sub.1-d-immediate-1-s1-indirect-with-pre-increment-1", "sub.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* sub.1 (${d-An},${d-r}),${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_SUB_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, "sub.1-d-indirect-with-index-1-s1-indirect-with-pre-increment-1", "sub.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* sub.1 ${d-imm7-1}(${d-An}),${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_SUB_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, "sub.1-d-indirect-with-offset-1-s1-indirect-with-pre-increment-1", "sub.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* sub.1 (${d-An}),${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_SUB_1_D_INDIRECT_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, "sub.1-d-indirect-1-s1-indirect-with-pre-increment-1", "sub.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* sub.1 (${d-An})${d-i4-1}++,${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_SUB_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, "sub.1-d-indirect-with-post-increment-1-s1-indirect-with-pre-increment-1", "sub.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* sub.1 ${d-i4-1}(${d-An})++,${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_SUB_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, "sub.1-d-indirect-with-pre-increment-1-s1-indirect-with-pre-increment-1", "sub.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* sub.4 ${d-direct-addr},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_SUB_4_D_DIRECT_S1_DIRECT, "sub.4-d-direct-s1-direct", "sub.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.4 #${d-imm8},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_SUB_4_D_IMMEDIATE_4_S1_DIRECT, "sub.4-d-immediate-4-s1-direct", "sub.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.4 (${d-An},${d-r}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_SUB_4_D_INDIRECT_WITH_INDEX_4_S1_DIRECT, "sub.4-d-indirect-with-index-4-s1-direct", "sub.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.4 ${d-imm7-4}(${d-An}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_SUB_4_D_INDIRECT_WITH_OFFSET_4_S1_DIRECT, "sub.4-d-indirect-with-offset-4-s1-direct", "sub.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.4 (${d-An}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_SUB_4_D_INDIRECT_4_S1_DIRECT, "sub.4-d-indirect-4-s1-direct", "sub.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.4 (${d-An})${d-i4-4}++,${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_SUB_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_DIRECT, "sub.4-d-indirect-with-post-increment-4-s1-direct", "sub.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.4 ${d-i4-4}(${d-An})++,${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_SUB_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_DIRECT, "sub.4-d-indirect-with-pre-increment-4-s1-direct", "sub.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.4 ${d-direct-addr},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_SUB_4_D_DIRECT_S1_IMMEDIATE, "sub.4-d-direct-s1-immediate", "sub.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.4 #${d-imm8},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_SUB_4_D_IMMEDIATE_4_S1_IMMEDIATE, "sub.4-d-immediate-4-s1-immediate", "sub.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.4 (${d-An},${d-r}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_SUB_4_D_INDIRECT_WITH_INDEX_4_S1_IMMEDIATE, "sub.4-d-indirect-with-index-4-s1-immediate", "sub.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.4 ${d-imm7-4}(${d-An}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_SUB_4_D_INDIRECT_WITH_OFFSET_4_S1_IMMEDIATE, "sub.4-d-indirect-with-offset-4-s1-immediate", "sub.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.4 (${d-An}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_SUB_4_D_INDIRECT_4_S1_IMMEDIATE, "sub.4-d-indirect-4-s1-immediate", "sub.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.4 (${d-An})${d-i4-4}++,#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_SUB_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_IMMEDIATE, "sub.4-d-indirect-with-post-increment-4-s1-immediate", "sub.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.4 ${d-i4-4}(${d-An})++,#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_SUB_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_IMMEDIATE, "sub.4-d-indirect-with-pre-increment-4-s1-immediate", "sub.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.4 ${d-direct-addr},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_SUB_4_D_DIRECT_S1_INDIRECT_WITH_INDEX_4, "sub.4-d-direct-s1-indirect-with-index-4", "sub.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.4 #${d-imm8},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_SUB_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_INDEX_4, "sub.4-d-immediate-4-s1-indirect-with-index-4", "sub.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.4 (${d-An},${d-r}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_SUB_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_INDEX_4, "sub.4-d-indirect-with-index-4-s1-indirect-with-index-4", "sub.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.4 ${d-imm7-4}(${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_SUB_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_INDEX_4, "sub.4-d-indirect-with-offset-4-s1-indirect-with-index-4", "sub.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.4 (${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_SUB_4_D_INDIRECT_4_S1_INDIRECT_WITH_INDEX_4, "sub.4-d-indirect-4-s1-indirect-with-index-4", "sub.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.4 (${d-An})${d-i4-4}++,(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_SUB_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, "sub.4-d-indirect-with-post-increment-4-s1-indirect-with-index-4", "sub.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.4 ${d-i4-4}(${d-An})++,(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_SUB_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, "sub.4-d-indirect-with-pre-increment-4-s1-indirect-with-index-4", "sub.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.4 ${d-direct-addr},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SUB_4_D_DIRECT_S1_INDIRECT_WITH_OFFSET_4, "sub.4-d-direct-s1-indirect-with-offset-4", "sub.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.4 #${d-imm8},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SUB_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_OFFSET_4, "sub.4-d-immediate-4-s1-indirect-with-offset-4", "sub.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.4 (${d-An},${d-r}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SUB_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_OFFSET_4, "sub.4-d-indirect-with-index-4-s1-indirect-with-offset-4", "sub.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.4 ${d-imm7-4}(${d-An}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SUB_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_OFFSET_4, "sub.4-d-indirect-with-offset-4-s1-indirect-with-offset-4", "sub.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.4 (${d-An}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SUB_4_D_INDIRECT_4_S1_INDIRECT_WITH_OFFSET_4, "sub.4-d-indirect-4-s1-indirect-with-offset-4", "sub.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.4 (${d-An})${d-i4-4}++,${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SUB_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, "sub.4-d-indirect-with-post-increment-4-s1-indirect-with-offset-4", "sub.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.4 ${d-i4-4}(${d-An})++,${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SUB_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, "sub.4-d-indirect-with-pre-increment-4-s1-indirect-with-offset-4", "sub.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.4 ${d-direct-addr},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SUB_4_D_DIRECT_S1_INDIRECT_4, "sub.4-d-direct-s1-indirect-4", "sub.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.4 #${d-imm8},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SUB_4_D_IMMEDIATE_4_S1_INDIRECT_4, "sub.4-d-immediate-4-s1-indirect-4", "sub.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.4 (${d-An},${d-r}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SUB_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_4, "sub.4-d-indirect-with-index-4-s1-indirect-4", "sub.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.4 ${d-imm7-4}(${d-An}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SUB_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_4, "sub.4-d-indirect-with-offset-4-s1-indirect-4", "sub.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.4 (${d-An}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SUB_4_D_INDIRECT_4_S1_INDIRECT_4, "sub.4-d-indirect-4-s1-indirect-4", "sub.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.4 (${d-An})${d-i4-4}++,(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SUB_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_4, "sub.4-d-indirect-with-post-increment-4-s1-indirect-4", "sub.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.4 ${d-i4-4}(${d-An})++,(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SUB_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_4, "sub.4-d-indirect-with-pre-increment-4-s1-indirect-4", "sub.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.4 ${d-direct-addr},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_SUB_4_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_4, "sub.4-d-direct-s1-indirect-with-post-increment-4", "sub.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.4 #${d-imm8},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_SUB_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "sub.4-d-immediate-4-s1-indirect-with-post-increment-4", "sub.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.4 (${d-An},${d-r}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_SUB_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "sub.4-d-indirect-with-index-4-s1-indirect-with-post-increment-4", "sub.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.4 ${d-imm7-4}(${d-An}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_SUB_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "sub.4-d-indirect-with-offset-4-s1-indirect-with-post-increment-4", "sub.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.4 (${d-An}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_SUB_4_D_INDIRECT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "sub.4-d-indirect-4-s1-indirect-with-post-increment-4", "sub.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.4 (${d-An})${d-i4-4}++,(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_SUB_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "sub.4-d-indirect-with-post-increment-4-s1-indirect-with-post-increment-4", "sub.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.4 ${d-i4-4}(${d-An})++,(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_SUB_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "sub.4-d-indirect-with-pre-increment-4-s1-indirect-with-post-increment-4", "sub.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.4 ${d-direct-addr},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_SUB_4_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_4, "sub.4-d-direct-s1-indirect-with-pre-increment-4", "sub.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.4 #${d-imm8},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_SUB_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "sub.4-d-immediate-4-s1-indirect-with-pre-increment-4", "sub.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.4 (${d-An},${d-r}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_SUB_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "sub.4-d-indirect-with-index-4-s1-indirect-with-pre-increment-4", "sub.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.4 ${d-imm7-4}(${d-An}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_SUB_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "sub.4-d-indirect-with-offset-4-s1-indirect-with-pre-increment-4", "sub.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.4 (${d-An}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_SUB_4_D_INDIRECT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "sub.4-d-indirect-4-s1-indirect-with-pre-increment-4", "sub.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.4 (${d-An})${d-i4-4}++,${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_SUB_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "sub.4-d-indirect-with-post-increment-4-s1-indirect-with-pre-increment-4", "sub.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.4 ${d-i4-4}(${d-An})++,${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_SUB_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "sub.4-d-indirect-with-pre-increment-4-s1-indirect-with-pre-increment-4", "sub.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.2 ${d-direct-addr},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_SUB_2_D_DIRECT_S1_DIRECT, "sub.2-d-direct-s1-direct", "sub.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.2 #${d-imm8},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_SUB_2_D_IMMEDIATE_2_S1_DIRECT, "sub.2-d-immediate-2-s1-direct", "sub.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.2 (${d-An},${d-r}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_SUB_2_D_INDIRECT_WITH_INDEX_2_S1_DIRECT, "sub.2-d-indirect-with-index-2-s1-direct", "sub.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.2 ${d-imm7-2}(${d-An}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_SUB_2_D_INDIRECT_WITH_OFFSET_2_S1_DIRECT, "sub.2-d-indirect-with-offset-2-s1-direct", "sub.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.2 (${d-An}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_SUB_2_D_INDIRECT_2_S1_DIRECT, "sub.2-d-indirect-2-s1-direct", "sub.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.2 (${d-An})${d-i4-2}++,${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_SUB_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_DIRECT, "sub.2-d-indirect-with-post-increment-2-s1-direct", "sub.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.2 ${d-i4-2}(${d-An})++,${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_SUB_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_DIRECT, "sub.2-d-indirect-with-pre-increment-2-s1-direct", "sub.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.2 ${d-direct-addr},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_SUB_2_D_DIRECT_S1_IMMEDIATE, "sub.2-d-direct-s1-immediate", "sub.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.2 #${d-imm8},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_SUB_2_D_IMMEDIATE_2_S1_IMMEDIATE, "sub.2-d-immediate-2-s1-immediate", "sub.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.2 (${d-An},${d-r}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_SUB_2_D_INDIRECT_WITH_INDEX_2_S1_IMMEDIATE, "sub.2-d-indirect-with-index-2-s1-immediate", "sub.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.2 ${d-imm7-2}(${d-An}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_SUB_2_D_INDIRECT_WITH_OFFSET_2_S1_IMMEDIATE, "sub.2-d-indirect-with-offset-2-s1-immediate", "sub.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.2 (${d-An}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_SUB_2_D_INDIRECT_2_S1_IMMEDIATE, "sub.2-d-indirect-2-s1-immediate", "sub.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.2 (${d-An})${d-i4-2}++,#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_SUB_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_IMMEDIATE, "sub.2-d-indirect-with-post-increment-2-s1-immediate", "sub.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.2 ${d-i4-2}(${d-An})++,#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_SUB_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_IMMEDIATE, "sub.2-d-indirect-with-pre-increment-2-s1-immediate", "sub.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.2 ${d-direct-addr},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_SUB_2_D_DIRECT_S1_INDIRECT_WITH_INDEX_2, "sub.2-d-direct-s1-indirect-with-index-2", "sub.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.2 #${d-imm8},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_SUB_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_INDEX_2, "sub.2-d-immediate-2-s1-indirect-with-index-2", "sub.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.2 (${d-An},${d-r}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_SUB_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_INDEX_2, "sub.2-d-indirect-with-index-2-s1-indirect-with-index-2", "sub.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.2 ${d-imm7-2}(${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_SUB_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_INDEX_2, "sub.2-d-indirect-with-offset-2-s1-indirect-with-index-2", "sub.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.2 (${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_SUB_2_D_INDIRECT_2_S1_INDIRECT_WITH_INDEX_2, "sub.2-d-indirect-2-s1-indirect-with-index-2", "sub.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.2 (${d-An})${d-i4-2}++,(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_SUB_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_INDEX_2, "sub.2-d-indirect-with-post-increment-2-s1-indirect-with-index-2", "sub.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.2 ${d-i4-2}(${d-An})++,(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_SUB_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_INDEX_2, "sub.2-d-indirect-with-pre-increment-2-s1-indirect-with-index-2", "sub.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.2 ${d-direct-addr},${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SUB_2_D_DIRECT_S1_INDIRECT_WITH_OFFSET_2, "sub.2-d-direct-s1-indirect-with-offset-2", "sub.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.2 #${d-imm8},${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SUB_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_OFFSET_2, "sub.2-d-immediate-2-s1-indirect-with-offset-2", "sub.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.2 (${d-An},${d-r}),${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SUB_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_OFFSET_2, "sub.2-d-indirect-with-index-2-s1-indirect-with-offset-2", "sub.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.2 ${d-imm7-2}(${d-An}),${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SUB_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_OFFSET_2, "sub.2-d-indirect-with-offset-2-s1-indirect-with-offset-2", "sub.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.2 (${d-An}),${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SUB_2_D_INDIRECT_2_S1_INDIRECT_WITH_OFFSET_2, "sub.2-d-indirect-2-s1-indirect-with-offset-2", "sub.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.2 (${d-An})${d-i4-2}++,${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SUB_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_OFFSET_2, "sub.2-d-indirect-with-post-increment-2-s1-indirect-with-offset-2", "sub.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.2 ${d-i4-2}(${d-An})++,${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SUB_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_OFFSET_2, "sub.2-d-indirect-with-pre-increment-2-s1-indirect-with-offset-2", "sub.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.2 ${d-direct-addr},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SUB_2_D_DIRECT_S1_INDIRECT_2, "sub.2-d-direct-s1-indirect-2", "sub.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.2 #${d-imm8},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SUB_2_D_IMMEDIATE_2_S1_INDIRECT_2, "sub.2-d-immediate-2-s1-indirect-2", "sub.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.2 (${d-An},${d-r}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SUB_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_2, "sub.2-d-indirect-with-index-2-s1-indirect-2", "sub.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.2 ${d-imm7-2}(${d-An}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SUB_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_2, "sub.2-d-indirect-with-offset-2-s1-indirect-2", "sub.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.2 (${d-An}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SUB_2_D_INDIRECT_2_S1_INDIRECT_2, "sub.2-d-indirect-2-s1-indirect-2", "sub.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.2 (${d-An})${d-i4-2}++,(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SUB_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_2, "sub.2-d-indirect-with-post-increment-2-s1-indirect-2", "sub.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.2 ${d-i4-2}(${d-An})++,(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_SUB_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_2, "sub.2-d-indirect-with-pre-increment-2-s1-indirect-2", "sub.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.2 ${d-direct-addr},(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    UBICOM32_INSN_SUB_2_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_2, "sub.2-d-direct-s1-indirect-with-post-increment-2", "sub.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.2 #${d-imm8},(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    UBICOM32_INSN_SUB_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_POST_INCREMENT_2, "sub.2-d-immediate-2-s1-indirect-with-post-increment-2", "sub.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.2 (${d-An},${d-r}),(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    UBICOM32_INSN_SUB_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_POST_INCREMENT_2, "sub.2-d-indirect-with-index-2-s1-indirect-with-post-increment-2", "sub.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.2 ${d-imm7-2}(${d-An}),(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    UBICOM32_INSN_SUB_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_POST_INCREMENT_2, "sub.2-d-indirect-with-offset-2-s1-indirect-with-post-increment-2", "sub.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.2 (${d-An}),(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    UBICOM32_INSN_SUB_2_D_INDIRECT_2_S1_INDIRECT_WITH_POST_INCREMENT_2, "sub.2-d-indirect-2-s1-indirect-with-post-increment-2", "sub.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.2 (${d-An})${d-i4-2}++,(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    UBICOM32_INSN_SUB_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_POST_INCREMENT_2, "sub.2-d-indirect-with-post-increment-2-s1-indirect-with-post-increment-2", "sub.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.2 ${d-i4-2}(${d-An})++,(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    UBICOM32_INSN_SUB_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_POST_INCREMENT_2, "sub.2-d-indirect-with-pre-increment-2-s1-indirect-with-post-increment-2", "sub.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.2 ${d-direct-addr},${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_SUB_2_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_2, "sub.2-d-direct-s1-indirect-with-pre-increment-2", "sub.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.2 #${d-imm8},${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_SUB_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, "sub.2-d-immediate-2-s1-indirect-with-pre-increment-2", "sub.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.2 (${d-An},${d-r}),${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_SUB_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, "sub.2-d-indirect-with-index-2-s1-indirect-with-pre-increment-2", "sub.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.2 ${d-imm7-2}(${d-An}),${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_SUB_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, "sub.2-d-indirect-with-offset-2-s1-indirect-with-pre-increment-2", "sub.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.2 (${d-An}),${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_SUB_2_D_INDIRECT_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, "sub.2-d-indirect-2-s1-indirect-with-pre-increment-2", "sub.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.2 (${d-An})${d-i4-2}++,${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_SUB_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, "sub.2-d-indirect-with-post-increment-2-s1-indirect-with-pre-increment-2", "sub.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* sub.2 ${d-i4-2}(${d-An})++,${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_SUB_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, "sub.2-d-indirect-with-pre-increment-2-s1-indirect-with-pre-increment-2", "sub.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.1 ${d-direct-addr},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_ADD_1_D_DIRECT_S1_DIRECT, "add.1-d-direct-s1-direct", "add.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* add.1 #${d-imm8},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_ADD_1_D_IMMEDIATE_1_S1_DIRECT, "add.1-d-immediate-1-s1-direct", "add.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* add.1 (${d-An},${d-r}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_ADD_1_D_INDIRECT_WITH_INDEX_1_S1_DIRECT, "add.1-d-indirect-with-index-1-s1-direct", "add.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* add.1 ${d-imm7-1}(${d-An}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_ADD_1_D_INDIRECT_WITH_OFFSET_1_S1_DIRECT, "add.1-d-indirect-with-offset-1-s1-direct", "add.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* add.1 (${d-An}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_ADD_1_D_INDIRECT_1_S1_DIRECT, "add.1-d-indirect-1-s1-direct", "add.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* add.1 (${d-An})${d-i4-1}++,${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_ADD_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_DIRECT, "add.1-d-indirect-with-post-increment-1-s1-direct", "add.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* add.1 ${d-i4-1}(${d-An})++,${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_ADD_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_DIRECT, "add.1-d-indirect-with-pre-increment-1-s1-direct", "add.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* add.1 ${d-direct-addr},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_ADD_1_D_DIRECT_S1_IMMEDIATE, "add.1-d-direct-s1-immediate", "add.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* add.1 #${d-imm8},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_ADD_1_D_IMMEDIATE_1_S1_IMMEDIATE, "add.1-d-immediate-1-s1-immediate", "add.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* add.1 (${d-An},${d-r}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_ADD_1_D_INDIRECT_WITH_INDEX_1_S1_IMMEDIATE, "add.1-d-indirect-with-index-1-s1-immediate", "add.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* add.1 ${d-imm7-1}(${d-An}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_ADD_1_D_INDIRECT_WITH_OFFSET_1_S1_IMMEDIATE, "add.1-d-indirect-with-offset-1-s1-immediate", "add.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* add.1 (${d-An}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_ADD_1_D_INDIRECT_1_S1_IMMEDIATE, "add.1-d-indirect-1-s1-immediate", "add.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* add.1 (${d-An})${d-i4-1}++,#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_ADD_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_IMMEDIATE, "add.1-d-indirect-with-post-increment-1-s1-immediate", "add.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* add.1 ${d-i4-1}(${d-An})++,#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_ADD_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_IMMEDIATE, "add.1-d-indirect-with-pre-increment-1-s1-immediate", "add.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* add.1 ${d-direct-addr},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_ADD_1_D_DIRECT_S1_INDIRECT_WITH_INDEX_1, "add.1-d-direct-s1-indirect-with-index-1", "add.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* add.1 #${d-imm8},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_ADD_1_D_IMMEDIATE_1_S1_INDIRECT_WITH_INDEX_1, "add.1-d-immediate-1-s1-indirect-with-index-1", "add.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* add.1 (${d-An},${d-r}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_ADD_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_WITH_INDEX_1, "add.1-d-indirect-with-index-1-s1-indirect-with-index-1", "add.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* add.1 ${d-imm7-1}(${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_ADD_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_WITH_INDEX_1, "add.1-d-indirect-with-offset-1-s1-indirect-with-index-1", "add.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* add.1 (${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_ADD_1_D_INDIRECT_1_S1_INDIRECT_WITH_INDEX_1, "add.1-d-indirect-1-s1-indirect-with-index-1", "add.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* add.1 (${d-An})${d-i4-1}++,(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_ADD_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_WITH_INDEX_1, "add.1-d-indirect-with-post-increment-1-s1-indirect-with-index-1", "add.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* add.1 ${d-i4-1}(${d-An})++,(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_ADD_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_WITH_INDEX_1, "add.1-d-indirect-with-pre-increment-1-s1-indirect-with-index-1", "add.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* add.1 ${d-direct-addr},${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ADD_1_D_DIRECT_S1_INDIRECT_WITH_OFFSET_1, "add.1-d-direct-s1-indirect-with-offset-1", "add.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* add.1 #${d-imm8},${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ADD_1_D_IMMEDIATE_1_S1_INDIRECT_WITH_OFFSET_1, "add.1-d-immediate-1-s1-indirect-with-offset-1", "add.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* add.1 (${d-An},${d-r}),${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ADD_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_WITH_OFFSET_1, "add.1-d-indirect-with-index-1-s1-indirect-with-offset-1", "add.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* add.1 ${d-imm7-1}(${d-An}),${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ADD_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_WITH_OFFSET_1, "add.1-d-indirect-with-offset-1-s1-indirect-with-offset-1", "add.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* add.1 (${d-An}),${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ADD_1_D_INDIRECT_1_S1_INDIRECT_WITH_OFFSET_1, "add.1-d-indirect-1-s1-indirect-with-offset-1", "add.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* add.1 (${d-An})${d-i4-1}++,${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ADD_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_WITH_OFFSET_1, "add.1-d-indirect-with-post-increment-1-s1-indirect-with-offset-1", "add.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* add.1 ${d-i4-1}(${d-An})++,${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ADD_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_WITH_OFFSET_1, "add.1-d-indirect-with-pre-increment-1-s1-indirect-with-offset-1", "add.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* add.1 ${d-direct-addr},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ADD_1_D_DIRECT_S1_INDIRECT_1, "add.1-d-direct-s1-indirect-1", "add.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* add.1 #${d-imm8},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ADD_1_D_IMMEDIATE_1_S1_INDIRECT_1, "add.1-d-immediate-1-s1-indirect-1", "add.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* add.1 (${d-An},${d-r}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ADD_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_1, "add.1-d-indirect-with-index-1-s1-indirect-1", "add.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* add.1 ${d-imm7-1}(${d-An}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ADD_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_1, "add.1-d-indirect-with-offset-1-s1-indirect-1", "add.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* add.1 (${d-An}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ADD_1_D_INDIRECT_1_S1_INDIRECT_1, "add.1-d-indirect-1-s1-indirect-1", "add.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* add.1 (${d-An})${d-i4-1}++,(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ADD_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_1, "add.1-d-indirect-with-post-increment-1-s1-indirect-1", "add.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* add.1 ${d-i4-1}(${d-An})++,(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ADD_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_1, "add.1-d-indirect-with-pre-increment-1-s1-indirect-1", "add.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* add.1 ${d-direct-addr},(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    UBICOM32_INSN_ADD_1_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_1, "add.1-d-direct-s1-indirect-with-post-increment-1", "add.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* add.1 #${d-imm8},(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    UBICOM32_INSN_ADD_1_D_IMMEDIATE_1_S1_INDIRECT_WITH_POST_INCREMENT_1, "add.1-d-immediate-1-s1-indirect-with-post-increment-1", "add.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* add.1 (${d-An},${d-r}),(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    UBICOM32_INSN_ADD_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_WITH_POST_INCREMENT_1, "add.1-d-indirect-with-index-1-s1-indirect-with-post-increment-1", "add.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* add.1 ${d-imm7-1}(${d-An}),(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    UBICOM32_INSN_ADD_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_WITH_POST_INCREMENT_1, "add.1-d-indirect-with-offset-1-s1-indirect-with-post-increment-1", "add.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* add.1 (${d-An}),(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    UBICOM32_INSN_ADD_1_D_INDIRECT_1_S1_INDIRECT_WITH_POST_INCREMENT_1, "add.1-d-indirect-1-s1-indirect-with-post-increment-1", "add.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* add.1 (${d-An})${d-i4-1}++,(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    UBICOM32_INSN_ADD_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_WITH_POST_INCREMENT_1, "add.1-d-indirect-with-post-increment-1-s1-indirect-with-post-increment-1", "add.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* add.1 ${d-i4-1}(${d-An})++,(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    UBICOM32_INSN_ADD_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_WITH_POST_INCREMENT_1, "add.1-d-indirect-with-pre-increment-1-s1-indirect-with-post-increment-1", "add.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* add.1 ${d-direct-addr},${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_ADD_1_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_1, "add.1-d-direct-s1-indirect-with-pre-increment-1", "add.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* add.1 #${d-imm8},${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_ADD_1_D_IMMEDIATE_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, "add.1-d-immediate-1-s1-indirect-with-pre-increment-1", "add.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* add.1 (${d-An},${d-r}),${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_ADD_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, "add.1-d-indirect-with-index-1-s1-indirect-with-pre-increment-1", "add.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* add.1 ${d-imm7-1}(${d-An}),${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_ADD_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, "add.1-d-indirect-with-offset-1-s1-indirect-with-pre-increment-1", "add.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* add.1 (${d-An}),${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_ADD_1_D_INDIRECT_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, "add.1-d-indirect-1-s1-indirect-with-pre-increment-1", "add.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* add.1 (${d-An})${d-i4-1}++,${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_ADD_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, "add.1-d-indirect-with-post-increment-1-s1-indirect-with-pre-increment-1", "add.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* add.1 ${d-i4-1}(${d-An})++,${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_ADD_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, "add.1-d-indirect-with-pre-increment-1-s1-indirect-with-pre-increment-1", "add.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* add.4 ${d-direct-addr},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_ADD_4_D_DIRECT_S1_DIRECT, "add.4-d-direct-s1-direct", "add.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.4 #${d-imm8},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_ADD_4_D_IMMEDIATE_4_S1_DIRECT, "add.4-d-immediate-4-s1-direct", "add.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.4 (${d-An},${d-r}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_ADD_4_D_INDIRECT_WITH_INDEX_4_S1_DIRECT, "add.4-d-indirect-with-index-4-s1-direct", "add.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.4 ${d-imm7-4}(${d-An}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_ADD_4_D_INDIRECT_WITH_OFFSET_4_S1_DIRECT, "add.4-d-indirect-with-offset-4-s1-direct", "add.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.4 (${d-An}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_ADD_4_D_INDIRECT_4_S1_DIRECT, "add.4-d-indirect-4-s1-direct", "add.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.4 (${d-An})${d-i4-4}++,${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_ADD_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_DIRECT, "add.4-d-indirect-with-post-increment-4-s1-direct", "add.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.4 ${d-i4-4}(${d-An})++,${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_ADD_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_DIRECT, "add.4-d-indirect-with-pre-increment-4-s1-direct", "add.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.4 ${d-direct-addr},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_ADD_4_D_DIRECT_S1_IMMEDIATE, "add.4-d-direct-s1-immediate", "add.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.4 #${d-imm8},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_ADD_4_D_IMMEDIATE_4_S1_IMMEDIATE, "add.4-d-immediate-4-s1-immediate", "add.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.4 (${d-An},${d-r}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_ADD_4_D_INDIRECT_WITH_INDEX_4_S1_IMMEDIATE, "add.4-d-indirect-with-index-4-s1-immediate", "add.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.4 ${d-imm7-4}(${d-An}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_ADD_4_D_INDIRECT_WITH_OFFSET_4_S1_IMMEDIATE, "add.4-d-indirect-with-offset-4-s1-immediate", "add.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.4 (${d-An}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_ADD_4_D_INDIRECT_4_S1_IMMEDIATE, "add.4-d-indirect-4-s1-immediate", "add.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.4 (${d-An})${d-i4-4}++,#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_ADD_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_IMMEDIATE, "add.4-d-indirect-with-post-increment-4-s1-immediate", "add.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.4 ${d-i4-4}(${d-An})++,#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_ADD_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_IMMEDIATE, "add.4-d-indirect-with-pre-increment-4-s1-immediate", "add.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.4 ${d-direct-addr},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_ADD_4_D_DIRECT_S1_INDIRECT_WITH_INDEX_4, "add.4-d-direct-s1-indirect-with-index-4", "add.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.4 #${d-imm8},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_ADD_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_INDEX_4, "add.4-d-immediate-4-s1-indirect-with-index-4", "add.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.4 (${d-An},${d-r}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_ADD_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_INDEX_4, "add.4-d-indirect-with-index-4-s1-indirect-with-index-4", "add.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.4 ${d-imm7-4}(${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_ADD_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_INDEX_4, "add.4-d-indirect-with-offset-4-s1-indirect-with-index-4", "add.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.4 (${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_ADD_4_D_INDIRECT_4_S1_INDIRECT_WITH_INDEX_4, "add.4-d-indirect-4-s1-indirect-with-index-4", "add.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.4 (${d-An})${d-i4-4}++,(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_ADD_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, "add.4-d-indirect-with-post-increment-4-s1-indirect-with-index-4", "add.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.4 ${d-i4-4}(${d-An})++,(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_ADD_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, "add.4-d-indirect-with-pre-increment-4-s1-indirect-with-index-4", "add.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.4 ${d-direct-addr},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ADD_4_D_DIRECT_S1_INDIRECT_WITH_OFFSET_4, "add.4-d-direct-s1-indirect-with-offset-4", "add.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.4 #${d-imm8},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ADD_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_OFFSET_4, "add.4-d-immediate-4-s1-indirect-with-offset-4", "add.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.4 (${d-An},${d-r}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ADD_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_OFFSET_4, "add.4-d-indirect-with-index-4-s1-indirect-with-offset-4", "add.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.4 ${d-imm7-4}(${d-An}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ADD_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_OFFSET_4, "add.4-d-indirect-with-offset-4-s1-indirect-with-offset-4", "add.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.4 (${d-An}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ADD_4_D_INDIRECT_4_S1_INDIRECT_WITH_OFFSET_4, "add.4-d-indirect-4-s1-indirect-with-offset-4", "add.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.4 (${d-An})${d-i4-4}++,${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ADD_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, "add.4-d-indirect-with-post-increment-4-s1-indirect-with-offset-4", "add.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.4 ${d-i4-4}(${d-An})++,${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ADD_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, "add.4-d-indirect-with-pre-increment-4-s1-indirect-with-offset-4", "add.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.4 ${d-direct-addr},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ADD_4_D_DIRECT_S1_INDIRECT_4, "add.4-d-direct-s1-indirect-4", "add.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.4 #${d-imm8},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ADD_4_D_IMMEDIATE_4_S1_INDIRECT_4, "add.4-d-immediate-4-s1-indirect-4", "add.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.4 (${d-An},${d-r}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ADD_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_4, "add.4-d-indirect-with-index-4-s1-indirect-4", "add.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.4 ${d-imm7-4}(${d-An}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ADD_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_4, "add.4-d-indirect-with-offset-4-s1-indirect-4", "add.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.4 (${d-An}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ADD_4_D_INDIRECT_4_S1_INDIRECT_4, "add.4-d-indirect-4-s1-indirect-4", "add.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.4 (${d-An})${d-i4-4}++,(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ADD_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_4, "add.4-d-indirect-with-post-increment-4-s1-indirect-4", "add.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.4 ${d-i4-4}(${d-An})++,(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ADD_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_4, "add.4-d-indirect-with-pre-increment-4-s1-indirect-4", "add.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.4 ${d-direct-addr},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_ADD_4_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_4, "add.4-d-direct-s1-indirect-with-post-increment-4", "add.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.4 #${d-imm8},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_ADD_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "add.4-d-immediate-4-s1-indirect-with-post-increment-4", "add.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.4 (${d-An},${d-r}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_ADD_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "add.4-d-indirect-with-index-4-s1-indirect-with-post-increment-4", "add.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.4 ${d-imm7-4}(${d-An}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_ADD_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "add.4-d-indirect-with-offset-4-s1-indirect-with-post-increment-4", "add.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.4 (${d-An}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_ADD_4_D_INDIRECT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "add.4-d-indirect-4-s1-indirect-with-post-increment-4", "add.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.4 (${d-An})${d-i4-4}++,(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_ADD_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "add.4-d-indirect-with-post-increment-4-s1-indirect-with-post-increment-4", "add.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.4 ${d-i4-4}(${d-An})++,(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_ADD_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "add.4-d-indirect-with-pre-increment-4-s1-indirect-with-post-increment-4", "add.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.4 ${d-direct-addr},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_ADD_4_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_4, "add.4-d-direct-s1-indirect-with-pre-increment-4", "add.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.4 #${d-imm8},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_ADD_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "add.4-d-immediate-4-s1-indirect-with-pre-increment-4", "add.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.4 (${d-An},${d-r}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_ADD_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "add.4-d-indirect-with-index-4-s1-indirect-with-pre-increment-4", "add.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.4 ${d-imm7-4}(${d-An}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_ADD_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "add.4-d-indirect-with-offset-4-s1-indirect-with-pre-increment-4", "add.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.4 (${d-An}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_ADD_4_D_INDIRECT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "add.4-d-indirect-4-s1-indirect-with-pre-increment-4", "add.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.4 (${d-An})${d-i4-4}++,${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_ADD_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "add.4-d-indirect-with-post-increment-4-s1-indirect-with-pre-increment-4", "add.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.4 ${d-i4-4}(${d-An})++,${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_ADD_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "add.4-d-indirect-with-pre-increment-4-s1-indirect-with-pre-increment-4", "add.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.2 ${d-direct-addr},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_ADD_2_D_DIRECT_S1_DIRECT, "add.2-d-direct-s1-direct", "add.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.2 #${d-imm8},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_ADD_2_D_IMMEDIATE_2_S1_DIRECT, "add.2-d-immediate-2-s1-direct", "add.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.2 (${d-An},${d-r}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_ADD_2_D_INDIRECT_WITH_INDEX_2_S1_DIRECT, "add.2-d-indirect-with-index-2-s1-direct", "add.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.2 ${d-imm7-2}(${d-An}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_ADD_2_D_INDIRECT_WITH_OFFSET_2_S1_DIRECT, "add.2-d-indirect-with-offset-2-s1-direct", "add.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.2 (${d-An}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_ADD_2_D_INDIRECT_2_S1_DIRECT, "add.2-d-indirect-2-s1-direct", "add.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.2 (${d-An})${d-i4-2}++,${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_ADD_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_DIRECT, "add.2-d-indirect-with-post-increment-2-s1-direct", "add.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.2 ${d-i4-2}(${d-An})++,${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_ADD_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_DIRECT, "add.2-d-indirect-with-pre-increment-2-s1-direct", "add.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.2 ${d-direct-addr},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_ADD_2_D_DIRECT_S1_IMMEDIATE, "add.2-d-direct-s1-immediate", "add.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.2 #${d-imm8},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_ADD_2_D_IMMEDIATE_2_S1_IMMEDIATE, "add.2-d-immediate-2-s1-immediate", "add.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.2 (${d-An},${d-r}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_ADD_2_D_INDIRECT_WITH_INDEX_2_S1_IMMEDIATE, "add.2-d-indirect-with-index-2-s1-immediate", "add.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.2 ${d-imm7-2}(${d-An}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_ADD_2_D_INDIRECT_WITH_OFFSET_2_S1_IMMEDIATE, "add.2-d-indirect-with-offset-2-s1-immediate", "add.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.2 (${d-An}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_ADD_2_D_INDIRECT_2_S1_IMMEDIATE, "add.2-d-indirect-2-s1-immediate", "add.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.2 (${d-An})${d-i4-2}++,#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_ADD_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_IMMEDIATE, "add.2-d-indirect-with-post-increment-2-s1-immediate", "add.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.2 ${d-i4-2}(${d-An})++,#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_ADD_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_IMMEDIATE, "add.2-d-indirect-with-pre-increment-2-s1-immediate", "add.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.2 ${d-direct-addr},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_ADD_2_D_DIRECT_S1_INDIRECT_WITH_INDEX_2, "add.2-d-direct-s1-indirect-with-index-2", "add.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.2 #${d-imm8},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_ADD_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_INDEX_2, "add.2-d-immediate-2-s1-indirect-with-index-2", "add.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.2 (${d-An},${d-r}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_ADD_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_INDEX_2, "add.2-d-indirect-with-index-2-s1-indirect-with-index-2", "add.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.2 ${d-imm7-2}(${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_ADD_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_INDEX_2, "add.2-d-indirect-with-offset-2-s1-indirect-with-index-2", "add.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.2 (${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_ADD_2_D_INDIRECT_2_S1_INDIRECT_WITH_INDEX_2, "add.2-d-indirect-2-s1-indirect-with-index-2", "add.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.2 (${d-An})${d-i4-2}++,(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_ADD_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_INDEX_2, "add.2-d-indirect-with-post-increment-2-s1-indirect-with-index-2", "add.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.2 ${d-i4-2}(${d-An})++,(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_ADD_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_INDEX_2, "add.2-d-indirect-with-pre-increment-2-s1-indirect-with-index-2", "add.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.2 ${d-direct-addr},${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ADD_2_D_DIRECT_S1_INDIRECT_WITH_OFFSET_2, "add.2-d-direct-s1-indirect-with-offset-2", "add.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.2 #${d-imm8},${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ADD_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_OFFSET_2, "add.2-d-immediate-2-s1-indirect-with-offset-2", "add.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.2 (${d-An},${d-r}),${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ADD_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_OFFSET_2, "add.2-d-indirect-with-index-2-s1-indirect-with-offset-2", "add.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.2 ${d-imm7-2}(${d-An}),${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ADD_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_OFFSET_2, "add.2-d-indirect-with-offset-2-s1-indirect-with-offset-2", "add.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.2 (${d-An}),${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ADD_2_D_INDIRECT_2_S1_INDIRECT_WITH_OFFSET_2, "add.2-d-indirect-2-s1-indirect-with-offset-2", "add.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.2 (${d-An})${d-i4-2}++,${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ADD_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_OFFSET_2, "add.2-d-indirect-with-post-increment-2-s1-indirect-with-offset-2", "add.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.2 ${d-i4-2}(${d-An})++,${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ADD_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_OFFSET_2, "add.2-d-indirect-with-pre-increment-2-s1-indirect-with-offset-2", "add.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.2 ${d-direct-addr},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ADD_2_D_DIRECT_S1_INDIRECT_2, "add.2-d-direct-s1-indirect-2", "add.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.2 #${d-imm8},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ADD_2_D_IMMEDIATE_2_S1_INDIRECT_2, "add.2-d-immediate-2-s1-indirect-2", "add.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.2 (${d-An},${d-r}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ADD_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_2, "add.2-d-indirect-with-index-2-s1-indirect-2", "add.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.2 ${d-imm7-2}(${d-An}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ADD_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_2, "add.2-d-indirect-with-offset-2-s1-indirect-2", "add.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.2 (${d-An}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ADD_2_D_INDIRECT_2_S1_INDIRECT_2, "add.2-d-indirect-2-s1-indirect-2", "add.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.2 (${d-An})${d-i4-2}++,(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ADD_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_2, "add.2-d-indirect-with-post-increment-2-s1-indirect-2", "add.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.2 ${d-i4-2}(${d-An})++,(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_ADD_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_2, "add.2-d-indirect-with-pre-increment-2-s1-indirect-2", "add.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.2 ${d-direct-addr},(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    UBICOM32_INSN_ADD_2_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_2, "add.2-d-direct-s1-indirect-with-post-increment-2", "add.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.2 #${d-imm8},(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    UBICOM32_INSN_ADD_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_POST_INCREMENT_2, "add.2-d-immediate-2-s1-indirect-with-post-increment-2", "add.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.2 (${d-An},${d-r}),(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    UBICOM32_INSN_ADD_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_POST_INCREMENT_2, "add.2-d-indirect-with-index-2-s1-indirect-with-post-increment-2", "add.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.2 ${d-imm7-2}(${d-An}),(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    UBICOM32_INSN_ADD_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_POST_INCREMENT_2, "add.2-d-indirect-with-offset-2-s1-indirect-with-post-increment-2", "add.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.2 (${d-An}),(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    UBICOM32_INSN_ADD_2_D_INDIRECT_2_S1_INDIRECT_WITH_POST_INCREMENT_2, "add.2-d-indirect-2-s1-indirect-with-post-increment-2", "add.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.2 (${d-An})${d-i4-2}++,(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    UBICOM32_INSN_ADD_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_POST_INCREMENT_2, "add.2-d-indirect-with-post-increment-2-s1-indirect-with-post-increment-2", "add.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.2 ${d-i4-2}(${d-An})++,(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    UBICOM32_INSN_ADD_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_POST_INCREMENT_2, "add.2-d-indirect-with-pre-increment-2-s1-indirect-with-post-increment-2", "add.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.2 ${d-direct-addr},${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_ADD_2_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_2, "add.2-d-direct-s1-indirect-with-pre-increment-2", "add.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.2 #${d-imm8},${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_ADD_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, "add.2-d-immediate-2-s1-indirect-with-pre-increment-2", "add.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.2 (${d-An},${d-r}),${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_ADD_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, "add.2-d-indirect-with-index-2-s1-indirect-with-pre-increment-2", "add.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.2 ${d-imm7-2}(${d-An}),${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_ADD_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, "add.2-d-indirect-with-offset-2-s1-indirect-with-pre-increment-2", "add.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.2 (${d-An}),${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_ADD_2_D_INDIRECT_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, "add.2-d-indirect-2-s1-indirect-with-pre-increment-2", "add.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.2 (${d-An})${d-i4-2}++,${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_ADD_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, "add.2-d-indirect-with-post-increment-2-s1-indirect-with-pre-increment-2", "add.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* add.2 ${d-i4-2}(${d-An})++,${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_ADD_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, "add.2-d-indirect-with-pre-increment-2-s1-indirect-with-pre-increment-2", "add.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.4 ${d-direct-addr},${s1-direct-addr} */
+  {
+    UBICOM32_INSN_NOT_4_D_DIRECT_S1_DIRECT, "not.4-d-direct-s1-direct", "not.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.4 #${d-imm8},${s1-direct-addr} */
+  {
+    UBICOM32_INSN_NOT_4_D_IMMEDIATE_4_S1_DIRECT, "not.4-d-immediate-4-s1-direct", "not.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.4 (${d-An},${d-r}),${s1-direct-addr} */
+  {
+    UBICOM32_INSN_NOT_4_D_INDIRECT_WITH_INDEX_4_S1_DIRECT, "not.4-d-indirect-with-index-4-s1-direct", "not.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.4 ${d-imm7-4}(${d-An}),${s1-direct-addr} */
+  {
+    UBICOM32_INSN_NOT_4_D_INDIRECT_WITH_OFFSET_4_S1_DIRECT, "not.4-d-indirect-with-offset-4-s1-direct", "not.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.4 (${d-An}),${s1-direct-addr} */
+  {
+    UBICOM32_INSN_NOT_4_D_INDIRECT_4_S1_DIRECT, "not.4-d-indirect-4-s1-direct", "not.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.4 (${d-An})${d-i4-4}++,${s1-direct-addr} */
+  {
+    UBICOM32_INSN_NOT_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_DIRECT, "not.4-d-indirect-with-post-increment-4-s1-direct", "not.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.4 ${d-i4-4}(${d-An})++,${s1-direct-addr} */
+  {
+    UBICOM32_INSN_NOT_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_DIRECT, "not.4-d-indirect-with-pre-increment-4-s1-direct", "not.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.4 ${d-direct-addr},#${s1-imm8} */
+  {
+    UBICOM32_INSN_NOT_4_D_DIRECT_S1_IMMEDIATE, "not.4-d-direct-s1-immediate", "not.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.4 #${d-imm8},#${s1-imm8} */
+  {
+    UBICOM32_INSN_NOT_4_D_IMMEDIATE_4_S1_IMMEDIATE, "not.4-d-immediate-4-s1-immediate", "not.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.4 (${d-An},${d-r}),#${s1-imm8} */
+  {
+    UBICOM32_INSN_NOT_4_D_INDIRECT_WITH_INDEX_4_S1_IMMEDIATE, "not.4-d-indirect-with-index-4-s1-immediate", "not.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.4 ${d-imm7-4}(${d-An}),#${s1-imm8} */
+  {
+    UBICOM32_INSN_NOT_4_D_INDIRECT_WITH_OFFSET_4_S1_IMMEDIATE, "not.4-d-indirect-with-offset-4-s1-immediate", "not.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.4 (${d-An}),#${s1-imm8} */
+  {
+    UBICOM32_INSN_NOT_4_D_INDIRECT_4_S1_IMMEDIATE, "not.4-d-indirect-4-s1-immediate", "not.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.4 (${d-An})${d-i4-4}++,#${s1-imm8} */
+  {
+    UBICOM32_INSN_NOT_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_IMMEDIATE, "not.4-d-indirect-with-post-increment-4-s1-immediate", "not.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.4 ${d-i4-4}(${d-An})++,#${s1-imm8} */
+  {
+    UBICOM32_INSN_NOT_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_IMMEDIATE, "not.4-d-indirect-with-pre-increment-4-s1-immediate", "not.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.4 ${d-direct-addr},(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_NOT_4_D_DIRECT_S1_INDIRECT_WITH_INDEX_4, "not.4-d-direct-s1-indirect-with-index-4", "not.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.4 #${d-imm8},(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_NOT_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_INDEX_4, "not.4-d-immediate-4-s1-indirect-with-index-4", "not.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.4 (${d-An},${d-r}),(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_NOT_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_INDEX_4, "not.4-d-indirect-with-index-4-s1-indirect-with-index-4", "not.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.4 ${d-imm7-4}(${d-An}),(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_NOT_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_INDEX_4, "not.4-d-indirect-with-offset-4-s1-indirect-with-index-4", "not.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.4 (${d-An}),(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_NOT_4_D_INDIRECT_4_S1_INDIRECT_WITH_INDEX_4, "not.4-d-indirect-4-s1-indirect-with-index-4", "not.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.4 (${d-An})${d-i4-4}++,(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_NOT_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, "not.4-d-indirect-with-post-increment-4-s1-indirect-with-index-4", "not.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.4 ${d-i4-4}(${d-An})++,(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_NOT_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, "not.4-d-indirect-with-pre-increment-4-s1-indirect-with-index-4", "not.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.4 ${d-direct-addr},${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_NOT_4_D_DIRECT_S1_INDIRECT_WITH_OFFSET_4, "not.4-d-direct-s1-indirect-with-offset-4", "not.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.4 #${d-imm8},${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_NOT_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_OFFSET_4, "not.4-d-immediate-4-s1-indirect-with-offset-4", "not.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.4 (${d-An},${d-r}),${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_NOT_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_OFFSET_4, "not.4-d-indirect-with-index-4-s1-indirect-with-offset-4", "not.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.4 ${d-imm7-4}(${d-An}),${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_NOT_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_OFFSET_4, "not.4-d-indirect-with-offset-4-s1-indirect-with-offset-4", "not.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.4 (${d-An}),${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_NOT_4_D_INDIRECT_4_S1_INDIRECT_WITH_OFFSET_4, "not.4-d-indirect-4-s1-indirect-with-offset-4", "not.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.4 (${d-An})${d-i4-4}++,${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_NOT_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, "not.4-d-indirect-with-post-increment-4-s1-indirect-with-offset-4", "not.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.4 ${d-i4-4}(${d-An})++,${s1-imm7-4}(${s1-An}) */
+  {
+    UBICOM32_INSN_NOT_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, "not.4-d-indirect-with-pre-increment-4-s1-indirect-with-offset-4", "not.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.4 ${d-direct-addr},(${s1-An}) */
+  {
+    UBICOM32_INSN_NOT_4_D_DIRECT_S1_INDIRECT_4, "not.4-d-direct-s1-indirect-4", "not.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.4 #${d-imm8},(${s1-An}) */
+  {
+    UBICOM32_INSN_NOT_4_D_IMMEDIATE_4_S1_INDIRECT_4, "not.4-d-immediate-4-s1-indirect-4", "not.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.4 (${d-An},${d-r}),(${s1-An}) */
+  {
+    UBICOM32_INSN_NOT_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_4, "not.4-d-indirect-with-index-4-s1-indirect-4", "not.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.4 ${d-imm7-4}(${d-An}),(${s1-An}) */
+  {
+    UBICOM32_INSN_NOT_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_4, "not.4-d-indirect-with-offset-4-s1-indirect-4", "not.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.4 (${d-An}),(${s1-An}) */
+  {
+    UBICOM32_INSN_NOT_4_D_INDIRECT_4_S1_INDIRECT_4, "not.4-d-indirect-4-s1-indirect-4", "not.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.4 (${d-An})${d-i4-4}++,(${s1-An}) */
+  {
+    UBICOM32_INSN_NOT_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_4, "not.4-d-indirect-with-post-increment-4-s1-indirect-4", "not.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.4 ${d-i4-4}(${d-An})++,(${s1-An}) */
+  {
+    UBICOM32_INSN_NOT_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_4, "not.4-d-indirect-with-pre-increment-4-s1-indirect-4", "not.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.4 ${d-direct-addr},(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_NOT_4_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_4, "not.4-d-direct-s1-indirect-with-post-increment-4", "not.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.4 #${d-imm8},(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_NOT_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "not.4-d-immediate-4-s1-indirect-with-post-increment-4", "not.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.4 (${d-An},${d-r}),(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_NOT_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "not.4-d-indirect-with-index-4-s1-indirect-with-post-increment-4", "not.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.4 ${d-imm7-4}(${d-An}),(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_NOT_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "not.4-d-indirect-with-offset-4-s1-indirect-with-post-increment-4", "not.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.4 (${d-An}),(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_NOT_4_D_INDIRECT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "not.4-d-indirect-4-s1-indirect-with-post-increment-4", "not.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.4 (${d-An})${d-i4-4}++,(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_NOT_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "not.4-d-indirect-with-post-increment-4-s1-indirect-with-post-increment-4", "not.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.4 ${d-i4-4}(${d-An})++,(${s1-An})${s1-i4-4}++ */
+  {
+    UBICOM32_INSN_NOT_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "not.4-d-indirect-with-pre-increment-4-s1-indirect-with-post-increment-4", "not.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.4 ${d-direct-addr},${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_NOT_4_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_4, "not.4-d-direct-s1-indirect-with-pre-increment-4", "not.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.4 #${d-imm8},${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_NOT_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "not.4-d-immediate-4-s1-indirect-with-pre-increment-4", "not.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.4 (${d-An},${d-r}),${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_NOT_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "not.4-d-indirect-with-index-4-s1-indirect-with-pre-increment-4", "not.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.4 ${d-imm7-4}(${d-An}),${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_NOT_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "not.4-d-indirect-with-offset-4-s1-indirect-with-pre-increment-4", "not.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.4 (${d-An}),${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_NOT_4_D_INDIRECT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "not.4-d-indirect-4-s1-indirect-with-pre-increment-4", "not.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.4 (${d-An})${d-i4-4}++,${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_NOT_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "not.4-d-indirect-with-post-increment-4-s1-indirect-with-pre-increment-4", "not.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.4 ${d-i4-4}(${d-An})++,${s1-i4-4}(${s1-An})++ */
+  {
+    UBICOM32_INSN_NOT_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "not.4-d-indirect-with-pre-increment-4-s1-indirect-with-pre-increment-4", "not.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.2 ${d-direct-addr},${s1-direct-addr} */
+  {
+    UBICOM32_INSN_NOT_2_D_DIRECT_S1_DIRECT, "not.2-d-direct-s1-direct", "not.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.2 #${d-imm8},${s1-direct-addr} */
+  {
+    UBICOM32_INSN_NOT_2_D_IMMEDIATE_2_S1_DIRECT, "not.2-d-immediate-2-s1-direct", "not.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.2 (${d-An},${d-r}),${s1-direct-addr} */
+  {
+    UBICOM32_INSN_NOT_2_D_INDIRECT_WITH_INDEX_2_S1_DIRECT, "not.2-d-indirect-with-index-2-s1-direct", "not.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.2 ${d-imm7-2}(${d-An}),${s1-direct-addr} */
+  {
+    UBICOM32_INSN_NOT_2_D_INDIRECT_WITH_OFFSET_2_S1_DIRECT, "not.2-d-indirect-with-offset-2-s1-direct", "not.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.2 (${d-An}),${s1-direct-addr} */
+  {
+    UBICOM32_INSN_NOT_2_D_INDIRECT_2_S1_DIRECT, "not.2-d-indirect-2-s1-direct", "not.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.2 (${d-An})${d-i4-2}++,${s1-direct-addr} */
+  {
+    UBICOM32_INSN_NOT_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_DIRECT, "not.2-d-indirect-with-post-increment-2-s1-direct", "not.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.2 ${d-i4-2}(${d-An})++,${s1-direct-addr} */
+  {
+    UBICOM32_INSN_NOT_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_DIRECT, "not.2-d-indirect-with-pre-increment-2-s1-direct", "not.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.2 ${d-direct-addr},#${s1-imm8} */
+  {
+    UBICOM32_INSN_NOT_2_D_DIRECT_S1_IMMEDIATE, "not.2-d-direct-s1-immediate", "not.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.2 #${d-imm8},#${s1-imm8} */
+  {
+    UBICOM32_INSN_NOT_2_D_IMMEDIATE_2_S1_IMMEDIATE, "not.2-d-immediate-2-s1-immediate", "not.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.2 (${d-An},${d-r}),#${s1-imm8} */
+  {
+    UBICOM32_INSN_NOT_2_D_INDIRECT_WITH_INDEX_2_S1_IMMEDIATE, "not.2-d-indirect-with-index-2-s1-immediate", "not.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.2 ${d-imm7-2}(${d-An}),#${s1-imm8} */
+  {
+    UBICOM32_INSN_NOT_2_D_INDIRECT_WITH_OFFSET_2_S1_IMMEDIATE, "not.2-d-indirect-with-offset-2-s1-immediate", "not.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.2 (${d-An}),#${s1-imm8} */
+  {
+    UBICOM32_INSN_NOT_2_D_INDIRECT_2_S1_IMMEDIATE, "not.2-d-indirect-2-s1-immediate", "not.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.2 (${d-An})${d-i4-2}++,#${s1-imm8} */
+  {
+    UBICOM32_INSN_NOT_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_IMMEDIATE, "not.2-d-indirect-with-post-increment-2-s1-immediate", "not.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.2 ${d-i4-2}(${d-An})++,#${s1-imm8} */
+  {
+    UBICOM32_INSN_NOT_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_IMMEDIATE, "not.2-d-indirect-with-pre-increment-2-s1-immediate", "not.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.2 ${d-direct-addr},(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_NOT_2_D_DIRECT_S1_INDIRECT_WITH_INDEX_2, "not.2-d-direct-s1-indirect-with-index-2", "not.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.2 #${d-imm8},(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_NOT_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_INDEX_2, "not.2-d-immediate-2-s1-indirect-with-index-2", "not.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.2 (${d-An},${d-r}),(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_NOT_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_INDEX_2, "not.2-d-indirect-with-index-2-s1-indirect-with-index-2", "not.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.2 ${d-imm7-2}(${d-An}),(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_NOT_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_INDEX_2, "not.2-d-indirect-with-offset-2-s1-indirect-with-index-2", "not.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.2 (${d-An}),(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_NOT_2_D_INDIRECT_2_S1_INDIRECT_WITH_INDEX_2, "not.2-d-indirect-2-s1-indirect-with-index-2", "not.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.2 (${d-An})${d-i4-2}++,(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_NOT_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_INDEX_2, "not.2-d-indirect-with-post-increment-2-s1-indirect-with-index-2", "not.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.2 ${d-i4-2}(${d-An})++,(${s1-An},${s1-r}) */
+  {
+    UBICOM32_INSN_NOT_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_INDEX_2, "not.2-d-indirect-with-pre-increment-2-s1-indirect-with-index-2", "not.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.2 ${d-direct-addr},${s1-imm7-2}(${s1-An}) */
+  {
+    UBICOM32_INSN_NOT_2_D_DIRECT_S1_INDIRECT_WITH_OFFSET_2, "not.2-d-direct-s1-indirect-with-offset-2", "not.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.2 #${d-imm8},${s1-imm7-2}(${s1-An}) */
+  {
+    UBICOM32_INSN_NOT_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_OFFSET_2, "not.2-d-immediate-2-s1-indirect-with-offset-2", "not.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.2 (${d-An},${d-r}),${s1-imm7-2}(${s1-An}) */
+  {
+    UBICOM32_INSN_NOT_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_OFFSET_2, "not.2-d-indirect-with-index-2-s1-indirect-with-offset-2", "not.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.2 ${d-imm7-2}(${d-An}),${s1-imm7-2}(${s1-An}) */
+  {
+    UBICOM32_INSN_NOT_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_OFFSET_2, "not.2-d-indirect-with-offset-2-s1-indirect-with-offset-2", "not.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.2 (${d-An}),${s1-imm7-2}(${s1-An}) */
+  {
+    UBICOM32_INSN_NOT_2_D_INDIRECT_2_S1_INDIRECT_WITH_OFFSET_2, "not.2-d-indirect-2-s1-indirect-with-offset-2", "not.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.2 (${d-An})${d-i4-2}++,${s1-imm7-2}(${s1-An}) */
+  {
+    UBICOM32_INSN_NOT_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_OFFSET_2, "not.2-d-indirect-with-post-increment-2-s1-indirect-with-offset-2", "not.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.2 ${d-i4-2}(${d-An})++,${s1-imm7-2}(${s1-An}) */
+  {
+    UBICOM32_INSN_NOT_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_OFFSET_2, "not.2-d-indirect-with-pre-increment-2-s1-indirect-with-offset-2", "not.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.2 ${d-direct-addr},(${s1-An}) */
+  {
+    UBICOM32_INSN_NOT_2_D_DIRECT_S1_INDIRECT_2, "not.2-d-direct-s1-indirect-2", "not.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.2 #${d-imm8},(${s1-An}) */
+  {
+    UBICOM32_INSN_NOT_2_D_IMMEDIATE_2_S1_INDIRECT_2, "not.2-d-immediate-2-s1-indirect-2", "not.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.2 (${d-An},${d-r}),(${s1-An}) */
+  {
+    UBICOM32_INSN_NOT_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_2, "not.2-d-indirect-with-index-2-s1-indirect-2", "not.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.2 ${d-imm7-2}(${d-An}),(${s1-An}) */
+  {
+    UBICOM32_INSN_NOT_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_2, "not.2-d-indirect-with-offset-2-s1-indirect-2", "not.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.2 (${d-An}),(${s1-An}) */
+  {
+    UBICOM32_INSN_NOT_2_D_INDIRECT_2_S1_INDIRECT_2, "not.2-d-indirect-2-s1-indirect-2", "not.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.2 (${d-An})${d-i4-2}++,(${s1-An}) */
+  {
+    UBICOM32_INSN_NOT_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_2, "not.2-d-indirect-with-post-increment-2-s1-indirect-2", "not.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.2 ${d-i4-2}(${d-An})++,(${s1-An}) */
+  {
+    UBICOM32_INSN_NOT_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_2, "not.2-d-indirect-with-pre-increment-2-s1-indirect-2", "not.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.2 ${d-direct-addr},(${s1-An})${s1-i4-2}++ */
+  {
+    UBICOM32_INSN_NOT_2_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_2, "not.2-d-direct-s1-indirect-with-post-increment-2", "not.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.2 #${d-imm8},(${s1-An})${s1-i4-2}++ */
+  {
+    UBICOM32_INSN_NOT_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_POST_INCREMENT_2, "not.2-d-immediate-2-s1-indirect-with-post-increment-2", "not.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.2 (${d-An},${d-r}),(${s1-An})${s1-i4-2}++ */
+  {
+    UBICOM32_INSN_NOT_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_POST_INCREMENT_2, "not.2-d-indirect-with-index-2-s1-indirect-with-post-increment-2", "not.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.2 ${d-imm7-2}(${d-An}),(${s1-An})${s1-i4-2}++ */
+  {
+    UBICOM32_INSN_NOT_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_POST_INCREMENT_2, "not.2-d-indirect-with-offset-2-s1-indirect-with-post-increment-2", "not.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.2 (${d-An}),(${s1-An})${s1-i4-2}++ */
+  {
+    UBICOM32_INSN_NOT_2_D_INDIRECT_2_S1_INDIRECT_WITH_POST_INCREMENT_2, "not.2-d-indirect-2-s1-indirect-with-post-increment-2", "not.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.2 (${d-An})${d-i4-2}++,(${s1-An})${s1-i4-2}++ */
+  {
+    UBICOM32_INSN_NOT_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_POST_INCREMENT_2, "not.2-d-indirect-with-post-increment-2-s1-indirect-with-post-increment-2", "not.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.2 ${d-i4-2}(${d-An})++,(${s1-An})${s1-i4-2}++ */
+  {
+    UBICOM32_INSN_NOT_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_POST_INCREMENT_2, "not.2-d-indirect-with-pre-increment-2-s1-indirect-with-post-increment-2", "not.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.2 ${d-direct-addr},${s1-i4-2}(${s1-An})++ */
+  {
+    UBICOM32_INSN_NOT_2_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_2, "not.2-d-direct-s1-indirect-with-pre-increment-2", "not.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.2 #${d-imm8},${s1-i4-2}(${s1-An})++ */
+  {
+    UBICOM32_INSN_NOT_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, "not.2-d-immediate-2-s1-indirect-with-pre-increment-2", "not.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.2 (${d-An},${d-r}),${s1-i4-2}(${s1-An})++ */
+  {
+    UBICOM32_INSN_NOT_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, "not.2-d-indirect-with-index-2-s1-indirect-with-pre-increment-2", "not.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.2 ${d-imm7-2}(${d-An}),${s1-i4-2}(${s1-An})++ */
+  {
+    UBICOM32_INSN_NOT_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, "not.2-d-indirect-with-offset-2-s1-indirect-with-pre-increment-2", "not.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.2 (${d-An}),${s1-i4-2}(${s1-An})++ */
+  {
+    UBICOM32_INSN_NOT_2_D_INDIRECT_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, "not.2-d-indirect-2-s1-indirect-with-pre-increment-2", "not.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.2 (${d-An})${d-i4-2}++,${s1-i4-2}(${s1-An})++ */
+  {
+    UBICOM32_INSN_NOT_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, "not.2-d-indirect-with-post-increment-2-s1-indirect-with-pre-increment-2", "not.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* not.2 ${d-i4-2}(${d-An})++,${s1-i4-2}(${s1-An})++ */
+  {
+    UBICOM32_INSN_NOT_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, "not.2-d-indirect-with-pre-increment-2-s1-indirect-with-pre-increment-2", "not.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.1 ${d-direct-addr},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_XOR_1_D_DIRECT_S1_DIRECT, "xor.1-d-direct-s1-direct", "xor.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* xor.1 #${d-imm8},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_XOR_1_D_IMMEDIATE_1_S1_DIRECT, "xor.1-d-immediate-1-s1-direct", "xor.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* xor.1 (${d-An},${d-r}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_XOR_1_D_INDIRECT_WITH_INDEX_1_S1_DIRECT, "xor.1-d-indirect-with-index-1-s1-direct", "xor.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* xor.1 ${d-imm7-1}(${d-An}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_XOR_1_D_INDIRECT_WITH_OFFSET_1_S1_DIRECT, "xor.1-d-indirect-with-offset-1-s1-direct", "xor.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* xor.1 (${d-An}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_XOR_1_D_INDIRECT_1_S1_DIRECT, "xor.1-d-indirect-1-s1-direct", "xor.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* xor.1 (${d-An})${d-i4-1}++,${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_XOR_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_DIRECT, "xor.1-d-indirect-with-post-increment-1-s1-direct", "xor.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* xor.1 ${d-i4-1}(${d-An})++,${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_XOR_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_DIRECT, "xor.1-d-indirect-with-pre-increment-1-s1-direct", "xor.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* xor.1 ${d-direct-addr},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_XOR_1_D_DIRECT_S1_IMMEDIATE, "xor.1-d-direct-s1-immediate", "xor.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* xor.1 #${d-imm8},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_XOR_1_D_IMMEDIATE_1_S1_IMMEDIATE, "xor.1-d-immediate-1-s1-immediate", "xor.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* xor.1 (${d-An},${d-r}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_XOR_1_D_INDIRECT_WITH_INDEX_1_S1_IMMEDIATE, "xor.1-d-indirect-with-index-1-s1-immediate", "xor.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* xor.1 ${d-imm7-1}(${d-An}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_XOR_1_D_INDIRECT_WITH_OFFSET_1_S1_IMMEDIATE, "xor.1-d-indirect-with-offset-1-s1-immediate", "xor.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* xor.1 (${d-An}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_XOR_1_D_INDIRECT_1_S1_IMMEDIATE, "xor.1-d-indirect-1-s1-immediate", "xor.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* xor.1 (${d-An})${d-i4-1}++,#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_XOR_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_IMMEDIATE, "xor.1-d-indirect-with-post-increment-1-s1-immediate", "xor.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* xor.1 ${d-i4-1}(${d-An})++,#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_XOR_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_IMMEDIATE, "xor.1-d-indirect-with-pre-increment-1-s1-immediate", "xor.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* xor.1 ${d-direct-addr},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_XOR_1_D_DIRECT_S1_INDIRECT_WITH_INDEX_1, "xor.1-d-direct-s1-indirect-with-index-1", "xor.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* xor.1 #${d-imm8},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_XOR_1_D_IMMEDIATE_1_S1_INDIRECT_WITH_INDEX_1, "xor.1-d-immediate-1-s1-indirect-with-index-1", "xor.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* xor.1 (${d-An},${d-r}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_XOR_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_WITH_INDEX_1, "xor.1-d-indirect-with-index-1-s1-indirect-with-index-1", "xor.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* xor.1 ${d-imm7-1}(${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_XOR_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_WITH_INDEX_1, "xor.1-d-indirect-with-offset-1-s1-indirect-with-index-1", "xor.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* xor.1 (${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_XOR_1_D_INDIRECT_1_S1_INDIRECT_WITH_INDEX_1, "xor.1-d-indirect-1-s1-indirect-with-index-1", "xor.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* xor.1 (${d-An})${d-i4-1}++,(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_XOR_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_WITH_INDEX_1, "xor.1-d-indirect-with-post-increment-1-s1-indirect-with-index-1", "xor.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* xor.1 ${d-i4-1}(${d-An})++,(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_XOR_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_WITH_INDEX_1, "xor.1-d-indirect-with-pre-increment-1-s1-indirect-with-index-1", "xor.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* xor.1 ${d-direct-addr},${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_XOR_1_D_DIRECT_S1_INDIRECT_WITH_OFFSET_1, "xor.1-d-direct-s1-indirect-with-offset-1", "xor.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* xor.1 #${d-imm8},${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_XOR_1_D_IMMEDIATE_1_S1_INDIRECT_WITH_OFFSET_1, "xor.1-d-immediate-1-s1-indirect-with-offset-1", "xor.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* xor.1 (${d-An},${d-r}),${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_XOR_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_WITH_OFFSET_1, "xor.1-d-indirect-with-index-1-s1-indirect-with-offset-1", "xor.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* xor.1 ${d-imm7-1}(${d-An}),${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_XOR_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_WITH_OFFSET_1, "xor.1-d-indirect-with-offset-1-s1-indirect-with-offset-1", "xor.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* xor.1 (${d-An}),${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_XOR_1_D_INDIRECT_1_S1_INDIRECT_WITH_OFFSET_1, "xor.1-d-indirect-1-s1-indirect-with-offset-1", "xor.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* xor.1 (${d-An})${d-i4-1}++,${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_XOR_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_WITH_OFFSET_1, "xor.1-d-indirect-with-post-increment-1-s1-indirect-with-offset-1", "xor.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* xor.1 ${d-i4-1}(${d-An})++,${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_XOR_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_WITH_OFFSET_1, "xor.1-d-indirect-with-pre-increment-1-s1-indirect-with-offset-1", "xor.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* xor.1 ${d-direct-addr},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_XOR_1_D_DIRECT_S1_INDIRECT_1, "xor.1-d-direct-s1-indirect-1", "xor.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* xor.1 #${d-imm8},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_XOR_1_D_IMMEDIATE_1_S1_INDIRECT_1, "xor.1-d-immediate-1-s1-indirect-1", "xor.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* xor.1 (${d-An},${d-r}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_XOR_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_1, "xor.1-d-indirect-with-index-1-s1-indirect-1", "xor.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* xor.1 ${d-imm7-1}(${d-An}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_XOR_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_1, "xor.1-d-indirect-with-offset-1-s1-indirect-1", "xor.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* xor.1 (${d-An}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_XOR_1_D_INDIRECT_1_S1_INDIRECT_1, "xor.1-d-indirect-1-s1-indirect-1", "xor.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* xor.1 (${d-An})${d-i4-1}++,(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_XOR_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_1, "xor.1-d-indirect-with-post-increment-1-s1-indirect-1", "xor.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* xor.1 ${d-i4-1}(${d-An})++,(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_XOR_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_1, "xor.1-d-indirect-with-pre-increment-1-s1-indirect-1", "xor.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* xor.1 ${d-direct-addr},(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    UBICOM32_INSN_XOR_1_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_1, "xor.1-d-direct-s1-indirect-with-post-increment-1", "xor.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* xor.1 #${d-imm8},(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    UBICOM32_INSN_XOR_1_D_IMMEDIATE_1_S1_INDIRECT_WITH_POST_INCREMENT_1, "xor.1-d-immediate-1-s1-indirect-with-post-increment-1", "xor.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* xor.1 (${d-An},${d-r}),(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    UBICOM32_INSN_XOR_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_WITH_POST_INCREMENT_1, "xor.1-d-indirect-with-index-1-s1-indirect-with-post-increment-1", "xor.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* xor.1 ${d-imm7-1}(${d-An}),(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    UBICOM32_INSN_XOR_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_WITH_POST_INCREMENT_1, "xor.1-d-indirect-with-offset-1-s1-indirect-with-post-increment-1", "xor.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* xor.1 (${d-An}),(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    UBICOM32_INSN_XOR_1_D_INDIRECT_1_S1_INDIRECT_WITH_POST_INCREMENT_1, "xor.1-d-indirect-1-s1-indirect-with-post-increment-1", "xor.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* xor.1 (${d-An})${d-i4-1}++,(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    UBICOM32_INSN_XOR_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_WITH_POST_INCREMENT_1, "xor.1-d-indirect-with-post-increment-1-s1-indirect-with-post-increment-1", "xor.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* xor.1 ${d-i4-1}(${d-An})++,(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    UBICOM32_INSN_XOR_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_WITH_POST_INCREMENT_1, "xor.1-d-indirect-with-pre-increment-1-s1-indirect-with-post-increment-1", "xor.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* xor.1 ${d-direct-addr},${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_XOR_1_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_1, "xor.1-d-direct-s1-indirect-with-pre-increment-1", "xor.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* xor.1 #${d-imm8},${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_XOR_1_D_IMMEDIATE_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, "xor.1-d-immediate-1-s1-indirect-with-pre-increment-1", "xor.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* xor.1 (${d-An},${d-r}),${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_XOR_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, "xor.1-d-indirect-with-index-1-s1-indirect-with-pre-increment-1", "xor.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* xor.1 ${d-imm7-1}(${d-An}),${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_XOR_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, "xor.1-d-indirect-with-offset-1-s1-indirect-with-pre-increment-1", "xor.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* xor.1 (${d-An}),${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_XOR_1_D_INDIRECT_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, "xor.1-d-indirect-1-s1-indirect-with-pre-increment-1", "xor.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* xor.1 (${d-An})${d-i4-1}++,${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_XOR_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, "xor.1-d-indirect-with-post-increment-1-s1-indirect-with-pre-increment-1", "xor.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* xor.1 ${d-i4-1}(${d-An})++,${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_XOR_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, "xor.1-d-indirect-with-pre-increment-1-s1-indirect-with-pre-increment-1", "xor.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* or.1 ${d-direct-addr},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_OR_1_D_DIRECT_S1_DIRECT, "or.1-d-direct-s1-direct", "or.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* or.1 #${d-imm8},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_OR_1_D_IMMEDIATE_1_S1_DIRECT, "or.1-d-immediate-1-s1-direct", "or.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* or.1 (${d-An},${d-r}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_OR_1_D_INDIRECT_WITH_INDEX_1_S1_DIRECT, "or.1-d-indirect-with-index-1-s1-direct", "or.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* or.1 ${d-imm7-1}(${d-An}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_OR_1_D_INDIRECT_WITH_OFFSET_1_S1_DIRECT, "or.1-d-indirect-with-offset-1-s1-direct", "or.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* or.1 (${d-An}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_OR_1_D_INDIRECT_1_S1_DIRECT, "or.1-d-indirect-1-s1-direct", "or.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* or.1 (${d-An})${d-i4-1}++,${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_OR_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_DIRECT, "or.1-d-indirect-with-post-increment-1-s1-direct", "or.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* or.1 ${d-i4-1}(${d-An})++,${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_OR_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_DIRECT, "or.1-d-indirect-with-pre-increment-1-s1-direct", "or.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* or.1 ${d-direct-addr},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_OR_1_D_DIRECT_S1_IMMEDIATE, "or.1-d-direct-s1-immediate", "or.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* or.1 #${d-imm8},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_OR_1_D_IMMEDIATE_1_S1_IMMEDIATE, "or.1-d-immediate-1-s1-immediate", "or.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* or.1 (${d-An},${d-r}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_OR_1_D_INDIRECT_WITH_INDEX_1_S1_IMMEDIATE, "or.1-d-indirect-with-index-1-s1-immediate", "or.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* or.1 ${d-imm7-1}(${d-An}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_OR_1_D_INDIRECT_WITH_OFFSET_1_S1_IMMEDIATE, "or.1-d-indirect-with-offset-1-s1-immediate", "or.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* or.1 (${d-An}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_OR_1_D_INDIRECT_1_S1_IMMEDIATE, "or.1-d-indirect-1-s1-immediate", "or.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* or.1 (${d-An})${d-i4-1}++,#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_OR_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_IMMEDIATE, "or.1-d-indirect-with-post-increment-1-s1-immediate", "or.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* or.1 ${d-i4-1}(${d-An})++,#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_OR_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_IMMEDIATE, "or.1-d-indirect-with-pre-increment-1-s1-immediate", "or.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* or.1 ${d-direct-addr},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_OR_1_D_DIRECT_S1_INDIRECT_WITH_INDEX_1, "or.1-d-direct-s1-indirect-with-index-1", "or.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* or.1 #${d-imm8},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_OR_1_D_IMMEDIATE_1_S1_INDIRECT_WITH_INDEX_1, "or.1-d-immediate-1-s1-indirect-with-index-1", "or.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* or.1 (${d-An},${d-r}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_OR_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_WITH_INDEX_1, "or.1-d-indirect-with-index-1-s1-indirect-with-index-1", "or.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* or.1 ${d-imm7-1}(${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_OR_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_WITH_INDEX_1, "or.1-d-indirect-with-offset-1-s1-indirect-with-index-1", "or.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* or.1 (${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_OR_1_D_INDIRECT_1_S1_INDIRECT_WITH_INDEX_1, "or.1-d-indirect-1-s1-indirect-with-index-1", "or.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* or.1 (${d-An})${d-i4-1}++,(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_OR_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_WITH_INDEX_1, "or.1-d-indirect-with-post-increment-1-s1-indirect-with-index-1", "or.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* or.1 ${d-i4-1}(${d-An})++,(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_OR_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_WITH_INDEX_1, "or.1-d-indirect-with-pre-increment-1-s1-indirect-with-index-1", "or.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* or.1 ${d-direct-addr},${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_OR_1_D_DIRECT_S1_INDIRECT_WITH_OFFSET_1, "or.1-d-direct-s1-indirect-with-offset-1", "or.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* or.1 #${d-imm8},${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_OR_1_D_IMMEDIATE_1_S1_INDIRECT_WITH_OFFSET_1, "or.1-d-immediate-1-s1-indirect-with-offset-1", "or.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* or.1 (${d-An},${d-r}),${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_OR_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_WITH_OFFSET_1, "or.1-d-indirect-with-index-1-s1-indirect-with-offset-1", "or.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* or.1 ${d-imm7-1}(${d-An}),${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_OR_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_WITH_OFFSET_1, "or.1-d-indirect-with-offset-1-s1-indirect-with-offset-1", "or.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* or.1 (${d-An}),${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_OR_1_D_INDIRECT_1_S1_INDIRECT_WITH_OFFSET_1, "or.1-d-indirect-1-s1-indirect-with-offset-1", "or.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* or.1 (${d-An})${d-i4-1}++,${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_OR_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_WITH_OFFSET_1, "or.1-d-indirect-with-post-increment-1-s1-indirect-with-offset-1", "or.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* or.1 ${d-i4-1}(${d-An})++,${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_OR_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_WITH_OFFSET_1, "or.1-d-indirect-with-pre-increment-1-s1-indirect-with-offset-1", "or.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* or.1 ${d-direct-addr},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_OR_1_D_DIRECT_S1_INDIRECT_1, "or.1-d-direct-s1-indirect-1", "or.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* or.1 #${d-imm8},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_OR_1_D_IMMEDIATE_1_S1_INDIRECT_1, "or.1-d-immediate-1-s1-indirect-1", "or.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* or.1 (${d-An},${d-r}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_OR_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_1, "or.1-d-indirect-with-index-1-s1-indirect-1", "or.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* or.1 ${d-imm7-1}(${d-An}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_OR_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_1, "or.1-d-indirect-with-offset-1-s1-indirect-1", "or.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* or.1 (${d-An}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_OR_1_D_INDIRECT_1_S1_INDIRECT_1, "or.1-d-indirect-1-s1-indirect-1", "or.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* or.1 (${d-An})${d-i4-1}++,(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_OR_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_1, "or.1-d-indirect-with-post-increment-1-s1-indirect-1", "or.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* or.1 ${d-i4-1}(${d-An})++,(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_OR_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_1, "or.1-d-indirect-with-pre-increment-1-s1-indirect-1", "or.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* or.1 ${d-direct-addr},(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    UBICOM32_INSN_OR_1_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_1, "or.1-d-direct-s1-indirect-with-post-increment-1", "or.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* or.1 #${d-imm8},(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    UBICOM32_INSN_OR_1_D_IMMEDIATE_1_S1_INDIRECT_WITH_POST_INCREMENT_1, "or.1-d-immediate-1-s1-indirect-with-post-increment-1", "or.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* or.1 (${d-An},${d-r}),(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    UBICOM32_INSN_OR_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_WITH_POST_INCREMENT_1, "or.1-d-indirect-with-index-1-s1-indirect-with-post-increment-1", "or.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* or.1 ${d-imm7-1}(${d-An}),(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    UBICOM32_INSN_OR_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_WITH_POST_INCREMENT_1, "or.1-d-indirect-with-offset-1-s1-indirect-with-post-increment-1", "or.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* or.1 (${d-An}),(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    UBICOM32_INSN_OR_1_D_INDIRECT_1_S1_INDIRECT_WITH_POST_INCREMENT_1, "or.1-d-indirect-1-s1-indirect-with-post-increment-1", "or.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* or.1 (${d-An})${d-i4-1}++,(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    UBICOM32_INSN_OR_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_WITH_POST_INCREMENT_1, "or.1-d-indirect-with-post-increment-1-s1-indirect-with-post-increment-1", "or.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* or.1 ${d-i4-1}(${d-An})++,(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    UBICOM32_INSN_OR_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_WITH_POST_INCREMENT_1, "or.1-d-indirect-with-pre-increment-1-s1-indirect-with-post-increment-1", "or.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* or.1 ${d-direct-addr},${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_OR_1_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_1, "or.1-d-direct-s1-indirect-with-pre-increment-1", "or.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* or.1 #${d-imm8},${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_OR_1_D_IMMEDIATE_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, "or.1-d-immediate-1-s1-indirect-with-pre-increment-1", "or.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* or.1 (${d-An},${d-r}),${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_OR_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, "or.1-d-indirect-with-index-1-s1-indirect-with-pre-increment-1", "or.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* or.1 ${d-imm7-1}(${d-An}),${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_OR_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, "or.1-d-indirect-with-offset-1-s1-indirect-with-pre-increment-1", "or.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* or.1 (${d-An}),${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_OR_1_D_INDIRECT_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, "or.1-d-indirect-1-s1-indirect-with-pre-increment-1", "or.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* or.1 (${d-An})${d-i4-1}++,${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_OR_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, "or.1-d-indirect-with-post-increment-1-s1-indirect-with-pre-increment-1", "or.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* or.1 ${d-i4-1}(${d-An})++,${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_OR_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, "or.1-d-indirect-with-pre-increment-1-s1-indirect-with-pre-increment-1", "or.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* and.1 ${d-direct-addr},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_AND_1_D_DIRECT_S1_DIRECT, "and.1-d-direct-s1-direct", "and.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* and.1 #${d-imm8},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_AND_1_D_IMMEDIATE_1_S1_DIRECT, "and.1-d-immediate-1-s1-direct", "and.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* and.1 (${d-An},${d-r}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_AND_1_D_INDIRECT_WITH_INDEX_1_S1_DIRECT, "and.1-d-indirect-with-index-1-s1-direct", "and.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* and.1 ${d-imm7-1}(${d-An}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_AND_1_D_INDIRECT_WITH_OFFSET_1_S1_DIRECT, "and.1-d-indirect-with-offset-1-s1-direct", "and.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* and.1 (${d-An}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_AND_1_D_INDIRECT_1_S1_DIRECT, "and.1-d-indirect-1-s1-direct", "and.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* and.1 (${d-An})${d-i4-1}++,${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_AND_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_DIRECT, "and.1-d-indirect-with-post-increment-1-s1-direct", "and.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* and.1 ${d-i4-1}(${d-An})++,${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_AND_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_DIRECT, "and.1-d-indirect-with-pre-increment-1-s1-direct", "and.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* and.1 ${d-direct-addr},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_AND_1_D_DIRECT_S1_IMMEDIATE, "and.1-d-direct-s1-immediate", "and.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* and.1 #${d-imm8},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_AND_1_D_IMMEDIATE_1_S1_IMMEDIATE, "and.1-d-immediate-1-s1-immediate", "and.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* and.1 (${d-An},${d-r}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_AND_1_D_INDIRECT_WITH_INDEX_1_S1_IMMEDIATE, "and.1-d-indirect-with-index-1-s1-immediate", "and.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* and.1 ${d-imm7-1}(${d-An}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_AND_1_D_INDIRECT_WITH_OFFSET_1_S1_IMMEDIATE, "and.1-d-indirect-with-offset-1-s1-immediate", "and.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* and.1 (${d-An}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_AND_1_D_INDIRECT_1_S1_IMMEDIATE, "and.1-d-indirect-1-s1-immediate", "and.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* and.1 (${d-An})${d-i4-1}++,#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_AND_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_IMMEDIATE, "and.1-d-indirect-with-post-increment-1-s1-immediate", "and.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* and.1 ${d-i4-1}(${d-An})++,#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_AND_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_IMMEDIATE, "and.1-d-indirect-with-pre-increment-1-s1-immediate", "and.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* and.1 ${d-direct-addr},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_AND_1_D_DIRECT_S1_INDIRECT_WITH_INDEX_1, "and.1-d-direct-s1-indirect-with-index-1", "and.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* and.1 #${d-imm8},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_AND_1_D_IMMEDIATE_1_S1_INDIRECT_WITH_INDEX_1, "and.1-d-immediate-1-s1-indirect-with-index-1", "and.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* and.1 (${d-An},${d-r}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_AND_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_WITH_INDEX_1, "and.1-d-indirect-with-index-1-s1-indirect-with-index-1", "and.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* and.1 ${d-imm7-1}(${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_AND_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_WITH_INDEX_1, "and.1-d-indirect-with-offset-1-s1-indirect-with-index-1", "and.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* and.1 (${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_AND_1_D_INDIRECT_1_S1_INDIRECT_WITH_INDEX_1, "and.1-d-indirect-1-s1-indirect-with-index-1", "and.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* and.1 (${d-An})${d-i4-1}++,(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_AND_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_WITH_INDEX_1, "and.1-d-indirect-with-post-increment-1-s1-indirect-with-index-1", "and.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* and.1 ${d-i4-1}(${d-An})++,(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_AND_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_WITH_INDEX_1, "and.1-d-indirect-with-pre-increment-1-s1-indirect-with-index-1", "and.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* and.1 ${d-direct-addr},${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_AND_1_D_DIRECT_S1_INDIRECT_WITH_OFFSET_1, "and.1-d-direct-s1-indirect-with-offset-1", "and.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* and.1 #${d-imm8},${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_AND_1_D_IMMEDIATE_1_S1_INDIRECT_WITH_OFFSET_1, "and.1-d-immediate-1-s1-indirect-with-offset-1", "and.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* and.1 (${d-An},${d-r}),${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_AND_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_WITH_OFFSET_1, "and.1-d-indirect-with-index-1-s1-indirect-with-offset-1", "and.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* and.1 ${d-imm7-1}(${d-An}),${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_AND_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_WITH_OFFSET_1, "and.1-d-indirect-with-offset-1-s1-indirect-with-offset-1", "and.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* and.1 (${d-An}),${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_AND_1_D_INDIRECT_1_S1_INDIRECT_WITH_OFFSET_1, "and.1-d-indirect-1-s1-indirect-with-offset-1", "and.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* and.1 (${d-An})${d-i4-1}++,${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_AND_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_WITH_OFFSET_1, "and.1-d-indirect-with-post-increment-1-s1-indirect-with-offset-1", "and.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* and.1 ${d-i4-1}(${d-An})++,${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_AND_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_WITH_OFFSET_1, "and.1-d-indirect-with-pre-increment-1-s1-indirect-with-offset-1", "and.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* and.1 ${d-direct-addr},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_AND_1_D_DIRECT_S1_INDIRECT_1, "and.1-d-direct-s1-indirect-1", "and.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* and.1 #${d-imm8},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_AND_1_D_IMMEDIATE_1_S1_INDIRECT_1, "and.1-d-immediate-1-s1-indirect-1", "and.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* and.1 (${d-An},${d-r}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_AND_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_1, "and.1-d-indirect-with-index-1-s1-indirect-1", "and.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* and.1 ${d-imm7-1}(${d-An}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_AND_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_1, "and.1-d-indirect-with-offset-1-s1-indirect-1", "and.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* and.1 (${d-An}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_AND_1_D_INDIRECT_1_S1_INDIRECT_1, "and.1-d-indirect-1-s1-indirect-1", "and.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* and.1 (${d-An})${d-i4-1}++,(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_AND_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_1, "and.1-d-indirect-with-post-increment-1-s1-indirect-1", "and.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* and.1 ${d-i4-1}(${d-An})++,(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_AND_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_1, "and.1-d-indirect-with-pre-increment-1-s1-indirect-1", "and.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* and.1 ${d-direct-addr},(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    UBICOM32_INSN_AND_1_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_1, "and.1-d-direct-s1-indirect-with-post-increment-1", "and.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* and.1 #${d-imm8},(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    UBICOM32_INSN_AND_1_D_IMMEDIATE_1_S1_INDIRECT_WITH_POST_INCREMENT_1, "and.1-d-immediate-1-s1-indirect-with-post-increment-1", "and.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* and.1 (${d-An},${d-r}),(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    UBICOM32_INSN_AND_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_WITH_POST_INCREMENT_1, "and.1-d-indirect-with-index-1-s1-indirect-with-post-increment-1", "and.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* and.1 ${d-imm7-1}(${d-An}),(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    UBICOM32_INSN_AND_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_WITH_POST_INCREMENT_1, "and.1-d-indirect-with-offset-1-s1-indirect-with-post-increment-1", "and.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* and.1 (${d-An}),(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    UBICOM32_INSN_AND_1_D_INDIRECT_1_S1_INDIRECT_WITH_POST_INCREMENT_1, "and.1-d-indirect-1-s1-indirect-with-post-increment-1", "and.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* and.1 (${d-An})${d-i4-1}++,(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    UBICOM32_INSN_AND_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_WITH_POST_INCREMENT_1, "and.1-d-indirect-with-post-increment-1-s1-indirect-with-post-increment-1", "and.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* and.1 ${d-i4-1}(${d-An})++,(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    UBICOM32_INSN_AND_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_WITH_POST_INCREMENT_1, "and.1-d-indirect-with-pre-increment-1-s1-indirect-with-post-increment-1", "and.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* and.1 ${d-direct-addr},${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_AND_1_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_1, "and.1-d-direct-s1-indirect-with-pre-increment-1", "and.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* and.1 #${d-imm8},${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_AND_1_D_IMMEDIATE_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, "and.1-d-immediate-1-s1-indirect-with-pre-increment-1", "and.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* and.1 (${d-An},${d-r}),${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_AND_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, "and.1-d-indirect-with-index-1-s1-indirect-with-pre-increment-1", "and.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* and.1 ${d-imm7-1}(${d-An}),${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_AND_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, "and.1-d-indirect-with-offset-1-s1-indirect-with-pre-increment-1", "and.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* and.1 (${d-An}),${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_AND_1_D_INDIRECT_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, "and.1-d-indirect-1-s1-indirect-with-pre-increment-1", "and.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* and.1 (${d-An})${d-i4-1}++,${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_AND_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, "and.1-d-indirect-with-post-increment-1-s1-indirect-with-pre-increment-1", "and.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* and.1 ${d-i4-1}(${d-An})++,${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_AND_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, "and.1-d-indirect-with-pre-increment-1-s1-indirect-with-pre-increment-1", "and.1", 32,
+    { 0, { { { (1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* xor.4 ${d-direct-addr},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_XOR_4_D_DIRECT_S1_DIRECT, "xor.4-d-direct-s1-direct", "xor.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.4 #${d-imm8},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_XOR_4_D_IMMEDIATE_4_S1_DIRECT, "xor.4-d-immediate-4-s1-direct", "xor.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.4 (${d-An},${d-r}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_XOR_4_D_INDIRECT_WITH_INDEX_4_S1_DIRECT, "xor.4-d-indirect-with-index-4-s1-direct", "xor.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.4 ${d-imm7-4}(${d-An}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_XOR_4_D_INDIRECT_WITH_OFFSET_4_S1_DIRECT, "xor.4-d-indirect-with-offset-4-s1-direct", "xor.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.4 (${d-An}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_XOR_4_D_INDIRECT_4_S1_DIRECT, "xor.4-d-indirect-4-s1-direct", "xor.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.4 (${d-An})${d-i4-4}++,${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_XOR_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_DIRECT, "xor.4-d-indirect-with-post-increment-4-s1-direct", "xor.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.4 ${d-i4-4}(${d-An})++,${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_XOR_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_DIRECT, "xor.4-d-indirect-with-pre-increment-4-s1-direct", "xor.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.4 ${d-direct-addr},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_XOR_4_D_DIRECT_S1_IMMEDIATE, "xor.4-d-direct-s1-immediate", "xor.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.4 #${d-imm8},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_XOR_4_D_IMMEDIATE_4_S1_IMMEDIATE, "xor.4-d-immediate-4-s1-immediate", "xor.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.4 (${d-An},${d-r}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_XOR_4_D_INDIRECT_WITH_INDEX_4_S1_IMMEDIATE, "xor.4-d-indirect-with-index-4-s1-immediate", "xor.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.4 ${d-imm7-4}(${d-An}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_XOR_4_D_INDIRECT_WITH_OFFSET_4_S1_IMMEDIATE, "xor.4-d-indirect-with-offset-4-s1-immediate", "xor.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.4 (${d-An}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_XOR_4_D_INDIRECT_4_S1_IMMEDIATE, "xor.4-d-indirect-4-s1-immediate", "xor.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.4 (${d-An})${d-i4-4}++,#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_XOR_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_IMMEDIATE, "xor.4-d-indirect-with-post-increment-4-s1-immediate", "xor.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.4 ${d-i4-4}(${d-An})++,#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_XOR_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_IMMEDIATE, "xor.4-d-indirect-with-pre-increment-4-s1-immediate", "xor.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.4 ${d-direct-addr},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_XOR_4_D_DIRECT_S1_INDIRECT_WITH_INDEX_4, "xor.4-d-direct-s1-indirect-with-index-4", "xor.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.4 #${d-imm8},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_XOR_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_INDEX_4, "xor.4-d-immediate-4-s1-indirect-with-index-4", "xor.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.4 (${d-An},${d-r}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_XOR_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_INDEX_4, "xor.4-d-indirect-with-index-4-s1-indirect-with-index-4", "xor.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.4 ${d-imm7-4}(${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_XOR_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_INDEX_4, "xor.4-d-indirect-with-offset-4-s1-indirect-with-index-4", "xor.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.4 (${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_XOR_4_D_INDIRECT_4_S1_INDIRECT_WITH_INDEX_4, "xor.4-d-indirect-4-s1-indirect-with-index-4", "xor.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.4 (${d-An})${d-i4-4}++,(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_XOR_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, "xor.4-d-indirect-with-post-increment-4-s1-indirect-with-index-4", "xor.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.4 ${d-i4-4}(${d-An})++,(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_XOR_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, "xor.4-d-indirect-with-pre-increment-4-s1-indirect-with-index-4", "xor.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.4 ${d-direct-addr},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_XOR_4_D_DIRECT_S1_INDIRECT_WITH_OFFSET_4, "xor.4-d-direct-s1-indirect-with-offset-4", "xor.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.4 #${d-imm8},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_XOR_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_OFFSET_4, "xor.4-d-immediate-4-s1-indirect-with-offset-4", "xor.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.4 (${d-An},${d-r}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_XOR_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_OFFSET_4, "xor.4-d-indirect-with-index-4-s1-indirect-with-offset-4", "xor.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.4 ${d-imm7-4}(${d-An}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_XOR_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_OFFSET_4, "xor.4-d-indirect-with-offset-4-s1-indirect-with-offset-4", "xor.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.4 (${d-An}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_XOR_4_D_INDIRECT_4_S1_INDIRECT_WITH_OFFSET_4, "xor.4-d-indirect-4-s1-indirect-with-offset-4", "xor.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.4 (${d-An})${d-i4-4}++,${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_XOR_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, "xor.4-d-indirect-with-post-increment-4-s1-indirect-with-offset-4", "xor.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.4 ${d-i4-4}(${d-An})++,${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_XOR_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, "xor.4-d-indirect-with-pre-increment-4-s1-indirect-with-offset-4", "xor.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.4 ${d-direct-addr},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_XOR_4_D_DIRECT_S1_INDIRECT_4, "xor.4-d-direct-s1-indirect-4", "xor.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.4 #${d-imm8},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_XOR_4_D_IMMEDIATE_4_S1_INDIRECT_4, "xor.4-d-immediate-4-s1-indirect-4", "xor.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.4 (${d-An},${d-r}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_XOR_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_4, "xor.4-d-indirect-with-index-4-s1-indirect-4", "xor.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.4 ${d-imm7-4}(${d-An}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_XOR_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_4, "xor.4-d-indirect-with-offset-4-s1-indirect-4", "xor.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.4 (${d-An}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_XOR_4_D_INDIRECT_4_S1_INDIRECT_4, "xor.4-d-indirect-4-s1-indirect-4", "xor.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.4 (${d-An})${d-i4-4}++,(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_XOR_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_4, "xor.4-d-indirect-with-post-increment-4-s1-indirect-4", "xor.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.4 ${d-i4-4}(${d-An})++,(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_XOR_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_4, "xor.4-d-indirect-with-pre-increment-4-s1-indirect-4", "xor.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.4 ${d-direct-addr},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_XOR_4_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_4, "xor.4-d-direct-s1-indirect-with-post-increment-4", "xor.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.4 #${d-imm8},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_XOR_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "xor.4-d-immediate-4-s1-indirect-with-post-increment-4", "xor.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.4 (${d-An},${d-r}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_XOR_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "xor.4-d-indirect-with-index-4-s1-indirect-with-post-increment-4", "xor.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.4 ${d-imm7-4}(${d-An}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_XOR_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "xor.4-d-indirect-with-offset-4-s1-indirect-with-post-increment-4", "xor.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.4 (${d-An}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_XOR_4_D_INDIRECT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "xor.4-d-indirect-4-s1-indirect-with-post-increment-4", "xor.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.4 (${d-An})${d-i4-4}++,(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_XOR_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "xor.4-d-indirect-with-post-increment-4-s1-indirect-with-post-increment-4", "xor.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.4 ${d-i4-4}(${d-An})++,(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_XOR_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "xor.4-d-indirect-with-pre-increment-4-s1-indirect-with-post-increment-4", "xor.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.4 ${d-direct-addr},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_XOR_4_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_4, "xor.4-d-direct-s1-indirect-with-pre-increment-4", "xor.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.4 #${d-imm8},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_XOR_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "xor.4-d-immediate-4-s1-indirect-with-pre-increment-4", "xor.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.4 (${d-An},${d-r}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_XOR_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "xor.4-d-indirect-with-index-4-s1-indirect-with-pre-increment-4", "xor.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.4 ${d-imm7-4}(${d-An}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_XOR_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "xor.4-d-indirect-with-offset-4-s1-indirect-with-pre-increment-4", "xor.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.4 (${d-An}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_XOR_4_D_INDIRECT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "xor.4-d-indirect-4-s1-indirect-with-pre-increment-4", "xor.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.4 (${d-An})${d-i4-4}++,${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_XOR_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "xor.4-d-indirect-with-post-increment-4-s1-indirect-with-pre-increment-4", "xor.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.4 ${d-i4-4}(${d-An})++,${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_XOR_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "xor.4-d-indirect-with-pre-increment-4-s1-indirect-with-pre-increment-4", "xor.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.2 ${d-direct-addr},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_XOR_2_D_DIRECT_S1_DIRECT, "xor.2-d-direct-s1-direct", "xor.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.2 #${d-imm8},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_XOR_2_D_IMMEDIATE_2_S1_DIRECT, "xor.2-d-immediate-2-s1-direct", "xor.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.2 (${d-An},${d-r}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_XOR_2_D_INDIRECT_WITH_INDEX_2_S1_DIRECT, "xor.2-d-indirect-with-index-2-s1-direct", "xor.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.2 ${d-imm7-2}(${d-An}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_XOR_2_D_INDIRECT_WITH_OFFSET_2_S1_DIRECT, "xor.2-d-indirect-with-offset-2-s1-direct", "xor.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.2 (${d-An}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_XOR_2_D_INDIRECT_2_S1_DIRECT, "xor.2-d-indirect-2-s1-direct", "xor.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.2 (${d-An})${d-i4-2}++,${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_XOR_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_DIRECT, "xor.2-d-indirect-with-post-increment-2-s1-direct", "xor.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.2 ${d-i4-2}(${d-An})++,${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_XOR_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_DIRECT, "xor.2-d-indirect-with-pre-increment-2-s1-direct", "xor.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.2 ${d-direct-addr},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_XOR_2_D_DIRECT_S1_IMMEDIATE, "xor.2-d-direct-s1-immediate", "xor.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.2 #${d-imm8},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_XOR_2_D_IMMEDIATE_2_S1_IMMEDIATE, "xor.2-d-immediate-2-s1-immediate", "xor.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.2 (${d-An},${d-r}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_XOR_2_D_INDIRECT_WITH_INDEX_2_S1_IMMEDIATE, "xor.2-d-indirect-with-index-2-s1-immediate", "xor.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.2 ${d-imm7-2}(${d-An}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_XOR_2_D_INDIRECT_WITH_OFFSET_2_S1_IMMEDIATE, "xor.2-d-indirect-with-offset-2-s1-immediate", "xor.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.2 (${d-An}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_XOR_2_D_INDIRECT_2_S1_IMMEDIATE, "xor.2-d-indirect-2-s1-immediate", "xor.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.2 (${d-An})${d-i4-2}++,#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_XOR_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_IMMEDIATE, "xor.2-d-indirect-with-post-increment-2-s1-immediate", "xor.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.2 ${d-i4-2}(${d-An})++,#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_XOR_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_IMMEDIATE, "xor.2-d-indirect-with-pre-increment-2-s1-immediate", "xor.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.2 ${d-direct-addr},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_XOR_2_D_DIRECT_S1_INDIRECT_WITH_INDEX_2, "xor.2-d-direct-s1-indirect-with-index-2", "xor.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.2 #${d-imm8},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_XOR_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_INDEX_2, "xor.2-d-immediate-2-s1-indirect-with-index-2", "xor.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.2 (${d-An},${d-r}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_XOR_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_INDEX_2, "xor.2-d-indirect-with-index-2-s1-indirect-with-index-2", "xor.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.2 ${d-imm7-2}(${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_XOR_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_INDEX_2, "xor.2-d-indirect-with-offset-2-s1-indirect-with-index-2", "xor.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.2 (${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_XOR_2_D_INDIRECT_2_S1_INDIRECT_WITH_INDEX_2, "xor.2-d-indirect-2-s1-indirect-with-index-2", "xor.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.2 (${d-An})${d-i4-2}++,(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_XOR_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_INDEX_2, "xor.2-d-indirect-with-post-increment-2-s1-indirect-with-index-2", "xor.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.2 ${d-i4-2}(${d-An})++,(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_XOR_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_INDEX_2, "xor.2-d-indirect-with-pre-increment-2-s1-indirect-with-index-2", "xor.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.2 ${d-direct-addr},${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_XOR_2_D_DIRECT_S1_INDIRECT_WITH_OFFSET_2, "xor.2-d-direct-s1-indirect-with-offset-2", "xor.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.2 #${d-imm8},${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_XOR_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_OFFSET_2, "xor.2-d-immediate-2-s1-indirect-with-offset-2", "xor.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.2 (${d-An},${d-r}),${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_XOR_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_OFFSET_2, "xor.2-d-indirect-with-index-2-s1-indirect-with-offset-2", "xor.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.2 ${d-imm7-2}(${d-An}),${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_XOR_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_OFFSET_2, "xor.2-d-indirect-with-offset-2-s1-indirect-with-offset-2", "xor.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.2 (${d-An}),${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_XOR_2_D_INDIRECT_2_S1_INDIRECT_WITH_OFFSET_2, "xor.2-d-indirect-2-s1-indirect-with-offset-2", "xor.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.2 (${d-An})${d-i4-2}++,${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_XOR_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_OFFSET_2, "xor.2-d-indirect-with-post-increment-2-s1-indirect-with-offset-2", "xor.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.2 ${d-i4-2}(${d-An})++,${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_XOR_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_OFFSET_2, "xor.2-d-indirect-with-pre-increment-2-s1-indirect-with-offset-2", "xor.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.2 ${d-direct-addr},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_XOR_2_D_DIRECT_S1_INDIRECT_2, "xor.2-d-direct-s1-indirect-2", "xor.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.2 #${d-imm8},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_XOR_2_D_IMMEDIATE_2_S1_INDIRECT_2, "xor.2-d-immediate-2-s1-indirect-2", "xor.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.2 (${d-An},${d-r}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_XOR_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_2, "xor.2-d-indirect-with-index-2-s1-indirect-2", "xor.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.2 ${d-imm7-2}(${d-An}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_XOR_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_2, "xor.2-d-indirect-with-offset-2-s1-indirect-2", "xor.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.2 (${d-An}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_XOR_2_D_INDIRECT_2_S1_INDIRECT_2, "xor.2-d-indirect-2-s1-indirect-2", "xor.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.2 (${d-An})${d-i4-2}++,(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_XOR_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_2, "xor.2-d-indirect-with-post-increment-2-s1-indirect-2", "xor.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.2 ${d-i4-2}(${d-An})++,(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_XOR_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_2, "xor.2-d-indirect-with-pre-increment-2-s1-indirect-2", "xor.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.2 ${d-direct-addr},(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    UBICOM32_INSN_XOR_2_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_2, "xor.2-d-direct-s1-indirect-with-post-increment-2", "xor.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.2 #${d-imm8},(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    UBICOM32_INSN_XOR_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_POST_INCREMENT_2, "xor.2-d-immediate-2-s1-indirect-with-post-increment-2", "xor.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.2 (${d-An},${d-r}),(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    UBICOM32_INSN_XOR_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_POST_INCREMENT_2, "xor.2-d-indirect-with-index-2-s1-indirect-with-post-increment-2", "xor.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.2 ${d-imm7-2}(${d-An}),(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    UBICOM32_INSN_XOR_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_POST_INCREMENT_2, "xor.2-d-indirect-with-offset-2-s1-indirect-with-post-increment-2", "xor.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.2 (${d-An}),(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    UBICOM32_INSN_XOR_2_D_INDIRECT_2_S1_INDIRECT_WITH_POST_INCREMENT_2, "xor.2-d-indirect-2-s1-indirect-with-post-increment-2", "xor.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.2 (${d-An})${d-i4-2}++,(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    UBICOM32_INSN_XOR_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_POST_INCREMENT_2, "xor.2-d-indirect-with-post-increment-2-s1-indirect-with-post-increment-2", "xor.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.2 ${d-i4-2}(${d-An})++,(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    UBICOM32_INSN_XOR_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_POST_INCREMENT_2, "xor.2-d-indirect-with-pre-increment-2-s1-indirect-with-post-increment-2", "xor.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.2 ${d-direct-addr},${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_XOR_2_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_2, "xor.2-d-direct-s1-indirect-with-pre-increment-2", "xor.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.2 #${d-imm8},${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_XOR_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, "xor.2-d-immediate-2-s1-indirect-with-pre-increment-2", "xor.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.2 (${d-An},${d-r}),${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_XOR_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, "xor.2-d-indirect-with-index-2-s1-indirect-with-pre-increment-2", "xor.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.2 ${d-imm7-2}(${d-An}),${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_XOR_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, "xor.2-d-indirect-with-offset-2-s1-indirect-with-pre-increment-2", "xor.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.2 (${d-An}),${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_XOR_2_D_INDIRECT_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, "xor.2-d-indirect-2-s1-indirect-with-pre-increment-2", "xor.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.2 (${d-An})${d-i4-2}++,${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_XOR_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, "xor.2-d-indirect-with-post-increment-2-s1-indirect-with-pre-increment-2", "xor.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* xor.2 ${d-i4-2}(${d-An})++,${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_XOR_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, "xor.2-d-indirect-with-pre-increment-2-s1-indirect-with-pre-increment-2", "xor.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.4 ${d-direct-addr},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_OR_4_D_DIRECT_S1_DIRECT, "or.4-d-direct-s1-direct", "or.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.4 #${d-imm8},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_OR_4_D_IMMEDIATE_4_S1_DIRECT, "or.4-d-immediate-4-s1-direct", "or.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.4 (${d-An},${d-r}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_OR_4_D_INDIRECT_WITH_INDEX_4_S1_DIRECT, "or.4-d-indirect-with-index-4-s1-direct", "or.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.4 ${d-imm7-4}(${d-An}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_OR_4_D_INDIRECT_WITH_OFFSET_4_S1_DIRECT, "or.4-d-indirect-with-offset-4-s1-direct", "or.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.4 (${d-An}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_OR_4_D_INDIRECT_4_S1_DIRECT, "or.4-d-indirect-4-s1-direct", "or.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.4 (${d-An})${d-i4-4}++,${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_OR_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_DIRECT, "or.4-d-indirect-with-post-increment-4-s1-direct", "or.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.4 ${d-i4-4}(${d-An})++,${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_OR_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_DIRECT, "or.4-d-indirect-with-pre-increment-4-s1-direct", "or.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.4 ${d-direct-addr},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_OR_4_D_DIRECT_S1_IMMEDIATE, "or.4-d-direct-s1-immediate", "or.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.4 #${d-imm8},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_OR_4_D_IMMEDIATE_4_S1_IMMEDIATE, "or.4-d-immediate-4-s1-immediate", "or.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.4 (${d-An},${d-r}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_OR_4_D_INDIRECT_WITH_INDEX_4_S1_IMMEDIATE, "or.4-d-indirect-with-index-4-s1-immediate", "or.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.4 ${d-imm7-4}(${d-An}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_OR_4_D_INDIRECT_WITH_OFFSET_4_S1_IMMEDIATE, "or.4-d-indirect-with-offset-4-s1-immediate", "or.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.4 (${d-An}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_OR_4_D_INDIRECT_4_S1_IMMEDIATE, "or.4-d-indirect-4-s1-immediate", "or.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.4 (${d-An})${d-i4-4}++,#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_OR_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_IMMEDIATE, "or.4-d-indirect-with-post-increment-4-s1-immediate", "or.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.4 ${d-i4-4}(${d-An})++,#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_OR_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_IMMEDIATE, "or.4-d-indirect-with-pre-increment-4-s1-immediate", "or.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.4 ${d-direct-addr},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_OR_4_D_DIRECT_S1_INDIRECT_WITH_INDEX_4, "or.4-d-direct-s1-indirect-with-index-4", "or.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.4 #${d-imm8},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_OR_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_INDEX_4, "or.4-d-immediate-4-s1-indirect-with-index-4", "or.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.4 (${d-An},${d-r}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_OR_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_INDEX_4, "or.4-d-indirect-with-index-4-s1-indirect-with-index-4", "or.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.4 ${d-imm7-4}(${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_OR_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_INDEX_4, "or.4-d-indirect-with-offset-4-s1-indirect-with-index-4", "or.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.4 (${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_OR_4_D_INDIRECT_4_S1_INDIRECT_WITH_INDEX_4, "or.4-d-indirect-4-s1-indirect-with-index-4", "or.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.4 (${d-An})${d-i4-4}++,(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_OR_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, "or.4-d-indirect-with-post-increment-4-s1-indirect-with-index-4", "or.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.4 ${d-i4-4}(${d-An})++,(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_OR_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, "or.4-d-indirect-with-pre-increment-4-s1-indirect-with-index-4", "or.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.4 ${d-direct-addr},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_OR_4_D_DIRECT_S1_INDIRECT_WITH_OFFSET_4, "or.4-d-direct-s1-indirect-with-offset-4", "or.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.4 #${d-imm8},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_OR_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_OFFSET_4, "or.4-d-immediate-4-s1-indirect-with-offset-4", "or.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.4 (${d-An},${d-r}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_OR_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_OFFSET_4, "or.4-d-indirect-with-index-4-s1-indirect-with-offset-4", "or.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.4 ${d-imm7-4}(${d-An}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_OR_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_OFFSET_4, "or.4-d-indirect-with-offset-4-s1-indirect-with-offset-4", "or.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.4 (${d-An}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_OR_4_D_INDIRECT_4_S1_INDIRECT_WITH_OFFSET_4, "or.4-d-indirect-4-s1-indirect-with-offset-4", "or.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.4 (${d-An})${d-i4-4}++,${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_OR_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, "or.4-d-indirect-with-post-increment-4-s1-indirect-with-offset-4", "or.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.4 ${d-i4-4}(${d-An})++,${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_OR_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, "or.4-d-indirect-with-pre-increment-4-s1-indirect-with-offset-4", "or.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.4 ${d-direct-addr},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_OR_4_D_DIRECT_S1_INDIRECT_4, "or.4-d-direct-s1-indirect-4", "or.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.4 #${d-imm8},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_OR_4_D_IMMEDIATE_4_S1_INDIRECT_4, "or.4-d-immediate-4-s1-indirect-4", "or.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.4 (${d-An},${d-r}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_OR_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_4, "or.4-d-indirect-with-index-4-s1-indirect-4", "or.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.4 ${d-imm7-4}(${d-An}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_OR_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_4, "or.4-d-indirect-with-offset-4-s1-indirect-4", "or.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.4 (${d-An}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_OR_4_D_INDIRECT_4_S1_INDIRECT_4, "or.4-d-indirect-4-s1-indirect-4", "or.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.4 (${d-An})${d-i4-4}++,(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_OR_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_4, "or.4-d-indirect-with-post-increment-4-s1-indirect-4", "or.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.4 ${d-i4-4}(${d-An})++,(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_OR_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_4, "or.4-d-indirect-with-pre-increment-4-s1-indirect-4", "or.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.4 ${d-direct-addr},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_OR_4_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_4, "or.4-d-direct-s1-indirect-with-post-increment-4", "or.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.4 #${d-imm8},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_OR_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "or.4-d-immediate-4-s1-indirect-with-post-increment-4", "or.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.4 (${d-An},${d-r}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_OR_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "or.4-d-indirect-with-index-4-s1-indirect-with-post-increment-4", "or.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.4 ${d-imm7-4}(${d-An}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_OR_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "or.4-d-indirect-with-offset-4-s1-indirect-with-post-increment-4", "or.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.4 (${d-An}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_OR_4_D_INDIRECT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "or.4-d-indirect-4-s1-indirect-with-post-increment-4", "or.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.4 (${d-An})${d-i4-4}++,(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_OR_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "or.4-d-indirect-with-post-increment-4-s1-indirect-with-post-increment-4", "or.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.4 ${d-i4-4}(${d-An})++,(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_OR_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "or.4-d-indirect-with-pre-increment-4-s1-indirect-with-post-increment-4", "or.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.4 ${d-direct-addr},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_OR_4_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_4, "or.4-d-direct-s1-indirect-with-pre-increment-4", "or.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.4 #${d-imm8},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_OR_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "or.4-d-immediate-4-s1-indirect-with-pre-increment-4", "or.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.4 (${d-An},${d-r}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_OR_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "or.4-d-indirect-with-index-4-s1-indirect-with-pre-increment-4", "or.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.4 ${d-imm7-4}(${d-An}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_OR_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "or.4-d-indirect-with-offset-4-s1-indirect-with-pre-increment-4", "or.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.4 (${d-An}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_OR_4_D_INDIRECT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "or.4-d-indirect-4-s1-indirect-with-pre-increment-4", "or.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.4 (${d-An})${d-i4-4}++,${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_OR_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "or.4-d-indirect-with-post-increment-4-s1-indirect-with-pre-increment-4", "or.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.4 ${d-i4-4}(${d-An})++,${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_OR_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "or.4-d-indirect-with-pre-increment-4-s1-indirect-with-pre-increment-4", "or.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.2 ${d-direct-addr},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_OR_2_D_DIRECT_S1_DIRECT, "or.2-d-direct-s1-direct", "or.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.2 #${d-imm8},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_OR_2_D_IMMEDIATE_2_S1_DIRECT, "or.2-d-immediate-2-s1-direct", "or.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.2 (${d-An},${d-r}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_OR_2_D_INDIRECT_WITH_INDEX_2_S1_DIRECT, "or.2-d-indirect-with-index-2-s1-direct", "or.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.2 ${d-imm7-2}(${d-An}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_OR_2_D_INDIRECT_WITH_OFFSET_2_S1_DIRECT, "or.2-d-indirect-with-offset-2-s1-direct", "or.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.2 (${d-An}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_OR_2_D_INDIRECT_2_S1_DIRECT, "or.2-d-indirect-2-s1-direct", "or.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.2 (${d-An})${d-i4-2}++,${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_OR_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_DIRECT, "or.2-d-indirect-with-post-increment-2-s1-direct", "or.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.2 ${d-i4-2}(${d-An})++,${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_OR_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_DIRECT, "or.2-d-indirect-with-pre-increment-2-s1-direct", "or.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.2 ${d-direct-addr},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_OR_2_D_DIRECT_S1_IMMEDIATE, "or.2-d-direct-s1-immediate", "or.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.2 #${d-imm8},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_OR_2_D_IMMEDIATE_2_S1_IMMEDIATE, "or.2-d-immediate-2-s1-immediate", "or.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.2 (${d-An},${d-r}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_OR_2_D_INDIRECT_WITH_INDEX_2_S1_IMMEDIATE, "or.2-d-indirect-with-index-2-s1-immediate", "or.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.2 ${d-imm7-2}(${d-An}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_OR_2_D_INDIRECT_WITH_OFFSET_2_S1_IMMEDIATE, "or.2-d-indirect-with-offset-2-s1-immediate", "or.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.2 (${d-An}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_OR_2_D_INDIRECT_2_S1_IMMEDIATE, "or.2-d-indirect-2-s1-immediate", "or.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.2 (${d-An})${d-i4-2}++,#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_OR_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_IMMEDIATE, "or.2-d-indirect-with-post-increment-2-s1-immediate", "or.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.2 ${d-i4-2}(${d-An})++,#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_OR_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_IMMEDIATE, "or.2-d-indirect-with-pre-increment-2-s1-immediate", "or.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.2 ${d-direct-addr},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_OR_2_D_DIRECT_S1_INDIRECT_WITH_INDEX_2, "or.2-d-direct-s1-indirect-with-index-2", "or.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.2 #${d-imm8},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_OR_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_INDEX_2, "or.2-d-immediate-2-s1-indirect-with-index-2", "or.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.2 (${d-An},${d-r}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_OR_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_INDEX_2, "or.2-d-indirect-with-index-2-s1-indirect-with-index-2", "or.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.2 ${d-imm7-2}(${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_OR_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_INDEX_2, "or.2-d-indirect-with-offset-2-s1-indirect-with-index-2", "or.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.2 (${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_OR_2_D_INDIRECT_2_S1_INDIRECT_WITH_INDEX_2, "or.2-d-indirect-2-s1-indirect-with-index-2", "or.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.2 (${d-An})${d-i4-2}++,(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_OR_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_INDEX_2, "or.2-d-indirect-with-post-increment-2-s1-indirect-with-index-2", "or.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.2 ${d-i4-2}(${d-An})++,(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_OR_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_INDEX_2, "or.2-d-indirect-with-pre-increment-2-s1-indirect-with-index-2", "or.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.2 ${d-direct-addr},${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_OR_2_D_DIRECT_S1_INDIRECT_WITH_OFFSET_2, "or.2-d-direct-s1-indirect-with-offset-2", "or.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.2 #${d-imm8},${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_OR_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_OFFSET_2, "or.2-d-immediate-2-s1-indirect-with-offset-2", "or.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.2 (${d-An},${d-r}),${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_OR_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_OFFSET_2, "or.2-d-indirect-with-index-2-s1-indirect-with-offset-2", "or.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.2 ${d-imm7-2}(${d-An}),${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_OR_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_OFFSET_2, "or.2-d-indirect-with-offset-2-s1-indirect-with-offset-2", "or.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.2 (${d-An}),${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_OR_2_D_INDIRECT_2_S1_INDIRECT_WITH_OFFSET_2, "or.2-d-indirect-2-s1-indirect-with-offset-2", "or.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.2 (${d-An})${d-i4-2}++,${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_OR_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_OFFSET_2, "or.2-d-indirect-with-post-increment-2-s1-indirect-with-offset-2", "or.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.2 ${d-i4-2}(${d-An})++,${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_OR_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_OFFSET_2, "or.2-d-indirect-with-pre-increment-2-s1-indirect-with-offset-2", "or.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.2 ${d-direct-addr},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_OR_2_D_DIRECT_S1_INDIRECT_2, "or.2-d-direct-s1-indirect-2", "or.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.2 #${d-imm8},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_OR_2_D_IMMEDIATE_2_S1_INDIRECT_2, "or.2-d-immediate-2-s1-indirect-2", "or.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.2 (${d-An},${d-r}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_OR_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_2, "or.2-d-indirect-with-index-2-s1-indirect-2", "or.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.2 ${d-imm7-2}(${d-An}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_OR_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_2, "or.2-d-indirect-with-offset-2-s1-indirect-2", "or.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.2 (${d-An}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_OR_2_D_INDIRECT_2_S1_INDIRECT_2, "or.2-d-indirect-2-s1-indirect-2", "or.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.2 (${d-An})${d-i4-2}++,(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_OR_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_2, "or.2-d-indirect-with-post-increment-2-s1-indirect-2", "or.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.2 ${d-i4-2}(${d-An})++,(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_OR_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_2, "or.2-d-indirect-with-pre-increment-2-s1-indirect-2", "or.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.2 ${d-direct-addr},(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    UBICOM32_INSN_OR_2_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_2, "or.2-d-direct-s1-indirect-with-post-increment-2", "or.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.2 #${d-imm8},(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    UBICOM32_INSN_OR_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_POST_INCREMENT_2, "or.2-d-immediate-2-s1-indirect-with-post-increment-2", "or.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.2 (${d-An},${d-r}),(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    UBICOM32_INSN_OR_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_POST_INCREMENT_2, "or.2-d-indirect-with-index-2-s1-indirect-with-post-increment-2", "or.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.2 ${d-imm7-2}(${d-An}),(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    UBICOM32_INSN_OR_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_POST_INCREMENT_2, "or.2-d-indirect-with-offset-2-s1-indirect-with-post-increment-2", "or.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.2 (${d-An}),(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    UBICOM32_INSN_OR_2_D_INDIRECT_2_S1_INDIRECT_WITH_POST_INCREMENT_2, "or.2-d-indirect-2-s1-indirect-with-post-increment-2", "or.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.2 (${d-An})${d-i4-2}++,(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    UBICOM32_INSN_OR_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_POST_INCREMENT_2, "or.2-d-indirect-with-post-increment-2-s1-indirect-with-post-increment-2", "or.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.2 ${d-i4-2}(${d-An})++,(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    UBICOM32_INSN_OR_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_POST_INCREMENT_2, "or.2-d-indirect-with-pre-increment-2-s1-indirect-with-post-increment-2", "or.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.2 ${d-direct-addr},${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_OR_2_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_2, "or.2-d-direct-s1-indirect-with-pre-increment-2", "or.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.2 #${d-imm8},${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_OR_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, "or.2-d-immediate-2-s1-indirect-with-pre-increment-2", "or.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.2 (${d-An},${d-r}),${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_OR_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, "or.2-d-indirect-with-index-2-s1-indirect-with-pre-increment-2", "or.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.2 ${d-imm7-2}(${d-An}),${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_OR_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, "or.2-d-indirect-with-offset-2-s1-indirect-with-pre-increment-2", "or.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.2 (${d-An}),${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_OR_2_D_INDIRECT_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, "or.2-d-indirect-2-s1-indirect-with-pre-increment-2", "or.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.2 (${d-An})${d-i4-2}++,${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_OR_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, "or.2-d-indirect-with-post-increment-2-s1-indirect-with-pre-increment-2", "or.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* or.2 ${d-i4-2}(${d-An})++,${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_OR_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, "or.2-d-indirect-with-pre-increment-2-s1-indirect-with-pre-increment-2", "or.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.4 ${d-direct-addr},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_AND_4_D_DIRECT_S1_DIRECT, "and.4-d-direct-s1-direct", "and.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.4 #${d-imm8},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_AND_4_D_IMMEDIATE_4_S1_DIRECT, "and.4-d-immediate-4-s1-direct", "and.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.4 (${d-An},${d-r}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_AND_4_D_INDIRECT_WITH_INDEX_4_S1_DIRECT, "and.4-d-indirect-with-index-4-s1-direct", "and.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.4 ${d-imm7-4}(${d-An}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_AND_4_D_INDIRECT_WITH_OFFSET_4_S1_DIRECT, "and.4-d-indirect-with-offset-4-s1-direct", "and.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.4 (${d-An}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_AND_4_D_INDIRECT_4_S1_DIRECT, "and.4-d-indirect-4-s1-direct", "and.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.4 (${d-An})${d-i4-4}++,${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_AND_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_DIRECT, "and.4-d-indirect-with-post-increment-4-s1-direct", "and.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.4 ${d-i4-4}(${d-An})++,${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_AND_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_DIRECT, "and.4-d-indirect-with-pre-increment-4-s1-direct", "and.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.4 ${d-direct-addr},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_AND_4_D_DIRECT_S1_IMMEDIATE, "and.4-d-direct-s1-immediate", "and.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.4 #${d-imm8},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_AND_4_D_IMMEDIATE_4_S1_IMMEDIATE, "and.4-d-immediate-4-s1-immediate", "and.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.4 (${d-An},${d-r}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_AND_4_D_INDIRECT_WITH_INDEX_4_S1_IMMEDIATE, "and.4-d-indirect-with-index-4-s1-immediate", "and.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.4 ${d-imm7-4}(${d-An}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_AND_4_D_INDIRECT_WITH_OFFSET_4_S1_IMMEDIATE, "and.4-d-indirect-with-offset-4-s1-immediate", "and.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.4 (${d-An}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_AND_4_D_INDIRECT_4_S1_IMMEDIATE, "and.4-d-indirect-4-s1-immediate", "and.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.4 (${d-An})${d-i4-4}++,#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_AND_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_IMMEDIATE, "and.4-d-indirect-with-post-increment-4-s1-immediate", "and.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.4 ${d-i4-4}(${d-An})++,#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_AND_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_IMMEDIATE, "and.4-d-indirect-with-pre-increment-4-s1-immediate", "and.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.4 ${d-direct-addr},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_AND_4_D_DIRECT_S1_INDIRECT_WITH_INDEX_4, "and.4-d-direct-s1-indirect-with-index-4", "and.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.4 #${d-imm8},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_AND_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_INDEX_4, "and.4-d-immediate-4-s1-indirect-with-index-4", "and.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.4 (${d-An},${d-r}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_AND_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_INDEX_4, "and.4-d-indirect-with-index-4-s1-indirect-with-index-4", "and.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.4 ${d-imm7-4}(${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_AND_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_INDEX_4, "and.4-d-indirect-with-offset-4-s1-indirect-with-index-4", "and.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.4 (${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_AND_4_D_INDIRECT_4_S1_INDIRECT_WITH_INDEX_4, "and.4-d-indirect-4-s1-indirect-with-index-4", "and.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.4 (${d-An})${d-i4-4}++,(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_AND_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, "and.4-d-indirect-with-post-increment-4-s1-indirect-with-index-4", "and.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.4 ${d-i4-4}(${d-An})++,(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_AND_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, "and.4-d-indirect-with-pre-increment-4-s1-indirect-with-index-4", "and.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.4 ${d-direct-addr},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_AND_4_D_DIRECT_S1_INDIRECT_WITH_OFFSET_4, "and.4-d-direct-s1-indirect-with-offset-4", "and.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.4 #${d-imm8},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_AND_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_OFFSET_4, "and.4-d-immediate-4-s1-indirect-with-offset-4", "and.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.4 (${d-An},${d-r}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_AND_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_OFFSET_4, "and.4-d-indirect-with-index-4-s1-indirect-with-offset-4", "and.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.4 ${d-imm7-4}(${d-An}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_AND_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_OFFSET_4, "and.4-d-indirect-with-offset-4-s1-indirect-with-offset-4", "and.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.4 (${d-An}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_AND_4_D_INDIRECT_4_S1_INDIRECT_WITH_OFFSET_4, "and.4-d-indirect-4-s1-indirect-with-offset-4", "and.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.4 (${d-An})${d-i4-4}++,${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_AND_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, "and.4-d-indirect-with-post-increment-4-s1-indirect-with-offset-4", "and.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.4 ${d-i4-4}(${d-An})++,${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_AND_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, "and.4-d-indirect-with-pre-increment-4-s1-indirect-with-offset-4", "and.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.4 ${d-direct-addr},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_AND_4_D_DIRECT_S1_INDIRECT_4, "and.4-d-direct-s1-indirect-4", "and.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.4 #${d-imm8},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_AND_4_D_IMMEDIATE_4_S1_INDIRECT_4, "and.4-d-immediate-4-s1-indirect-4", "and.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.4 (${d-An},${d-r}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_AND_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_4, "and.4-d-indirect-with-index-4-s1-indirect-4", "and.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.4 ${d-imm7-4}(${d-An}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_AND_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_4, "and.4-d-indirect-with-offset-4-s1-indirect-4", "and.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.4 (${d-An}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_AND_4_D_INDIRECT_4_S1_INDIRECT_4, "and.4-d-indirect-4-s1-indirect-4", "and.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.4 (${d-An})${d-i4-4}++,(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_AND_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_4, "and.4-d-indirect-with-post-increment-4-s1-indirect-4", "and.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.4 ${d-i4-4}(${d-An})++,(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_AND_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_4, "and.4-d-indirect-with-pre-increment-4-s1-indirect-4", "and.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.4 ${d-direct-addr},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_AND_4_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_4, "and.4-d-direct-s1-indirect-with-post-increment-4", "and.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.4 #${d-imm8},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_AND_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "and.4-d-immediate-4-s1-indirect-with-post-increment-4", "and.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.4 (${d-An},${d-r}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_AND_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "and.4-d-indirect-with-index-4-s1-indirect-with-post-increment-4", "and.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.4 ${d-imm7-4}(${d-An}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_AND_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "and.4-d-indirect-with-offset-4-s1-indirect-with-post-increment-4", "and.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.4 (${d-An}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_AND_4_D_INDIRECT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "and.4-d-indirect-4-s1-indirect-with-post-increment-4", "and.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.4 (${d-An})${d-i4-4}++,(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_AND_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "and.4-d-indirect-with-post-increment-4-s1-indirect-with-post-increment-4", "and.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.4 ${d-i4-4}(${d-An})++,(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    UBICOM32_INSN_AND_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, "and.4-d-indirect-with-pre-increment-4-s1-indirect-with-post-increment-4", "and.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.4 ${d-direct-addr},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_AND_4_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_4, "and.4-d-direct-s1-indirect-with-pre-increment-4", "and.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.4 #${d-imm8},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_AND_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "and.4-d-immediate-4-s1-indirect-with-pre-increment-4", "and.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.4 (${d-An},${d-r}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_AND_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "and.4-d-indirect-with-index-4-s1-indirect-with-pre-increment-4", "and.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.4 ${d-imm7-4}(${d-An}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_AND_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "and.4-d-indirect-with-offset-4-s1-indirect-with-pre-increment-4", "and.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.4 (${d-An}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_AND_4_D_INDIRECT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "and.4-d-indirect-4-s1-indirect-with-pre-increment-4", "and.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.4 (${d-An})${d-i4-4}++,${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_AND_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "and.4-d-indirect-with-post-increment-4-s1-indirect-with-pre-increment-4", "and.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.4 ${d-i4-4}(${d-An})++,${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_AND_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, "and.4-d-indirect-with-pre-increment-4-s1-indirect-with-pre-increment-4", "and.4", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.2 ${d-direct-addr},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_AND_2_D_DIRECT_S1_DIRECT, "and.2-d-direct-s1-direct", "and.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.2 #${d-imm8},${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_AND_2_D_IMMEDIATE_2_S1_DIRECT, "and.2-d-immediate-2-s1-direct", "and.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.2 (${d-An},${d-r}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_AND_2_D_INDIRECT_WITH_INDEX_2_S1_DIRECT, "and.2-d-indirect-with-index-2-s1-direct", "and.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.2 ${d-imm7-2}(${d-An}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_AND_2_D_INDIRECT_WITH_OFFSET_2_S1_DIRECT, "and.2-d-indirect-with-offset-2-s1-direct", "and.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.2 (${d-An}),${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_AND_2_D_INDIRECT_2_S1_DIRECT, "and.2-d-indirect-2-s1-direct", "and.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.2 (${d-An})${d-i4-2}++,${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_AND_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_DIRECT, "and.2-d-indirect-with-post-increment-2-s1-direct", "and.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.2 ${d-i4-2}(${d-An})++,${s1-direct-addr},${s2} */
+  {
+    UBICOM32_INSN_AND_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_DIRECT, "and.2-d-indirect-with-pre-increment-2-s1-direct", "and.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.2 ${d-direct-addr},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_AND_2_D_DIRECT_S1_IMMEDIATE, "and.2-d-direct-s1-immediate", "and.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.2 #${d-imm8},#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_AND_2_D_IMMEDIATE_2_S1_IMMEDIATE, "and.2-d-immediate-2-s1-immediate", "and.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.2 (${d-An},${d-r}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_AND_2_D_INDIRECT_WITH_INDEX_2_S1_IMMEDIATE, "and.2-d-indirect-with-index-2-s1-immediate", "and.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.2 ${d-imm7-2}(${d-An}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_AND_2_D_INDIRECT_WITH_OFFSET_2_S1_IMMEDIATE, "and.2-d-indirect-with-offset-2-s1-immediate", "and.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.2 (${d-An}),#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_AND_2_D_INDIRECT_2_S1_IMMEDIATE, "and.2-d-indirect-2-s1-immediate", "and.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.2 (${d-An})${d-i4-2}++,#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_AND_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_IMMEDIATE, "and.2-d-indirect-with-post-increment-2-s1-immediate", "and.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.2 ${d-i4-2}(${d-An})++,#${s1-imm8},${s2} */
+  {
+    UBICOM32_INSN_AND_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_IMMEDIATE, "and.2-d-indirect-with-pre-increment-2-s1-immediate", "and.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.2 ${d-direct-addr},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_AND_2_D_DIRECT_S1_INDIRECT_WITH_INDEX_2, "and.2-d-direct-s1-indirect-with-index-2", "and.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.2 #${d-imm8},(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_AND_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_INDEX_2, "and.2-d-immediate-2-s1-indirect-with-index-2", "and.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.2 (${d-An},${d-r}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_AND_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_INDEX_2, "and.2-d-indirect-with-index-2-s1-indirect-with-index-2", "and.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.2 ${d-imm7-2}(${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_AND_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_INDEX_2, "and.2-d-indirect-with-offset-2-s1-indirect-with-index-2", "and.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.2 (${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_AND_2_D_INDIRECT_2_S1_INDIRECT_WITH_INDEX_2, "and.2-d-indirect-2-s1-indirect-with-index-2", "and.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.2 (${d-An})${d-i4-2}++,(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_AND_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_INDEX_2, "and.2-d-indirect-with-post-increment-2-s1-indirect-with-index-2", "and.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.2 ${d-i4-2}(${d-An})++,(${s1-An},${s1-r}),${s2} */
+  {
+    UBICOM32_INSN_AND_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_INDEX_2, "and.2-d-indirect-with-pre-increment-2-s1-indirect-with-index-2", "and.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.2 ${d-direct-addr},${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_AND_2_D_DIRECT_S1_INDIRECT_WITH_OFFSET_2, "and.2-d-direct-s1-indirect-with-offset-2", "and.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.2 #${d-imm8},${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_AND_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_OFFSET_2, "and.2-d-immediate-2-s1-indirect-with-offset-2", "and.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.2 (${d-An},${d-r}),${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_AND_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_OFFSET_2, "and.2-d-indirect-with-index-2-s1-indirect-with-offset-2", "and.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.2 ${d-imm7-2}(${d-An}),${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_AND_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_OFFSET_2, "and.2-d-indirect-with-offset-2-s1-indirect-with-offset-2", "and.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.2 (${d-An}),${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_AND_2_D_INDIRECT_2_S1_INDIRECT_WITH_OFFSET_2, "and.2-d-indirect-2-s1-indirect-with-offset-2", "and.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.2 (${d-An})${d-i4-2}++,${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_AND_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_OFFSET_2, "and.2-d-indirect-with-post-increment-2-s1-indirect-with-offset-2", "and.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.2 ${d-i4-2}(${d-An})++,${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_AND_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_OFFSET_2, "and.2-d-indirect-with-pre-increment-2-s1-indirect-with-offset-2", "and.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.2 ${d-direct-addr},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_AND_2_D_DIRECT_S1_INDIRECT_2, "and.2-d-direct-s1-indirect-2", "and.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.2 #${d-imm8},(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_AND_2_D_IMMEDIATE_2_S1_INDIRECT_2, "and.2-d-immediate-2-s1-indirect-2", "and.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.2 (${d-An},${d-r}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_AND_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_2, "and.2-d-indirect-with-index-2-s1-indirect-2", "and.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.2 ${d-imm7-2}(${d-An}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_AND_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_2, "and.2-d-indirect-with-offset-2-s1-indirect-2", "and.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.2 (${d-An}),(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_AND_2_D_INDIRECT_2_S1_INDIRECT_2, "and.2-d-indirect-2-s1-indirect-2", "and.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.2 (${d-An})${d-i4-2}++,(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_AND_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_2, "and.2-d-indirect-with-post-increment-2-s1-indirect-2", "and.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.2 ${d-i4-2}(${d-An})++,(${s1-An}),${s2} */
+  {
+    UBICOM32_INSN_AND_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_2, "and.2-d-indirect-with-pre-increment-2-s1-indirect-2", "and.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.2 ${d-direct-addr},(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    UBICOM32_INSN_AND_2_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_2, "and.2-d-direct-s1-indirect-with-post-increment-2", "and.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.2 #${d-imm8},(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    UBICOM32_INSN_AND_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_POST_INCREMENT_2, "and.2-d-immediate-2-s1-indirect-with-post-increment-2", "and.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.2 (${d-An},${d-r}),(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    UBICOM32_INSN_AND_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_POST_INCREMENT_2, "and.2-d-indirect-with-index-2-s1-indirect-with-post-increment-2", "and.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.2 ${d-imm7-2}(${d-An}),(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    UBICOM32_INSN_AND_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_POST_INCREMENT_2, "and.2-d-indirect-with-offset-2-s1-indirect-with-post-increment-2", "and.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.2 (${d-An}),(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    UBICOM32_INSN_AND_2_D_INDIRECT_2_S1_INDIRECT_WITH_POST_INCREMENT_2, "and.2-d-indirect-2-s1-indirect-with-post-increment-2", "and.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.2 (${d-An})${d-i4-2}++,(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    UBICOM32_INSN_AND_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_POST_INCREMENT_2, "and.2-d-indirect-with-post-increment-2-s1-indirect-with-post-increment-2", "and.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.2 ${d-i4-2}(${d-An})++,(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    UBICOM32_INSN_AND_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_POST_INCREMENT_2, "and.2-d-indirect-with-pre-increment-2-s1-indirect-with-post-increment-2", "and.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.2 ${d-direct-addr},${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_AND_2_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_2, "and.2-d-direct-s1-indirect-with-pre-increment-2", "and.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.2 #${d-imm8},${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_AND_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, "and.2-d-immediate-2-s1-indirect-with-pre-increment-2", "and.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.2 (${d-An},${d-r}),${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_AND_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, "and.2-d-indirect-with-index-2-s1-indirect-with-pre-increment-2", "and.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.2 ${d-imm7-2}(${d-An}),${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_AND_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, "and.2-d-indirect-with-offset-2-s1-indirect-with-pre-increment-2", "and.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.2 (${d-An}),${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_AND_2_D_INDIRECT_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, "and.2-d-indirect-2-s1-indirect-with-pre-increment-2", "and.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.2 (${d-An})${d-i4-2}++,${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_AND_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, "and.2-d-indirect-with-post-increment-2-s1-indirect-with-pre-increment-2", "and.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* and.2 ${d-i4-2}(${d-An})++,${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    UBICOM32_INSN_AND_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, "and.2-d-indirect-with-pre-increment-2-s1-indirect-with-pre-increment-2", "and.2", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* moveai ${An},#${imm25} */
+  {
+    UBICOM32_INSN_MOVEAI_V5, "moveai_v5", "moveai", 32,
+    { 0, { { { (1<<MACH_UBICOM32_NEWMOVEAI), 0 } } } }
+  },
+/* moveaih ${An},#${imm24} */
+  {
+    UBICOM32_INSN_MOVEAIH, "moveaih", "moveaih", 32,
+    { 0, { { { (1<<MACH_UBICOM32_NEWMOVEAISIMULATE), 0 } } } }
+  },
+/* moveai ${An},#${imm24} */
+  {
+    UBICOM32_INSN_MOVEAI, "moveai", "moveai", 32,
+    { 0, { { { (1<<MACH_UBICOM32_OLDMOVEAI), 0 } } } }
+  },
+/* __nop__ */
+  {
+    UBICOM32_INSN_NOP_INSN, "nop-insn", "__nop__", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* jmp${cc}${C}${P} $offset21 */
+  {
+    UBICOM32_INSN_JMPCC, "jmpcc", "jmp", 32,
+    { 0|A(COND_CTI), { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* call $An,$offset24 */
+  {
+    UBICOM32_INSN_CALL, "call", "call", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* calli ${An},${offset16}(${Am}) */
+  {
+    UBICOM32_INSN_CALLI, "calli", "calli", 32,
+    { 0|A(UNCOND_CTI), { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* suspend */
+  {
+    UBICOM32_INSN_SUSPEND, "suspend", "suspend", 32,
+    { 0, { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* __clracc__ ${dsp-destA} */
+  {
+    UBICOM32_INSN_DSP_CLRACC, "dsp-clracc", "__clracc__", 32,
+    { 0, { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+/* __unused__00_11 */
+  {
+    UBICOM32_INSN_UNUSED_00_11, "unused.00_11", "__unused__00_11", 32,
+    { 0|A(NO_DIS), { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* __unused__00_16 */
+  {
+    UBICOM32_INSN_UNUSED_00_16, "unused.00_16", "__unused__00_16", 32,
+    { 0|A(NO_DIS), { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* __unused__02_04 */
+  {
+    UBICOM32_INSN_UNUSED_02_04, "unused.02_04", "__unused__02_04", 32,
+    { 0|A(NO_DIS), { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* __unused__02_07 */
+  {
+    UBICOM32_INSN_UNUSED_02_07, "unused.02_07", "__unused__02_07", 32,
+    { 0|A(NO_DIS), { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* __unused__02_0D */
+  {
+    UBICOM32_INSN_UNUSED_02_0D, "unused.02_0D", "__unused__02_0D", 32,
+    { 0|A(NO_DIS), { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* __unused__02_0E */
+  {
+    UBICOM32_INSN_UNUSED_02_0E, "unused.02_0E", "__unused__02_0E", 32,
+    { 0|A(NO_DIS), { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* __unused__02_0F */
+  {
+    UBICOM32_INSN_UNUSED_02_0F, "unused.02_0F", "__unused__02_0F", 32,
+    { 0|A(NO_DIS), { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* __unused__02_17 */
+  {
+    UBICOM32_INSN_UNUSED_02_17, "unused.02_17", "__unused__02_17", 32,
+    { 0|A(NO_DIS), { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* __unused__02_19 */
+  {
+    UBICOM32_INSN_UNUSED_02_19, "unused.02_19", "__unused__02_19", 32,
+    { 0|A(NO_DIS), { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* __unused__02_1B */
+  {
+    UBICOM32_INSN_UNUSED_02_1B, "unused.02_1B", "__unused__02_1B", 32,
+    { 0|A(NO_DIS), { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* __unused__02_1D */
+  {
+    UBICOM32_INSN_UNUSED_02_1D, "unused.02_1D", "__unused__02_1D", 32,
+    { 0|A(NO_DIS), { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* __unused__01 */
+  {
+    UBICOM32_INSN_UNUSED_01, "unused.01", "__unused__01", 32,
+    { 0|A(NO_DIS), { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* __unused__03 */
+  {
+    UBICOM32_INSN_UNUSED_03, "unused.03", "__unused__03", 32,
+    { 0|A(NO_DIS), { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* __unused__07 */
+  {
+    UBICOM32_INSN_UNUSED_07, "unused.07", "__unused__07", 32,
+    { 0|A(NO_DIS), { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* __unused__17 */
+  {
+    UBICOM32_INSN_UNUSED_17, "unused.17", "__unused__17", 32,
+    { 0|A(NO_DIS), { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* __unused__1F */
+  {
+    UBICOM32_INSN_UNUSED_1F, "unused.1F", "__unused__1F", 32,
+    { 0|A(NO_DIS), { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* __unused__DSP_0c */
+  {
+    UBICOM32_INSN_UNUSED_DSP_0C, "unused.DSP_0c", "__unused__DSP_0c", 32,
+    { 0|A(NO_DIS), { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* __unused__DSP_0d */
+  {
+    UBICOM32_INSN_UNUSED_DSP_0D, "unused.DSP_0d", "__unused__DSP_0d", 32,
+    { 0|A(NO_DIS), { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* __unused__DSP_0e */
+  {
+    UBICOM32_INSN_UNUSED_DSP_0E, "unused.DSP_0e", "__unused__DSP_0e", 32,
+    { 0|A(NO_DIS), { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* __unused__DSP_0f */
+  {
+    UBICOM32_INSN_UNUSED_DSP_0F, "unused.DSP_0f", "__unused__DSP_0f", 32,
+    { 0|A(NO_DIS), { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* __unused__DSP_14 */
+  {
+    UBICOM32_INSN_UNUSED_DSP_14, "unused.DSP_14", "__unused__DSP_14", 32,
+    { 0|A(NO_DIS), { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* __unused__DSP_15 */
+  {
+    UBICOM32_INSN_UNUSED_DSP_15, "unused.DSP_15", "__unused__DSP_15", 32,
+    { 0|A(NO_DIS), { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* __unused__DSP_16 */
+  {
+    UBICOM32_INSN_UNUSED_DSP_16, "unused.DSP_16", "__unused__DSP_16", 32,
+    { 0|A(NO_DIS), { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* __unused__DSP_17 */
+  {
+    UBICOM32_INSN_UNUSED_DSP_17, "unused.DSP_17", "__unused__DSP_17", 32,
+    { 0|A(NO_DIS), { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* __unused__DSP_18 */
+  {
+    UBICOM32_INSN_UNUSED_DSP_18, "unused.DSP_18", "__unused__DSP_18", 32,
+    { 0|A(NO_DIS), { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* __unused__DSP_19 */
+  {
+    UBICOM32_INSN_UNUSED_DSP_19, "unused.DSP_19", "__unused__DSP_19", 32,
+    { 0|A(NO_DIS), { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* __unused__DSP_1a */
+  {
+    UBICOM32_INSN_UNUSED_DSP_1A, "unused.DSP_1a", "__unused__DSP_1a", 32,
+    { 0|A(NO_DIS), { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* __unused__DSP_1b */
+  {
+    UBICOM32_INSN_UNUSED_DSP_1B, "unused.DSP_1b", "__unused__DSP_1b", 32,
+    { 0|A(NO_DIS), { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* __unused__DSP_1c */
+  {
+    UBICOM32_INSN_UNUSED_DSP_1C, "unused.DSP_1c", "__unused__DSP_1c", 32,
+    { 0|A(NO_DIS), { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* __unused__DSP_1d */
+  {
+    UBICOM32_INSN_UNUSED_DSP_1D, "unused.DSP_1d", "__unused__DSP_1d", 32,
+    { 0|A(NO_DIS), { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* __unused__DSP_1e */
+  {
+    UBICOM32_INSN_UNUSED_DSP_1E, "unused.DSP_1e", "__unused__DSP_1e", 32,
+    { 0|A(NO_DIS), { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* __unused__DSP_1f */
+  {
+    UBICOM32_INSN_UNUSED_DSP_1F, "unused.DSP_1f", "__unused__DSP_1f", 32,
+    { 0|A(NO_DIS), { { { (1<<MACH_BASE), 0 } } } }
+  },
+};
+
+#undef OP
+#undef A
+
+/* Initialize anything needed to be done once, before any cpu_open call.  */
+
+static void
+init_tables (void)
+{
+}
+
+static const CGEN_MACH * lookup_mach_via_bfd_name (const CGEN_MACH *, const char *);
+static void build_hw_table      (CGEN_CPU_TABLE *);
+static void build_ifield_table  (CGEN_CPU_TABLE *);
+static void build_operand_table (CGEN_CPU_TABLE *);
+static void build_insn_table    (CGEN_CPU_TABLE *);
+static void ubicom32_cgen_rebuild_tables (CGEN_CPU_TABLE *);
+
+/* Subroutine of ubicom32_cgen_cpu_open to look up a mach via its bfd name.  */
+
+static const CGEN_MACH *
+lookup_mach_via_bfd_name (const CGEN_MACH *table, const char *name)
+{
+  while (table->name)
+    {
+      if (strcmp (name, table->bfd_name) == 0)
+	return table;
+      ++table;
+    }
+  abort ();
+}
+
+/* Subroutine of ubicom32_cgen_cpu_open to build the hardware table.  */
+
+static void
+build_hw_table (CGEN_CPU_TABLE *cd)
+{
+  int i;
+  int machs = cd->machs;
+  const CGEN_HW_ENTRY *init = & ubicom32_cgen_hw_table[0];
+  /* MAX_HW is only an upper bound on the number of selected entries.
+     However each entry is indexed by it's enum so there can be holes in
+     the table.  */
+  const CGEN_HW_ENTRY **selected =
+    (const CGEN_HW_ENTRY **) xmalloc (MAX_HW * sizeof (CGEN_HW_ENTRY *));
+
+  cd->hw_table.init_entries = init;
+  cd->hw_table.entry_size = sizeof (CGEN_HW_ENTRY);
+  memset (selected, 0, MAX_HW * sizeof (CGEN_HW_ENTRY *));
+  /* ??? For now we just use machs to determine which ones we want.  */
+  for (i = 0; init[i].name != NULL; ++i)
+    if (CGEN_HW_ATTR_VALUE (&init[i], CGEN_HW_MACH)
+	& machs)
+      selected[init[i].type] = &init[i];
+  cd->hw_table.entries = selected;
+  cd->hw_table.num_entries = MAX_HW;
+}
+
+/* Subroutine of ubicom32_cgen_cpu_open to build the hardware table.  */
+
+static void
+build_ifield_table (CGEN_CPU_TABLE *cd)
+{
+  cd->ifld_table = & ubicom32_cgen_ifld_table[0];
+}
+
+/* Subroutine of ubicom32_cgen_cpu_open to build the hardware table.  */
+
+static void
+build_operand_table (CGEN_CPU_TABLE *cd)
+{
+  int i;
+  int machs = cd->machs;
+  const CGEN_OPERAND *init = & ubicom32_cgen_operand_table[0];
+  /* MAX_OPERANDS is only an upper bound on the number of selected entries.
+     However each entry is indexed by it's enum so there can be holes in
+     the table.  */
+  const CGEN_OPERAND **selected = xmalloc (MAX_OPERANDS * sizeof (* selected));
+
+  cd->operand_table.init_entries = init;
+  cd->operand_table.entry_size = sizeof (CGEN_OPERAND);
+  memset (selected, 0, MAX_OPERANDS * sizeof (CGEN_OPERAND *));
+  /* ??? For now we just use mach to determine which ones we want.  */
+  for (i = 0; init[i].name != NULL; ++i)
+    if (CGEN_OPERAND_ATTR_VALUE (&init[i], CGEN_OPERAND_MACH)
+	& machs)
+      selected[init[i].type] = &init[i];
+  cd->operand_table.entries = selected;
+  cd->operand_table.num_entries = MAX_OPERANDS;
+}
+
+/* Subroutine of ubicom32_cgen_cpu_open to build the hardware table.
+   ??? This could leave out insns not supported by the specified mach/isa,
+   but that would cause errors like "foo only supported by bar" to become
+   "unknown insn", so for now we include all insns and require the app to
+   do the checking later.
+   ??? On the other hand, parsing of such insns may require their hardware or
+   operand elements to be in the table [which they mightn't be].  */
+
+static void
+build_insn_table (CGEN_CPU_TABLE *cd)
+{
+  int i;
+  const CGEN_IBASE *ib = & ubicom32_cgen_insn_table[0];
+  CGEN_INSN *insns = xmalloc (MAX_INSNS * sizeof (CGEN_INSN));
+
+  memset (insns, 0, MAX_INSNS * sizeof (CGEN_INSN));
+  for (i = 0; i < MAX_INSNS; ++i)
+    insns[i].base = &ib[i];
+  cd->insn_table.init_entries = insns;
+  cd->insn_table.entry_size = sizeof (CGEN_IBASE);
+  cd->insn_table.num_init_entries = MAX_INSNS;
+}
+
+/* Subroutine of ubicom32_cgen_cpu_open to rebuild the tables.  */
+
+static void
+ubicom32_cgen_rebuild_tables (CGEN_CPU_TABLE *cd)
+{
+  int i;
+  CGEN_BITSET *isas = cd->isas;
+  unsigned int machs = cd->machs;
+
+  cd->int_insn_p = CGEN_INT_INSN_P;
+
+  /* Data derived from the isa spec.  */
+#define UNSET (CGEN_SIZE_UNKNOWN + 1)
+  cd->default_insn_bitsize = UNSET;
+  cd->base_insn_bitsize = UNSET;
+  cd->min_insn_bitsize = 65535; /* Some ridiculously big number.  */
+  cd->max_insn_bitsize = 0;
+  for (i = 0; i < MAX_ISAS; ++i)
+    if (cgen_bitset_contains (isas, i))
+      {
+	const CGEN_ISA *isa = & ubicom32_cgen_isa_table[i];
+
+	/* Default insn sizes of all selected isas must be
+	   equal or we set the result to 0, meaning "unknown".  */
+	if (cd->default_insn_bitsize == UNSET)
+	  cd->default_insn_bitsize = isa->default_insn_bitsize;
+	else if (isa->default_insn_bitsize == cd->default_insn_bitsize)
+	  ; /* This is ok.  */
+	else
+	  cd->default_insn_bitsize = CGEN_SIZE_UNKNOWN;
+
+	/* Base insn sizes of all selected isas must be equal
+	   or we set the result to 0, meaning "unknown".  */
+	if (cd->base_insn_bitsize == UNSET)
+	  cd->base_insn_bitsize = isa->base_insn_bitsize;
+	else if (isa->base_insn_bitsize == cd->base_insn_bitsize)
+	  ; /* This is ok.  */
+	else
+	  cd->base_insn_bitsize = CGEN_SIZE_UNKNOWN;
+
+	/* Set min,max insn sizes.  */
+	if (isa->min_insn_bitsize < cd->min_insn_bitsize)
+	  cd->min_insn_bitsize = isa->min_insn_bitsize;
+	if (isa->max_insn_bitsize > cd->max_insn_bitsize)
+	  cd->max_insn_bitsize = isa->max_insn_bitsize;
+      }
+
+  /* Data derived from the mach spec.  */
+  for (i = 0; i < MAX_MACHS; ++i)
+    if (((1 << i) & machs) != 0)
+      {
+	const CGEN_MACH *mach = & ubicom32_cgen_mach_table[i];
+
+	if (mach->insn_chunk_bitsize != 0)
+	{
+	  if (cd->insn_chunk_bitsize != 0 && cd->insn_chunk_bitsize != mach->insn_chunk_bitsize)
+	    {
+	      fprintf (stderr, "ubicom32_cgen_rebuild_tables: conflicting insn-chunk-bitsize values: `%d' vs. `%d'\n",
+		       cd->insn_chunk_bitsize, mach->insn_chunk_bitsize);
+	      abort ();
+	    }
+
+ 	  cd->insn_chunk_bitsize = mach->insn_chunk_bitsize;
+	}
+      }
+
+  /* Determine which hw elements are used by MACH.  */
+  build_hw_table (cd);
+
+  /* Build the ifield table.  */
+  build_ifield_table (cd);
+
+  /* Determine which operands are used by MACH/ISA.  */
+  build_operand_table (cd);
+
+  /* Build the instruction table.  */
+  build_insn_table (cd);
+}
+
+/* Initialize a cpu table and return a descriptor.
+   It's much like opening a file, and must be the first function called.
+   The arguments are a set of (type/value) pairs, terminated with
+   CGEN_CPU_OPEN_END.
+
+   Currently supported values:
+   CGEN_CPU_OPEN_ISAS:    bitmap of values in enum isa_attr
+   CGEN_CPU_OPEN_MACHS:   bitmap of values in enum mach_attr
+   CGEN_CPU_OPEN_BFDMACH: specify 1 mach using bfd name
+   CGEN_CPU_OPEN_ENDIAN:  specify endian choice
+   CGEN_CPU_OPEN_END:     terminates arguments
+
+   ??? Simultaneous multiple isas might not make sense, but it's not (yet)
+   precluded.
+
+   ??? We only support ISO C stdargs here, not K&R.
+   Laziness, plus experiment to see if anything requires K&R - eventually
+   K&R will no longer be supported - e.g. GDB is currently trying this.  */
+
+CGEN_CPU_DESC
+ubicom32_cgen_cpu_open (enum cgen_cpu_open_arg arg_type, ...)
+{
+  CGEN_CPU_TABLE *cd = (CGEN_CPU_TABLE *) xmalloc (sizeof (CGEN_CPU_TABLE));
+  static int init_p;
+  CGEN_BITSET *isas = 0;  /* 0 = "unspecified" */
+  unsigned int machs = 0; /* 0 = "unspecified" */
+  enum cgen_endian endian = CGEN_ENDIAN_UNKNOWN;
+  va_list ap;
+
+  if (! init_p)
+    {
+      init_tables ();
+      init_p = 1;
+    }
+
+  memset (cd, 0, sizeof (*cd));
+
+  va_start (ap, arg_type);
+  while (arg_type != CGEN_CPU_OPEN_END)
+    {
+      switch (arg_type)
+	{
+	case CGEN_CPU_OPEN_ISAS :
+	  isas = va_arg (ap, CGEN_BITSET *);
+	  break;
+	case CGEN_CPU_OPEN_MACHS :
+	  machs = va_arg (ap, unsigned int);
+	  break;
+	case CGEN_CPU_OPEN_BFDMACH :
+	  {
+	    const char *name = va_arg (ap, const char *);
+	    const CGEN_MACH *mach =
+	      lookup_mach_via_bfd_name (ubicom32_cgen_mach_table, name);
+
+	    machs |= 1 << mach->num;
+	    break;
+	  }
+	case CGEN_CPU_OPEN_ENDIAN :
+	  endian = va_arg (ap, enum cgen_endian);
+	  break;
+	default :
+	  fprintf (stderr, "ubicom32_cgen_cpu_open: unsupported argument `%d'\n",
+		   arg_type);
+	  abort (); /* ??? return NULL? */
+	}
+      arg_type = va_arg (ap, enum cgen_cpu_open_arg);
+    }
+  va_end (ap);
+
+  /* Mach unspecified means "all".  */
+  if (machs == 0)
+    machs = (1 << MAX_MACHS) - 1;
+  /* Base mach is always selected.  */
+  machs |= 1;
+  if (endian == CGEN_ENDIAN_UNKNOWN)
+    {
+      /* ??? If target has only one, could have a default.  */
+      fprintf (stderr, "ubicom32_cgen_cpu_open: no endianness specified\n");
+      abort ();
+    }
+
+  cd->isas = cgen_bitset_copy (isas);
+  cd->machs = machs;
+  cd->endian = endian;
+  /* FIXME: for the sparc case we can determine insn-endianness statically.
+     The worry here is where both data and insn endian can be independently
+     chosen, in which case this function will need another argument.
+     Actually, will want to allow for more arguments in the future anyway.  */
+  cd->insn_endian = endian;
+
+  /* Table (re)builder.  */
+  cd->rebuild_tables = ubicom32_cgen_rebuild_tables;
+  ubicom32_cgen_rebuild_tables (cd);
+
+  /* Default to not allowing signed overflow.  */
+  cd->signed_overflow_ok_p = 0;
+  
+  return (CGEN_CPU_DESC) cd;
+}
+
+/* Cover fn to ubicom32_cgen_cpu_open to handle the simple case of 1 isa, 1 mach.
+   MACH_NAME is the bfd name of the mach.  */
+
+CGEN_CPU_DESC
+ubicom32_cgen_cpu_open_1 (const char *mach_name, enum cgen_endian endian)
+{
+  return ubicom32_cgen_cpu_open (CGEN_CPU_OPEN_BFDMACH, mach_name,
+			       CGEN_CPU_OPEN_ENDIAN, endian,
+			       CGEN_CPU_OPEN_END);
+}
+
+/* Close a cpu table.
+   ??? This can live in a machine independent file, but there's currently
+   no place to put this file (there's no libcgen).  libopcodes is the wrong
+   place as some simulator ports use this but they don't use libopcodes.  */
+
+void
+ubicom32_cgen_cpu_close (CGEN_CPU_DESC cd)
+{
+  unsigned int i;
+  const CGEN_INSN *insns;
+
+  if (cd->macro_insn_table.init_entries)
+    {
+      insns = cd->macro_insn_table.init_entries;
+      for (i = 0; i < cd->macro_insn_table.num_init_entries; ++i, ++insns)
+	if (CGEN_INSN_RX ((insns)))
+	  regfree (CGEN_INSN_RX (insns));
+    }
+
+  if (cd->insn_table.init_entries)
+    {
+      insns = cd->insn_table.init_entries;
+      for (i = 0; i < cd->insn_table.num_init_entries; ++i, ++insns)
+	if (CGEN_INSN_RX (insns))
+	  regfree (CGEN_INSN_RX (insns));
+    }  
+
+  if (cd->macro_insn_table.init_entries)
+    free ((CGEN_INSN *) cd->macro_insn_table.init_entries);
+
+  if (cd->insn_table.init_entries)
+    free ((CGEN_INSN *) cd->insn_table.init_entries);
+
+  if (cd->hw_table.entries)
+    free ((CGEN_HW_ENTRY *) cd->hw_table.entries);
+
+  if (cd->operand_table.entries)
+    free ((CGEN_HW_ENTRY *) cd->operand_table.entries);
+
+  free (cd);
+}
+
--- /dev/null
+++ b/opcodes/ubicom32-desc.h
@@ -0,0 +1,378 @@
+/* CPU data header for ubicom32.
+
+THIS FILE IS MACHINE GENERATED WITH CGEN.
+
+Copyright 1996-2007 Free Software Foundation, Inc.
+
+This file is part of the GNU Binutils and/or GDB, the GNU debugger.
+
+   This file is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 3, or (at your option)
+   any later version.
+
+   It is distributed in the hope that it will be useful, but WITHOUT
+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
+   License for more details.
+
+   You should have received a copy of the GNU General Public License along
+   with this program; if not, write to the Free Software Foundation, Inc.,
+   51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.
+
+*/
+
+#ifndef UBICOM32_CPU_H
+#define UBICOM32_CPU_H
+
+#include "opcode/cgen-bitset.h"
+
+#define CGEN_ARCH ubicom32
+
+/* Given symbol S, return ubicom32_cgen_<S>.  */
+#if defined (__STDC__) || defined (ALMOST_STDC) || defined (HAVE_STRINGIZE)
+#define CGEN_SYM(s) ubicom32##_cgen_##s
+#else
+#define CGEN_SYM(s) ubicom32/**/_cgen_/**/s
+#endif
+
+
+/* Selected cpu families.  */
+#define HAVE_CPU_UBICOM32BF
+
+#define CGEN_INSN_LSB0_P 1
+
+/* Minimum size of any insn (in bytes).  */
+#define CGEN_MIN_INSN_SIZE 4
+
+/* Maximum size of any insn (in bytes).  */
+#define CGEN_MAX_INSN_SIZE 4
+
+#define CGEN_INT_INSN_P 1
+
+/* Maximum number of syntax elements in an instruction.  */
+#define CGEN_ACTUAL_MAX_SYNTAX_ELEMENTS 27
+
+/* CGEN_MNEMONIC_OPERANDS is defined if mnemonics have operands.
+   e.g. In "b,a foo" the ",a" is an operand.  If mnemonics have operands
+   we can't hash on everything up to the space.  */
+#define CGEN_MNEMONIC_OPERANDS
+
+/* Maximum number of fields in an instruction.  */
+#define CGEN_ACTUAL_MAX_IFMT_OPERANDS 15
+
+/* Enums.  */
+
+/* Enum declaration for insn format enums for moveai.  */
+typedef enum insn_opmoveai {
+  OP_MOVEAI_MOVEAI = 14
+} INSN_OPMOVEAI;
+
+/* Enum declaration for insn format enums.  */
+typedef enum insn_op1 {
+  OP_X0, OP_UNUSED_01, OP_X2, OP_UNUSED_03
+ , OP_BSET, OP_BCLR, OP_DSP, OP_UNUSED_07
+ , OP_AND_2, OP_AND_4, OP_OR_2, OP_OR_4
+ , OP_XOR_2, OP_XOR_4, OP_ADD_2, OP_ADD_4
+ , OP_ADDC, OP_SUB_2, OP_SUB_4, OP_SUBC
+ , OP_PXBLEND, OP_PXVI, OP_PXADDS, OP_UNUSED_17
+ , OP_CMPI, OP_MOVEI, OP_JMP, OP_CALL
+ , OP_MOVEAI, OP_MOVEAIH, OP_CALLI, OP_UNUSED_1F
+} INSN_OP1;
+
+/* Enum declaration for insn x0 opcode ext enums.  */
+typedef enum insn_op2 {
+  OPX0_UNUSED_00, OPX0_SUSPEND, OPX0_FLUSH, OPX0_SYNC
+ , OPX0_RET, OPX0_PREFETCH, OPX0_IREAD, OPX0_BKPT
+ , OPX0_SYSRET, OPX0_SYSCALL, OPX0_NOT_4, OPX0_NOT_2
+ , OPX0_MOVE_4, OPX0_MOVE_2, OPX0_MOVEA, OPX0_MOVE_1
+ , OPX0_IWRITE, OPX0_UNUSED_11, OPX0_SETCSR, OPX0_TBSET
+ , OPX0_TBCLR, OPX0_EXT_2, OPX0_UNUSED_16, OPX0_EXT_1
+ , OPX0_SWAPB_2, OPX0_SWAPB_4, OPX0_PXCNV, OPX0_PXCNV_T
+ , OPX0_LEA_4, OPX0_LEA_2, OPX0_PDEC, OPX0_LEA_1
+} INSN_OP2;
+
+/* Enum declaration for insn x2 opcode ext enums.  */
+typedef enum insn_opext {
+  OPX2_PXHI, OPX2_MULS, OPX2_PXHI_S, OPX2_MULU
+ , OPX2_UNUSED_04, OPX2_MULF, OPX2_BTST, OPX2_UNUSED_07
+ , OPX2_CRCGEN, OPX2_MAC, OPX2_LSL_1, OPX2_LSR_1
+ , OPX2_ASR_1, OPX2_UNUSED_0D, OPX2_UNUSED_0E, OPX2_UNUSED_0F
+ , OPX2_LSL_4, OPX2_LSL_2, OPX2_LSR_4, OPX2_LSR_2
+ , OPX2_ASR_4, OPX2_ASR_2, OPX2_BFEXTU, OPX2_UNUSED_17
+ , OPX2_BFRVRS, OPX2_UNUSED_19, OPX2_SHFTD, OPX2_UNUSED_1B
+ , OPX2_MERGE, OPX2_UNUSED_1D, OPX2_SHMRG_2, OPX2_SHMRG_1
+} INSN_OPEXT;
+
+/* Enum declaration for insn dsp opcode ext enums.  */
+typedef enum insn_dsp_subop {
+  OPDSP_MULS, OPDSP_MACS, OPDSP_MULU, OPDSP_MACU
+ , OPDSP_MULF, OPDSP_MACF, OPDSP_MACS_4, OPDSP_MACUS
+ , OPDSP_MULS_4, OPDSP_MSUF, OPDSP_MULU_4, OPDSP_MACU_4
+ , OPDSP_UNUSED_0C, OPDSP_UNUSED_0D, OPDSP_UNUSED_0E, OPDSP_UNUSED_0F
+ , OPDSP_MADD_4, OPDSP_MADD_2, OPDSP_MSUB_4, OPDSP_MSUB_2
+ , OPDSP_UNUSED_14, OPDSP_UNUSED_15, OPDSP_UNUSED_16, OPDSP_UNUSED_17
+ , OPDSP_UNUSED_18, OPDSP_UNUSED_19, OPDSP_UNUSED_1A, OPDSP_UNUSED_1B
+ , OPDSP_UNUSED_1C, OPDSP_UNUSED_1D, OPDSP_UNUSED_1E, OPDSP_UNUSED_1F
+} INSN_DSP_SUBOP;
+
+/* Enum declaration for .  */
+typedef enum data_names {
+  H_DR_D0, H_DR_D1, H_DR_D2, H_DR_D3
+ , H_DR_D4, H_DR_D5, H_DR_D6, H_DR_D7
+ , H_DR_D8, H_DR_D9, H_DR_D10, H_DR_D11
+ , H_DR_D12, H_DR_D13, H_DR_D14, H_DR_D15
+} DATA_NAMES;
+
+/* Enum declaration for .  */
+typedef enum addr_names {
+  H_AR_SP = 7, H_AR_A0 = 0, H_AR_A1 = 1, H_AR_A2 = 2
+ , H_AR_A3 = 3, H_AR_A4 = 4, H_AR_A5 = 5, H_AR_A6 = 6
+ , H_AR_A7 = 7
+} ADDR_NAMES;
+
+/* Enum declaration for .  */
+typedef enum acc_names {
+  ACC_LOS_ACC0, ACC_LOS_ACC1
+} ACC_NAMES;
+
+/* Enum declaration for .  */
+typedef enum spad_names {
+  H_SP_SCRATCHPAD0 = 0, H_SP_SCRATCHPAD1 = 0, H_SP_SCRATCHPAD2 = 0, H_SP_SCRATCHPAD3 = 0
+ , H_SP_SCRATCHPAD4 = 0, H_SP_SCRATCHPAD5 = 0
+} SPAD_NAMES;
+
+/* Attributes.  */
+
+/* Enum declaration for machine type selection.  */
+typedef enum mach_attr {
+  MACH_BASE, MACH_IP3035, MACH_UBICOM32DSP, MACH_IP3023COMPATIBILITY
+ , MACH_UBICOM32_VER4, MACH_UBICOM32_VER5, MACH_UBICOM32_OLDMOVEAI, MACH_UBICOM32_NEWMOVEAI
+ , MACH_UBICOM32_NEWMOVEAISIMULATE, MACH_MAX
+} MACH_ATTR;
+
+/* Enum declaration for instruction set selection.  */
+typedef enum isa_attr {
+  ISA_UBICOM32, ISA_MAX
+} ISA_ATTR;
+
+/* Number of architecture variants.  */
+#define MAX_ISAS  1
+#define MAX_MACHS ((int) MACH_MAX)
+
+/* Ifield support.  */
+
+/* Ifield attribute indices.  */
+
+/* Enum declaration for cgen_ifld attrs.  */
+typedef enum cgen_ifld_attr {
+  CGEN_IFLD_VIRTUAL, CGEN_IFLD_PCREL_ADDR, CGEN_IFLD_ABS_ADDR, CGEN_IFLD_RESERVED
+ , CGEN_IFLD_SIGN_OPT, CGEN_IFLD_SIGNED, CGEN_IFLD_END_BOOLS, CGEN_IFLD_START_NBOOLS = 31
+ , CGEN_IFLD_MACH, CGEN_IFLD_END_NBOOLS
+} CGEN_IFLD_ATTR;
+
+/* Number of non-boolean elements in cgen_ifld_attr.  */
+#define CGEN_IFLD_NBOOL_ATTRS (CGEN_IFLD_END_NBOOLS - CGEN_IFLD_START_NBOOLS - 1)
+
+/* cgen_ifld attribute accessor macros.  */
+#define CGEN_ATTR_CGEN_IFLD_MACH_VALUE(attrs) ((attrs)->nonbool[CGEN_IFLD_MACH-CGEN_IFLD_START_NBOOLS-1].nonbitset)
+#define CGEN_ATTR_CGEN_IFLD_VIRTUAL_VALUE(attrs) (((attrs)->bool & (1 << CGEN_IFLD_VIRTUAL)) != 0)
+#define CGEN_ATTR_CGEN_IFLD_PCREL_ADDR_VALUE(attrs) (((attrs)->bool & (1 << CGEN_IFLD_PCREL_ADDR)) != 0)
+#define CGEN_ATTR_CGEN_IFLD_ABS_ADDR_VALUE(attrs) (((attrs)->bool & (1 << CGEN_IFLD_ABS_ADDR)) != 0)
+#define CGEN_ATTR_CGEN_IFLD_RESERVED_VALUE(attrs) (((attrs)->bool & (1 << CGEN_IFLD_RESERVED)) != 0)
+#define CGEN_ATTR_CGEN_IFLD_SIGN_OPT_VALUE(attrs) (((attrs)->bool & (1 << CGEN_IFLD_SIGN_OPT)) != 0)
+#define CGEN_ATTR_CGEN_IFLD_SIGNED_VALUE(attrs) (((attrs)->bool & (1 << CGEN_IFLD_SIGNED)) != 0)
+
+/* Enum declaration for ubicom32 ifield types.  */
+typedef enum ifield_type {
+  UBICOM32_F_NIL, UBICOM32_F_ANYOF, UBICOM32_F_D, UBICOM32_F_D_BIT10
+ , UBICOM32_F_D_TYPE, UBICOM32_F_D_R, UBICOM32_F_D_M, UBICOM32_F_D_I4_1
+ , UBICOM32_F_D_I4_2, UBICOM32_F_D_I4_4, UBICOM32_F_D_AN, UBICOM32_F_D_DIRECT
+ , UBICOM32_F_D_IMM8, UBICOM32_F_D_IMM7_T, UBICOM32_F_D_IMM7_B, UBICOM32_F_D_IMM7_1
+ , UBICOM32_F_D_IMM7_2, UBICOM32_F_D_IMM7_4, UBICOM32_F_S1, UBICOM32_F_S1_BIT10
+ , UBICOM32_F_S1_TYPE, UBICOM32_F_S1_R, UBICOM32_F_S1_M, UBICOM32_F_S1_I4_1
+ , UBICOM32_F_S1_I4_2, UBICOM32_F_S1_I4_4, UBICOM32_F_S1_AN, UBICOM32_F_S1_DIRECT
+ , UBICOM32_F_S1_IMM8, UBICOM32_F_S1_IMM7_T, UBICOM32_F_S1_IMM7_B, UBICOM32_F_S1_IMM7_1
+ , UBICOM32_F_S1_IMM7_2, UBICOM32_F_S1_IMM7_4, UBICOM32_F_OP1, UBICOM32_F_OPMOVEAI
+ , UBICOM32_F_OP2, UBICOM32_F_BIT26, UBICOM32_F_OPEXT, UBICOM32_F_COND
+ , UBICOM32_F_IMM16_1, UBICOM32_F_IMM16_2, UBICOM32_F_O21, UBICOM32_F_O23_21
+ , UBICOM32_F_O20_0, UBICOM32_F_O24, UBICOM32_F_IMM23_21, UBICOM32_F_IMM24
+ , UBICOM32_F_IMM24_21, UBICOM32_F_IMM25, UBICOM32_F_O15_13, UBICOM32_F_O12_8
+ , UBICOM32_F_O7_5, UBICOM32_F_O4_0, UBICOM32_F_O16, UBICOM32_F_AN
+ , UBICOM32_F_AM, UBICOM32_F_DN, UBICOM32_F_BIT5, UBICOM32_F_P
+ , UBICOM32_F_C, UBICOM32_F_INT, UBICOM32_F_DSP_C, UBICOM32_F_DSP_T
+ , UBICOM32_F_DSP_S2_SEL, UBICOM32_F_DSP_R, UBICOM32_F_DSP_DESTA, UBICOM32_F_DSP_B15
+ , UBICOM32_F_DSP_S2, UBICOM32_F_DSP_J, UBICOM32_F_S2, UBICOM32_F_B15
+ , UBICOM32_F_MAX
+} IFIELD_TYPE;
+
+#define MAX_IFLD ((int) UBICOM32_F_MAX)
+
+/* Hardware attribute indices.  */
+
+/* Enum declaration for cgen_hw attrs.  */
+typedef enum cgen_hw_attr {
+  CGEN_HW_VIRTUAL, CGEN_HW_CACHE_ADDR, CGEN_HW_PC, CGEN_HW_PROFILE
+ , CGEN_HW_END_BOOLS, CGEN_HW_START_NBOOLS = 31, CGEN_HW_MACH, CGEN_HW_END_NBOOLS
+} CGEN_HW_ATTR;
+
+/* Number of non-boolean elements in cgen_hw_attr.  */
+#define CGEN_HW_NBOOL_ATTRS (CGEN_HW_END_NBOOLS - CGEN_HW_START_NBOOLS - 1)
+
+/* cgen_hw attribute accessor macros.  */
+#define CGEN_ATTR_CGEN_HW_MACH_VALUE(attrs) ((attrs)->nonbool[CGEN_HW_MACH-CGEN_HW_START_NBOOLS-1].nonbitset)
+#define CGEN_ATTR_CGEN_HW_VIRTUAL_VALUE(attrs) (((attrs)->bool & (1 << CGEN_HW_VIRTUAL)) != 0)
+#define CGEN_ATTR_CGEN_HW_CACHE_ADDR_VALUE(attrs) (((attrs)->bool & (1 << CGEN_HW_CACHE_ADDR)) != 0)
+#define CGEN_ATTR_CGEN_HW_PC_VALUE(attrs) (((attrs)->bool & (1 << CGEN_HW_PC)) != 0)
+#define CGEN_ATTR_CGEN_HW_PROFILE_VALUE(attrs) (((attrs)->bool & (1 << CGEN_HW_PROFILE)) != 0)
+
+/* Enum declaration for ubicom32 hardware types.  */
+typedef enum cgen_hw_type {
+  HW_H_MEMORY, HW_H_SINT, HW_H_UINT, HW_H_ADDR
+ , HW_H_IADDR, HW_H_GLOBAL_CONTROL, HW_H_MT_BREAK, HW_H_MT_ACTIVE
+ , HW_H_MT_ENABLE, HW_H_MT_PRIORITY, HW_H_MT_SCHEDULE, HW_H_IRQ_STATUS_0
+ , HW_H_IRQ_STATUS_1, HW_H_DR, HW_H_S1_DR, HW_H_AR
+ , HW_H_AR_INC, HW_H_AR_INC_FLAG, HW_H_MAC_HI, HW_H_MAC_LO
+ , HW_H_SRC_3, HW_H_CSR, HW_H_IREAD, HW_H_ACC1_HI
+ , HW_H_ACC1_LO, HW_H_PC, HW_H_NBIT_16, HW_H_ZBIT_16
+ , HW_H_VBIT_16, HW_H_CBIT_16, HW_H_NBIT_32, HW_H_ZBIT_32
+ , HW_H_VBIT_32, HW_H_CBIT_32, HW_H_PREV_PRIVBIT, HW_H_PRIVBIT
+ , HW_H_CC, HW_H_C, HW_H_P, HW_H_DSP_C
+ , HW_H_DSP_DEST_A, HW_H_DSP_T, HW_H_DSP_T_ADDSUB, HW_H_DSP_S2_ACC_REG_MUL
+ , HW_H_DSP_S2_ACC_REG_ADDSUB, HW_H_SP, HW_MAX
+} CGEN_HW_TYPE;
+
+#define MAX_HW ((int) HW_MAX)
+
+/* Operand attribute indices.  */
+
+/* Enum declaration for cgen_operand attrs.  */
+typedef enum cgen_operand_attr {
+  CGEN_OPERAND_VIRTUAL, CGEN_OPERAND_PCREL_ADDR, CGEN_OPERAND_ABS_ADDR, CGEN_OPERAND_SIGN_OPT
+ , CGEN_OPERAND_SIGNED, CGEN_OPERAND_NEGATIVE, CGEN_OPERAND_RELAX, CGEN_OPERAND_SEM_ONLY
+ , CGEN_OPERAND_END_BOOLS, CGEN_OPERAND_START_NBOOLS = 31, CGEN_OPERAND_MACH, CGEN_OPERAND_END_NBOOLS
+} CGEN_OPERAND_ATTR;
+
+/* Number of non-boolean elements in cgen_operand_attr.  */
+#define CGEN_OPERAND_NBOOL_ATTRS (CGEN_OPERAND_END_NBOOLS - CGEN_OPERAND_START_NBOOLS - 1)
+
+/* cgen_operand attribute accessor macros.  */
+#define CGEN_ATTR_CGEN_OPERAND_MACH_VALUE(attrs) ((attrs)->nonbool[CGEN_OPERAND_MACH-CGEN_OPERAND_START_NBOOLS-1].nonbitset)
+#define CGEN_ATTR_CGEN_OPERAND_VIRTUAL_VALUE(attrs) (((attrs)->bool & (1 << CGEN_OPERAND_VIRTUAL)) != 0)
+#define CGEN_ATTR_CGEN_OPERAND_PCREL_ADDR_VALUE(attrs) (((attrs)->bool & (1 << CGEN_OPERAND_PCREL_ADDR)) != 0)
+#define CGEN_ATTR_CGEN_OPERAND_ABS_ADDR_VALUE(attrs) (((attrs)->bool & (1 << CGEN_OPERAND_ABS_ADDR)) != 0)
+#define CGEN_ATTR_CGEN_OPERAND_SIGN_OPT_VALUE(attrs) (((attrs)->bool & (1 << CGEN_OPERAND_SIGN_OPT)) != 0)
+#define CGEN_ATTR_CGEN_OPERAND_SIGNED_VALUE(attrs) (((attrs)->bool & (1 << CGEN_OPERAND_SIGNED)) != 0)
+#define CGEN_ATTR_CGEN_OPERAND_NEGATIVE_VALUE(attrs) (((attrs)->bool & (1 << CGEN_OPERAND_NEGATIVE)) != 0)
+#define CGEN_ATTR_CGEN_OPERAND_RELAX_VALUE(attrs) (((attrs)->bool & (1 << CGEN_OPERAND_RELAX)) != 0)
+#define CGEN_ATTR_CGEN_OPERAND_SEM_ONLY_VALUE(attrs) (((attrs)->bool & (1 << CGEN_OPERAND_SEM_ONLY)) != 0)
+
+/* Enum declaration for ubicom32 operand types.  */
+typedef enum cgen_operand_type {
+  UBICOM32_OPERAND_PC, UBICOM32_OPERAND_S2, UBICOM32_OPERAND_SRC3, UBICOM32_OPERAND_OFFSET24
+ , UBICOM32_OPERAND_AN, UBICOM32_OPERAND_CC, UBICOM32_OPERAND_C, UBICOM32_OPERAND_P
+ , UBICOM32_OPERAND_AM, UBICOM32_OPERAND_DN, UBICOM32_OPERAND_INTERRUPT, UBICOM32_OPERAND_IMM16_1
+ , UBICOM32_OPERAND_X_OP2, UBICOM32_OPERAND_X_BIT26, UBICOM32_OPERAND_X_S1, UBICOM32_OPERAND_X_D
+ , UBICOM32_OPERAND_X_DN, UBICOM32_OPERAND_MACHI, UBICOM32_OPERAND_MACLO, UBICOM32_OPERAND_ACC1HI
+ , UBICOM32_OPERAND_ACC1LO, UBICOM32_OPERAND_IRQ_0, UBICOM32_OPERAND_IRQ_1, UBICOM32_OPERAND_IREAD
+ , UBICOM32_OPERAND_OPC1, UBICOM32_OPERAND_OPC2, UBICOM32_OPERAND_AN_INC, UBICOM32_OPERAND_DSP_C
+ , UBICOM32_OPERAND_DSP_T, UBICOM32_OPERAND_DSP_DESTA, UBICOM32_OPERAND_DSP_S2_SEL, UBICOM32_OPERAND_DSP_S2_DATA_REG
+ , UBICOM32_OPERAND_DSP_S2_ACC_REG_MUL, UBICOM32_OPERAND_DSP_S2_ACC_REG_ADDSUB, UBICOM32_OPERAND_DSP_S2_DATA_REG_ADDSUB, UBICOM32_OPERAND_DSP_T_ADDSUB
+ , UBICOM32_OPERAND_BIT5, UBICOM32_OPERAND_BIT5_ADDSUB, UBICOM32_OPERAND_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_OPERAND_DSP_SRC2_REG_ACC_REG_ADDSUB
+ , UBICOM32_OPERAND_DSP_SRC2_DATA_REG, UBICOM32_OPERAND_DSP_SRC2_DATA_REG_ADDSUB, UBICOM32_OPERAND_DSP_SRC2_DATA_REG_ADDSUB2, UBICOM32_OPERAND_DSP_IMM_BIT5
+ , UBICOM32_OPERAND_DSP_IMM_BIT5_ADDSUB, UBICOM32_OPERAND_DSP_IMM_BIT5_ADDSUB2, UBICOM32_OPERAND_IMM_BIT5, UBICOM32_OPERAND_DYN_REG
+ , UBICOM32_OPERAND_OP3, UBICOM32_OPERAND_DSP_SRC2_MUL, UBICOM32_OPERAND_DSP_COMPATIBILITY_SRC2_MUL, UBICOM32_OPERAND_DSP_SRC2_ADDSUB
+ , UBICOM32_OPERAND_DSP_SRC2_ADDSUB2, UBICOM32_OPERAND_OFFSET21, UBICOM32_OPERAND_OFFSET16, UBICOM32_OPERAND_IMM24
+ , UBICOM32_OPERAND_IMM25, UBICOM32_OPERAND_NBIT_16, UBICOM32_OPERAND_VBIT_16, UBICOM32_OPERAND_ZBIT_16
+ , UBICOM32_OPERAND_CBIT_16, UBICOM32_OPERAND_NBIT_32, UBICOM32_OPERAND_VBIT_32, UBICOM32_OPERAND_ZBIT_32
+ , UBICOM32_OPERAND_CBIT_32, UBICOM32_OPERAND_PRIVILEGE_BIT, UBICOM32_OPERAND_PREV_PRIVILEGE_BIT, UBICOM32_OPERAND_S1_IMM7_1
+ , UBICOM32_OPERAND_S1_IMM7_2, UBICOM32_OPERAND_S1_IMM7_4, UBICOM32_OPERAND_PDEC_S1_IMM7_4, UBICOM32_OPERAND_S1_IMM8
+ , UBICOM32_OPERAND_S1_AN, UBICOM32_OPERAND_S1_R, UBICOM32_OPERAND_S1_AN_INC, UBICOM32_OPERAND_S1_I4_1
+ , UBICOM32_OPERAND_S1_I4_2, UBICOM32_OPERAND_S1_I4_4, UBICOM32_OPERAND_S1_INDIRECT_1, UBICOM32_OPERAND_S1_INDIRECT_2
+ , UBICOM32_OPERAND_S1_INDIRECT_4, UBICOM32_OPERAND_S1_INDIRECT_WITH_OFFSET_1, UBICOM32_OPERAND_S1_INDIRECT_WITH_OFFSET_2, UBICOM32_OPERAND_S1_INDIRECT_WITH_OFFSET_4
+ , UBICOM32_OPERAND_S1_INDIRECT_WITH_INDEX_1, UBICOM32_OPERAND_S1_INDIRECT_WITH_INDEX_2, UBICOM32_OPERAND_S1_INDIRECT_WITH_INDEX_4, UBICOM32_OPERAND_S1_INDIRECT_WITH_POST_INCREMENT_1
+ , UBICOM32_OPERAND_S1_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_OPERAND_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_OPERAND_S1_INDIRECT_WITH_PRE_INCREMENT_1, UBICOM32_OPERAND_S1_INDIRECT_WITH_PRE_INCREMENT_2
+ , UBICOM32_OPERAND_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_OPERAND_S1_DIRECT_ADDR, UBICOM32_OPERAND_S1_DIRECT, UBICOM32_OPERAND_S1_IMMEDIATE
+ , UBICOM32_OPERAND_S1_1, UBICOM32_OPERAND_S1_2, UBICOM32_OPERAND_S1_4, UBICOM32_OPERAND_S1_EA_INDIRECT
+ , UBICOM32_OPERAND_S1_EA_INDIRECT_WITH_OFFSET_1, UBICOM32_OPERAND_S1_EA_INDIRECT_WITH_OFFSET_2, UBICOM32_OPERAND_S1_EA_INDIRECT_WITH_OFFSET_4, UBICOM32_OPERAND_S1_EA_INDIRECT_WITH_INDEX_1
+ , UBICOM32_OPERAND_S1_EA_INDIRECT_WITH_INDEX_2, UBICOM32_OPERAND_S1_EA_INDIRECT_WITH_INDEX_4, UBICOM32_OPERAND_S1_EA_INDIRECT_WITH_POST_INCREMENT_1, UBICOM32_OPERAND_S1_EA_INDIRECT_WITH_POST_INCREMENT_2
+ , UBICOM32_OPERAND_S1_EA_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_OPERAND_S1_EA_INDIRECT_WITH_PRE_INCREMENT_1, UBICOM32_OPERAND_S1_EA_INDIRECT_WITH_PRE_INCREMENT_2, UBICOM32_OPERAND_S1_EA_INDIRECT_WITH_PRE_INCREMENT_4
+ , UBICOM32_OPERAND_S1_EA_IMMEDIATE, UBICOM32_OPERAND_S1_EA_DIRECT, UBICOM32_OPERAND_S1_EA_1, UBICOM32_OPERAND_S1_EA_2
+ , UBICOM32_OPERAND_S1_EA_4, UBICOM32_OPERAND_S1_PEA, UBICOM32_OPERAND_PDEC_S1_EA_INDIRECT_WITH_OFFSET_4, UBICOM32_OPERAND_PDEC_PEA_S1
+ , UBICOM32_OPERAND_D_IMM7_1, UBICOM32_OPERAND_D_IMM7_2, UBICOM32_OPERAND_D_IMM7_4, UBICOM32_OPERAND_D_IMM8
+ , UBICOM32_OPERAND_D_AN, UBICOM32_OPERAND_D_R, UBICOM32_OPERAND_D_AN_INC, UBICOM32_OPERAND_D_I4_1
+ , UBICOM32_OPERAND_D_I4_2, UBICOM32_OPERAND_D_I4_4, UBICOM32_OPERAND_D_INDIRECT_1, UBICOM32_OPERAND_D_INDIRECT_2
+ , UBICOM32_OPERAND_D_INDIRECT_4, UBICOM32_OPERAND_D_INDIRECT_WITH_OFFSET_1, UBICOM32_OPERAND_D_INDIRECT_WITH_OFFSET_2, UBICOM32_OPERAND_D_INDIRECT_WITH_OFFSET_4
+ , UBICOM32_OPERAND_D_INDIRECT_WITH_INDEX_1, UBICOM32_OPERAND_D_INDIRECT_WITH_INDEX_2, UBICOM32_OPERAND_D_INDIRECT_WITH_INDEX_4, UBICOM32_OPERAND_D_INDIRECT_WITH_POST_INCREMENT_1
+ , UBICOM32_OPERAND_D_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_OPERAND_D_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_OPERAND_D_INDIRECT_WITH_PRE_INCREMENT_1, UBICOM32_OPERAND_D_INDIRECT_WITH_PRE_INCREMENT_2
+ , UBICOM32_OPERAND_D_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_OPERAND_D_DIRECT_ADDR, UBICOM32_OPERAND_D_DIRECT, UBICOM32_OPERAND_D_IMMEDIATE_1
+ , UBICOM32_OPERAND_D_IMMEDIATE_2, UBICOM32_OPERAND_D_IMMEDIATE_4, UBICOM32_OPERAND_D_1, UBICOM32_OPERAND_D_2
+ , UBICOM32_OPERAND_D_4, UBICOM32_OPERAND_D_PEA_INDIRECT, UBICOM32_OPERAND_D_PEA_INDIRECT_WITH_OFFSET, UBICOM32_OPERAND_D_PEA_INDIRECT_WITH_POST_INCREMENT
+ , UBICOM32_OPERAND_D_PEA_INDIRECT_WITH_PRE_INCREMENT, UBICOM32_OPERAND_D_PEA_INDIRECT_WITH_INDEX, UBICOM32_OPERAND_D_PEA, UBICOM32_OPERAND_IMM16_2
+ , UBICOM32_OPERAND_MAX
+} CGEN_OPERAND_TYPE;
+
+/* Number of operands types.  */
+#define MAX_OPERANDS 160
+
+/* Maximum number of operands referenced by any insn.  */
+#define MAX_OPERAND_INSTANCES 8
+
+/* Insn attribute indices.  */
+
+/* Enum declaration for cgen_insn attrs.  */
+typedef enum cgen_insn_attr {
+  CGEN_INSN_ALIAS, CGEN_INSN_VIRTUAL, CGEN_INSN_UNCOND_CTI, CGEN_INSN_COND_CTI
+ , CGEN_INSN_SKIP_CTI, CGEN_INSN_DELAY_SLOT, CGEN_INSN_RELAXABLE, CGEN_INSN_RELAXED
+ , CGEN_INSN_NO_DIS, CGEN_INSN_PBB, CGEN_INSN_END_BOOLS, CGEN_INSN_START_NBOOLS = 31
+ , CGEN_INSN_MACH, CGEN_INSN_END_NBOOLS
+} CGEN_INSN_ATTR;
+
+/* Number of non-boolean elements in cgen_insn_attr.  */
+#define CGEN_INSN_NBOOL_ATTRS (CGEN_INSN_END_NBOOLS - CGEN_INSN_START_NBOOLS - 1)
+
+/* cgen_insn attribute accessor macros.  */
+#define CGEN_ATTR_CGEN_INSN_MACH_VALUE(attrs) ((attrs)->nonbool[CGEN_INSN_MACH-CGEN_INSN_START_NBOOLS-1].nonbitset)
+#define CGEN_ATTR_CGEN_INSN_ALIAS_VALUE(attrs) (((attrs)->bool & (1 << CGEN_INSN_ALIAS)) != 0)
+#define CGEN_ATTR_CGEN_INSN_VIRTUAL_VALUE(attrs) (((attrs)->bool & (1 << CGEN_INSN_VIRTUAL)) != 0)
+#define CGEN_ATTR_CGEN_INSN_UNCOND_CTI_VALUE(attrs) (((attrs)->bool & (1 << CGEN_INSN_UNCOND_CTI)) != 0)
+#define CGEN_ATTR_CGEN_INSN_COND_CTI_VALUE(attrs) (((attrs)->bool & (1 << CGEN_INSN_COND_CTI)) != 0)
+#define CGEN_ATTR_CGEN_INSN_SKIP_CTI_VALUE(attrs) (((attrs)->bool & (1 << CGEN_INSN_SKIP_CTI)) != 0)
+#define CGEN_ATTR_CGEN_INSN_DELAY_SLOT_VALUE(attrs) (((attrs)->bool & (1 << CGEN_INSN_DELAY_SLOT)) != 0)
+#define CGEN_ATTR_CGEN_INSN_RELAXABLE_VALUE(attrs) (((attrs)->bool & (1 << CGEN_INSN_RELAXABLE)) != 0)
+#define CGEN_ATTR_CGEN_INSN_RELAXED_VALUE(attrs) (((attrs)->bool & (1 << CGEN_INSN_RELAXED)) != 0)
+#define CGEN_ATTR_CGEN_INSN_NO_DIS_VALUE(attrs) (((attrs)->bool & (1 << CGEN_INSN_NO_DIS)) != 0)
+#define CGEN_ATTR_CGEN_INSN_PBB_VALUE(attrs) (((attrs)->bool & (1 << CGEN_INSN_PBB)) != 0)
+
+/* cgen.h uses things we just defined.  */
+#include "opcode/cgen.h"
+
+extern const struct cgen_ifld ubicom32_cgen_ifld_table[];
+
+/* Attributes.  */
+extern const CGEN_ATTR_TABLE ubicom32_cgen_hardware_attr_table[];
+extern const CGEN_ATTR_TABLE ubicom32_cgen_ifield_attr_table[];
+extern const CGEN_ATTR_TABLE ubicom32_cgen_operand_attr_table[];
+extern const CGEN_ATTR_TABLE ubicom32_cgen_insn_attr_table[];
+
+/* Hardware decls.  */
+
+extern CGEN_KEYWORD ubicom32_cgen_opval_data_names;
+extern CGEN_KEYWORD ubicom32_cgen_opval_data_names;
+extern CGEN_KEYWORD ubicom32_cgen_opval_addr_names;
+extern CGEN_KEYWORD ubicom32_cgen_opval_h_cc;
+extern CGEN_KEYWORD ubicom32_cgen_opval_h_C;
+extern CGEN_KEYWORD ubicom32_cgen_opval_h_P;
+extern CGEN_KEYWORD ubicom32_cgen_opval_h_DSP_C;
+extern CGEN_KEYWORD ubicom32_cgen_opval_h_DSP_Dest_A;
+extern CGEN_KEYWORD ubicom32_cgen_opval_h_DSP_T;
+extern CGEN_KEYWORD ubicom32_cgen_opval_h_DSP_T_addsub;
+extern CGEN_KEYWORD ubicom32_cgen_opval_acc_names;
+extern CGEN_KEYWORD ubicom32_cgen_opval_acc_names;
+extern CGEN_KEYWORD ubicom32_cgen_opval_spad_names;
+
+extern const CGEN_HW_ENTRY ubicom32_cgen_hw_table[];
+
+
+
+#endif /* UBICOM32_CPU_H */
--- /dev/null
+++ b/opcodes/ubicom32-dis.c
@@ -0,0 +1,837 @@
+/* Disassembler interface for targets using CGEN. -*- C -*-
+   CGEN: Cpu tools GENerator
+
+   THIS FILE IS MACHINE GENERATED WITH CGEN.
+   - the resultant file is machine generated, cgen-dis.in isn't
+
+   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2005, 2007
+   Free Software Foundation, Inc.
+
+   This file is part of libopcodes.
+
+   This library is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 3, or (at your option)
+   any later version.
+
+   It is distributed in the hope that it will be useful, but WITHOUT
+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
+   License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program; if not, write to the Free Software Foundation, Inc.,
+   51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.  */
+
+/* ??? Eventually more and more of this stuff can go to cpu-independent files.
+   Keep that in mind.  */
+
+#include "sysdep.h"
+#include <stdio.h>
+#include "ansidecl.h"
+#include "dis-asm.h"
+#include "bfd.h"
+#include "symcat.h"
+#include "libiberty.h"
+#include "ubicom32-desc.h"
+#include "ubicom32-opc.h"
+#include "opintl.h"
+
+/* Default text to print if an instruction isn't recognized.  */
+#define UNKNOWN_INSN_MSG _("*unknown*")
+
+static void print_normal
+  (CGEN_CPU_DESC, void *, long, unsigned int, bfd_vma, int);
+static void print_address
+  (CGEN_CPU_DESC, void *, bfd_vma, unsigned int, bfd_vma, int) ATTRIBUTE_UNUSED;
+static void print_keyword
+  (CGEN_CPU_DESC, void *, CGEN_KEYWORD *, long, unsigned int) ATTRIBUTE_UNUSED;
+static void print_insn_normal
+  (CGEN_CPU_DESC, void *, const CGEN_INSN *, CGEN_FIELDS *, bfd_vma, int);
+static int print_insn
+  (CGEN_CPU_DESC, bfd_vma,  disassemble_info *, bfd_byte *, unsigned);
+static int default_print_insn
+  (CGEN_CPU_DESC, bfd_vma, disassemble_info *) ATTRIBUTE_UNUSED;
+static int read_insn
+  (CGEN_CPU_DESC, bfd_vma, disassemble_info *, bfd_byte *, int, CGEN_EXTRACT_INFO *,
+   unsigned long *);
+
+/* -- disassembler routines inserted here.  */
+
+/* -- dis.c */
+
+static int
+ubicom32_internal_print_insn (CGEN_CPU_DESC cd, bfd_vma pc, disassemble_info *info)
+{
+  if ((info)->mach <= bfd_mach_ubicom32ver4)
+    (cd)->machs |= (1 << MACH_UBICOM32_OLDMOVEAI);
+  else
+    (cd)->machs |= (1 << MACH_UBICOM32_NEWMOVEAI);
+  return default_print_insn (cd, pc, info);
+}
+
+
+#define CGEN_PRINT_INSN  ubicom32_internal_print_insn
+
+/* Output a signed 4 bit integer */
+static void
+print_imm4 (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,
+	    PTR dis_info,
+	    long value,
+	    unsigned int attrs ATTRIBUTE_UNUSED,
+	    bfd_vma pc ATTRIBUTE_UNUSED,
+	    int length ATTRIBUTE_UNUSED)
+{
+  disassemble_info *info = (disassemble_info *) dis_info;
+  (*info->fprintf_func) (info->stream, "%d", (int)value);
+}
+
+/* Output an unsigned 7-bit integer */
+static void
+print_imm7 (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,
+	    PTR dis_info,
+	    long value,
+	    unsigned int attrs ATTRIBUTE_UNUSED,
+	    bfd_vma pc ATTRIBUTE_UNUSED,
+	    int length ATTRIBUTE_UNUSED)
+{
+  disassemble_info *info = (disassemble_info *) dis_info;
+  if (value != 0)
+    (*info->fprintf_func) (info->stream, "%ld", value);
+}
+
+/* Output an unsigned 7-bit integer */
+static void
+print_pdec_imm7 (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,
+		 PTR dis_info,
+		 long value,
+		 unsigned int attrs ATTRIBUTE_UNUSED,
+		 bfd_vma pc ATTRIBUTE_UNUSED,
+		 int length ATTRIBUTE_UNUSED)
+{
+  disassemble_info *info = (disassemble_info *) dis_info;
+  if (value != 0)
+    {
+      value = ~value;
+      value ++;
+      value &= 0x1fc;
+      (*info->fprintf_func) (info->stream, "%ld", value);
+    }
+  else
+    {
+      (*info->fprintf_func) (info->stream, "%d", 512);
+    }
+}
+
+/* Output either a register or a 11bit literal immediate value */
+static void
+print_direct_addr (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,
+		   PTR dis_info,
+		   long value,
+		   unsigned int attrs ATTRIBUTE_UNUSED,
+		   bfd_vma pc ATTRIBUTE_UNUSED,
+		   int length ATTRIBUTE_UNUSED)
+{
+  disassemble_info *info = (disassemble_info *) dis_info;
+  struct ubicom32_cgen_data_space_map *cur;
+
+  if(cd->machs & (1<<MACH_IP3035))
+    {
+      /* cpu is mercury */
+      cur = ubicom32_cgen_data_space_map_mercury;
+    }
+  else
+    {
+      /* cpu is mars */
+      cur = ubicom32_cgen_data_space_map_mars;
+    }
+
+
+  //if (value > 0x3ff)
+    /* XXX: some warning? */ ;
+  value &= 0x3ff;
+  for (; cur->name; cur++)
+    if (value == cur->address)
+      {
+        (*info->fprintf_func) (info->stream, "%s", cur->name);
+        return;
+      }
+  (*info->fprintf_func) (info->stream, "#%lx", value);
+}
+
+static void
+print_imm24 (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,
+	     PTR dis_info,
+	     long value,
+	     unsigned int attrs ATTRIBUTE_UNUSED,
+	     bfd_vma pc ATTRIBUTE_UNUSED,
+	     int length ATTRIBUTE_UNUSED)
+{
+  disassemble_info *info = (disassemble_info *) dis_info;
+  (*info->fprintf_func) (info->stream, "%%hi(0x%08lx)", value << 7);
+}
+
+static void
+print_imm25 (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,
+	     PTR dis_info,
+	     long value,
+	     unsigned int attrs ATTRIBUTE_UNUSED,
+	     bfd_vma pc ATTRIBUTE_UNUSED,
+	     int length ATTRIBUTE_UNUSED)
+{
+  disassemble_info *info = (disassemble_info *) dis_info;
+  (*info->fprintf_func) (info->stream, "%%hi(0x%08lx)", value << 7);
+}
+
+/* -- */
+
+void ubicom32_cgen_print_operand
+  (CGEN_CPU_DESC, int, PTR, CGEN_FIELDS *, void const *, bfd_vma, int);
+
+/* Main entry point for printing operands.
+   XINFO is a `void *' and not a `disassemble_info *' to not put a requirement
+   of dis-asm.h on cgen.h.
+
+   This function is basically just a big switch statement.  Earlier versions
+   used tables to look up the function to use, but
+   - if the table contains both assembler and disassembler functions then
+     the disassembler contains much of the assembler and vice-versa,
+   - there's a lot of inlining possibilities as things grow,
+   - using a switch statement avoids the function call overhead.
+
+   This function could be moved into `print_insn_normal', but keeping it
+   separate makes clear the interface between `print_insn_normal' and each of
+   the handlers.  */
+
+void
+ubicom32_cgen_print_operand (CGEN_CPU_DESC cd,
+			   int opindex,
+			   void * xinfo,
+			   CGEN_FIELDS *fields,
+			   void const *attrs ATTRIBUTE_UNUSED,
+			   bfd_vma pc,
+			   int length)
+{
+  disassemble_info *info = (disassemble_info *) xinfo;
+
+  switch (opindex)
+    {
+    case UBICOM32_OPERAND_AM :
+      print_keyword (cd, info, & ubicom32_cgen_opval_addr_names, fields->f_Am, 0);
+      break;
+    case UBICOM32_OPERAND_AN :
+      print_keyword (cd, info, & ubicom32_cgen_opval_addr_names, fields->f_An, 0);
+      break;
+    case UBICOM32_OPERAND_C :
+      print_keyword (cd, info, & ubicom32_cgen_opval_h_C, fields->f_C, 0);
+      break;
+    case UBICOM32_OPERAND_DN :
+      print_keyword (cd, info, & ubicom32_cgen_opval_data_names, fields->f_Dn, 0);
+      break;
+    case UBICOM32_OPERAND_P :
+      print_keyword (cd, info, & ubicom32_cgen_opval_h_P, fields->f_P, 0);
+      break;
+    case UBICOM32_OPERAND_ACC1HI :
+      print_normal (cd, info, 0, 0, pc, length);
+      break;
+    case UBICOM32_OPERAND_ACC1LO :
+      print_normal (cd, info, 0, 0, pc, length);
+      break;
+    case UBICOM32_OPERAND_BIT5 :
+      print_normal (cd, info, fields->f_bit5, 0, pc, length);
+      break;
+    case UBICOM32_OPERAND_BIT5_ADDSUB :
+      print_normal (cd, info, fields->f_bit5, 0, pc, length);
+      break;
+    case UBICOM32_OPERAND_CC :
+      print_keyword (cd, info, & ubicom32_cgen_opval_h_cc, fields->f_cond, 0);
+      break;
+    case UBICOM32_OPERAND_D_AN :
+      print_keyword (cd, info, & ubicom32_cgen_opval_addr_names, fields->f_d_An, 0);
+      break;
+    case UBICOM32_OPERAND_D_DIRECT_ADDR :
+      print_direct_addr (cd, info, fields->f_d_direct, 0, pc, length);
+      break;
+    case UBICOM32_OPERAND_D_I4_1 :
+      print_imm4 (cd, info, fields->f_d_i4_1, 0|(1<<CGEN_OPERAND_SIGNED), pc, length);
+      break;
+    case UBICOM32_OPERAND_D_I4_2 :
+      print_imm4 (cd, info, fields->f_d_i4_2, 0|(1<<CGEN_OPERAND_SIGNED), pc, length);
+      break;
+    case UBICOM32_OPERAND_D_I4_4 :
+      print_imm4 (cd, info, fields->f_d_i4_4, 0|(1<<CGEN_OPERAND_SIGNED), pc, length);
+      break;
+    case UBICOM32_OPERAND_D_IMM7_1 :
+      print_imm7 (cd, info, fields->f_d_imm7_1, 0|(1<<CGEN_OPERAND_VIRTUAL), pc, length);
+      break;
+    case UBICOM32_OPERAND_D_IMM7_2 :
+      print_imm7 (cd, info, fields->f_d_imm7_2, 0|(1<<CGEN_OPERAND_VIRTUAL), pc, length);
+      break;
+    case UBICOM32_OPERAND_D_IMM7_4 :
+      print_imm7 (cd, info, fields->f_d_imm7_4, 0|(1<<CGEN_OPERAND_VIRTUAL), pc, length);
+      break;
+    case UBICOM32_OPERAND_D_IMM8 :
+      print_normal (cd, info, fields->f_d_imm8, 0|(1<<CGEN_OPERAND_SIGNED), pc, length);
+      break;
+    case UBICOM32_OPERAND_D_R :
+      print_keyword (cd, info, & ubicom32_cgen_opval_data_names, fields->f_d_r, 0);
+      break;
+    case UBICOM32_OPERAND_DSP_S2_ACC_REG_ADDSUB :
+      print_keyword (cd, info, & ubicom32_cgen_opval_acc_names, fields->f_dsp_S2, 0);
+      break;
+    case UBICOM32_OPERAND_DSP_S2_ACC_REG_MUL :
+      print_keyword (cd, info, & ubicom32_cgen_opval_acc_names, fields->f_dsp_S2, 0);
+      break;
+    case UBICOM32_OPERAND_DSP_S2_DATA_REG :
+      print_keyword (cd, info, & ubicom32_cgen_opval_data_names, fields->f_dsp_S2, 0);
+      break;
+    case UBICOM32_OPERAND_DSP_S2_DATA_REG_ADDSUB :
+      print_keyword (cd, info, & ubicom32_cgen_opval_data_names, fields->f_dsp_S2, 0);
+      break;
+    case UBICOM32_OPERAND_DSP_S2_SEL :
+      print_normal (cd, info, fields->f_dsp_S2_sel, 0, pc, length);
+      break;
+    case UBICOM32_OPERAND_DSP_C :
+      print_keyword (cd, info, & ubicom32_cgen_opval_h_DSP_C, fields->f_dsp_C, 0);
+      break;
+    case UBICOM32_OPERAND_DSP_DESTA :
+      print_keyword (cd, info, & ubicom32_cgen_opval_h_DSP_Dest_A, fields->f_dsp_destA, 0);
+      break;
+    case UBICOM32_OPERAND_DSP_T :
+      print_keyword (cd, info, & ubicom32_cgen_opval_h_DSP_T, fields->f_dsp_T, 0);
+      break;
+    case UBICOM32_OPERAND_DSP_T_ADDSUB :
+      print_keyword (cd, info, & ubicom32_cgen_opval_h_DSP_T_addsub, fields->f_dsp_T, 0);
+      break;
+    case UBICOM32_OPERAND_IMM16_1 :
+      print_normal (cd, info, fields->f_imm16_1, 0|(1<<CGEN_OPERAND_SIGNED), pc, length);
+      break;
+    case UBICOM32_OPERAND_IMM16_2 :
+      print_normal (cd, info, fields->f_imm16_2, 0|(1<<CGEN_OPERAND_SIGNED), pc, length);
+      break;
+    case UBICOM32_OPERAND_IMM24 :
+      print_imm24 (cd, info, fields->f_imm24, 0|(1<<CGEN_OPERAND_VIRTUAL), pc, length);
+      break;
+    case UBICOM32_OPERAND_IMM25 :
+      print_imm25 (cd, info, fields->f_imm25, 0|(1<<CGEN_OPERAND_VIRTUAL), pc, length);
+      break;
+    case UBICOM32_OPERAND_INTERRUPT :
+      print_normal (cd, info, fields->f_int, 0, pc, length);
+      break;
+    case UBICOM32_OPERAND_IREAD :
+      print_normal (cd, info, 0, 0, pc, length);
+      break;
+    case UBICOM32_OPERAND_IRQ_0 :
+      print_normal (cd, info, 0, 0, pc, length);
+      break;
+    case UBICOM32_OPERAND_IRQ_1 :
+      print_normal (cd, info, 0, 0, pc, length);
+      break;
+    case UBICOM32_OPERAND_MACHI :
+      print_normal (cd, info, 0, 0, pc, length);
+      break;
+    case UBICOM32_OPERAND_MACLO :
+      print_normal (cd, info, 0, 0, pc, length);
+      break;
+    case UBICOM32_OPERAND_OFFSET16 :
+      print_normal (cd, info, fields->f_o16, 0|(1<<CGEN_OPERAND_SIGNED)|(1<<CGEN_OPERAND_VIRTUAL), pc, length);
+      break;
+    case UBICOM32_OPERAND_OFFSET21 :
+      print_address (cd, info, fields->f_o21, 0|(1<<CGEN_OPERAND_PCREL_ADDR), pc, length);
+      break;
+    case UBICOM32_OPERAND_OFFSET24 :
+      print_address (cd, info, fields->f_o24, 0|(1<<CGEN_OPERAND_PCREL_ADDR)|(1<<CGEN_OPERAND_VIRTUAL), pc, length);
+      break;
+    case UBICOM32_OPERAND_OPC1 :
+      print_normal (cd, info, fields->f_op1, 0, pc, length);
+      break;
+    case UBICOM32_OPERAND_OPC2 :
+      print_normal (cd, info, fields->f_op2, 0, pc, length);
+      break;
+    case UBICOM32_OPERAND_PDEC_S1_IMM7_4 :
+      print_pdec_imm7 (cd, info, fields->f_s1_imm7_4, 0|(1<<CGEN_OPERAND_VIRTUAL), pc, length);
+      break;
+    case UBICOM32_OPERAND_S1_AN :
+      print_keyword (cd, info, & ubicom32_cgen_opval_addr_names, fields->f_s1_An, 0);
+      break;
+    case UBICOM32_OPERAND_S1_DIRECT_ADDR :
+      print_direct_addr (cd, info, fields->f_s1_direct, 0, pc, length);
+      break;
+    case UBICOM32_OPERAND_S1_I4_1 :
+      print_imm4 (cd, info, fields->f_s1_i4_1, 0|(1<<CGEN_OPERAND_SIGNED), pc, length);
+      break;
+    case UBICOM32_OPERAND_S1_I4_2 :
+      print_imm4 (cd, info, fields->f_s1_i4_2, 0|(1<<CGEN_OPERAND_SIGNED), pc, length);
+      break;
+    case UBICOM32_OPERAND_S1_I4_4 :
+      print_imm4 (cd, info, fields->f_s1_i4_4, 0|(1<<CGEN_OPERAND_SIGNED), pc, length);
+      break;
+    case UBICOM32_OPERAND_S1_IMM7_1 :
+      print_imm7 (cd, info, fields->f_s1_imm7_1, 0|(1<<CGEN_OPERAND_VIRTUAL), pc, length);
+      break;
+    case UBICOM32_OPERAND_S1_IMM7_2 :
+      print_imm7 (cd, info, fields->f_s1_imm7_2, 0|(1<<CGEN_OPERAND_VIRTUAL), pc, length);
+      break;
+    case UBICOM32_OPERAND_S1_IMM7_4 :
+      print_imm7 (cd, info, fields->f_s1_imm7_4, 0|(1<<CGEN_OPERAND_VIRTUAL), pc, length);
+      break;
+    case UBICOM32_OPERAND_S1_IMM8 :
+      print_normal (cd, info, fields->f_s1_imm8, 0|(1<<CGEN_OPERAND_SIGNED), pc, length);
+      break;
+    case UBICOM32_OPERAND_S1_R :
+      print_keyword (cd, info, & ubicom32_cgen_opval_data_names, fields->f_s1_r, 0);
+      break;
+    case UBICOM32_OPERAND_S2 :
+      print_keyword (cd, info, & ubicom32_cgen_opval_data_names, fields->f_s2, 0);
+      break;
+    case UBICOM32_OPERAND_SRC3 :
+      print_normal (cd, info, 0, 0, pc, length);
+      break;
+    case UBICOM32_OPERAND_X_BIT26 :
+      print_normal (cd, info, fields->f_bit26, 0, pc, length);
+      break;
+    case UBICOM32_OPERAND_X_D :
+      print_normal (cd, info, fields->f_d, 0, pc, length);
+      break;
+    case UBICOM32_OPERAND_X_DN :
+      print_normal (cd, info, fields->f_Dn, 0, pc, length);
+      break;
+    case UBICOM32_OPERAND_X_OP2 :
+      print_normal (cd, info, fields->f_op2, 0, pc, length);
+      break;
+    case UBICOM32_OPERAND_X_S1 :
+      print_normal (cd, info, fields->f_s1, 0, pc, length);
+      break;
+
+    default :
+      /* xgettext:c-format */
+      fprintf (stderr, _("Unrecognized field %d while printing insn.\n"),
+	       opindex);
+    abort ();
+  }
+}
+
+cgen_print_fn * const ubicom32_cgen_print_handlers[] = 
+{
+  print_insn_normal,
+};
+
+
+void
+ubicom32_cgen_init_dis (CGEN_CPU_DESC cd)
+{
+  ubicom32_cgen_init_opcode_table (cd);
+  ubicom32_cgen_init_ibld_table (cd);
+  cd->print_handlers = & ubicom32_cgen_print_handlers[0];
+  cd->print_operand = ubicom32_cgen_print_operand;
+}
+
+
+/* Default print handler.  */
+
+static void
+print_normal (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,
+	      void *dis_info,
+	      long value,
+	      unsigned int attrs,
+	      bfd_vma pc ATTRIBUTE_UNUSED,
+	      int length ATTRIBUTE_UNUSED)
+{
+  disassemble_info *info = (disassemble_info *) dis_info;
+
+#ifdef CGEN_PRINT_NORMAL
+  CGEN_PRINT_NORMAL (cd, info, value, attrs, pc, length);
+#endif
+
+  /* Print the operand as directed by the attributes.  */
+  if (CGEN_BOOL_ATTR (attrs, CGEN_OPERAND_SEM_ONLY))
+    ; /* nothing to do */
+  else if (CGEN_BOOL_ATTR (attrs, CGEN_OPERAND_SIGNED))
+    (*info->fprintf_func) (info->stream, "%ld", value);
+  else
+    (*info->fprintf_func) (info->stream, "0x%lx", value);
+}
+
+/* Default address handler.  */
+
+static void
+print_address (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,
+	       void *dis_info,
+	       bfd_vma value,
+	       unsigned int attrs,
+	       bfd_vma pc ATTRIBUTE_UNUSED,
+	       int length ATTRIBUTE_UNUSED)
+{
+  disassemble_info *info = (disassemble_info *) dis_info;
+
+#ifdef CGEN_PRINT_ADDRESS
+  CGEN_PRINT_ADDRESS (cd, info, value, attrs, pc, length);
+#endif
+
+  /* Print the operand as directed by the attributes.  */
+  if (CGEN_BOOL_ATTR (attrs, CGEN_OPERAND_SEM_ONLY))
+    ; /* Nothing to do.  */
+  else if (CGEN_BOOL_ATTR (attrs, CGEN_OPERAND_PCREL_ADDR))
+    (*info->print_address_func) (value, info);
+  else if (CGEN_BOOL_ATTR (attrs, CGEN_OPERAND_ABS_ADDR))
+    (*info->print_address_func) (value, info);
+  else if (CGEN_BOOL_ATTR (attrs, CGEN_OPERAND_SIGNED))
+    (*info->fprintf_func) (info->stream, "%ld", (long) value);
+  else
+    (*info->fprintf_func) (info->stream, "0x%lx", (long) value);
+}
+
+/* Keyword print handler.  */
+
+static void
+print_keyword (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,
+	       void *dis_info,
+	       CGEN_KEYWORD *keyword_table,
+	       long value,
+	       unsigned int attrs ATTRIBUTE_UNUSED)
+{
+  disassemble_info *info = (disassemble_info *) dis_info;
+  const CGEN_KEYWORD_ENTRY *ke;
+
+  ke = cgen_keyword_lookup_value (keyword_table, value);
+  if (ke != NULL)
+    (*info->fprintf_func) (info->stream, "%s", ke->name);
+  else
+    (*info->fprintf_func) (info->stream, "???");
+}
+
+/* Default insn printer.
+
+   DIS_INFO is defined as `void *' so the disassembler needn't know anything
+   about disassemble_info.  */
+
+static void
+print_insn_normal (CGEN_CPU_DESC cd,
+		   void *dis_info,
+		   const CGEN_INSN *insn,
+		   CGEN_FIELDS *fields,
+		   bfd_vma pc,
+		   int length)
+{
+  const CGEN_SYNTAX *syntax = CGEN_INSN_SYNTAX (insn);
+  disassemble_info *info = (disassemble_info *) dis_info;
+  const CGEN_SYNTAX_CHAR_TYPE *syn;
+
+  CGEN_INIT_PRINT (cd);
+
+  for (syn = CGEN_SYNTAX_STRING (syntax); *syn; ++syn)
+    {
+      if (CGEN_SYNTAX_MNEMONIC_P (*syn))
+	{
+	  (*info->fprintf_func) (info->stream, "%s", CGEN_INSN_MNEMONIC (insn));
+	  continue;
+	}
+      if (CGEN_SYNTAX_CHAR_P (*syn))
+	{
+	  (*info->fprintf_func) (info->stream, "%c", CGEN_SYNTAX_CHAR (*syn));
+	  continue;
+	}
+
+      /* We have an operand.  */
+      ubicom32_cgen_print_operand (cd, CGEN_SYNTAX_FIELD (*syn), info,
+				 fields, CGEN_INSN_ATTRS (insn), pc, length);
+    }
+}
+
+/* Subroutine of print_insn. Reads an insn into the given buffers and updates
+   the extract info.
+   Returns 0 if all is well, non-zero otherwise.  */
+
+static int
+read_insn (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,
+	   bfd_vma pc,
+	   disassemble_info *info,
+	   bfd_byte *buf,
+	   int buflen,
+	   CGEN_EXTRACT_INFO *ex_info,
+	   unsigned long *insn_value)
+{
+  int status = (*info->read_memory_func) (pc, buf, buflen, info);
+
+  if (status != 0)
+    {
+      (*info->memory_error_func) (status, pc, info);
+      return -1;
+    }
+
+  ex_info->dis_info = info;
+  ex_info->valid = (1 << buflen) - 1;
+  ex_info->insn_bytes = buf;
+
+  *insn_value = bfd_get_bits (buf, buflen * 8, info->endian == BFD_ENDIAN_BIG);
+  return 0;
+}
+
+/* Utility to print an insn.
+   BUF is the base part of the insn, target byte order, BUFLEN bytes long.
+   The result is the size of the insn in bytes or zero for an unknown insn
+   or -1 if an error occurs fetching data (memory_error_func will have
+   been called).  */
+
+static int
+print_insn (CGEN_CPU_DESC cd,
+	    bfd_vma pc,
+	    disassemble_info *info,
+	    bfd_byte *buf,
+	    unsigned int buflen)
+{
+  CGEN_INSN_INT insn_value;
+  const CGEN_INSN_LIST *insn_list;
+  CGEN_EXTRACT_INFO ex_info;
+  int basesize;
+
+  /* Extract base part of instruction, just in case CGEN_DIS_* uses it. */
+  basesize = cd->base_insn_bitsize < buflen * 8 ?
+                                     cd->base_insn_bitsize : buflen * 8;
+  insn_value = cgen_get_insn_value (cd, buf, basesize);
+
+
+  /* Fill in ex_info fields like read_insn would.  Don't actually call
+     read_insn, since the incoming buffer is already read (and possibly
+     modified a la m32r).  */
+  ex_info.valid = (1 << buflen) - 1;
+  ex_info.dis_info = info;
+  ex_info.insn_bytes = buf;
+
+  /* The instructions are stored in hash lists.
+     Pick the first one and keep trying until we find the right one.  */
+
+  insn_list = CGEN_DIS_LOOKUP_INSN (cd, (char *) buf, insn_value);
+  while (insn_list != NULL)
+    {
+      const CGEN_INSN *insn = insn_list->insn;
+      CGEN_FIELDS fields;
+      int length;
+      unsigned long insn_value_cropped;
+
+#ifdef CGEN_VALIDATE_INSN_SUPPORTED 
+      /* Not needed as insn shouldn't be in hash lists if not supported.  */
+      /* Supported by this cpu?  */
+      if (! ubicom32_cgen_insn_supported (cd, insn))
+        {
+          insn_list = CGEN_DIS_NEXT_INSN (insn_list);
+	  continue;
+        }
+#endif
+
+      /* Basic bit mask must be correct.  */
+      /* ??? May wish to allow target to defer this check until the extract
+	 handler.  */
+
+      /* Base size may exceed this instruction's size.  Extract the
+         relevant part from the buffer. */
+      if ((unsigned) (CGEN_INSN_BITSIZE (insn) / 8) < buflen &&
+	  (unsigned) (CGEN_INSN_BITSIZE (insn) / 8) <= sizeof (unsigned long))
+	insn_value_cropped = bfd_get_bits (buf, CGEN_INSN_BITSIZE (insn), 
+					   info->endian == BFD_ENDIAN_BIG);
+      else
+	insn_value_cropped = insn_value;
+
+      if ((insn_value_cropped & CGEN_INSN_BASE_MASK (insn))
+	  == CGEN_INSN_BASE_VALUE (insn))
+	{
+	  /* Printing is handled in two passes.  The first pass parses the
+	     machine insn and extracts the fields.  The second pass prints
+	     them.  */
+
+	  /* Make sure the entire insn is loaded into insn_value, if it
+	     can fit.  */
+	  if (((unsigned) CGEN_INSN_BITSIZE (insn) > cd->base_insn_bitsize) &&
+	      (unsigned) (CGEN_INSN_BITSIZE (insn) / 8) <= sizeof (unsigned long))
+	    {
+	      unsigned long full_insn_value;
+	      int rc = read_insn (cd, pc, info, buf,
+				  CGEN_INSN_BITSIZE (insn) / 8,
+				  & ex_info, & full_insn_value);
+	      if (rc != 0)
+		return rc;
+	      length = CGEN_EXTRACT_FN (cd, insn)
+		(cd, insn, &ex_info, full_insn_value, &fields, pc);
+	    }
+	  else
+	    length = CGEN_EXTRACT_FN (cd, insn)
+	      (cd, insn, &ex_info, insn_value_cropped, &fields, pc);
+
+	  /* Length < 0 -> error.  */
+	  if (length < 0)
+	    return length;
+	  if (length > 0)
+	    {
+	      CGEN_PRINT_FN (cd, insn) (cd, info, insn, &fields, pc, length);
+	      /* Length is in bits, result is in bytes.  */
+	      return length / 8;
+	    }
+	}
+
+      insn_list = CGEN_DIS_NEXT_INSN (insn_list);
+    }
+
+  return 0;
+}
+
+/* Default value for CGEN_PRINT_INSN.
+   The result is the size of the insn in bytes or zero for an unknown insn
+   or -1 if an error occured fetching bytes.  */
+
+#ifndef CGEN_PRINT_INSN
+#define CGEN_PRINT_INSN default_print_insn
+#endif
+
+static int
+default_print_insn (CGEN_CPU_DESC cd, bfd_vma pc, disassemble_info *info)
+{
+  bfd_byte buf[CGEN_MAX_INSN_SIZE];
+  int buflen;
+  int status;
+
+  /* Attempt to read the base part of the insn.  */
+  buflen = cd->base_insn_bitsize / 8;
+  status = (*info->read_memory_func) (pc, buf, buflen, info);
+
+  /* Try again with the minimum part, if min < base.  */
+  if (status != 0 && (cd->min_insn_bitsize < cd->base_insn_bitsize))
+    {
+      buflen = cd->min_insn_bitsize / 8;
+      status = (*info->read_memory_func) (pc, buf, buflen, info);
+    }
+
+  if (status != 0)
+    {
+      (*info->memory_error_func) (status, pc, info);
+      return -1;
+    }
+
+  return print_insn (cd, pc, info, buf, buflen);
+}
+
+/* Main entry point.
+   Print one instruction from PC on INFO->STREAM.
+   Return the size of the instruction (in bytes).  */
+
+typedef struct cpu_desc_list
+{
+  struct cpu_desc_list *next;
+  CGEN_BITSET *isa;
+  int mach;
+  int endian;
+  CGEN_CPU_DESC cd;
+} cpu_desc_list;
+
+int
+print_insn_ubicom32 (bfd_vma pc, disassemble_info *info)
+{
+  static cpu_desc_list *cd_list = 0;
+  cpu_desc_list *cl = 0;
+  static CGEN_CPU_DESC cd = 0;
+  static CGEN_BITSET *prev_isa;
+  static int prev_mach;
+  static int prev_endian;
+  int length;
+  CGEN_BITSET *isa;
+  int mach;
+  int endian = (info->endian == BFD_ENDIAN_BIG
+		? CGEN_ENDIAN_BIG
+		: CGEN_ENDIAN_LITTLE);
+  enum bfd_architecture arch;
+
+  /* ??? gdb will set mach but leave the architecture as "unknown" */
+#ifndef CGEN_BFD_ARCH
+#define CGEN_BFD_ARCH bfd_arch_ubicom32
+#endif
+  arch = info->arch;
+  if (arch == bfd_arch_unknown)
+    arch = CGEN_BFD_ARCH;
+   
+  /* There's no standard way to compute the machine or isa number
+     so we leave it to the target.  */
+#ifdef CGEN_COMPUTE_MACH
+  mach = CGEN_COMPUTE_MACH (info);
+#else
+  mach = info->mach;
+#endif
+
+#ifdef CGEN_COMPUTE_ISA
+  {
+    static CGEN_BITSET *permanent_isa;
+
+    if (!permanent_isa)
+      permanent_isa = cgen_bitset_create (MAX_ISAS);
+    isa = permanent_isa;
+    cgen_bitset_clear (isa);
+    cgen_bitset_add (isa, CGEN_COMPUTE_ISA (info));
+  }
+#else
+  isa = info->insn_sets;
+#endif
+
+  /* If we've switched cpu's, try to find a handle we've used before */
+  if (cd
+      && (cgen_bitset_compare (isa, prev_isa) != 0
+	  || mach != prev_mach
+	  || endian != prev_endian))
+    {
+      cd = 0;
+      for (cl = cd_list; cl; cl = cl->next)
+	{
+	  if (cgen_bitset_compare (cl->isa, isa) == 0 &&
+	      cl->mach == mach &&
+	      cl->endian == endian)
+	    {
+	      cd = cl->cd;
+ 	      prev_isa = cd->isas;
+	      break;
+	    }
+	}
+    } 
+
+  /* If we haven't initialized yet, initialize the opcode table.  */
+  if (! cd)
+    {
+      const bfd_arch_info_type *arch_type = bfd_lookup_arch (arch, mach);
+      const char *mach_name;
+
+      if (!arch_type)
+	abort ();
+      mach_name = arch_type->printable_name;
+
+      prev_isa = cgen_bitset_copy (isa);
+      prev_mach = mach;
+      prev_endian = endian;
+      cd = ubicom32_cgen_cpu_open (CGEN_CPU_OPEN_ISAS, prev_isa,
+				 CGEN_CPU_OPEN_BFDMACH, mach_name,
+				 CGEN_CPU_OPEN_ENDIAN, prev_endian,
+				 CGEN_CPU_OPEN_END);
+      if (!cd)
+	abort ();
+
+      /* Save this away for future reference.  */
+      cl = xmalloc (sizeof (struct cpu_desc_list));
+      cl->cd = cd;
+      cl->isa = prev_isa;
+      cl->mach = mach;
+      cl->endian = endian;
+      cl->next = cd_list;
+      cd_list = cl;
+
+      ubicom32_cgen_init_dis (cd);
+    }
+
+  /* We try to have as much common code as possible.
+     But at this point some targets need to take over.  */
+  /* ??? Some targets may need a hook elsewhere.  Try to avoid this,
+     but if not possible try to move this hook elsewhere rather than
+     have two hooks.  */
+  length = CGEN_PRINT_INSN (cd, pc, info);
+  if (length > 0)
+    return length;
+  if (length < 0)
+    return -1;
+
+  (*info->fprintf_func) (info->stream, UNKNOWN_INSN_MSG);
+  return cd->default_insn_bitsize / 8;
+}
--- /dev/null
+++ b/opcodes/ubicom32-ibld.c
@@ -0,0 +1,2109 @@
+/* Instruction building/extraction support for ubicom32. -*- C -*-
+
+   THIS FILE IS MACHINE GENERATED WITH CGEN: Cpu tools GENerator.
+   - the resultant file is machine generated, cgen-ibld.in isn't
+
+   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2005, 2006, 2007
+   Free Software Foundation, Inc.
+
+   This file is part of libopcodes.
+
+   This library is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 3, or (at your option)
+   any later version.
+
+   It is distributed in the hope that it will be useful, but WITHOUT
+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
+   License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program; if not, write to the Free Software Foundation, Inc.,
+   51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.  */
+
+/* ??? Eventually more and more of this stuff can go to cpu-independent files.
+   Keep that in mind.  */
+
+#include "sysdep.h"
+#include <stdio.h>
+#include "ansidecl.h"
+#include "dis-asm.h"
+#include "bfd.h"
+#include "symcat.h"
+#include "ubicom32-desc.h"
+#include "ubicom32-opc.h"
+#include "opintl.h"
+#include "safe-ctype.h"
+
+#undef  min
+#define min(a,b) ((a) < (b) ? (a) : (b))
+#undef  max
+#define max(a,b) ((a) > (b) ? (a) : (b))
+
+/* Used by the ifield rtx function.  */
+#define FLD(f) (fields->f)
+
+static const char * insert_normal
+  (CGEN_CPU_DESC, long, unsigned int, unsigned int, unsigned int,
+   unsigned int, unsigned int, unsigned int, CGEN_INSN_BYTES_PTR);
+static const char * insert_insn_normal
+  (CGEN_CPU_DESC, const CGEN_INSN *,
+   CGEN_FIELDS *, CGEN_INSN_BYTES_PTR, bfd_vma);
+static int extract_normal
+  (CGEN_CPU_DESC, CGEN_EXTRACT_INFO *, CGEN_INSN_INT,
+   unsigned int, unsigned int, unsigned int, unsigned int,
+   unsigned int, unsigned int, bfd_vma, long *);
+static int extract_insn_normal
+  (CGEN_CPU_DESC, const CGEN_INSN *, CGEN_EXTRACT_INFO *,
+   CGEN_INSN_INT, CGEN_FIELDS *, bfd_vma);
+#if CGEN_INT_INSN_P
+static void put_insn_int_value
+  (CGEN_CPU_DESC, CGEN_INSN_BYTES_PTR, int, int, CGEN_INSN_INT);
+#endif
+#if ! CGEN_INT_INSN_P
+static CGEN_INLINE void insert_1
+  (CGEN_CPU_DESC, unsigned long, int, int, int, unsigned char *);
+static CGEN_INLINE int fill_cache
+  (CGEN_CPU_DESC, CGEN_EXTRACT_INFO *,  int, int, bfd_vma);
+static CGEN_INLINE long extract_1
+  (CGEN_CPU_DESC, CGEN_EXTRACT_INFO *, int, int, int, unsigned char *, bfd_vma);
+#endif
+
+/* Operand insertion.  */
+
+#if ! CGEN_INT_INSN_P
+
+/* Subroutine of insert_normal.  */
+
+static CGEN_INLINE void
+insert_1 (CGEN_CPU_DESC cd,
+	  unsigned long value,
+	  int start,
+	  int length,
+	  int word_length,
+	  unsigned char *bufp)
+{
+  unsigned long x,mask;
+  int shift;
+
+  x = cgen_get_insn_value (cd, bufp, word_length);
+
+  /* Written this way to avoid undefined behaviour.  */
+  mask = (((1L << (length - 1)) - 1) << 1) | 1;
+  if (CGEN_INSN_LSB0_P)
+    shift = (start + 1) - length;
+  else
+    shift = (word_length - (start + length));
+  x = (x & ~(mask << shift)) | ((value & mask) << shift);
+
+  cgen_put_insn_value (cd, bufp, word_length, (bfd_vma) x);
+}
+
+#endif /* ! CGEN_INT_INSN_P */
+
+/* Default insertion routine.
+
+   ATTRS is a mask of the boolean attributes.
+   WORD_OFFSET is the offset in bits from the start of the insn of the value.
+   WORD_LENGTH is the length of the word in bits in which the value resides.
+   START is the starting bit number in the word, architecture origin.
+   LENGTH is the length of VALUE in bits.
+   TOTAL_LENGTH is the total length of the insn in bits.
+
+   The result is an error message or NULL if success.  */
+
+/* ??? This duplicates functionality with bfd's howto table and
+   bfd_install_relocation.  */
+/* ??? This doesn't handle bfd_vma's.  Create another function when
+   necessary.  */
+
+static const char *
+insert_normal (CGEN_CPU_DESC cd,
+	       long value,
+	       unsigned int attrs,
+	       unsigned int word_offset,
+	       unsigned int start,
+	       unsigned int length,
+	       unsigned int word_length,
+	       unsigned int total_length,
+	       CGEN_INSN_BYTES_PTR buffer)
+{
+  static char errbuf[100];
+  /* Written this way to avoid undefined behaviour.  */
+  unsigned long mask = (((1L << (length - 1)) - 1) << 1) | 1;
+
+  /* If LENGTH is zero, this operand doesn't contribute to the value.  */
+  if (length == 0)
+    return NULL;
+
+  if (word_length > 32)
+    abort ();
+
+  /* For architectures with insns smaller than the base-insn-bitsize,
+     word_length may be too big.  */
+  if (cd->min_insn_bitsize < cd->base_insn_bitsize)
+    {
+      if (word_offset == 0
+	  && word_length > total_length)
+	word_length = total_length;
+    }
+
+  /* Ensure VALUE will fit.  */
+  if (CGEN_BOOL_ATTR (attrs, CGEN_IFLD_SIGN_OPT))
+    {
+      long minval = - (1L << (length - 1));
+      unsigned long maxval = mask;
+      
+      if ((value > 0 && (unsigned long) value > maxval)
+	  || value < minval)
+	{
+	  /* xgettext:c-format */
+	  sprintf (errbuf,
+		   _("operand out of range (%ld not between %ld and %lu)"),
+		   value, minval, maxval);
+	  return errbuf;
+	}
+    }
+  else if (! CGEN_BOOL_ATTR (attrs, CGEN_IFLD_SIGNED))
+    {
+      unsigned long maxval = mask;
+      unsigned long val = (unsigned long) value;
+
+      /* For hosts with a word size > 32 check to see if value has been sign
+	 extended beyond 32 bits.  If so then ignore these higher sign bits
+	 as the user is attempting to store a 32-bit signed value into an
+	 unsigned 32-bit field which is allowed.  */
+      if (sizeof (unsigned long) > 4 && ((value >> 32) == -1))
+	val &= 0xFFFFFFFF;
+
+      if (val > maxval)
+	{
+	  /* xgettext:c-format */
+	  sprintf (errbuf,
+		   _("operand out of range (0x%lx not between 0 and 0x%lx)"),
+		   val, maxval);
+	  return errbuf;
+	}
+    }
+  else
+    {
+      if (! cgen_signed_overflow_ok_p (cd))
+	{
+	  long minval = - (1L << (length - 1));
+	  long maxval =   (1L << (length - 1)) - 1;
+	  
+	  if (value < minval || value > maxval)
+	    {
+	      sprintf
+		/* xgettext:c-format */
+		(errbuf, _("operand out of range (%ld not between %ld and %ld)"),
+		 value, minval, maxval);
+	      return errbuf;
+	    }
+	}
+    }
+
+#if CGEN_INT_INSN_P
+
+  {
+    int shift;
+
+    if (CGEN_INSN_LSB0_P)
+      shift = (word_offset + start + 1) - length;
+    else
+      shift = total_length - (word_offset + start + length);
+    *buffer = (*buffer & ~(mask << shift)) | ((value & mask) << shift);
+  }
+
+#else /* ! CGEN_INT_INSN_P */
+
+  {
+    unsigned char *bufp = (unsigned char *) buffer + word_offset / 8;
+
+    insert_1 (cd, value, start, length, word_length, bufp);
+  }
+
+#endif /* ! CGEN_INT_INSN_P */
+
+  return NULL;
+}
+
+/* Default insn builder (insert handler).
+   The instruction is recorded in CGEN_INT_INSN_P byte order (meaning
+   that if CGEN_INSN_BYTES_PTR is an int * and thus, the value is
+   recorded in host byte order, otherwise BUFFER is an array of bytes
+   and the value is recorded in target byte order).
+   The result is an error message or NULL if success.  */
+
+static const char *
+insert_insn_normal (CGEN_CPU_DESC cd,
+		    const CGEN_INSN * insn,
+		    CGEN_FIELDS * fields,
+		    CGEN_INSN_BYTES_PTR buffer,
+		    bfd_vma pc)
+{
+  const CGEN_SYNTAX *syntax = CGEN_INSN_SYNTAX (insn);
+  unsigned long value;
+  const CGEN_SYNTAX_CHAR_TYPE * syn;
+
+  CGEN_INIT_INSERT (cd);
+  value = CGEN_INSN_BASE_VALUE (insn);
+
+  /* If we're recording insns as numbers (rather than a string of bytes),
+     target byte order handling is deferred until later.  */
+
+#if CGEN_INT_INSN_P
+
+  put_insn_int_value (cd, buffer, cd->base_insn_bitsize,
+		      CGEN_FIELDS_BITSIZE (fields), value);
+
+#else
+
+  cgen_put_insn_value (cd, buffer, min ((unsigned) cd->base_insn_bitsize,
+					(unsigned) CGEN_FIELDS_BITSIZE (fields)),
+		       value);
+
+#endif /* ! CGEN_INT_INSN_P */
+
+  /* ??? It would be better to scan the format's fields.
+     Still need to be able to insert a value based on the operand though;
+     e.g. storing a branch displacement that got resolved later.
+     Needs more thought first.  */
+
+  for (syn = CGEN_SYNTAX_STRING (syntax); * syn; ++ syn)
+    {
+      const char *errmsg;
+
+      if (CGEN_SYNTAX_CHAR_P (* syn))
+	continue;
+
+      errmsg = (* cd->insert_operand) (cd, CGEN_SYNTAX_FIELD (*syn),
+				       fields, buffer, pc);
+      if (errmsg)
+	return errmsg;
+    }
+
+  return NULL;
+}
+
+#if CGEN_INT_INSN_P
+/* Cover function to store an insn value into an integral insn.  Must go here
+   because it needs <prefix>-desc.h for CGEN_INT_INSN_P.  */
+
+static void
+put_insn_int_value (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,
+		    CGEN_INSN_BYTES_PTR buf,
+		    int length,
+		    int insn_length,
+		    CGEN_INSN_INT value)
+{
+  /* For architectures with insns smaller than the base-insn-bitsize,
+     length may be too big.  */
+  if (length > insn_length)
+    *buf = value;
+  else
+    {
+      int shift = insn_length - length;
+      /* Written this way to avoid undefined behaviour.  */
+      CGEN_INSN_INT mask = (((1L << (length - 1)) - 1) << 1) | 1;
+
+      *buf = (*buf & ~(mask << shift)) | ((value & mask) << shift);
+    }
+}
+#endif
+
+/* Operand extraction.  */
+
+#if ! CGEN_INT_INSN_P
+
+/* Subroutine of extract_normal.
+   Ensure sufficient bytes are cached in EX_INFO.
+   OFFSET is the offset in bytes from the start of the insn of the value.
+   BYTES is the length of the needed value.
+   Returns 1 for success, 0 for failure.  */
+
+static CGEN_INLINE int
+fill_cache (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,
+	    CGEN_EXTRACT_INFO *ex_info,
+	    int offset,
+	    int bytes,
+	    bfd_vma pc)
+{
+  /* It's doubtful that the middle part has already been fetched so
+     we don't optimize that case.  kiss.  */
+  unsigned int mask;
+  disassemble_info *info = (disassemble_info *) ex_info->dis_info;
+
+  /* First do a quick check.  */
+  mask = (1 << bytes) - 1;
+  if (((ex_info->valid >> offset) & mask) == mask)
+    return 1;
+
+  /* Search for the first byte we need to read.  */
+  for (mask = 1 << offset; bytes > 0; --bytes, ++offset, mask <<= 1)
+    if (! (mask & ex_info->valid))
+      break;
+
+  if (bytes)
+    {
+      int status;
+
+      pc += offset;
+      status = (*info->read_memory_func)
+	(pc, ex_info->insn_bytes + offset, bytes, info);
+
+      if (status != 0)
+	{
+	  (*info->memory_error_func) (status, pc, info);
+	  return 0;
+	}
+
+      ex_info->valid |= ((1 << bytes) - 1) << offset;
+    }
+
+  return 1;
+}
+
+/* Subroutine of extract_normal.  */
+
+static CGEN_INLINE long
+extract_1 (CGEN_CPU_DESC cd,
+	   CGEN_EXTRACT_INFO *ex_info ATTRIBUTE_UNUSED,
+	   int start,
+	   int length,
+	   int word_length,
+	   unsigned char *bufp,
+	   bfd_vma pc ATTRIBUTE_UNUSED)
+{
+  unsigned long x;
+  int shift;
+
+  x = cgen_get_insn_value (cd, bufp, word_length);
+
+  if (CGEN_INSN_LSB0_P)
+    shift = (start + 1) - length;
+  else
+    shift = (word_length - (start + length));
+  return x >> shift;
+}
+
+#endif /* ! CGEN_INT_INSN_P */
+
+/* Default extraction routine.
+
+   INSN_VALUE is the first base_insn_bitsize bits of the insn in host order,
+   or sometimes less for cases like the m32r where the base insn size is 32
+   but some insns are 16 bits.
+   ATTRS is a mask of the boolean attributes.  We only need `SIGNED',
+   but for generality we take a bitmask of all of them.
+   WORD_OFFSET is the offset in bits from the start of the insn of the value.
+   WORD_LENGTH is the length of the word in bits in which the value resides.
+   START is the starting bit number in the word, architecture origin.
+   LENGTH is the length of VALUE in bits.
+   TOTAL_LENGTH is the total length of the insn in bits.
+
+   Returns 1 for success, 0 for failure.  */
+
+/* ??? The return code isn't properly used.  wip.  */
+
+/* ??? This doesn't handle bfd_vma's.  Create another function when
+   necessary.  */
+
+static int
+extract_normal (CGEN_CPU_DESC cd,
+#if ! CGEN_INT_INSN_P
+		CGEN_EXTRACT_INFO *ex_info,
+#else
+		CGEN_EXTRACT_INFO *ex_info ATTRIBUTE_UNUSED,
+#endif
+		CGEN_INSN_INT insn_value,
+		unsigned int attrs,
+		unsigned int word_offset,
+		unsigned int start,
+		unsigned int length,
+		unsigned int word_length,
+		unsigned int total_length,
+#if ! CGEN_INT_INSN_P
+		bfd_vma pc,
+#else
+		bfd_vma pc ATTRIBUTE_UNUSED,
+#endif
+		long *valuep)
+{
+  long value, mask;
+
+  /* If LENGTH is zero, this operand doesn't contribute to the value
+     so give it a standard value of zero.  */
+  if (length == 0)
+    {
+      *valuep = 0;
+      return 1;
+    }
+
+  if (word_length > 32)
+    abort ();
+
+  /* For architectures with insns smaller than the insn-base-bitsize,
+     word_length may be too big.  */
+  if (cd->min_insn_bitsize < cd->base_insn_bitsize)
+    {
+      if (word_offset + word_length > total_length)
+	word_length = total_length - word_offset;
+    }
+
+  /* Does the value reside in INSN_VALUE, and at the right alignment?  */
+
+  if (CGEN_INT_INSN_P || (word_offset == 0 && word_length == total_length))
+    {
+      if (CGEN_INSN_LSB0_P)
+	value = insn_value >> ((word_offset + start + 1) - length);
+      else
+	value = insn_value >> (total_length - ( word_offset + start + length));
+    }
+
+#if ! CGEN_INT_INSN_P
+
+  else
+    {
+      unsigned char *bufp = ex_info->insn_bytes + word_offset / 8;
+
+      if (word_length > 32)
+	abort ();
+
+      if (fill_cache (cd, ex_info, word_offset / 8, word_length / 8, pc) == 0)
+	return 0;
+
+      value = extract_1 (cd, ex_info, start, length, word_length, bufp, pc);
+    }
+
+#endif /* ! CGEN_INT_INSN_P */
+
+  /* Written this way to avoid undefined behaviour.  */
+  mask = (((1L << (length - 1)) - 1) << 1) | 1;
+
+  value &= mask;
+  /* sign extend? */
+  if (CGEN_BOOL_ATTR (attrs, CGEN_IFLD_SIGNED)
+      && (value & (1L << (length - 1))))
+    value |= ~mask;
+
+  *valuep = value;
+
+  return 1;
+}
+
+/* Default insn extractor.
+
+   INSN_VALUE is the first base_insn_bitsize bits, translated to host order.
+   The extracted fields are stored in FIELDS.
+   EX_INFO is used to handle reading variable length insns.
+   Return the length of the insn in bits, or 0 if no match,
+   or -1 if an error occurs fetching data (memory_error_func will have
+   been called).  */
+
+static int
+extract_insn_normal (CGEN_CPU_DESC cd,
+		     const CGEN_INSN *insn,
+		     CGEN_EXTRACT_INFO *ex_info,
+		     CGEN_INSN_INT insn_value,
+		     CGEN_FIELDS *fields,
+		     bfd_vma pc)
+{
+  const CGEN_SYNTAX *syntax = CGEN_INSN_SYNTAX (insn);
+  const CGEN_SYNTAX_CHAR_TYPE *syn;
+
+  CGEN_FIELDS_BITSIZE (fields) = CGEN_INSN_BITSIZE (insn);
+
+  CGEN_INIT_EXTRACT (cd);
+
+  for (syn = CGEN_SYNTAX_STRING (syntax); *syn; ++syn)
+    {
+      int length;
+
+      if (CGEN_SYNTAX_CHAR_P (*syn))
+	continue;
+
+      length = (* cd->extract_operand) (cd, CGEN_SYNTAX_FIELD (*syn),
+					ex_info, insn_value, fields, pc);
+      if (length <= 0)
+	return length;
+    }
+
+  /* We recognized and successfully extracted this insn.  */
+  return CGEN_INSN_BITSIZE (insn);
+}
+
+/* Machine generated code added here.  */
+
+const char * ubicom32_cgen_insert_operand
+  (CGEN_CPU_DESC, int, CGEN_FIELDS *, CGEN_INSN_BYTES_PTR, bfd_vma);
+
+/* Main entry point for operand insertion.
+
+   This function is basically just a big switch statement.  Earlier versions
+   used tables to look up the function to use, but
+   - if the table contains both assembler and disassembler functions then
+     the disassembler contains much of the assembler and vice-versa,
+   - there's a lot of inlining possibilities as things grow,
+   - using a switch statement avoids the function call overhead.
+
+   This function could be moved into `parse_insn_normal', but keeping it
+   separate makes clear the interface between `parse_insn_normal' and each of
+   the handlers.  It's also needed by GAS to insert operands that couldn't be
+   resolved during parsing.  */
+
+const char *
+ubicom32_cgen_insert_operand (CGEN_CPU_DESC cd,
+			     int opindex,
+			     CGEN_FIELDS * fields,
+			     CGEN_INSN_BYTES_PTR buffer,
+			     bfd_vma pc ATTRIBUTE_UNUSED)
+{
+  const char * errmsg = NULL;
+  unsigned int total_length = CGEN_FIELDS_BITSIZE (fields);
+
+  switch (opindex)
+    {
+    case UBICOM32_OPERAND_AM :
+      errmsg = insert_normal (cd, fields->f_Am, 0, 0, 7, 3, 32, total_length, buffer);
+      break;
+    case UBICOM32_OPERAND_AN :
+      errmsg = insert_normal (cd, fields->f_An, 0, 0, 23, 3, 32, total_length, buffer);
+      break;
+    case UBICOM32_OPERAND_C :
+      errmsg = insert_normal (cd, fields->f_C, 0, 0, 21, 1, 32, total_length, buffer);
+      break;
+    case UBICOM32_OPERAND_DN :
+      errmsg = insert_normal (cd, fields->f_Dn, 0, 0, 20, 5, 32, total_length, buffer);
+      break;
+    case UBICOM32_OPERAND_P :
+      errmsg = insert_normal (cd, fields->f_P, 0, 0, 22, 1, 32, total_length, buffer);
+      break;
+    case UBICOM32_OPERAND_ACC1HI :
+      break;
+    case UBICOM32_OPERAND_ACC1LO :
+      break;
+    case UBICOM32_OPERAND_BIT5 :
+      errmsg = insert_normal (cd, fields->f_bit5, 0, 0, 15, 5, 32, total_length, buffer);
+      break;
+    case UBICOM32_OPERAND_BIT5_ADDSUB :
+      errmsg = insert_normal (cd, fields->f_bit5, 0, 0, 15, 5, 32, total_length, buffer);
+      break;
+    case UBICOM32_OPERAND_CC :
+      errmsg = insert_normal (cd, fields->f_cond, 0, 0, 26, 4, 32, total_length, buffer);
+      break;
+    case UBICOM32_OPERAND_D_AN :
+      errmsg = insert_normal (cd, fields->f_d_An, 0, 0, 23, 3, 32, total_length, buffer);
+      break;
+    case UBICOM32_OPERAND_D_DIRECT_ADDR :
+      {
+        long value = fields->f_d_direct;
+        value = ((unsigned int) (value) >> (2));
+        errmsg = insert_normal (cd, value, 0, 0, 23, 8, 32, total_length, buffer);
+      }
+      break;
+    case UBICOM32_OPERAND_D_I4_1 :
+      errmsg = insert_normal (cd, fields->f_d_i4_1, 0|(1<<CGEN_IFLD_SIGNED), 0, 19, 4, 32, total_length, buffer);
+      break;
+    case UBICOM32_OPERAND_D_I4_2 :
+      {
+        long value = fields->f_d_i4_2;
+        value = ((unsigned int) (value) >> (1));
+        errmsg = insert_normal (cd, value, 0|(1<<CGEN_IFLD_SIGNED), 0, 19, 4, 32, total_length, buffer);
+      }
+      break;
+    case UBICOM32_OPERAND_D_I4_4 :
+      {
+        long value = fields->f_d_i4_4;
+        value = ((unsigned int) (value) >> (2));
+        errmsg = insert_normal (cd, value, 0|(1<<CGEN_IFLD_SIGNED), 0, 19, 4, 32, total_length, buffer);
+      }
+      break;
+    case UBICOM32_OPERAND_D_IMM7_1 :
+      {
+{
+  FLD (f_d_imm7_t) = ((((unsigned int) (FLD (f_d_imm7_1)) >> (5))) & (3));
+  FLD (f_d_imm7_b) = ((((unsigned int) (FLD (f_d_imm7_1)) >> (0))) & (31));
+}
+        errmsg = insert_normal (cd, fields->f_d_imm7_t, 0, 0, 25, 2, 32, total_length, buffer);
+        if (errmsg)
+          break;
+        errmsg = insert_normal (cd, fields->f_d_imm7_b, 0, 0, 20, 5, 32, total_length, buffer);
+        if (errmsg)
+          break;
+      }
+      break;
+    case UBICOM32_OPERAND_D_IMM7_2 :
+      {
+{
+  FLD (f_d_imm7_t) = ((((unsigned int) (FLD (f_d_imm7_2)) >> (6))) & (3));
+  FLD (f_d_imm7_b) = ((((unsigned int) (FLD (f_d_imm7_2)) >> (1))) & (31));
+}
+        errmsg = insert_normal (cd, fields->f_d_imm7_t, 0, 0, 25, 2, 32, total_length, buffer);
+        if (errmsg)
+          break;
+        errmsg = insert_normal (cd, fields->f_d_imm7_b, 0, 0, 20, 5, 32, total_length, buffer);
+        if (errmsg)
+          break;
+      }
+      break;
+    case UBICOM32_OPERAND_D_IMM7_4 :
+      {
+{
+  FLD (f_d_imm7_t) = ((((unsigned int) (FLD (f_d_imm7_4)) >> (7))) & (3));
+  FLD (f_d_imm7_b) = ((((unsigned int) (FLD (f_d_imm7_4)) >> (2))) & (31));
+}
+        errmsg = insert_normal (cd, fields->f_d_imm7_t, 0, 0, 25, 2, 32, total_length, buffer);
+        if (errmsg)
+          break;
+        errmsg = insert_normal (cd, fields->f_d_imm7_b, 0, 0, 20, 5, 32, total_length, buffer);
+        if (errmsg)
+          break;
+      }
+      break;
+    case UBICOM32_OPERAND_D_IMM8 :
+      errmsg = insert_normal (cd, fields->f_d_imm8, 0|(1<<CGEN_IFLD_SIGNED), 0, 23, 8, 32, total_length, buffer);
+      break;
+    case UBICOM32_OPERAND_D_R :
+      errmsg = insert_normal (cd, fields->f_d_r, 0, 0, 20, 5, 32, total_length, buffer);
+      break;
+    case UBICOM32_OPERAND_DSP_S2_ACC_REG_ADDSUB :
+      errmsg = insert_normal (cd, fields->f_dsp_S2, 0, 0, 14, 4, 32, total_length, buffer);
+      break;
+    case UBICOM32_OPERAND_DSP_S2_ACC_REG_MUL :
+      errmsg = insert_normal (cd, fields->f_dsp_S2, 0, 0, 14, 4, 32, total_length, buffer);
+      break;
+    case UBICOM32_OPERAND_DSP_S2_DATA_REG :
+      errmsg = insert_normal (cd, fields->f_dsp_S2, 0, 0, 14, 4, 32, total_length, buffer);
+      break;
+    case UBICOM32_OPERAND_DSP_S2_DATA_REG_ADDSUB :
+      errmsg = insert_normal (cd, fields->f_dsp_S2, 0, 0, 14, 4, 32, total_length, buffer);
+      break;
+    case UBICOM32_OPERAND_DSP_S2_SEL :
+      errmsg = insert_normal (cd, fields->f_dsp_S2_sel, 0, 0, 18, 1, 32, total_length, buffer);
+      break;
+    case UBICOM32_OPERAND_DSP_C :
+      errmsg = insert_normal (cd, fields->f_dsp_C, 0, 0, 20, 1, 32, total_length, buffer);
+      break;
+    case UBICOM32_OPERAND_DSP_DESTA :
+      errmsg = insert_normal (cd, fields->f_dsp_destA, 0, 0, 16, 1, 32, total_length, buffer);
+      break;
+    case UBICOM32_OPERAND_DSP_T :
+      errmsg = insert_normal (cd, fields->f_dsp_T, 0, 0, 19, 1, 32, total_length, buffer);
+      break;
+    case UBICOM32_OPERAND_DSP_T_ADDSUB :
+      errmsg = insert_normal (cd, fields->f_dsp_T, 0, 0, 19, 1, 32, total_length, buffer);
+      break;
+    case UBICOM32_OPERAND_IMM16_1 :
+      errmsg = insert_normal (cd, fields->f_imm16_1, 0|(1<<CGEN_IFLD_SIGNED), 0, 26, 16, 32, total_length, buffer);
+      break;
+    case UBICOM32_OPERAND_IMM16_2 :
+      errmsg = insert_normal (cd, fields->f_imm16_2, 0|(1<<CGEN_IFLD_SIGNED), 0, 15, 16, 32, total_length, buffer);
+      break;
+    case UBICOM32_OPERAND_IMM24 :
+      {
+{
+  FLD (f_imm23_21) = ((((unsigned int) (FLD (f_imm24)) >> (21))) & (7));
+  FLD (f_o20_0) = ((FLD (f_imm24)) & (2097151));
+}
+        errmsg = insert_normal (cd, fields->f_imm23_21, 0, 0, 26, 3, 32, total_length, buffer);
+        if (errmsg)
+          break;
+        errmsg = insert_normal (cd, fields->f_o20_0, 0, 0, 20, 21, 32, total_length, buffer);
+        if (errmsg)
+          break;
+      }
+      break;
+    case UBICOM32_OPERAND_IMM25 :
+      {
+{
+  FLD (f_imm24_21) = ((((unsigned int) (FLD (f_imm25)) >> (21))) & (15));
+  FLD (f_o20_0) = ((FLD (f_imm25)) & (2097151));
+}
+        errmsg = insert_normal (cd, fields->f_imm24_21, 0, 0, 27, 4, 32, total_length, buffer);
+        if (errmsg)
+          break;
+        errmsg = insert_normal (cd, fields->f_o20_0, 0, 0, 20, 21, 32, total_length, buffer);
+        if (errmsg)
+          break;
+      }
+      break;
+    case UBICOM32_OPERAND_INTERRUPT :
+      errmsg = insert_normal (cd, fields->f_int, 0, 0, 5, 6, 32, total_length, buffer);
+      break;
+    case UBICOM32_OPERAND_IREAD :
+      break;
+    case UBICOM32_OPERAND_IRQ_0 :
+      break;
+    case UBICOM32_OPERAND_IRQ_1 :
+      break;
+    case UBICOM32_OPERAND_MACHI :
+      break;
+    case UBICOM32_OPERAND_MACLO :
+      break;
+    case UBICOM32_OPERAND_OFFSET16 :
+      {
+        fields->f_o16 = ((int) (fields->f_o16) >> (2));
+{
+  FLD (f_o15_13) = ((((unsigned int) (FLD (f_o16)) >> (13))) & (7));
+  FLD (f_o12_8) = ((((unsigned int) (FLD (f_o16)) >> (8))) & (31));
+  FLD (f_o7_5) = ((((unsigned int) (FLD (f_o16)) >> (5))) & (7));
+  FLD (f_o4_0) = ((FLD (f_o16)) & (31));
+}
+        errmsg = insert_normal (cd, fields->f_o15_13, 0|(1<<CGEN_IFLD_SIGNED), 0, 26, 3, 32, total_length, buffer);
+        if (errmsg)
+          break;
+        errmsg = insert_normal (cd, fields->f_o12_8, 0, 0, 20, 5, 32, total_length, buffer);
+        if (errmsg)
+          break;
+        errmsg = insert_normal (cd, fields->f_o7_5, 0, 0, 10, 3, 32, total_length, buffer);
+        if (errmsg)
+          break;
+        errmsg = insert_normal (cd, fields->f_o4_0, 0, 0, 4, 5, 32, total_length, buffer);
+        if (errmsg)
+          break;
+      }
+      break;
+    case UBICOM32_OPERAND_OFFSET21 :
+      {
+        long value = fields->f_o21;
+        value = ((unsigned int) (((value) - (pc))) >> (2));
+        errmsg = insert_normal (cd, value, 0|(1<<CGEN_IFLD_SIGNED)|(1<<CGEN_IFLD_PCREL_ADDR), 0, 20, 21, 32, total_length, buffer);
+      }
+      break;
+    case UBICOM32_OPERAND_OFFSET24 :
+      {
+        fields->f_o24 = ((int) (((fields->f_o24) - (pc))) >> (2));
+{
+  FLD (f_o23_21) = ((((unsigned int) (FLD (f_o24)) >> (21))) & (7));
+  FLD (f_o20_0) = ((FLD (f_o24)) & (2097151));
+}
+        errmsg = insert_normal (cd, fields->f_o23_21, 0|(1<<CGEN_IFLD_SIGNED), 0, 26, 3, 32, total_length, buffer);
+        if (errmsg)
+          break;
+        errmsg = insert_normal (cd, fields->f_o20_0, 0, 0, 20, 21, 32, total_length, buffer);
+        if (errmsg)
+          break;
+      }
+      break;
+    case UBICOM32_OPERAND_OPC1 :
+      errmsg = insert_normal (cd, fields->f_op1, 0, 0, 31, 5, 32, total_length, buffer);
+      break;
+    case UBICOM32_OPERAND_OPC2 :
+      errmsg = insert_normal (cd, fields->f_op2, 0, 0, 15, 5, 32, total_length, buffer);
+      break;
+    case UBICOM32_OPERAND_PDEC_S1_IMM7_4 :
+      {
+{
+  FLD (f_s1_imm7_t) = ((((unsigned int) (FLD (f_s1_imm7_4)) >> (7))) & (3));
+  FLD (f_s1_imm7_b) = ((((unsigned int) (FLD (f_s1_imm7_4)) >> (2))) & (31));
+}
+        errmsg = insert_normal (cd, fields->f_s1_imm7_t, 0, 0, 9, 2, 32, total_length, buffer);
+        if (errmsg)
+          break;
+        errmsg = insert_normal (cd, fields->f_s1_imm7_b, 0, 0, 4, 5, 32, total_length, buffer);
+        if (errmsg)
+          break;
+      }
+      break;
+    case UBICOM32_OPERAND_S1_AN :
+      errmsg = insert_normal (cd, fields->f_s1_An, 0, 0, 7, 3, 32, total_length, buffer);
+      break;
+    case UBICOM32_OPERAND_S1_DIRECT_ADDR :
+      {
+        long value = fields->f_s1_direct;
+        value = ((unsigned int) (value) >> (2));
+        errmsg = insert_normal (cd, value, 0, 0, 7, 8, 32, total_length, buffer);
+      }
+      break;
+    case UBICOM32_OPERAND_S1_I4_1 :
+      errmsg = insert_normal (cd, fields->f_s1_i4_1, 0|(1<<CGEN_IFLD_SIGNED), 0, 3, 4, 32, total_length, buffer);
+      break;
+    case UBICOM32_OPERAND_S1_I4_2 :
+      {
+        long value = fields->f_s1_i4_2;
+        value = ((unsigned int) (value) >> (1));
+        errmsg = insert_normal (cd, value, 0|(1<<CGEN_IFLD_SIGNED), 0, 3, 4, 32, total_length, buffer);
+      }
+      break;
+    case UBICOM32_OPERAND_S1_I4_4 :
+      {
+        long value = fields->f_s1_i4_4;
+        value = ((unsigned int) (value) >> (2));
+        errmsg = insert_normal (cd, value, 0|(1<<CGEN_IFLD_SIGNED), 0, 3, 4, 32, total_length, buffer);
+      }
+      break;
+    case UBICOM32_OPERAND_S1_IMM7_1 :
+      {
+{
+  FLD (f_s1_imm7_t) = ((((unsigned int) (FLD (f_s1_imm7_1)) >> (5))) & (3));
+  FLD (f_s1_imm7_b) = ((((unsigned int) (FLD (f_s1_imm7_1)) >> (0))) & (31));
+}
+        errmsg = insert_normal (cd, fields->f_s1_imm7_t, 0, 0, 9, 2, 32, total_length, buffer);
+        if (errmsg)
+          break;
+        errmsg = insert_normal (cd, fields->f_s1_imm7_b, 0, 0, 4, 5, 32, total_length, buffer);
+        if (errmsg)
+          break;
+      }
+      break;
+    case UBICOM32_OPERAND_S1_IMM7_2 :
+      {
+{
+  FLD (f_s1_imm7_t) = ((((unsigned int) (FLD (f_s1_imm7_2)) >> (6))) & (3));
+  FLD (f_s1_imm7_b) = ((((unsigned int) (FLD (f_s1_imm7_2)) >> (1))) & (31));
+}
+        errmsg = insert_normal (cd, fields->f_s1_imm7_t, 0, 0, 9, 2, 32, total_length, buffer);
+        if (errmsg)
+          break;
+        errmsg = insert_normal (cd, fields->f_s1_imm7_b, 0, 0, 4, 5, 32, total_length, buffer);
+        if (errmsg)
+          break;
+      }
+      break;
+    case UBICOM32_OPERAND_S1_IMM7_4 :
+      {
+{
+  FLD (f_s1_imm7_t) = ((((unsigned int) (FLD (f_s1_imm7_4)) >> (7))) & (3));
+  FLD (f_s1_imm7_b) = ((((unsigned int) (FLD (f_s1_imm7_4)) >> (2))) & (31));
+}
+        errmsg = insert_normal (cd, fields->f_s1_imm7_t, 0, 0, 9, 2, 32, total_length, buffer);
+        if (errmsg)
+          break;
+        errmsg = insert_normal (cd, fields->f_s1_imm7_b, 0, 0, 4, 5, 32, total_length, buffer);
+        if (errmsg)
+          break;
+      }
+      break;
+    case UBICOM32_OPERAND_S1_IMM8 :
+      errmsg = insert_normal (cd, fields->f_s1_imm8, 0|(1<<CGEN_IFLD_SIGNED), 0, 7, 8, 32, total_length, buffer);
+      break;
+    case UBICOM32_OPERAND_S1_R :
+      errmsg = insert_normal (cd, fields->f_s1_r, 0, 0, 4, 5, 32, total_length, buffer);
+      break;
+    case UBICOM32_OPERAND_S2 :
+      errmsg = insert_normal (cd, fields->f_s2, 0, 0, 14, 4, 32, total_length, buffer);
+      break;
+    case UBICOM32_OPERAND_SRC3 :
+      break;
+    case UBICOM32_OPERAND_X_BIT26 :
+      errmsg = insert_normal (cd, fields->f_bit26, 0, 0, 26, 1, 32, total_length, buffer);
+      break;
+    case UBICOM32_OPERAND_X_D :
+      errmsg = insert_normal (cd, fields->f_d, 0, 0, 26, 11, 32, total_length, buffer);
+      break;
+    case UBICOM32_OPERAND_X_DN :
+      errmsg = insert_normal (cd, fields->f_Dn, 0, 0, 20, 5, 32, total_length, buffer);
+      break;
+    case UBICOM32_OPERAND_X_OP2 :
+      errmsg = insert_normal (cd, fields->f_op2, 0, 0, 15, 5, 32, total_length, buffer);
+      break;
+    case UBICOM32_OPERAND_X_S1 :
+      errmsg = insert_normal (cd, fields->f_s1, 0, 0, 10, 11, 32, total_length, buffer);
+      break;
+
+    default :
+      /* xgettext:c-format */
+      fprintf (stderr, _("Unrecognized field %d while building insn.\n"),
+	       opindex);
+      abort ();
+  }
+
+  return errmsg;
+}
+
+int ubicom32_cgen_extract_operand
+  (CGEN_CPU_DESC, int, CGEN_EXTRACT_INFO *, CGEN_INSN_INT, CGEN_FIELDS *, bfd_vma);
+
+/* Main entry point for operand extraction.
+   The result is <= 0 for error, >0 for success.
+   ??? Actual values aren't well defined right now.
+
+   This function is basically just a big switch statement.  Earlier versions
+   used tables to look up the function to use, but
+   - if the table contains both assembler and disassembler functions then
+     the disassembler contains much of the assembler and vice-versa,
+   - there's a lot of inlining possibilities as things grow,
+   - using a switch statement avoids the function call overhead.
+
+   This function could be moved into `print_insn_normal', but keeping it
+   separate makes clear the interface between `print_insn_normal' and each of
+   the handlers.  */
+
+int
+ubicom32_cgen_extract_operand (CGEN_CPU_DESC cd,
+			     int opindex,
+			     CGEN_EXTRACT_INFO *ex_info,
+			     CGEN_INSN_INT insn_value,
+			     CGEN_FIELDS * fields,
+			     bfd_vma pc)
+{
+  /* Assume success (for those operands that are nops).  */
+  int length = 1;
+  unsigned int total_length = CGEN_FIELDS_BITSIZE (fields);
+
+  switch (opindex)
+    {
+    case UBICOM32_OPERAND_AM :
+      length = extract_normal (cd, ex_info, insn_value, 0, 0, 7, 3, 32, total_length, pc, & fields->f_Am);
+      break;
+    case UBICOM32_OPERAND_AN :
+      length = extract_normal (cd, ex_info, insn_value, 0, 0, 23, 3, 32, total_length, pc, & fields->f_An);
+      break;
+    case UBICOM32_OPERAND_C :
+      length = extract_normal (cd, ex_info, insn_value, 0, 0, 21, 1, 32, total_length, pc, & fields->f_C);
+      break;
+    case UBICOM32_OPERAND_DN :
+      length = extract_normal (cd, ex_info, insn_value, 0, 0, 20, 5, 32, total_length, pc, & fields->f_Dn);
+      break;
+    case UBICOM32_OPERAND_P :
+      length = extract_normal (cd, ex_info, insn_value, 0, 0, 22, 1, 32, total_length, pc, & fields->f_P);
+      break;
+    case UBICOM32_OPERAND_ACC1HI :
+      break;
+    case UBICOM32_OPERAND_ACC1LO :
+      break;
+    case UBICOM32_OPERAND_BIT5 :
+      length = extract_normal (cd, ex_info, insn_value, 0, 0, 15, 5, 32, total_length, pc, & fields->f_bit5);
+      break;
+    case UBICOM32_OPERAND_BIT5_ADDSUB :
+      length = extract_normal (cd, ex_info, insn_value, 0, 0, 15, 5, 32, total_length, pc, & fields->f_bit5);
+      break;
+    case UBICOM32_OPERAND_CC :
+      length = extract_normal (cd, ex_info, insn_value, 0, 0, 26, 4, 32, total_length, pc, & fields->f_cond);
+      break;
+    case UBICOM32_OPERAND_D_AN :
+      length = extract_normal (cd, ex_info, insn_value, 0, 0, 23, 3, 32, total_length, pc, & fields->f_d_An);
+      break;
+    case UBICOM32_OPERAND_D_DIRECT_ADDR :
+      {
+        long value;
+        length = extract_normal (cd, ex_info, insn_value, 0, 0, 23, 8, 32, total_length, pc, & value);
+        value = ((value) << (2));
+        fields->f_d_direct = value;
+      }
+      break;
+    case UBICOM32_OPERAND_D_I4_1 :
+      length = extract_normal (cd, ex_info, insn_value, 0|(1<<CGEN_IFLD_SIGNED), 0, 19, 4, 32, total_length, pc, & fields->f_d_i4_1);
+      break;
+    case UBICOM32_OPERAND_D_I4_2 :
+      {
+        long value;
+        length = extract_normal (cd, ex_info, insn_value, 0|(1<<CGEN_IFLD_SIGNED), 0, 19, 4, 32, total_length, pc, & value);
+        value = ((value) << (1));
+        fields->f_d_i4_2 = value;
+      }
+      break;
+    case UBICOM32_OPERAND_D_I4_4 :
+      {
+        long value;
+        length = extract_normal (cd, ex_info, insn_value, 0|(1<<CGEN_IFLD_SIGNED), 0, 19, 4, 32, total_length, pc, & value);
+        value = ((value) << (2));
+        fields->f_d_i4_4 = value;
+      }
+      break;
+    case UBICOM32_OPERAND_D_IMM7_1 :
+      {
+        length = extract_normal (cd, ex_info, insn_value, 0, 0, 25, 2, 32, total_length, pc, & fields->f_d_imm7_t);
+        if (length <= 0) break;
+        length = extract_normal (cd, ex_info, insn_value, 0, 0, 20, 5, 32, total_length, pc, & fields->f_d_imm7_b);
+        if (length <= 0) break;
+{
+  FLD (f_d_imm7_1) = ((((((FLD (f_d_imm7_t)) << (5))) | (FLD (f_d_imm7_b)))) << (0));
+}
+      }
+      break;
+    case UBICOM32_OPERAND_D_IMM7_2 :
+      {
+        length = extract_normal (cd, ex_info, insn_value, 0, 0, 25, 2, 32, total_length, pc, & fields->f_d_imm7_t);
+        if (length <= 0) break;
+        length = extract_normal (cd, ex_info, insn_value, 0, 0, 20, 5, 32, total_length, pc, & fields->f_d_imm7_b);
+        if (length <= 0) break;
+{
+  FLD (f_d_imm7_2) = ((((((FLD (f_d_imm7_t)) << (5))) | (FLD (f_d_imm7_b)))) << (1));
+}
+      }
+      break;
+    case UBICOM32_OPERAND_D_IMM7_4 :
+      {
+        length = extract_normal (cd, ex_info, insn_value, 0, 0, 25, 2, 32, total_length, pc, & fields->f_d_imm7_t);
+        if (length <= 0) break;
+        length = extract_normal (cd, ex_info, insn_value, 0, 0, 20, 5, 32, total_length, pc, & fields->f_d_imm7_b);
+        if (length <= 0) break;
+{
+  FLD (f_d_imm7_4) = ((((((FLD (f_d_imm7_t)) << (5))) | (FLD (f_d_imm7_b)))) << (2));
+}
+      }
+      break;
+    case UBICOM32_OPERAND_D_IMM8 :
+      length = extract_normal (cd, ex_info, insn_value, 0|(1<<CGEN_IFLD_SIGNED), 0, 23, 8, 32, total_length, pc, & fields->f_d_imm8);
+      break;
+    case UBICOM32_OPERAND_D_R :
+      length = extract_normal (cd, ex_info, insn_value, 0, 0, 20, 5, 32, total_length, pc, & fields->f_d_r);
+      break;
+    case UBICOM32_OPERAND_DSP_S2_ACC_REG_ADDSUB :
+      length = extract_normal (cd, ex_info, insn_value, 0, 0, 14, 4, 32, total_length, pc, & fields->f_dsp_S2);
+      break;
+    case UBICOM32_OPERAND_DSP_S2_ACC_REG_MUL :
+      length = extract_normal (cd, ex_info, insn_value, 0, 0, 14, 4, 32, total_length, pc, & fields->f_dsp_S2);
+      break;
+    case UBICOM32_OPERAND_DSP_S2_DATA_REG :
+      length = extract_normal (cd, ex_info, insn_value, 0, 0, 14, 4, 32, total_length, pc, & fields->f_dsp_S2);
+      break;
+    case UBICOM32_OPERAND_DSP_S2_DATA_REG_ADDSUB :
+      length = extract_normal (cd, ex_info, insn_value, 0, 0, 14, 4, 32, total_length, pc, & fields->f_dsp_S2);
+      break;
+    case UBICOM32_OPERAND_DSP_S2_SEL :
+      length = extract_normal (cd, ex_info, insn_value, 0, 0, 18, 1, 32, total_length, pc, & fields->f_dsp_S2_sel);
+      break;
+    case UBICOM32_OPERAND_DSP_C :
+      length = extract_normal (cd, ex_info, insn_value, 0, 0, 20, 1, 32, total_length, pc, & fields->f_dsp_C);
+      break;
+    case UBICOM32_OPERAND_DSP_DESTA :
+      length = extract_normal (cd, ex_info, insn_value, 0, 0, 16, 1, 32, total_length, pc, & fields->f_dsp_destA);
+      break;
+    case UBICOM32_OPERAND_DSP_T :
+      length = extract_normal (cd, ex_info, insn_value, 0, 0, 19, 1, 32, total_length, pc, & fields->f_dsp_T);
+      break;
+    case UBICOM32_OPERAND_DSP_T_ADDSUB :
+      length = extract_normal (cd, ex_info, insn_value, 0, 0, 19, 1, 32, total_length, pc, & fields->f_dsp_T);
+      break;
+    case UBICOM32_OPERAND_IMM16_1 :
+      length = extract_normal (cd, ex_info, insn_value, 0|(1<<CGEN_IFLD_SIGNED), 0, 26, 16, 32, total_length, pc, & fields->f_imm16_1);
+      break;
+    case UBICOM32_OPERAND_IMM16_2 :
+      length = extract_normal (cd, ex_info, insn_value, 0|(1<<CGEN_IFLD_SIGNED), 0, 15, 16, 32, total_length, pc, & fields->f_imm16_2);
+      break;
+    case UBICOM32_OPERAND_IMM24 :
+      {
+        length = extract_normal (cd, ex_info, insn_value, 0, 0, 26, 3, 32, total_length, pc, & fields->f_imm23_21);
+        if (length <= 0) break;
+        length = extract_normal (cd, ex_info, insn_value, 0, 0, 20, 21, 32, total_length, pc, & fields->f_o20_0);
+        if (length <= 0) break;
+{
+  FLD (f_imm24) = ((FLD (f_o20_0)) | (((FLD (f_imm23_21)) << (21))));
+}
+      }
+      break;
+    case UBICOM32_OPERAND_IMM25 :
+      {
+        length = extract_normal (cd, ex_info, insn_value, 0, 0, 27, 4, 32, total_length, pc, & fields->f_imm24_21);
+        if (length <= 0) break;
+        length = extract_normal (cd, ex_info, insn_value, 0, 0, 20, 21, 32, total_length, pc, & fields->f_o20_0);
+        if (length <= 0) break;
+{
+  FLD (f_imm25) = ((FLD (f_o20_0)) | (((FLD (f_imm24_21)) << (21))));
+}
+      }
+      break;
+    case UBICOM32_OPERAND_INTERRUPT :
+      length = extract_normal (cd, ex_info, insn_value, 0, 0, 5, 6, 32, total_length, pc, & fields->f_int);
+      break;
+    case UBICOM32_OPERAND_IREAD :
+      break;
+    case UBICOM32_OPERAND_IRQ_0 :
+      break;
+    case UBICOM32_OPERAND_IRQ_1 :
+      break;
+    case UBICOM32_OPERAND_MACHI :
+      break;
+    case UBICOM32_OPERAND_MACLO :
+      break;
+    case UBICOM32_OPERAND_OFFSET16 :
+      {
+        length = extract_normal (cd, ex_info, insn_value, 0|(1<<CGEN_IFLD_SIGNED), 0, 26, 3, 32, total_length, pc, & fields->f_o15_13);
+        if (length <= 0) break;
+        length = extract_normal (cd, ex_info, insn_value, 0, 0, 20, 5, 32, total_length, pc, & fields->f_o12_8);
+        if (length <= 0) break;
+        length = extract_normal (cd, ex_info, insn_value, 0, 0, 10, 3, 32, total_length, pc, & fields->f_o7_5);
+        if (length <= 0) break;
+        length = extract_normal (cd, ex_info, insn_value, 0, 0, 4, 5, 32, total_length, pc, & fields->f_o4_0);
+        if (length <= 0) break;
+{
+  FLD (f_o16) = ((FLD (f_o4_0)) | (((((FLD (f_o15_13)) << (13))) | (((((FLD (f_o12_8)) << (8))) | (((FLD (f_o7_5)) << (5))))))));
+}
+        fields->f_o16 = ((fields->f_o16) << (2));
+      }
+      break;
+    case UBICOM32_OPERAND_OFFSET21 :
+      {
+        long value;
+        length = extract_normal (cd, ex_info, insn_value, 0|(1<<CGEN_IFLD_SIGNED)|(1<<CGEN_IFLD_PCREL_ADDR), 0, 20, 21, 32, total_length, pc, & value);
+        value = ((((((value) << (2))) + (pc))) & (0xfffffffc));
+        fields->f_o21 = value;
+      }
+      break;
+    case UBICOM32_OPERAND_OFFSET24 :
+      {
+        length = extract_normal (cd, ex_info, insn_value, 0|(1<<CGEN_IFLD_SIGNED), 0, 26, 3, 32, total_length, pc, & fields->f_o23_21);
+        if (length <= 0) break;
+        length = extract_normal (cd, ex_info, insn_value, 0, 0, 20, 21, 32, total_length, pc, & fields->f_o20_0);
+        if (length <= 0) break;
+{
+  FLD (f_o24) = ((FLD (f_o20_0)) | (((FLD (f_o23_21)) << (21))));
+}
+        fields->f_o24 = ((((fields->f_o24) << (2))) + (pc));
+      }
+      break;
+    case UBICOM32_OPERAND_OPC1 :
+      length = extract_normal (cd, ex_info, insn_value, 0, 0, 31, 5, 32, total_length, pc, & fields->f_op1);
+      break;
+    case UBICOM32_OPERAND_OPC2 :
+      length = extract_normal (cd, ex_info, insn_value, 0, 0, 15, 5, 32, total_length, pc, & fields->f_op2);
+      break;
+    case UBICOM32_OPERAND_PDEC_S1_IMM7_4 :
+      {
+        length = extract_normal (cd, ex_info, insn_value, 0, 0, 9, 2, 32, total_length, pc, & fields->f_s1_imm7_t);
+        if (length <= 0) break;
+        length = extract_normal (cd, ex_info, insn_value, 0, 0, 4, 5, 32, total_length, pc, & fields->f_s1_imm7_b);
+        if (length <= 0) break;
+{
+  FLD (f_s1_imm7_4) = ((((((FLD (f_s1_imm7_t)) << (5))) | (FLD (f_s1_imm7_b)))) << (2));
+}
+      }
+      break;
+    case UBICOM32_OPERAND_S1_AN :
+      length = extract_normal (cd, ex_info, insn_value, 0, 0, 7, 3, 32, total_length, pc, & fields->f_s1_An);
+      break;
+    case UBICOM32_OPERAND_S1_DIRECT_ADDR :
+      {
+        long value;
+        length = extract_normal (cd, ex_info, insn_value, 0, 0, 7, 8, 32, total_length, pc, & value);
+        value = ((value) << (2));
+        fields->f_s1_direct = value;
+      }
+      break;
+    case UBICOM32_OPERAND_S1_I4_1 :
+      length = extract_normal (cd, ex_info, insn_value, 0|(1<<CGEN_IFLD_SIGNED), 0, 3, 4, 32, total_length, pc, & fields->f_s1_i4_1);
+      break;
+    case UBICOM32_OPERAND_S1_I4_2 :
+      {
+        long value;
+        length = extract_normal (cd, ex_info, insn_value, 0|(1<<CGEN_IFLD_SIGNED), 0, 3, 4, 32, total_length, pc, & value);
+        value = ((value) << (1));
+        fields->f_s1_i4_2 = value;
+      }
+      break;
+    case UBICOM32_OPERAND_S1_I4_4 :
+      {
+        long value;
+        length = extract_normal (cd, ex_info, insn_value, 0|(1<<CGEN_IFLD_SIGNED), 0, 3, 4, 32, total_length, pc, & value);
+        value = ((value) << (2));
+        fields->f_s1_i4_4 = value;
+      }
+      break;
+    case UBICOM32_OPERAND_S1_IMM7_1 :
+      {
+        length = extract_normal (cd, ex_info, insn_value, 0, 0, 9, 2, 32, total_length, pc, & fields->f_s1_imm7_t);
+        if (length <= 0) break;
+        length = extract_normal (cd, ex_info, insn_value, 0, 0, 4, 5, 32, total_length, pc, & fields->f_s1_imm7_b);
+        if (length <= 0) break;
+{
+  FLD (f_s1_imm7_1) = ((((((FLD (f_s1_imm7_t)) << (5))) | (FLD (f_s1_imm7_b)))) << (0));
+}
+      }
+      break;
+    case UBICOM32_OPERAND_S1_IMM7_2 :
+      {
+        length = extract_normal (cd, ex_info, insn_value, 0, 0, 9, 2, 32, total_length, pc, & fields->f_s1_imm7_t);
+        if (length <= 0) break;
+        length = extract_normal (cd, ex_info, insn_value, 0, 0, 4, 5, 32, total_length, pc, & fields->f_s1_imm7_b);
+        if (length <= 0) break;
+{
+  FLD (f_s1_imm7_2) = ((((((FLD (f_s1_imm7_t)) << (5))) | (FLD (f_s1_imm7_b)))) << (1));
+}
+      }
+      break;
+    case UBICOM32_OPERAND_S1_IMM7_4 :
+      {
+        length = extract_normal (cd, ex_info, insn_value, 0, 0, 9, 2, 32, total_length, pc, & fields->f_s1_imm7_t);
+        if (length <= 0) break;
+        length = extract_normal (cd, ex_info, insn_value, 0, 0, 4, 5, 32, total_length, pc, & fields->f_s1_imm7_b);
+        if (length <= 0) break;
+{
+  FLD (f_s1_imm7_4) = ((((((FLD (f_s1_imm7_t)) << (5))) | (FLD (f_s1_imm7_b)))) << (2));
+}
+      }
+      break;
+    case UBICOM32_OPERAND_S1_IMM8 :
+      length = extract_normal (cd, ex_info, insn_value, 0|(1<<CGEN_IFLD_SIGNED), 0, 7, 8, 32, total_length, pc, & fields->f_s1_imm8);
+      break;
+    case UBICOM32_OPERAND_S1_R :
+      length = extract_normal (cd, ex_info, insn_value, 0, 0, 4, 5, 32, total_length, pc, & fields->f_s1_r);
+      break;
+    case UBICOM32_OPERAND_S2 :
+      length = extract_normal (cd, ex_info, insn_value, 0, 0, 14, 4, 32, total_length, pc, & fields->f_s2);
+      break;
+    case UBICOM32_OPERAND_SRC3 :
+      break;
+    case UBICOM32_OPERAND_X_BIT26 :
+      length = extract_normal (cd, ex_info, insn_value, 0, 0, 26, 1, 32, total_length, pc, & fields->f_bit26);
+      break;
+    case UBICOM32_OPERAND_X_D :
+      length = extract_normal (cd, ex_info, insn_value, 0, 0, 26, 11, 32, total_length, pc, & fields->f_d);
+      break;
+    case UBICOM32_OPERAND_X_DN :
+      length = extract_normal (cd, ex_info, insn_value, 0, 0, 20, 5, 32, total_length, pc, & fields->f_Dn);
+      break;
+    case UBICOM32_OPERAND_X_OP2 :
+      length = extract_normal (cd, ex_info, insn_value, 0, 0, 15, 5, 32, total_length, pc, & fields->f_op2);
+      break;
+    case UBICOM32_OPERAND_X_S1 :
+      length = extract_normal (cd, ex_info, insn_value, 0, 0, 10, 11, 32, total_length, pc, & fields->f_s1);
+      break;
+
+    default :
+      /* xgettext:c-format */
+      fprintf (stderr, _("Unrecognized field %d while decoding insn.\n"),
+	       opindex);
+      abort ();
+    }
+
+  return length;
+}
+
+cgen_insert_fn * const ubicom32_cgen_insert_handlers[] = 
+{
+  insert_insn_normal,
+};
+
+cgen_extract_fn * const ubicom32_cgen_extract_handlers[] = 
+{
+  extract_insn_normal,
+};
+
+int ubicom32_cgen_get_int_operand     (CGEN_CPU_DESC, int, const CGEN_FIELDS *);
+bfd_vma ubicom32_cgen_get_vma_operand (CGEN_CPU_DESC, int, const CGEN_FIELDS *);
+
+/* Getting values from cgen_fields is handled by a collection of functions.
+   They are distinguished by the type of the VALUE argument they return.
+   TODO: floating point, inlining support, remove cases where result type
+   not appropriate.  */
+
+int
+ubicom32_cgen_get_int_operand (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,
+			     int opindex,
+			     const CGEN_FIELDS * fields)
+{
+  int value;
+
+  switch (opindex)
+    {
+    case UBICOM32_OPERAND_AM :
+      value = fields->f_Am;
+      break;
+    case UBICOM32_OPERAND_AN :
+      value = fields->f_An;
+      break;
+    case UBICOM32_OPERAND_C :
+      value = fields->f_C;
+      break;
+    case UBICOM32_OPERAND_DN :
+      value = fields->f_Dn;
+      break;
+    case UBICOM32_OPERAND_P :
+      value = fields->f_P;
+      break;
+    case UBICOM32_OPERAND_ACC1HI :
+      value = 0;
+      break;
+    case UBICOM32_OPERAND_ACC1LO :
+      value = 0;
+      break;
+    case UBICOM32_OPERAND_BIT5 :
+      value = fields->f_bit5;
+      break;
+    case UBICOM32_OPERAND_BIT5_ADDSUB :
+      value = fields->f_bit5;
+      break;
+    case UBICOM32_OPERAND_CC :
+      value = fields->f_cond;
+      break;
+    case UBICOM32_OPERAND_D_AN :
+      value = fields->f_d_An;
+      break;
+    case UBICOM32_OPERAND_D_DIRECT_ADDR :
+      value = fields->f_d_direct;
+      break;
+    case UBICOM32_OPERAND_D_I4_1 :
+      value = fields->f_d_i4_1;
+      break;
+    case UBICOM32_OPERAND_D_I4_2 :
+      value = fields->f_d_i4_2;
+      break;
+    case UBICOM32_OPERAND_D_I4_4 :
+      value = fields->f_d_i4_4;
+      break;
+    case UBICOM32_OPERAND_D_IMM7_1 :
+      value = fields->f_d_imm7_1;
+      break;
+    case UBICOM32_OPERAND_D_IMM7_2 :
+      value = fields->f_d_imm7_2;
+      break;
+    case UBICOM32_OPERAND_D_IMM7_4 :
+      value = fields->f_d_imm7_4;
+      break;
+    case UBICOM32_OPERAND_D_IMM8 :
+      value = fields->f_d_imm8;
+      break;
+    case UBICOM32_OPERAND_D_R :
+      value = fields->f_d_r;
+      break;
+    case UBICOM32_OPERAND_DSP_S2_ACC_REG_ADDSUB :
+      value = fields->f_dsp_S2;
+      break;
+    case UBICOM32_OPERAND_DSP_S2_ACC_REG_MUL :
+      value = fields->f_dsp_S2;
+      break;
+    case UBICOM32_OPERAND_DSP_S2_DATA_REG :
+      value = fields->f_dsp_S2;
+      break;
+    case UBICOM32_OPERAND_DSP_S2_DATA_REG_ADDSUB :
+      value = fields->f_dsp_S2;
+      break;
+    case UBICOM32_OPERAND_DSP_S2_SEL :
+      value = fields->f_dsp_S2_sel;
+      break;
+    case UBICOM32_OPERAND_DSP_C :
+      value = fields->f_dsp_C;
+      break;
+    case UBICOM32_OPERAND_DSP_DESTA :
+      value = fields->f_dsp_destA;
+      break;
+    case UBICOM32_OPERAND_DSP_T :
+      value = fields->f_dsp_T;
+      break;
+    case UBICOM32_OPERAND_DSP_T_ADDSUB :
+      value = fields->f_dsp_T;
+      break;
+    case UBICOM32_OPERAND_IMM16_1 :
+      value = fields->f_imm16_1;
+      break;
+    case UBICOM32_OPERAND_IMM16_2 :
+      value = fields->f_imm16_2;
+      break;
+    case UBICOM32_OPERAND_IMM24 :
+      value = fields->f_imm24;
+      break;
+    case UBICOM32_OPERAND_IMM25 :
+      value = fields->f_imm25;
+      break;
+    case UBICOM32_OPERAND_INTERRUPT :
+      value = fields->f_int;
+      break;
+    case UBICOM32_OPERAND_IREAD :
+      value = 0;
+      break;
+    case UBICOM32_OPERAND_IRQ_0 :
+      value = 0;
+      break;
+    case UBICOM32_OPERAND_IRQ_1 :
+      value = 0;
+      break;
+    case UBICOM32_OPERAND_MACHI :
+      value = 0;
+      break;
+    case UBICOM32_OPERAND_MACLO :
+      value = 0;
+      break;
+    case UBICOM32_OPERAND_OFFSET16 :
+      value = fields->f_o16;
+      break;
+    case UBICOM32_OPERAND_OFFSET21 :
+      value = fields->f_o21;
+      break;
+    case UBICOM32_OPERAND_OFFSET24 :
+      value = fields->f_o24;
+      break;
+    case UBICOM32_OPERAND_OPC1 :
+      value = fields->f_op1;
+      break;
+    case UBICOM32_OPERAND_OPC2 :
+      value = fields->f_op2;
+      break;
+    case UBICOM32_OPERAND_PDEC_S1_IMM7_4 :
+      value = fields->f_s1_imm7_4;
+      break;
+    case UBICOM32_OPERAND_S1_AN :
+      value = fields->f_s1_An;
+      break;
+    case UBICOM32_OPERAND_S1_DIRECT_ADDR :
+      value = fields->f_s1_direct;
+      break;
+    case UBICOM32_OPERAND_S1_I4_1 :
+      value = fields->f_s1_i4_1;
+      break;
+    case UBICOM32_OPERAND_S1_I4_2 :
+      value = fields->f_s1_i4_2;
+      break;
+    case UBICOM32_OPERAND_S1_I4_4 :
+      value = fields->f_s1_i4_4;
+      break;
+    case UBICOM32_OPERAND_S1_IMM7_1 :
+      value = fields->f_s1_imm7_1;
+      break;
+    case UBICOM32_OPERAND_S1_IMM7_2 :
+      value = fields->f_s1_imm7_2;
+      break;
+    case UBICOM32_OPERAND_S1_IMM7_4 :
+      value = fields->f_s1_imm7_4;
+      break;
+    case UBICOM32_OPERAND_S1_IMM8 :
+      value = fields->f_s1_imm8;
+      break;
+    case UBICOM32_OPERAND_S1_R :
+      value = fields->f_s1_r;
+      break;
+    case UBICOM32_OPERAND_S2 :
+      value = fields->f_s2;
+      break;
+    case UBICOM32_OPERAND_SRC3 :
+      value = 0;
+      break;
+    case UBICOM32_OPERAND_X_BIT26 :
+      value = fields->f_bit26;
+      break;
+    case UBICOM32_OPERAND_X_D :
+      value = fields->f_d;
+      break;
+    case UBICOM32_OPERAND_X_DN :
+      value = fields->f_Dn;
+      break;
+    case UBICOM32_OPERAND_X_OP2 :
+      value = fields->f_op2;
+      break;
+    case UBICOM32_OPERAND_X_S1 :
+      value = fields->f_s1;
+      break;
+
+    default :
+      /* xgettext:c-format */
+      fprintf (stderr, _("Unrecognized field %d while getting int operand.\n"),
+		       opindex);
+      abort ();
+  }
+
+  return value;
+}
+
+bfd_vma
+ubicom32_cgen_get_vma_operand (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,
+			     int opindex,
+			     const CGEN_FIELDS * fields)
+{
+  bfd_vma value;
+
+  switch (opindex)
+    {
+    case UBICOM32_OPERAND_AM :
+      value = fields->f_Am;
+      break;
+    case UBICOM32_OPERAND_AN :
+      value = fields->f_An;
+      break;
+    case UBICOM32_OPERAND_C :
+      value = fields->f_C;
+      break;
+    case UBICOM32_OPERAND_DN :
+      value = fields->f_Dn;
+      break;
+    case UBICOM32_OPERAND_P :
+      value = fields->f_P;
+      break;
+    case UBICOM32_OPERAND_ACC1HI :
+      value = 0;
+      break;
+    case UBICOM32_OPERAND_ACC1LO :
+      value = 0;
+      break;
+    case UBICOM32_OPERAND_BIT5 :
+      value = fields->f_bit5;
+      break;
+    case UBICOM32_OPERAND_BIT5_ADDSUB :
+      value = fields->f_bit5;
+      break;
+    case UBICOM32_OPERAND_CC :
+      value = fields->f_cond;
+      break;
+    case UBICOM32_OPERAND_D_AN :
+      value = fields->f_d_An;
+      break;
+    case UBICOM32_OPERAND_D_DIRECT_ADDR :
+      value = fields->f_d_direct;
+      break;
+    case UBICOM32_OPERAND_D_I4_1 :
+      value = fields->f_d_i4_1;
+      break;
+    case UBICOM32_OPERAND_D_I4_2 :
+      value = fields->f_d_i4_2;
+      break;
+    case UBICOM32_OPERAND_D_I4_4 :
+      value = fields->f_d_i4_4;
+      break;
+    case UBICOM32_OPERAND_D_IMM7_1 :
+      value = fields->f_d_imm7_1;
+      break;
+    case UBICOM32_OPERAND_D_IMM7_2 :
+      value = fields->f_d_imm7_2;
+      break;
+    case UBICOM32_OPERAND_D_IMM7_4 :
+      value = fields->f_d_imm7_4;
+      break;
+    case UBICOM32_OPERAND_D_IMM8 :
+      value = fields->f_d_imm8;
+      break;
+    case UBICOM32_OPERAND_D_R :
+      value = fields->f_d_r;
+      break;
+    case UBICOM32_OPERAND_DSP_S2_ACC_REG_ADDSUB :
+      value = fields->f_dsp_S2;
+      break;
+    case UBICOM32_OPERAND_DSP_S2_ACC_REG_MUL :
+      value = fields->f_dsp_S2;
+      break;
+    case UBICOM32_OPERAND_DSP_S2_DATA_REG :
+      value = fields->f_dsp_S2;
+      break;
+    case UBICOM32_OPERAND_DSP_S2_DATA_REG_ADDSUB :
+      value = fields->f_dsp_S2;
+      break;
+    case UBICOM32_OPERAND_DSP_S2_SEL :
+      value = fields->f_dsp_S2_sel;
+      break;
+    case UBICOM32_OPERAND_DSP_C :
+      value = fields->f_dsp_C;
+      break;
+    case UBICOM32_OPERAND_DSP_DESTA :
+      value = fields->f_dsp_destA;
+      break;
+    case UBICOM32_OPERAND_DSP_T :
+      value = fields->f_dsp_T;
+      break;
+    case UBICOM32_OPERAND_DSP_T_ADDSUB :
+      value = fields->f_dsp_T;
+      break;
+    case UBICOM32_OPERAND_IMM16_1 :
+      value = fields->f_imm16_1;
+      break;
+    case UBICOM32_OPERAND_IMM16_2 :
+      value = fields->f_imm16_2;
+      break;
+    case UBICOM32_OPERAND_IMM24 :
+      value = fields->f_imm24;
+      break;
+    case UBICOM32_OPERAND_IMM25 :
+      value = fields->f_imm25;
+      break;
+    case UBICOM32_OPERAND_INTERRUPT :
+      value = fields->f_int;
+      break;
+    case UBICOM32_OPERAND_IREAD :
+      value = 0;
+      break;
+    case UBICOM32_OPERAND_IRQ_0 :
+      value = 0;
+      break;
+    case UBICOM32_OPERAND_IRQ_1 :
+      value = 0;
+      break;
+    case UBICOM32_OPERAND_MACHI :
+      value = 0;
+      break;
+    case UBICOM32_OPERAND_MACLO :
+      value = 0;
+      break;
+    case UBICOM32_OPERAND_OFFSET16 :
+      value = fields->f_o16;
+      break;
+    case UBICOM32_OPERAND_OFFSET21 :
+      value = fields->f_o21;
+      break;
+    case UBICOM32_OPERAND_OFFSET24 :
+      value = fields->f_o24;
+      break;
+    case UBICOM32_OPERAND_OPC1 :
+      value = fields->f_op1;
+      break;
+    case UBICOM32_OPERAND_OPC2 :
+      value = fields->f_op2;
+      break;
+    case UBICOM32_OPERAND_PDEC_S1_IMM7_4 :
+      value = fields->f_s1_imm7_4;
+      break;
+    case UBICOM32_OPERAND_S1_AN :
+      value = fields->f_s1_An;
+      break;
+    case UBICOM32_OPERAND_S1_DIRECT_ADDR :
+      value = fields->f_s1_direct;
+      break;
+    case UBICOM32_OPERAND_S1_I4_1 :
+      value = fields->f_s1_i4_1;
+      break;
+    case UBICOM32_OPERAND_S1_I4_2 :
+      value = fields->f_s1_i4_2;
+      break;
+    case UBICOM32_OPERAND_S1_I4_4 :
+      value = fields->f_s1_i4_4;
+      break;
+    case UBICOM32_OPERAND_S1_IMM7_1 :
+      value = fields->f_s1_imm7_1;
+      break;
+    case UBICOM32_OPERAND_S1_IMM7_2 :
+      value = fields->f_s1_imm7_2;
+      break;
+    case UBICOM32_OPERAND_S1_IMM7_4 :
+      value = fields->f_s1_imm7_4;
+      break;
+    case UBICOM32_OPERAND_S1_IMM8 :
+      value = fields->f_s1_imm8;
+      break;
+    case UBICOM32_OPERAND_S1_R :
+      value = fields->f_s1_r;
+      break;
+    case UBICOM32_OPERAND_S2 :
+      value = fields->f_s2;
+      break;
+    case UBICOM32_OPERAND_SRC3 :
+      value = 0;
+      break;
+    case UBICOM32_OPERAND_X_BIT26 :
+      value = fields->f_bit26;
+      break;
+    case UBICOM32_OPERAND_X_D :
+      value = fields->f_d;
+      break;
+    case UBICOM32_OPERAND_X_DN :
+      value = fields->f_Dn;
+      break;
+    case UBICOM32_OPERAND_X_OP2 :
+      value = fields->f_op2;
+      break;
+    case UBICOM32_OPERAND_X_S1 :
+      value = fields->f_s1;
+      break;
+
+    default :
+      /* xgettext:c-format */
+      fprintf (stderr, _("Unrecognized field %d while getting vma operand.\n"),
+		       opindex);
+      abort ();
+  }
+
+  return value;
+}
+
+void ubicom32_cgen_set_int_operand  (CGEN_CPU_DESC, int, CGEN_FIELDS *, int);
+void ubicom32_cgen_set_vma_operand  (CGEN_CPU_DESC, int, CGEN_FIELDS *, bfd_vma);
+
+/* Stuffing values in cgen_fields is handled by a collection of functions.
+   They are distinguished by the type of the VALUE argument they accept.
+   TODO: floating point, inlining support, remove cases where argument type
+   not appropriate.  */
+
+void
+ubicom32_cgen_set_int_operand (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,
+			     int opindex,
+			     CGEN_FIELDS * fields,
+			     int value)
+{
+  switch (opindex)
+    {
+    case UBICOM32_OPERAND_AM :
+      fields->f_Am = value;
+      break;
+    case UBICOM32_OPERAND_AN :
+      fields->f_An = value;
+      break;
+    case UBICOM32_OPERAND_C :
+      fields->f_C = value;
+      break;
+    case UBICOM32_OPERAND_DN :
+      fields->f_Dn = value;
+      break;
+    case UBICOM32_OPERAND_P :
+      fields->f_P = value;
+      break;
+    case UBICOM32_OPERAND_ACC1HI :
+      break;
+    case UBICOM32_OPERAND_ACC1LO :
+      break;
+    case UBICOM32_OPERAND_BIT5 :
+      fields->f_bit5 = value;
+      break;
+    case UBICOM32_OPERAND_BIT5_ADDSUB :
+      fields->f_bit5 = value;
+      break;
+    case UBICOM32_OPERAND_CC :
+      fields->f_cond = value;
+      break;
+    case UBICOM32_OPERAND_D_AN :
+      fields->f_d_An = value;
+      break;
+    case UBICOM32_OPERAND_D_DIRECT_ADDR :
+      fields->f_d_direct = value;
+      break;
+    case UBICOM32_OPERAND_D_I4_1 :
+      fields->f_d_i4_1 = value;
+      break;
+    case UBICOM32_OPERAND_D_I4_2 :
+      fields->f_d_i4_2 = value;
+      break;
+    case UBICOM32_OPERAND_D_I4_4 :
+      fields->f_d_i4_4 = value;
+      break;
+    case UBICOM32_OPERAND_D_IMM7_1 :
+      fields->f_d_imm7_1 = value;
+      break;
+    case UBICOM32_OPERAND_D_IMM7_2 :
+      fields->f_d_imm7_2 = value;
+      break;
+    case UBICOM32_OPERAND_D_IMM7_4 :
+      fields->f_d_imm7_4 = value;
+      break;
+    case UBICOM32_OPERAND_D_IMM8 :
+      fields->f_d_imm8 = value;
+      break;
+    case UBICOM32_OPERAND_D_R :
+      fields->f_d_r = value;
+      break;
+    case UBICOM32_OPERAND_DSP_S2_ACC_REG_ADDSUB :
+      fields->f_dsp_S2 = value;
+      break;
+    case UBICOM32_OPERAND_DSP_S2_ACC_REG_MUL :
+      fields->f_dsp_S2 = value;
+      break;
+    case UBICOM32_OPERAND_DSP_S2_DATA_REG :
+      fields->f_dsp_S2 = value;
+      break;
+    case UBICOM32_OPERAND_DSP_S2_DATA_REG_ADDSUB :
+      fields->f_dsp_S2 = value;
+      break;
+    case UBICOM32_OPERAND_DSP_S2_SEL :
+      fields->f_dsp_S2_sel = value;
+      break;
+    case UBICOM32_OPERAND_DSP_C :
+      fields->f_dsp_C = value;
+      break;
+    case UBICOM32_OPERAND_DSP_DESTA :
+      fields->f_dsp_destA = value;
+      break;
+    case UBICOM32_OPERAND_DSP_T :
+      fields->f_dsp_T = value;
+      break;
+    case UBICOM32_OPERAND_DSP_T_ADDSUB :
+      fields->f_dsp_T = value;
+      break;
+    case UBICOM32_OPERAND_IMM16_1 :
+      fields->f_imm16_1 = value;
+      break;
+    case UBICOM32_OPERAND_IMM16_2 :
+      fields->f_imm16_2 = value;
+      break;
+    case UBICOM32_OPERAND_IMM24 :
+      fields->f_imm24 = value;
+      break;
+    case UBICOM32_OPERAND_IMM25 :
+      fields->f_imm25 = value;
+      break;
+    case UBICOM32_OPERAND_INTERRUPT :
+      fields->f_int = value;
+      break;
+    case UBICOM32_OPERAND_IREAD :
+      break;
+    case UBICOM32_OPERAND_IRQ_0 :
+      break;
+    case UBICOM32_OPERAND_IRQ_1 :
+      break;
+    case UBICOM32_OPERAND_MACHI :
+      break;
+    case UBICOM32_OPERAND_MACLO :
+      break;
+    case UBICOM32_OPERAND_OFFSET16 :
+      fields->f_o16 = value;
+      break;
+    case UBICOM32_OPERAND_OFFSET21 :
+      fields->f_o21 = value;
+      break;
+    case UBICOM32_OPERAND_OFFSET24 :
+      fields->f_o24 = value;
+      break;
+    case UBICOM32_OPERAND_OPC1 :
+      fields->f_op1 = value;
+      break;
+    case UBICOM32_OPERAND_OPC2 :
+      fields->f_op2 = value;
+      break;
+    case UBICOM32_OPERAND_PDEC_S1_IMM7_4 :
+      fields->f_s1_imm7_4 = value;
+      break;
+    case UBICOM32_OPERAND_S1_AN :
+      fields->f_s1_An = value;
+      break;
+    case UBICOM32_OPERAND_S1_DIRECT_ADDR :
+      fields->f_s1_direct = value;
+      break;
+    case UBICOM32_OPERAND_S1_I4_1 :
+      fields->f_s1_i4_1 = value;
+      break;
+    case UBICOM32_OPERAND_S1_I4_2 :
+      fields->f_s1_i4_2 = value;
+      break;
+    case UBICOM32_OPERAND_S1_I4_4 :
+      fields->f_s1_i4_4 = value;
+      break;
+    case UBICOM32_OPERAND_S1_IMM7_1 :
+      fields->f_s1_imm7_1 = value;
+      break;
+    case UBICOM32_OPERAND_S1_IMM7_2 :
+      fields->f_s1_imm7_2 = value;
+      break;
+    case UBICOM32_OPERAND_S1_IMM7_4 :
+      fields->f_s1_imm7_4 = value;
+      break;
+    case UBICOM32_OPERAND_S1_IMM8 :
+      fields->f_s1_imm8 = value;
+      break;
+    case UBICOM32_OPERAND_S1_R :
+      fields->f_s1_r = value;
+      break;
+    case UBICOM32_OPERAND_S2 :
+      fields->f_s2 = value;
+      break;
+    case UBICOM32_OPERAND_SRC3 :
+      break;
+    case UBICOM32_OPERAND_X_BIT26 :
+      fields->f_bit26 = value;
+      break;
+    case UBICOM32_OPERAND_X_D :
+      fields->f_d = value;
+      break;
+    case UBICOM32_OPERAND_X_DN :
+      fields->f_Dn = value;
+      break;
+    case UBICOM32_OPERAND_X_OP2 :
+      fields->f_op2 = value;
+      break;
+    case UBICOM32_OPERAND_X_S1 :
+      fields->f_s1 = value;
+      break;
+
+    default :
+      /* xgettext:c-format */
+      fprintf (stderr, _("Unrecognized field %d while setting int operand.\n"),
+		       opindex);
+      abort ();
+  }
+}
+
+void
+ubicom32_cgen_set_vma_operand (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,
+			     int opindex,
+			     CGEN_FIELDS * fields,
+			     bfd_vma value)
+{
+  switch (opindex)
+    {
+    case UBICOM32_OPERAND_AM :
+      fields->f_Am = value;
+      break;
+    case UBICOM32_OPERAND_AN :
+      fields->f_An = value;
+      break;
+    case UBICOM32_OPERAND_C :
+      fields->f_C = value;
+      break;
+    case UBICOM32_OPERAND_DN :
+      fields->f_Dn = value;
+      break;
+    case UBICOM32_OPERAND_P :
+      fields->f_P = value;
+      break;
+    case UBICOM32_OPERAND_ACC1HI :
+      break;
+    case UBICOM32_OPERAND_ACC1LO :
+      break;
+    case UBICOM32_OPERAND_BIT5 :
+      fields->f_bit5 = value;
+      break;
+    case UBICOM32_OPERAND_BIT5_ADDSUB :
+      fields->f_bit5 = value;
+      break;
+    case UBICOM32_OPERAND_CC :
+      fields->f_cond = value;
+      break;
+    case UBICOM32_OPERAND_D_AN :
+      fields->f_d_An = value;
+      break;
+    case UBICOM32_OPERAND_D_DIRECT_ADDR :
+      fields->f_d_direct = value;
+      break;
+    case UBICOM32_OPERAND_D_I4_1 :
+      fields->f_d_i4_1 = value;
+      break;
+    case UBICOM32_OPERAND_D_I4_2 :
+      fields->f_d_i4_2 = value;
+      break;
+    case UBICOM32_OPERAND_D_I4_4 :
+      fields->f_d_i4_4 = value;
+      break;
+    case UBICOM32_OPERAND_D_IMM7_1 :
+      fields->f_d_imm7_1 = value;
+      break;
+    case UBICOM32_OPERAND_D_IMM7_2 :
+      fields->f_d_imm7_2 = value;
+      break;
+    case UBICOM32_OPERAND_D_IMM7_4 :
+      fields->f_d_imm7_4 = value;
+      break;
+    case UBICOM32_OPERAND_D_IMM8 :
+      fields->f_d_imm8 = value;
+      break;
+    case UBICOM32_OPERAND_D_R :
+      fields->f_d_r = value;
+      break;
+    case UBICOM32_OPERAND_DSP_S2_ACC_REG_ADDSUB :
+      fields->f_dsp_S2 = value;
+      break;
+    case UBICOM32_OPERAND_DSP_S2_ACC_REG_MUL :
+      fields->f_dsp_S2 = value;
+      break;
+    case UBICOM32_OPERAND_DSP_S2_DATA_REG :
+      fields->f_dsp_S2 = value;
+      break;
+    case UBICOM32_OPERAND_DSP_S2_DATA_REG_ADDSUB :
+      fields->f_dsp_S2 = value;
+      break;
+    case UBICOM32_OPERAND_DSP_S2_SEL :
+      fields->f_dsp_S2_sel = value;
+      break;
+    case UBICOM32_OPERAND_DSP_C :
+      fields->f_dsp_C = value;
+      break;
+    case UBICOM32_OPERAND_DSP_DESTA :
+      fields->f_dsp_destA = value;
+      break;
+    case UBICOM32_OPERAND_DSP_T :
+      fields->f_dsp_T = value;
+      break;
+    case UBICOM32_OPERAND_DSP_T_ADDSUB :
+      fields->f_dsp_T = value;
+      break;
+    case UBICOM32_OPERAND_IMM16_1 :
+      fields->f_imm16_1 = value;
+      break;
+    case UBICOM32_OPERAND_IMM16_2 :
+      fields->f_imm16_2 = value;
+      break;
+    case UBICOM32_OPERAND_IMM24 :
+      fields->f_imm24 = value;
+      break;
+    case UBICOM32_OPERAND_IMM25 :
+      fields->f_imm25 = value;
+      break;
+    case UBICOM32_OPERAND_INTERRUPT :
+      fields->f_int = value;
+      break;
+    case UBICOM32_OPERAND_IREAD :
+      break;
+    case UBICOM32_OPERAND_IRQ_0 :
+      break;
+    case UBICOM32_OPERAND_IRQ_1 :
+      break;
+    case UBICOM32_OPERAND_MACHI :
+      break;
+    case UBICOM32_OPERAND_MACLO :
+      break;
+    case UBICOM32_OPERAND_OFFSET16 :
+      fields->f_o16 = value;
+      break;
+    case UBICOM32_OPERAND_OFFSET21 :
+      fields->f_o21 = value;
+      break;
+    case UBICOM32_OPERAND_OFFSET24 :
+      fields->f_o24 = value;
+      break;
+    case UBICOM32_OPERAND_OPC1 :
+      fields->f_op1 = value;
+      break;
+    case UBICOM32_OPERAND_OPC2 :
+      fields->f_op2 = value;
+      break;
+    case UBICOM32_OPERAND_PDEC_S1_IMM7_4 :
+      fields->f_s1_imm7_4 = value;
+      break;
+    case UBICOM32_OPERAND_S1_AN :
+      fields->f_s1_An = value;
+      break;
+    case UBICOM32_OPERAND_S1_DIRECT_ADDR :
+      fields->f_s1_direct = value;
+      break;
+    case UBICOM32_OPERAND_S1_I4_1 :
+      fields->f_s1_i4_1 = value;
+      break;
+    case UBICOM32_OPERAND_S1_I4_2 :
+      fields->f_s1_i4_2 = value;
+      break;
+    case UBICOM32_OPERAND_S1_I4_4 :
+      fields->f_s1_i4_4 = value;
+      break;
+    case UBICOM32_OPERAND_S1_IMM7_1 :
+      fields->f_s1_imm7_1 = value;
+      break;
+    case UBICOM32_OPERAND_S1_IMM7_2 :
+      fields->f_s1_imm7_2 = value;
+      break;
+    case UBICOM32_OPERAND_S1_IMM7_4 :
+      fields->f_s1_imm7_4 = value;
+      break;
+    case UBICOM32_OPERAND_S1_IMM8 :
+      fields->f_s1_imm8 = value;
+      break;
+    case UBICOM32_OPERAND_S1_R :
+      fields->f_s1_r = value;
+      break;
+    case UBICOM32_OPERAND_S2 :
+      fields->f_s2 = value;
+      break;
+    case UBICOM32_OPERAND_SRC3 :
+      break;
+    case UBICOM32_OPERAND_X_BIT26 :
+      fields->f_bit26 = value;
+      break;
+    case UBICOM32_OPERAND_X_D :
+      fields->f_d = value;
+      break;
+    case UBICOM32_OPERAND_X_DN :
+      fields->f_Dn = value;
+      break;
+    case UBICOM32_OPERAND_X_OP2 :
+      fields->f_op2 = value;
+      break;
+    case UBICOM32_OPERAND_X_S1 :
+      fields->f_s1 = value;
+      break;
+
+    default :
+      /* xgettext:c-format */
+      fprintf (stderr, _("Unrecognized field %d while setting vma operand.\n"),
+		       opindex);
+      abort ();
+  }
+}
+
+/* Function to call before using the instruction builder tables.  */
+
+void
+ubicom32_cgen_init_ibld_table (CGEN_CPU_DESC cd)
+{
+  cd->insert_handlers = & ubicom32_cgen_insert_handlers[0];
+  cd->extract_handlers = & ubicom32_cgen_extract_handlers[0];
+
+  cd->insert_operand = ubicom32_cgen_insert_operand;
+  cd->extract_operand = ubicom32_cgen_extract_operand;
+
+  cd->get_int_operand = ubicom32_cgen_get_int_operand;
+  cd->set_int_operand = ubicom32_cgen_set_int_operand;
+  cd->get_vma_operand = ubicom32_cgen_get_vma_operand;
+  cd->set_vma_operand = ubicom32_cgen_set_vma_operand;
+}
--- /dev/null
+++ b/opcodes/ubicom32-opc.c
@@ -0,0 +1,21343 @@
+/* Instruction opcode table for ubicom32.
+
+THIS FILE IS MACHINE GENERATED WITH CGEN.
+
+Copyright 1996-2007 Free Software Foundation, Inc.
+
+This file is part of the GNU Binutils and/or GDB, the GNU debugger.
+
+   This file is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 3, or (at your option)
+   any later version.
+
+   It is distributed in the hope that it will be useful, but WITHOUT
+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
+   License for more details.
+
+   You should have received a copy of the GNU General Public License along
+   with this program; if not, write to the Free Software Foundation, Inc.,
+   51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.
+
+*/
+
+#include "sysdep.h"
+#include "ansidecl.h"
+#include "bfd.h"
+#include "symcat.h"
+#include "ubicom32-desc.h"
+#include "ubicom32-opc.h"
+#include "libiberty.h"
+
+/* -- opc.c */
+#include "safe-ctype.h"
+
+unsigned int
+ubicom32_dis_hash (const char *buf, CGEN_INSN_INT value ATTRIBUTE_UNUSED)
+{
+  unsigned int hash = (*buf >> 3);
+  hash &= 0x1f;
+  hash = (hash == 0x1d) ? 0x1c : hash;
+  return hash % CGEN_DIS_HASH_SIZE;
+}
+
+
+/* A better hash function for instruction mnemonics. */
+unsigned int
+ubicom32_asm_hash (const char* insn)
+{
+  unsigned int hash;
+  const char* m = insn;
+
+  /* for certain instructions, the variations are coded as operands
+     and so only the mnemonic will have been used to seed the hash table.
+     Examples of this are the jmp family and the int instruction.
+     If we suspect we may have these instructions, just use the first 3 chars.
+   */
+  if (*m == 'j' || *m == 'i' || *m=='m')
+    {
+      int i = 0;
+      for (hash = 0; *m && !ISSPACE(*m) && i < 3; m++, ++i)
+        hash = (hash * 23) ^ (0x1F & TOLOWER(*m));
+    }
+  else
+    {
+      for (hash = 0; *m && !ISSPACE(*m); m++)
+        hash = (hash * 23) ^ (0x1F & TOLOWER(*m));
+    }
+
+  /* printf ("%s %d\n", insn, (hash % CGEN_ASM_HASH_SIZE)); */
+
+  return hash % CGEN_ASM_HASH_SIZE;
+}
+
+/* Special check to ensure that instruction exists for given machine. */
+int
+ubicom32_cgen_insn_supported (CGEN_CPU_DESC cd,
+			  const CGEN_INSN *insn)
+{
+  int machs = CGEN_INSN_ATTR_VALUE (insn, CGEN_INSN_MACH);
+
+  /* No mach attribute?  Assume it's supported for all machs.  */
+  if (machs == 0)
+    return 1;
+  
+  return ((machs & cd->machs) != 0);
+}
+
+/* -- asm.c */
+/* The hash functions are recorded here to help keep assembler code out of
+   the disassembler and vice versa.  */
+
+static int asm_hash_insn_p        (const CGEN_INSN *);
+static unsigned int asm_hash_insn (const char *);
+static int dis_hash_insn_p        (const CGEN_INSN *);
+static unsigned int dis_hash_insn (const char *, CGEN_INSN_INT);
+
+/* Instruction formats.  */
+
+#if defined (__STDC__) || defined (ALMOST_STDC) || defined (HAVE_STRINGIZE)
+#define F(f) & ubicom32_cgen_ifld_table[UBICOM32_##f]
+#else
+#define F(f) & ubicom32_cgen_ifld_table[UBICOM32_/**/f]
+#endif
+static const CGEN_IFMT ifmt_empty ATTRIBUTE_UNUSED = {
+  0, 0, 0x0, { { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msub_2_s1_direct_dsp_src2_data_reg_addsub2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe68700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msub_2_s1_immediate_dsp_src2_data_reg_addsub2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe68700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msub_2_s1_indirect_with_index_2_dsp_src2_data_reg_addsub2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe68700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msub_2_s1_indirect_with_offset_2_dsp_src2_data_reg_addsub2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe68400, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msub_2_s1_indirect_2_dsp_src2_data_reg_addsub2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe6871f, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msub_2_s1_indirect_with_post_increment_2_dsp_src2_data_reg_addsub2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe68710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msub_2_s1_indirect_with_pre_increment_2_dsp_src2_data_reg_addsub2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe68710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msub_2_s1_direct_dsp_src2_reg_acc_reg_addsub ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe68700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msub_2_s1_immediate_dsp_src2_reg_acc_reg_addsub ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe68700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msub_2_s1_indirect_with_index_2_dsp_src2_reg_acc_reg_addsub ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe68700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msub_2_s1_indirect_with_offset_2_dsp_src2_reg_acc_reg_addsub ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe68400, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msub_2_s1_indirect_2_dsp_src2_reg_acc_reg_addsub ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe6871f, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msub_2_s1_indirect_with_post_increment_2_dsp_src2_reg_acc_reg_addsub ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe68710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msub_2_s1_indirect_with_pre_increment_2_dsp_src2_reg_acc_reg_addsub ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe68710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msub_2_s1_direct_dsp_imm_bit5_addsub2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe60700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { F (F_BIT26) }, { F (F_DSP_S2_SEL) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msub_2_s1_immediate_dsp_imm_bit5_addsub2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe60700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { F (F_BIT26) }, { F (F_DSP_S2_SEL) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msub_2_s1_indirect_with_index_2_dsp_imm_bit5_addsub2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe60700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_DSP_S2_SEL) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msub_2_s1_indirect_with_offset_2_dsp_imm_bit5_addsub2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe60400, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_DSP_S2_SEL) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msub_2_s1_indirect_2_dsp_imm_bit5_addsub2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe6071f, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_DSP_S2_SEL) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msub_2_s1_indirect_with_post_increment_2_dsp_imm_bit5_addsub2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe60710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_DSP_S2_SEL) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msub_2_s1_indirect_with_pre_increment_2_dsp_imm_bit5_addsub2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe60710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_DSP_S2_SEL) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msub_4_s1_direct_dsp_src2_data_reg_addsub ATTRIBUTE_UNUSED = {
+  32, 32, 0xffee8700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msub_4_s1_immediate_dsp_src2_data_reg_addsub ATTRIBUTE_UNUSED = {
+  32, 32, 0xffee8700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msub_4_s1_indirect_with_index_4_dsp_src2_data_reg_addsub ATTRIBUTE_UNUSED = {
+  32, 32, 0xffee8700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msub_4_s1_indirect_with_offset_4_dsp_src2_data_reg_addsub ATTRIBUTE_UNUSED = {
+  32, 32, 0xffee8400, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msub_4_s1_indirect_4_dsp_src2_data_reg_addsub ATTRIBUTE_UNUSED = {
+  32, 32, 0xffee871f, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msub_4_s1_indirect_with_post_increment_4_dsp_src2_data_reg_addsub ATTRIBUTE_UNUSED = {
+  32, 32, 0xffee8710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msub_4_s1_indirect_with_pre_increment_4_dsp_src2_data_reg_addsub ATTRIBUTE_UNUSED = {
+  32, 32, 0xffee8710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msub_4_s1_direct_dsp_src2_reg_acc_reg_addsub ATTRIBUTE_UNUSED = {
+  32, 32, 0xffee8700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msub_4_s1_immediate_dsp_src2_reg_acc_reg_addsub ATTRIBUTE_UNUSED = {
+  32, 32, 0xffee8700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msub_4_s1_indirect_with_index_4_dsp_src2_reg_acc_reg_addsub ATTRIBUTE_UNUSED = {
+  32, 32, 0xffee8700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msub_4_s1_indirect_with_offset_4_dsp_src2_reg_acc_reg_addsub ATTRIBUTE_UNUSED = {
+  32, 32, 0xffee8400, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msub_4_s1_indirect_4_dsp_src2_reg_acc_reg_addsub ATTRIBUTE_UNUSED = {
+  32, 32, 0xffee871f, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msub_4_s1_indirect_with_post_increment_4_dsp_src2_reg_acc_reg_addsub ATTRIBUTE_UNUSED = {
+  32, 32, 0xffee8710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msub_4_s1_indirect_with_pre_increment_4_dsp_src2_reg_acc_reg_addsub ATTRIBUTE_UNUSED = {
+  32, 32, 0xffee8710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msub_4_s1_direct_dsp_imm_bit5_addsub ATTRIBUTE_UNUSED = {
+  32, 32, 0xffee0700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { F (F_BIT26) }, { F (F_DSP_S2_SEL) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msub_4_s1_immediate_dsp_imm_bit5_addsub ATTRIBUTE_UNUSED = {
+  32, 32, 0xffee0700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { F (F_BIT26) }, { F (F_DSP_S2_SEL) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msub_4_s1_indirect_with_index_4_dsp_imm_bit5_addsub ATTRIBUTE_UNUSED = {
+  32, 32, 0xffee0700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_DSP_S2_SEL) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msub_4_s1_indirect_with_offset_4_dsp_imm_bit5_addsub ATTRIBUTE_UNUSED = {
+  32, 32, 0xffee0400, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_DSP_S2_SEL) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msub_4_s1_indirect_4_dsp_imm_bit5_addsub ATTRIBUTE_UNUSED = {
+  32, 32, 0xffee071f, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_DSP_S2_SEL) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msub_4_s1_indirect_with_post_increment_4_dsp_imm_bit5_addsub ATTRIBUTE_UNUSED = {
+  32, 32, 0xffee0710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_DSP_S2_SEL) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msub_4_s1_indirect_with_pre_increment_4_dsp_imm_bit5_addsub ATTRIBUTE_UNUSED = {
+  32, 32, 0xffee0710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_DSP_S2_SEL) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msuf_s1_direct_dsp_src2_data_reg ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe68700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msuf_s1_immediate_dsp_src2_data_reg ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe68700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msuf_s1_indirect_with_index_2_dsp_src2_data_reg ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe68700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msuf_s1_indirect_with_offset_2_dsp_src2_data_reg ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe68400, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msuf_s1_indirect_2_dsp_src2_data_reg ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe6871f, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msuf_s1_indirect_with_post_increment_2_dsp_src2_data_reg ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe68710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msuf_s1_indirect_with_pre_increment_2_dsp_src2_data_reg ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe68710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msuf_s1_direct_dsp_src2_reg_acc_reg_mul ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe68700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msuf_s1_immediate_dsp_src2_reg_acc_reg_mul ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe68700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msuf_s1_indirect_with_index_2_dsp_src2_reg_acc_reg_mul ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe68700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msuf_s1_indirect_with_offset_2_dsp_src2_reg_acc_reg_mul ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe68400, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msuf_s1_indirect_2_dsp_src2_reg_acc_reg_mul ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe6871f, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msuf_s1_indirect_with_post_increment_2_dsp_src2_reg_acc_reg_mul ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe68710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msuf_s1_indirect_with_pre_increment_2_dsp_src2_reg_acc_reg_mul ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe68710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msuf_s1_direct_dsp_imm_bit5 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe60700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { F (F_BIT26) }, { F (F_DSP_S2_SEL) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msuf_s1_immediate_dsp_imm_bit5 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe60700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { F (F_BIT26) }, { F (F_DSP_S2_SEL) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msuf_s1_indirect_with_index_2_dsp_imm_bit5 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe60700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_DSP_S2_SEL) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msuf_s1_indirect_with_offset_2_dsp_imm_bit5 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe60400, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_DSP_S2_SEL) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msuf_s1_indirect_2_dsp_imm_bit5 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe6071f, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_DSP_S2_SEL) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msuf_s1_indirect_with_post_increment_2_dsp_imm_bit5 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe60710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_DSP_S2_SEL) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_msuf_s1_indirect_with_pre_increment_2_dsp_imm_bit5 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe60710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_DSP_S2_SEL) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_macu_4_s1_direct_dsp_src2_data_reg ATTRIBUTE_UNUSED = {
+  32, 32, 0xfffe8700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_macu_4_s1_immediate_dsp_src2_data_reg ATTRIBUTE_UNUSED = {
+  32, 32, 0xfffe8700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_macu_4_s1_indirect_with_index_4_dsp_src2_data_reg ATTRIBUTE_UNUSED = {
+  32, 32, 0xfffe8700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_macu_4_s1_indirect_with_offset_4_dsp_src2_data_reg ATTRIBUTE_UNUSED = {
+  32, 32, 0xfffe8400, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_macu_4_s1_indirect_4_dsp_src2_data_reg ATTRIBUTE_UNUSED = {
+  32, 32, 0xfffe871f, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_macu_4_s1_indirect_with_post_increment_4_dsp_src2_data_reg ATTRIBUTE_UNUSED = {
+  32, 32, 0xfffe8710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_macu_4_s1_indirect_with_pre_increment_4_dsp_src2_data_reg ATTRIBUTE_UNUSED = {
+  32, 32, 0xfffe8710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_macu_4_s1_direct_dsp_src2_reg_acc_reg_mul ATTRIBUTE_UNUSED = {
+  32, 32, 0xfffe8700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_macu_4_s1_immediate_dsp_src2_reg_acc_reg_mul ATTRIBUTE_UNUSED = {
+  32, 32, 0xfffe8700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_macu_4_s1_indirect_with_index_4_dsp_src2_reg_acc_reg_mul ATTRIBUTE_UNUSED = {
+  32, 32, 0xfffe8700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_macu_4_s1_indirect_with_offset_4_dsp_src2_reg_acc_reg_mul ATTRIBUTE_UNUSED = {
+  32, 32, 0xfffe8400, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_macu_4_s1_indirect_4_dsp_src2_reg_acc_reg_mul ATTRIBUTE_UNUSED = {
+  32, 32, 0xfffe871f, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_macu_4_s1_indirect_with_post_increment_4_dsp_src2_reg_acc_reg_mul ATTRIBUTE_UNUSED = {
+  32, 32, 0xfffe8710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_macu_4_s1_indirect_with_pre_increment_4_dsp_src2_reg_acc_reg_mul ATTRIBUTE_UNUSED = {
+  32, 32, 0xfffe8710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_macu_4_s1_direct_dsp_imm_bit5 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfffe0700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { F (F_BIT26) }, { F (F_DSP_S2_SEL) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_macu_4_s1_immediate_dsp_imm_bit5 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfffe0700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { F (F_BIT26) }, { F (F_DSP_S2_SEL) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_macu_4_s1_indirect_with_index_4_dsp_imm_bit5 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfffe0700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_DSP_S2_SEL) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_macu_4_s1_indirect_with_offset_4_dsp_imm_bit5 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfffe0400, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_DSP_S2_SEL) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_macu_4_s1_indirect_4_dsp_imm_bit5 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfffe071f, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_DSP_S2_SEL) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_macu_4_s1_indirect_with_post_increment_4_dsp_imm_bit5 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfffe0710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_DSP_S2_SEL) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_macu_4_s1_indirect_with_pre_increment_4_dsp_imm_bit5 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfffe0710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_DSP_S2_SEL) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_mulu_s1_direct_dsp_src2_data_reg ATTRIBUTE_UNUSED = {
+  32, 32, 0xfff68700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_mulu_s1_immediate_dsp_src2_data_reg ATTRIBUTE_UNUSED = {
+  32, 32, 0xfff68700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_mulu_s1_indirect_with_index_2_dsp_src2_data_reg ATTRIBUTE_UNUSED = {
+  32, 32, 0xfff68700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_mulu_s1_indirect_with_offset_2_dsp_src2_data_reg ATTRIBUTE_UNUSED = {
+  32, 32, 0xfff68400, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_mulu_s1_indirect_2_dsp_src2_data_reg ATTRIBUTE_UNUSED = {
+  32, 32, 0xfff6871f, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_mulu_s1_indirect_with_post_increment_2_dsp_src2_data_reg ATTRIBUTE_UNUSED = {
+  32, 32, 0xfff68710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_mulu_s1_indirect_with_pre_increment_2_dsp_src2_data_reg ATTRIBUTE_UNUSED = {
+  32, 32, 0xfff68710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_mulu_s1_direct_dsp_src2_reg_acc_reg_mul ATTRIBUTE_UNUSED = {
+  32, 32, 0xfff68700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_mulu_s1_immediate_dsp_src2_reg_acc_reg_mul ATTRIBUTE_UNUSED = {
+  32, 32, 0xfff68700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_mulu_s1_indirect_with_index_2_dsp_src2_reg_acc_reg_mul ATTRIBUTE_UNUSED = {
+  32, 32, 0xfff68700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_mulu_s1_indirect_with_offset_2_dsp_src2_reg_acc_reg_mul ATTRIBUTE_UNUSED = {
+  32, 32, 0xfff68400, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_mulu_s1_indirect_2_dsp_src2_reg_acc_reg_mul ATTRIBUTE_UNUSED = {
+  32, 32, 0xfff6871f, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_mulu_s1_indirect_with_post_increment_2_dsp_src2_reg_acc_reg_mul ATTRIBUTE_UNUSED = {
+  32, 32, 0xfff68710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_mulu_s1_indirect_with_pre_increment_2_dsp_src2_reg_acc_reg_mul ATTRIBUTE_UNUSED = {
+  32, 32, 0xfff68710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_mulu_s1_direct_dsp_imm_bit5 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfff60700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { F (F_BIT26) }, { F (F_DSP_S2_SEL) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_mulu_s1_immediate_dsp_imm_bit5 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfff60700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { F (F_BIT26) }, { F (F_DSP_S2_SEL) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_mulu_s1_indirect_with_index_2_dsp_imm_bit5 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfff60700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_DSP_S2_SEL) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_mulu_s1_indirect_with_offset_2_dsp_imm_bit5 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfff60400, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_DSP_S2_SEL) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_mulu_s1_indirect_2_dsp_imm_bit5 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfff6071f, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_DSP_S2_SEL) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_mulu_s1_indirect_with_post_increment_2_dsp_imm_bit5 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfff60710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_DSP_S2_SEL) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_mulu_s1_indirect_with_pre_increment_2_dsp_imm_bit5 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfff60710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_DSP_S2_SEL) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sysret_d_direct_s1_direct ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_DIRECT) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sysret_d_immediate_4_s1_direct ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sysret_d_indirect_with_index_4_s1_direct ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sysret_d_indirect_with_offset_4_s1_direct ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc00ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sysret_d_indirect_4_s1_direct ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1fff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sysret_d_indirect_with_post_increment_4_s1_direct ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sysret_d_indirect_with_pre_increment_4_s1_direct ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sysret_d_direct_s1_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_DIRECT) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sysret_d_immediate_4_s1_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sysret_d_indirect_with_index_4_s1_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sysret_d_indirect_with_offset_4_s1_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc00ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sysret_d_indirect_4_s1_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1fff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sysret_d_indirect_with_post_increment_4_s1_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sysret_d_indirect_with_pre_increment_4_s1_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sysret_d_direct_s1_indirect_with_index_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_DIRECT) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sysret_d_immediate_4_s1_indirect_with_index_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sysret_d_indirect_with_index_4_s1_indirect_with_index_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sysret_d_indirect_with_offset_4_s1_indirect_with_index_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc00ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sysret_d_indirect_4_s1_indirect_with_index_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1fff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sysret_d_indirect_with_post_increment_4_s1_indirect_with_index_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sysret_d_indirect_with_pre_increment_4_s1_indirect_with_index_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sysret_d_direct_s1_indirect_with_offset_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00fc00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_DIRECT) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sysret_d_immediate_4_s1_indirect_with_offset_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00fc00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sysret_d_indirect_with_index_4_s1_indirect_with_offset_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00fc00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sysret_d_indirect_with_offset_4_s1_indirect_with_offset_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc00fc00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sysret_d_indirect_4_s1_indirect_with_offset_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1ffc00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sysret_d_indirect_with_post_increment_4_s1_indirect_with_offset_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10fc00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sysret_d_indirect_with_pre_increment_4_s1_indirect_with_offset_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10fc00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sysret_d_direct_s1_indirect_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff1f, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_DIRECT) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sysret_d_immediate_4_s1_indirect_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff1f, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sysret_d_indirect_with_index_4_s1_indirect_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff1f, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sysret_d_indirect_with_offset_4_s1_indirect_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc00ff1f, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sysret_d_indirect_4_s1_indirect_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1fff1f, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sysret_d_indirect_with_post_increment_4_s1_indirect_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff1f, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sysret_d_indirect_with_pre_increment_4_s1_indirect_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff1f, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sysret_d_direct_s1_indirect_with_post_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_DIRECT) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sysret_d_immediate_4_s1_indirect_with_post_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sysret_d_indirect_with_index_4_s1_indirect_with_post_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sysret_d_indirect_with_offset_4_s1_indirect_with_post_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc00ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sysret_d_indirect_4_s1_indirect_with_post_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1fff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sysret_d_indirect_with_post_increment_4_s1_indirect_with_post_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sysret_d_indirect_with_pre_increment_4_s1_indirect_with_post_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sysret_d_direct_s1_indirect_with_pre_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_DIRECT) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sysret_d_immediate_4_s1_indirect_with_pre_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sysret_d_indirect_with_index_4_s1_indirect_with_pre_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sysret_d_indirect_with_offset_4_s1_indirect_with_pre_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc00ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sysret_d_indirect_4_s1_indirect_with_pre_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1fff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sysret_d_indirect_with_post_increment_4_s1_indirect_with_pre_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sysret_d_indirect_with_pre_increment_4_s1_indirect_with_pre_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_syscall_d_direct ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ffff, { { F (F_OP1) }, { F (F_OP2) }, { F (F_S1) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_DIRECT) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_syscall_d_immediate_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ffff, { { F (F_OP1) }, { F (F_OP2) }, { F (F_S1) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_syscall_d_indirect_with_index_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ffff, { { F (F_OP1) }, { F (F_OP2) }, { F (F_S1) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_syscall_d_indirect_with_offset_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc00ffff, { { F (F_OP1) }, { F (F_OP2) }, { F (F_S1) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_syscall_d_indirect_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1fffff, { { F (F_OP1) }, { F (F_OP2) }, { F (F_S1) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_syscall_d_indirect_with_post_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ffff, { { F (F_OP1) }, { F (F_OP2) }, { F (F_S1) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_syscall_d_indirect_with_pre_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ffff, { { F (F_OP1) }, { F (F_OP2) }, { F (F_S1) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_iread_s1_ea_indirect ATTRIBUTE_UNUSED = {
+  32, 32, 0xffffff1f, { { F (F_OP1) }, { F (F_D) }, { F (F_OP2) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_iread_s1_ea_indirect_with_index_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffffff00, { { F (F_OP1) }, { F (F_D) }, { F (F_OP2) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_iread_s1_ea_indirect_with_post_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffffff10, { { F (F_OP1) }, { F (F_D) }, { F (F_OP2) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_iread_s1_ea_indirect_with_pre_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffffff10, { { F (F_OP1) }, { F (F_D) }, { F (F_OP2) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_iread_s1_ea_indirect_with_offset_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfffffc00, { { F (F_OP1) }, { F (F_D) }, { F (F_OP2) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_iwrite_d_pea_indirect_with_index_s1_direct ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_iwrite_d_pea_indirect_with_offset_s1_direct ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc00ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_iwrite_d_pea_indirect_s1_direct ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1fff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_iwrite_d_pea_indirect_with_post_increment_s1_direct ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_iwrite_d_pea_indirect_with_pre_increment_s1_direct ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_iwrite_d_pea_indirect_with_index_s1_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_iwrite_d_pea_indirect_with_offset_s1_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc00ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_iwrite_d_pea_indirect_s1_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1fff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_iwrite_d_pea_indirect_with_post_increment_s1_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_iwrite_d_pea_indirect_with_pre_increment_s1_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_iwrite_d_pea_indirect_with_index_s1_indirect_with_index_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_iwrite_d_pea_indirect_with_offset_s1_indirect_with_index_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc00ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_iwrite_d_pea_indirect_s1_indirect_with_index_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1fff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_iwrite_d_pea_indirect_with_post_increment_s1_indirect_with_index_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_iwrite_d_pea_indirect_with_pre_increment_s1_indirect_with_index_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_iwrite_d_pea_indirect_with_index_s1_indirect_with_offset_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00fc00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_iwrite_d_pea_indirect_with_offset_s1_indirect_with_offset_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc00fc00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_iwrite_d_pea_indirect_s1_indirect_with_offset_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1ffc00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_iwrite_d_pea_indirect_with_post_increment_s1_indirect_with_offset_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10fc00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_iwrite_d_pea_indirect_with_pre_increment_s1_indirect_with_offset_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10fc00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_iwrite_d_pea_indirect_with_index_s1_indirect_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff1f, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_iwrite_d_pea_indirect_with_offset_s1_indirect_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc00ff1f, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_iwrite_d_pea_indirect_s1_indirect_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1fff1f, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_iwrite_d_pea_indirect_with_post_increment_s1_indirect_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff1f, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_iwrite_d_pea_indirect_with_pre_increment_s1_indirect_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff1f, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_iwrite_d_pea_indirect_with_index_s1_indirect_with_post_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_iwrite_d_pea_indirect_with_offset_s1_indirect_with_post_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc00ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_iwrite_d_pea_indirect_s1_indirect_with_post_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1fff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_iwrite_d_pea_indirect_with_post_increment_s1_indirect_with_post_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_iwrite_d_pea_indirect_with_pre_increment_s1_indirect_with_post_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_iwrite_d_pea_indirect_with_index_s1_indirect_with_pre_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_iwrite_d_pea_indirect_with_offset_s1_indirect_with_pre_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc00ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_iwrite_d_pea_indirect_s1_indirect_with_pre_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1fff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_iwrite_d_pea_indirect_with_post_increment_s1_indirect_with_pre_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_iwrite_d_pea_indirect_with_pre_increment_s1_indirect_with_pre_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_setcsr_s1_direct ATTRIBUTE_UNUSED = {
+  32, 32, 0xffffff00, { { F (F_OP1) }, { F (F_D) }, { F (F_OP2) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_setcsr_s1_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xffffff00, { { F (F_OP1) }, { F (F_D) }, { F (F_OP2) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_setcsr_s1_indirect_with_index_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffffff00, { { F (F_OP1) }, { F (F_D) }, { F (F_OP2) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_setcsr_s1_indirect_with_offset_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfffffc00, { { F (F_OP1) }, { F (F_D) }, { F (F_OP2) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_setcsr_s1_indirect_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffffff1f, { { F (F_OP1) }, { F (F_D) }, { F (F_OP2) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_setcsr_s1_indirect_with_post_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffffff10, { { F (F_OP1) }, { F (F_D) }, { F (F_OP2) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_setcsr_s1_indirect_with_pre_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffffff10, { { F (F_OP1) }, { F (F_D) }, { F (F_OP2) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_2_d_immediate_2_s1_direct ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_2_d_indirect_with_index_2_s1_direct ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_2_d_indirect_with_offset_2_s1_direct ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc00ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_2_d_indirect_2_s1_direct ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1fff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_2_d_indirect_with_post_increment_2_s1_direct ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_2_d_indirect_with_pre_increment_2_s1_direct ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_2_d_immediate_2_s1_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_2_d_indirect_with_index_2_s1_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_2_d_indirect_with_offset_2_s1_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc00ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_2_d_indirect_2_s1_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1fff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_2_d_indirect_with_post_increment_2_s1_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_2_d_indirect_with_pre_increment_2_s1_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_2_d_direct_s1_indirect_with_index_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_DIRECT) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_2_d_immediate_2_s1_indirect_with_index_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_2_d_indirect_with_index_2_s1_indirect_with_index_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_2_d_indirect_with_offset_2_s1_indirect_with_index_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc00ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_2_d_indirect_2_s1_indirect_with_index_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1fff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_2_d_indirect_with_post_increment_2_s1_indirect_with_index_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_2_d_indirect_with_pre_increment_2_s1_indirect_with_index_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_2_d_direct_s1_indirect_with_offset_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00fc00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_DIRECT) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_2_d_immediate_2_s1_indirect_with_offset_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00fc00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_2_d_indirect_with_index_2_s1_indirect_with_offset_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00fc00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_2_d_indirect_with_offset_2_s1_indirect_with_offset_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc00fc00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_2_d_indirect_2_s1_indirect_with_offset_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1ffc00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_2_d_indirect_with_post_increment_2_s1_indirect_with_offset_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10fc00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_2_d_indirect_with_pre_increment_2_s1_indirect_with_offset_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10fc00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_2_d_direct_s1_indirect_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff1f, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_DIRECT) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_2_d_immediate_2_s1_indirect_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff1f, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_2_d_indirect_with_index_2_s1_indirect_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff1f, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_2_d_indirect_with_offset_2_s1_indirect_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc00ff1f, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_2_d_indirect_2_s1_indirect_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1fff1f, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_2_d_indirect_with_post_increment_2_s1_indirect_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff1f, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_2_d_indirect_with_pre_increment_2_s1_indirect_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff1f, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_2_d_direct_s1_indirect_with_post_increment_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_DIRECT) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_2_d_immediate_2_s1_indirect_with_post_increment_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_2_d_indirect_with_index_2_s1_indirect_with_post_increment_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_2_d_indirect_with_offset_2_s1_indirect_with_post_increment_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc00ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_2_d_indirect_2_s1_indirect_with_post_increment_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1fff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_2_d_indirect_with_post_increment_2_s1_indirect_with_post_increment_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_2_d_indirect_with_pre_increment_2_s1_indirect_with_post_increment_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_2_d_direct_s1_indirect_with_pre_increment_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_DIRECT) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_2_d_immediate_2_s1_indirect_with_pre_increment_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_2_d_indirect_with_index_2_s1_indirect_with_pre_increment_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_2_d_indirect_with_offset_2_s1_indirect_with_pre_increment_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc00ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_2_d_indirect_2_s1_indirect_with_pre_increment_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1fff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_2_d_indirect_with_post_increment_2_s1_indirect_with_pre_increment_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_2_d_indirect_with_pre_increment_2_s1_indirect_with_pre_increment_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_1_d_immediate_1_s1_direct ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_1_d_indirect_with_index_1_s1_direct ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_1_d_indirect_with_offset_1_s1_direct ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc00ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_1) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_1_d_indirect_1_s1_direct ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1fff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_1) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_1_d_indirect_with_post_increment_1_s1_direct ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_1) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_1_d_indirect_with_pre_increment_1_s1_direct ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_1) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_1_d_immediate_1_s1_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_1_d_indirect_with_index_1_s1_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_1_d_indirect_with_offset_1_s1_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc00ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_1) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_1_d_indirect_1_s1_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1fff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_1) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_1_d_indirect_with_post_increment_1_s1_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_1) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_1_d_indirect_with_pre_increment_1_s1_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_1) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_1_d_direct_s1_indirect_with_index_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_DIRECT) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_1_d_immediate_1_s1_indirect_with_index_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_1_d_indirect_with_index_1_s1_indirect_with_index_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_1_d_indirect_with_offset_1_s1_indirect_with_index_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc00ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_1) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_1_d_indirect_1_s1_indirect_with_index_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1fff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_1) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_1_d_indirect_with_post_increment_1_s1_indirect_with_index_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_1) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_1_d_indirect_with_pre_increment_1_s1_indirect_with_index_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_1) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_1_d_direct_s1_indirect_with_offset_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00fc00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_DIRECT) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_1_d_immediate_1_s1_indirect_with_offset_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00fc00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_1_d_indirect_with_index_1_s1_indirect_with_offset_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00fc00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_1_d_indirect_with_offset_1_s1_indirect_with_offset_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc00fc00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_1) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_1_d_indirect_1_s1_indirect_with_offset_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1ffc00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_1) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_1_d_indirect_with_post_increment_1_s1_indirect_with_offset_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10fc00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_1) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_1_d_indirect_with_pre_increment_1_s1_indirect_with_offset_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10fc00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_1) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_1_d_direct_s1_indirect_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff1f, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_DIRECT) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_1_d_immediate_1_s1_indirect_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff1f, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_1_d_indirect_with_index_1_s1_indirect_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff1f, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_1_d_indirect_with_offset_1_s1_indirect_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc00ff1f, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_1) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_1_d_indirect_1_s1_indirect_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1fff1f, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_1) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_1_d_indirect_with_post_increment_1_s1_indirect_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff1f, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_1) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_1_d_indirect_with_pre_increment_1_s1_indirect_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff1f, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_1) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_1_d_direct_s1_indirect_with_post_increment_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_DIRECT) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_1_d_immediate_1_s1_indirect_with_post_increment_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_1_d_indirect_with_index_1_s1_indirect_with_post_increment_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_1_d_indirect_with_offset_1_s1_indirect_with_post_increment_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc00ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_1) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_1_d_indirect_1_s1_indirect_with_post_increment_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1fff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_1) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_1_d_indirect_with_post_increment_1_s1_indirect_with_post_increment_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_1) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_1_d_indirect_with_pre_increment_1_s1_indirect_with_post_increment_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_1) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_1_d_direct_s1_indirect_with_pre_increment_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_DIRECT) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_1_d_immediate_1_s1_indirect_with_pre_increment_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_1_d_indirect_with_index_1_s1_indirect_with_pre_increment_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_1_d_indirect_with_offset_1_s1_indirect_with_pre_increment_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc00ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_1) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_1_d_indirect_1_s1_indirect_with_pre_increment_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1fff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_1) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_1_d_indirect_with_post_increment_1_s1_indirect_with_pre_increment_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_1) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_move_1_d_indirect_with_pre_increment_1_s1_indirect_with_pre_increment_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_1) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_movei_d_direct ATTRIBUTE_UNUSED = {
+  32, 32, 0xff000000, { { F (F_OP1) }, { F (F_IMM16_2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_DIRECT) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_movei_d_immediate_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff000000, { { F (F_OP1) }, { F (F_IMM16_2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_movei_d_indirect_with_index_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff000000, { { F (F_OP1) }, { F (F_IMM16_2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_movei_d_indirect_with_offset_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc000000, { { F (F_OP1) }, { F (F_IMM16_2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_2) }, { F (F_D_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_movei_d_indirect_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1f0000, { { F (F_OP1) }, { F (F_IMM16_2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_2) }, { F (F_D_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_movei_d_indirect_with_post_increment_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff100000, { { F (F_OP1) }, { F (F_IMM16_2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_2) }, { F (F_D_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_movei_d_indirect_with_pre_increment_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff100000, { { F (F_OP1) }, { F (F_IMM16_2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_2) }, { F (F_D_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bclr_d_direct_s1_direct ATTRIBUTE_UNUSED = {
+  32, 32, 0xff000700, { { F (F_OP1) }, { F (F_BIT5) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_DIRECT) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bclr_d_immediate_4_s1_direct ATTRIBUTE_UNUSED = {
+  32, 32, 0xff000700, { { F (F_OP1) }, { F (F_BIT5) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bclr_d_indirect_with_index_4_s1_direct ATTRIBUTE_UNUSED = {
+  32, 32, 0xff000700, { { F (F_OP1) }, { F (F_BIT5) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bclr_d_indirect_with_offset_4_s1_direct ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc000700, { { F (F_OP1) }, { F (F_BIT5) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bclr_d_indirect_4_s1_direct ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1f0700, { { F (F_OP1) }, { F (F_BIT5) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bclr_d_indirect_with_post_increment_4_s1_direct ATTRIBUTE_UNUSED = {
+  32, 32, 0xff100700, { { F (F_OP1) }, { F (F_BIT5) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bclr_d_indirect_with_pre_increment_4_s1_direct ATTRIBUTE_UNUSED = {
+  32, 32, 0xff100700, { { F (F_OP1) }, { F (F_BIT5) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bclr_d_direct_s1_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xff000700, { { F (F_OP1) }, { F (F_BIT5) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_DIRECT) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bclr_d_immediate_4_s1_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xff000700, { { F (F_OP1) }, { F (F_BIT5) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bclr_d_indirect_with_index_4_s1_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xff000700, { { F (F_OP1) }, { F (F_BIT5) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bclr_d_indirect_with_offset_4_s1_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc000700, { { F (F_OP1) }, { F (F_BIT5) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bclr_d_indirect_4_s1_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1f0700, { { F (F_OP1) }, { F (F_BIT5) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bclr_d_indirect_with_post_increment_4_s1_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xff100700, { { F (F_OP1) }, { F (F_BIT5) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bclr_d_indirect_with_pre_increment_4_s1_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xff100700, { { F (F_OP1) }, { F (F_BIT5) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bclr_d_direct_s1_indirect_with_index_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff000700, { { F (F_OP1) }, { F (F_BIT5) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_DIRECT) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bclr_d_immediate_4_s1_indirect_with_index_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff000700, { { F (F_OP1) }, { F (F_BIT5) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bclr_d_indirect_with_index_4_s1_indirect_with_index_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff000700, { { F (F_OP1) }, { F (F_BIT5) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bclr_d_indirect_with_offset_4_s1_indirect_with_index_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc000700, { { F (F_OP1) }, { F (F_BIT5) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bclr_d_indirect_4_s1_indirect_with_index_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1f0700, { { F (F_OP1) }, { F (F_BIT5) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bclr_d_indirect_with_post_increment_4_s1_indirect_with_index_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff100700, { { F (F_OP1) }, { F (F_BIT5) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bclr_d_indirect_with_pre_increment_4_s1_indirect_with_index_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff100700, { { F (F_OP1) }, { F (F_BIT5) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bclr_d_direct_s1_indirect_with_offset_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff000400, { { F (F_OP1) }, { F (F_BIT5) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_DIRECT) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bclr_d_immediate_4_s1_indirect_with_offset_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff000400, { { F (F_OP1) }, { F (F_BIT5) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bclr_d_indirect_with_index_4_s1_indirect_with_offset_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff000400, { { F (F_OP1) }, { F (F_BIT5) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bclr_d_indirect_with_offset_4_s1_indirect_with_offset_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc000400, { { F (F_OP1) }, { F (F_BIT5) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bclr_d_indirect_4_s1_indirect_with_offset_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1f0400, { { F (F_OP1) }, { F (F_BIT5) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bclr_d_indirect_with_post_increment_4_s1_indirect_with_offset_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff100400, { { F (F_OP1) }, { F (F_BIT5) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bclr_d_indirect_with_pre_increment_4_s1_indirect_with_offset_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff100400, { { F (F_OP1) }, { F (F_BIT5) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bclr_d_direct_s1_indirect_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00071f, { { F (F_OP1) }, { F (F_BIT5) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_DIRECT) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bclr_d_immediate_4_s1_indirect_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00071f, { { F (F_OP1) }, { F (F_BIT5) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bclr_d_indirect_with_index_4_s1_indirect_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00071f, { { F (F_OP1) }, { F (F_BIT5) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bclr_d_indirect_with_offset_4_s1_indirect_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc00071f, { { F (F_OP1) }, { F (F_BIT5) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bclr_d_indirect_4_s1_indirect_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1f071f, { { F (F_OP1) }, { F (F_BIT5) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bclr_d_indirect_with_post_increment_4_s1_indirect_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10071f, { { F (F_OP1) }, { F (F_BIT5) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bclr_d_indirect_with_pre_increment_4_s1_indirect_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10071f, { { F (F_OP1) }, { F (F_BIT5) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bclr_d_direct_s1_indirect_with_post_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff000710, { { F (F_OP1) }, { F (F_BIT5) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_DIRECT) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bclr_d_immediate_4_s1_indirect_with_post_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff000710, { { F (F_OP1) }, { F (F_BIT5) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bclr_d_indirect_with_index_4_s1_indirect_with_post_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff000710, { { F (F_OP1) }, { F (F_BIT5) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bclr_d_indirect_with_offset_4_s1_indirect_with_post_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc000710, { { F (F_OP1) }, { F (F_BIT5) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bclr_d_indirect_4_s1_indirect_with_post_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1f0710, { { F (F_OP1) }, { F (F_BIT5) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bclr_d_indirect_with_post_increment_4_s1_indirect_with_post_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff100710, { { F (F_OP1) }, { F (F_BIT5) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bclr_d_indirect_with_pre_increment_4_s1_indirect_with_post_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff100710, { { F (F_OP1) }, { F (F_BIT5) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bclr_d_direct_s1_indirect_with_pre_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff000710, { { F (F_OP1) }, { F (F_BIT5) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_DIRECT) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bclr_d_immediate_4_s1_indirect_with_pre_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff000710, { { F (F_OP1) }, { F (F_BIT5) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bclr_d_indirect_with_index_4_s1_indirect_with_pre_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff000710, { { F (F_OP1) }, { F (F_BIT5) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bclr_d_indirect_with_offset_4_s1_indirect_with_pre_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc000710, { { F (F_OP1) }, { F (F_BIT5) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bclr_d_indirect_4_s1_indirect_with_pre_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1f0710, { { F (F_OP1) }, { F (F_BIT5) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bclr_d_indirect_with_post_increment_4_s1_indirect_with_pre_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff100710, { { F (F_OP1) }, { F (F_BIT5) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bclr_d_indirect_with_pre_increment_4_s1_indirect_with_pre_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff100710, { { F (F_OP1) }, { F (F_BIT5) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_btst_s1_direct_imm_bit5 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffff0700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { F (F_BIT26) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_btst_s1_immediate_imm_bit5 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffff0700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { F (F_BIT26) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_btst_s1_indirect_with_index_4_imm_bit5 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffff0700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_btst_s1_indirect_with_offset_4_imm_bit5 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffff0400, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_btst_s1_indirect_4_imm_bit5 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffff071f, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_btst_s1_indirect_with_post_increment_4_imm_bit5 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffff0710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_btst_s1_indirect_with_pre_increment_4_imm_bit5 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffff0710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_btst_s1_direct_dyn_reg ATTRIBUTE_UNUSED = {
+  32, 32, 0xffff8700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { F (F_BIT26) }, { F (F_B15) }, { F (F_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_btst_s1_immediate_dyn_reg ATTRIBUTE_UNUSED = {
+  32, 32, 0xffff8700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { F (F_BIT26) }, { F (F_B15) }, { F (F_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_btst_s1_indirect_with_index_4_dyn_reg ATTRIBUTE_UNUSED = {
+  32, 32, 0xffff8700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_B15) }, { F (F_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_btst_s1_indirect_with_offset_4_dyn_reg ATTRIBUTE_UNUSED = {
+  32, 32, 0xffff8400, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_B15) }, { F (F_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_btst_s1_indirect_4_dyn_reg ATTRIBUTE_UNUSED = {
+  32, 32, 0xffff871f, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_B15) }, { F (F_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_btst_s1_indirect_with_post_increment_4_dyn_reg ATTRIBUTE_UNUSED = {
+  32, 32, 0xffff8710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_B15) }, { F (F_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_btst_s1_indirect_with_pre_increment_4_dyn_reg ATTRIBUTE_UNUSED = {
+  32, 32, 0xffff8710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_B15) }, { F (F_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_shmrg_2_imm_bit5_s1_direct ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe00700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_BIT26) }, { F (F_BIT5) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_shmrg_2_dyn_reg_s1_direct ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe08700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_BIT26) }, { F (F_B15) }, { F (F_S2) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_shmrg_2_imm_bit5_s1_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe00700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_BIT26) }, { F (F_BIT5) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_shmrg_2_dyn_reg_s1_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe08700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_BIT26) }, { F (F_B15) }, { F (F_S2) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_shmrg_2_imm_bit5_s1_indirect_with_index_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe00700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_BIT26) }, { F (F_BIT5) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_shmrg_2_dyn_reg_s1_indirect_with_index_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe08700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_BIT26) }, { F (F_B15) }, { F (F_S2) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_shmrg_2_imm_bit5_s1_indirect_with_offset_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe00400, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_BIT26) }, { F (F_BIT5) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_shmrg_2_dyn_reg_s1_indirect_with_offset_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe08400, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_BIT26) }, { F (F_B15) }, { F (F_S2) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_shmrg_2_imm_bit5_s1_indirect_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe0071f, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_BIT26) }, { F (F_BIT5) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_shmrg_2_dyn_reg_s1_indirect_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe0871f, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_BIT26) }, { F (F_B15) }, { F (F_S2) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_shmrg_2_imm_bit5_s1_indirect_with_post_increment_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe00710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_BIT26) }, { F (F_BIT5) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_shmrg_2_dyn_reg_s1_indirect_with_post_increment_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe08710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_BIT26) }, { F (F_B15) }, { F (F_S2) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_shmrg_2_imm_bit5_s1_indirect_with_pre_increment_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe00710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_BIT26) }, { F (F_BIT5) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_shmrg_2_dyn_reg_s1_indirect_with_pre_increment_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe08710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_BIT26) }, { F (F_B15) }, { F (F_S2) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_shmrg_1_imm_bit5_s1_indirect_with_index_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe00700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_BIT26) }, { F (F_BIT5) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_shmrg_1_dyn_reg_s1_indirect_with_index_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe08700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_BIT26) }, { F (F_B15) }, { F (F_S2) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_shmrg_1_imm_bit5_s1_indirect_with_offset_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe00400, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_BIT26) }, { F (F_BIT5) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_shmrg_1_dyn_reg_s1_indirect_with_offset_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe08400, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_BIT26) }, { F (F_B15) }, { F (F_S2) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_shmrg_1_imm_bit5_s1_indirect_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe0071f, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_BIT26) }, { F (F_BIT5) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_shmrg_1_dyn_reg_s1_indirect_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe0871f, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_BIT26) }, { F (F_B15) }, { F (F_S2) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_shmrg_1_imm_bit5_s1_indirect_with_post_increment_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe00710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_BIT26) }, { F (F_BIT5) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_shmrg_1_dyn_reg_s1_indirect_with_post_increment_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe08710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_BIT26) }, { F (F_B15) }, { F (F_S2) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_shmrg_1_imm_bit5_s1_indirect_with_pre_increment_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe00710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_BIT26) }, { F (F_BIT5) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_shmrg_1_dyn_reg_s1_indirect_with_pre_increment_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe08710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_BIT26) }, { F (F_B15) }, { F (F_S2) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_crcgen_s1_indirect_with_index_1_imm_bit5 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffff0700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_crcgen_s1_indirect_with_offset_1_imm_bit5 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffff0400, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_1) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_crcgen_s1_indirect_1_imm_bit5 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffff071f, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_1) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_crcgen_s1_indirect_with_post_increment_1_imm_bit5 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffff0710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_1) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_crcgen_s1_indirect_with_pre_increment_1_imm_bit5 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffff0710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_1) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_crcgen_s1_indirect_with_index_1_dyn_reg ATTRIBUTE_UNUSED = {
+  32, 32, 0xffff8700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_B15) }, { F (F_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_crcgen_s1_indirect_with_offset_1_dyn_reg ATTRIBUTE_UNUSED = {
+  32, 32, 0xffff8400, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_1) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_B15) }, { F (F_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_crcgen_s1_indirect_1_dyn_reg ATTRIBUTE_UNUSED = {
+  32, 32, 0xffff871f, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_1) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_B15) }, { F (F_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_crcgen_s1_indirect_with_post_increment_1_dyn_reg ATTRIBUTE_UNUSED = {
+  32, 32, 0xffff8710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_1) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_B15) }, { F (F_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_crcgen_s1_indirect_with_pre_increment_1_dyn_reg ATTRIBUTE_UNUSED = {
+  32, 32, 0xffff8710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_1) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_B15) }, { F (F_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bfextu_s1_direct_imm_bit5 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe00700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { F (F_BIT26) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bfextu_s1_immediate_imm_bit5 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe00700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { F (F_BIT26) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bfextu_s1_indirect_with_index_4_imm_bit5 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe00700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bfextu_s1_indirect_with_offset_4_imm_bit5 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe00400, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bfextu_s1_indirect_4_imm_bit5 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe0071f, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bfextu_s1_indirect_with_post_increment_4_imm_bit5 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe00710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bfextu_s1_indirect_with_pre_increment_4_imm_bit5 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe00710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bfextu_s1_direct_dyn_reg ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe08700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { F (F_BIT26) }, { F (F_B15) }, { F (F_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bfextu_s1_immediate_dyn_reg ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe08700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { F (F_BIT26) }, { F (F_B15) }, { F (F_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bfextu_s1_indirect_with_index_4_dyn_reg ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe08700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_B15) }, { F (F_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bfextu_s1_indirect_with_offset_4_dyn_reg ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe08400, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_B15) }, { F (F_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bfextu_s1_indirect_4_dyn_reg ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe0871f, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_B15) }, { F (F_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bfextu_s1_indirect_with_post_increment_4_dyn_reg ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe08710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_B15) }, { F (F_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_bfextu_s1_indirect_with_pre_increment_4_dyn_reg ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe08710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_B15) }, { F (F_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_asr_4_imm_bit5_s1_indirect_with_index_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe00700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_BIT26) }, { F (F_BIT5) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_asr_4_dyn_reg_s1_indirect_with_index_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe08700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_BIT26) }, { F (F_B15) }, { F (F_S2) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_asr_4_imm_bit5_s1_indirect_with_offset_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe00400, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_BIT26) }, { F (F_BIT5) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_asr_4_dyn_reg_s1_indirect_with_offset_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe08400, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_BIT26) }, { F (F_B15) }, { F (F_S2) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_asr_4_imm_bit5_s1_indirect_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe0071f, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_BIT26) }, { F (F_BIT5) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_asr_4_dyn_reg_s1_indirect_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe0871f, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_BIT26) }, { F (F_B15) }, { F (F_S2) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_asr_4_imm_bit5_s1_indirect_with_post_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe00710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_BIT26) }, { F (F_BIT5) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_asr_4_dyn_reg_s1_indirect_with_post_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe08710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_BIT26) }, { F (F_B15) }, { F (F_S2) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_asr_4_imm_bit5_s1_indirect_with_pre_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe00710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_BIT26) }, { F (F_BIT5) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_asr_4_dyn_reg_s1_indirect_with_pre_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe08710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_BIT26) }, { F (F_B15) }, { F (F_S2) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_compatibility_mac_s1_direct_dsp_src2_data_reg ATTRIBUTE_UNUSED = {
+  32, 32, 0xffff8700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_compatibility_mac_s1_immediate_dsp_src2_data_reg ATTRIBUTE_UNUSED = {
+  32, 32, 0xffff8700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_compatibility_mac_s1_indirect_with_index_2_dsp_src2_data_reg ATTRIBUTE_UNUSED = {
+  32, 32, 0xffff8700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_compatibility_mac_s1_indirect_with_offset_2_dsp_src2_data_reg ATTRIBUTE_UNUSED = {
+  32, 32, 0xffff8400, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_compatibility_mac_s1_indirect_2_dsp_src2_data_reg ATTRIBUTE_UNUSED = {
+  32, 32, 0xffff871f, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_compatibility_mac_s1_indirect_with_post_increment_2_dsp_src2_data_reg ATTRIBUTE_UNUSED = {
+  32, 32, 0xffff8710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_compatibility_mac_s1_indirect_with_pre_increment_2_dsp_src2_data_reg ATTRIBUTE_UNUSED = {
+  32, 32, 0xffff8710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_B15) }, { F (F_BIT26) }, { F (F_DSP_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_compatibility_mac_s1_direct_dsp_imm_bit5 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffff0700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { F (F_BIT26) }, { F (F_DSP_S2_SEL) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_compatibility_mac_s1_immediate_dsp_imm_bit5 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffff0700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { F (F_BIT26) }, { F (F_DSP_S2_SEL) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_compatibility_mac_s1_indirect_with_index_2_dsp_imm_bit5 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffff0700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_DSP_S2_SEL) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_compatibility_mac_s1_indirect_with_offset_2_dsp_imm_bit5 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffff0400, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_DSP_S2_SEL) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_compatibility_mac_s1_indirect_2_dsp_imm_bit5 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffff071f, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_DSP_S2_SEL) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_compatibility_mac_s1_indirect_with_post_increment_2_dsp_imm_bit5 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffff0710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_DSP_S2_SEL) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_compatibility_mac_s1_indirect_with_pre_increment_2_dsp_imm_bit5 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffff0710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_DSP_S2_SEL) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_mac_s1_indirect_with_index_2_imm_bit5 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffff0700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_mac_s1_indirect_with_offset_2_imm_bit5 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffff0400, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_mac_s1_indirect_2_imm_bit5 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffff071f, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_mac_s1_indirect_with_post_increment_2_imm_bit5 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffff0710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_mac_s1_indirect_with_pre_increment_2_imm_bit5 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffff0710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_BIT5) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_mac_s1_indirect_with_index_2_dyn_reg ATTRIBUTE_UNUSED = {
+  32, 32, 0xffff8700, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_B15) }, { F (F_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_mac_s1_indirect_with_offset_2_dyn_reg ATTRIBUTE_UNUSED = {
+  32, 32, 0xffff8400, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_B15) }, { F (F_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_mac_s1_indirect_2_dyn_reg ATTRIBUTE_UNUSED = {
+  32, 32, 0xffff871f, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_B15) }, { F (F_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_mac_s1_indirect_with_post_increment_2_dyn_reg ATTRIBUTE_UNUSED = {
+  32, 32, 0xffff8710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_B15) }, { F (F_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_mac_s1_indirect_with_pre_increment_2_dyn_reg ATTRIBUTE_UNUSED = {
+  32, 32, 0xffff8710, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { F (F_BIT26) }, { F (F_B15) }, { F (F_S2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pdec_d_direct_pdec_s1_ea_indirect_with_offset_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00fc00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_DIRECT) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pdec_d_immediate_4_pdec_s1_ea_indirect_with_offset_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00fc00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pdec_d_indirect_with_index_4_pdec_s1_ea_indirect_with_offset_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00fc00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pdec_d_indirect_with_offset_4_pdec_s1_ea_indirect_with_offset_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc00fc00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pdec_d_indirect_4_pdec_s1_ea_indirect_with_offset_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1ffc00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pdec_d_indirect_with_post_increment_4_pdec_s1_ea_indirect_with_offset_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10fc00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pdec_d_indirect_with_pre_increment_4_pdec_s1_ea_indirect_with_offset_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10fc00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_4_d_direct_s1_ea_indirect ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff1f, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_DIRECT) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_4_d_immediate_4_s1_ea_indirect ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff1f, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_4_d_indirect_with_index_4_s1_ea_indirect ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff1f, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_4_d_indirect_with_offset_4_s1_ea_indirect ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc00ff1f, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_4_d_indirect_4_s1_ea_indirect ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1fff1f, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_4_d_indirect_with_post_increment_4_s1_ea_indirect ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff1f, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_4_d_indirect_with_pre_increment_4_s1_ea_indirect ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff1f, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_4_d_direct_s1_ea_indirect_with_offset_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00fc00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_DIRECT) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_4_d_immediate_4_s1_ea_indirect_with_offset_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00fc00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_4_d_indirect_with_index_4_s1_ea_indirect_with_offset_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00fc00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_4_d_indirect_with_offset_4_s1_ea_indirect_with_offset_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc00fc00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_4_d_indirect_4_s1_ea_indirect_with_offset_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1ffc00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_4_d_indirect_with_post_increment_4_s1_ea_indirect_with_offset_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10fc00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_4_d_indirect_with_pre_increment_4_s1_ea_indirect_with_offset_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10fc00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_4_d_direct_s1_ea_indirect_with_index_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_DIRECT) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_4_d_immediate_4_s1_ea_indirect_with_index_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_4_d_indirect_with_index_4_s1_ea_indirect_with_index_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_4_d_indirect_with_offset_4_s1_ea_indirect_with_index_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc00ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_4_d_indirect_4_s1_ea_indirect_with_index_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1fff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_4_d_indirect_with_post_increment_4_s1_ea_indirect_with_index_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_4_d_indirect_with_pre_increment_4_s1_ea_indirect_with_index_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_4_d_direct_s1_ea_indirect_with_post_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_DIRECT) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_4_d_immediate_4_s1_ea_indirect_with_post_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_4_d_indirect_with_index_4_s1_ea_indirect_with_post_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_4_d_indirect_with_offset_4_s1_ea_indirect_with_post_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc00ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_4_d_indirect_4_s1_ea_indirect_with_post_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1fff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_4_d_indirect_with_post_increment_4_s1_ea_indirect_with_post_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_4_d_indirect_with_pre_increment_4_s1_ea_indirect_with_post_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_4_d_direct_s1_ea_indirect_with_pre_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_DIRECT) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_4_d_immediate_4_s1_ea_indirect_with_pre_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_4_d_indirect_with_index_4_s1_ea_indirect_with_pre_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_4_d_indirect_with_offset_4_s1_ea_indirect_with_pre_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc00ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_4_d_indirect_4_s1_ea_indirect_with_pre_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1fff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_4_d_indirect_with_post_increment_4_s1_ea_indirect_with_pre_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_4_d_indirect_with_pre_increment_4_s1_ea_indirect_with_pre_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_4_d_direct_s1_ea_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_DIRECT) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_4_d_immediate_4_s1_ea_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_4_d_indirect_with_index_4_s1_ea_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_4_d_indirect_with_offset_4_s1_ea_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc00ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_4_d_indirect_4_s1_ea_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1fff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_4_d_indirect_with_post_increment_4_s1_ea_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_4_d_indirect_with_pre_increment_4_s1_ea_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_2_d_direct_s1_ea_indirect_with_offset_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00fc00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_DIRECT) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_2_d_immediate_4_s1_ea_indirect_with_offset_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00fc00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_2_d_indirect_with_index_4_s1_ea_indirect_with_offset_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00fc00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_2_d_indirect_with_offset_4_s1_ea_indirect_with_offset_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc00fc00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_2_d_indirect_4_s1_ea_indirect_with_offset_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1ffc00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_2_d_indirect_with_post_increment_4_s1_ea_indirect_with_offset_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10fc00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_2_d_indirect_with_pre_increment_4_s1_ea_indirect_with_offset_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10fc00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_2_d_direct_s1_ea_indirect_with_index_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_DIRECT) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_2_d_immediate_4_s1_ea_indirect_with_index_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_2_d_indirect_with_index_4_s1_ea_indirect_with_index_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_2_d_indirect_with_offset_4_s1_ea_indirect_with_index_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc00ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_2_d_indirect_4_s1_ea_indirect_with_index_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1fff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_2_d_indirect_with_post_increment_4_s1_ea_indirect_with_index_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_2_d_indirect_with_pre_increment_4_s1_ea_indirect_with_index_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_2_d_direct_s1_ea_indirect_with_post_increment_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_DIRECT) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_2_d_immediate_4_s1_ea_indirect_with_post_increment_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_2_d_indirect_with_index_4_s1_ea_indirect_with_post_increment_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_2_d_indirect_with_offset_4_s1_ea_indirect_with_post_increment_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc00ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_2_d_indirect_4_s1_ea_indirect_with_post_increment_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1fff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_2_d_indirect_with_post_increment_4_s1_ea_indirect_with_post_increment_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_2_d_indirect_with_pre_increment_4_s1_ea_indirect_with_post_increment_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_2_d_direct_s1_ea_indirect_with_pre_increment_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_DIRECT) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_2_d_immediate_4_s1_ea_indirect_with_pre_increment_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_2_d_indirect_with_index_4_s1_ea_indirect_with_pre_increment_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_2_d_indirect_with_offset_4_s1_ea_indirect_with_pre_increment_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc00ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_2_d_indirect_4_s1_ea_indirect_with_pre_increment_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1fff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_2_d_indirect_with_post_increment_4_s1_ea_indirect_with_pre_increment_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_2_d_indirect_with_pre_increment_4_s1_ea_indirect_with_pre_increment_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_1_d_direct_s1_ea_indirect_with_offset_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00fc00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_DIRECT) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_1_d_immediate_4_s1_ea_indirect_with_offset_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00fc00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_1_d_indirect_with_index_4_s1_ea_indirect_with_offset_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00fc00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_1_d_indirect_with_offset_4_s1_ea_indirect_with_offset_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc00fc00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_1_d_indirect_4_s1_ea_indirect_with_offset_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1ffc00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_1_d_indirect_with_post_increment_4_s1_ea_indirect_with_offset_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10fc00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_1_d_indirect_with_pre_increment_4_s1_ea_indirect_with_offset_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10fc00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_1_d_direct_s1_ea_indirect_with_index_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_DIRECT) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_1_d_immediate_4_s1_ea_indirect_with_index_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_1_d_indirect_with_index_4_s1_ea_indirect_with_index_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_1_d_indirect_with_offset_4_s1_ea_indirect_with_index_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc00ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_1_d_indirect_4_s1_ea_indirect_with_index_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1fff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_1_d_indirect_with_post_increment_4_s1_ea_indirect_with_index_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_1_d_indirect_with_pre_increment_4_s1_ea_indirect_with_index_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_1_d_direct_s1_ea_indirect_with_post_increment_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_DIRECT) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_1_d_immediate_4_s1_ea_indirect_with_post_increment_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_1_d_indirect_with_index_4_s1_ea_indirect_with_post_increment_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_1_d_indirect_with_offset_4_s1_ea_indirect_with_post_increment_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc00ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_1_d_indirect_4_s1_ea_indirect_with_post_increment_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1fff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_1_d_indirect_with_post_increment_4_s1_ea_indirect_with_post_increment_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_1_d_indirect_with_pre_increment_4_s1_ea_indirect_with_post_increment_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_1_d_direct_s1_ea_indirect_with_pre_increment_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_DIRECT) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_1_d_immediate_4_s1_ea_indirect_with_pre_increment_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_1_d_indirect_with_index_4_s1_ea_indirect_with_pre_increment_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_1_d_indirect_with_offset_4_s1_ea_indirect_with_pre_increment_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc00ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_1_d_indirect_4_s1_ea_indirect_with_pre_increment_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1fff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_1_d_indirect_with_post_increment_4_s1_ea_indirect_with_pre_increment_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_lea_1_d_indirect_with_pre_increment_4_s1_ea_indirect_with_pre_increment_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_cmpi_s1_direct ATTRIBUTE_UNUSED = {
+  32, 32, 0xf8000700, { { F (F_OP1) }, { F (F_IMM16_1) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_cmpi_s1_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xf8000700, { { F (F_OP1) }, { F (F_IMM16_1) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_cmpi_s1_indirect_with_index_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xf8000700, { { F (F_OP1) }, { F (F_IMM16_1) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_cmpi_s1_indirect_with_offset_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xf8000400, { { F (F_OP1) }, { F (F_IMM16_1) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_cmpi_s1_indirect_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xf800071f, { { F (F_OP1) }, { F (F_IMM16_1) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_cmpi_s1_indirect_with_post_increment_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xf8000710, { { F (F_OP1) }, { F (F_IMM16_1) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_cmpi_s1_indirect_with_pre_increment_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xf8000710, { { F (F_OP1) }, { F (F_IMM16_1) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxadds_u_d_direct_s1_direct ATTRIBUTE_UNUSED = {
+  32, 32, 0xff008700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_DIRECT) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxadds_u_d_immediate_2_s1_direct ATTRIBUTE_UNUSED = {
+  32, 32, 0xff008700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxadds_u_d_indirect_with_index_2_s1_direct ATTRIBUTE_UNUSED = {
+  32, 32, 0xff008700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxadds_u_d_indirect_with_offset_2_s1_direct ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc008700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxadds_u_d_indirect_2_s1_direct ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1f8700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxadds_u_d_indirect_with_post_increment_2_s1_direct ATTRIBUTE_UNUSED = {
+  32, 32, 0xff108700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxadds_u_d_indirect_with_pre_increment_2_s1_direct ATTRIBUTE_UNUSED = {
+  32, 32, 0xff108700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxadds_u_d_direct_s1_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xff008700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_DIRECT) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxadds_u_d_immediate_2_s1_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xff008700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxadds_u_d_indirect_with_index_2_s1_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xff008700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxadds_u_d_indirect_with_offset_2_s1_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc008700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxadds_u_d_indirect_2_s1_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1f8700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxadds_u_d_indirect_with_post_increment_2_s1_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xff108700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxadds_u_d_indirect_with_pre_increment_2_s1_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xff108700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxadds_u_d_direct_s1_indirect_with_index_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff008700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_DIRECT) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxadds_u_d_immediate_2_s1_indirect_with_index_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff008700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxadds_u_d_indirect_with_index_2_s1_indirect_with_index_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff008700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxadds_u_d_indirect_with_offset_2_s1_indirect_with_index_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc008700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxadds_u_d_indirect_2_s1_indirect_with_index_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1f8700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxadds_u_d_indirect_with_post_increment_2_s1_indirect_with_index_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff108700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxadds_u_d_indirect_with_pre_increment_2_s1_indirect_with_index_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff108700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxadds_u_d_direct_s1_indirect_with_offset_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff008400, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_DIRECT) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxadds_u_d_immediate_2_s1_indirect_with_offset_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff008400, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxadds_u_d_indirect_with_index_2_s1_indirect_with_offset_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff008400, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxadds_u_d_indirect_with_offset_2_s1_indirect_with_offset_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc008400, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxadds_u_d_indirect_2_s1_indirect_with_offset_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1f8400, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxadds_u_d_indirect_with_post_increment_2_s1_indirect_with_offset_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff108400, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxadds_u_d_indirect_with_pre_increment_2_s1_indirect_with_offset_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff108400, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxadds_u_d_direct_s1_indirect_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00871f, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_DIRECT) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxadds_u_d_immediate_2_s1_indirect_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00871f, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxadds_u_d_indirect_with_index_2_s1_indirect_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00871f, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxadds_u_d_indirect_with_offset_2_s1_indirect_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc00871f, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxadds_u_d_indirect_2_s1_indirect_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1f871f, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxadds_u_d_indirect_with_post_increment_2_s1_indirect_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10871f, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxadds_u_d_indirect_with_pre_increment_2_s1_indirect_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10871f, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxadds_u_d_direct_s1_indirect_with_post_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff008710, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_DIRECT) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxadds_u_d_immediate_2_s1_indirect_with_post_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff008710, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxadds_u_d_indirect_with_index_2_s1_indirect_with_post_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff008710, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxadds_u_d_indirect_with_offset_2_s1_indirect_with_post_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc008710, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxadds_u_d_indirect_2_s1_indirect_with_post_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1f8710, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxadds_u_d_indirect_with_post_increment_2_s1_indirect_with_post_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff108710, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxadds_u_d_indirect_with_pre_increment_2_s1_indirect_with_post_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff108710, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxadds_u_d_direct_s1_indirect_with_pre_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff008710, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_DIRECT) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxadds_u_d_immediate_2_s1_indirect_with_pre_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff008710, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxadds_u_d_indirect_with_index_2_s1_indirect_with_pre_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff008710, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxadds_u_d_indirect_with_offset_2_s1_indirect_with_pre_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc008710, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxadds_u_d_indirect_2_s1_indirect_with_pre_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1f8710, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxadds_u_d_indirect_with_post_increment_2_s1_indirect_with_pre_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff108710, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxadds_u_d_indirect_with_pre_increment_2_s1_indirect_with_pre_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff108710, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxhi_s_s1_direct ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe08700, { { F (F_OP1) }, { F (F_BIT26) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_B15) }, { F (F_S2) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxhi_s_s1_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe08700, { { F (F_OP1) }, { F (F_BIT26) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_B15) }, { F (F_S2) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxhi_s_s1_indirect_with_index_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe08700, { { F (F_OP1) }, { F (F_BIT26) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_B15) }, { F (F_S2) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxhi_s_s1_indirect_with_offset_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe08400, { { F (F_OP1) }, { F (F_BIT26) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_B15) }, { F (F_S2) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxhi_s_s1_indirect_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe0871f, { { F (F_OP1) }, { F (F_BIT26) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_B15) }, { F (F_S2) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxhi_s_s1_indirect_with_post_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe08710, { { F (F_OP1) }, { F (F_BIT26) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_B15) }, { F (F_S2) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxhi_s_s1_indirect_with_pre_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xffe08710, { { F (F_OP1) }, { F (F_BIT26) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_B15) }, { F (F_S2) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxvi_s_d_immediate_4_s1_direct ATTRIBUTE_UNUSED = {
+  32, 32, 0xff008700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxvi_s_d_indirect_with_index_4_s1_direct ATTRIBUTE_UNUSED = {
+  32, 32, 0xff008700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxvi_s_d_indirect_with_offset_4_s1_direct ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc008700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxvi_s_d_indirect_4_s1_direct ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1f8700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_direct ATTRIBUTE_UNUSED = {
+  32, 32, 0xff108700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_direct ATTRIBUTE_UNUSED = {
+  32, 32, 0xff108700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxvi_s_d_immediate_4_s1_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xff008700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxvi_s_d_indirect_with_index_4_s1_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xff008700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxvi_s_d_indirect_with_offset_4_s1_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc008700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxvi_s_d_indirect_4_s1_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1f8700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xff108700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xff108700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxvi_s_d_immediate_4_s1_indirect_with_index_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff008700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxvi_s_d_indirect_with_index_4_s1_indirect_with_index_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff008700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxvi_s_d_indirect_with_offset_4_s1_indirect_with_index_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc008700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxvi_s_d_indirect_4_s1_indirect_with_index_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1f8700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_indirect_with_index_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff108700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_indirect_with_index_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff108700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxvi_s_d_immediate_4_s1_indirect_with_offset_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff008400, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxvi_s_d_indirect_with_index_4_s1_indirect_with_offset_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff008400, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxvi_s_d_indirect_with_offset_4_s1_indirect_with_offset_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc008400, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxvi_s_d_indirect_4_s1_indirect_with_offset_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1f8400, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_indirect_with_offset_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff108400, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_indirect_with_offset_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff108400, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxvi_s_d_immediate_4_s1_indirect_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00871f, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxvi_s_d_indirect_with_index_4_s1_indirect_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00871f, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxvi_s_d_indirect_with_offset_4_s1_indirect_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc00871f, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxvi_s_d_indirect_4_s1_indirect_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1f871f, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_indirect_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10871f, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_indirect_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10871f, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxvi_s_d_immediate_4_s1_indirect_with_post_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff008710, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxvi_s_d_indirect_with_index_4_s1_indirect_with_post_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff008710, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxvi_s_d_indirect_with_offset_4_s1_indirect_with_post_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc008710, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxvi_s_d_indirect_4_s1_indirect_with_post_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1f8710, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_indirect_with_post_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff108710, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_indirect_with_post_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff108710, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxvi_s_d_immediate_4_s1_indirect_with_pre_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff008710, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxvi_s_d_indirect_with_index_4_s1_indirect_with_pre_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff008710, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxvi_s_d_indirect_with_offset_4_s1_indirect_with_pre_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc008710, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxvi_s_d_indirect_4_s1_indirect_with_pre_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1f8710, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_indirect_with_pre_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff108710, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_indirect_with_pre_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff108710, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_4) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxcnv_t_d_immediate_2_s1_indirect_with_index_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxcnv_t_d_indirect_with_index_2_s1_indirect_with_index_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxcnv_t_d_indirect_with_offset_2_s1_indirect_with_index_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc00ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxcnv_t_d_indirect_2_s1_indirect_with_index_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1fff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxcnv_t_d_indirect_with_post_increment_2_s1_indirect_with_index_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxcnv_t_d_indirect_with_pre_increment_2_s1_indirect_with_index_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxcnv_t_d_immediate_2_s1_indirect_with_offset_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00fc00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxcnv_t_d_indirect_with_index_2_s1_indirect_with_offset_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00fc00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxcnv_t_d_indirect_with_offset_2_s1_indirect_with_offset_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc00fc00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxcnv_t_d_indirect_2_s1_indirect_with_offset_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1ffc00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxcnv_t_d_indirect_with_post_increment_2_s1_indirect_with_offset_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10fc00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxcnv_t_d_indirect_with_pre_increment_2_s1_indirect_with_offset_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10fc00, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxcnv_t_d_immediate_2_s1_indirect_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff1f, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxcnv_t_d_indirect_with_index_2_s1_indirect_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff1f, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxcnv_t_d_indirect_with_offset_2_s1_indirect_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc00ff1f, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxcnv_t_d_indirect_2_s1_indirect_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1fff1f, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxcnv_t_d_indirect_with_post_increment_2_s1_indirect_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff1f, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxcnv_t_d_indirect_with_pre_increment_2_s1_indirect_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff1f, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxcnv_t_d_immediate_2_s1_indirect_with_post_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxcnv_t_d_indirect_with_index_2_s1_indirect_with_post_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxcnv_t_d_indirect_with_offset_2_s1_indirect_with_post_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc00ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxcnv_t_d_indirect_2_s1_indirect_with_post_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1fff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxcnv_t_d_indirect_with_post_increment_2_s1_indirect_with_post_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxcnv_t_d_indirect_with_pre_increment_2_s1_indirect_with_post_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxcnv_t_d_immediate_2_s1_indirect_with_pre_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxcnv_t_d_indirect_with_index_2_s1_indirect_with_pre_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxcnv_t_d_indirect_with_offset_2_s1_indirect_with_pre_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc00ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxcnv_t_d_indirect_2_s1_indirect_with_pre_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1fff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxcnv_t_d_indirect_with_post_increment_2_s1_indirect_with_pre_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_pxcnv_t_d_indirect_with_pre_increment_2_s1_indirect_with_pre_increment_4 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10ff10, { { F (F_OP1) }, { F (F_OP2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_4) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_1_d_immediate_1_s1_direct ATTRIBUTE_UNUSED = {
+  32, 32, 0xff008700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_1_d_indirect_with_index_1_s1_direct ATTRIBUTE_UNUSED = {
+  32, 32, 0xff008700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_1_d_indirect_with_offset_1_s1_direct ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc008700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_1) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_1_d_indirect_1_s1_direct ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1f8700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_1) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_1_d_indirect_with_post_increment_1_s1_direct ATTRIBUTE_UNUSED = {
+  32, 32, 0xff108700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_1) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_1_d_indirect_with_pre_increment_1_s1_direct ATTRIBUTE_UNUSED = {
+  32, 32, 0xff108700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_1) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_DIRECT) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_1_d_immediate_1_s1_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xff008700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_1_d_indirect_with_index_1_s1_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xff008700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_1_d_indirect_with_offset_1_s1_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc008700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_1) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_1_d_indirect_1_s1_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1f8700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_1) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_1_d_indirect_with_post_increment_1_s1_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xff108700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_1) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_1_d_indirect_with_pre_increment_1_s1_immediate ATTRIBUTE_UNUSED = {
+  32, 32, 0xff108700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_1) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_IMM8) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_1_d_direct_s1_indirect_with_index_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff008700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_DIRECT) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_1_d_immediate_1_s1_indirect_with_index_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff008700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_1_d_indirect_with_index_1_s1_indirect_with_index_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff008700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_1_d_indirect_with_offset_1_s1_indirect_with_index_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc008700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_1) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_1_d_indirect_1_s1_indirect_with_index_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1f8700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_1) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_1_d_indirect_with_post_increment_1_s1_indirect_with_index_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff108700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_1) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_1_d_indirect_with_pre_increment_1_s1_indirect_with_index_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff108700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_1) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_1_d_direct_s1_indirect_with_offset_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff008400, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_DIRECT) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_1_d_immediate_1_s1_indirect_with_offset_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff008400, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_1_d_indirect_with_index_1_s1_indirect_with_offset_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff008400, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_1_d_indirect_with_offset_1_s1_indirect_with_offset_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc008400, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_1) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_1_d_indirect_1_s1_indirect_with_offset_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1f8400, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_1) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_1_d_indirect_with_post_increment_1_s1_indirect_with_offset_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff108400, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_1) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_1_d_indirect_with_pre_increment_1_s1_indirect_with_offset_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff108400, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_1) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_1_d_direct_s1_indirect_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00871f, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_DIRECT) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_1_d_immediate_1_s1_indirect_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00871f, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_1_d_indirect_with_index_1_s1_indirect_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00871f, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_1_d_indirect_with_offset_1_s1_indirect_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc00871f, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_1) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_1_d_indirect_1_s1_indirect_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1f871f, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_1) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_1_d_indirect_with_post_increment_1_s1_indirect_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10871f, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_1) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_1_d_indirect_with_pre_increment_1_s1_indirect_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10871f, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_1) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_1_d_direct_s1_indirect_with_post_increment_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff008710, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_DIRECT) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_1_d_immediate_1_s1_indirect_with_post_increment_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff008710, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_1_d_indirect_with_index_1_s1_indirect_with_post_increment_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff008710, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_1_d_indirect_with_offset_1_s1_indirect_with_post_increment_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc008710, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_1) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_1_d_indirect_1_s1_indirect_with_post_increment_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1f8710, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_1) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_1_d_indirect_with_post_increment_1_s1_indirect_with_post_increment_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff108710, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_1) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_1_d_indirect_with_pre_increment_1_s1_indirect_with_post_increment_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff108710, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_1) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_1_d_direct_s1_indirect_with_pre_increment_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff008710, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_DIRECT) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_1_d_immediate_1_s1_indirect_with_pre_increment_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff008710, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_1_d_indirect_with_index_1_s1_indirect_with_pre_increment_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff008710, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_1_d_indirect_with_offset_1_s1_indirect_with_pre_increment_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc008710, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_1) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_1_d_indirect_1_s1_indirect_with_pre_increment_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1f8710, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_1) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_1_d_indirect_with_post_increment_1_s1_indirect_with_pre_increment_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff108710, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_1) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_1_d_indirect_with_pre_increment_1_s1_indirect_with_pre_increment_1 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff108710, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_1) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_1) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_2_d_direct_s1_indirect_with_index_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff008700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_DIRECT) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_2_d_immediate_2_s1_indirect_with_index_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff008700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_2_d_indirect_with_index_2_s1_indirect_with_index_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff008700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_2_d_indirect_with_offset_2_s1_indirect_with_index_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc008700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_2_d_indirect_2_s1_indirect_with_index_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1f8700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_2_d_indirect_with_post_increment_2_s1_indirect_with_index_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff108700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_2_d_indirect_with_pre_increment_2_s1_indirect_with_index_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff108700, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_R) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_2_d_direct_s1_indirect_with_offset_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff008400, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_DIRECT) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_2_d_immediate_2_s1_indirect_with_offset_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff008400, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_2_d_indirect_with_index_2_s1_indirect_with_offset_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff008400, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_2_d_indirect_with_offset_2_s1_indirect_with_offset_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc008400, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_2_d_indirect_2_s1_indirect_with_offset_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1f8400, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_2_d_indirect_with_post_increment_2_s1_indirect_with_offset_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff108400, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_2_d_indirect_with_pre_increment_2_s1_indirect_with_offset_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff108400, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_2_d_direct_s1_indirect_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00871f, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_DIRECT) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_2_d_immediate_2_s1_indirect_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00871f, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_2_d_indirect_with_index_2_s1_indirect_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff00871f, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_2_d_indirect_with_offset_2_s1_indirect_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc00871f, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_2_d_indirect_2_s1_indirect_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1f871f, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_2_d_indirect_with_post_increment_2_s1_indirect_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10871f, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_2_d_indirect_with_pre_increment_2_s1_indirect_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff10871f, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_IMM7_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_2_d_direct_s1_indirect_with_post_increment_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff008710, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_DIRECT) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_2_d_immediate_2_s1_indirect_with_post_increment_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff008710, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_2_d_indirect_with_index_2_s1_indirect_with_post_increment_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff008710, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_2_d_indirect_with_offset_2_s1_indirect_with_post_increment_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc008710, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_2_d_indirect_2_s1_indirect_with_post_increment_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1f8710, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_2_d_indirect_with_post_increment_2_s1_indirect_with_post_increment_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff108710, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_2_d_indirect_with_pre_increment_2_s1_indirect_with_post_increment_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff108710, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_2_d_direct_s1_indirect_with_pre_increment_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff008710, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_DIRECT) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_2_d_immediate_2_s1_indirect_with_pre_increment_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff008710, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_IMM8) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_2_d_indirect_with_index_2_s1_indirect_with_pre_increment_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff008710, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_R) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_2_d_indirect_with_offset_2_s1_indirect_with_pre_increment_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfc008710, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_2_d_indirect_2_s1_indirect_with_pre_increment_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff1f8710, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_IMM7_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_2_d_indirect_with_post_increment_2_s1_indirect_with_pre_increment_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff108710, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_sub_2_d_indirect_with_pre_increment_2_s1_indirect_with_pre_increment_2 ATTRIBUTE_UNUSED = {
+  32, 32, 0xff108710, { { F (F_OP1) }, { F (F_B15) }, { F (F_S2) }, { F (F_D_BIT10) }, { F (F_D_TYPE) }, { F (F_D_M) }, { F (F_D_I4_2) }, { F (F_D_AN) }, { F (F_S1_BIT10) }, { F (F_S1_TYPE) }, { F (F_S1_M) }, { F (F_S1_I4_2) }, { F (F_S1_AN) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_moveai_v5 ATTRIBUTE_UNUSED = {
+  32, 32, 0xf0000000, { { F (F_OPMOVEAI) }, { F (F_AN) }, { F (F_IMM25) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_moveaih ATTRIBUTE_UNUSED = {
+  32, 32, 0xf8000000, { { F (F_OP1) }, { F (F_AN) }, { F (F_IMM24) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_nop_insn ATTRIBUTE_UNUSED = {
+  32, 32, 0xffffffff, { { F (F_OP1) }, { F (F_D) }, { F (F_IMM16_2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_jmpcc ATTRIBUTE_UNUSED = {
+  32, 32, 0xf8000000, { { F (F_OP1) }, { F (F_COND) }, { F (F_P) }, { F (F_C) }, { F (F_O21) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_call ATTRIBUTE_UNUSED = {
+  32, 32, 0xf8000000, { { F (F_OP1) }, { F (F_AN) }, { F (F_O24) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_calli ATTRIBUTE_UNUSED = {
+  32, 32, 0xf800f800, { { F (F_OP1) }, { F (F_AN) }, { F (F_BIT5) }, { F (F_AM) }, { F (F_O16) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_suspend ATTRIBUTE_UNUSED = {
+  32, 32, 0xffffffff, { { F (F_OP1) }, { F (F_D) }, { F (F_OP2) }, { F (F_S1) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_clracc ATTRIBUTE_UNUSED = {
+  32, 32, 0xfffeffff, { { F (F_OP1) }, { F (F_BIT26) }, { F (F_OPEXT) }, { F (F_DSP_C) }, { F (F_DSP_T) }, { F (F_DSP_S2_SEL) }, { F (F_DSP_R) }, { F (F_DSP_DESTA) }, { F (F_BIT5) }, { F (F_S1) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_unused_00_11 ATTRIBUTE_UNUSED = {
+  32, 32, 0xf800f800, { { F (F_OP1) }, { F (F_D) }, { F (F_OP2) }, { F (F_S1) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_unused_02_04 ATTRIBUTE_UNUSED = {
+  32, 32, 0xfbe00000, { { F (F_OP1) }, { F (F_BIT26) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_OP2) }, { F (F_S1) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_unused_01 ATTRIBUTE_UNUSED = {
+  32, 32, 0xf8000000, { { F (F_OP1) }, { F (F_D) }, { F (F_OP2) }, { F (F_S1) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_unused_DSP_0c ATTRIBUTE_UNUSED = {
+  32, 32, 0xfbe00000, { { F (F_OP1) }, { F (F_BIT26) }, { F (F_OPEXT) }, { F (F_DN) }, { F (F_OP2) }, { F (F_S1) }, { 0 } }
+};
+
+#undef F
+
+#if defined (__STDC__) || defined (ALMOST_STDC) || defined (HAVE_STRINGIZE)
+#define A(a) (1 << CGEN_INSN_##a)
+#else
+#define A(a) (1 << CGEN_INSN_/**/a)
+#endif
+#if defined (__STDC__) || defined (ALMOST_STDC) || defined (HAVE_STRINGIZE)
+#define OPERAND(op) UBICOM32_OPERAND_##op
+#else
+#define OPERAND(op) UBICOM32_OPERAND_/**/op
+#endif
+#define MNEM CGEN_SYNTAX_MNEMONIC /* syntax value for mnemonic */
+#define OP(field) CGEN_SYNTAX_MAKE_FIELD (OPERAND (field))
+
+/* The instruction table.  */
+
+static const CGEN_OPCODE ubicom32_cgen_insn_opcode_table[MAX_INSNS] =
+{
+  /* Special null first entry.
+     A `num' value of zero is thus invalid.
+     Also, the special `invalid' insn resides here.  */
+  { { 0, 0, 0, 0 }, {{0}}, 0, {0}},
+/* msub.2${dsp-c}${dsp-t-addsub} ${dsp-destA},${s1-direct-addr},${dsp-S2-data-reg-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T_ADDSUB), ' ', OP (DSP_DESTA), ',', OP (S1_DIRECT_ADDR), ',', OP (DSP_S2_DATA_REG_ADDSUB), 0 } },
+    & ifmt_dsp_msub_2_s1_direct_dsp_src2_data_reg_addsub2, { 0x36600100 }
+  },
+/* msub.2${dsp-c}${dsp-t-addsub} ${dsp-destA},#${s1-imm8},${dsp-S2-data-reg-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T_ADDSUB), ' ', OP (DSP_DESTA), ',', '#', OP (S1_IMM8), ',', OP (DSP_S2_DATA_REG_ADDSUB), 0 } },
+    & ifmt_dsp_msub_2_s1_immediate_dsp_src2_data_reg_addsub2, { 0x36600000 }
+  },
+/* msub.2${dsp-c}${dsp-t-addsub} ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-data-reg-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T_ADDSUB), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (DSP_S2_DATA_REG_ADDSUB), 0 } },
+    & ifmt_dsp_msub_2_s1_indirect_with_index_2_dsp_src2_data_reg_addsub2, { 0x36600300 }
+  },
+/* msub.2${dsp-c}${dsp-t-addsub} ${dsp-destA},${s1-imm7-2}(${s1-An}),${dsp-S2-data-reg-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T_ADDSUB), ' ', OP (DSP_DESTA), ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (DSP_S2_DATA_REG_ADDSUB), 0 } },
+    & ifmt_dsp_msub_2_s1_indirect_with_offset_2_dsp_src2_data_reg_addsub2, { 0x36600400 }
+  },
+/* msub.2${dsp-c}${dsp-t-addsub} ${dsp-destA},(${s1-An}),${dsp-S2-data-reg-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T_ADDSUB), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', ',', OP (DSP_S2_DATA_REG_ADDSUB), 0 } },
+    & ifmt_dsp_msub_2_s1_indirect_2_dsp_src2_data_reg_addsub2, { 0x36600400 }
+  },
+/* msub.2${dsp-c}${dsp-t-addsub} ${dsp-destA},(${s1-An})${s1-i4-2}++,${dsp-S2-data-reg-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T_ADDSUB), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (DSP_S2_DATA_REG_ADDSUB), 0 } },
+    & ifmt_dsp_msub_2_s1_indirect_with_post_increment_2_dsp_src2_data_reg_addsub2, { 0x36600200 }
+  },
+/* msub.2${dsp-c}${dsp-t-addsub} ${dsp-destA},${s1-i4-2}(${s1-An})++,${dsp-S2-data-reg-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T_ADDSUB), ' ', OP (DSP_DESTA), ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (DSP_S2_DATA_REG_ADDSUB), 0 } },
+    & ifmt_dsp_msub_2_s1_indirect_with_pre_increment_2_dsp_src2_data_reg_addsub2, { 0x36600210 }
+  },
+/* msub.2${dsp-c}${dsp-t-addsub} ${dsp-destA},${s1-direct-addr},${dsp-S2-acc-reg-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T_ADDSUB), ' ', OP (DSP_DESTA), ',', OP (S1_DIRECT_ADDR), ',', OP (DSP_S2_ACC_REG_ADDSUB), 0 } },
+    & ifmt_dsp_msub_2_s1_direct_dsp_src2_reg_acc_reg_addsub, { 0x36640100 }
+  },
+/* msub.2${dsp-c}${dsp-t-addsub} ${dsp-destA},#${s1-imm8},${dsp-S2-acc-reg-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T_ADDSUB), ' ', OP (DSP_DESTA), ',', '#', OP (S1_IMM8), ',', OP (DSP_S2_ACC_REG_ADDSUB), 0 } },
+    & ifmt_dsp_msub_2_s1_immediate_dsp_src2_reg_acc_reg_addsub, { 0x36640000 }
+  },
+/* msub.2${dsp-c}${dsp-t-addsub} ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-acc-reg-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T_ADDSUB), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (DSP_S2_ACC_REG_ADDSUB), 0 } },
+    & ifmt_dsp_msub_2_s1_indirect_with_index_2_dsp_src2_reg_acc_reg_addsub, { 0x36640300 }
+  },
+/* msub.2${dsp-c}${dsp-t-addsub} ${dsp-destA},${s1-imm7-2}(${s1-An}),${dsp-S2-acc-reg-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T_ADDSUB), ' ', OP (DSP_DESTA), ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (DSP_S2_ACC_REG_ADDSUB), 0 } },
+    & ifmt_dsp_msub_2_s1_indirect_with_offset_2_dsp_src2_reg_acc_reg_addsub, { 0x36640400 }
+  },
+/* msub.2${dsp-c}${dsp-t-addsub} ${dsp-destA},(${s1-An}),${dsp-S2-acc-reg-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T_ADDSUB), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', ',', OP (DSP_S2_ACC_REG_ADDSUB), 0 } },
+    & ifmt_dsp_msub_2_s1_indirect_2_dsp_src2_reg_acc_reg_addsub, { 0x36640400 }
+  },
+/* msub.2${dsp-c}${dsp-t-addsub} ${dsp-destA},(${s1-An})${s1-i4-2}++,${dsp-S2-acc-reg-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T_ADDSUB), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (DSP_S2_ACC_REG_ADDSUB), 0 } },
+    & ifmt_dsp_msub_2_s1_indirect_with_post_increment_2_dsp_src2_reg_acc_reg_addsub, { 0x36640200 }
+  },
+/* msub.2${dsp-c}${dsp-t-addsub} ${dsp-destA},${s1-i4-2}(${s1-An})++,${dsp-S2-acc-reg-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T_ADDSUB), ' ', OP (DSP_DESTA), ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (DSP_S2_ACC_REG_ADDSUB), 0 } },
+    & ifmt_dsp_msub_2_s1_indirect_with_pre_increment_2_dsp_src2_reg_acc_reg_addsub, { 0x36640210 }
+  },
+/* msub.2${dsp-c}${dsp-t-addsub} ${dsp-destA},${s1-direct-addr},#${bit5-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T_ADDSUB), ' ', OP (DSP_DESTA), ',', OP (S1_DIRECT_ADDR), ',', '#', OP (BIT5_ADDSUB), 0 } },
+    & ifmt_dsp_msub_2_s1_direct_dsp_imm_bit5_addsub2, { 0x32600100 }
+  },
+/* msub.2${dsp-c}${dsp-t-addsub} ${dsp-destA},#${s1-imm8},#${bit5-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T_ADDSUB), ' ', OP (DSP_DESTA), ',', '#', OP (S1_IMM8), ',', '#', OP (BIT5_ADDSUB), 0 } },
+    & ifmt_dsp_msub_2_s1_immediate_dsp_imm_bit5_addsub2, { 0x32600000 }
+  },
+/* msub.2${dsp-c}${dsp-t-addsub} ${dsp-destA},(${s1-An},${s1-r}),#${bit5-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T_ADDSUB), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', '#', OP (BIT5_ADDSUB), 0 } },
+    & ifmt_dsp_msub_2_s1_indirect_with_index_2_dsp_imm_bit5_addsub2, { 0x32600300 }
+  },
+/* msub.2${dsp-c}${dsp-t-addsub} ${dsp-destA},${s1-imm7-2}(${s1-An}),#${bit5-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T_ADDSUB), ' ', OP (DSP_DESTA), ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', '#', OP (BIT5_ADDSUB), 0 } },
+    & ifmt_dsp_msub_2_s1_indirect_with_offset_2_dsp_imm_bit5_addsub2, { 0x32600400 }
+  },
+/* msub.2${dsp-c}${dsp-t-addsub} ${dsp-destA},(${s1-An}),#${bit5-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T_ADDSUB), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', ',', '#', OP (BIT5_ADDSUB), 0 } },
+    & ifmt_dsp_msub_2_s1_indirect_2_dsp_imm_bit5_addsub2, { 0x32600400 }
+  },
+/* msub.2${dsp-c}${dsp-t-addsub} ${dsp-destA},(${s1-An})${s1-i4-2}++,#${bit5-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T_ADDSUB), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', '#', OP (BIT5_ADDSUB), 0 } },
+    & ifmt_dsp_msub_2_s1_indirect_with_post_increment_2_dsp_imm_bit5_addsub2, { 0x32600200 }
+  },
+/* msub.2${dsp-c}${dsp-t-addsub} ${dsp-destA},${s1-i4-2}(${s1-An})++,#${bit5-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T_ADDSUB), ' ', OP (DSP_DESTA), ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', '#', OP (BIT5_ADDSUB), 0 } },
+    & ifmt_dsp_msub_2_s1_indirect_with_pre_increment_2_dsp_imm_bit5_addsub2, { 0x32600210 }
+  },
+/* msub.4${dsp-c} ${dsp-destA},${s1-direct-addr},${dsp-S2-data-reg-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), ' ', OP (DSP_DESTA), ',', OP (S1_DIRECT_ADDR), ',', OP (DSP_S2_DATA_REG_ADDSUB), 0 } },
+    & ifmt_dsp_msub_4_s1_direct_dsp_src2_data_reg_addsub, { 0x36400100 }
+  },
+/* msub.4${dsp-c} ${dsp-destA},#${s1-imm8},${dsp-S2-data-reg-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), ' ', OP (DSP_DESTA), ',', '#', OP (S1_IMM8), ',', OP (DSP_S2_DATA_REG_ADDSUB), 0 } },
+    & ifmt_dsp_msub_4_s1_immediate_dsp_src2_data_reg_addsub, { 0x36400000 }
+  },
+/* msub.4${dsp-c} ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-data-reg-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (DSP_S2_DATA_REG_ADDSUB), 0 } },
+    & ifmt_dsp_msub_4_s1_indirect_with_index_4_dsp_src2_data_reg_addsub, { 0x36400300 }
+  },
+/* msub.4${dsp-c} ${dsp-destA},${s1-imm7-4}(${s1-An}),${dsp-S2-data-reg-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), ' ', OP (DSP_DESTA), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (DSP_S2_DATA_REG_ADDSUB), 0 } },
+    & ifmt_dsp_msub_4_s1_indirect_with_offset_4_dsp_src2_data_reg_addsub, { 0x36400400 }
+  },
+/* msub.4${dsp-c} ${dsp-destA},(${s1-An}),${dsp-S2-data-reg-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', ',', OP (DSP_S2_DATA_REG_ADDSUB), 0 } },
+    & ifmt_dsp_msub_4_s1_indirect_4_dsp_src2_data_reg_addsub, { 0x36400400 }
+  },
+/* msub.4${dsp-c} ${dsp-destA},(${s1-An})${s1-i4-4}++,${dsp-S2-data-reg-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (DSP_S2_DATA_REG_ADDSUB), 0 } },
+    & ifmt_dsp_msub_4_s1_indirect_with_post_increment_4_dsp_src2_data_reg_addsub, { 0x36400200 }
+  },
+/* msub.4${dsp-c} ${dsp-destA},${s1-i4-4}(${s1-An})++,${dsp-S2-data-reg-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), ' ', OP (DSP_DESTA), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (DSP_S2_DATA_REG_ADDSUB), 0 } },
+    & ifmt_dsp_msub_4_s1_indirect_with_pre_increment_4_dsp_src2_data_reg_addsub, { 0x36400210 }
+  },
+/* msub.4${dsp-c} ${dsp-destA},${s1-direct-addr},${dsp-S2-acc-reg-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), ' ', OP (DSP_DESTA), ',', OP (S1_DIRECT_ADDR), ',', OP (DSP_S2_ACC_REG_ADDSUB), 0 } },
+    & ifmt_dsp_msub_4_s1_direct_dsp_src2_reg_acc_reg_addsub, { 0x36440100 }
+  },
+/* msub.4${dsp-c} ${dsp-destA},#${s1-imm8},${dsp-S2-acc-reg-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), ' ', OP (DSP_DESTA), ',', '#', OP (S1_IMM8), ',', OP (DSP_S2_ACC_REG_ADDSUB), 0 } },
+    & ifmt_dsp_msub_4_s1_immediate_dsp_src2_reg_acc_reg_addsub, { 0x36440000 }
+  },
+/* msub.4${dsp-c} ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-acc-reg-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (DSP_S2_ACC_REG_ADDSUB), 0 } },
+    & ifmt_dsp_msub_4_s1_indirect_with_index_4_dsp_src2_reg_acc_reg_addsub, { 0x36440300 }
+  },
+/* msub.4${dsp-c} ${dsp-destA},${s1-imm7-4}(${s1-An}),${dsp-S2-acc-reg-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), ' ', OP (DSP_DESTA), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (DSP_S2_ACC_REG_ADDSUB), 0 } },
+    & ifmt_dsp_msub_4_s1_indirect_with_offset_4_dsp_src2_reg_acc_reg_addsub, { 0x36440400 }
+  },
+/* msub.4${dsp-c} ${dsp-destA},(${s1-An}),${dsp-S2-acc-reg-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', ',', OP (DSP_S2_ACC_REG_ADDSUB), 0 } },
+    & ifmt_dsp_msub_4_s1_indirect_4_dsp_src2_reg_acc_reg_addsub, { 0x36440400 }
+  },
+/* msub.4${dsp-c} ${dsp-destA},(${s1-An})${s1-i4-4}++,${dsp-S2-acc-reg-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (DSP_S2_ACC_REG_ADDSUB), 0 } },
+    & ifmt_dsp_msub_4_s1_indirect_with_post_increment_4_dsp_src2_reg_acc_reg_addsub, { 0x36440200 }
+  },
+/* msub.4${dsp-c} ${dsp-destA},${s1-i4-4}(${s1-An})++,${dsp-S2-acc-reg-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), ' ', OP (DSP_DESTA), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (DSP_S2_ACC_REG_ADDSUB), 0 } },
+    & ifmt_dsp_msub_4_s1_indirect_with_pre_increment_4_dsp_src2_reg_acc_reg_addsub, { 0x36440210 }
+  },
+/* msub.4${dsp-c} ${dsp-destA},${s1-direct-addr},#${bit5-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), ' ', OP (DSP_DESTA), ',', OP (S1_DIRECT_ADDR), ',', '#', OP (BIT5_ADDSUB), 0 } },
+    & ifmt_dsp_msub_4_s1_direct_dsp_imm_bit5_addsub, { 0x32400100 }
+  },
+/* msub.4${dsp-c} ${dsp-destA},#${s1-imm8},#${bit5-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), ' ', OP (DSP_DESTA), ',', '#', OP (S1_IMM8), ',', '#', OP (BIT5_ADDSUB), 0 } },
+    & ifmt_dsp_msub_4_s1_immediate_dsp_imm_bit5_addsub, { 0x32400000 }
+  },
+/* msub.4${dsp-c} ${dsp-destA},(${s1-An},${s1-r}),#${bit5-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', '#', OP (BIT5_ADDSUB), 0 } },
+    & ifmt_dsp_msub_4_s1_indirect_with_index_4_dsp_imm_bit5_addsub, { 0x32400300 }
+  },
+/* msub.4${dsp-c} ${dsp-destA},${s1-imm7-4}(${s1-An}),#${bit5-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), ' ', OP (DSP_DESTA), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', '#', OP (BIT5_ADDSUB), 0 } },
+    & ifmt_dsp_msub_4_s1_indirect_with_offset_4_dsp_imm_bit5_addsub, { 0x32400400 }
+  },
+/* msub.4${dsp-c} ${dsp-destA},(${s1-An}),#${bit5-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', ',', '#', OP (BIT5_ADDSUB), 0 } },
+    & ifmt_dsp_msub_4_s1_indirect_4_dsp_imm_bit5_addsub, { 0x32400400 }
+  },
+/* msub.4${dsp-c} ${dsp-destA},(${s1-An})${s1-i4-4}++,#${bit5-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', '#', OP (BIT5_ADDSUB), 0 } },
+    & ifmt_dsp_msub_4_s1_indirect_with_post_increment_4_dsp_imm_bit5_addsub, { 0x32400200 }
+  },
+/* msub.4${dsp-c} ${dsp-destA},${s1-i4-4}(${s1-An})++,#${bit5-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), ' ', OP (DSP_DESTA), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', '#', OP (BIT5_ADDSUB), 0 } },
+    & ifmt_dsp_msub_4_s1_indirect_with_pre_increment_4_dsp_imm_bit5_addsub, { 0x32400210 }
+  },
+/* madd.2${dsp-c}${dsp-t-addsub} ${dsp-destA},${s1-direct-addr},${dsp-S2-data-reg-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T_ADDSUB), ' ', OP (DSP_DESTA), ',', OP (S1_DIRECT_ADDR), ',', OP (DSP_S2_DATA_REG_ADDSUB), 0 } },
+    & ifmt_dsp_msub_2_s1_direct_dsp_src2_data_reg_addsub2, { 0x36200100 }
+  },
+/* madd.2${dsp-c}${dsp-t-addsub} ${dsp-destA},#${s1-imm8},${dsp-S2-data-reg-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T_ADDSUB), ' ', OP (DSP_DESTA), ',', '#', OP (S1_IMM8), ',', OP (DSP_S2_DATA_REG_ADDSUB), 0 } },
+    & ifmt_dsp_msub_2_s1_immediate_dsp_src2_data_reg_addsub2, { 0x36200000 }
+  },
+/* madd.2${dsp-c}${dsp-t-addsub} ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-data-reg-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T_ADDSUB), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (DSP_S2_DATA_REG_ADDSUB), 0 } },
+    & ifmt_dsp_msub_2_s1_indirect_with_index_2_dsp_src2_data_reg_addsub2, { 0x36200300 }
+  },
+/* madd.2${dsp-c}${dsp-t-addsub} ${dsp-destA},${s1-imm7-2}(${s1-An}),${dsp-S2-data-reg-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T_ADDSUB), ' ', OP (DSP_DESTA), ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (DSP_S2_DATA_REG_ADDSUB), 0 } },
+    & ifmt_dsp_msub_2_s1_indirect_with_offset_2_dsp_src2_data_reg_addsub2, { 0x36200400 }
+  },
+/* madd.2${dsp-c}${dsp-t-addsub} ${dsp-destA},(${s1-An}),${dsp-S2-data-reg-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T_ADDSUB), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', ',', OP (DSP_S2_DATA_REG_ADDSUB), 0 } },
+    & ifmt_dsp_msub_2_s1_indirect_2_dsp_src2_data_reg_addsub2, { 0x36200400 }
+  },
+/* madd.2${dsp-c}${dsp-t-addsub} ${dsp-destA},(${s1-An})${s1-i4-2}++,${dsp-S2-data-reg-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T_ADDSUB), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (DSP_S2_DATA_REG_ADDSUB), 0 } },
+    & ifmt_dsp_msub_2_s1_indirect_with_post_increment_2_dsp_src2_data_reg_addsub2, { 0x36200200 }
+  },
+/* madd.2${dsp-c}${dsp-t-addsub} ${dsp-destA},${s1-i4-2}(${s1-An})++,${dsp-S2-data-reg-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T_ADDSUB), ' ', OP (DSP_DESTA), ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (DSP_S2_DATA_REG_ADDSUB), 0 } },
+    & ifmt_dsp_msub_2_s1_indirect_with_pre_increment_2_dsp_src2_data_reg_addsub2, { 0x36200210 }
+  },
+/* madd.2${dsp-c}${dsp-t-addsub} ${dsp-destA},${s1-direct-addr},${dsp-S2-acc-reg-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T_ADDSUB), ' ', OP (DSP_DESTA), ',', OP (S1_DIRECT_ADDR), ',', OP (DSP_S2_ACC_REG_ADDSUB), 0 } },
+    & ifmt_dsp_msub_2_s1_direct_dsp_src2_reg_acc_reg_addsub, { 0x36240100 }
+  },
+/* madd.2${dsp-c}${dsp-t-addsub} ${dsp-destA},#${s1-imm8},${dsp-S2-acc-reg-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T_ADDSUB), ' ', OP (DSP_DESTA), ',', '#', OP (S1_IMM8), ',', OP (DSP_S2_ACC_REG_ADDSUB), 0 } },
+    & ifmt_dsp_msub_2_s1_immediate_dsp_src2_reg_acc_reg_addsub, { 0x36240000 }
+  },
+/* madd.2${dsp-c}${dsp-t-addsub} ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-acc-reg-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T_ADDSUB), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (DSP_S2_ACC_REG_ADDSUB), 0 } },
+    & ifmt_dsp_msub_2_s1_indirect_with_index_2_dsp_src2_reg_acc_reg_addsub, { 0x36240300 }
+  },
+/* madd.2${dsp-c}${dsp-t-addsub} ${dsp-destA},${s1-imm7-2}(${s1-An}),${dsp-S2-acc-reg-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T_ADDSUB), ' ', OP (DSP_DESTA), ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (DSP_S2_ACC_REG_ADDSUB), 0 } },
+    & ifmt_dsp_msub_2_s1_indirect_with_offset_2_dsp_src2_reg_acc_reg_addsub, { 0x36240400 }
+  },
+/* madd.2${dsp-c}${dsp-t-addsub} ${dsp-destA},(${s1-An}),${dsp-S2-acc-reg-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T_ADDSUB), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', ',', OP (DSP_S2_ACC_REG_ADDSUB), 0 } },
+    & ifmt_dsp_msub_2_s1_indirect_2_dsp_src2_reg_acc_reg_addsub, { 0x36240400 }
+  },
+/* madd.2${dsp-c}${dsp-t-addsub} ${dsp-destA},(${s1-An})${s1-i4-2}++,${dsp-S2-acc-reg-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T_ADDSUB), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (DSP_S2_ACC_REG_ADDSUB), 0 } },
+    & ifmt_dsp_msub_2_s1_indirect_with_post_increment_2_dsp_src2_reg_acc_reg_addsub, { 0x36240200 }
+  },
+/* madd.2${dsp-c}${dsp-t-addsub} ${dsp-destA},${s1-i4-2}(${s1-An})++,${dsp-S2-acc-reg-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T_ADDSUB), ' ', OP (DSP_DESTA), ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (DSP_S2_ACC_REG_ADDSUB), 0 } },
+    & ifmt_dsp_msub_2_s1_indirect_with_pre_increment_2_dsp_src2_reg_acc_reg_addsub, { 0x36240210 }
+  },
+/* madd.2${dsp-c}${dsp-t-addsub} ${dsp-destA},${s1-direct-addr},#${bit5-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T_ADDSUB), ' ', OP (DSP_DESTA), ',', OP (S1_DIRECT_ADDR), ',', '#', OP (BIT5_ADDSUB), 0 } },
+    & ifmt_dsp_msub_2_s1_direct_dsp_imm_bit5_addsub2, { 0x32200100 }
+  },
+/* madd.2${dsp-c}${dsp-t-addsub} ${dsp-destA},#${s1-imm8},#${bit5-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T_ADDSUB), ' ', OP (DSP_DESTA), ',', '#', OP (S1_IMM8), ',', '#', OP (BIT5_ADDSUB), 0 } },
+    & ifmt_dsp_msub_2_s1_immediate_dsp_imm_bit5_addsub2, { 0x32200000 }
+  },
+/* madd.2${dsp-c}${dsp-t-addsub} ${dsp-destA},(${s1-An},${s1-r}),#${bit5-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T_ADDSUB), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', '#', OP (BIT5_ADDSUB), 0 } },
+    & ifmt_dsp_msub_2_s1_indirect_with_index_2_dsp_imm_bit5_addsub2, { 0x32200300 }
+  },
+/* madd.2${dsp-c}${dsp-t-addsub} ${dsp-destA},${s1-imm7-2}(${s1-An}),#${bit5-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T_ADDSUB), ' ', OP (DSP_DESTA), ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', '#', OP (BIT5_ADDSUB), 0 } },
+    & ifmt_dsp_msub_2_s1_indirect_with_offset_2_dsp_imm_bit5_addsub2, { 0x32200400 }
+  },
+/* madd.2${dsp-c}${dsp-t-addsub} ${dsp-destA},(${s1-An}),#${bit5-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T_ADDSUB), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', ',', '#', OP (BIT5_ADDSUB), 0 } },
+    & ifmt_dsp_msub_2_s1_indirect_2_dsp_imm_bit5_addsub2, { 0x32200400 }
+  },
+/* madd.2${dsp-c}${dsp-t-addsub} ${dsp-destA},(${s1-An})${s1-i4-2}++,#${bit5-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T_ADDSUB), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', '#', OP (BIT5_ADDSUB), 0 } },
+    & ifmt_dsp_msub_2_s1_indirect_with_post_increment_2_dsp_imm_bit5_addsub2, { 0x32200200 }
+  },
+/* madd.2${dsp-c}${dsp-t-addsub} ${dsp-destA},${s1-i4-2}(${s1-An})++,#${bit5-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T_ADDSUB), ' ', OP (DSP_DESTA), ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', '#', OP (BIT5_ADDSUB), 0 } },
+    & ifmt_dsp_msub_2_s1_indirect_with_pre_increment_2_dsp_imm_bit5_addsub2, { 0x32200210 }
+  },
+/* madd.4${dsp-c} ${dsp-destA},${s1-direct-addr},${dsp-S2-data-reg-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), ' ', OP (DSP_DESTA), ',', OP (S1_DIRECT_ADDR), ',', OP (DSP_S2_DATA_REG_ADDSUB), 0 } },
+    & ifmt_dsp_msub_4_s1_direct_dsp_src2_data_reg_addsub, { 0x36000100 }
+  },
+/* madd.4${dsp-c} ${dsp-destA},#${s1-imm8},${dsp-S2-data-reg-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), ' ', OP (DSP_DESTA), ',', '#', OP (S1_IMM8), ',', OP (DSP_S2_DATA_REG_ADDSUB), 0 } },
+    & ifmt_dsp_msub_4_s1_immediate_dsp_src2_data_reg_addsub, { 0x36000000 }
+  },
+/* madd.4${dsp-c} ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-data-reg-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (DSP_S2_DATA_REG_ADDSUB), 0 } },
+    & ifmt_dsp_msub_4_s1_indirect_with_index_4_dsp_src2_data_reg_addsub, { 0x36000300 }
+  },
+/* madd.4${dsp-c} ${dsp-destA},${s1-imm7-4}(${s1-An}),${dsp-S2-data-reg-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), ' ', OP (DSP_DESTA), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (DSP_S2_DATA_REG_ADDSUB), 0 } },
+    & ifmt_dsp_msub_4_s1_indirect_with_offset_4_dsp_src2_data_reg_addsub, { 0x36000400 }
+  },
+/* madd.4${dsp-c} ${dsp-destA},(${s1-An}),${dsp-S2-data-reg-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', ',', OP (DSP_S2_DATA_REG_ADDSUB), 0 } },
+    & ifmt_dsp_msub_4_s1_indirect_4_dsp_src2_data_reg_addsub, { 0x36000400 }
+  },
+/* madd.4${dsp-c} ${dsp-destA},(${s1-An})${s1-i4-4}++,${dsp-S2-data-reg-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (DSP_S2_DATA_REG_ADDSUB), 0 } },
+    & ifmt_dsp_msub_4_s1_indirect_with_post_increment_4_dsp_src2_data_reg_addsub, { 0x36000200 }
+  },
+/* madd.4${dsp-c} ${dsp-destA},${s1-i4-4}(${s1-An})++,${dsp-S2-data-reg-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), ' ', OP (DSP_DESTA), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (DSP_S2_DATA_REG_ADDSUB), 0 } },
+    & ifmt_dsp_msub_4_s1_indirect_with_pre_increment_4_dsp_src2_data_reg_addsub, { 0x36000210 }
+  },
+/* madd.4${dsp-c} ${dsp-destA},${s1-direct-addr},${dsp-S2-acc-reg-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), ' ', OP (DSP_DESTA), ',', OP (S1_DIRECT_ADDR), ',', OP (DSP_S2_ACC_REG_ADDSUB), 0 } },
+    & ifmt_dsp_msub_4_s1_direct_dsp_src2_reg_acc_reg_addsub, { 0x36040100 }
+  },
+/* madd.4${dsp-c} ${dsp-destA},#${s1-imm8},${dsp-S2-acc-reg-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), ' ', OP (DSP_DESTA), ',', '#', OP (S1_IMM8), ',', OP (DSP_S2_ACC_REG_ADDSUB), 0 } },
+    & ifmt_dsp_msub_4_s1_immediate_dsp_src2_reg_acc_reg_addsub, { 0x36040000 }
+  },
+/* madd.4${dsp-c} ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-acc-reg-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (DSP_S2_ACC_REG_ADDSUB), 0 } },
+    & ifmt_dsp_msub_4_s1_indirect_with_index_4_dsp_src2_reg_acc_reg_addsub, { 0x36040300 }
+  },
+/* madd.4${dsp-c} ${dsp-destA},${s1-imm7-4}(${s1-An}),${dsp-S2-acc-reg-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), ' ', OP (DSP_DESTA), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (DSP_S2_ACC_REG_ADDSUB), 0 } },
+    & ifmt_dsp_msub_4_s1_indirect_with_offset_4_dsp_src2_reg_acc_reg_addsub, { 0x36040400 }
+  },
+/* madd.4${dsp-c} ${dsp-destA},(${s1-An}),${dsp-S2-acc-reg-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', ',', OP (DSP_S2_ACC_REG_ADDSUB), 0 } },
+    & ifmt_dsp_msub_4_s1_indirect_4_dsp_src2_reg_acc_reg_addsub, { 0x36040400 }
+  },
+/* madd.4${dsp-c} ${dsp-destA},(${s1-An})${s1-i4-4}++,${dsp-S2-acc-reg-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (DSP_S2_ACC_REG_ADDSUB), 0 } },
+    & ifmt_dsp_msub_4_s1_indirect_with_post_increment_4_dsp_src2_reg_acc_reg_addsub, { 0x36040200 }
+  },
+/* madd.4${dsp-c} ${dsp-destA},${s1-i4-4}(${s1-An})++,${dsp-S2-acc-reg-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), ' ', OP (DSP_DESTA), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (DSP_S2_ACC_REG_ADDSUB), 0 } },
+    & ifmt_dsp_msub_4_s1_indirect_with_pre_increment_4_dsp_src2_reg_acc_reg_addsub, { 0x36040210 }
+  },
+/* madd.4${dsp-c} ${dsp-destA},${s1-direct-addr},#${bit5-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), ' ', OP (DSP_DESTA), ',', OP (S1_DIRECT_ADDR), ',', '#', OP (BIT5_ADDSUB), 0 } },
+    & ifmt_dsp_msub_4_s1_direct_dsp_imm_bit5_addsub, { 0x32000100 }
+  },
+/* madd.4${dsp-c} ${dsp-destA},#${s1-imm8},#${bit5-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), ' ', OP (DSP_DESTA), ',', '#', OP (S1_IMM8), ',', '#', OP (BIT5_ADDSUB), 0 } },
+    & ifmt_dsp_msub_4_s1_immediate_dsp_imm_bit5_addsub, { 0x32000000 }
+  },
+/* madd.4${dsp-c} ${dsp-destA},(${s1-An},${s1-r}),#${bit5-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', '#', OP (BIT5_ADDSUB), 0 } },
+    & ifmt_dsp_msub_4_s1_indirect_with_index_4_dsp_imm_bit5_addsub, { 0x32000300 }
+  },
+/* madd.4${dsp-c} ${dsp-destA},${s1-imm7-4}(${s1-An}),#${bit5-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), ' ', OP (DSP_DESTA), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', '#', OP (BIT5_ADDSUB), 0 } },
+    & ifmt_dsp_msub_4_s1_indirect_with_offset_4_dsp_imm_bit5_addsub, { 0x32000400 }
+  },
+/* madd.4${dsp-c} ${dsp-destA},(${s1-An}),#${bit5-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', ',', '#', OP (BIT5_ADDSUB), 0 } },
+    & ifmt_dsp_msub_4_s1_indirect_4_dsp_imm_bit5_addsub, { 0x32000400 }
+  },
+/* madd.4${dsp-c} ${dsp-destA},(${s1-An})${s1-i4-4}++,#${bit5-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', '#', OP (BIT5_ADDSUB), 0 } },
+    & ifmt_dsp_msub_4_s1_indirect_with_post_increment_4_dsp_imm_bit5_addsub, { 0x32000200 }
+  },
+/* madd.4${dsp-c} ${dsp-destA},${s1-i4-4}(${s1-An})++,#${bit5-addsub} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), ' ', OP (DSP_DESTA), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', '#', OP (BIT5_ADDSUB), 0 } },
+    & ifmt_dsp_msub_4_s1_indirect_with_pre_increment_4_dsp_imm_bit5_addsub, { 0x32000210 }
+  },
+/* msuf${dsp-c}${dsp-t} ${dsp-destA},${s1-direct-addr},${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_DIRECT_ADDR), ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_msuf_s1_direct_dsp_src2_data_reg, { 0x35200100 }
+  },
+/* msuf${dsp-c}${dsp-t} ${dsp-destA},#${s1-imm8},${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '#', OP (S1_IMM8), ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_msuf_s1_immediate_dsp_src2_data_reg, { 0x35200000 }
+  },
+/* msuf${dsp-c}${dsp-t} ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_index_2_dsp_src2_data_reg, { 0x35200300 }
+  },
+/* msuf${dsp-c}${dsp-t} ${dsp-destA},${s1-imm7-2}(${s1-An}),${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_offset_2_dsp_src2_data_reg, { 0x35200400 }
+  },
+/* msuf${dsp-c}${dsp-t} ${dsp-destA},(${s1-An}),${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_2_dsp_src2_data_reg, { 0x35200400 }
+  },
+/* msuf${dsp-c}${dsp-t} ${dsp-destA},(${s1-An})${s1-i4-2}++,${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_post_increment_2_dsp_src2_data_reg, { 0x35200200 }
+  },
+/* msuf${dsp-c}${dsp-t} ${dsp-destA},${s1-i4-2}(${s1-An})++,${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_pre_increment_2_dsp_src2_data_reg, { 0x35200210 }
+  },
+/* msuf${dsp-c}${dsp-t} ${dsp-destA},${s1-direct-addr},${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_DIRECT_ADDR), ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_msuf_s1_direct_dsp_src2_reg_acc_reg_mul, { 0x35240100 }
+  },
+/* msuf${dsp-c}${dsp-t} ${dsp-destA},#${s1-imm8},${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '#', OP (S1_IMM8), ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_msuf_s1_immediate_dsp_src2_reg_acc_reg_mul, { 0x35240000 }
+  },
+/* msuf${dsp-c}${dsp-t} ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_index_2_dsp_src2_reg_acc_reg_mul, { 0x35240300 }
+  },
+/* msuf${dsp-c}${dsp-t} ${dsp-destA},${s1-imm7-2}(${s1-An}),${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_offset_2_dsp_src2_reg_acc_reg_mul, { 0x35240400 }
+  },
+/* msuf${dsp-c}${dsp-t} ${dsp-destA},(${s1-An}),${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_2_dsp_src2_reg_acc_reg_mul, { 0x35240400 }
+  },
+/* msuf${dsp-c}${dsp-t} ${dsp-destA},(${s1-An})${s1-i4-2}++,${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_post_increment_2_dsp_src2_reg_acc_reg_mul, { 0x35240200 }
+  },
+/* msuf${dsp-c}${dsp-t} ${dsp-destA},${s1-i4-2}(${s1-An})++,${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_pre_increment_2_dsp_src2_reg_acc_reg_mul, { 0x35240210 }
+  },
+/* msuf${dsp-c}${dsp-t} ${dsp-destA},${s1-direct-addr},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_DIRECT_ADDR), ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_msuf_s1_direct_dsp_imm_bit5, { 0x31200100 }
+  },
+/* msuf${dsp-c}${dsp-t} ${dsp-destA},#${s1-imm8},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '#', OP (S1_IMM8), ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_msuf_s1_immediate_dsp_imm_bit5, { 0x31200000 }
+  },
+/* msuf${dsp-c}${dsp-t} ${dsp-destA},(${s1-An},${s1-r}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_index_2_dsp_imm_bit5, { 0x31200300 }
+  },
+/* msuf${dsp-c}${dsp-t} ${dsp-destA},${s1-imm7-2}(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_offset_2_dsp_imm_bit5, { 0x31200400 }
+  },
+/* msuf${dsp-c}${dsp-t} ${dsp-destA},(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_2_dsp_imm_bit5, { 0x31200400 }
+  },
+/* msuf${dsp-c}${dsp-t} ${dsp-destA},(${s1-An})${s1-i4-2}++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_post_increment_2_dsp_imm_bit5, { 0x31200200 }
+  },
+/* msuf${dsp-c}${dsp-t} ${dsp-destA},${s1-i4-2}(${s1-An})++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_pre_increment_2_dsp_imm_bit5, { 0x31200210 }
+  },
+/* macus${dsp-c}${dsp-t} ${dsp-destA},${s1-direct-addr},${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_DIRECT_ADDR), ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_msuf_s1_direct_dsp_src2_data_reg, { 0x34e00100 }
+  },
+/* macus${dsp-c}${dsp-t} ${dsp-destA},#${s1-imm8},${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '#', OP (S1_IMM8), ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_msuf_s1_immediate_dsp_src2_data_reg, { 0x34e00000 }
+  },
+/* macus${dsp-c}${dsp-t} ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_index_2_dsp_src2_data_reg, { 0x34e00300 }
+  },
+/* macus${dsp-c}${dsp-t} ${dsp-destA},${s1-imm7-2}(${s1-An}),${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_offset_2_dsp_src2_data_reg, { 0x34e00400 }
+  },
+/* macus${dsp-c}${dsp-t} ${dsp-destA},(${s1-An}),${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_2_dsp_src2_data_reg, { 0x34e00400 }
+  },
+/* macus${dsp-c}${dsp-t} ${dsp-destA},(${s1-An})${s1-i4-2}++,${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_post_increment_2_dsp_src2_data_reg, { 0x34e00200 }
+  },
+/* macus${dsp-c}${dsp-t} ${dsp-destA},${s1-i4-2}(${s1-An})++,${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_pre_increment_2_dsp_src2_data_reg, { 0x34e00210 }
+  },
+/* macus${dsp-c}${dsp-t} ${dsp-destA},${s1-direct-addr},${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_DIRECT_ADDR), ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_msuf_s1_direct_dsp_src2_reg_acc_reg_mul, { 0x34e40100 }
+  },
+/* macus${dsp-c}${dsp-t} ${dsp-destA},#${s1-imm8},${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '#', OP (S1_IMM8), ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_msuf_s1_immediate_dsp_src2_reg_acc_reg_mul, { 0x34e40000 }
+  },
+/* macus${dsp-c}${dsp-t} ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_index_2_dsp_src2_reg_acc_reg_mul, { 0x34e40300 }
+  },
+/* macus${dsp-c}${dsp-t} ${dsp-destA},${s1-imm7-2}(${s1-An}),${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_offset_2_dsp_src2_reg_acc_reg_mul, { 0x34e40400 }
+  },
+/* macus${dsp-c}${dsp-t} ${dsp-destA},(${s1-An}),${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_2_dsp_src2_reg_acc_reg_mul, { 0x34e40400 }
+  },
+/* macus${dsp-c}${dsp-t} ${dsp-destA},(${s1-An})${s1-i4-2}++,${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_post_increment_2_dsp_src2_reg_acc_reg_mul, { 0x34e40200 }
+  },
+/* macus${dsp-c}${dsp-t} ${dsp-destA},${s1-i4-2}(${s1-An})++,${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_pre_increment_2_dsp_src2_reg_acc_reg_mul, { 0x34e40210 }
+  },
+/* macus${dsp-c}${dsp-t} ${dsp-destA},${s1-direct-addr},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_DIRECT_ADDR), ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_msuf_s1_direct_dsp_imm_bit5, { 0x30e00100 }
+  },
+/* macus${dsp-c}${dsp-t} ${dsp-destA},#${s1-imm8},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '#', OP (S1_IMM8), ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_msuf_s1_immediate_dsp_imm_bit5, { 0x30e00000 }
+  },
+/* macus${dsp-c}${dsp-t} ${dsp-destA},(${s1-An},${s1-r}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_index_2_dsp_imm_bit5, { 0x30e00300 }
+  },
+/* macus${dsp-c}${dsp-t} ${dsp-destA},${s1-imm7-2}(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_offset_2_dsp_imm_bit5, { 0x30e00400 }
+  },
+/* macus${dsp-c}${dsp-t} ${dsp-destA},(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_2_dsp_imm_bit5, { 0x30e00400 }
+  },
+/* macus${dsp-c}${dsp-t} ${dsp-destA},(${s1-An})${s1-i4-2}++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_post_increment_2_dsp_imm_bit5, { 0x30e00200 }
+  },
+/* macus${dsp-c}${dsp-t} ${dsp-destA},${s1-i4-2}(${s1-An})++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_pre_increment_2_dsp_imm_bit5, { 0x30e00210 }
+  },
+/* macf${dsp-c}${dsp-t} ${dsp-destA},${s1-direct-addr},${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_DIRECT_ADDR), ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_msuf_s1_direct_dsp_src2_data_reg, { 0x34a00100 }
+  },
+/* macf${dsp-c}${dsp-t} ${dsp-destA},#${s1-imm8},${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '#', OP (S1_IMM8), ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_msuf_s1_immediate_dsp_src2_data_reg, { 0x34a00000 }
+  },
+/* macf${dsp-c}${dsp-t} ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_index_2_dsp_src2_data_reg, { 0x34a00300 }
+  },
+/* macf${dsp-c}${dsp-t} ${dsp-destA},${s1-imm7-2}(${s1-An}),${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_offset_2_dsp_src2_data_reg, { 0x34a00400 }
+  },
+/* macf${dsp-c}${dsp-t} ${dsp-destA},(${s1-An}),${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_2_dsp_src2_data_reg, { 0x34a00400 }
+  },
+/* macf${dsp-c}${dsp-t} ${dsp-destA},(${s1-An})${s1-i4-2}++,${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_post_increment_2_dsp_src2_data_reg, { 0x34a00200 }
+  },
+/* macf${dsp-c}${dsp-t} ${dsp-destA},${s1-i4-2}(${s1-An})++,${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_pre_increment_2_dsp_src2_data_reg, { 0x34a00210 }
+  },
+/* macf${dsp-c}${dsp-t} ${dsp-destA},${s1-direct-addr},${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_DIRECT_ADDR), ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_msuf_s1_direct_dsp_src2_reg_acc_reg_mul, { 0x34a40100 }
+  },
+/* macf${dsp-c}${dsp-t} ${dsp-destA},#${s1-imm8},${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '#', OP (S1_IMM8), ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_msuf_s1_immediate_dsp_src2_reg_acc_reg_mul, { 0x34a40000 }
+  },
+/* macf${dsp-c}${dsp-t} ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_index_2_dsp_src2_reg_acc_reg_mul, { 0x34a40300 }
+  },
+/* macf${dsp-c}${dsp-t} ${dsp-destA},${s1-imm7-2}(${s1-An}),${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_offset_2_dsp_src2_reg_acc_reg_mul, { 0x34a40400 }
+  },
+/* macf${dsp-c}${dsp-t} ${dsp-destA},(${s1-An}),${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_2_dsp_src2_reg_acc_reg_mul, { 0x34a40400 }
+  },
+/* macf${dsp-c}${dsp-t} ${dsp-destA},(${s1-An})${s1-i4-2}++,${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_post_increment_2_dsp_src2_reg_acc_reg_mul, { 0x34a40200 }
+  },
+/* macf${dsp-c}${dsp-t} ${dsp-destA},${s1-i4-2}(${s1-An})++,${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_pre_increment_2_dsp_src2_reg_acc_reg_mul, { 0x34a40210 }
+  },
+/* macf${dsp-c}${dsp-t} ${dsp-destA},${s1-direct-addr},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_DIRECT_ADDR), ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_msuf_s1_direct_dsp_imm_bit5, { 0x30a00100 }
+  },
+/* macf${dsp-c}${dsp-t} ${dsp-destA},#${s1-imm8},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '#', OP (S1_IMM8), ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_msuf_s1_immediate_dsp_imm_bit5, { 0x30a00000 }
+  },
+/* macf${dsp-c}${dsp-t} ${dsp-destA},(${s1-An},${s1-r}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_index_2_dsp_imm_bit5, { 0x30a00300 }
+  },
+/* macf${dsp-c}${dsp-t} ${dsp-destA},${s1-imm7-2}(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_offset_2_dsp_imm_bit5, { 0x30a00400 }
+  },
+/* macf${dsp-c}${dsp-t} ${dsp-destA},(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_2_dsp_imm_bit5, { 0x30a00400 }
+  },
+/* macf${dsp-c}${dsp-t} ${dsp-destA},(${s1-An})${s1-i4-2}++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_post_increment_2_dsp_imm_bit5, { 0x30a00200 }
+  },
+/* macf${dsp-c}${dsp-t} ${dsp-destA},${s1-i4-2}(${s1-An})++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_pre_increment_2_dsp_imm_bit5, { 0x30a00210 }
+  },
+/* mulf${dsp-c}${dsp-t} ${dsp-destA},${s1-direct-addr},${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_DIRECT_ADDR), ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_msuf_s1_direct_dsp_src2_data_reg, { 0x34800100 }
+  },
+/* mulf${dsp-c}${dsp-t} ${dsp-destA},#${s1-imm8},${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '#', OP (S1_IMM8), ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_msuf_s1_immediate_dsp_src2_data_reg, { 0x34800000 }
+  },
+/* mulf${dsp-c}${dsp-t} ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_index_2_dsp_src2_data_reg, { 0x34800300 }
+  },
+/* mulf${dsp-c}${dsp-t} ${dsp-destA},${s1-imm7-2}(${s1-An}),${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_offset_2_dsp_src2_data_reg, { 0x34800400 }
+  },
+/* mulf${dsp-c}${dsp-t} ${dsp-destA},(${s1-An}),${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_2_dsp_src2_data_reg, { 0x34800400 }
+  },
+/* mulf${dsp-c}${dsp-t} ${dsp-destA},(${s1-An})${s1-i4-2}++,${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_post_increment_2_dsp_src2_data_reg, { 0x34800200 }
+  },
+/* mulf${dsp-c}${dsp-t} ${dsp-destA},${s1-i4-2}(${s1-An})++,${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_pre_increment_2_dsp_src2_data_reg, { 0x34800210 }
+  },
+/* mulf${dsp-c}${dsp-t} ${dsp-destA},${s1-direct-addr},${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_DIRECT_ADDR), ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_msuf_s1_direct_dsp_src2_reg_acc_reg_mul, { 0x34840100 }
+  },
+/* mulf${dsp-c}${dsp-t} ${dsp-destA},#${s1-imm8},${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '#', OP (S1_IMM8), ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_msuf_s1_immediate_dsp_src2_reg_acc_reg_mul, { 0x34840000 }
+  },
+/* mulf${dsp-c}${dsp-t} ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_index_2_dsp_src2_reg_acc_reg_mul, { 0x34840300 }
+  },
+/* mulf${dsp-c}${dsp-t} ${dsp-destA},${s1-imm7-2}(${s1-An}),${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_offset_2_dsp_src2_reg_acc_reg_mul, { 0x34840400 }
+  },
+/* mulf${dsp-c}${dsp-t} ${dsp-destA},(${s1-An}),${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_2_dsp_src2_reg_acc_reg_mul, { 0x34840400 }
+  },
+/* mulf${dsp-c}${dsp-t} ${dsp-destA},(${s1-An})${s1-i4-2}++,${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_post_increment_2_dsp_src2_reg_acc_reg_mul, { 0x34840200 }
+  },
+/* mulf${dsp-c}${dsp-t} ${dsp-destA},${s1-i4-2}(${s1-An})++,${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_pre_increment_2_dsp_src2_reg_acc_reg_mul, { 0x34840210 }
+  },
+/* mulf${dsp-c}${dsp-t} ${dsp-destA},${s1-direct-addr},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_DIRECT_ADDR), ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_msuf_s1_direct_dsp_imm_bit5, { 0x30800100 }
+  },
+/* mulf${dsp-c}${dsp-t} ${dsp-destA},#${s1-imm8},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '#', OP (S1_IMM8), ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_msuf_s1_immediate_dsp_imm_bit5, { 0x30800000 }
+  },
+/* mulf${dsp-c}${dsp-t} ${dsp-destA},(${s1-An},${s1-r}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_index_2_dsp_imm_bit5, { 0x30800300 }
+  },
+/* mulf${dsp-c}${dsp-t} ${dsp-destA},${s1-imm7-2}(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_offset_2_dsp_imm_bit5, { 0x30800400 }
+  },
+/* mulf${dsp-c}${dsp-t} ${dsp-destA},(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_2_dsp_imm_bit5, { 0x30800400 }
+  },
+/* mulf${dsp-c}${dsp-t} ${dsp-destA},(${s1-An})${s1-i4-2}++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_post_increment_2_dsp_imm_bit5, { 0x30800200 }
+  },
+/* mulf${dsp-c}${dsp-t} ${dsp-destA},${s1-i4-2}(${s1-An})++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_pre_increment_2_dsp_imm_bit5, { 0x30800210 }
+  },
+/* macu${dsp-c}${dsp-t} ${dsp-destA},${s1-direct-addr},${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_DIRECT_ADDR), ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_msuf_s1_direct_dsp_src2_data_reg, { 0x34600100 }
+  },
+/* macu${dsp-c}${dsp-t} ${dsp-destA},#${s1-imm8},${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '#', OP (S1_IMM8), ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_msuf_s1_immediate_dsp_src2_data_reg, { 0x34600000 }
+  },
+/* macu${dsp-c}${dsp-t} ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_index_2_dsp_src2_data_reg, { 0x34600300 }
+  },
+/* macu${dsp-c}${dsp-t} ${dsp-destA},${s1-imm7-2}(${s1-An}),${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_offset_2_dsp_src2_data_reg, { 0x34600400 }
+  },
+/* macu${dsp-c}${dsp-t} ${dsp-destA},(${s1-An}),${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_2_dsp_src2_data_reg, { 0x34600400 }
+  },
+/* macu${dsp-c}${dsp-t} ${dsp-destA},(${s1-An})${s1-i4-2}++,${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_post_increment_2_dsp_src2_data_reg, { 0x34600200 }
+  },
+/* macu${dsp-c}${dsp-t} ${dsp-destA},${s1-i4-2}(${s1-An})++,${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_pre_increment_2_dsp_src2_data_reg, { 0x34600210 }
+  },
+/* macu${dsp-c}${dsp-t} ${dsp-destA},${s1-direct-addr},${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_DIRECT_ADDR), ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_msuf_s1_direct_dsp_src2_reg_acc_reg_mul, { 0x34640100 }
+  },
+/* macu${dsp-c}${dsp-t} ${dsp-destA},#${s1-imm8},${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '#', OP (S1_IMM8), ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_msuf_s1_immediate_dsp_src2_reg_acc_reg_mul, { 0x34640000 }
+  },
+/* macu${dsp-c}${dsp-t} ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_index_2_dsp_src2_reg_acc_reg_mul, { 0x34640300 }
+  },
+/* macu${dsp-c}${dsp-t} ${dsp-destA},${s1-imm7-2}(${s1-An}),${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_offset_2_dsp_src2_reg_acc_reg_mul, { 0x34640400 }
+  },
+/* macu${dsp-c}${dsp-t} ${dsp-destA},(${s1-An}),${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_2_dsp_src2_reg_acc_reg_mul, { 0x34640400 }
+  },
+/* macu${dsp-c}${dsp-t} ${dsp-destA},(${s1-An})${s1-i4-2}++,${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_post_increment_2_dsp_src2_reg_acc_reg_mul, { 0x34640200 }
+  },
+/* macu${dsp-c}${dsp-t} ${dsp-destA},${s1-i4-2}(${s1-An})++,${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_pre_increment_2_dsp_src2_reg_acc_reg_mul, { 0x34640210 }
+  },
+/* macu${dsp-c}${dsp-t} ${dsp-destA},${s1-direct-addr},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_DIRECT_ADDR), ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_msuf_s1_direct_dsp_imm_bit5, { 0x30600100 }
+  },
+/* macu${dsp-c}${dsp-t} ${dsp-destA},#${s1-imm8},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '#', OP (S1_IMM8), ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_msuf_s1_immediate_dsp_imm_bit5, { 0x30600000 }
+  },
+/* macu${dsp-c}${dsp-t} ${dsp-destA},(${s1-An},${s1-r}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_index_2_dsp_imm_bit5, { 0x30600300 }
+  },
+/* macu${dsp-c}${dsp-t} ${dsp-destA},${s1-imm7-2}(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_offset_2_dsp_imm_bit5, { 0x30600400 }
+  },
+/* macu${dsp-c}${dsp-t} ${dsp-destA},(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_2_dsp_imm_bit5, { 0x30600400 }
+  },
+/* macu${dsp-c}${dsp-t} ${dsp-destA},(${s1-An})${s1-i4-2}++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_post_increment_2_dsp_imm_bit5, { 0x30600200 }
+  },
+/* macu${dsp-c}${dsp-t} ${dsp-destA},${s1-i4-2}(${s1-An})++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_pre_increment_2_dsp_imm_bit5, { 0x30600210 }
+  },
+/* macu.4 ${dsp-destA},${s1-direct-addr},${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', OP (S1_DIRECT_ADDR), ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_macu_4_s1_direct_dsp_src2_data_reg, { 0x35600100 }
+  },
+/* macu.4 ${dsp-destA},#${s1-imm8},${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', '#', OP (S1_IMM8), ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_macu_4_s1_immediate_dsp_src2_data_reg, { 0x35600000 }
+  },
+/* macu.4 ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_macu_4_s1_indirect_with_index_4_dsp_src2_data_reg, { 0x35600300 }
+  },
+/* macu.4 ${dsp-destA},${s1-imm7-4}(${s1-An}),${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_macu_4_s1_indirect_with_offset_4_dsp_src2_data_reg, { 0x35600400 }
+  },
+/* macu.4 ${dsp-destA},(${s1-An}),${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_macu_4_s1_indirect_4_dsp_src2_data_reg, { 0x35600400 }
+  },
+/* macu.4 ${dsp-destA},(${s1-An})${s1-i4-4}++,${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_macu_4_s1_indirect_with_post_increment_4_dsp_src2_data_reg, { 0x35600200 }
+  },
+/* macu.4 ${dsp-destA},${s1-i4-4}(${s1-An})++,${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_macu_4_s1_indirect_with_pre_increment_4_dsp_src2_data_reg, { 0x35600210 }
+  },
+/* macu.4 ${dsp-destA},${s1-direct-addr},${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', OP (S1_DIRECT_ADDR), ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_macu_4_s1_direct_dsp_src2_reg_acc_reg_mul, { 0x35640100 }
+  },
+/* macu.4 ${dsp-destA},#${s1-imm8},${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', '#', OP (S1_IMM8), ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_macu_4_s1_immediate_dsp_src2_reg_acc_reg_mul, { 0x35640000 }
+  },
+/* macu.4 ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_macu_4_s1_indirect_with_index_4_dsp_src2_reg_acc_reg_mul, { 0x35640300 }
+  },
+/* macu.4 ${dsp-destA},${s1-imm7-4}(${s1-An}),${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_macu_4_s1_indirect_with_offset_4_dsp_src2_reg_acc_reg_mul, { 0x35640400 }
+  },
+/* macu.4 ${dsp-destA},(${s1-An}),${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_macu_4_s1_indirect_4_dsp_src2_reg_acc_reg_mul, { 0x35640400 }
+  },
+/* macu.4 ${dsp-destA},(${s1-An})${s1-i4-4}++,${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_macu_4_s1_indirect_with_post_increment_4_dsp_src2_reg_acc_reg_mul, { 0x35640200 }
+  },
+/* macu.4 ${dsp-destA},${s1-i4-4}(${s1-An})++,${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_macu_4_s1_indirect_with_pre_increment_4_dsp_src2_reg_acc_reg_mul, { 0x35640210 }
+  },
+/* macu.4 ${dsp-destA},${s1-direct-addr},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', OP (S1_DIRECT_ADDR), ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_macu_4_s1_direct_dsp_imm_bit5, { 0x31600100 }
+  },
+/* macu.4 ${dsp-destA},#${s1-imm8},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', '#', OP (S1_IMM8), ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_macu_4_s1_immediate_dsp_imm_bit5, { 0x31600000 }
+  },
+/* macu.4 ${dsp-destA},(${s1-An},${s1-r}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_macu_4_s1_indirect_with_index_4_dsp_imm_bit5, { 0x31600300 }
+  },
+/* macu.4 ${dsp-destA},${s1-imm7-4}(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_macu_4_s1_indirect_with_offset_4_dsp_imm_bit5, { 0x31600400 }
+  },
+/* macu.4 ${dsp-destA},(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_macu_4_s1_indirect_4_dsp_imm_bit5, { 0x31600400 }
+  },
+/* macu.4 ${dsp-destA},(${s1-An})${s1-i4-4}++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_macu_4_s1_indirect_with_post_increment_4_dsp_imm_bit5, { 0x31600200 }
+  },
+/* macu.4 ${dsp-destA},${s1-i4-4}(${s1-An})++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_macu_4_s1_indirect_with_pre_increment_4_dsp_imm_bit5, { 0x31600210 }
+  },
+/* mulu.4 ${dsp-destA},${s1-direct-addr},${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', OP (S1_DIRECT_ADDR), ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_macu_4_s1_direct_dsp_src2_data_reg, { 0x35400100 }
+  },
+/* mulu.4 ${dsp-destA},#${s1-imm8},${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', '#', OP (S1_IMM8), ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_macu_4_s1_immediate_dsp_src2_data_reg, { 0x35400000 }
+  },
+/* mulu.4 ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_macu_4_s1_indirect_with_index_4_dsp_src2_data_reg, { 0x35400300 }
+  },
+/* mulu.4 ${dsp-destA},${s1-imm7-4}(${s1-An}),${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_macu_4_s1_indirect_with_offset_4_dsp_src2_data_reg, { 0x35400400 }
+  },
+/* mulu.4 ${dsp-destA},(${s1-An}),${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_macu_4_s1_indirect_4_dsp_src2_data_reg, { 0x35400400 }
+  },
+/* mulu.4 ${dsp-destA},(${s1-An})${s1-i4-4}++,${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_macu_4_s1_indirect_with_post_increment_4_dsp_src2_data_reg, { 0x35400200 }
+  },
+/* mulu.4 ${dsp-destA},${s1-i4-4}(${s1-An})++,${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_macu_4_s1_indirect_with_pre_increment_4_dsp_src2_data_reg, { 0x35400210 }
+  },
+/* mulu.4 ${dsp-destA},${s1-direct-addr},${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', OP (S1_DIRECT_ADDR), ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_macu_4_s1_direct_dsp_src2_reg_acc_reg_mul, { 0x35440100 }
+  },
+/* mulu.4 ${dsp-destA},#${s1-imm8},${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', '#', OP (S1_IMM8), ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_macu_4_s1_immediate_dsp_src2_reg_acc_reg_mul, { 0x35440000 }
+  },
+/* mulu.4 ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_macu_4_s1_indirect_with_index_4_dsp_src2_reg_acc_reg_mul, { 0x35440300 }
+  },
+/* mulu.4 ${dsp-destA},${s1-imm7-4}(${s1-An}),${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_macu_4_s1_indirect_with_offset_4_dsp_src2_reg_acc_reg_mul, { 0x35440400 }
+  },
+/* mulu.4 ${dsp-destA},(${s1-An}),${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_macu_4_s1_indirect_4_dsp_src2_reg_acc_reg_mul, { 0x35440400 }
+  },
+/* mulu.4 ${dsp-destA},(${s1-An})${s1-i4-4}++,${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_macu_4_s1_indirect_with_post_increment_4_dsp_src2_reg_acc_reg_mul, { 0x35440200 }
+  },
+/* mulu.4 ${dsp-destA},${s1-i4-4}(${s1-An})++,${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_macu_4_s1_indirect_with_pre_increment_4_dsp_src2_reg_acc_reg_mul, { 0x35440210 }
+  },
+/* mulu.4 ${dsp-destA},${s1-direct-addr},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', OP (S1_DIRECT_ADDR), ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_macu_4_s1_direct_dsp_imm_bit5, { 0x31400100 }
+  },
+/* mulu.4 ${dsp-destA},#${s1-imm8},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', '#', OP (S1_IMM8), ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_macu_4_s1_immediate_dsp_imm_bit5, { 0x31400000 }
+  },
+/* mulu.4 ${dsp-destA},(${s1-An},${s1-r}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_macu_4_s1_indirect_with_index_4_dsp_imm_bit5, { 0x31400300 }
+  },
+/* mulu.4 ${dsp-destA},${s1-imm7-4}(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_macu_4_s1_indirect_with_offset_4_dsp_imm_bit5, { 0x31400400 }
+  },
+/* mulu.4 ${dsp-destA},(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_macu_4_s1_indirect_4_dsp_imm_bit5, { 0x31400400 }
+  },
+/* mulu.4 ${dsp-destA},(${s1-An})${s1-i4-4}++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_macu_4_s1_indirect_with_post_increment_4_dsp_imm_bit5, { 0x31400200 }
+  },
+/* mulu.4 ${dsp-destA},${s1-i4-4}(${s1-An})++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_macu_4_s1_indirect_with_pre_increment_4_dsp_imm_bit5, { 0x31400210 }
+  },
+/* mulu${dsp-t} ${dsp-destA},${s1-direct-addr},${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_DIRECT_ADDR), ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_mulu_s1_direct_dsp_src2_data_reg, { 0x34400100 }
+  },
+/* mulu${dsp-t} ${dsp-destA},#${s1-imm8},${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_T), ' ', OP (DSP_DESTA), ',', '#', OP (S1_IMM8), ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_mulu_s1_immediate_dsp_src2_data_reg, { 0x34400000 }
+  },
+/* mulu${dsp-t} ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_mulu_s1_indirect_with_index_2_dsp_src2_data_reg, { 0x34400300 }
+  },
+/* mulu${dsp-t} ${dsp-destA},${s1-imm7-2}(${s1-An}),${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_mulu_s1_indirect_with_offset_2_dsp_src2_data_reg, { 0x34400400 }
+  },
+/* mulu${dsp-t} ${dsp-destA},(${s1-An}),${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_mulu_s1_indirect_2_dsp_src2_data_reg, { 0x34400400 }
+  },
+/* mulu${dsp-t} ${dsp-destA},(${s1-An})${s1-i4-2}++,${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_mulu_s1_indirect_with_post_increment_2_dsp_src2_data_reg, { 0x34400200 }
+  },
+/* mulu${dsp-t} ${dsp-destA},${s1-i4-2}(${s1-An})++,${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_mulu_s1_indirect_with_pre_increment_2_dsp_src2_data_reg, { 0x34400210 }
+  },
+/* mulu${dsp-t} ${dsp-destA},${s1-direct-addr},${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_DIRECT_ADDR), ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_mulu_s1_direct_dsp_src2_reg_acc_reg_mul, { 0x34440100 }
+  },
+/* mulu${dsp-t} ${dsp-destA},#${s1-imm8},${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_T), ' ', OP (DSP_DESTA), ',', '#', OP (S1_IMM8), ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_mulu_s1_immediate_dsp_src2_reg_acc_reg_mul, { 0x34440000 }
+  },
+/* mulu${dsp-t} ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_mulu_s1_indirect_with_index_2_dsp_src2_reg_acc_reg_mul, { 0x34440300 }
+  },
+/* mulu${dsp-t} ${dsp-destA},${s1-imm7-2}(${s1-An}),${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_mulu_s1_indirect_with_offset_2_dsp_src2_reg_acc_reg_mul, { 0x34440400 }
+  },
+/* mulu${dsp-t} ${dsp-destA},(${s1-An}),${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_mulu_s1_indirect_2_dsp_src2_reg_acc_reg_mul, { 0x34440400 }
+  },
+/* mulu${dsp-t} ${dsp-destA},(${s1-An})${s1-i4-2}++,${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_mulu_s1_indirect_with_post_increment_2_dsp_src2_reg_acc_reg_mul, { 0x34440200 }
+  },
+/* mulu${dsp-t} ${dsp-destA},${s1-i4-2}(${s1-An})++,${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_mulu_s1_indirect_with_pre_increment_2_dsp_src2_reg_acc_reg_mul, { 0x34440210 }
+  },
+/* mulu${dsp-t} ${dsp-destA},${s1-direct-addr},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_DIRECT_ADDR), ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_mulu_s1_direct_dsp_imm_bit5, { 0x30400100 }
+  },
+/* mulu${dsp-t} ${dsp-destA},#${s1-imm8},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_T), ' ', OP (DSP_DESTA), ',', '#', OP (S1_IMM8), ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_mulu_s1_immediate_dsp_imm_bit5, { 0x30400000 }
+  },
+/* mulu${dsp-t} ${dsp-destA},(${s1-An},${s1-r}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_mulu_s1_indirect_with_index_2_dsp_imm_bit5, { 0x30400300 }
+  },
+/* mulu${dsp-t} ${dsp-destA},${s1-imm7-2}(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_mulu_s1_indirect_with_offset_2_dsp_imm_bit5, { 0x30400400 }
+  },
+/* mulu${dsp-t} ${dsp-destA},(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_mulu_s1_indirect_2_dsp_imm_bit5, { 0x30400400 }
+  },
+/* mulu${dsp-t} ${dsp-destA},(${s1-An})${s1-i4-2}++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_mulu_s1_indirect_with_post_increment_2_dsp_imm_bit5, { 0x30400200 }
+  },
+/* mulu${dsp-t} ${dsp-destA},${s1-i4-2}(${s1-An})++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_mulu_s1_indirect_with_pre_increment_2_dsp_imm_bit5, { 0x30400210 }
+  },
+/* macs${dsp-c}${dsp-t} ${dsp-destA},${s1-direct-addr},${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_DIRECT_ADDR), ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_msuf_s1_direct_dsp_src2_data_reg, { 0x34200100 }
+  },
+/* macs${dsp-c}${dsp-t} ${dsp-destA},#${s1-imm8},${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '#', OP (S1_IMM8), ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_msuf_s1_immediate_dsp_src2_data_reg, { 0x34200000 }
+  },
+/* macs${dsp-c}${dsp-t} ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_index_2_dsp_src2_data_reg, { 0x34200300 }
+  },
+/* macs${dsp-c}${dsp-t} ${dsp-destA},${s1-imm7-2}(${s1-An}),${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_offset_2_dsp_src2_data_reg, { 0x34200400 }
+  },
+/* macs${dsp-c}${dsp-t} ${dsp-destA},(${s1-An}),${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_2_dsp_src2_data_reg, { 0x34200400 }
+  },
+/* macs${dsp-c}${dsp-t} ${dsp-destA},(${s1-An})${s1-i4-2}++,${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_post_increment_2_dsp_src2_data_reg, { 0x34200200 }
+  },
+/* macs${dsp-c}${dsp-t} ${dsp-destA},${s1-i4-2}(${s1-An})++,${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_pre_increment_2_dsp_src2_data_reg, { 0x34200210 }
+  },
+/* macs${dsp-c}${dsp-t} ${dsp-destA},${s1-direct-addr},${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_DIRECT_ADDR), ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_msuf_s1_direct_dsp_src2_reg_acc_reg_mul, { 0x34240100 }
+  },
+/* macs${dsp-c}${dsp-t} ${dsp-destA},#${s1-imm8},${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '#', OP (S1_IMM8), ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_msuf_s1_immediate_dsp_src2_reg_acc_reg_mul, { 0x34240000 }
+  },
+/* macs${dsp-c}${dsp-t} ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_index_2_dsp_src2_reg_acc_reg_mul, { 0x34240300 }
+  },
+/* macs${dsp-c}${dsp-t} ${dsp-destA},${s1-imm7-2}(${s1-An}),${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_offset_2_dsp_src2_reg_acc_reg_mul, { 0x34240400 }
+  },
+/* macs${dsp-c}${dsp-t} ${dsp-destA},(${s1-An}),${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_2_dsp_src2_reg_acc_reg_mul, { 0x34240400 }
+  },
+/* macs${dsp-c}${dsp-t} ${dsp-destA},(${s1-An})${s1-i4-2}++,${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_post_increment_2_dsp_src2_reg_acc_reg_mul, { 0x34240200 }
+  },
+/* macs${dsp-c}${dsp-t} ${dsp-destA},${s1-i4-2}(${s1-An})++,${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_pre_increment_2_dsp_src2_reg_acc_reg_mul, { 0x34240210 }
+  },
+/* macs${dsp-c}${dsp-t} ${dsp-destA},${s1-direct-addr},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_DIRECT_ADDR), ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_msuf_s1_direct_dsp_imm_bit5, { 0x30200100 }
+  },
+/* macs${dsp-c}${dsp-t} ${dsp-destA},#${s1-imm8},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '#', OP (S1_IMM8), ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_msuf_s1_immediate_dsp_imm_bit5, { 0x30200000 }
+  },
+/* macs${dsp-c}${dsp-t} ${dsp-destA},(${s1-An},${s1-r}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_index_2_dsp_imm_bit5, { 0x30200300 }
+  },
+/* macs${dsp-c}${dsp-t} ${dsp-destA},${s1-imm7-2}(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_offset_2_dsp_imm_bit5, { 0x30200400 }
+  },
+/* macs${dsp-c}${dsp-t} ${dsp-destA},(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_2_dsp_imm_bit5, { 0x30200400 }
+  },
+/* macs${dsp-c}${dsp-t} ${dsp-destA},(${s1-An})${s1-i4-2}++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_post_increment_2_dsp_imm_bit5, { 0x30200200 }
+  },
+/* macs${dsp-c}${dsp-t} ${dsp-destA},${s1-i4-2}(${s1-An})++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_C), OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_msuf_s1_indirect_with_pre_increment_2_dsp_imm_bit5, { 0x30200210 }
+  },
+/* macs.4 ${dsp-destA},${s1-direct-addr},${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', OP (S1_DIRECT_ADDR), ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_macu_4_s1_direct_dsp_src2_data_reg, { 0x34c00100 }
+  },
+/* macs.4 ${dsp-destA},#${s1-imm8},${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', '#', OP (S1_IMM8), ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_macu_4_s1_immediate_dsp_src2_data_reg, { 0x34c00000 }
+  },
+/* macs.4 ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_macu_4_s1_indirect_with_index_4_dsp_src2_data_reg, { 0x34c00300 }
+  },
+/* macs.4 ${dsp-destA},${s1-imm7-4}(${s1-An}),${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_macu_4_s1_indirect_with_offset_4_dsp_src2_data_reg, { 0x34c00400 }
+  },
+/* macs.4 ${dsp-destA},(${s1-An}),${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_macu_4_s1_indirect_4_dsp_src2_data_reg, { 0x34c00400 }
+  },
+/* macs.4 ${dsp-destA},(${s1-An})${s1-i4-4}++,${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_macu_4_s1_indirect_with_post_increment_4_dsp_src2_data_reg, { 0x34c00200 }
+  },
+/* macs.4 ${dsp-destA},${s1-i4-4}(${s1-An})++,${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_macu_4_s1_indirect_with_pre_increment_4_dsp_src2_data_reg, { 0x34c00210 }
+  },
+/* macs.4 ${dsp-destA},${s1-direct-addr},${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', OP (S1_DIRECT_ADDR), ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_macu_4_s1_direct_dsp_src2_reg_acc_reg_mul, { 0x34c40100 }
+  },
+/* macs.4 ${dsp-destA},#${s1-imm8},${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', '#', OP (S1_IMM8), ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_macu_4_s1_immediate_dsp_src2_reg_acc_reg_mul, { 0x34c40000 }
+  },
+/* macs.4 ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_macu_4_s1_indirect_with_index_4_dsp_src2_reg_acc_reg_mul, { 0x34c40300 }
+  },
+/* macs.4 ${dsp-destA},${s1-imm7-4}(${s1-An}),${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_macu_4_s1_indirect_with_offset_4_dsp_src2_reg_acc_reg_mul, { 0x34c40400 }
+  },
+/* macs.4 ${dsp-destA},(${s1-An}),${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_macu_4_s1_indirect_4_dsp_src2_reg_acc_reg_mul, { 0x34c40400 }
+  },
+/* macs.4 ${dsp-destA},(${s1-An})${s1-i4-4}++,${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_macu_4_s1_indirect_with_post_increment_4_dsp_src2_reg_acc_reg_mul, { 0x34c40200 }
+  },
+/* macs.4 ${dsp-destA},${s1-i4-4}(${s1-An})++,${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_macu_4_s1_indirect_with_pre_increment_4_dsp_src2_reg_acc_reg_mul, { 0x34c40210 }
+  },
+/* macs.4 ${dsp-destA},${s1-direct-addr},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', OP (S1_DIRECT_ADDR), ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_macu_4_s1_direct_dsp_imm_bit5, { 0x30c00100 }
+  },
+/* macs.4 ${dsp-destA},#${s1-imm8},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', '#', OP (S1_IMM8), ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_macu_4_s1_immediate_dsp_imm_bit5, { 0x30c00000 }
+  },
+/* macs.4 ${dsp-destA},(${s1-An},${s1-r}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_macu_4_s1_indirect_with_index_4_dsp_imm_bit5, { 0x30c00300 }
+  },
+/* macs.4 ${dsp-destA},${s1-imm7-4}(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_macu_4_s1_indirect_with_offset_4_dsp_imm_bit5, { 0x30c00400 }
+  },
+/* macs.4 ${dsp-destA},(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_macu_4_s1_indirect_4_dsp_imm_bit5, { 0x30c00400 }
+  },
+/* macs.4 ${dsp-destA},(${s1-An})${s1-i4-4}++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_macu_4_s1_indirect_with_post_increment_4_dsp_imm_bit5, { 0x30c00200 }
+  },
+/* macs.4 ${dsp-destA},${s1-i4-4}(${s1-An})++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_macu_4_s1_indirect_with_pre_increment_4_dsp_imm_bit5, { 0x30c00210 }
+  },
+/* muls.4 ${dsp-destA},${s1-direct-addr},${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', OP (S1_DIRECT_ADDR), ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_macu_4_s1_direct_dsp_src2_data_reg, { 0x35000100 }
+  },
+/* muls.4 ${dsp-destA},#${s1-imm8},${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', '#', OP (S1_IMM8), ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_macu_4_s1_immediate_dsp_src2_data_reg, { 0x35000000 }
+  },
+/* muls.4 ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_macu_4_s1_indirect_with_index_4_dsp_src2_data_reg, { 0x35000300 }
+  },
+/* muls.4 ${dsp-destA},${s1-imm7-4}(${s1-An}),${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_macu_4_s1_indirect_with_offset_4_dsp_src2_data_reg, { 0x35000400 }
+  },
+/* muls.4 ${dsp-destA},(${s1-An}),${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_macu_4_s1_indirect_4_dsp_src2_data_reg, { 0x35000400 }
+  },
+/* muls.4 ${dsp-destA},(${s1-An})${s1-i4-4}++,${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_macu_4_s1_indirect_with_post_increment_4_dsp_src2_data_reg, { 0x35000200 }
+  },
+/* muls.4 ${dsp-destA},${s1-i4-4}(${s1-An})++,${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_macu_4_s1_indirect_with_pre_increment_4_dsp_src2_data_reg, { 0x35000210 }
+  },
+/* muls.4 ${dsp-destA},${s1-direct-addr},${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', OP (S1_DIRECT_ADDR), ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_macu_4_s1_direct_dsp_src2_reg_acc_reg_mul, { 0x35040100 }
+  },
+/* muls.4 ${dsp-destA},#${s1-imm8},${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', '#', OP (S1_IMM8), ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_macu_4_s1_immediate_dsp_src2_reg_acc_reg_mul, { 0x35040000 }
+  },
+/* muls.4 ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_macu_4_s1_indirect_with_index_4_dsp_src2_reg_acc_reg_mul, { 0x35040300 }
+  },
+/* muls.4 ${dsp-destA},${s1-imm7-4}(${s1-An}),${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_macu_4_s1_indirect_with_offset_4_dsp_src2_reg_acc_reg_mul, { 0x35040400 }
+  },
+/* muls.4 ${dsp-destA},(${s1-An}),${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_macu_4_s1_indirect_4_dsp_src2_reg_acc_reg_mul, { 0x35040400 }
+  },
+/* muls.4 ${dsp-destA},(${s1-An})${s1-i4-4}++,${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_macu_4_s1_indirect_with_post_increment_4_dsp_src2_reg_acc_reg_mul, { 0x35040200 }
+  },
+/* muls.4 ${dsp-destA},${s1-i4-4}(${s1-An})++,${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_macu_4_s1_indirect_with_pre_increment_4_dsp_src2_reg_acc_reg_mul, { 0x35040210 }
+  },
+/* muls.4 ${dsp-destA},${s1-direct-addr},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', OP (S1_DIRECT_ADDR), ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_macu_4_s1_direct_dsp_imm_bit5, { 0x31000100 }
+  },
+/* muls.4 ${dsp-destA},#${s1-imm8},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', '#', OP (S1_IMM8), ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_macu_4_s1_immediate_dsp_imm_bit5, { 0x31000000 }
+  },
+/* muls.4 ${dsp-destA},(${s1-An},${s1-r}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_macu_4_s1_indirect_with_index_4_dsp_imm_bit5, { 0x31000300 }
+  },
+/* muls.4 ${dsp-destA},${s1-imm7-4}(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_macu_4_s1_indirect_with_offset_4_dsp_imm_bit5, { 0x31000400 }
+  },
+/* muls.4 ${dsp-destA},(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_macu_4_s1_indirect_4_dsp_imm_bit5, { 0x31000400 }
+  },
+/* muls.4 ${dsp-destA},(${s1-An})${s1-i4-4}++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_macu_4_s1_indirect_with_post_increment_4_dsp_imm_bit5, { 0x31000200 }
+  },
+/* muls.4 ${dsp-destA},${s1-i4-4}(${s1-An})++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_macu_4_s1_indirect_with_pre_increment_4_dsp_imm_bit5, { 0x31000210 }
+  },
+/* muls${dsp-t} ${dsp-destA},${s1-direct-addr},${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_DIRECT_ADDR), ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_mulu_s1_direct_dsp_src2_data_reg, { 0x34000100 }
+  },
+/* muls${dsp-t} ${dsp-destA},#${s1-imm8},${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_T), ' ', OP (DSP_DESTA), ',', '#', OP (S1_IMM8), ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_mulu_s1_immediate_dsp_src2_data_reg, { 0x34000000 }
+  },
+/* muls${dsp-t} ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_mulu_s1_indirect_with_index_2_dsp_src2_data_reg, { 0x34000300 }
+  },
+/* muls${dsp-t} ${dsp-destA},${s1-imm7-2}(${s1-An}),${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_mulu_s1_indirect_with_offset_2_dsp_src2_data_reg, { 0x34000400 }
+  },
+/* muls${dsp-t} ${dsp-destA},(${s1-An}),${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_mulu_s1_indirect_2_dsp_src2_data_reg, { 0x34000400 }
+  },
+/* muls${dsp-t} ${dsp-destA},(${s1-An})${s1-i4-2}++,${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_mulu_s1_indirect_with_post_increment_2_dsp_src2_data_reg, { 0x34000200 }
+  },
+/* muls${dsp-t} ${dsp-destA},${s1-i4-2}(${s1-An})++,${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_dsp_mulu_s1_indirect_with_pre_increment_2_dsp_src2_data_reg, { 0x34000210 }
+  },
+/* muls${dsp-t} ${dsp-destA},${s1-direct-addr},${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_DIRECT_ADDR), ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_mulu_s1_direct_dsp_src2_reg_acc_reg_mul, { 0x34040100 }
+  },
+/* muls${dsp-t} ${dsp-destA},#${s1-imm8},${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_T), ' ', OP (DSP_DESTA), ',', '#', OP (S1_IMM8), ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_mulu_s1_immediate_dsp_src2_reg_acc_reg_mul, { 0x34040000 }
+  },
+/* muls${dsp-t} ${dsp-destA},(${s1-An},${s1-r}),${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_mulu_s1_indirect_with_index_2_dsp_src2_reg_acc_reg_mul, { 0x34040300 }
+  },
+/* muls${dsp-t} ${dsp-destA},${s1-imm7-2}(${s1-An}),${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_mulu_s1_indirect_with_offset_2_dsp_src2_reg_acc_reg_mul, { 0x34040400 }
+  },
+/* muls${dsp-t} ${dsp-destA},(${s1-An}),${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_mulu_s1_indirect_2_dsp_src2_reg_acc_reg_mul, { 0x34040400 }
+  },
+/* muls${dsp-t} ${dsp-destA},(${s1-An})${s1-i4-2}++,${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_mulu_s1_indirect_with_post_increment_2_dsp_src2_reg_acc_reg_mul, { 0x34040200 }
+  },
+/* muls${dsp-t} ${dsp-destA},${s1-i4-2}(${s1-An})++,${dsp-S2-acc-reg-mul} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (DSP_S2_ACC_REG_MUL), 0 } },
+    & ifmt_dsp_mulu_s1_indirect_with_pre_increment_2_dsp_src2_reg_acc_reg_mul, { 0x34040210 }
+  },
+/* muls${dsp-t} ${dsp-destA},${s1-direct-addr},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_DIRECT_ADDR), ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_mulu_s1_direct_dsp_imm_bit5, { 0x30000100 }
+  },
+/* muls${dsp-t} ${dsp-destA},#${s1-imm8},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_T), ' ', OP (DSP_DESTA), ',', '#', OP (S1_IMM8), ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_mulu_s1_immediate_dsp_imm_bit5, { 0x30000000 }
+  },
+/* muls${dsp-t} ${dsp-destA},(${s1-An},${s1-r}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_mulu_s1_indirect_with_index_2_dsp_imm_bit5, { 0x30000300 }
+  },
+/* muls${dsp-t} ${dsp-destA},${s1-imm7-2}(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_mulu_s1_indirect_with_offset_2_dsp_imm_bit5, { 0x30000400 }
+  },
+/* muls${dsp-t} ${dsp-destA},(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_mulu_s1_indirect_2_dsp_imm_bit5, { 0x30000400 }
+  },
+/* muls${dsp-t} ${dsp-destA},(${s1-An})${s1-i4-2}++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_T), ' ', OP (DSP_DESTA), ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_mulu_s1_indirect_with_post_increment_2_dsp_imm_bit5, { 0x30000200 }
+  },
+/* muls${dsp-t} ${dsp-destA},${s1-i4-2}(${s1-An})++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (DSP_T), ' ', OP (DSP_DESTA), ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_dsp_mulu_s1_indirect_with_pre_increment_2_dsp_imm_bit5, { 0x30000210 }
+  },
+/* sysret ${d-direct-addr},${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_sysret_d_direct_s1_direct, { 0x1004100 }
+  },
+/* sysret #${d-imm8},${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_sysret_d_immediate_4_s1_direct, { 0x4100 }
+  },
+/* sysret (${d-An},${d-r}),${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_sysret_d_indirect_with_index_4_s1_direct, { 0x3004100 }
+  },
+/* sysret ${d-imm7-4}(${d-An}),${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_sysret_d_indirect_with_offset_4_s1_direct, { 0x4004100 }
+  },
+/* sysret (${d-An}),${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_sysret_d_indirect_4_s1_direct, { 0x4004100 }
+  },
+/* sysret (${d-An})${d-i4-4}++,${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_sysret_d_indirect_with_post_increment_4_s1_direct, { 0x2004100 }
+  },
+/* sysret ${d-i4-4}(${d-An})++,${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_sysret_d_indirect_with_pre_increment_4_s1_direct, { 0x2104100 }
+  },
+/* sysret ${d-direct-addr},#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_sysret_d_direct_s1_immediate, { 0x1004000 }
+  },
+/* sysret #${d-imm8},#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_sysret_d_immediate_4_s1_immediate, { 0x4000 }
+  },
+/* sysret (${d-An},${d-r}),#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_sysret_d_indirect_with_index_4_s1_immediate, { 0x3004000 }
+  },
+/* sysret ${d-imm7-4}(${d-An}),#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_sysret_d_indirect_with_offset_4_s1_immediate, { 0x4004000 }
+  },
+/* sysret (${d-An}),#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_sysret_d_indirect_4_s1_immediate, { 0x4004000 }
+  },
+/* sysret (${d-An})${d-i4-4}++,#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_sysret_d_indirect_with_post_increment_4_s1_immediate, { 0x2004000 }
+  },
+/* sysret ${d-i4-4}(${d-An})++,#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_sysret_d_indirect_with_pre_increment_4_s1_immediate, { 0x2104000 }
+  },
+/* sysret ${d-direct-addr},(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_sysret_d_direct_s1_indirect_with_index_4, { 0x1004300 }
+  },
+/* sysret #${d-imm8},(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_sysret_d_immediate_4_s1_indirect_with_index_4, { 0x4300 }
+  },
+/* sysret (${d-An},${d-r}),(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_index_4_s1_indirect_with_index_4, { 0x3004300 }
+  },
+/* sysret ${d-imm7-4}(${d-An}),(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_offset_4_s1_indirect_with_index_4, { 0x4004300 }
+  },
+/* sysret (${d-An}),(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_sysret_d_indirect_4_s1_indirect_with_index_4, { 0x4004300 }
+  },
+/* sysret (${d-An})${d-i4-4}++,(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_post_increment_4_s1_indirect_with_index_4, { 0x2004300 }
+  },
+/* sysret ${d-i4-4}(${d-An})++,(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_pre_increment_4_s1_indirect_with_index_4, { 0x2104300 }
+  },
+/* sysret ${d-direct-addr},${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_direct_s1_indirect_with_offset_4, { 0x1004400 }
+  },
+/* sysret #${d-imm8},${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_immediate_4_s1_indirect_with_offset_4, { 0x4400 }
+  },
+/* sysret (${d-An},${d-r}),${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_index_4_s1_indirect_with_offset_4, { 0x3004400 }
+  },
+/* sysret ${d-imm7-4}(${d-An}),${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_offset_4_s1_indirect_with_offset_4, { 0x4004400 }
+  },
+/* sysret (${d-An}),${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_4_s1_indirect_with_offset_4, { 0x4004400 }
+  },
+/* sysret (${d-An})${d-i4-4}++,${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_post_increment_4_s1_indirect_with_offset_4, { 0x2004400 }
+  },
+/* sysret ${d-i4-4}(${d-An})++,${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_pre_increment_4_s1_indirect_with_offset_4, { 0x2104400 }
+  },
+/* sysret ${d-direct-addr},(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_direct_s1_indirect_4, { 0x1004400 }
+  },
+/* sysret #${d-imm8},(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_immediate_4_s1_indirect_4, { 0x4400 }
+  },
+/* sysret (${d-An},${d-r}),(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_index_4_s1_indirect_4, { 0x3004400 }
+  },
+/* sysret ${d-imm7-4}(${d-An}),(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_offset_4_s1_indirect_4, { 0x4004400 }
+  },
+/* sysret (${d-An}),(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_4_s1_indirect_4, { 0x4004400 }
+  },
+/* sysret (${d-An})${d-i4-4}++,(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_post_increment_4_s1_indirect_4, { 0x2004400 }
+  },
+/* sysret ${d-i4-4}(${d-An})++,(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_pre_increment_4_s1_indirect_4, { 0x2104400 }
+  },
+/* sysret ${d-direct-addr},(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_sysret_d_direct_s1_indirect_with_post_increment_4, { 0x1004200 }
+  },
+/* sysret #${d-imm8},(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_sysret_d_immediate_4_s1_indirect_with_post_increment_4, { 0x4200 }
+  },
+/* sysret (${d-An},${d-r}),(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_with_index_4_s1_indirect_with_post_increment_4, { 0x3004200 }
+  },
+/* sysret ${d-imm7-4}(${d-An}),(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_with_offset_4_s1_indirect_with_post_increment_4, { 0x4004200 }
+  },
+/* sysret (${d-An}),(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_4_s1_indirect_with_post_increment_4, { 0x4004200 }
+  },
+/* sysret (${d-An})${d-i4-4}++,(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_with_post_increment_4_s1_indirect_with_post_increment_4, { 0x2004200 }
+  },
+/* sysret ${d-i4-4}(${d-An})++,(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_with_pre_increment_4_s1_indirect_with_post_increment_4, { 0x2104200 }
+  },
+/* sysret ${d-direct-addr},${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_sysret_d_direct_s1_indirect_with_pre_increment_4, { 0x1004210 }
+  },
+/* sysret #${d-imm8},${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_sysret_d_immediate_4_s1_indirect_with_pre_increment_4, { 0x4210 }
+  },
+/* sysret (${d-An},${d-r}),${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_with_index_4_s1_indirect_with_pre_increment_4, { 0x3004210 }
+  },
+/* sysret ${d-imm7-4}(${d-An}),${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_with_offset_4_s1_indirect_with_pre_increment_4, { 0x4004210 }
+  },
+/* sysret (${d-An}),${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_4_s1_indirect_with_pre_increment_4, { 0x4004210 }
+  },
+/* sysret (${d-An})${d-i4-4}++,${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_with_post_increment_4_s1_indirect_with_pre_increment_4, { 0x2004210 }
+  },
+/* sysret ${d-i4-4}(${d-An})++,${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_with_pre_increment_4_s1_indirect_with_pre_increment_4, { 0x2104210 }
+  },
+/* syscall ${d-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), 0 } },
+    & ifmt_syscall_d_direct, { 0x1004800 }
+  },
+/* syscall #${d-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), 0 } },
+    & ifmt_syscall_d_immediate_4, { 0x4800 }
+  },
+/* syscall (${d-An},${d-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', 0 } },
+    & ifmt_syscall_d_indirect_with_index_4, { 0x3004800 }
+  },
+/* syscall ${d-imm7-4}(${d-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', 0 } },
+    & ifmt_syscall_d_indirect_with_offset_4, { 0x4004800 }
+  },
+/* syscall (${d-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', 0 } },
+    & ifmt_syscall_d_indirect_4, { 0x4004800 }
+  },
+/* syscall (${d-An})${d-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', 0 } },
+    & ifmt_syscall_d_indirect_with_post_increment_4, { 0x2004800 }
+  },
+/* syscall ${d-i4-4}(${d-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', 0 } },
+    & ifmt_syscall_d_indirect_with_pre_increment_4, { 0x2104800 }
+  },
+/* prefetch ${d-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), 0 } },
+    & ifmt_syscall_d_direct, { 0x1002800 }
+  },
+/* prefetch #${d-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), 0 } },
+    & ifmt_syscall_d_immediate_4, { 0x2800 }
+  },
+/* prefetch (${d-An},${d-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', 0 } },
+    & ifmt_syscall_d_indirect_with_index_4, { 0x3002800 }
+  },
+/* prefetch ${d-imm7-4}(${d-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', 0 } },
+    & ifmt_syscall_d_indirect_with_offset_4, { 0x4002800 }
+  },
+/* prefetch (${d-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', 0 } },
+    & ifmt_syscall_d_indirect_4, { 0x4002800 }
+  },
+/* prefetch (${d-An})${d-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', 0 } },
+    & ifmt_syscall_d_indirect_with_post_increment_4, { 0x2002800 }
+  },
+/* prefetch ${d-i4-4}(${d-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', 0 } },
+    & ifmt_syscall_d_indirect_with_pre_increment_4, { 0x2102800 }
+  },
+/* sync ${d-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), 0 } },
+    & ifmt_syscall_d_direct, { 0x1001800 }
+  },
+/* sync #${d-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), 0 } },
+    & ifmt_syscall_d_immediate_4, { 0x1800 }
+  },
+/* sync (${d-An},${d-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', 0 } },
+    & ifmt_syscall_d_indirect_with_index_4, { 0x3001800 }
+  },
+/* sync ${d-imm7-4}(${d-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', 0 } },
+    & ifmt_syscall_d_indirect_with_offset_4, { 0x4001800 }
+  },
+/* sync (${d-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', 0 } },
+    & ifmt_syscall_d_indirect_4, { 0x4001800 }
+  },
+/* sync (${d-An})${d-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', 0 } },
+    & ifmt_syscall_d_indirect_with_post_increment_4, { 0x2001800 }
+  },
+/* sync ${d-i4-4}(${d-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', 0 } },
+    & ifmt_syscall_d_indirect_with_pre_increment_4, { 0x2101800 }
+  },
+/* flush ${d-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), 0 } },
+    & ifmt_syscall_d_direct, { 0x1001000 }
+  },
+/* flush #${d-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), 0 } },
+    & ifmt_syscall_d_immediate_4, { 0x1000 }
+  },
+/* flush (${d-An},${d-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', 0 } },
+    & ifmt_syscall_d_indirect_with_index_4, { 0x3001000 }
+  },
+/* flush ${d-imm7-4}(${d-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', 0 } },
+    & ifmt_syscall_d_indirect_with_offset_4, { 0x4001000 }
+  },
+/* flush (${d-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', 0 } },
+    & ifmt_syscall_d_indirect_4, { 0x4001000 }
+  },
+/* flush (${d-An})${d-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', 0 } },
+    & ifmt_syscall_d_indirect_with_post_increment_4, { 0x2001000 }
+  },
+/* flush ${d-i4-4}(${d-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', 0 } },
+    & ifmt_syscall_d_indirect_with_pre_increment_4, { 0x2101000 }
+  },
+/* iread (${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_iread_s1_ea_indirect, { 0x3400 }
+  },
+/* iread (${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_iread_s1_ea_indirect_with_index_4, { 0x3300 }
+  },
+/* iread (${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_iread_s1_ea_indirect_with_post_increment_4, { 0x3200 }
+  },
+/* iread ${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_iread_s1_ea_indirect_with_pre_increment_4, { 0x3210 }
+  },
+/* iread ${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_iread_s1_ea_indirect_with_offset_4, { 0x3400 }
+  },
+/* iwrite (${d-An},${d-r}),${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_iwrite_d_pea_indirect_with_index_s1_direct, { 0x3008100 }
+  },
+/* iwrite ${d-imm7-4}(${d-An}),${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_iwrite_d_pea_indirect_with_offset_s1_direct, { 0x4008100 }
+  },
+/* iwrite (${d-An}),${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_iwrite_d_pea_indirect_s1_direct, { 0x4008100 }
+  },
+/* iwrite (${d-An})${d-i4-4}++,${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_iwrite_d_pea_indirect_with_post_increment_s1_direct, { 0x2008100 }
+  },
+/* iwrite ${d-i4-4}(${d-An})++,${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_iwrite_d_pea_indirect_with_pre_increment_s1_direct, { 0x2108100 }
+  },
+/* iwrite (${d-An},${d-r}),#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_iwrite_d_pea_indirect_with_index_s1_immediate, { 0x3008000 }
+  },
+/* iwrite ${d-imm7-4}(${d-An}),#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_iwrite_d_pea_indirect_with_offset_s1_immediate, { 0x4008000 }
+  },
+/* iwrite (${d-An}),#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_iwrite_d_pea_indirect_s1_immediate, { 0x4008000 }
+  },
+/* iwrite (${d-An})${d-i4-4}++,#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_iwrite_d_pea_indirect_with_post_increment_s1_immediate, { 0x2008000 }
+  },
+/* iwrite ${d-i4-4}(${d-An})++,#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_iwrite_d_pea_indirect_with_pre_increment_s1_immediate, { 0x2108000 }
+  },
+/* iwrite (${d-An},${d-r}),(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_iwrite_d_pea_indirect_with_index_s1_indirect_with_index_4, { 0x3008300 }
+  },
+/* iwrite ${d-imm7-4}(${d-An}),(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_iwrite_d_pea_indirect_with_offset_s1_indirect_with_index_4, { 0x4008300 }
+  },
+/* iwrite (${d-An}),(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_iwrite_d_pea_indirect_s1_indirect_with_index_4, { 0x4008300 }
+  },
+/* iwrite (${d-An})${d-i4-4}++,(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_iwrite_d_pea_indirect_with_post_increment_s1_indirect_with_index_4, { 0x2008300 }
+  },
+/* iwrite ${d-i4-4}(${d-An})++,(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_iwrite_d_pea_indirect_with_pre_increment_s1_indirect_with_index_4, { 0x2108300 }
+  },
+/* iwrite (${d-An},${d-r}),${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_iwrite_d_pea_indirect_with_index_s1_indirect_with_offset_4, { 0x3008400 }
+  },
+/* iwrite ${d-imm7-4}(${d-An}),${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_iwrite_d_pea_indirect_with_offset_s1_indirect_with_offset_4, { 0x4008400 }
+  },
+/* iwrite (${d-An}),${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_iwrite_d_pea_indirect_s1_indirect_with_offset_4, { 0x4008400 }
+  },
+/* iwrite (${d-An})${d-i4-4}++,${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_iwrite_d_pea_indirect_with_post_increment_s1_indirect_with_offset_4, { 0x2008400 }
+  },
+/* iwrite ${d-i4-4}(${d-An})++,${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_iwrite_d_pea_indirect_with_pre_increment_s1_indirect_with_offset_4, { 0x2108400 }
+  },
+/* iwrite (${d-An},${d-r}),(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_iwrite_d_pea_indirect_with_index_s1_indirect_4, { 0x3008400 }
+  },
+/* iwrite ${d-imm7-4}(${d-An}),(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_iwrite_d_pea_indirect_with_offset_s1_indirect_4, { 0x4008400 }
+  },
+/* iwrite (${d-An}),(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_iwrite_d_pea_indirect_s1_indirect_4, { 0x4008400 }
+  },
+/* iwrite (${d-An})${d-i4-4}++,(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_iwrite_d_pea_indirect_with_post_increment_s1_indirect_4, { 0x2008400 }
+  },
+/* iwrite ${d-i4-4}(${d-An})++,(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_iwrite_d_pea_indirect_with_pre_increment_s1_indirect_4, { 0x2108400 }
+  },
+/* iwrite (${d-An},${d-r}),(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_iwrite_d_pea_indirect_with_index_s1_indirect_with_post_increment_4, { 0x3008200 }
+  },
+/* iwrite ${d-imm7-4}(${d-An}),(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_iwrite_d_pea_indirect_with_offset_s1_indirect_with_post_increment_4, { 0x4008200 }
+  },
+/* iwrite (${d-An}),(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_iwrite_d_pea_indirect_s1_indirect_with_post_increment_4, { 0x4008200 }
+  },
+/* iwrite (${d-An})${d-i4-4}++,(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_iwrite_d_pea_indirect_with_post_increment_s1_indirect_with_post_increment_4, { 0x2008200 }
+  },
+/* iwrite ${d-i4-4}(${d-An})++,(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_iwrite_d_pea_indirect_with_pre_increment_s1_indirect_with_post_increment_4, { 0x2108200 }
+  },
+/* iwrite (${d-An},${d-r}),${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_iwrite_d_pea_indirect_with_index_s1_indirect_with_pre_increment_4, { 0x3008210 }
+  },
+/* iwrite ${d-imm7-4}(${d-An}),${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_iwrite_d_pea_indirect_with_offset_s1_indirect_with_pre_increment_4, { 0x4008210 }
+  },
+/* iwrite (${d-An}),${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_iwrite_d_pea_indirect_s1_indirect_with_pre_increment_4, { 0x4008210 }
+  },
+/* iwrite (${d-An})${d-i4-4}++,${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_iwrite_d_pea_indirect_with_post_increment_s1_indirect_with_pre_increment_4, { 0x2008210 }
+  },
+/* iwrite ${d-i4-4}(${d-An})++,${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_iwrite_d_pea_indirect_with_pre_increment_s1_indirect_with_pre_increment_4, { 0x2108210 }
+  },
+/* tbclr ${d-direct-addr},${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_sysret_d_direct_s1_direct, { 0x100a100 }
+  },
+/* tbclr #${d-imm8},${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_sysret_d_immediate_4_s1_direct, { 0xa100 }
+  },
+/* tbclr (${d-An},${d-r}),${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_sysret_d_indirect_with_index_4_s1_direct, { 0x300a100 }
+  },
+/* tbclr ${d-imm7-4}(${d-An}),${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_sysret_d_indirect_with_offset_4_s1_direct, { 0x400a100 }
+  },
+/* tbclr (${d-An}),${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_sysret_d_indirect_4_s1_direct, { 0x400a100 }
+  },
+/* tbclr (${d-An})${d-i4-4}++,${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_sysret_d_indirect_with_post_increment_4_s1_direct, { 0x200a100 }
+  },
+/* tbclr ${d-i4-4}(${d-An})++,${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_sysret_d_indirect_with_pre_increment_4_s1_direct, { 0x210a100 }
+  },
+/* tbclr ${d-direct-addr},#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_sysret_d_direct_s1_immediate, { 0x100a000 }
+  },
+/* tbclr #${d-imm8},#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_sysret_d_immediate_4_s1_immediate, { 0xa000 }
+  },
+/* tbclr (${d-An},${d-r}),#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_sysret_d_indirect_with_index_4_s1_immediate, { 0x300a000 }
+  },
+/* tbclr ${d-imm7-4}(${d-An}),#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_sysret_d_indirect_with_offset_4_s1_immediate, { 0x400a000 }
+  },
+/* tbclr (${d-An}),#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_sysret_d_indirect_4_s1_immediate, { 0x400a000 }
+  },
+/* tbclr (${d-An})${d-i4-4}++,#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_sysret_d_indirect_with_post_increment_4_s1_immediate, { 0x200a000 }
+  },
+/* tbclr ${d-i4-4}(${d-An})++,#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_sysret_d_indirect_with_pre_increment_4_s1_immediate, { 0x210a000 }
+  },
+/* tbclr ${d-direct-addr},(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_sysret_d_direct_s1_indirect_with_index_4, { 0x100a300 }
+  },
+/* tbclr #${d-imm8},(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_sysret_d_immediate_4_s1_indirect_with_index_4, { 0xa300 }
+  },
+/* tbclr (${d-An},${d-r}),(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_index_4_s1_indirect_with_index_4, { 0x300a300 }
+  },
+/* tbclr ${d-imm7-4}(${d-An}),(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_offset_4_s1_indirect_with_index_4, { 0x400a300 }
+  },
+/* tbclr (${d-An}),(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_sysret_d_indirect_4_s1_indirect_with_index_4, { 0x400a300 }
+  },
+/* tbclr (${d-An})${d-i4-4}++,(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_post_increment_4_s1_indirect_with_index_4, { 0x200a300 }
+  },
+/* tbclr ${d-i4-4}(${d-An})++,(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_pre_increment_4_s1_indirect_with_index_4, { 0x210a300 }
+  },
+/* tbclr ${d-direct-addr},${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_direct_s1_indirect_with_offset_4, { 0x100a400 }
+  },
+/* tbclr #${d-imm8},${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_immediate_4_s1_indirect_with_offset_4, { 0xa400 }
+  },
+/* tbclr (${d-An},${d-r}),${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_index_4_s1_indirect_with_offset_4, { 0x300a400 }
+  },
+/* tbclr ${d-imm7-4}(${d-An}),${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_offset_4_s1_indirect_with_offset_4, { 0x400a400 }
+  },
+/* tbclr (${d-An}),${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_4_s1_indirect_with_offset_4, { 0x400a400 }
+  },
+/* tbclr (${d-An})${d-i4-4}++,${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_post_increment_4_s1_indirect_with_offset_4, { 0x200a400 }
+  },
+/* tbclr ${d-i4-4}(${d-An})++,${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_pre_increment_4_s1_indirect_with_offset_4, { 0x210a400 }
+  },
+/* tbclr ${d-direct-addr},(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_direct_s1_indirect_4, { 0x100a400 }
+  },
+/* tbclr #${d-imm8},(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_immediate_4_s1_indirect_4, { 0xa400 }
+  },
+/* tbclr (${d-An},${d-r}),(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_index_4_s1_indirect_4, { 0x300a400 }
+  },
+/* tbclr ${d-imm7-4}(${d-An}),(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_offset_4_s1_indirect_4, { 0x400a400 }
+  },
+/* tbclr (${d-An}),(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_4_s1_indirect_4, { 0x400a400 }
+  },
+/* tbclr (${d-An})${d-i4-4}++,(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_post_increment_4_s1_indirect_4, { 0x200a400 }
+  },
+/* tbclr ${d-i4-4}(${d-An})++,(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_pre_increment_4_s1_indirect_4, { 0x210a400 }
+  },
+/* tbclr ${d-direct-addr},(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_sysret_d_direct_s1_indirect_with_post_increment_4, { 0x100a200 }
+  },
+/* tbclr #${d-imm8},(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_sysret_d_immediate_4_s1_indirect_with_post_increment_4, { 0xa200 }
+  },
+/* tbclr (${d-An},${d-r}),(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_with_index_4_s1_indirect_with_post_increment_4, { 0x300a200 }
+  },
+/* tbclr ${d-imm7-4}(${d-An}),(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_with_offset_4_s1_indirect_with_post_increment_4, { 0x400a200 }
+  },
+/* tbclr (${d-An}),(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_4_s1_indirect_with_post_increment_4, { 0x400a200 }
+  },
+/* tbclr (${d-An})${d-i4-4}++,(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_with_post_increment_4_s1_indirect_with_post_increment_4, { 0x200a200 }
+  },
+/* tbclr ${d-i4-4}(${d-An})++,(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_with_pre_increment_4_s1_indirect_with_post_increment_4, { 0x210a200 }
+  },
+/* tbclr ${d-direct-addr},${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_sysret_d_direct_s1_indirect_with_pre_increment_4, { 0x100a210 }
+  },
+/* tbclr #${d-imm8},${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_sysret_d_immediate_4_s1_indirect_with_pre_increment_4, { 0xa210 }
+  },
+/* tbclr (${d-An},${d-r}),${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_with_index_4_s1_indirect_with_pre_increment_4, { 0x300a210 }
+  },
+/* tbclr ${d-imm7-4}(${d-An}),${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_with_offset_4_s1_indirect_with_pre_increment_4, { 0x400a210 }
+  },
+/* tbclr (${d-An}),${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_4_s1_indirect_with_pre_increment_4, { 0x400a210 }
+  },
+/* tbclr (${d-An})${d-i4-4}++,${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_with_post_increment_4_s1_indirect_with_pre_increment_4, { 0x200a210 }
+  },
+/* tbclr ${d-i4-4}(${d-An})++,${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_with_pre_increment_4_s1_indirect_with_pre_increment_4, { 0x210a210 }
+  },
+/* tbset ${d-direct-addr},${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_sysret_d_direct_s1_direct, { 0x1009900 }
+  },
+/* tbset #${d-imm8},${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_sysret_d_immediate_4_s1_direct, { 0x9900 }
+  },
+/* tbset (${d-An},${d-r}),${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_sysret_d_indirect_with_index_4_s1_direct, { 0x3009900 }
+  },
+/* tbset ${d-imm7-4}(${d-An}),${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_sysret_d_indirect_with_offset_4_s1_direct, { 0x4009900 }
+  },
+/* tbset (${d-An}),${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_sysret_d_indirect_4_s1_direct, { 0x4009900 }
+  },
+/* tbset (${d-An})${d-i4-4}++,${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_sysret_d_indirect_with_post_increment_4_s1_direct, { 0x2009900 }
+  },
+/* tbset ${d-i4-4}(${d-An})++,${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_sysret_d_indirect_with_pre_increment_4_s1_direct, { 0x2109900 }
+  },
+/* tbset ${d-direct-addr},#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_sysret_d_direct_s1_immediate, { 0x1009800 }
+  },
+/* tbset #${d-imm8},#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_sysret_d_immediate_4_s1_immediate, { 0x9800 }
+  },
+/* tbset (${d-An},${d-r}),#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_sysret_d_indirect_with_index_4_s1_immediate, { 0x3009800 }
+  },
+/* tbset ${d-imm7-4}(${d-An}),#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_sysret_d_indirect_with_offset_4_s1_immediate, { 0x4009800 }
+  },
+/* tbset (${d-An}),#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_sysret_d_indirect_4_s1_immediate, { 0x4009800 }
+  },
+/* tbset (${d-An})${d-i4-4}++,#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_sysret_d_indirect_with_post_increment_4_s1_immediate, { 0x2009800 }
+  },
+/* tbset ${d-i4-4}(${d-An})++,#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_sysret_d_indirect_with_pre_increment_4_s1_immediate, { 0x2109800 }
+  },
+/* tbset ${d-direct-addr},(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_sysret_d_direct_s1_indirect_with_index_4, { 0x1009b00 }
+  },
+/* tbset #${d-imm8},(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_sysret_d_immediate_4_s1_indirect_with_index_4, { 0x9b00 }
+  },
+/* tbset (${d-An},${d-r}),(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_index_4_s1_indirect_with_index_4, { 0x3009b00 }
+  },
+/* tbset ${d-imm7-4}(${d-An}),(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_offset_4_s1_indirect_with_index_4, { 0x4009b00 }
+  },
+/* tbset (${d-An}),(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_sysret_d_indirect_4_s1_indirect_with_index_4, { 0x4009b00 }
+  },
+/* tbset (${d-An})${d-i4-4}++,(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_post_increment_4_s1_indirect_with_index_4, { 0x2009b00 }
+  },
+/* tbset ${d-i4-4}(${d-An})++,(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_pre_increment_4_s1_indirect_with_index_4, { 0x2109b00 }
+  },
+/* tbset ${d-direct-addr},${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_direct_s1_indirect_with_offset_4, { 0x1009c00 }
+  },
+/* tbset #${d-imm8},${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_immediate_4_s1_indirect_with_offset_4, { 0x9c00 }
+  },
+/* tbset (${d-An},${d-r}),${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_index_4_s1_indirect_with_offset_4, { 0x3009c00 }
+  },
+/* tbset ${d-imm7-4}(${d-An}),${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_offset_4_s1_indirect_with_offset_4, { 0x4009c00 }
+  },
+/* tbset (${d-An}),${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_4_s1_indirect_with_offset_4, { 0x4009c00 }
+  },
+/* tbset (${d-An})${d-i4-4}++,${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_post_increment_4_s1_indirect_with_offset_4, { 0x2009c00 }
+  },
+/* tbset ${d-i4-4}(${d-An})++,${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_pre_increment_4_s1_indirect_with_offset_4, { 0x2109c00 }
+  },
+/* tbset ${d-direct-addr},(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_direct_s1_indirect_4, { 0x1009c00 }
+  },
+/* tbset #${d-imm8},(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_immediate_4_s1_indirect_4, { 0x9c00 }
+  },
+/* tbset (${d-An},${d-r}),(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_index_4_s1_indirect_4, { 0x3009c00 }
+  },
+/* tbset ${d-imm7-4}(${d-An}),(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_offset_4_s1_indirect_4, { 0x4009c00 }
+  },
+/* tbset (${d-An}),(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_4_s1_indirect_4, { 0x4009c00 }
+  },
+/* tbset (${d-An})${d-i4-4}++,(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_post_increment_4_s1_indirect_4, { 0x2009c00 }
+  },
+/* tbset ${d-i4-4}(${d-An})++,(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_pre_increment_4_s1_indirect_4, { 0x2109c00 }
+  },
+/* tbset ${d-direct-addr},(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_sysret_d_direct_s1_indirect_with_post_increment_4, { 0x1009a00 }
+  },
+/* tbset #${d-imm8},(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_sysret_d_immediate_4_s1_indirect_with_post_increment_4, { 0x9a00 }
+  },
+/* tbset (${d-An},${d-r}),(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_with_index_4_s1_indirect_with_post_increment_4, { 0x3009a00 }
+  },
+/* tbset ${d-imm7-4}(${d-An}),(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_with_offset_4_s1_indirect_with_post_increment_4, { 0x4009a00 }
+  },
+/* tbset (${d-An}),(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_4_s1_indirect_with_post_increment_4, { 0x4009a00 }
+  },
+/* tbset (${d-An})${d-i4-4}++,(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_with_post_increment_4_s1_indirect_with_post_increment_4, { 0x2009a00 }
+  },
+/* tbset ${d-i4-4}(${d-An})++,(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_with_pre_increment_4_s1_indirect_with_post_increment_4, { 0x2109a00 }
+  },
+/* tbset ${d-direct-addr},${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_sysret_d_direct_s1_indirect_with_pre_increment_4, { 0x1009a10 }
+  },
+/* tbset #${d-imm8},${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_sysret_d_immediate_4_s1_indirect_with_pre_increment_4, { 0x9a10 }
+  },
+/* tbset (${d-An},${d-r}),${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_with_index_4_s1_indirect_with_pre_increment_4, { 0x3009a10 }
+  },
+/* tbset ${d-imm7-4}(${d-An}),${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_with_offset_4_s1_indirect_with_pre_increment_4, { 0x4009a10 }
+  },
+/* tbset (${d-An}),${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_4_s1_indirect_with_pre_increment_4, { 0x4009a10 }
+  },
+/* tbset (${d-An})${d-i4-4}++,${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_with_post_increment_4_s1_indirect_with_pre_increment_4, { 0x2009a10 }
+  },
+/* tbset ${d-i4-4}(${d-An})++,${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_with_pre_increment_4_s1_indirect_with_pre_increment_4, { 0x2109a10 }
+  },
+/* setcsr ${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_setcsr_s1_direct, { 0x12d9100 }
+  },
+/* setcsr #${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (S1_IMM8), 0 } },
+    & ifmt_setcsr_s1_immediate, { 0x12d9000 }
+  },
+/* setcsr (${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_setcsr_s1_indirect_with_index_4, { 0x12d9300 }
+  },
+/* setcsr ${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_setcsr_s1_indirect_with_offset_4, { 0x12d9400 }
+  },
+/* setcsr (${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_setcsr_s1_indirect_4, { 0x12d9400 }
+  },
+/* setcsr (${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_setcsr_s1_indirect_with_post_increment_4, { 0x12d9200 }
+  },
+/* setcsr ${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_setcsr_s1_indirect_with_pre_increment_4, { 0x12d9210 }
+  },
+/* bkpt ${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_setcsr_s1_direct, { 0x3900 }
+  },
+/* bkpt #${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (S1_IMM8), 0 } },
+    & ifmt_setcsr_s1_immediate, { 0x3800 }
+  },
+/* bkpt (${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_setcsr_s1_indirect_with_index_4, { 0x3b00 }
+  },
+/* bkpt ${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_setcsr_s1_indirect_with_offset_4, { 0x3c00 }
+  },
+/* bkpt (${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_setcsr_s1_indirect_4, { 0x3c00 }
+  },
+/* bkpt (${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_setcsr_s1_indirect_with_post_increment_4, { 0x3a00 }
+  },
+/* bkpt ${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_setcsr_s1_indirect_with_pre_increment_4, { 0x3a10 }
+  },
+/* ret ${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_setcsr_s1_direct, { 0x2100 }
+  },
+/* ret #${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (S1_IMM8), 0 } },
+    & ifmt_setcsr_s1_immediate, { 0x2000 }
+  },
+/* ret (${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_setcsr_s1_indirect_with_index_4, { 0x2300 }
+  },
+/* ret ${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_setcsr_s1_indirect_with_offset_4, { 0x2400 }
+  },
+/* ret (${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_setcsr_s1_indirect_4, { 0x2400 }
+  },
+/* ret (${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_setcsr_s1_indirect_with_post_increment_4, { 0x2200 }
+  },
+/* ret ${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_setcsr_s1_indirect_with_pre_increment_4, { 0x2210 }
+  },
+/* movea ${d-direct-addr},${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_sysret_d_direct_s1_direct, { 0x1007100 }
+  },
+/* movea #${d-imm8},${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_sysret_d_immediate_4_s1_direct, { 0x7100 }
+  },
+/* movea (${d-An},${d-r}),${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_sysret_d_indirect_with_index_4_s1_direct, { 0x3007100 }
+  },
+/* movea ${d-imm7-4}(${d-An}),${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_sysret_d_indirect_with_offset_4_s1_direct, { 0x4007100 }
+  },
+/* movea (${d-An}),${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_sysret_d_indirect_4_s1_direct, { 0x4007100 }
+  },
+/* movea (${d-An})${d-i4-4}++,${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_sysret_d_indirect_with_post_increment_4_s1_direct, { 0x2007100 }
+  },
+/* movea ${d-i4-4}(${d-An})++,${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_sysret_d_indirect_with_pre_increment_4_s1_direct, { 0x2107100 }
+  },
+/* movea ${d-direct-addr},#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_sysret_d_direct_s1_immediate, { 0x1007000 }
+  },
+/* movea #${d-imm8},#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_sysret_d_immediate_4_s1_immediate, { 0x7000 }
+  },
+/* movea (${d-An},${d-r}),#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_sysret_d_indirect_with_index_4_s1_immediate, { 0x3007000 }
+  },
+/* movea ${d-imm7-4}(${d-An}),#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_sysret_d_indirect_with_offset_4_s1_immediate, { 0x4007000 }
+  },
+/* movea (${d-An}),#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_sysret_d_indirect_4_s1_immediate, { 0x4007000 }
+  },
+/* movea (${d-An})${d-i4-4}++,#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_sysret_d_indirect_with_post_increment_4_s1_immediate, { 0x2007000 }
+  },
+/* movea ${d-i4-4}(${d-An})++,#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_sysret_d_indirect_with_pre_increment_4_s1_immediate, { 0x2107000 }
+  },
+/* movea ${d-direct-addr},(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_sysret_d_direct_s1_indirect_with_index_4, { 0x1007300 }
+  },
+/* movea #${d-imm8},(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_sysret_d_immediate_4_s1_indirect_with_index_4, { 0x7300 }
+  },
+/* movea (${d-An},${d-r}),(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_index_4_s1_indirect_with_index_4, { 0x3007300 }
+  },
+/* movea ${d-imm7-4}(${d-An}),(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_offset_4_s1_indirect_with_index_4, { 0x4007300 }
+  },
+/* movea (${d-An}),(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_sysret_d_indirect_4_s1_indirect_with_index_4, { 0x4007300 }
+  },
+/* movea (${d-An})${d-i4-4}++,(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_post_increment_4_s1_indirect_with_index_4, { 0x2007300 }
+  },
+/* movea ${d-i4-4}(${d-An})++,(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_pre_increment_4_s1_indirect_with_index_4, { 0x2107300 }
+  },
+/* movea ${d-direct-addr},${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_direct_s1_indirect_with_offset_4, { 0x1007400 }
+  },
+/* movea #${d-imm8},${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_immediate_4_s1_indirect_with_offset_4, { 0x7400 }
+  },
+/* movea (${d-An},${d-r}),${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_index_4_s1_indirect_with_offset_4, { 0x3007400 }
+  },
+/* movea ${d-imm7-4}(${d-An}),${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_offset_4_s1_indirect_with_offset_4, { 0x4007400 }
+  },
+/* movea (${d-An}),${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_4_s1_indirect_with_offset_4, { 0x4007400 }
+  },
+/* movea (${d-An})${d-i4-4}++,${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_post_increment_4_s1_indirect_with_offset_4, { 0x2007400 }
+  },
+/* movea ${d-i4-4}(${d-An})++,${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_pre_increment_4_s1_indirect_with_offset_4, { 0x2107400 }
+  },
+/* movea ${d-direct-addr},(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_direct_s1_indirect_4, { 0x1007400 }
+  },
+/* movea #${d-imm8},(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_immediate_4_s1_indirect_4, { 0x7400 }
+  },
+/* movea (${d-An},${d-r}),(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_index_4_s1_indirect_4, { 0x3007400 }
+  },
+/* movea ${d-imm7-4}(${d-An}),(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_offset_4_s1_indirect_4, { 0x4007400 }
+  },
+/* movea (${d-An}),(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_4_s1_indirect_4, { 0x4007400 }
+  },
+/* movea (${d-An})${d-i4-4}++,(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_post_increment_4_s1_indirect_4, { 0x2007400 }
+  },
+/* movea ${d-i4-4}(${d-An})++,(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_pre_increment_4_s1_indirect_4, { 0x2107400 }
+  },
+/* movea ${d-direct-addr},(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_sysret_d_direct_s1_indirect_with_post_increment_4, { 0x1007200 }
+  },
+/* movea #${d-imm8},(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_sysret_d_immediate_4_s1_indirect_with_post_increment_4, { 0x7200 }
+  },
+/* movea (${d-An},${d-r}),(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_with_index_4_s1_indirect_with_post_increment_4, { 0x3007200 }
+  },
+/* movea ${d-imm7-4}(${d-An}),(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_with_offset_4_s1_indirect_with_post_increment_4, { 0x4007200 }
+  },
+/* movea (${d-An}),(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_4_s1_indirect_with_post_increment_4, { 0x4007200 }
+  },
+/* movea (${d-An})${d-i4-4}++,(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_with_post_increment_4_s1_indirect_with_post_increment_4, { 0x2007200 }
+  },
+/* movea ${d-i4-4}(${d-An})++,(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_with_pre_increment_4_s1_indirect_with_post_increment_4, { 0x2107200 }
+  },
+/* movea ${d-direct-addr},${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_sysret_d_direct_s1_indirect_with_pre_increment_4, { 0x1007210 }
+  },
+/* movea #${d-imm8},${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_sysret_d_immediate_4_s1_indirect_with_pre_increment_4, { 0x7210 }
+  },
+/* movea (${d-An},${d-r}),${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_with_index_4_s1_indirect_with_pre_increment_4, { 0x3007210 }
+  },
+/* movea ${d-imm7-4}(${d-An}),${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_with_offset_4_s1_indirect_with_pre_increment_4, { 0x4007210 }
+  },
+/* movea (${d-An}),${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_4_s1_indirect_with_pre_increment_4, { 0x4007210 }
+  },
+/* movea (${d-An})${d-i4-4}++,${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_with_post_increment_4_s1_indirect_with_pre_increment_4, { 0x2007210 }
+  },
+/* movea ${d-i4-4}(${d-An})++,${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_with_pre_increment_4_s1_indirect_with_pre_increment_4, { 0x2107210 }
+  },
+/* move.4 ${d-direct-addr},${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_sysret_d_direct_s1_direct, { 0x1006100 }
+  },
+/* move.4 #${d-imm8},${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_sysret_d_immediate_4_s1_direct, { 0x6100 }
+  },
+/* move.4 (${d-An},${d-r}),${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_sysret_d_indirect_with_index_4_s1_direct, { 0x3006100 }
+  },
+/* move.4 ${d-imm7-4}(${d-An}),${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_sysret_d_indirect_with_offset_4_s1_direct, { 0x4006100 }
+  },
+/* move.4 (${d-An}),${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_sysret_d_indirect_4_s1_direct, { 0x4006100 }
+  },
+/* move.4 (${d-An})${d-i4-4}++,${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_sysret_d_indirect_with_post_increment_4_s1_direct, { 0x2006100 }
+  },
+/* move.4 ${d-i4-4}(${d-An})++,${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_sysret_d_indirect_with_pre_increment_4_s1_direct, { 0x2106100 }
+  },
+/* move.4 ${d-direct-addr},#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_sysret_d_direct_s1_immediate, { 0x1006000 }
+  },
+/* move.4 #${d-imm8},#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_sysret_d_immediate_4_s1_immediate, { 0x6000 }
+  },
+/* move.4 (${d-An},${d-r}),#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_sysret_d_indirect_with_index_4_s1_immediate, { 0x3006000 }
+  },
+/* move.4 ${d-imm7-4}(${d-An}),#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_sysret_d_indirect_with_offset_4_s1_immediate, { 0x4006000 }
+  },
+/* move.4 (${d-An}),#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_sysret_d_indirect_4_s1_immediate, { 0x4006000 }
+  },
+/* move.4 (${d-An})${d-i4-4}++,#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_sysret_d_indirect_with_post_increment_4_s1_immediate, { 0x2006000 }
+  },
+/* move.4 ${d-i4-4}(${d-An})++,#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_sysret_d_indirect_with_pre_increment_4_s1_immediate, { 0x2106000 }
+  },
+/* move.4 ${d-direct-addr},(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_sysret_d_direct_s1_indirect_with_index_4, { 0x1006300 }
+  },
+/* move.4 #${d-imm8},(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_sysret_d_immediate_4_s1_indirect_with_index_4, { 0x6300 }
+  },
+/* move.4 (${d-An},${d-r}),(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_index_4_s1_indirect_with_index_4, { 0x3006300 }
+  },
+/* move.4 ${d-imm7-4}(${d-An}),(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_offset_4_s1_indirect_with_index_4, { 0x4006300 }
+  },
+/* move.4 (${d-An}),(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_sysret_d_indirect_4_s1_indirect_with_index_4, { 0x4006300 }
+  },
+/* move.4 (${d-An})${d-i4-4}++,(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_post_increment_4_s1_indirect_with_index_4, { 0x2006300 }
+  },
+/* move.4 ${d-i4-4}(${d-An})++,(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_pre_increment_4_s1_indirect_with_index_4, { 0x2106300 }
+  },
+/* move.4 ${d-direct-addr},${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_direct_s1_indirect_with_offset_4, { 0x1006400 }
+  },
+/* move.4 #${d-imm8},${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_immediate_4_s1_indirect_with_offset_4, { 0x6400 }
+  },
+/* move.4 (${d-An},${d-r}),${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_index_4_s1_indirect_with_offset_4, { 0x3006400 }
+  },
+/* move.4 ${d-imm7-4}(${d-An}),${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_offset_4_s1_indirect_with_offset_4, { 0x4006400 }
+  },
+/* move.4 (${d-An}),${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_4_s1_indirect_with_offset_4, { 0x4006400 }
+  },
+/* move.4 (${d-An})${d-i4-4}++,${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_post_increment_4_s1_indirect_with_offset_4, { 0x2006400 }
+  },
+/* move.4 ${d-i4-4}(${d-An})++,${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_pre_increment_4_s1_indirect_with_offset_4, { 0x2106400 }
+  },
+/* move.4 ${d-direct-addr},(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_direct_s1_indirect_4, { 0x1006400 }
+  },
+/* move.4 #${d-imm8},(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_immediate_4_s1_indirect_4, { 0x6400 }
+  },
+/* move.4 (${d-An},${d-r}),(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_index_4_s1_indirect_4, { 0x3006400 }
+  },
+/* move.4 ${d-imm7-4}(${d-An}),(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_offset_4_s1_indirect_4, { 0x4006400 }
+  },
+/* move.4 (${d-An}),(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_4_s1_indirect_4, { 0x4006400 }
+  },
+/* move.4 (${d-An})${d-i4-4}++,(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_post_increment_4_s1_indirect_4, { 0x2006400 }
+  },
+/* move.4 ${d-i4-4}(${d-An})++,(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_pre_increment_4_s1_indirect_4, { 0x2106400 }
+  },
+/* move.4 ${d-direct-addr},(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_sysret_d_direct_s1_indirect_with_post_increment_4, { 0x1006200 }
+  },
+/* move.4 #${d-imm8},(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_sysret_d_immediate_4_s1_indirect_with_post_increment_4, { 0x6200 }
+  },
+/* move.4 (${d-An},${d-r}),(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_with_index_4_s1_indirect_with_post_increment_4, { 0x3006200 }
+  },
+/* move.4 ${d-imm7-4}(${d-An}),(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_with_offset_4_s1_indirect_with_post_increment_4, { 0x4006200 }
+  },
+/* move.4 (${d-An}),(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_4_s1_indirect_with_post_increment_4, { 0x4006200 }
+  },
+/* move.4 (${d-An})${d-i4-4}++,(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_with_post_increment_4_s1_indirect_with_post_increment_4, { 0x2006200 }
+  },
+/* move.4 ${d-i4-4}(${d-An})++,(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_with_pre_increment_4_s1_indirect_with_post_increment_4, { 0x2106200 }
+  },
+/* move.4 ${d-direct-addr},${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_sysret_d_direct_s1_indirect_with_pre_increment_4, { 0x1006210 }
+  },
+/* move.4 #${d-imm8},${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_sysret_d_immediate_4_s1_indirect_with_pre_increment_4, { 0x6210 }
+  },
+/* move.4 (${d-An},${d-r}),${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_with_index_4_s1_indirect_with_pre_increment_4, { 0x3006210 }
+  },
+/* move.4 ${d-imm7-4}(${d-An}),${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_with_offset_4_s1_indirect_with_pre_increment_4, { 0x4006210 }
+  },
+/* move.4 (${d-An}),${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_4_s1_indirect_with_pre_increment_4, { 0x4006210 }
+  },
+/* move.4 (${d-An})${d-i4-4}++,${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_with_post_increment_4_s1_indirect_with_pre_increment_4, { 0x2006210 }
+  },
+/* move.4 ${d-i4-4}(${d-An})++,${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_with_pre_increment_4_s1_indirect_with_pre_increment_4, { 0x2106210 }
+  },
+/* iread (${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_iread_s1_ea_indirect, { 0x12f6400 }
+  },
+/* iread (${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_iread_s1_ea_indirect_with_index_4, { 0x12f6300 }
+  },
+/* iread (${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_iread_s1_ea_indirect_with_post_increment_4, { 0x12f6200 }
+  },
+/* iread ${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_iread_s1_ea_indirect_with_pre_increment_4, { 0x12f6210 }
+  },
+/* iread ${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_iread_s1_ea_indirect_with_offset_4, { 0x12f6400 }
+  },
+/* iwrite (${d-An},${d-r}),${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_iwrite_d_pea_indirect_with_index_s1_direct, { 0x3006100 }
+  },
+/* iwrite ${d-imm7-4}(${d-An}),${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_iwrite_d_pea_indirect_with_offset_s1_direct, { 0x4006100 }
+  },
+/* iwrite (${d-An}),${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_iwrite_d_pea_indirect_s1_direct, { 0x4006100 }
+  },
+/* iwrite (${d-An})${d-i4-4}++,${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_iwrite_d_pea_indirect_with_post_increment_s1_direct, { 0x2006100 }
+  },
+/* iwrite ${d-i4-4}(${d-An})++,${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_iwrite_d_pea_indirect_with_pre_increment_s1_direct, { 0x2106100 }
+  },
+/* iwrite (${d-An},${d-r}),#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_iwrite_d_pea_indirect_with_index_s1_immediate, { 0x3006000 }
+  },
+/* iwrite ${d-imm7-4}(${d-An}),#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_iwrite_d_pea_indirect_with_offset_s1_immediate, { 0x4006000 }
+  },
+/* iwrite (${d-An}),#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_iwrite_d_pea_indirect_s1_immediate, { 0x4006000 }
+  },
+/* iwrite (${d-An})${d-i4-4}++,#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_iwrite_d_pea_indirect_with_post_increment_s1_immediate, { 0x2006000 }
+  },
+/* iwrite ${d-i4-4}(${d-An})++,#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_iwrite_d_pea_indirect_with_pre_increment_s1_immediate, { 0x2106000 }
+  },
+/* iwrite (${d-An},${d-r}),(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_iwrite_d_pea_indirect_with_index_s1_indirect_with_index_4, { 0x3006300 }
+  },
+/* iwrite ${d-imm7-4}(${d-An}),(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_iwrite_d_pea_indirect_with_offset_s1_indirect_with_index_4, { 0x4006300 }
+  },
+/* iwrite (${d-An}),(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_iwrite_d_pea_indirect_s1_indirect_with_index_4, { 0x4006300 }
+  },
+/* iwrite (${d-An})${d-i4-4}++,(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_iwrite_d_pea_indirect_with_post_increment_s1_indirect_with_index_4, { 0x2006300 }
+  },
+/* iwrite ${d-i4-4}(${d-An})++,(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_iwrite_d_pea_indirect_with_pre_increment_s1_indirect_with_index_4, { 0x2106300 }
+  },
+/* iwrite (${d-An},${d-r}),${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_iwrite_d_pea_indirect_with_index_s1_indirect_with_offset_4, { 0x3006400 }
+  },
+/* iwrite ${d-imm7-4}(${d-An}),${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_iwrite_d_pea_indirect_with_offset_s1_indirect_with_offset_4, { 0x4006400 }
+  },
+/* iwrite (${d-An}),${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_iwrite_d_pea_indirect_s1_indirect_with_offset_4, { 0x4006400 }
+  },
+/* iwrite (${d-An})${d-i4-4}++,${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_iwrite_d_pea_indirect_with_post_increment_s1_indirect_with_offset_4, { 0x2006400 }
+  },
+/* iwrite ${d-i4-4}(${d-An})++,${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_iwrite_d_pea_indirect_with_pre_increment_s1_indirect_with_offset_4, { 0x2106400 }
+  },
+/* iwrite (${d-An},${d-r}),(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_iwrite_d_pea_indirect_with_index_s1_indirect_4, { 0x3006400 }
+  },
+/* iwrite ${d-imm7-4}(${d-An}),(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_iwrite_d_pea_indirect_with_offset_s1_indirect_4, { 0x4006400 }
+  },
+/* iwrite (${d-An}),(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_iwrite_d_pea_indirect_s1_indirect_4, { 0x4006400 }
+  },
+/* iwrite (${d-An})${d-i4-4}++,(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_iwrite_d_pea_indirect_with_post_increment_s1_indirect_4, { 0x2006400 }
+  },
+/* iwrite ${d-i4-4}(${d-An})++,(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_iwrite_d_pea_indirect_with_pre_increment_s1_indirect_4, { 0x2106400 }
+  },
+/* iwrite (${d-An},${d-r}),(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_iwrite_d_pea_indirect_with_index_s1_indirect_with_post_increment_4, { 0x3006200 }
+  },
+/* iwrite ${d-imm7-4}(${d-An}),(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_iwrite_d_pea_indirect_with_offset_s1_indirect_with_post_increment_4, { 0x4006200 }
+  },
+/* iwrite (${d-An}),(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_iwrite_d_pea_indirect_s1_indirect_with_post_increment_4, { 0x4006200 }
+  },
+/* iwrite (${d-An})${d-i4-4}++,(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_iwrite_d_pea_indirect_with_post_increment_s1_indirect_with_post_increment_4, { 0x2006200 }
+  },
+/* iwrite ${d-i4-4}(${d-An})++,(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_iwrite_d_pea_indirect_with_pre_increment_s1_indirect_with_post_increment_4, { 0x2106200 }
+  },
+/* iwrite (${d-An},${d-r}),${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_iwrite_d_pea_indirect_with_index_s1_indirect_with_pre_increment_4, { 0x3006210 }
+  },
+/* iwrite ${d-imm7-4}(${d-An}),${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_iwrite_d_pea_indirect_with_offset_s1_indirect_with_pre_increment_4, { 0x4006210 }
+  },
+/* iwrite (${d-An}),${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_iwrite_d_pea_indirect_s1_indirect_with_pre_increment_4, { 0x4006210 }
+  },
+/* iwrite (${d-An})${d-i4-4}++,${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_iwrite_d_pea_indirect_with_post_increment_s1_indirect_with_pre_increment_4, { 0x2006210 }
+  },
+/* iwrite ${d-i4-4}(${d-An})++,${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_iwrite_d_pea_indirect_with_pre_increment_s1_indirect_with_pre_increment_4, { 0x2106210 }
+  },
+/* move.2 ${d-direct-addr},${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_sysret_d_direct_s1_direct, { 0x1006900 }
+  },
+/* move.2 #${d-imm8},${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_move_2_d_immediate_2_s1_direct, { 0x6900 }
+  },
+/* move.2 (${d-An},${d-r}),${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_move_2_d_indirect_with_index_2_s1_direct, { 0x3006900 }
+  },
+/* move.2 ${d-imm7-2}(${d-An}),${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_move_2_d_indirect_with_offset_2_s1_direct, { 0x4006900 }
+  },
+/* move.2 (${d-An}),${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_move_2_d_indirect_2_s1_direct, { 0x4006900 }
+  },
+/* move.2 (${d-An})${d-i4-2}++,${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_move_2_d_indirect_with_post_increment_2_s1_direct, { 0x2006900 }
+  },
+/* move.2 ${d-i4-2}(${d-An})++,${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_move_2_d_indirect_with_pre_increment_2_s1_direct, { 0x2106900 }
+  },
+/* move.2 ${d-direct-addr},#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_sysret_d_direct_s1_immediate, { 0x1006800 }
+  },
+/* move.2 #${d-imm8},#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_move_2_d_immediate_2_s1_immediate, { 0x6800 }
+  },
+/* move.2 (${d-An},${d-r}),#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_move_2_d_indirect_with_index_2_s1_immediate, { 0x3006800 }
+  },
+/* move.2 ${d-imm7-2}(${d-An}),#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_move_2_d_indirect_with_offset_2_s1_immediate, { 0x4006800 }
+  },
+/* move.2 (${d-An}),#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_move_2_d_indirect_2_s1_immediate, { 0x4006800 }
+  },
+/* move.2 (${d-An})${d-i4-2}++,#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_move_2_d_indirect_with_post_increment_2_s1_immediate, { 0x2006800 }
+  },
+/* move.2 ${d-i4-2}(${d-An})++,#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_move_2_d_indirect_with_pre_increment_2_s1_immediate, { 0x2106800 }
+  },
+/* move.2 ${d-direct-addr},(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_move_2_d_direct_s1_indirect_with_index_2, { 0x1006b00 }
+  },
+/* move.2 #${d-imm8},(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_move_2_d_immediate_2_s1_indirect_with_index_2, { 0x6b00 }
+  },
+/* move.2 (${d-An},${d-r}),(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_move_2_d_indirect_with_index_2_s1_indirect_with_index_2, { 0x3006b00 }
+  },
+/* move.2 ${d-imm7-2}(${d-An}),(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_move_2_d_indirect_with_offset_2_s1_indirect_with_index_2, { 0x4006b00 }
+  },
+/* move.2 (${d-An}),(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_move_2_d_indirect_2_s1_indirect_with_index_2, { 0x4006b00 }
+  },
+/* move.2 (${d-An})${d-i4-2}++,(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_move_2_d_indirect_with_post_increment_2_s1_indirect_with_index_2, { 0x2006b00 }
+  },
+/* move.2 ${d-i4-2}(${d-An})++,(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_move_2_d_indirect_with_pre_increment_2_s1_indirect_with_index_2, { 0x2106b00 }
+  },
+/* move.2 ${d-direct-addr},${s1-imm7-2}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_2_d_direct_s1_indirect_with_offset_2, { 0x1006c00 }
+  },
+/* move.2 #${d-imm8},${s1-imm7-2}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_2_d_immediate_2_s1_indirect_with_offset_2, { 0x6c00 }
+  },
+/* move.2 (${d-An},${d-r}),${s1-imm7-2}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_2_d_indirect_with_index_2_s1_indirect_with_offset_2, { 0x3006c00 }
+  },
+/* move.2 ${d-imm7-2}(${d-An}),${s1-imm7-2}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_2_d_indirect_with_offset_2_s1_indirect_with_offset_2, { 0x4006c00 }
+  },
+/* move.2 (${d-An}),${s1-imm7-2}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_2_d_indirect_2_s1_indirect_with_offset_2, { 0x4006c00 }
+  },
+/* move.2 (${d-An})${d-i4-2}++,${s1-imm7-2}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_2_d_indirect_with_post_increment_2_s1_indirect_with_offset_2, { 0x2006c00 }
+  },
+/* move.2 ${d-i4-2}(${d-An})++,${s1-imm7-2}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_2_d_indirect_with_pre_increment_2_s1_indirect_with_offset_2, { 0x2106c00 }
+  },
+/* move.2 ${d-direct-addr},(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_2_d_direct_s1_indirect_2, { 0x1006c00 }
+  },
+/* move.2 #${d-imm8},(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_2_d_immediate_2_s1_indirect_2, { 0x6c00 }
+  },
+/* move.2 (${d-An},${d-r}),(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_2_d_indirect_with_index_2_s1_indirect_2, { 0x3006c00 }
+  },
+/* move.2 ${d-imm7-2}(${d-An}),(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_2_d_indirect_with_offset_2_s1_indirect_2, { 0x4006c00 }
+  },
+/* move.2 (${d-An}),(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_2_d_indirect_2_s1_indirect_2, { 0x4006c00 }
+  },
+/* move.2 (${d-An})${d-i4-2}++,(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_2_d_indirect_with_post_increment_2_s1_indirect_2, { 0x2006c00 }
+  },
+/* move.2 ${d-i4-2}(${d-An})++,(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_2_d_indirect_with_pre_increment_2_s1_indirect_2, { 0x2106c00 }
+  },
+/* move.2 ${d-direct-addr},(${s1-An})${s1-i4-2}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', 0 } },
+    & ifmt_move_2_d_direct_s1_indirect_with_post_increment_2, { 0x1006a00 }
+  },
+/* move.2 #${d-imm8},(${s1-An})${s1-i4-2}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', 0 } },
+    & ifmt_move_2_d_immediate_2_s1_indirect_with_post_increment_2, { 0x6a00 }
+  },
+/* move.2 (${d-An},${d-r}),(${s1-An})${s1-i4-2}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', 0 } },
+    & ifmt_move_2_d_indirect_with_index_2_s1_indirect_with_post_increment_2, { 0x3006a00 }
+  },
+/* move.2 ${d-imm7-2}(${d-An}),(${s1-An})${s1-i4-2}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', 0 } },
+    & ifmt_move_2_d_indirect_with_offset_2_s1_indirect_with_post_increment_2, { 0x4006a00 }
+  },
+/* move.2 (${d-An}),(${s1-An})${s1-i4-2}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', 0 } },
+    & ifmt_move_2_d_indirect_2_s1_indirect_with_post_increment_2, { 0x4006a00 }
+  },
+/* move.2 (${d-An})${d-i4-2}++,(${s1-An})${s1-i4-2}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', 0 } },
+    & ifmt_move_2_d_indirect_with_post_increment_2_s1_indirect_with_post_increment_2, { 0x2006a00 }
+  },
+/* move.2 ${d-i4-2}(${d-An})++,(${s1-An})${s1-i4-2}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', 0 } },
+    & ifmt_move_2_d_indirect_with_pre_increment_2_s1_indirect_with_post_increment_2, { 0x2106a00 }
+  },
+/* move.2 ${d-direct-addr},${s1-i4-2}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_move_2_d_direct_s1_indirect_with_pre_increment_2, { 0x1006a10 }
+  },
+/* move.2 #${d-imm8},${s1-i4-2}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_move_2_d_immediate_2_s1_indirect_with_pre_increment_2, { 0x6a10 }
+  },
+/* move.2 (${d-An},${d-r}),${s1-i4-2}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_move_2_d_indirect_with_index_2_s1_indirect_with_pre_increment_2, { 0x3006a10 }
+  },
+/* move.2 ${d-imm7-2}(${d-An}),${s1-i4-2}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_move_2_d_indirect_with_offset_2_s1_indirect_with_pre_increment_2, { 0x4006a10 }
+  },
+/* move.2 (${d-An}),${s1-i4-2}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_move_2_d_indirect_2_s1_indirect_with_pre_increment_2, { 0x4006a10 }
+  },
+/* move.2 (${d-An})${d-i4-2}++,${s1-i4-2}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_move_2_d_indirect_with_post_increment_2_s1_indirect_with_pre_increment_2, { 0x2006a10 }
+  },
+/* move.2 ${d-i4-2}(${d-An})++,${s1-i4-2}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_move_2_d_indirect_with_pre_increment_2_s1_indirect_with_pre_increment_2, { 0x2106a10 }
+  },
+/* move.1 ${d-direct-addr},${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_sysret_d_direct_s1_direct, { 0x1007900 }
+  },
+/* move.1 #${d-imm8},${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_move_1_d_immediate_1_s1_direct, { 0x7900 }
+  },
+/* move.1 (${d-An},${d-r}),${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_move_1_d_indirect_with_index_1_s1_direct, { 0x3007900 }
+  },
+/* move.1 ${d-imm7-1}(${d-An}),${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_1), '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_move_1_d_indirect_with_offset_1_s1_direct, { 0x4007900 }
+  },
+/* move.1 (${d-An}),${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_move_1_d_indirect_1_s1_direct, { 0x4007900 }
+  },
+/* move.1 (${d-An})${d-i4-1}++,${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_1), '+', '+', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_move_1_d_indirect_with_post_increment_1_s1_direct, { 0x2007900 }
+  },
+/* move.1 ${d-i4-1}(${d-An})++,${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_1), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_move_1_d_indirect_with_pre_increment_1_s1_direct, { 0x2107900 }
+  },
+/* move.1 ${d-direct-addr},#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_sysret_d_direct_s1_immediate, { 0x1007800 }
+  },
+/* move.1 #${d-imm8},#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_move_1_d_immediate_1_s1_immediate, { 0x7800 }
+  },
+/* move.1 (${d-An},${d-r}),#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_move_1_d_indirect_with_index_1_s1_immediate, { 0x3007800 }
+  },
+/* move.1 ${d-imm7-1}(${d-An}),#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_1), '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_move_1_d_indirect_with_offset_1_s1_immediate, { 0x4007800 }
+  },
+/* move.1 (${d-An}),#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_move_1_d_indirect_1_s1_immediate, { 0x4007800 }
+  },
+/* move.1 (${d-An})${d-i4-1}++,#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_1), '+', '+', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_move_1_d_indirect_with_post_increment_1_s1_immediate, { 0x2007800 }
+  },
+/* move.1 ${d-i4-1}(${d-An})++,#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_1), '(', OP (D_AN), ')', '+', '+', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_move_1_d_indirect_with_pre_increment_1_s1_immediate, { 0x2107800 }
+  },
+/* move.1 ${d-direct-addr},(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_move_1_d_direct_s1_indirect_with_index_1, { 0x1007b00 }
+  },
+/* move.1 #${d-imm8},(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_move_1_d_immediate_1_s1_indirect_with_index_1, { 0x7b00 }
+  },
+/* move.1 (${d-An},${d-r}),(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_move_1_d_indirect_with_index_1_s1_indirect_with_index_1, { 0x3007b00 }
+  },
+/* move.1 ${d-imm7-1}(${d-An}),(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_1), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_move_1_d_indirect_with_offset_1_s1_indirect_with_index_1, { 0x4007b00 }
+  },
+/* move.1 (${d-An}),(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_move_1_d_indirect_1_s1_indirect_with_index_1, { 0x4007b00 }
+  },
+/* move.1 (${d-An})${d-i4-1}++,(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_1), '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_move_1_d_indirect_with_post_increment_1_s1_indirect_with_index_1, { 0x2007b00 }
+  },
+/* move.1 ${d-i4-1}(${d-An})++,(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_1), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_move_1_d_indirect_with_pre_increment_1_s1_indirect_with_index_1, { 0x2107b00 }
+  },
+/* move.1 ${d-direct-addr},${s1-imm7-1}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_1_d_direct_s1_indirect_with_offset_1, { 0x1007c00 }
+  },
+/* move.1 #${d-imm8},${s1-imm7-1}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_1_d_immediate_1_s1_indirect_with_offset_1, { 0x7c00 }
+  },
+/* move.1 (${d-An},${d-r}),${s1-imm7-1}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_1_d_indirect_with_index_1_s1_indirect_with_offset_1, { 0x3007c00 }
+  },
+/* move.1 ${d-imm7-1}(${d-An}),${s1-imm7-1}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_1), '(', OP (D_AN), ')', ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_1_d_indirect_with_offset_1_s1_indirect_with_offset_1, { 0x4007c00 }
+  },
+/* move.1 (${d-An}),${s1-imm7-1}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_1_d_indirect_1_s1_indirect_with_offset_1, { 0x4007c00 }
+  },
+/* move.1 (${d-An})${d-i4-1}++,${s1-imm7-1}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_1), '+', '+', ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_1_d_indirect_with_post_increment_1_s1_indirect_with_offset_1, { 0x2007c00 }
+  },
+/* move.1 ${d-i4-1}(${d-An})++,${s1-imm7-1}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_1), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_1_d_indirect_with_pre_increment_1_s1_indirect_with_offset_1, { 0x2107c00 }
+  },
+/* move.1 ${d-direct-addr},(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_1_d_direct_s1_indirect_1, { 0x1007c00 }
+  },
+/* move.1 #${d-imm8},(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_1_d_immediate_1_s1_indirect_1, { 0x7c00 }
+  },
+/* move.1 (${d-An},${d-r}),(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_1_d_indirect_with_index_1_s1_indirect_1, { 0x3007c00 }
+  },
+/* move.1 ${d-imm7-1}(${d-An}),(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_1), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_1_d_indirect_with_offset_1_s1_indirect_1, { 0x4007c00 }
+  },
+/* move.1 (${d-An}),(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_1_d_indirect_1_s1_indirect_1, { 0x4007c00 }
+  },
+/* move.1 (${d-An})${d-i4-1}++,(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_1), '+', '+', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_1_d_indirect_with_post_increment_1_s1_indirect_1, { 0x2007c00 }
+  },
+/* move.1 ${d-i4-1}(${d-An})++,(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_1), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_1_d_indirect_with_pre_increment_1_s1_indirect_1, { 0x2107c00 }
+  },
+/* move.1 ${d-direct-addr},(${s1-An})${s1-i4-1}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', 0 } },
+    & ifmt_move_1_d_direct_s1_indirect_with_post_increment_1, { 0x1007a00 }
+  },
+/* move.1 #${d-imm8},(${s1-An})${s1-i4-1}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', 0 } },
+    & ifmt_move_1_d_immediate_1_s1_indirect_with_post_increment_1, { 0x7a00 }
+  },
+/* move.1 (${d-An},${d-r}),(${s1-An})${s1-i4-1}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', 0 } },
+    & ifmt_move_1_d_indirect_with_index_1_s1_indirect_with_post_increment_1, { 0x3007a00 }
+  },
+/* move.1 ${d-imm7-1}(${d-An}),(${s1-An})${s1-i4-1}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_1), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', 0 } },
+    & ifmt_move_1_d_indirect_with_offset_1_s1_indirect_with_post_increment_1, { 0x4007a00 }
+  },
+/* move.1 (${d-An}),(${s1-An})${s1-i4-1}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', 0 } },
+    & ifmt_move_1_d_indirect_1_s1_indirect_with_post_increment_1, { 0x4007a00 }
+  },
+/* move.1 (${d-An})${d-i4-1}++,(${s1-An})${s1-i4-1}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_1), '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', 0 } },
+    & ifmt_move_1_d_indirect_with_post_increment_1_s1_indirect_with_post_increment_1, { 0x2007a00 }
+  },
+/* move.1 ${d-i4-1}(${d-An})++,(${s1-An})${s1-i4-1}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_1), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', 0 } },
+    & ifmt_move_1_d_indirect_with_pre_increment_1_s1_indirect_with_post_increment_1, { 0x2107a00 }
+  },
+/* move.1 ${d-direct-addr},${s1-i4-1}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_move_1_d_direct_s1_indirect_with_pre_increment_1, { 0x1007a10 }
+  },
+/* move.1 #${d-imm8},${s1-i4-1}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_move_1_d_immediate_1_s1_indirect_with_pre_increment_1, { 0x7a10 }
+  },
+/* move.1 (${d-An},${d-r}),${s1-i4-1}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_move_1_d_indirect_with_index_1_s1_indirect_with_pre_increment_1, { 0x3007a10 }
+  },
+/* move.1 ${d-imm7-1}(${d-An}),${s1-i4-1}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_1), '(', OP (D_AN), ')', ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_move_1_d_indirect_with_offset_1_s1_indirect_with_pre_increment_1, { 0x4007a10 }
+  },
+/* move.1 (${d-An}),${s1-i4-1}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_move_1_d_indirect_1_s1_indirect_with_pre_increment_1, { 0x4007a10 }
+  },
+/* move.1 (${d-An})${d-i4-1}++,${s1-i4-1}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_1), '+', '+', ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_move_1_d_indirect_with_post_increment_1_s1_indirect_with_pre_increment_1, { 0x2007a10 }
+  },
+/* move.1 ${d-i4-1}(${d-An})++,${s1-i4-1}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_1), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_move_1_d_indirect_with_pre_increment_1_s1_indirect_with_pre_increment_1, { 0x2107a10 }
+  },
+/* ext.2 ${d-direct-addr},${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_sysret_d_direct_s1_direct, { 0x100a900 }
+  },
+/* ext.2 #${d-imm8},${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_move_2_d_immediate_2_s1_direct, { 0xa900 }
+  },
+/* ext.2 (${d-An},${d-r}),${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_move_2_d_indirect_with_index_2_s1_direct, { 0x300a900 }
+  },
+/* ext.2 ${d-imm7-2}(${d-An}),${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_move_2_d_indirect_with_offset_2_s1_direct, { 0x400a900 }
+  },
+/* ext.2 (${d-An}),${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_move_2_d_indirect_2_s1_direct, { 0x400a900 }
+  },
+/* ext.2 (${d-An})${d-i4-2}++,${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_move_2_d_indirect_with_post_increment_2_s1_direct, { 0x200a900 }
+  },
+/* ext.2 ${d-i4-2}(${d-An})++,${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_move_2_d_indirect_with_pre_increment_2_s1_direct, { 0x210a900 }
+  },
+/* ext.2 ${d-direct-addr},#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_sysret_d_direct_s1_immediate, { 0x100a800 }
+  },
+/* ext.2 #${d-imm8},#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_move_2_d_immediate_2_s1_immediate, { 0xa800 }
+  },
+/* ext.2 (${d-An},${d-r}),#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_move_2_d_indirect_with_index_2_s1_immediate, { 0x300a800 }
+  },
+/* ext.2 ${d-imm7-2}(${d-An}),#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_move_2_d_indirect_with_offset_2_s1_immediate, { 0x400a800 }
+  },
+/* ext.2 (${d-An}),#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_move_2_d_indirect_2_s1_immediate, { 0x400a800 }
+  },
+/* ext.2 (${d-An})${d-i4-2}++,#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_move_2_d_indirect_with_post_increment_2_s1_immediate, { 0x200a800 }
+  },
+/* ext.2 ${d-i4-2}(${d-An})++,#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_move_2_d_indirect_with_pre_increment_2_s1_immediate, { 0x210a800 }
+  },
+/* ext.2 ${d-direct-addr},(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_move_2_d_direct_s1_indirect_with_index_2, { 0x100ab00 }
+  },
+/* ext.2 #${d-imm8},(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_move_2_d_immediate_2_s1_indirect_with_index_2, { 0xab00 }
+  },
+/* ext.2 (${d-An},${d-r}),(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_move_2_d_indirect_with_index_2_s1_indirect_with_index_2, { 0x300ab00 }
+  },
+/* ext.2 ${d-imm7-2}(${d-An}),(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_move_2_d_indirect_with_offset_2_s1_indirect_with_index_2, { 0x400ab00 }
+  },
+/* ext.2 (${d-An}),(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_move_2_d_indirect_2_s1_indirect_with_index_2, { 0x400ab00 }
+  },
+/* ext.2 (${d-An})${d-i4-2}++,(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_move_2_d_indirect_with_post_increment_2_s1_indirect_with_index_2, { 0x200ab00 }
+  },
+/* ext.2 ${d-i4-2}(${d-An})++,(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_move_2_d_indirect_with_pre_increment_2_s1_indirect_with_index_2, { 0x210ab00 }
+  },
+/* ext.2 ${d-direct-addr},${s1-imm7-2}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_2_d_direct_s1_indirect_with_offset_2, { 0x100ac00 }
+  },
+/* ext.2 #${d-imm8},${s1-imm7-2}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_2_d_immediate_2_s1_indirect_with_offset_2, { 0xac00 }
+  },
+/* ext.2 (${d-An},${d-r}),${s1-imm7-2}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_2_d_indirect_with_index_2_s1_indirect_with_offset_2, { 0x300ac00 }
+  },
+/* ext.2 ${d-imm7-2}(${d-An}),${s1-imm7-2}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_2_d_indirect_with_offset_2_s1_indirect_with_offset_2, { 0x400ac00 }
+  },
+/* ext.2 (${d-An}),${s1-imm7-2}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_2_d_indirect_2_s1_indirect_with_offset_2, { 0x400ac00 }
+  },
+/* ext.2 (${d-An})${d-i4-2}++,${s1-imm7-2}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_2_d_indirect_with_post_increment_2_s1_indirect_with_offset_2, { 0x200ac00 }
+  },
+/* ext.2 ${d-i4-2}(${d-An})++,${s1-imm7-2}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_2_d_indirect_with_pre_increment_2_s1_indirect_with_offset_2, { 0x210ac00 }
+  },
+/* ext.2 ${d-direct-addr},(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_2_d_direct_s1_indirect_2, { 0x100ac00 }
+  },
+/* ext.2 #${d-imm8},(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_2_d_immediate_2_s1_indirect_2, { 0xac00 }
+  },
+/* ext.2 (${d-An},${d-r}),(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_2_d_indirect_with_index_2_s1_indirect_2, { 0x300ac00 }
+  },
+/* ext.2 ${d-imm7-2}(${d-An}),(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_2_d_indirect_with_offset_2_s1_indirect_2, { 0x400ac00 }
+  },
+/* ext.2 (${d-An}),(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_2_d_indirect_2_s1_indirect_2, { 0x400ac00 }
+  },
+/* ext.2 (${d-An})${d-i4-2}++,(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_2_d_indirect_with_post_increment_2_s1_indirect_2, { 0x200ac00 }
+  },
+/* ext.2 ${d-i4-2}(${d-An})++,(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_2_d_indirect_with_pre_increment_2_s1_indirect_2, { 0x210ac00 }
+  },
+/* ext.2 ${d-direct-addr},(${s1-An})${s1-i4-2}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', 0 } },
+    & ifmt_move_2_d_direct_s1_indirect_with_post_increment_2, { 0x100aa00 }
+  },
+/* ext.2 #${d-imm8},(${s1-An})${s1-i4-2}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', 0 } },
+    & ifmt_move_2_d_immediate_2_s1_indirect_with_post_increment_2, { 0xaa00 }
+  },
+/* ext.2 (${d-An},${d-r}),(${s1-An})${s1-i4-2}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', 0 } },
+    & ifmt_move_2_d_indirect_with_index_2_s1_indirect_with_post_increment_2, { 0x300aa00 }
+  },
+/* ext.2 ${d-imm7-2}(${d-An}),(${s1-An})${s1-i4-2}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', 0 } },
+    & ifmt_move_2_d_indirect_with_offset_2_s1_indirect_with_post_increment_2, { 0x400aa00 }
+  },
+/* ext.2 (${d-An}),(${s1-An})${s1-i4-2}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', 0 } },
+    & ifmt_move_2_d_indirect_2_s1_indirect_with_post_increment_2, { 0x400aa00 }
+  },
+/* ext.2 (${d-An})${d-i4-2}++,(${s1-An})${s1-i4-2}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', 0 } },
+    & ifmt_move_2_d_indirect_with_post_increment_2_s1_indirect_with_post_increment_2, { 0x200aa00 }
+  },
+/* ext.2 ${d-i4-2}(${d-An})++,(${s1-An})${s1-i4-2}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', 0 } },
+    & ifmt_move_2_d_indirect_with_pre_increment_2_s1_indirect_with_post_increment_2, { 0x210aa00 }
+  },
+/* ext.2 ${d-direct-addr},${s1-i4-2}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_move_2_d_direct_s1_indirect_with_pre_increment_2, { 0x100aa10 }
+  },
+/* ext.2 #${d-imm8},${s1-i4-2}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_move_2_d_immediate_2_s1_indirect_with_pre_increment_2, { 0xaa10 }
+  },
+/* ext.2 (${d-An},${d-r}),${s1-i4-2}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_move_2_d_indirect_with_index_2_s1_indirect_with_pre_increment_2, { 0x300aa10 }
+  },
+/* ext.2 ${d-imm7-2}(${d-An}),${s1-i4-2}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_move_2_d_indirect_with_offset_2_s1_indirect_with_pre_increment_2, { 0x400aa10 }
+  },
+/* ext.2 (${d-An}),${s1-i4-2}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_move_2_d_indirect_2_s1_indirect_with_pre_increment_2, { 0x400aa10 }
+  },
+/* ext.2 (${d-An})${d-i4-2}++,${s1-i4-2}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_move_2_d_indirect_with_post_increment_2_s1_indirect_with_pre_increment_2, { 0x200aa10 }
+  },
+/* ext.2 ${d-i4-2}(${d-An})++,${s1-i4-2}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_move_2_d_indirect_with_pre_increment_2_s1_indirect_with_pre_increment_2, { 0x210aa10 }
+  },
+/* ext.1 ${d-direct-addr},${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_sysret_d_direct_s1_direct, { 0x100b900 }
+  },
+/* ext.1 #${d-imm8},${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_move_1_d_immediate_1_s1_direct, { 0xb900 }
+  },
+/* ext.1 (${d-An},${d-r}),${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_move_1_d_indirect_with_index_1_s1_direct, { 0x300b900 }
+  },
+/* ext.1 ${d-imm7-1}(${d-An}),${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_1), '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_move_1_d_indirect_with_offset_1_s1_direct, { 0x400b900 }
+  },
+/* ext.1 (${d-An}),${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_move_1_d_indirect_1_s1_direct, { 0x400b900 }
+  },
+/* ext.1 (${d-An})${d-i4-1}++,${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_1), '+', '+', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_move_1_d_indirect_with_post_increment_1_s1_direct, { 0x200b900 }
+  },
+/* ext.1 ${d-i4-1}(${d-An})++,${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_1), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_move_1_d_indirect_with_pre_increment_1_s1_direct, { 0x210b900 }
+  },
+/* ext.1 ${d-direct-addr},#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_sysret_d_direct_s1_immediate, { 0x100b800 }
+  },
+/* ext.1 #${d-imm8},#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_move_1_d_immediate_1_s1_immediate, { 0xb800 }
+  },
+/* ext.1 (${d-An},${d-r}),#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_move_1_d_indirect_with_index_1_s1_immediate, { 0x300b800 }
+  },
+/* ext.1 ${d-imm7-1}(${d-An}),#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_1), '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_move_1_d_indirect_with_offset_1_s1_immediate, { 0x400b800 }
+  },
+/* ext.1 (${d-An}),#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_move_1_d_indirect_1_s1_immediate, { 0x400b800 }
+  },
+/* ext.1 (${d-An})${d-i4-1}++,#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_1), '+', '+', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_move_1_d_indirect_with_post_increment_1_s1_immediate, { 0x200b800 }
+  },
+/* ext.1 ${d-i4-1}(${d-An})++,#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_1), '(', OP (D_AN), ')', '+', '+', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_move_1_d_indirect_with_pre_increment_1_s1_immediate, { 0x210b800 }
+  },
+/* ext.1 ${d-direct-addr},(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_move_1_d_direct_s1_indirect_with_index_1, { 0x100bb00 }
+  },
+/* ext.1 #${d-imm8},(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_move_1_d_immediate_1_s1_indirect_with_index_1, { 0xbb00 }
+  },
+/* ext.1 (${d-An},${d-r}),(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_move_1_d_indirect_with_index_1_s1_indirect_with_index_1, { 0x300bb00 }
+  },
+/* ext.1 ${d-imm7-1}(${d-An}),(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_1), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_move_1_d_indirect_with_offset_1_s1_indirect_with_index_1, { 0x400bb00 }
+  },
+/* ext.1 (${d-An}),(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_move_1_d_indirect_1_s1_indirect_with_index_1, { 0x400bb00 }
+  },
+/* ext.1 (${d-An})${d-i4-1}++,(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_1), '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_move_1_d_indirect_with_post_increment_1_s1_indirect_with_index_1, { 0x200bb00 }
+  },
+/* ext.1 ${d-i4-1}(${d-An})++,(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_1), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_move_1_d_indirect_with_pre_increment_1_s1_indirect_with_index_1, { 0x210bb00 }
+  },
+/* ext.1 ${d-direct-addr},${s1-imm7-1}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_1_d_direct_s1_indirect_with_offset_1, { 0x100bc00 }
+  },
+/* ext.1 #${d-imm8},${s1-imm7-1}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_1_d_immediate_1_s1_indirect_with_offset_1, { 0xbc00 }
+  },
+/* ext.1 (${d-An},${d-r}),${s1-imm7-1}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_1_d_indirect_with_index_1_s1_indirect_with_offset_1, { 0x300bc00 }
+  },
+/* ext.1 ${d-imm7-1}(${d-An}),${s1-imm7-1}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_1), '(', OP (D_AN), ')', ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_1_d_indirect_with_offset_1_s1_indirect_with_offset_1, { 0x400bc00 }
+  },
+/* ext.1 (${d-An}),${s1-imm7-1}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_1_d_indirect_1_s1_indirect_with_offset_1, { 0x400bc00 }
+  },
+/* ext.1 (${d-An})${d-i4-1}++,${s1-imm7-1}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_1), '+', '+', ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_1_d_indirect_with_post_increment_1_s1_indirect_with_offset_1, { 0x200bc00 }
+  },
+/* ext.1 ${d-i4-1}(${d-An})++,${s1-imm7-1}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_1), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_1_d_indirect_with_pre_increment_1_s1_indirect_with_offset_1, { 0x210bc00 }
+  },
+/* ext.1 ${d-direct-addr},(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_1_d_direct_s1_indirect_1, { 0x100bc00 }
+  },
+/* ext.1 #${d-imm8},(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_1_d_immediate_1_s1_indirect_1, { 0xbc00 }
+  },
+/* ext.1 (${d-An},${d-r}),(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_1_d_indirect_with_index_1_s1_indirect_1, { 0x300bc00 }
+  },
+/* ext.1 ${d-imm7-1}(${d-An}),(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_1), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_1_d_indirect_with_offset_1_s1_indirect_1, { 0x400bc00 }
+  },
+/* ext.1 (${d-An}),(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_1_d_indirect_1_s1_indirect_1, { 0x400bc00 }
+  },
+/* ext.1 (${d-An})${d-i4-1}++,(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_1), '+', '+', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_1_d_indirect_with_post_increment_1_s1_indirect_1, { 0x200bc00 }
+  },
+/* ext.1 ${d-i4-1}(${d-An})++,(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_1), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_1_d_indirect_with_pre_increment_1_s1_indirect_1, { 0x210bc00 }
+  },
+/* ext.1 ${d-direct-addr},(${s1-An})${s1-i4-1}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', 0 } },
+    & ifmt_move_1_d_direct_s1_indirect_with_post_increment_1, { 0x100ba00 }
+  },
+/* ext.1 #${d-imm8},(${s1-An})${s1-i4-1}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', 0 } },
+    & ifmt_move_1_d_immediate_1_s1_indirect_with_post_increment_1, { 0xba00 }
+  },
+/* ext.1 (${d-An},${d-r}),(${s1-An})${s1-i4-1}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', 0 } },
+    & ifmt_move_1_d_indirect_with_index_1_s1_indirect_with_post_increment_1, { 0x300ba00 }
+  },
+/* ext.1 ${d-imm7-1}(${d-An}),(${s1-An})${s1-i4-1}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_1), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', 0 } },
+    & ifmt_move_1_d_indirect_with_offset_1_s1_indirect_with_post_increment_1, { 0x400ba00 }
+  },
+/* ext.1 (${d-An}),(${s1-An})${s1-i4-1}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', 0 } },
+    & ifmt_move_1_d_indirect_1_s1_indirect_with_post_increment_1, { 0x400ba00 }
+  },
+/* ext.1 (${d-An})${d-i4-1}++,(${s1-An})${s1-i4-1}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_1), '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', 0 } },
+    & ifmt_move_1_d_indirect_with_post_increment_1_s1_indirect_with_post_increment_1, { 0x200ba00 }
+  },
+/* ext.1 ${d-i4-1}(${d-An})++,(${s1-An})${s1-i4-1}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_1), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', 0 } },
+    & ifmt_move_1_d_indirect_with_pre_increment_1_s1_indirect_with_post_increment_1, { 0x210ba00 }
+  },
+/* ext.1 ${d-direct-addr},${s1-i4-1}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_move_1_d_direct_s1_indirect_with_pre_increment_1, { 0x100ba10 }
+  },
+/* ext.1 #${d-imm8},${s1-i4-1}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_move_1_d_immediate_1_s1_indirect_with_pre_increment_1, { 0xba10 }
+  },
+/* ext.1 (${d-An},${d-r}),${s1-i4-1}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_move_1_d_indirect_with_index_1_s1_indirect_with_pre_increment_1, { 0x300ba10 }
+  },
+/* ext.1 ${d-imm7-1}(${d-An}),${s1-i4-1}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_1), '(', OP (D_AN), ')', ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_move_1_d_indirect_with_offset_1_s1_indirect_with_pre_increment_1, { 0x400ba10 }
+  },
+/* ext.1 (${d-An}),${s1-i4-1}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_move_1_d_indirect_1_s1_indirect_with_pre_increment_1, { 0x400ba10 }
+  },
+/* ext.1 (${d-An})${d-i4-1}++,${s1-i4-1}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_1), '+', '+', ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_move_1_d_indirect_with_post_increment_1_s1_indirect_with_pre_increment_1, { 0x200ba10 }
+  },
+/* ext.1 ${d-i4-1}(${d-An})++,${s1-i4-1}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_1), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_move_1_d_indirect_with_pre_increment_1_s1_indirect_with_pre_increment_1, { 0x210ba10 }
+  },
+/* movei ${d-direct-addr},#${imm16-2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '#', OP (IMM16_2), 0 } },
+    & ifmt_movei_d_direct, { 0xc9000000 }
+  },
+/* movei #${d-imm8},#${imm16-2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '#', OP (IMM16_2), 0 } },
+    & ifmt_movei_d_immediate_2, { 0xc8000000 }
+  },
+/* movei (${d-An},${d-r}),#${imm16-2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '#', OP (IMM16_2), 0 } },
+    & ifmt_movei_d_indirect_with_index_2, { 0xcb000000 }
+  },
+/* movei ${d-imm7-2}(${d-An}),#${imm16-2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', '#', OP (IMM16_2), 0 } },
+    & ifmt_movei_d_indirect_with_offset_2, { 0xcc000000 }
+  },
+/* movei (${d-An}),#${imm16-2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '#', OP (IMM16_2), 0 } },
+    & ifmt_movei_d_indirect_2, { 0xcc000000 }
+  },
+/* movei (${d-An})${d-i4-2}++,#${imm16-2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', '#', OP (IMM16_2), 0 } },
+    & ifmt_movei_d_indirect_with_post_increment_2, { 0xca000000 }
+  },
+/* movei ${d-i4-2}(${d-An})++,#${imm16-2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', '#', OP (IMM16_2), 0 } },
+    & ifmt_movei_d_indirect_with_pre_increment_2, { 0xca100000 }
+  },
+/* bclr ${d-direct-addr},${s1-direct-addr},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_DIRECT_ADDR), ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_direct_s1_direct, { 0x29000100 }
+  },
+/* bclr #${d-imm8},${s1-direct-addr},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_DIRECT_ADDR), ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_immediate_4_s1_direct, { 0x28000100 }
+  },
+/* bclr (${d-An},${d-r}),${s1-direct-addr},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_DIRECT_ADDR), ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_with_index_4_s1_direct, { 0x2b000100 }
+  },
+/* bclr ${d-imm7-4}(${d-An}),${s1-direct-addr},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_with_offset_4_s1_direct, { 0x2c000100 }
+  },
+/* bclr (${d-An}),${s1-direct-addr},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_4_s1_direct, { 0x2c000100 }
+  },
+/* bclr (${d-An})${d-i4-4}++,${s1-direct-addr},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_DIRECT_ADDR), ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_with_post_increment_4_s1_direct, { 0x2a000100 }
+  },
+/* bclr ${d-i4-4}(${d-An})++,${s1-direct-addr},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_DIRECT_ADDR), ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_with_pre_increment_4_s1_direct, { 0x2a100100 }
+  },
+/* bclr ${d-direct-addr},#${s1-imm8},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '#', OP (S1_IMM8), ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_direct_s1_immediate, { 0x29000000 }
+  },
+/* bclr #${d-imm8},#${s1-imm8},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '#', OP (S1_IMM8), ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_immediate_4_s1_immediate, { 0x28000000 }
+  },
+/* bclr (${d-An},${d-r}),#${s1-imm8},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '#', OP (S1_IMM8), ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_with_index_4_s1_immediate, { 0x2b000000 }
+  },
+/* bclr ${d-imm7-4}(${d-An}),#${s1-imm8},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_with_offset_4_s1_immediate, { 0x2c000000 }
+  },
+/* bclr (${d-An}),#${s1-imm8},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_4_s1_immediate, { 0x2c000000 }
+  },
+/* bclr (${d-An})${d-i4-4}++,#${s1-imm8},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '#', OP (S1_IMM8), ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_with_post_increment_4_s1_immediate, { 0x2a000000 }
+  },
+/* bclr ${d-i4-4}(${d-An})++,#${s1-imm8},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '#', OP (S1_IMM8), ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_with_pre_increment_4_s1_immediate, { 0x2a100000 }
+  },
+/* bclr ${d-direct-addr},(${s1-An},${s1-r}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_direct_s1_indirect_with_index_4, { 0x29000300 }
+  },
+/* bclr #${d-imm8},(${s1-An},${s1-r}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_immediate_4_s1_indirect_with_index_4, { 0x28000300 }
+  },
+/* bclr (${d-An},${d-r}),(${s1-An},${s1-r}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_with_index_4_s1_indirect_with_index_4, { 0x2b000300 }
+  },
+/* bclr ${d-imm7-4}(${d-An}),(${s1-An},${s1-r}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_with_offset_4_s1_indirect_with_index_4, { 0x2c000300 }
+  },
+/* bclr (${d-An}),(${s1-An},${s1-r}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_4_s1_indirect_with_index_4, { 0x2c000300 }
+  },
+/* bclr (${d-An})${d-i4-4}++,(${s1-An},${s1-r}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_with_post_increment_4_s1_indirect_with_index_4, { 0x2a000300 }
+  },
+/* bclr ${d-i4-4}(${d-An})++,(${s1-An},${s1-r}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_with_pre_increment_4_s1_indirect_with_index_4, { 0x2a100300 }
+  },
+/* bclr ${d-direct-addr},${s1-imm7-4}(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_direct_s1_indirect_with_offset_4, { 0x29000400 }
+  },
+/* bclr #${d-imm8},${s1-imm7-4}(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_immediate_4_s1_indirect_with_offset_4, { 0x28000400 }
+  },
+/* bclr (${d-An},${d-r}),${s1-imm7-4}(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_with_index_4_s1_indirect_with_offset_4, { 0x2b000400 }
+  },
+/* bclr ${d-imm7-4}(${d-An}),${s1-imm7-4}(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_with_offset_4_s1_indirect_with_offset_4, { 0x2c000400 }
+  },
+/* bclr (${d-An}),${s1-imm7-4}(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_4_s1_indirect_with_offset_4, { 0x2c000400 }
+  },
+/* bclr (${d-An})${d-i4-4}++,${s1-imm7-4}(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_with_post_increment_4_s1_indirect_with_offset_4, { 0x2a000400 }
+  },
+/* bclr ${d-i4-4}(${d-An})++,${s1-imm7-4}(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_with_pre_increment_4_s1_indirect_with_offset_4, { 0x2a100400 }
+  },
+/* bclr ${d-direct-addr},(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_direct_s1_indirect_4, { 0x29000400 }
+  },
+/* bclr #${d-imm8},(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_immediate_4_s1_indirect_4, { 0x28000400 }
+  },
+/* bclr (${d-An},${d-r}),(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_with_index_4_s1_indirect_4, { 0x2b000400 }
+  },
+/* bclr ${d-imm7-4}(${d-An}),(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_with_offset_4_s1_indirect_4, { 0x2c000400 }
+  },
+/* bclr (${d-An}),(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_4_s1_indirect_4, { 0x2c000400 }
+  },
+/* bclr (${d-An})${d-i4-4}++,(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_with_post_increment_4_s1_indirect_4, { 0x2a000400 }
+  },
+/* bclr ${d-i4-4}(${d-An})++,(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_with_pre_increment_4_s1_indirect_4, { 0x2a100400 }
+  },
+/* bclr ${d-direct-addr},(${s1-An})${s1-i4-4}++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_direct_s1_indirect_with_post_increment_4, { 0x29000200 }
+  },
+/* bclr #${d-imm8},(${s1-An})${s1-i4-4}++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_immediate_4_s1_indirect_with_post_increment_4, { 0x28000200 }
+  },
+/* bclr (${d-An},${d-r}),(${s1-An})${s1-i4-4}++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_with_index_4_s1_indirect_with_post_increment_4, { 0x2b000200 }
+  },
+/* bclr ${d-imm7-4}(${d-An}),(${s1-An})${s1-i4-4}++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_with_offset_4_s1_indirect_with_post_increment_4, { 0x2c000200 }
+  },
+/* bclr (${d-An}),(${s1-An})${s1-i4-4}++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_4_s1_indirect_with_post_increment_4, { 0x2c000200 }
+  },
+/* bclr (${d-An})${d-i4-4}++,(${s1-An})${s1-i4-4}++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_with_post_increment_4_s1_indirect_with_post_increment_4, { 0x2a000200 }
+  },
+/* bclr ${d-i4-4}(${d-An})++,(${s1-An})${s1-i4-4}++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_with_pre_increment_4_s1_indirect_with_post_increment_4, { 0x2a100200 }
+  },
+/* bclr ${d-direct-addr},${s1-i4-4}(${s1-An})++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_direct_s1_indirect_with_pre_increment_4, { 0x29000210 }
+  },
+/* bclr #${d-imm8},${s1-i4-4}(${s1-An})++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_immediate_4_s1_indirect_with_pre_increment_4, { 0x28000210 }
+  },
+/* bclr (${d-An},${d-r}),${s1-i4-4}(${s1-An})++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_with_index_4_s1_indirect_with_pre_increment_4, { 0x2b000210 }
+  },
+/* bclr ${d-imm7-4}(${d-An}),${s1-i4-4}(${s1-An})++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_with_offset_4_s1_indirect_with_pre_increment_4, { 0x2c000210 }
+  },
+/* bclr (${d-An}),${s1-i4-4}(${s1-An})++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_4_s1_indirect_with_pre_increment_4, { 0x2c000210 }
+  },
+/* bclr (${d-An})${d-i4-4}++,${s1-i4-4}(${s1-An})++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_with_post_increment_4_s1_indirect_with_pre_increment_4, { 0x2a000210 }
+  },
+/* bclr ${d-i4-4}(${d-An})++,${s1-i4-4}(${s1-An})++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_with_pre_increment_4_s1_indirect_with_pre_increment_4, { 0x2a100210 }
+  },
+/* bset ${d-direct-addr},${s1-direct-addr},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_DIRECT_ADDR), ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_direct_s1_direct, { 0x21000100 }
+  },
+/* bset #${d-imm8},${s1-direct-addr},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_DIRECT_ADDR), ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_immediate_4_s1_direct, { 0x20000100 }
+  },
+/* bset (${d-An},${d-r}),${s1-direct-addr},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_DIRECT_ADDR), ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_with_index_4_s1_direct, { 0x23000100 }
+  },
+/* bset ${d-imm7-4}(${d-An}),${s1-direct-addr},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_with_offset_4_s1_direct, { 0x24000100 }
+  },
+/* bset (${d-An}),${s1-direct-addr},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_4_s1_direct, { 0x24000100 }
+  },
+/* bset (${d-An})${d-i4-4}++,${s1-direct-addr},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_DIRECT_ADDR), ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_with_post_increment_4_s1_direct, { 0x22000100 }
+  },
+/* bset ${d-i4-4}(${d-An})++,${s1-direct-addr},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_DIRECT_ADDR), ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_with_pre_increment_4_s1_direct, { 0x22100100 }
+  },
+/* bset ${d-direct-addr},#${s1-imm8},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '#', OP (S1_IMM8), ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_direct_s1_immediate, { 0x21000000 }
+  },
+/* bset #${d-imm8},#${s1-imm8},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '#', OP (S1_IMM8), ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_immediate_4_s1_immediate, { 0x20000000 }
+  },
+/* bset (${d-An},${d-r}),#${s1-imm8},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '#', OP (S1_IMM8), ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_with_index_4_s1_immediate, { 0x23000000 }
+  },
+/* bset ${d-imm7-4}(${d-An}),#${s1-imm8},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_with_offset_4_s1_immediate, { 0x24000000 }
+  },
+/* bset (${d-An}),#${s1-imm8},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_4_s1_immediate, { 0x24000000 }
+  },
+/* bset (${d-An})${d-i4-4}++,#${s1-imm8},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '#', OP (S1_IMM8), ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_with_post_increment_4_s1_immediate, { 0x22000000 }
+  },
+/* bset ${d-i4-4}(${d-An})++,#${s1-imm8},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '#', OP (S1_IMM8), ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_with_pre_increment_4_s1_immediate, { 0x22100000 }
+  },
+/* bset ${d-direct-addr},(${s1-An},${s1-r}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_direct_s1_indirect_with_index_4, { 0x21000300 }
+  },
+/* bset #${d-imm8},(${s1-An},${s1-r}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_immediate_4_s1_indirect_with_index_4, { 0x20000300 }
+  },
+/* bset (${d-An},${d-r}),(${s1-An},${s1-r}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_with_index_4_s1_indirect_with_index_4, { 0x23000300 }
+  },
+/* bset ${d-imm7-4}(${d-An}),(${s1-An},${s1-r}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_with_offset_4_s1_indirect_with_index_4, { 0x24000300 }
+  },
+/* bset (${d-An}),(${s1-An},${s1-r}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_4_s1_indirect_with_index_4, { 0x24000300 }
+  },
+/* bset (${d-An})${d-i4-4}++,(${s1-An},${s1-r}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_with_post_increment_4_s1_indirect_with_index_4, { 0x22000300 }
+  },
+/* bset ${d-i4-4}(${d-An})++,(${s1-An},${s1-r}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_with_pre_increment_4_s1_indirect_with_index_4, { 0x22100300 }
+  },
+/* bset ${d-direct-addr},${s1-imm7-4}(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_direct_s1_indirect_with_offset_4, { 0x21000400 }
+  },
+/* bset #${d-imm8},${s1-imm7-4}(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_immediate_4_s1_indirect_with_offset_4, { 0x20000400 }
+  },
+/* bset (${d-An},${d-r}),${s1-imm7-4}(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_with_index_4_s1_indirect_with_offset_4, { 0x23000400 }
+  },
+/* bset ${d-imm7-4}(${d-An}),${s1-imm7-4}(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_with_offset_4_s1_indirect_with_offset_4, { 0x24000400 }
+  },
+/* bset (${d-An}),${s1-imm7-4}(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_4_s1_indirect_with_offset_4, { 0x24000400 }
+  },
+/* bset (${d-An})${d-i4-4}++,${s1-imm7-4}(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_with_post_increment_4_s1_indirect_with_offset_4, { 0x22000400 }
+  },
+/* bset ${d-i4-4}(${d-An})++,${s1-imm7-4}(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_with_pre_increment_4_s1_indirect_with_offset_4, { 0x22100400 }
+  },
+/* bset ${d-direct-addr},(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_direct_s1_indirect_4, { 0x21000400 }
+  },
+/* bset #${d-imm8},(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_immediate_4_s1_indirect_4, { 0x20000400 }
+  },
+/* bset (${d-An},${d-r}),(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_with_index_4_s1_indirect_4, { 0x23000400 }
+  },
+/* bset ${d-imm7-4}(${d-An}),(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_with_offset_4_s1_indirect_4, { 0x24000400 }
+  },
+/* bset (${d-An}),(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_4_s1_indirect_4, { 0x24000400 }
+  },
+/* bset (${d-An})${d-i4-4}++,(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_with_post_increment_4_s1_indirect_4, { 0x22000400 }
+  },
+/* bset ${d-i4-4}(${d-An})++,(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_with_pre_increment_4_s1_indirect_4, { 0x22100400 }
+  },
+/* bset ${d-direct-addr},(${s1-An})${s1-i4-4}++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_direct_s1_indirect_with_post_increment_4, { 0x21000200 }
+  },
+/* bset #${d-imm8},(${s1-An})${s1-i4-4}++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_immediate_4_s1_indirect_with_post_increment_4, { 0x20000200 }
+  },
+/* bset (${d-An},${d-r}),(${s1-An})${s1-i4-4}++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_with_index_4_s1_indirect_with_post_increment_4, { 0x23000200 }
+  },
+/* bset ${d-imm7-4}(${d-An}),(${s1-An})${s1-i4-4}++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_with_offset_4_s1_indirect_with_post_increment_4, { 0x24000200 }
+  },
+/* bset (${d-An}),(${s1-An})${s1-i4-4}++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_4_s1_indirect_with_post_increment_4, { 0x24000200 }
+  },
+/* bset (${d-An})${d-i4-4}++,(${s1-An})${s1-i4-4}++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_with_post_increment_4_s1_indirect_with_post_increment_4, { 0x22000200 }
+  },
+/* bset ${d-i4-4}(${d-An})++,(${s1-An})${s1-i4-4}++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_with_pre_increment_4_s1_indirect_with_post_increment_4, { 0x22100200 }
+  },
+/* bset ${d-direct-addr},${s1-i4-4}(${s1-An})++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_direct_s1_indirect_with_pre_increment_4, { 0x21000210 }
+  },
+/* bset #${d-imm8},${s1-i4-4}(${s1-An})++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_immediate_4_s1_indirect_with_pre_increment_4, { 0x20000210 }
+  },
+/* bset (${d-An},${d-r}),${s1-i4-4}(${s1-An})++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_with_index_4_s1_indirect_with_pre_increment_4, { 0x23000210 }
+  },
+/* bset ${d-imm7-4}(${d-An}),${s1-i4-4}(${s1-An})++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_with_offset_4_s1_indirect_with_pre_increment_4, { 0x24000210 }
+  },
+/* bset (${d-An}),${s1-i4-4}(${s1-An})++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_4_s1_indirect_with_pre_increment_4, { 0x24000210 }
+  },
+/* bset (${d-An})${d-i4-4}++,${s1-i4-4}(${s1-An})++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_with_post_increment_4_s1_indirect_with_pre_increment_4, { 0x22000210 }
+  },
+/* bset ${d-i4-4}(${d-An})++,${s1-i4-4}(${s1-An})++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bclr_d_indirect_with_pre_increment_4_s1_indirect_with_pre_increment_4, { 0x22100210 }
+  },
+/* btst ${s1-direct-addr},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_DIRECT_ADDR), ',', '#', OP (BIT5), 0 } },
+    & ifmt_btst_s1_direct_imm_bit5, { 0x10c00100 }
+  },
+/* btst #${s1-imm8},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (S1_IMM8), ',', '#', OP (BIT5), 0 } },
+    & ifmt_btst_s1_immediate_imm_bit5, { 0x10c00000 }
+  },
+/* btst (${s1-An},${s1-r}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_btst_s1_indirect_with_index_4_imm_bit5, { 0x10c00300 }
+  },
+/* btst ${s1-imm7-4}(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_btst_s1_indirect_with_offset_4_imm_bit5, { 0x10c00400 }
+  },
+/* btst (${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_btst_s1_indirect_4_imm_bit5, { 0x10c00400 }
+  },
+/* btst (${s1-An})${s1-i4-4}++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_btst_s1_indirect_with_post_increment_4_imm_bit5, { 0x10c00200 }
+  },
+/* btst ${s1-i4-4}(${s1-An})++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_btst_s1_indirect_with_pre_increment_4_imm_bit5, { 0x10c00210 }
+  },
+/* btst ${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_btst_s1_direct_dyn_reg, { 0x14c00100 }
+  },
+/* btst #${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_btst_s1_immediate_dyn_reg, { 0x14c00000 }
+  },
+/* btst (${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_btst_s1_indirect_with_index_4_dyn_reg, { 0x14c00300 }
+  },
+/* btst ${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_btst_s1_indirect_with_offset_4_dyn_reg, { 0x14c00400 }
+  },
+/* btst (${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_btst_s1_indirect_4_dyn_reg, { 0x14c00400 }
+  },
+/* btst (${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_btst_s1_indirect_with_post_increment_4_dyn_reg, { 0x14c00200 }
+  },
+/* btst ${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_btst_s1_indirect_with_pre_increment_4_dyn_reg, { 0x14c00210 }
+  },
+/* shmrg.2 ${Dn},${s1-direct-addr},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_DIRECT_ADDR), ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_2_imm_bit5_s1_direct, { 0x13c00100 }
+  },
+/* shmrg.2 ${Dn},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_shmrg_2_dyn_reg_s1_direct, { 0x17c00100 }
+  },
+/* shmrg.2 ${Dn},#${s1-imm8},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '#', OP (S1_IMM8), ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_2_imm_bit5_s1_immediate, { 0x13c00000 }
+  },
+/* shmrg.2 ${Dn},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_shmrg_2_dyn_reg_s1_immediate, { 0x17c00000 }
+  },
+/* shmrg.2 ${Dn},(${s1-An},${s1-r}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_2_imm_bit5_s1_indirect_with_index_2, { 0x13c00300 }
+  },
+/* shmrg.2 ${Dn},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_shmrg_2_dyn_reg_s1_indirect_with_index_2, { 0x17c00300 }
+  },
+/* shmrg.2 ${Dn},${s1-imm7-2}(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_2_imm_bit5_s1_indirect_with_offset_2, { 0x13c00400 }
+  },
+/* shmrg.2 ${Dn},${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_shmrg_2_dyn_reg_s1_indirect_with_offset_2, { 0x17c00400 }
+  },
+/* shmrg.2 ${Dn},(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_2_imm_bit5_s1_indirect_2, { 0x13c00400 }
+  },
+/* shmrg.2 ${Dn},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_shmrg_2_dyn_reg_s1_indirect_2, { 0x17c00400 }
+  },
+/* shmrg.2 ${Dn},(${s1-An})${s1-i4-2}++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_2_imm_bit5_s1_indirect_with_post_increment_2, { 0x13c00200 }
+  },
+/* shmrg.2 ${Dn},(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_shmrg_2_dyn_reg_s1_indirect_with_post_increment_2, { 0x17c00200 }
+  },
+/* shmrg.2 ${Dn},${s1-i4-2}(${s1-An})++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_2_imm_bit5_s1_indirect_with_pre_increment_2, { 0x13c00210 }
+  },
+/* shmrg.2 ${Dn},${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_shmrg_2_dyn_reg_s1_indirect_with_pre_increment_2, { 0x17c00210 }
+  },
+/* shmrg.1 ${Dn},${s1-direct-addr},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_DIRECT_ADDR), ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_2_imm_bit5_s1_direct, { 0x13e00100 }
+  },
+/* shmrg.1 ${Dn},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_shmrg_2_dyn_reg_s1_direct, { 0x17e00100 }
+  },
+/* shmrg.1 ${Dn},#${s1-imm8},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '#', OP (S1_IMM8), ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_2_imm_bit5_s1_immediate, { 0x13e00000 }
+  },
+/* shmrg.1 ${Dn},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_shmrg_2_dyn_reg_s1_immediate, { 0x17e00000 }
+  },
+/* shmrg.1 ${Dn},(${s1-An},${s1-r}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_1_imm_bit5_s1_indirect_with_index_1, { 0x13e00300 }
+  },
+/* shmrg.1 ${Dn},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_shmrg_1_dyn_reg_s1_indirect_with_index_1, { 0x17e00300 }
+  },
+/* shmrg.1 ${Dn},${s1-imm7-1}(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_1_imm_bit5_s1_indirect_with_offset_1, { 0x13e00400 }
+  },
+/* shmrg.1 ${Dn},${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_shmrg_1_dyn_reg_s1_indirect_with_offset_1, { 0x17e00400 }
+  },
+/* shmrg.1 ${Dn},(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_1_imm_bit5_s1_indirect_1, { 0x13e00400 }
+  },
+/* shmrg.1 ${Dn},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_shmrg_1_dyn_reg_s1_indirect_1, { 0x17e00400 }
+  },
+/* shmrg.1 ${Dn},(${s1-An})${s1-i4-1}++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_1_imm_bit5_s1_indirect_with_post_increment_1, { 0x13e00200 }
+  },
+/* shmrg.1 ${Dn},(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_shmrg_1_dyn_reg_s1_indirect_with_post_increment_1, { 0x17e00200 }
+  },
+/* shmrg.1 ${Dn},${s1-i4-1}(${s1-An})++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_1_imm_bit5_s1_indirect_with_pre_increment_1, { 0x13e00210 }
+  },
+/* shmrg.1 ${Dn},${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_shmrg_1_dyn_reg_s1_indirect_with_pre_increment_1, { 0x17e00210 }
+  },
+/* crcgen ${s1-direct-addr},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_DIRECT_ADDR), ',', '#', OP (BIT5), 0 } },
+    & ifmt_btst_s1_direct_imm_bit5, { 0x11000100 }
+  },
+/* crcgen #${s1-imm8},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (S1_IMM8), ',', '#', OP (BIT5), 0 } },
+    & ifmt_btst_s1_immediate_imm_bit5, { 0x11000000 }
+  },
+/* crcgen (${s1-An},${s1-r}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_crcgen_s1_indirect_with_index_1_imm_bit5, { 0x11000300 }
+  },
+/* crcgen ${s1-imm7-1}(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_IMM7_1), '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_crcgen_s1_indirect_with_offset_1_imm_bit5, { 0x11000400 }
+  },
+/* crcgen (${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_crcgen_s1_indirect_1_imm_bit5, { 0x11000400 }
+  },
+/* crcgen (${s1-An})${s1-i4-1}++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_crcgen_s1_indirect_with_post_increment_1_imm_bit5, { 0x11000200 }
+  },
+/* crcgen ${s1-i4-1}(${s1-An})++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_crcgen_s1_indirect_with_pre_increment_1_imm_bit5, { 0x11000210 }
+  },
+/* crcgen ${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_btst_s1_direct_dyn_reg, { 0x15000100 }
+  },
+/* crcgen #${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_btst_s1_immediate_dyn_reg, { 0x15000000 }
+  },
+/* crcgen (${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_crcgen_s1_indirect_with_index_1_dyn_reg, { 0x15000300 }
+  },
+/* crcgen ${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_IMM7_1), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_crcgen_s1_indirect_with_offset_1_dyn_reg, { 0x15000400 }
+  },
+/* crcgen (${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_crcgen_s1_indirect_1_dyn_reg, { 0x15000400 }
+  },
+/* crcgen (${s1-An})${s1-i4-1}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_crcgen_s1_indirect_with_post_increment_1_dyn_reg, { 0x15000200 }
+  },
+/* crcgen ${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_crcgen_s1_indirect_with_pre_increment_1_dyn_reg, { 0x15000210 }
+  },
+/* bfextu ${Dn},${s1-direct-addr},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_DIRECT_ADDR), ',', '#', OP (BIT5), 0 } },
+    & ifmt_bfextu_s1_direct_imm_bit5, { 0x12c00100 }
+  },
+/* bfextu ${Dn},#${s1-imm8},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '#', OP (S1_IMM8), ',', '#', OP (BIT5), 0 } },
+    & ifmt_bfextu_s1_immediate_imm_bit5, { 0x12c00000 }
+  },
+/* bfextu ${Dn},(${s1-An},${s1-r}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bfextu_s1_indirect_with_index_4_imm_bit5, { 0x12c00300 }
+  },
+/* bfextu ${Dn},${s1-imm7-4}(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bfextu_s1_indirect_with_offset_4_imm_bit5, { 0x12c00400 }
+  },
+/* bfextu ${Dn},(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bfextu_s1_indirect_4_imm_bit5, { 0x12c00400 }
+  },
+/* bfextu ${Dn},(${s1-An})${s1-i4-4}++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bfextu_s1_indirect_with_post_increment_4_imm_bit5, { 0x12c00200 }
+  },
+/* bfextu ${Dn},${s1-i4-4}(${s1-An})++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bfextu_s1_indirect_with_pre_increment_4_imm_bit5, { 0x12c00210 }
+  },
+/* bfextu ${Dn},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_bfextu_s1_direct_dyn_reg, { 0x16c00100 }
+  },
+/* bfextu ${Dn},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_bfextu_s1_immediate_dyn_reg, { 0x16c00000 }
+  },
+/* bfextu ${Dn},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_bfextu_s1_indirect_with_index_4_dyn_reg, { 0x16c00300 }
+  },
+/* bfextu ${Dn},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_bfextu_s1_indirect_with_offset_4_dyn_reg, { 0x16c00400 }
+  },
+/* bfextu ${Dn},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_bfextu_s1_indirect_4_dyn_reg, { 0x16c00400 }
+  },
+/* bfextu ${Dn},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_bfextu_s1_indirect_with_post_increment_4_dyn_reg, { 0x16c00200 }
+  },
+/* bfextu ${Dn},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_bfextu_s1_indirect_with_pre_increment_4_dyn_reg, { 0x16c00210 }
+  },
+/* bfrvrs ${Dn},${s1-direct-addr},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_DIRECT_ADDR), ',', '#', OP (BIT5), 0 } },
+    & ifmt_bfextu_s1_direct_imm_bit5, { 0x13000100 }
+  },
+/* bfrvrs ${Dn},#${s1-imm8},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '#', OP (S1_IMM8), ',', '#', OP (BIT5), 0 } },
+    & ifmt_bfextu_s1_immediate_imm_bit5, { 0x13000000 }
+  },
+/* bfrvrs ${Dn},(${s1-An},${s1-r}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bfextu_s1_indirect_with_index_4_imm_bit5, { 0x13000300 }
+  },
+/* bfrvrs ${Dn},${s1-imm7-4}(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bfextu_s1_indirect_with_offset_4_imm_bit5, { 0x13000400 }
+  },
+/* bfrvrs ${Dn},(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bfextu_s1_indirect_4_imm_bit5, { 0x13000400 }
+  },
+/* bfrvrs ${Dn},(${s1-An})${s1-i4-4}++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bfextu_s1_indirect_with_post_increment_4_imm_bit5, { 0x13000200 }
+  },
+/* bfrvrs ${Dn},${s1-i4-4}(${s1-An})++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bfextu_s1_indirect_with_pre_increment_4_imm_bit5, { 0x13000210 }
+  },
+/* bfrvrs ${Dn},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_bfextu_s1_direct_dyn_reg, { 0x17000100 }
+  },
+/* bfrvrs ${Dn},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_bfextu_s1_immediate_dyn_reg, { 0x17000000 }
+  },
+/* bfrvrs ${Dn},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_bfextu_s1_indirect_with_index_4_dyn_reg, { 0x17000300 }
+  },
+/* bfrvrs ${Dn},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_bfextu_s1_indirect_with_offset_4_dyn_reg, { 0x17000400 }
+  },
+/* bfrvrs ${Dn},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_bfextu_s1_indirect_4_dyn_reg, { 0x17000400 }
+  },
+/* bfrvrs ${Dn},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_bfextu_s1_indirect_with_post_increment_4_dyn_reg, { 0x17000200 }
+  },
+/* bfrvrs ${Dn},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_bfextu_s1_indirect_with_pre_increment_4_dyn_reg, { 0x17000210 }
+  },
+/* merge ${Dn},${s1-direct-addr},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_DIRECT_ADDR), ',', '#', OP (BIT5), 0 } },
+    & ifmt_bfextu_s1_direct_imm_bit5, { 0x13800100 }
+  },
+/* merge ${Dn},#${s1-imm8},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '#', OP (S1_IMM8), ',', '#', OP (BIT5), 0 } },
+    & ifmt_bfextu_s1_immediate_imm_bit5, { 0x13800000 }
+  },
+/* merge ${Dn},(${s1-An},${s1-r}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bfextu_s1_indirect_with_index_4_imm_bit5, { 0x13800300 }
+  },
+/* merge ${Dn},${s1-imm7-4}(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bfextu_s1_indirect_with_offset_4_imm_bit5, { 0x13800400 }
+  },
+/* merge ${Dn},(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bfextu_s1_indirect_4_imm_bit5, { 0x13800400 }
+  },
+/* merge ${Dn},(${s1-An})${s1-i4-4}++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bfextu_s1_indirect_with_post_increment_4_imm_bit5, { 0x13800200 }
+  },
+/* merge ${Dn},${s1-i4-4}(${s1-An})++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bfextu_s1_indirect_with_pre_increment_4_imm_bit5, { 0x13800210 }
+  },
+/* merge ${Dn},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_bfextu_s1_direct_dyn_reg, { 0x17800100 }
+  },
+/* merge ${Dn},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_bfextu_s1_immediate_dyn_reg, { 0x17800000 }
+  },
+/* merge ${Dn},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_bfextu_s1_indirect_with_index_4_dyn_reg, { 0x17800300 }
+  },
+/* merge ${Dn},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_bfextu_s1_indirect_with_offset_4_dyn_reg, { 0x17800400 }
+  },
+/* merge ${Dn},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_bfextu_s1_indirect_4_dyn_reg, { 0x17800400 }
+  },
+/* merge ${Dn},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_bfextu_s1_indirect_with_post_increment_4_dyn_reg, { 0x17800200 }
+  },
+/* merge ${Dn},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_bfextu_s1_indirect_with_pre_increment_4_dyn_reg, { 0x17800210 }
+  },
+/* shftd ${Dn},${s1-direct-addr},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_DIRECT_ADDR), ',', '#', OP (BIT5), 0 } },
+    & ifmt_bfextu_s1_direct_imm_bit5, { 0x13400100 }
+  },
+/* shftd ${Dn},#${s1-imm8},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '#', OP (S1_IMM8), ',', '#', OP (BIT5), 0 } },
+    & ifmt_bfextu_s1_immediate_imm_bit5, { 0x13400000 }
+  },
+/* shftd ${Dn},(${s1-An},${s1-r}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bfextu_s1_indirect_with_index_4_imm_bit5, { 0x13400300 }
+  },
+/* shftd ${Dn},${s1-imm7-4}(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bfextu_s1_indirect_with_offset_4_imm_bit5, { 0x13400400 }
+  },
+/* shftd ${Dn},(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bfextu_s1_indirect_4_imm_bit5, { 0x13400400 }
+  },
+/* shftd ${Dn},(${s1-An})${s1-i4-4}++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bfextu_s1_indirect_with_post_increment_4_imm_bit5, { 0x13400200 }
+  },
+/* shftd ${Dn},${s1-i4-4}(${s1-An})++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_bfextu_s1_indirect_with_pre_increment_4_imm_bit5, { 0x13400210 }
+  },
+/* shftd ${Dn},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_bfextu_s1_direct_dyn_reg, { 0x17400100 }
+  },
+/* shftd ${Dn},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_bfextu_s1_immediate_dyn_reg, { 0x17400000 }
+  },
+/* shftd ${Dn},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_bfextu_s1_indirect_with_index_4_dyn_reg, { 0x17400300 }
+  },
+/* shftd ${Dn},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_bfextu_s1_indirect_with_offset_4_dyn_reg, { 0x17400400 }
+  },
+/* shftd ${Dn},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_bfextu_s1_indirect_4_dyn_reg, { 0x17400400 }
+  },
+/* shftd ${Dn},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_bfextu_s1_indirect_with_post_increment_4_dyn_reg, { 0x17400200 }
+  },
+/* shftd ${Dn},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_bfextu_s1_indirect_with_pre_increment_4_dyn_reg, { 0x17400210 }
+  },
+/* asr.1 ${Dn},${s1-direct-addr},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_DIRECT_ADDR), ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_2_imm_bit5_s1_direct, { 0x11800100 }
+  },
+/* asr.1 ${Dn},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_shmrg_2_dyn_reg_s1_direct, { 0x15800100 }
+  },
+/* asr.1 ${Dn},#${s1-imm8},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '#', OP (S1_IMM8), ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_2_imm_bit5_s1_immediate, { 0x11800000 }
+  },
+/* asr.1 ${Dn},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_shmrg_2_dyn_reg_s1_immediate, { 0x15800000 }
+  },
+/* asr.1 ${Dn},(${s1-An},${s1-r}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_1_imm_bit5_s1_indirect_with_index_1, { 0x11800300 }
+  },
+/* asr.1 ${Dn},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_shmrg_1_dyn_reg_s1_indirect_with_index_1, { 0x15800300 }
+  },
+/* asr.1 ${Dn},${s1-imm7-1}(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_1_imm_bit5_s1_indirect_with_offset_1, { 0x11800400 }
+  },
+/* asr.1 ${Dn},${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_shmrg_1_dyn_reg_s1_indirect_with_offset_1, { 0x15800400 }
+  },
+/* asr.1 ${Dn},(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_1_imm_bit5_s1_indirect_1, { 0x11800400 }
+  },
+/* asr.1 ${Dn},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_shmrg_1_dyn_reg_s1_indirect_1, { 0x15800400 }
+  },
+/* asr.1 ${Dn},(${s1-An})${s1-i4-1}++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_1_imm_bit5_s1_indirect_with_post_increment_1, { 0x11800200 }
+  },
+/* asr.1 ${Dn},(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_shmrg_1_dyn_reg_s1_indirect_with_post_increment_1, { 0x15800200 }
+  },
+/* asr.1 ${Dn},${s1-i4-1}(${s1-An})++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_1_imm_bit5_s1_indirect_with_pre_increment_1, { 0x11800210 }
+  },
+/* asr.1 ${Dn},${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_shmrg_1_dyn_reg_s1_indirect_with_pre_increment_1, { 0x15800210 }
+  },
+/* lsl.1 ${Dn},${s1-direct-addr},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_DIRECT_ADDR), ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_2_imm_bit5_s1_direct, { 0x11400100 }
+  },
+/* lsl.1 ${Dn},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_shmrg_2_dyn_reg_s1_direct, { 0x15400100 }
+  },
+/* lsl.1 ${Dn},#${s1-imm8},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '#', OP (S1_IMM8), ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_2_imm_bit5_s1_immediate, { 0x11400000 }
+  },
+/* lsl.1 ${Dn},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_shmrg_2_dyn_reg_s1_immediate, { 0x15400000 }
+  },
+/* lsl.1 ${Dn},(${s1-An},${s1-r}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_1_imm_bit5_s1_indirect_with_index_1, { 0x11400300 }
+  },
+/* lsl.1 ${Dn},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_shmrg_1_dyn_reg_s1_indirect_with_index_1, { 0x15400300 }
+  },
+/* lsl.1 ${Dn},${s1-imm7-1}(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_1_imm_bit5_s1_indirect_with_offset_1, { 0x11400400 }
+  },
+/* lsl.1 ${Dn},${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_shmrg_1_dyn_reg_s1_indirect_with_offset_1, { 0x15400400 }
+  },
+/* lsl.1 ${Dn},(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_1_imm_bit5_s1_indirect_1, { 0x11400400 }
+  },
+/* lsl.1 ${Dn},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_shmrg_1_dyn_reg_s1_indirect_1, { 0x15400400 }
+  },
+/* lsl.1 ${Dn},(${s1-An})${s1-i4-1}++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_1_imm_bit5_s1_indirect_with_post_increment_1, { 0x11400200 }
+  },
+/* lsl.1 ${Dn},(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_shmrg_1_dyn_reg_s1_indirect_with_post_increment_1, { 0x15400200 }
+  },
+/* lsl.1 ${Dn},${s1-i4-1}(${s1-An})++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_1_imm_bit5_s1_indirect_with_pre_increment_1, { 0x11400210 }
+  },
+/* lsl.1 ${Dn},${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_shmrg_1_dyn_reg_s1_indirect_with_pre_increment_1, { 0x15400210 }
+  },
+/* lsr.1 ${Dn},${s1-direct-addr},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_DIRECT_ADDR), ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_2_imm_bit5_s1_direct, { 0x11600100 }
+  },
+/* lsr.1 ${Dn},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_shmrg_2_dyn_reg_s1_direct, { 0x15600100 }
+  },
+/* lsr.1 ${Dn},#${s1-imm8},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '#', OP (S1_IMM8), ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_2_imm_bit5_s1_immediate, { 0x11600000 }
+  },
+/* lsr.1 ${Dn},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_shmrg_2_dyn_reg_s1_immediate, { 0x15600000 }
+  },
+/* lsr.1 ${Dn},(${s1-An},${s1-r}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_1_imm_bit5_s1_indirect_with_index_1, { 0x11600300 }
+  },
+/* lsr.1 ${Dn},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_shmrg_1_dyn_reg_s1_indirect_with_index_1, { 0x15600300 }
+  },
+/* lsr.1 ${Dn},${s1-imm7-1}(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_1_imm_bit5_s1_indirect_with_offset_1, { 0x11600400 }
+  },
+/* lsr.1 ${Dn},${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_shmrg_1_dyn_reg_s1_indirect_with_offset_1, { 0x15600400 }
+  },
+/* lsr.1 ${Dn},(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_1_imm_bit5_s1_indirect_1, { 0x11600400 }
+  },
+/* lsr.1 ${Dn},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_shmrg_1_dyn_reg_s1_indirect_1, { 0x15600400 }
+  },
+/* lsr.1 ${Dn},(${s1-An})${s1-i4-1}++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_1_imm_bit5_s1_indirect_with_post_increment_1, { 0x11600200 }
+  },
+/* lsr.1 ${Dn},(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_shmrg_1_dyn_reg_s1_indirect_with_post_increment_1, { 0x15600200 }
+  },
+/* lsr.1 ${Dn},${s1-i4-1}(${s1-An})++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_1_imm_bit5_s1_indirect_with_pre_increment_1, { 0x11600210 }
+  },
+/* lsr.1 ${Dn},${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_shmrg_1_dyn_reg_s1_indirect_with_pre_increment_1, { 0x15600210 }
+  },
+/* asr.2 ${Dn},${s1-direct-addr},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_DIRECT_ADDR), ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_2_imm_bit5_s1_direct, { 0x12a00100 }
+  },
+/* asr.2 ${Dn},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_shmrg_2_dyn_reg_s1_direct, { 0x16a00100 }
+  },
+/* asr.2 ${Dn},#${s1-imm8},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '#', OP (S1_IMM8), ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_2_imm_bit5_s1_immediate, { 0x12a00000 }
+  },
+/* asr.2 ${Dn},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_shmrg_2_dyn_reg_s1_immediate, { 0x16a00000 }
+  },
+/* asr.2 ${Dn},(${s1-An},${s1-r}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_2_imm_bit5_s1_indirect_with_index_2, { 0x12a00300 }
+  },
+/* asr.2 ${Dn},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_shmrg_2_dyn_reg_s1_indirect_with_index_2, { 0x16a00300 }
+  },
+/* asr.2 ${Dn},${s1-imm7-2}(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_2_imm_bit5_s1_indirect_with_offset_2, { 0x12a00400 }
+  },
+/* asr.2 ${Dn},${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_shmrg_2_dyn_reg_s1_indirect_with_offset_2, { 0x16a00400 }
+  },
+/* asr.2 ${Dn},(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_2_imm_bit5_s1_indirect_2, { 0x12a00400 }
+  },
+/* asr.2 ${Dn},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_shmrg_2_dyn_reg_s1_indirect_2, { 0x16a00400 }
+  },
+/* asr.2 ${Dn},(${s1-An})${s1-i4-2}++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_2_imm_bit5_s1_indirect_with_post_increment_2, { 0x12a00200 }
+  },
+/* asr.2 ${Dn},(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_shmrg_2_dyn_reg_s1_indirect_with_post_increment_2, { 0x16a00200 }
+  },
+/* asr.2 ${Dn},${s1-i4-2}(${s1-An})++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_2_imm_bit5_s1_indirect_with_pre_increment_2, { 0x12a00210 }
+  },
+/* asr.2 ${Dn},${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_shmrg_2_dyn_reg_s1_indirect_with_pre_increment_2, { 0x16a00210 }
+  },
+/* lsl.2 ${Dn},${s1-direct-addr},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_DIRECT_ADDR), ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_2_imm_bit5_s1_direct, { 0x12200100 }
+  },
+/* lsl.2 ${Dn},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_shmrg_2_dyn_reg_s1_direct, { 0x16200100 }
+  },
+/* lsl.2 ${Dn},#${s1-imm8},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '#', OP (S1_IMM8), ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_2_imm_bit5_s1_immediate, { 0x12200000 }
+  },
+/* lsl.2 ${Dn},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_shmrg_2_dyn_reg_s1_immediate, { 0x16200000 }
+  },
+/* lsl.2 ${Dn},(${s1-An},${s1-r}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_2_imm_bit5_s1_indirect_with_index_2, { 0x12200300 }
+  },
+/* lsl.2 ${Dn},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_shmrg_2_dyn_reg_s1_indirect_with_index_2, { 0x16200300 }
+  },
+/* lsl.2 ${Dn},${s1-imm7-2}(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_2_imm_bit5_s1_indirect_with_offset_2, { 0x12200400 }
+  },
+/* lsl.2 ${Dn},${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_shmrg_2_dyn_reg_s1_indirect_with_offset_2, { 0x16200400 }
+  },
+/* lsl.2 ${Dn},(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_2_imm_bit5_s1_indirect_2, { 0x12200400 }
+  },
+/* lsl.2 ${Dn},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_shmrg_2_dyn_reg_s1_indirect_2, { 0x16200400 }
+  },
+/* lsl.2 ${Dn},(${s1-An})${s1-i4-2}++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_2_imm_bit5_s1_indirect_with_post_increment_2, { 0x12200200 }
+  },
+/* lsl.2 ${Dn},(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_shmrg_2_dyn_reg_s1_indirect_with_post_increment_2, { 0x16200200 }
+  },
+/* lsl.2 ${Dn},${s1-i4-2}(${s1-An})++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_2_imm_bit5_s1_indirect_with_pre_increment_2, { 0x12200210 }
+  },
+/* lsl.2 ${Dn},${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_shmrg_2_dyn_reg_s1_indirect_with_pre_increment_2, { 0x16200210 }
+  },
+/* lsr.2 ${Dn},${s1-direct-addr},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_DIRECT_ADDR), ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_2_imm_bit5_s1_direct, { 0x12600100 }
+  },
+/* lsr.2 ${Dn},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_shmrg_2_dyn_reg_s1_direct, { 0x16600100 }
+  },
+/* lsr.2 ${Dn},#${s1-imm8},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '#', OP (S1_IMM8), ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_2_imm_bit5_s1_immediate, { 0x12600000 }
+  },
+/* lsr.2 ${Dn},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_shmrg_2_dyn_reg_s1_immediate, { 0x16600000 }
+  },
+/* lsr.2 ${Dn},(${s1-An},${s1-r}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_2_imm_bit5_s1_indirect_with_index_2, { 0x12600300 }
+  },
+/* lsr.2 ${Dn},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_shmrg_2_dyn_reg_s1_indirect_with_index_2, { 0x16600300 }
+  },
+/* lsr.2 ${Dn},${s1-imm7-2}(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_2_imm_bit5_s1_indirect_with_offset_2, { 0x12600400 }
+  },
+/* lsr.2 ${Dn},${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_shmrg_2_dyn_reg_s1_indirect_with_offset_2, { 0x16600400 }
+  },
+/* lsr.2 ${Dn},(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_2_imm_bit5_s1_indirect_2, { 0x12600400 }
+  },
+/* lsr.2 ${Dn},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_shmrg_2_dyn_reg_s1_indirect_2, { 0x16600400 }
+  },
+/* lsr.2 ${Dn},(${s1-An})${s1-i4-2}++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_2_imm_bit5_s1_indirect_with_post_increment_2, { 0x12600200 }
+  },
+/* lsr.2 ${Dn},(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_shmrg_2_dyn_reg_s1_indirect_with_post_increment_2, { 0x16600200 }
+  },
+/* lsr.2 ${Dn},${s1-i4-2}(${s1-An})++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_2_imm_bit5_s1_indirect_with_pre_increment_2, { 0x12600210 }
+  },
+/* lsr.2 ${Dn},${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_shmrg_2_dyn_reg_s1_indirect_with_pre_increment_2, { 0x16600210 }
+  },
+/* asr.4 ${Dn},${s1-direct-addr},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_DIRECT_ADDR), ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_2_imm_bit5_s1_direct, { 0x12800100 }
+  },
+/* asr.4 ${Dn},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_shmrg_2_dyn_reg_s1_direct, { 0x16800100 }
+  },
+/* asr.4 ${Dn},#${s1-imm8},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '#', OP (S1_IMM8), ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_2_imm_bit5_s1_immediate, { 0x12800000 }
+  },
+/* asr.4 ${Dn},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_shmrg_2_dyn_reg_s1_immediate, { 0x16800000 }
+  },
+/* asr.4 ${Dn},(${s1-An},${s1-r}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_asr_4_imm_bit5_s1_indirect_with_index_4, { 0x12800300 }
+  },
+/* asr.4 ${Dn},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_asr_4_dyn_reg_s1_indirect_with_index_4, { 0x16800300 }
+  },
+/* asr.4 ${Dn},${s1-imm7-4}(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_asr_4_imm_bit5_s1_indirect_with_offset_4, { 0x12800400 }
+  },
+/* asr.4 ${Dn},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_asr_4_dyn_reg_s1_indirect_with_offset_4, { 0x16800400 }
+  },
+/* asr.4 ${Dn},(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_asr_4_imm_bit5_s1_indirect_4, { 0x12800400 }
+  },
+/* asr.4 ${Dn},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_asr_4_dyn_reg_s1_indirect_4, { 0x16800400 }
+  },
+/* asr.4 ${Dn},(${s1-An})${s1-i4-4}++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_asr_4_imm_bit5_s1_indirect_with_post_increment_4, { 0x12800200 }
+  },
+/* asr.4 ${Dn},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_asr_4_dyn_reg_s1_indirect_with_post_increment_4, { 0x16800200 }
+  },
+/* asr.4 ${Dn},${s1-i4-4}(${s1-An})++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_asr_4_imm_bit5_s1_indirect_with_pre_increment_4, { 0x12800210 }
+  },
+/* asr.4 ${Dn},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_asr_4_dyn_reg_s1_indirect_with_pre_increment_4, { 0x16800210 }
+  },
+/* lsl.4 ${Dn},${s1-direct-addr},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_DIRECT_ADDR), ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_2_imm_bit5_s1_direct, { 0x12000100 }
+  },
+/* lsl.4 ${Dn},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_shmrg_2_dyn_reg_s1_direct, { 0x16000100 }
+  },
+/* lsl.4 ${Dn},#${s1-imm8},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '#', OP (S1_IMM8), ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_2_imm_bit5_s1_immediate, { 0x12000000 }
+  },
+/* lsl.4 ${Dn},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_shmrg_2_dyn_reg_s1_immediate, { 0x16000000 }
+  },
+/* lsl.4 ${Dn},(${s1-An},${s1-r}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_asr_4_imm_bit5_s1_indirect_with_index_4, { 0x12000300 }
+  },
+/* lsl.4 ${Dn},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_asr_4_dyn_reg_s1_indirect_with_index_4, { 0x16000300 }
+  },
+/* lsl.4 ${Dn},${s1-imm7-4}(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_asr_4_imm_bit5_s1_indirect_with_offset_4, { 0x12000400 }
+  },
+/* lsl.4 ${Dn},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_asr_4_dyn_reg_s1_indirect_with_offset_4, { 0x16000400 }
+  },
+/* lsl.4 ${Dn},(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_asr_4_imm_bit5_s1_indirect_4, { 0x12000400 }
+  },
+/* lsl.4 ${Dn},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_asr_4_dyn_reg_s1_indirect_4, { 0x16000400 }
+  },
+/* lsl.4 ${Dn},(${s1-An})${s1-i4-4}++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_asr_4_imm_bit5_s1_indirect_with_post_increment_4, { 0x12000200 }
+  },
+/* lsl.4 ${Dn},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_asr_4_dyn_reg_s1_indirect_with_post_increment_4, { 0x16000200 }
+  },
+/* lsl.4 ${Dn},${s1-i4-4}(${s1-An})++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_asr_4_imm_bit5_s1_indirect_with_pre_increment_4, { 0x12000210 }
+  },
+/* lsl.4 ${Dn},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_asr_4_dyn_reg_s1_indirect_with_pre_increment_4, { 0x16000210 }
+  },
+/* lsr.4 ${Dn},${s1-direct-addr},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_DIRECT_ADDR), ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_2_imm_bit5_s1_direct, { 0x12400100 }
+  },
+/* lsr.4 ${Dn},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_shmrg_2_dyn_reg_s1_direct, { 0x16400100 }
+  },
+/* lsr.4 ${Dn},#${s1-imm8},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '#', OP (S1_IMM8), ',', '#', OP (BIT5), 0 } },
+    & ifmt_shmrg_2_imm_bit5_s1_immediate, { 0x12400000 }
+  },
+/* lsr.4 ${Dn},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_shmrg_2_dyn_reg_s1_immediate, { 0x16400000 }
+  },
+/* lsr.4 ${Dn},(${s1-An},${s1-r}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_asr_4_imm_bit5_s1_indirect_with_index_4, { 0x12400300 }
+  },
+/* lsr.4 ${Dn},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_asr_4_dyn_reg_s1_indirect_with_index_4, { 0x16400300 }
+  },
+/* lsr.4 ${Dn},${s1-imm7-4}(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_asr_4_imm_bit5_s1_indirect_with_offset_4, { 0x12400400 }
+  },
+/* lsr.4 ${Dn},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_asr_4_dyn_reg_s1_indirect_with_offset_4, { 0x16400400 }
+  },
+/* lsr.4 ${Dn},(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_asr_4_imm_bit5_s1_indirect_4, { 0x12400400 }
+  },
+/* lsr.4 ${Dn},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_asr_4_dyn_reg_s1_indirect_4, { 0x16400400 }
+  },
+/* lsr.4 ${Dn},(${s1-An})${s1-i4-4}++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_asr_4_imm_bit5_s1_indirect_with_post_increment_4, { 0x12400200 }
+  },
+/* lsr.4 ${Dn},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_asr_4_dyn_reg_s1_indirect_with_post_increment_4, { 0x16400200 }
+  },
+/* lsr.4 ${Dn},${s1-i4-4}(${s1-An})++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_asr_4_imm_bit5_s1_indirect_with_pre_increment_4, { 0x12400210 }
+  },
+/* lsr.4 ${Dn},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_asr_4_dyn_reg_s1_indirect_with_pre_increment_4, { 0x16400210 }
+  },
+/* mac ${s1-direct-addr},${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_DIRECT_ADDR), ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_compatibility_mac_s1_direct_dsp_src2_data_reg, { 0x34200100 }
+  },
+/* mac #${s1-imm8},${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (S1_IMM8), ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_compatibility_mac_s1_immediate_dsp_src2_data_reg, { 0x34200000 }
+  },
+/* mac (${s1-An},${s1-r}),${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_compatibility_mac_s1_indirect_with_index_2_dsp_src2_data_reg, { 0x34200300 }
+  },
+/* mac ${s1-imm7-2}(${s1-An}),${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_compatibility_mac_s1_indirect_with_offset_2_dsp_src2_data_reg, { 0x34200400 }
+  },
+/* mac (${s1-An}),${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ')', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_compatibility_mac_s1_indirect_2_dsp_src2_data_reg, { 0x34200400 }
+  },
+/* mac (${s1-An})${s1-i4-2}++,${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_compatibility_mac_s1_indirect_with_post_increment_2_dsp_src2_data_reg, { 0x34200200 }
+  },
+/* mac ${s1-i4-2}(${s1-An})++,${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_compatibility_mac_s1_indirect_with_pre_increment_2_dsp_src2_data_reg, { 0x34200210 }
+  },
+/* mac ${s1-direct-addr},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_DIRECT_ADDR), ',', '#', OP (BIT5), 0 } },
+    & ifmt_compatibility_mac_s1_direct_dsp_imm_bit5, { 0x30200100 }
+  },
+/* mac #${s1-imm8},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (S1_IMM8), ',', '#', OP (BIT5), 0 } },
+    & ifmt_compatibility_mac_s1_immediate_dsp_imm_bit5, { 0x30200000 }
+  },
+/* mac (${s1-An},${s1-r}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_compatibility_mac_s1_indirect_with_index_2_dsp_imm_bit5, { 0x30200300 }
+  },
+/* mac ${s1-imm7-2}(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_compatibility_mac_s1_indirect_with_offset_2_dsp_imm_bit5, { 0x30200400 }
+  },
+/* mac (${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_compatibility_mac_s1_indirect_2_dsp_imm_bit5, { 0x30200400 }
+  },
+/* mac (${s1-An})${s1-i4-2}++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_compatibility_mac_s1_indirect_with_post_increment_2_dsp_imm_bit5, { 0x30200200 }
+  },
+/* mac ${s1-i4-2}(${s1-An})++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_compatibility_mac_s1_indirect_with_pre_increment_2_dsp_imm_bit5, { 0x30200210 }
+  },
+/* mac ${s1-direct-addr},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_DIRECT_ADDR), ',', '#', OP (BIT5), 0 } },
+    & ifmt_btst_s1_direct_imm_bit5, { 0x11200100 }
+  },
+/* mac #${s1-imm8},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (S1_IMM8), ',', '#', OP (BIT5), 0 } },
+    & ifmt_btst_s1_immediate_imm_bit5, { 0x11200000 }
+  },
+/* mac (${s1-An},${s1-r}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_mac_s1_indirect_with_index_2_imm_bit5, { 0x11200300 }
+  },
+/* mac ${s1-imm7-2}(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_mac_s1_indirect_with_offset_2_imm_bit5, { 0x11200400 }
+  },
+/* mac (${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_mac_s1_indirect_2_imm_bit5, { 0x11200400 }
+  },
+/* mac (${s1-An})${s1-i4-2}++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_mac_s1_indirect_with_post_increment_2_imm_bit5, { 0x11200200 }
+  },
+/* mac ${s1-i4-2}(${s1-An})++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_mac_s1_indirect_with_pre_increment_2_imm_bit5, { 0x11200210 }
+  },
+/* mac ${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_btst_s1_direct_dyn_reg, { 0x15200100 }
+  },
+/* mac #${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_btst_s1_immediate_dyn_reg, { 0x15200000 }
+  },
+/* mac (${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_mac_s1_indirect_with_index_2_dyn_reg, { 0x15200300 }
+  },
+/* mac ${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_mac_s1_indirect_with_offset_2_dyn_reg, { 0x15200400 }
+  },
+/* mac (${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_mac_s1_indirect_2_dyn_reg, { 0x15200400 }
+  },
+/* mac (${s1-An})${s1-i4-2}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_mac_s1_indirect_with_post_increment_2_dyn_reg, { 0x15200200 }
+  },
+/* mac ${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_mac_s1_indirect_with_pre_increment_2_dyn_reg, { 0x15200210 }
+  },
+/* mulf ${s1-direct-addr},${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_DIRECT_ADDR), ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_compatibility_mac_s1_direct_dsp_src2_data_reg, { 0x34800100 }
+  },
+/* mulf #${s1-imm8},${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (S1_IMM8), ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_compatibility_mac_s1_immediate_dsp_src2_data_reg, { 0x34800000 }
+  },
+/* mulf (${s1-An},${s1-r}),${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_compatibility_mac_s1_indirect_with_index_2_dsp_src2_data_reg, { 0x34800300 }
+  },
+/* mulf ${s1-imm7-2}(${s1-An}),${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_compatibility_mac_s1_indirect_with_offset_2_dsp_src2_data_reg, { 0x34800400 }
+  },
+/* mulf (${s1-An}),${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ')', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_compatibility_mac_s1_indirect_2_dsp_src2_data_reg, { 0x34800400 }
+  },
+/* mulf (${s1-An})${s1-i4-2}++,${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_compatibility_mac_s1_indirect_with_post_increment_2_dsp_src2_data_reg, { 0x34800200 }
+  },
+/* mulf ${s1-i4-2}(${s1-An})++,${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_compatibility_mac_s1_indirect_with_pre_increment_2_dsp_src2_data_reg, { 0x34800210 }
+  },
+/* mulf ${s1-direct-addr},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_DIRECT_ADDR), ',', '#', OP (BIT5), 0 } },
+    & ifmt_compatibility_mac_s1_direct_dsp_imm_bit5, { 0x30800100 }
+  },
+/* mulf #${s1-imm8},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (S1_IMM8), ',', '#', OP (BIT5), 0 } },
+    & ifmt_compatibility_mac_s1_immediate_dsp_imm_bit5, { 0x30800000 }
+  },
+/* mulf (${s1-An},${s1-r}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_compatibility_mac_s1_indirect_with_index_2_dsp_imm_bit5, { 0x30800300 }
+  },
+/* mulf ${s1-imm7-2}(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_compatibility_mac_s1_indirect_with_offset_2_dsp_imm_bit5, { 0x30800400 }
+  },
+/* mulf (${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_compatibility_mac_s1_indirect_2_dsp_imm_bit5, { 0x30800400 }
+  },
+/* mulf (${s1-An})${s1-i4-2}++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_compatibility_mac_s1_indirect_with_post_increment_2_dsp_imm_bit5, { 0x30800200 }
+  },
+/* mulf ${s1-i4-2}(${s1-An})++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_compatibility_mac_s1_indirect_with_pre_increment_2_dsp_imm_bit5, { 0x30800210 }
+  },
+/* mulf ${s1-direct-addr},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_DIRECT_ADDR), ',', '#', OP (BIT5), 0 } },
+    & ifmt_btst_s1_direct_imm_bit5, { 0x10a00100 }
+  },
+/* mulf #${s1-imm8},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (S1_IMM8), ',', '#', OP (BIT5), 0 } },
+    & ifmt_btst_s1_immediate_imm_bit5, { 0x10a00000 }
+  },
+/* mulf (${s1-An},${s1-r}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_mac_s1_indirect_with_index_2_imm_bit5, { 0x10a00300 }
+  },
+/* mulf ${s1-imm7-2}(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_mac_s1_indirect_with_offset_2_imm_bit5, { 0x10a00400 }
+  },
+/* mulf (${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_mac_s1_indirect_2_imm_bit5, { 0x10a00400 }
+  },
+/* mulf (${s1-An})${s1-i4-2}++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_mac_s1_indirect_with_post_increment_2_imm_bit5, { 0x10a00200 }
+  },
+/* mulf ${s1-i4-2}(${s1-An})++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_mac_s1_indirect_with_pre_increment_2_imm_bit5, { 0x10a00210 }
+  },
+/* mulf ${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_btst_s1_direct_dyn_reg, { 0x14a00100 }
+  },
+/* mulf #${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_btst_s1_immediate_dyn_reg, { 0x14a00000 }
+  },
+/* mulf (${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_mac_s1_indirect_with_index_2_dyn_reg, { 0x14a00300 }
+  },
+/* mulf ${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_mac_s1_indirect_with_offset_2_dyn_reg, { 0x14a00400 }
+  },
+/* mulf (${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_mac_s1_indirect_2_dyn_reg, { 0x14a00400 }
+  },
+/* mulf (${s1-An})${s1-i4-2}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_mac_s1_indirect_with_post_increment_2_dyn_reg, { 0x14a00200 }
+  },
+/* mulf ${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_mac_s1_indirect_with_pre_increment_2_dyn_reg, { 0x14a00210 }
+  },
+/* mulu ${s1-direct-addr},${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_DIRECT_ADDR), ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_compatibility_mac_s1_direct_dsp_src2_data_reg, { 0x34400100 }
+  },
+/* mulu #${s1-imm8},${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (S1_IMM8), ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_compatibility_mac_s1_immediate_dsp_src2_data_reg, { 0x34400000 }
+  },
+/* mulu (${s1-An},${s1-r}),${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_compatibility_mac_s1_indirect_with_index_2_dsp_src2_data_reg, { 0x34400300 }
+  },
+/* mulu ${s1-imm7-2}(${s1-An}),${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_compatibility_mac_s1_indirect_with_offset_2_dsp_src2_data_reg, { 0x34400400 }
+  },
+/* mulu (${s1-An}),${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ')', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_compatibility_mac_s1_indirect_2_dsp_src2_data_reg, { 0x34400400 }
+  },
+/* mulu (${s1-An})${s1-i4-2}++,${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_compatibility_mac_s1_indirect_with_post_increment_2_dsp_src2_data_reg, { 0x34400200 }
+  },
+/* mulu ${s1-i4-2}(${s1-An})++,${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_compatibility_mac_s1_indirect_with_pre_increment_2_dsp_src2_data_reg, { 0x34400210 }
+  },
+/* mulu ${s1-direct-addr},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_DIRECT_ADDR), ',', '#', OP (BIT5), 0 } },
+    & ifmt_compatibility_mac_s1_direct_dsp_imm_bit5, { 0x30400100 }
+  },
+/* mulu #${s1-imm8},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (S1_IMM8), ',', '#', OP (BIT5), 0 } },
+    & ifmt_compatibility_mac_s1_immediate_dsp_imm_bit5, { 0x30400000 }
+  },
+/* mulu (${s1-An},${s1-r}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_compatibility_mac_s1_indirect_with_index_2_dsp_imm_bit5, { 0x30400300 }
+  },
+/* mulu ${s1-imm7-2}(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_compatibility_mac_s1_indirect_with_offset_2_dsp_imm_bit5, { 0x30400400 }
+  },
+/* mulu (${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_compatibility_mac_s1_indirect_2_dsp_imm_bit5, { 0x30400400 }
+  },
+/* mulu (${s1-An})${s1-i4-2}++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_compatibility_mac_s1_indirect_with_post_increment_2_dsp_imm_bit5, { 0x30400200 }
+  },
+/* mulu ${s1-i4-2}(${s1-An})++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_compatibility_mac_s1_indirect_with_pre_increment_2_dsp_imm_bit5, { 0x30400210 }
+  },
+/* mulu ${s1-direct-addr},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_DIRECT_ADDR), ',', '#', OP (BIT5), 0 } },
+    & ifmt_btst_s1_direct_imm_bit5, { 0x10600100 }
+  },
+/* mulu #${s1-imm8},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (S1_IMM8), ',', '#', OP (BIT5), 0 } },
+    & ifmt_btst_s1_immediate_imm_bit5, { 0x10600000 }
+  },
+/* mulu (${s1-An},${s1-r}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_mac_s1_indirect_with_index_2_imm_bit5, { 0x10600300 }
+  },
+/* mulu ${s1-imm7-2}(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_mac_s1_indirect_with_offset_2_imm_bit5, { 0x10600400 }
+  },
+/* mulu (${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_mac_s1_indirect_2_imm_bit5, { 0x10600400 }
+  },
+/* mulu (${s1-An})${s1-i4-2}++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_mac_s1_indirect_with_post_increment_2_imm_bit5, { 0x10600200 }
+  },
+/* mulu ${s1-i4-2}(${s1-An})++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_mac_s1_indirect_with_pre_increment_2_imm_bit5, { 0x10600210 }
+  },
+/* mulu ${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_btst_s1_direct_dyn_reg, { 0x14600100 }
+  },
+/* mulu #${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_btst_s1_immediate_dyn_reg, { 0x14600000 }
+  },
+/* mulu (${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_mac_s1_indirect_with_index_2_dyn_reg, { 0x14600300 }
+  },
+/* mulu ${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_mac_s1_indirect_with_offset_2_dyn_reg, { 0x14600400 }
+  },
+/* mulu (${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_mac_s1_indirect_2_dyn_reg, { 0x14600400 }
+  },
+/* mulu (${s1-An})${s1-i4-2}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_mac_s1_indirect_with_post_increment_2_dyn_reg, { 0x14600200 }
+  },
+/* mulu ${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_mac_s1_indirect_with_pre_increment_2_dyn_reg, { 0x14600210 }
+  },
+/* muls ${s1-direct-addr},${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_DIRECT_ADDR), ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_compatibility_mac_s1_direct_dsp_src2_data_reg, { 0x34000100 }
+  },
+/* muls #${s1-imm8},${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (S1_IMM8), ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_compatibility_mac_s1_immediate_dsp_src2_data_reg, { 0x34000000 }
+  },
+/* muls (${s1-An},${s1-r}),${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_compatibility_mac_s1_indirect_with_index_2_dsp_src2_data_reg, { 0x34000300 }
+  },
+/* muls ${s1-imm7-2}(${s1-An}),${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_compatibility_mac_s1_indirect_with_offset_2_dsp_src2_data_reg, { 0x34000400 }
+  },
+/* muls (${s1-An}),${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ')', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_compatibility_mac_s1_indirect_2_dsp_src2_data_reg, { 0x34000400 }
+  },
+/* muls (${s1-An})${s1-i4-2}++,${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_compatibility_mac_s1_indirect_with_post_increment_2_dsp_src2_data_reg, { 0x34000200 }
+  },
+/* muls ${s1-i4-2}(${s1-An})++,${dsp-S2-data-reg} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (DSP_S2_DATA_REG), 0 } },
+    & ifmt_compatibility_mac_s1_indirect_with_pre_increment_2_dsp_src2_data_reg, { 0x34000210 }
+  },
+/* muls ${s1-direct-addr},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_DIRECT_ADDR), ',', '#', OP (BIT5), 0 } },
+    & ifmt_compatibility_mac_s1_direct_dsp_imm_bit5, { 0x30000100 }
+  },
+/* muls #${s1-imm8},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (S1_IMM8), ',', '#', OP (BIT5), 0 } },
+    & ifmt_compatibility_mac_s1_immediate_dsp_imm_bit5, { 0x30000000 }
+  },
+/* muls (${s1-An},${s1-r}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_compatibility_mac_s1_indirect_with_index_2_dsp_imm_bit5, { 0x30000300 }
+  },
+/* muls ${s1-imm7-2}(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_compatibility_mac_s1_indirect_with_offset_2_dsp_imm_bit5, { 0x30000400 }
+  },
+/* muls (${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_compatibility_mac_s1_indirect_2_dsp_imm_bit5, { 0x30000400 }
+  },
+/* muls (${s1-An})${s1-i4-2}++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_compatibility_mac_s1_indirect_with_post_increment_2_dsp_imm_bit5, { 0x30000200 }
+  },
+/* muls ${s1-i4-2}(${s1-An})++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_compatibility_mac_s1_indirect_with_pre_increment_2_dsp_imm_bit5, { 0x30000210 }
+  },
+/* muls ${s1-direct-addr},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_DIRECT_ADDR), ',', '#', OP (BIT5), 0 } },
+    & ifmt_btst_s1_direct_imm_bit5, { 0x10200100 }
+  },
+/* muls #${s1-imm8},#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (S1_IMM8), ',', '#', OP (BIT5), 0 } },
+    & ifmt_btst_s1_immediate_imm_bit5, { 0x10200000 }
+  },
+/* muls (${s1-An},${s1-r}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_mac_s1_indirect_with_index_2_imm_bit5, { 0x10200300 }
+  },
+/* muls ${s1-imm7-2}(${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_mac_s1_indirect_with_offset_2_imm_bit5, { 0x10200400 }
+  },
+/* muls (${s1-An}),#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ')', ',', '#', OP (BIT5), 0 } },
+    & ifmt_mac_s1_indirect_2_imm_bit5, { 0x10200400 }
+  },
+/* muls (${s1-An})${s1-i4-2}++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_mac_s1_indirect_with_post_increment_2_imm_bit5, { 0x10200200 }
+  },
+/* muls ${s1-i4-2}(${s1-An})++,#${bit5} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', '#', OP (BIT5), 0 } },
+    & ifmt_mac_s1_indirect_with_pre_increment_2_imm_bit5, { 0x10200210 }
+  },
+/* muls ${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_btst_s1_direct_dyn_reg, { 0x14200100 }
+  },
+/* muls #${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_btst_s1_immediate_dyn_reg, { 0x14200000 }
+  },
+/* muls (${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_mac_s1_indirect_with_index_2_dyn_reg, { 0x14200300 }
+  },
+/* muls ${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_mac_s1_indirect_with_offset_2_dyn_reg, { 0x14200400 }
+  },
+/* muls (${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_mac_s1_indirect_2_dyn_reg, { 0x14200400 }
+  },
+/* muls (${s1-An})${s1-i4-2}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_mac_s1_indirect_with_post_increment_2_dyn_reg, { 0x14200200 }
+  },
+/* muls ${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_mac_s1_indirect_with_pre_increment_2_dyn_reg, { 0x14200210 }
+  },
+/* swapb.4 ${d-direct-addr},${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_sysret_d_direct_s1_direct, { 0x100c900 }
+  },
+/* swapb.4 #${d-imm8},${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_sysret_d_immediate_4_s1_direct, { 0xc900 }
+  },
+/* swapb.4 (${d-An},${d-r}),${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_sysret_d_indirect_with_index_4_s1_direct, { 0x300c900 }
+  },
+/* swapb.4 ${d-imm7-4}(${d-An}),${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_sysret_d_indirect_with_offset_4_s1_direct, { 0x400c900 }
+  },
+/* swapb.4 (${d-An}),${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_sysret_d_indirect_4_s1_direct, { 0x400c900 }
+  },
+/* swapb.4 (${d-An})${d-i4-4}++,${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_sysret_d_indirect_with_post_increment_4_s1_direct, { 0x200c900 }
+  },
+/* swapb.4 ${d-i4-4}(${d-An})++,${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_sysret_d_indirect_with_pre_increment_4_s1_direct, { 0x210c900 }
+  },
+/* swapb.4 ${d-direct-addr},#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_sysret_d_direct_s1_immediate, { 0x100c800 }
+  },
+/* swapb.4 #${d-imm8},#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_sysret_d_immediate_4_s1_immediate, { 0xc800 }
+  },
+/* swapb.4 (${d-An},${d-r}),#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_sysret_d_indirect_with_index_4_s1_immediate, { 0x300c800 }
+  },
+/* swapb.4 ${d-imm7-4}(${d-An}),#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_sysret_d_indirect_with_offset_4_s1_immediate, { 0x400c800 }
+  },
+/* swapb.4 (${d-An}),#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_sysret_d_indirect_4_s1_immediate, { 0x400c800 }
+  },
+/* swapb.4 (${d-An})${d-i4-4}++,#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_sysret_d_indirect_with_post_increment_4_s1_immediate, { 0x200c800 }
+  },
+/* swapb.4 ${d-i4-4}(${d-An})++,#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_sysret_d_indirect_with_pre_increment_4_s1_immediate, { 0x210c800 }
+  },
+/* swapb.4 ${d-direct-addr},(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_sysret_d_direct_s1_indirect_with_index_4, { 0x100cb00 }
+  },
+/* swapb.4 #${d-imm8},(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_sysret_d_immediate_4_s1_indirect_with_index_4, { 0xcb00 }
+  },
+/* swapb.4 (${d-An},${d-r}),(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_index_4_s1_indirect_with_index_4, { 0x300cb00 }
+  },
+/* swapb.4 ${d-imm7-4}(${d-An}),(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_offset_4_s1_indirect_with_index_4, { 0x400cb00 }
+  },
+/* swapb.4 (${d-An}),(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_sysret_d_indirect_4_s1_indirect_with_index_4, { 0x400cb00 }
+  },
+/* swapb.4 (${d-An})${d-i4-4}++,(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_post_increment_4_s1_indirect_with_index_4, { 0x200cb00 }
+  },
+/* swapb.4 ${d-i4-4}(${d-An})++,(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_pre_increment_4_s1_indirect_with_index_4, { 0x210cb00 }
+  },
+/* swapb.4 ${d-direct-addr},${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_direct_s1_indirect_with_offset_4, { 0x100cc00 }
+  },
+/* swapb.4 #${d-imm8},${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_immediate_4_s1_indirect_with_offset_4, { 0xcc00 }
+  },
+/* swapb.4 (${d-An},${d-r}),${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_index_4_s1_indirect_with_offset_4, { 0x300cc00 }
+  },
+/* swapb.4 ${d-imm7-4}(${d-An}),${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_offset_4_s1_indirect_with_offset_4, { 0x400cc00 }
+  },
+/* swapb.4 (${d-An}),${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_4_s1_indirect_with_offset_4, { 0x400cc00 }
+  },
+/* swapb.4 (${d-An})${d-i4-4}++,${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_post_increment_4_s1_indirect_with_offset_4, { 0x200cc00 }
+  },
+/* swapb.4 ${d-i4-4}(${d-An})++,${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_pre_increment_4_s1_indirect_with_offset_4, { 0x210cc00 }
+  },
+/* swapb.4 ${d-direct-addr},(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_direct_s1_indirect_4, { 0x100cc00 }
+  },
+/* swapb.4 #${d-imm8},(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_immediate_4_s1_indirect_4, { 0xcc00 }
+  },
+/* swapb.4 (${d-An},${d-r}),(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_index_4_s1_indirect_4, { 0x300cc00 }
+  },
+/* swapb.4 ${d-imm7-4}(${d-An}),(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_offset_4_s1_indirect_4, { 0x400cc00 }
+  },
+/* swapb.4 (${d-An}),(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_4_s1_indirect_4, { 0x400cc00 }
+  },
+/* swapb.4 (${d-An})${d-i4-4}++,(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_post_increment_4_s1_indirect_4, { 0x200cc00 }
+  },
+/* swapb.4 ${d-i4-4}(${d-An})++,(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_pre_increment_4_s1_indirect_4, { 0x210cc00 }
+  },
+/* swapb.4 ${d-direct-addr},(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_sysret_d_direct_s1_indirect_with_post_increment_4, { 0x100ca00 }
+  },
+/* swapb.4 #${d-imm8},(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_sysret_d_immediate_4_s1_indirect_with_post_increment_4, { 0xca00 }
+  },
+/* swapb.4 (${d-An},${d-r}),(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_with_index_4_s1_indirect_with_post_increment_4, { 0x300ca00 }
+  },
+/* swapb.4 ${d-imm7-4}(${d-An}),(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_with_offset_4_s1_indirect_with_post_increment_4, { 0x400ca00 }
+  },
+/* swapb.4 (${d-An}),(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_4_s1_indirect_with_post_increment_4, { 0x400ca00 }
+  },
+/* swapb.4 (${d-An})${d-i4-4}++,(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_with_post_increment_4_s1_indirect_with_post_increment_4, { 0x200ca00 }
+  },
+/* swapb.4 ${d-i4-4}(${d-An})++,(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_with_pre_increment_4_s1_indirect_with_post_increment_4, { 0x210ca00 }
+  },
+/* swapb.4 ${d-direct-addr},${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_sysret_d_direct_s1_indirect_with_pre_increment_4, { 0x100ca10 }
+  },
+/* swapb.4 #${d-imm8},${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_sysret_d_immediate_4_s1_indirect_with_pre_increment_4, { 0xca10 }
+  },
+/* swapb.4 (${d-An},${d-r}),${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_with_index_4_s1_indirect_with_pre_increment_4, { 0x300ca10 }
+  },
+/* swapb.4 ${d-imm7-4}(${d-An}),${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_with_offset_4_s1_indirect_with_pre_increment_4, { 0x400ca10 }
+  },
+/* swapb.4 (${d-An}),${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_4_s1_indirect_with_pre_increment_4, { 0x400ca10 }
+  },
+/* swapb.4 (${d-An})${d-i4-4}++,${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_with_post_increment_4_s1_indirect_with_pre_increment_4, { 0x200ca10 }
+  },
+/* swapb.4 ${d-i4-4}(${d-An})++,${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_with_pre_increment_4_s1_indirect_with_pre_increment_4, { 0x210ca10 }
+  },
+/* swapb.2 ${d-direct-addr},${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_sysret_d_direct_s1_direct, { 0x100c100 }
+  },
+/* swapb.2 #${d-imm8},${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_move_2_d_immediate_2_s1_direct, { 0xc100 }
+  },
+/* swapb.2 (${d-An},${d-r}),${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_move_2_d_indirect_with_index_2_s1_direct, { 0x300c100 }
+  },
+/* swapb.2 ${d-imm7-2}(${d-An}),${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_move_2_d_indirect_with_offset_2_s1_direct, { 0x400c100 }
+  },
+/* swapb.2 (${d-An}),${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_move_2_d_indirect_2_s1_direct, { 0x400c100 }
+  },
+/* swapb.2 (${d-An})${d-i4-2}++,${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_move_2_d_indirect_with_post_increment_2_s1_direct, { 0x200c100 }
+  },
+/* swapb.2 ${d-i4-2}(${d-An})++,${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_move_2_d_indirect_with_pre_increment_2_s1_direct, { 0x210c100 }
+  },
+/* swapb.2 ${d-direct-addr},#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_sysret_d_direct_s1_immediate, { 0x100c000 }
+  },
+/* swapb.2 #${d-imm8},#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_move_2_d_immediate_2_s1_immediate, { 0xc000 }
+  },
+/* swapb.2 (${d-An},${d-r}),#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_move_2_d_indirect_with_index_2_s1_immediate, { 0x300c000 }
+  },
+/* swapb.2 ${d-imm7-2}(${d-An}),#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_move_2_d_indirect_with_offset_2_s1_immediate, { 0x400c000 }
+  },
+/* swapb.2 (${d-An}),#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_move_2_d_indirect_2_s1_immediate, { 0x400c000 }
+  },
+/* swapb.2 (${d-An})${d-i4-2}++,#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_move_2_d_indirect_with_post_increment_2_s1_immediate, { 0x200c000 }
+  },
+/* swapb.2 ${d-i4-2}(${d-An})++,#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_move_2_d_indirect_with_pre_increment_2_s1_immediate, { 0x210c000 }
+  },
+/* swapb.2 ${d-direct-addr},(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_move_2_d_direct_s1_indirect_with_index_2, { 0x100c300 }
+  },
+/* swapb.2 #${d-imm8},(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_move_2_d_immediate_2_s1_indirect_with_index_2, { 0xc300 }
+  },
+/* swapb.2 (${d-An},${d-r}),(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_move_2_d_indirect_with_index_2_s1_indirect_with_index_2, { 0x300c300 }
+  },
+/* swapb.2 ${d-imm7-2}(${d-An}),(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_move_2_d_indirect_with_offset_2_s1_indirect_with_index_2, { 0x400c300 }
+  },
+/* swapb.2 (${d-An}),(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_move_2_d_indirect_2_s1_indirect_with_index_2, { 0x400c300 }
+  },
+/* swapb.2 (${d-An})${d-i4-2}++,(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_move_2_d_indirect_with_post_increment_2_s1_indirect_with_index_2, { 0x200c300 }
+  },
+/* swapb.2 ${d-i4-2}(${d-An})++,(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_move_2_d_indirect_with_pre_increment_2_s1_indirect_with_index_2, { 0x210c300 }
+  },
+/* swapb.2 ${d-direct-addr},${s1-imm7-2}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_2_d_direct_s1_indirect_with_offset_2, { 0x100c400 }
+  },
+/* swapb.2 #${d-imm8},${s1-imm7-2}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_2_d_immediate_2_s1_indirect_with_offset_2, { 0xc400 }
+  },
+/* swapb.2 (${d-An},${d-r}),${s1-imm7-2}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_2_d_indirect_with_index_2_s1_indirect_with_offset_2, { 0x300c400 }
+  },
+/* swapb.2 ${d-imm7-2}(${d-An}),${s1-imm7-2}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_2_d_indirect_with_offset_2_s1_indirect_with_offset_2, { 0x400c400 }
+  },
+/* swapb.2 (${d-An}),${s1-imm7-2}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_2_d_indirect_2_s1_indirect_with_offset_2, { 0x400c400 }
+  },
+/* swapb.2 (${d-An})${d-i4-2}++,${s1-imm7-2}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_2_d_indirect_with_post_increment_2_s1_indirect_with_offset_2, { 0x200c400 }
+  },
+/* swapb.2 ${d-i4-2}(${d-An})++,${s1-imm7-2}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_2_d_indirect_with_pre_increment_2_s1_indirect_with_offset_2, { 0x210c400 }
+  },
+/* swapb.2 ${d-direct-addr},(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_2_d_direct_s1_indirect_2, { 0x100c400 }
+  },
+/* swapb.2 #${d-imm8},(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_2_d_immediate_2_s1_indirect_2, { 0xc400 }
+  },
+/* swapb.2 (${d-An},${d-r}),(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_2_d_indirect_with_index_2_s1_indirect_2, { 0x300c400 }
+  },
+/* swapb.2 ${d-imm7-2}(${d-An}),(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_2_d_indirect_with_offset_2_s1_indirect_2, { 0x400c400 }
+  },
+/* swapb.2 (${d-An}),(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_2_d_indirect_2_s1_indirect_2, { 0x400c400 }
+  },
+/* swapb.2 (${d-An})${d-i4-2}++,(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_2_d_indirect_with_post_increment_2_s1_indirect_2, { 0x200c400 }
+  },
+/* swapb.2 ${d-i4-2}(${d-An})++,(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_2_d_indirect_with_pre_increment_2_s1_indirect_2, { 0x210c400 }
+  },
+/* swapb.2 ${d-direct-addr},(${s1-An})${s1-i4-2}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', 0 } },
+    & ifmt_move_2_d_direct_s1_indirect_with_post_increment_2, { 0x100c200 }
+  },
+/* swapb.2 #${d-imm8},(${s1-An})${s1-i4-2}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', 0 } },
+    & ifmt_move_2_d_immediate_2_s1_indirect_with_post_increment_2, { 0xc200 }
+  },
+/* swapb.2 (${d-An},${d-r}),(${s1-An})${s1-i4-2}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', 0 } },
+    & ifmt_move_2_d_indirect_with_index_2_s1_indirect_with_post_increment_2, { 0x300c200 }
+  },
+/* swapb.2 ${d-imm7-2}(${d-An}),(${s1-An})${s1-i4-2}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', 0 } },
+    & ifmt_move_2_d_indirect_with_offset_2_s1_indirect_with_post_increment_2, { 0x400c200 }
+  },
+/* swapb.2 (${d-An}),(${s1-An})${s1-i4-2}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', 0 } },
+    & ifmt_move_2_d_indirect_2_s1_indirect_with_post_increment_2, { 0x400c200 }
+  },
+/* swapb.2 (${d-An})${d-i4-2}++,(${s1-An})${s1-i4-2}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', 0 } },
+    & ifmt_move_2_d_indirect_with_post_increment_2_s1_indirect_with_post_increment_2, { 0x200c200 }
+  },
+/* swapb.2 ${d-i4-2}(${d-An})++,(${s1-An})${s1-i4-2}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', 0 } },
+    & ifmt_move_2_d_indirect_with_pre_increment_2_s1_indirect_with_post_increment_2, { 0x210c200 }
+  },
+/* swapb.2 ${d-direct-addr},${s1-i4-2}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_move_2_d_direct_s1_indirect_with_pre_increment_2, { 0x100c210 }
+  },
+/* swapb.2 #${d-imm8},${s1-i4-2}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_move_2_d_immediate_2_s1_indirect_with_pre_increment_2, { 0xc210 }
+  },
+/* swapb.2 (${d-An},${d-r}),${s1-i4-2}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_move_2_d_indirect_with_index_2_s1_indirect_with_pre_increment_2, { 0x300c210 }
+  },
+/* swapb.2 ${d-imm7-2}(${d-An}),${s1-i4-2}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_move_2_d_indirect_with_offset_2_s1_indirect_with_pre_increment_2, { 0x400c210 }
+  },
+/* swapb.2 (${d-An}),${s1-i4-2}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_move_2_d_indirect_2_s1_indirect_with_pre_increment_2, { 0x400c210 }
+  },
+/* swapb.2 (${d-An})${d-i4-2}++,${s1-i4-2}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_move_2_d_indirect_with_post_increment_2_s1_indirect_with_pre_increment_2, { 0x200c210 }
+  },
+/* swapb.2 ${d-i4-2}(${d-An})++,${s1-i4-2}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_move_2_d_indirect_with_pre_increment_2_s1_indirect_with_pre_increment_2, { 0x210c210 }
+  },
+/* pdec ${d-direct-addr},${pdec-s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (PDEC_S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_pdec_d_direct_pdec_s1_ea_indirect_with_offset_4, { 0x100f400 }
+  },
+/* pdec #${d-imm8},${pdec-s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (PDEC_S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_pdec_d_immediate_4_pdec_s1_ea_indirect_with_offset_4, { 0xf400 }
+  },
+/* pdec (${d-An},${d-r}),${pdec-s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (PDEC_S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_pdec_d_indirect_with_index_4_pdec_s1_ea_indirect_with_offset_4, { 0x300f400 }
+  },
+/* pdec ${d-imm7-4}(${d-An}),${pdec-s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (PDEC_S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_pdec_d_indirect_with_offset_4_pdec_s1_ea_indirect_with_offset_4, { 0x400f400 }
+  },
+/* pdec (${d-An}),${pdec-s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (PDEC_S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_pdec_d_indirect_4_pdec_s1_ea_indirect_with_offset_4, { 0x400f400 }
+  },
+/* pdec (${d-An})${d-i4-4}++,${pdec-s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (PDEC_S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_pdec_d_indirect_with_post_increment_4_pdec_s1_ea_indirect_with_offset_4, { 0x200f400 }
+  },
+/* pdec ${d-i4-4}(${d-An})++,${pdec-s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (PDEC_S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_pdec_d_indirect_with_pre_increment_4_pdec_s1_ea_indirect_with_offset_4, { 0x210f400 }
+  },
+/* lea.4 ${d-direct-addr},(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_lea_4_d_direct_s1_ea_indirect, { 0x100e400 }
+  },
+/* lea.4 #${d-imm8},(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_lea_4_d_immediate_4_s1_ea_indirect, { 0xe400 }
+  },
+/* lea.4 (${d-An},${d-r}),(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_lea_4_d_indirect_with_index_4_s1_ea_indirect, { 0x300e400 }
+  },
+/* lea.4 ${d-imm7-4}(${d-An}),(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_lea_4_d_indirect_with_offset_4_s1_ea_indirect, { 0x400e400 }
+  },
+/* lea.4 (${d-An}),(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_lea_4_d_indirect_4_s1_ea_indirect, { 0x400e400 }
+  },
+/* lea.4 (${d-An})${d-i4-4}++,(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_lea_4_d_indirect_with_post_increment_4_s1_ea_indirect, { 0x200e400 }
+  },
+/* lea.4 ${d-i4-4}(${d-An})++,(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_lea_4_d_indirect_with_pre_increment_4_s1_ea_indirect, { 0x210e400 }
+  },
+/* lea.4 ${d-direct-addr},${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_lea_4_d_direct_s1_ea_indirect_with_offset_4, { 0x100e400 }
+  },
+/* lea.4 #${d-imm8},${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_lea_4_d_immediate_4_s1_ea_indirect_with_offset_4, { 0xe400 }
+  },
+/* lea.4 (${d-An},${d-r}),${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_lea_4_d_indirect_with_index_4_s1_ea_indirect_with_offset_4, { 0x300e400 }
+  },
+/* lea.4 ${d-imm7-4}(${d-An}),${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_lea_4_d_indirect_with_offset_4_s1_ea_indirect_with_offset_4, { 0x400e400 }
+  },
+/* lea.4 (${d-An}),${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_lea_4_d_indirect_4_s1_ea_indirect_with_offset_4, { 0x400e400 }
+  },
+/* lea.4 (${d-An})${d-i4-4}++,${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_lea_4_d_indirect_with_post_increment_4_s1_ea_indirect_with_offset_4, { 0x200e400 }
+  },
+/* lea.4 ${d-i4-4}(${d-An})++,${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_lea_4_d_indirect_with_pre_increment_4_s1_ea_indirect_with_offset_4, { 0x210e400 }
+  },
+/* lea.4 ${d-direct-addr},(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_lea_4_d_direct_s1_ea_indirect_with_index_4, { 0x100e300 }
+  },
+/* lea.4 #${d-imm8},(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_lea_4_d_immediate_4_s1_ea_indirect_with_index_4, { 0xe300 }
+  },
+/* lea.4 (${d-An},${d-r}),(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_lea_4_d_indirect_with_index_4_s1_ea_indirect_with_index_4, { 0x300e300 }
+  },
+/* lea.4 ${d-imm7-4}(${d-An}),(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_lea_4_d_indirect_with_offset_4_s1_ea_indirect_with_index_4, { 0x400e300 }
+  },
+/* lea.4 (${d-An}),(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_lea_4_d_indirect_4_s1_ea_indirect_with_index_4, { 0x400e300 }
+  },
+/* lea.4 (${d-An})${d-i4-4}++,(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_lea_4_d_indirect_with_post_increment_4_s1_ea_indirect_with_index_4, { 0x200e300 }
+  },
+/* lea.4 ${d-i4-4}(${d-An})++,(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_lea_4_d_indirect_with_pre_increment_4_s1_ea_indirect_with_index_4, { 0x210e300 }
+  },
+/* lea.4 ${d-direct-addr},(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_lea_4_d_direct_s1_ea_indirect_with_post_increment_4, { 0x100e200 }
+  },
+/* lea.4 #${d-imm8},(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_lea_4_d_immediate_4_s1_ea_indirect_with_post_increment_4, { 0xe200 }
+  },
+/* lea.4 (${d-An},${d-r}),(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_lea_4_d_indirect_with_index_4_s1_ea_indirect_with_post_increment_4, { 0x300e200 }
+  },
+/* lea.4 ${d-imm7-4}(${d-An}),(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_lea_4_d_indirect_with_offset_4_s1_ea_indirect_with_post_increment_4, { 0x400e200 }
+  },
+/* lea.4 (${d-An}),(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_lea_4_d_indirect_4_s1_ea_indirect_with_post_increment_4, { 0x400e200 }
+  },
+/* lea.4 (${d-An})${d-i4-4}++,(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_lea_4_d_indirect_with_post_increment_4_s1_ea_indirect_with_post_increment_4, { 0x200e200 }
+  },
+/* lea.4 ${d-i4-4}(${d-An})++,(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_lea_4_d_indirect_with_pre_increment_4_s1_ea_indirect_with_post_increment_4, { 0x210e200 }
+  },
+/* lea.4 ${d-direct-addr},${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_lea_4_d_direct_s1_ea_indirect_with_pre_increment_4, { 0x100e210 }
+  },
+/* lea.4 #${d-imm8},${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_lea_4_d_immediate_4_s1_ea_indirect_with_pre_increment_4, { 0xe210 }
+  },
+/* lea.4 (${d-An},${d-r}),${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_lea_4_d_indirect_with_index_4_s1_ea_indirect_with_pre_increment_4, { 0x300e210 }
+  },
+/* lea.4 ${d-imm7-4}(${d-An}),${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_lea_4_d_indirect_with_offset_4_s1_ea_indirect_with_pre_increment_4, { 0x400e210 }
+  },
+/* lea.4 (${d-An}),${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_lea_4_d_indirect_4_s1_ea_indirect_with_pre_increment_4, { 0x400e210 }
+  },
+/* lea.4 (${d-An})${d-i4-4}++,${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_lea_4_d_indirect_with_post_increment_4_s1_ea_indirect_with_pre_increment_4, { 0x200e210 }
+  },
+/* lea.4 ${d-i4-4}(${d-An})++,${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_lea_4_d_indirect_with_pre_increment_4_s1_ea_indirect_with_pre_increment_4, { 0x210e210 }
+  },
+/* lea.4 ${d-direct-addr},#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_lea_4_d_direct_s1_ea_immediate, { 0x100e000 }
+  },
+/* lea.4 #${d-imm8},#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_lea_4_d_immediate_4_s1_ea_immediate, { 0xe000 }
+  },
+/* lea.4 (${d-An},${d-r}),#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_lea_4_d_indirect_with_index_4_s1_ea_immediate, { 0x300e000 }
+  },
+/* lea.4 ${d-imm7-4}(${d-An}),#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_lea_4_d_indirect_with_offset_4_s1_ea_immediate, { 0x400e000 }
+  },
+/* lea.4 (${d-An}),#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_lea_4_d_indirect_4_s1_ea_immediate, { 0x400e000 }
+  },
+/* lea.4 (${d-An})${d-i4-4}++,#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_lea_4_d_indirect_with_post_increment_4_s1_ea_immediate, { 0x200e000 }
+  },
+/* lea.4 ${d-i4-4}(${d-An})++,#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_lea_4_d_indirect_with_pre_increment_4_s1_ea_immediate, { 0x210e000 }
+  },
+/* lea.2 ${d-direct-addr},(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_lea_4_d_direct_s1_ea_indirect, { 0x100ec00 }
+  },
+/* lea.2 #${d-imm8},(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_lea_4_d_immediate_4_s1_ea_indirect, { 0xec00 }
+  },
+/* lea.2 (${d-An},${d-r}),(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_lea_4_d_indirect_with_index_4_s1_ea_indirect, { 0x300ec00 }
+  },
+/* lea.2 ${d-imm7-4}(${d-An}),(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_lea_4_d_indirect_with_offset_4_s1_ea_indirect, { 0x400ec00 }
+  },
+/* lea.2 (${d-An}),(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_lea_4_d_indirect_4_s1_ea_indirect, { 0x400ec00 }
+  },
+/* lea.2 (${d-An})${d-i4-4}++,(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_lea_4_d_indirect_with_post_increment_4_s1_ea_indirect, { 0x200ec00 }
+  },
+/* lea.2 ${d-i4-4}(${d-An})++,(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_lea_4_d_indirect_with_pre_increment_4_s1_ea_indirect, { 0x210ec00 }
+  },
+/* lea.2 ${d-direct-addr},${s1-imm7-2}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_lea_2_d_direct_s1_ea_indirect_with_offset_2, { 0x100ec00 }
+  },
+/* lea.2 #${d-imm8},${s1-imm7-2}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_lea_2_d_immediate_4_s1_ea_indirect_with_offset_2, { 0xec00 }
+  },
+/* lea.2 (${d-An},${d-r}),${s1-imm7-2}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_lea_2_d_indirect_with_index_4_s1_ea_indirect_with_offset_2, { 0x300ec00 }
+  },
+/* lea.2 ${d-imm7-4}(${d-An}),${s1-imm7-2}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_lea_2_d_indirect_with_offset_4_s1_ea_indirect_with_offset_2, { 0x400ec00 }
+  },
+/* lea.2 (${d-An}),${s1-imm7-2}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_lea_2_d_indirect_4_s1_ea_indirect_with_offset_2, { 0x400ec00 }
+  },
+/* lea.2 (${d-An})${d-i4-4}++,${s1-imm7-2}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_lea_2_d_indirect_with_post_increment_4_s1_ea_indirect_with_offset_2, { 0x200ec00 }
+  },
+/* lea.2 ${d-i4-4}(${d-An})++,${s1-imm7-2}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_lea_2_d_indirect_with_pre_increment_4_s1_ea_indirect_with_offset_2, { 0x210ec00 }
+  },
+/* lea.2 ${d-direct-addr},(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_lea_2_d_direct_s1_ea_indirect_with_index_2, { 0x100eb00 }
+  },
+/* lea.2 #${d-imm8},(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_lea_2_d_immediate_4_s1_ea_indirect_with_index_2, { 0xeb00 }
+  },
+/* lea.2 (${d-An},${d-r}),(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_lea_2_d_indirect_with_index_4_s1_ea_indirect_with_index_2, { 0x300eb00 }
+  },
+/* lea.2 ${d-imm7-4}(${d-An}),(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_lea_2_d_indirect_with_offset_4_s1_ea_indirect_with_index_2, { 0x400eb00 }
+  },
+/* lea.2 (${d-An}),(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_lea_2_d_indirect_4_s1_ea_indirect_with_index_2, { 0x400eb00 }
+  },
+/* lea.2 (${d-An})${d-i4-4}++,(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_lea_2_d_indirect_with_post_increment_4_s1_ea_indirect_with_index_2, { 0x200eb00 }
+  },
+/* lea.2 ${d-i4-4}(${d-An})++,(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_lea_2_d_indirect_with_pre_increment_4_s1_ea_indirect_with_index_2, { 0x210eb00 }
+  },
+/* lea.2 ${d-direct-addr},(${s1-An})${s1-i4-2}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', 0 } },
+    & ifmt_lea_2_d_direct_s1_ea_indirect_with_post_increment_2, { 0x100ea00 }
+  },
+/* lea.2 #${d-imm8},(${s1-An})${s1-i4-2}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', 0 } },
+    & ifmt_lea_2_d_immediate_4_s1_ea_indirect_with_post_increment_2, { 0xea00 }
+  },
+/* lea.2 (${d-An},${d-r}),(${s1-An})${s1-i4-2}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', 0 } },
+    & ifmt_lea_2_d_indirect_with_index_4_s1_ea_indirect_with_post_increment_2, { 0x300ea00 }
+  },
+/* lea.2 ${d-imm7-4}(${d-An}),(${s1-An})${s1-i4-2}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', 0 } },
+    & ifmt_lea_2_d_indirect_with_offset_4_s1_ea_indirect_with_post_increment_2, { 0x400ea00 }
+  },
+/* lea.2 (${d-An}),(${s1-An})${s1-i4-2}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', 0 } },
+    & ifmt_lea_2_d_indirect_4_s1_ea_indirect_with_post_increment_2, { 0x400ea00 }
+  },
+/* lea.2 (${d-An})${d-i4-4}++,(${s1-An})${s1-i4-2}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', 0 } },
+    & ifmt_lea_2_d_indirect_with_post_increment_4_s1_ea_indirect_with_post_increment_2, { 0x200ea00 }
+  },
+/* lea.2 ${d-i4-4}(${d-An})++,(${s1-An})${s1-i4-2}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', 0 } },
+    & ifmt_lea_2_d_indirect_with_pre_increment_4_s1_ea_indirect_with_post_increment_2, { 0x210ea00 }
+  },
+/* lea.2 ${d-direct-addr},${s1-i4-2}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_lea_2_d_direct_s1_ea_indirect_with_pre_increment_2, { 0x100ea10 }
+  },
+/* lea.2 #${d-imm8},${s1-i4-2}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_lea_2_d_immediate_4_s1_ea_indirect_with_pre_increment_2, { 0xea10 }
+  },
+/* lea.2 (${d-An},${d-r}),${s1-i4-2}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_lea_2_d_indirect_with_index_4_s1_ea_indirect_with_pre_increment_2, { 0x300ea10 }
+  },
+/* lea.2 ${d-imm7-4}(${d-An}),${s1-i4-2}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_lea_2_d_indirect_with_offset_4_s1_ea_indirect_with_pre_increment_2, { 0x400ea10 }
+  },
+/* lea.2 (${d-An}),${s1-i4-2}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_lea_2_d_indirect_4_s1_ea_indirect_with_pre_increment_2, { 0x400ea10 }
+  },
+/* lea.2 (${d-An})${d-i4-4}++,${s1-i4-2}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_lea_2_d_indirect_with_post_increment_4_s1_ea_indirect_with_pre_increment_2, { 0x200ea10 }
+  },
+/* lea.2 ${d-i4-4}(${d-An})++,${s1-i4-2}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_lea_2_d_indirect_with_pre_increment_4_s1_ea_indirect_with_pre_increment_2, { 0x210ea10 }
+  },
+/* lea.2 ${d-direct-addr},#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_lea_4_d_direct_s1_ea_immediate, { 0x100e800 }
+  },
+/* lea.2 #${d-imm8},#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_lea_4_d_immediate_4_s1_ea_immediate, { 0xe800 }
+  },
+/* lea.2 (${d-An},${d-r}),#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_lea_4_d_indirect_with_index_4_s1_ea_immediate, { 0x300e800 }
+  },
+/* lea.2 ${d-imm7-4}(${d-An}),#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_lea_4_d_indirect_with_offset_4_s1_ea_immediate, { 0x400e800 }
+  },
+/* lea.2 (${d-An}),#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_lea_4_d_indirect_4_s1_ea_immediate, { 0x400e800 }
+  },
+/* lea.2 (${d-An})${d-i4-4}++,#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_lea_4_d_indirect_with_post_increment_4_s1_ea_immediate, { 0x200e800 }
+  },
+/* lea.2 ${d-i4-4}(${d-An})++,#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_lea_4_d_indirect_with_pre_increment_4_s1_ea_immediate, { 0x210e800 }
+  },
+/* lea.1 ${d-direct-addr},(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_lea_4_d_direct_s1_ea_indirect, { 0x100fc00 }
+  },
+/* lea.1 #${d-imm8},(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_lea_4_d_immediate_4_s1_ea_indirect, { 0xfc00 }
+  },
+/* lea.1 (${d-An},${d-r}),(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_lea_4_d_indirect_with_index_4_s1_ea_indirect, { 0x300fc00 }
+  },
+/* lea.1 ${d-imm7-4}(${d-An}),(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_lea_4_d_indirect_with_offset_4_s1_ea_indirect, { 0x400fc00 }
+  },
+/* lea.1 (${d-An}),(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_lea_4_d_indirect_4_s1_ea_indirect, { 0x400fc00 }
+  },
+/* lea.1 (${d-An})${d-i4-4}++,(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_lea_4_d_indirect_with_post_increment_4_s1_ea_indirect, { 0x200fc00 }
+  },
+/* lea.1 ${d-i4-4}(${d-An})++,(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_lea_4_d_indirect_with_pre_increment_4_s1_ea_indirect, { 0x210fc00 }
+  },
+/* lea.1 ${d-direct-addr},${s1-imm7-1}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_lea_1_d_direct_s1_ea_indirect_with_offset_1, { 0x100fc00 }
+  },
+/* lea.1 #${d-imm8},${s1-imm7-1}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_lea_1_d_immediate_4_s1_ea_indirect_with_offset_1, { 0xfc00 }
+  },
+/* lea.1 (${d-An},${d-r}),${s1-imm7-1}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_lea_1_d_indirect_with_index_4_s1_ea_indirect_with_offset_1, { 0x300fc00 }
+  },
+/* lea.1 ${d-imm7-4}(${d-An}),${s1-imm7-1}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_lea_1_d_indirect_with_offset_4_s1_ea_indirect_with_offset_1, { 0x400fc00 }
+  },
+/* lea.1 (${d-An}),${s1-imm7-1}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_lea_1_d_indirect_4_s1_ea_indirect_with_offset_1, { 0x400fc00 }
+  },
+/* lea.1 (${d-An})${d-i4-4}++,${s1-imm7-1}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_lea_1_d_indirect_with_post_increment_4_s1_ea_indirect_with_offset_1, { 0x200fc00 }
+  },
+/* lea.1 ${d-i4-4}(${d-An})++,${s1-imm7-1}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_lea_1_d_indirect_with_pre_increment_4_s1_ea_indirect_with_offset_1, { 0x210fc00 }
+  },
+/* lea.1 ${d-direct-addr},(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_lea_1_d_direct_s1_ea_indirect_with_index_1, { 0x100fb00 }
+  },
+/* lea.1 #${d-imm8},(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_lea_1_d_immediate_4_s1_ea_indirect_with_index_1, { 0xfb00 }
+  },
+/* lea.1 (${d-An},${d-r}),(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_lea_1_d_indirect_with_index_4_s1_ea_indirect_with_index_1, { 0x300fb00 }
+  },
+/* lea.1 ${d-imm7-4}(${d-An}),(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_lea_1_d_indirect_with_offset_4_s1_ea_indirect_with_index_1, { 0x400fb00 }
+  },
+/* lea.1 (${d-An}),(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_lea_1_d_indirect_4_s1_ea_indirect_with_index_1, { 0x400fb00 }
+  },
+/* lea.1 (${d-An})${d-i4-4}++,(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_lea_1_d_indirect_with_post_increment_4_s1_ea_indirect_with_index_1, { 0x200fb00 }
+  },
+/* lea.1 ${d-i4-4}(${d-An})++,(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_lea_1_d_indirect_with_pre_increment_4_s1_ea_indirect_with_index_1, { 0x210fb00 }
+  },
+/* lea.1 ${d-direct-addr},(${s1-An})${s1-i4-1}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', 0 } },
+    & ifmt_lea_1_d_direct_s1_ea_indirect_with_post_increment_1, { 0x100fa00 }
+  },
+/* lea.1 #${d-imm8},(${s1-An})${s1-i4-1}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', 0 } },
+    & ifmt_lea_1_d_immediate_4_s1_ea_indirect_with_post_increment_1, { 0xfa00 }
+  },
+/* lea.1 (${d-An},${d-r}),(${s1-An})${s1-i4-1}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', 0 } },
+    & ifmt_lea_1_d_indirect_with_index_4_s1_ea_indirect_with_post_increment_1, { 0x300fa00 }
+  },
+/* lea.1 ${d-imm7-4}(${d-An}),(${s1-An})${s1-i4-1}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', 0 } },
+    & ifmt_lea_1_d_indirect_with_offset_4_s1_ea_indirect_with_post_increment_1, { 0x400fa00 }
+  },
+/* lea.1 (${d-An}),(${s1-An})${s1-i4-1}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', 0 } },
+    & ifmt_lea_1_d_indirect_4_s1_ea_indirect_with_post_increment_1, { 0x400fa00 }
+  },
+/* lea.1 (${d-An})${d-i4-4}++,(${s1-An})${s1-i4-1}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', 0 } },
+    & ifmt_lea_1_d_indirect_with_post_increment_4_s1_ea_indirect_with_post_increment_1, { 0x200fa00 }
+  },
+/* lea.1 ${d-i4-4}(${d-An})++,(${s1-An})${s1-i4-1}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', 0 } },
+    & ifmt_lea_1_d_indirect_with_pre_increment_4_s1_ea_indirect_with_post_increment_1, { 0x210fa00 }
+  },
+/* lea.1 ${d-direct-addr},${s1-i4-1}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_lea_1_d_direct_s1_ea_indirect_with_pre_increment_1, { 0x100fa10 }
+  },
+/* lea.1 #${d-imm8},${s1-i4-1}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_lea_1_d_immediate_4_s1_ea_indirect_with_pre_increment_1, { 0xfa10 }
+  },
+/* lea.1 (${d-An},${d-r}),${s1-i4-1}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_lea_1_d_indirect_with_index_4_s1_ea_indirect_with_pre_increment_1, { 0x300fa10 }
+  },
+/* lea.1 ${d-imm7-4}(${d-An}),${s1-i4-1}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_lea_1_d_indirect_with_offset_4_s1_ea_indirect_with_pre_increment_1, { 0x400fa10 }
+  },
+/* lea.1 (${d-An}),${s1-i4-1}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_lea_1_d_indirect_4_s1_ea_indirect_with_pre_increment_1, { 0x400fa10 }
+  },
+/* lea.1 (${d-An})${d-i4-4}++,${s1-i4-1}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_lea_1_d_indirect_with_post_increment_4_s1_ea_indirect_with_pre_increment_1, { 0x200fa10 }
+  },
+/* lea.1 ${d-i4-4}(${d-An})++,${s1-i4-1}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_lea_1_d_indirect_with_pre_increment_4_s1_ea_indirect_with_pre_increment_1, { 0x210fa10 }
+  },
+/* lea.1 ${d-direct-addr},#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_lea_4_d_direct_s1_ea_immediate, { 0x100f800 }
+  },
+/* lea.1 #${d-imm8},#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_lea_4_d_immediate_4_s1_ea_immediate, { 0xf800 }
+  },
+/* lea.1 (${d-An},${d-r}),#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_lea_4_d_indirect_with_index_4_s1_ea_immediate, { 0x300f800 }
+  },
+/* lea.1 ${d-imm7-4}(${d-An}),#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_lea_4_d_indirect_with_offset_4_s1_ea_immediate, { 0x400f800 }
+  },
+/* lea.1 (${d-An}),#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_lea_4_d_indirect_4_s1_ea_immediate, { 0x400f800 }
+  },
+/* lea.1 (${d-An})${d-i4-4}++,#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_lea_4_d_indirect_with_post_increment_4_s1_ea_immediate, { 0x200f800 }
+  },
+/* lea.1 ${d-i4-4}(${d-An})++,#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_lea_4_d_indirect_with_pre_increment_4_s1_ea_immediate, { 0x210f800 }
+  },
+/* cmpi ${s1-direct-addr},#${imm16-1} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_DIRECT_ADDR), ',', '#', OP (IMM16_1), 0 } },
+    & ifmt_cmpi_s1_direct, { 0xc0000100 }
+  },
+/* cmpi #${s1-imm8},#${imm16-1} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (S1_IMM8), ',', '#', OP (IMM16_1), 0 } },
+    & ifmt_cmpi_s1_immediate, { 0xc0000000 }
+  },
+/* cmpi (${s1-An},${s1-r}),#${imm16-1} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', '#', OP (IMM16_1), 0 } },
+    & ifmt_cmpi_s1_indirect_with_index_2, { 0xc0000300 }
+  },
+/* cmpi ${s1-imm7-2}(${s1-An}),#${imm16-1} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', '#', OP (IMM16_1), 0 } },
+    & ifmt_cmpi_s1_indirect_with_offset_2, { 0xc0000400 }
+  },
+/* cmpi (${s1-An}),#${imm16-1} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ')', ',', '#', OP (IMM16_1), 0 } },
+    & ifmt_cmpi_s1_indirect_2, { 0xc0000400 }
+  },
+/* cmpi (${s1-An})${s1-i4-2}++,#${imm16-1} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', '#', OP (IMM16_1), 0 } },
+    & ifmt_cmpi_s1_indirect_with_post_increment_2, { 0xc0000200 }
+  },
+/* cmpi ${s1-i4-2}(${s1-An})++,#${imm16-1} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', '#', OP (IMM16_1), 0 } },
+    & ifmt_cmpi_s1_indirect_with_pre_increment_2, { 0xc0000210 }
+  },
+/* pxadds.u ${d-direct-addr},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_direct, { 0xb1008100 }
+  },
+/* pxadds.u #${d-imm8},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_immediate_2_s1_direct, { 0xb0008100 }
+  },
+/* pxadds.u (${d-An},${d-r}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_index_2_s1_direct, { 0xb3008100 }
+  },
+/* pxadds.u ${d-imm7-2}(${d-An}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_offset_2_s1_direct, { 0xb4008100 }
+  },
+/* pxadds.u (${d-An}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_2_s1_direct, { 0xb4008100 }
+  },
+/* pxadds.u (${d-An})${d-i4-2}++,${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_post_increment_2_s1_direct, { 0xb2008100 }
+  },
+/* pxadds.u ${d-i4-2}(${d-An})++,${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_pre_increment_2_s1_direct, { 0xb2108100 }
+  },
+/* pxadds.u ${d-direct-addr},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_immediate, { 0xb1008000 }
+  },
+/* pxadds.u #${d-imm8},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_immediate_2_s1_immediate, { 0xb0008000 }
+  },
+/* pxadds.u (${d-An},${d-r}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_index_2_s1_immediate, { 0xb3008000 }
+  },
+/* pxadds.u ${d-imm7-2}(${d-An}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_offset_2_s1_immediate, { 0xb4008000 }
+  },
+/* pxadds.u (${d-An}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_2_s1_immediate, { 0xb4008000 }
+  },
+/* pxadds.u (${d-An})${d-i4-2}++,#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_post_increment_2_s1_immediate, { 0xb2008000 }
+  },
+/* pxadds.u ${d-i4-2}(${d-An})++,#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_pre_increment_2_s1_immediate, { 0xb2108000 }
+  },
+/* pxadds.u ${d-direct-addr},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_with_index_4, { 0xb1008300 }
+  },
+/* pxadds.u #${d-imm8},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_immediate_2_s1_indirect_with_index_4, { 0xb0008300 }
+  },
+/* pxadds.u (${d-An},${d-r}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_index_2_s1_indirect_with_index_4, { 0xb3008300 }
+  },
+/* pxadds.u ${d-imm7-2}(${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_offset_2_s1_indirect_with_index_4, { 0xb4008300 }
+  },
+/* pxadds.u (${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_2_s1_indirect_with_index_4, { 0xb4008300 }
+  },
+/* pxadds.u (${d-An})${d-i4-2}++,(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_post_increment_2_s1_indirect_with_index_4, { 0xb2008300 }
+  },
+/* pxadds.u ${d-i4-2}(${d-An})++,(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_pre_increment_2_s1_indirect_with_index_4, { 0xb2108300 }
+  },
+/* pxadds.u ${d-direct-addr},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_with_offset_4, { 0xb1008400 }
+  },
+/* pxadds.u #${d-imm8},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_immediate_2_s1_indirect_with_offset_4, { 0xb0008400 }
+  },
+/* pxadds.u (${d-An},${d-r}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_index_2_s1_indirect_with_offset_4, { 0xb3008400 }
+  },
+/* pxadds.u ${d-imm7-2}(${d-An}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_offset_2_s1_indirect_with_offset_4, { 0xb4008400 }
+  },
+/* pxadds.u (${d-An}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_2_s1_indirect_with_offset_4, { 0xb4008400 }
+  },
+/* pxadds.u (${d-An})${d-i4-2}++,${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_post_increment_2_s1_indirect_with_offset_4, { 0xb2008400 }
+  },
+/* pxadds.u ${d-i4-2}(${d-An})++,${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_pre_increment_2_s1_indirect_with_offset_4, { 0xb2108400 }
+  },
+/* pxadds.u ${d-direct-addr},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_4, { 0xb1008400 }
+  },
+/* pxadds.u #${d-imm8},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_immediate_2_s1_indirect_4, { 0xb0008400 }
+  },
+/* pxadds.u (${d-An},${d-r}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_index_2_s1_indirect_4, { 0xb3008400 }
+  },
+/* pxadds.u ${d-imm7-2}(${d-An}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_offset_2_s1_indirect_4, { 0xb4008400 }
+  },
+/* pxadds.u (${d-An}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_2_s1_indirect_4, { 0xb4008400 }
+  },
+/* pxadds.u (${d-An})${d-i4-2}++,(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_post_increment_2_s1_indirect_4, { 0xb2008400 }
+  },
+/* pxadds.u ${d-i4-2}(${d-An})++,(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_pre_increment_2_s1_indirect_4, { 0xb2108400 }
+  },
+/* pxadds.u ${d-direct-addr},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_with_post_increment_4, { 0xb1008200 }
+  },
+/* pxadds.u #${d-imm8},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_immediate_2_s1_indirect_with_post_increment_4, { 0xb0008200 }
+  },
+/* pxadds.u (${d-An},${d-r}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_index_2_s1_indirect_with_post_increment_4, { 0xb3008200 }
+  },
+/* pxadds.u ${d-imm7-2}(${d-An}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_offset_2_s1_indirect_with_post_increment_4, { 0xb4008200 }
+  },
+/* pxadds.u (${d-An}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_2_s1_indirect_with_post_increment_4, { 0xb4008200 }
+  },
+/* pxadds.u (${d-An})${d-i4-2}++,(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_post_increment_2_s1_indirect_with_post_increment_4, { 0xb2008200 }
+  },
+/* pxadds.u ${d-i4-2}(${d-An})++,(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_pre_increment_2_s1_indirect_with_post_increment_4, { 0xb2108200 }
+  },
+/* pxadds.u ${d-direct-addr},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_with_pre_increment_4, { 0xb1008210 }
+  },
+/* pxadds.u #${d-imm8},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_immediate_2_s1_indirect_with_pre_increment_4, { 0xb0008210 }
+  },
+/* pxadds.u (${d-An},${d-r}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_index_2_s1_indirect_with_pre_increment_4, { 0xb3008210 }
+  },
+/* pxadds.u ${d-imm7-2}(${d-An}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_offset_2_s1_indirect_with_pre_increment_4, { 0xb4008210 }
+  },
+/* pxadds.u (${d-An}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_2_s1_indirect_with_pre_increment_4, { 0xb4008210 }
+  },
+/* pxadds.u (${d-An})${d-i4-2}++,${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_post_increment_2_s1_indirect_with_pre_increment_4, { 0xb2008210 }
+  },
+/* pxadds.u ${d-i4-2}(${d-An})++,${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_pre_increment_2_s1_indirect_with_pre_increment_4, { 0xb2108210 }
+  },
+/* pxadds ${d-direct-addr},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_direct, { 0xb1000100 }
+  },
+/* pxadds #${d-imm8},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_immediate_2_s1_direct, { 0xb0000100 }
+  },
+/* pxadds (${d-An},${d-r}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_index_2_s1_direct, { 0xb3000100 }
+  },
+/* pxadds ${d-imm7-2}(${d-An}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_offset_2_s1_direct, { 0xb4000100 }
+  },
+/* pxadds (${d-An}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_2_s1_direct, { 0xb4000100 }
+  },
+/* pxadds (${d-An})${d-i4-2}++,${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_post_increment_2_s1_direct, { 0xb2000100 }
+  },
+/* pxadds ${d-i4-2}(${d-An})++,${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_pre_increment_2_s1_direct, { 0xb2100100 }
+  },
+/* pxadds ${d-direct-addr},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_immediate, { 0xb1000000 }
+  },
+/* pxadds #${d-imm8},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_immediate_2_s1_immediate, { 0xb0000000 }
+  },
+/* pxadds (${d-An},${d-r}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_index_2_s1_immediate, { 0xb3000000 }
+  },
+/* pxadds ${d-imm7-2}(${d-An}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_offset_2_s1_immediate, { 0xb4000000 }
+  },
+/* pxadds (${d-An}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_2_s1_immediate, { 0xb4000000 }
+  },
+/* pxadds (${d-An})${d-i4-2}++,#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_post_increment_2_s1_immediate, { 0xb2000000 }
+  },
+/* pxadds ${d-i4-2}(${d-An})++,#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_pre_increment_2_s1_immediate, { 0xb2100000 }
+  },
+/* pxadds ${d-direct-addr},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_with_index_4, { 0xb1000300 }
+  },
+/* pxadds #${d-imm8},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_immediate_2_s1_indirect_with_index_4, { 0xb0000300 }
+  },
+/* pxadds (${d-An},${d-r}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_index_2_s1_indirect_with_index_4, { 0xb3000300 }
+  },
+/* pxadds ${d-imm7-2}(${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_offset_2_s1_indirect_with_index_4, { 0xb4000300 }
+  },
+/* pxadds (${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_2_s1_indirect_with_index_4, { 0xb4000300 }
+  },
+/* pxadds (${d-An})${d-i4-2}++,(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_post_increment_2_s1_indirect_with_index_4, { 0xb2000300 }
+  },
+/* pxadds ${d-i4-2}(${d-An})++,(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_pre_increment_2_s1_indirect_with_index_4, { 0xb2100300 }
+  },
+/* pxadds ${d-direct-addr},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_with_offset_4, { 0xb1000400 }
+  },
+/* pxadds #${d-imm8},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_immediate_2_s1_indirect_with_offset_4, { 0xb0000400 }
+  },
+/* pxadds (${d-An},${d-r}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_index_2_s1_indirect_with_offset_4, { 0xb3000400 }
+  },
+/* pxadds ${d-imm7-2}(${d-An}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_offset_2_s1_indirect_with_offset_4, { 0xb4000400 }
+  },
+/* pxadds (${d-An}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_2_s1_indirect_with_offset_4, { 0xb4000400 }
+  },
+/* pxadds (${d-An})${d-i4-2}++,${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_post_increment_2_s1_indirect_with_offset_4, { 0xb2000400 }
+  },
+/* pxadds ${d-i4-2}(${d-An})++,${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_pre_increment_2_s1_indirect_with_offset_4, { 0xb2100400 }
+  },
+/* pxadds ${d-direct-addr},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_4, { 0xb1000400 }
+  },
+/* pxadds #${d-imm8},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_immediate_2_s1_indirect_4, { 0xb0000400 }
+  },
+/* pxadds (${d-An},${d-r}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_index_2_s1_indirect_4, { 0xb3000400 }
+  },
+/* pxadds ${d-imm7-2}(${d-An}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_offset_2_s1_indirect_4, { 0xb4000400 }
+  },
+/* pxadds (${d-An}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_2_s1_indirect_4, { 0xb4000400 }
+  },
+/* pxadds (${d-An})${d-i4-2}++,(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_post_increment_2_s1_indirect_4, { 0xb2000400 }
+  },
+/* pxadds ${d-i4-2}(${d-An})++,(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_pre_increment_2_s1_indirect_4, { 0xb2100400 }
+  },
+/* pxadds ${d-direct-addr},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_with_post_increment_4, { 0xb1000200 }
+  },
+/* pxadds #${d-imm8},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_immediate_2_s1_indirect_with_post_increment_4, { 0xb0000200 }
+  },
+/* pxadds (${d-An},${d-r}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_index_2_s1_indirect_with_post_increment_4, { 0xb3000200 }
+  },
+/* pxadds ${d-imm7-2}(${d-An}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_offset_2_s1_indirect_with_post_increment_4, { 0xb4000200 }
+  },
+/* pxadds (${d-An}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_2_s1_indirect_with_post_increment_4, { 0xb4000200 }
+  },
+/* pxadds (${d-An})${d-i4-2}++,(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_post_increment_2_s1_indirect_with_post_increment_4, { 0xb2000200 }
+  },
+/* pxadds ${d-i4-2}(${d-An})++,(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_pre_increment_2_s1_indirect_with_post_increment_4, { 0xb2100200 }
+  },
+/* pxadds ${d-direct-addr},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_with_pre_increment_4, { 0xb1000210 }
+  },
+/* pxadds #${d-imm8},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_immediate_2_s1_indirect_with_pre_increment_4, { 0xb0000210 }
+  },
+/* pxadds (${d-An},${d-r}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_index_2_s1_indirect_with_pre_increment_4, { 0xb3000210 }
+  },
+/* pxadds ${d-imm7-2}(${d-An}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_offset_2_s1_indirect_with_pre_increment_4, { 0xb4000210 }
+  },
+/* pxadds (${d-An}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_2_s1_indirect_with_pre_increment_4, { 0xb4000210 }
+  },
+/* pxadds (${d-An})${d-i4-2}++,${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_post_increment_2_s1_indirect_with_pre_increment_4, { 0xb2000210 }
+  },
+/* pxadds ${d-i4-2}(${d-An})++,${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_pre_increment_2_s1_indirect_with_pre_increment_4, { 0xb2100210 }
+  },
+/* pxhi.s ${Dn},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxhi_s_s1_direct, { 0x14408100 }
+  },
+/* pxhi.s ${Dn},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxhi_s_s1_immediate, { 0x14408000 }
+  },
+/* pxhi.s ${Dn},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxhi_s_s1_indirect_with_index_4, { 0x14408300 }
+  },
+/* pxhi.s ${Dn},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxhi_s_s1_indirect_with_offset_4, { 0x14408400 }
+  },
+/* pxhi.s ${Dn},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxhi_s_s1_indirect_4, { 0x14408400 }
+  },
+/* pxhi.s ${Dn},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxhi_s_s1_indirect_with_post_increment_4, { 0x14408200 }
+  },
+/* pxhi.s ${Dn},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxhi_s_s1_indirect_with_pre_increment_4, { 0x14408210 }
+  },
+/* pxhi ${Dn},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxhi_s_s1_direct, { 0x14000100 }
+  },
+/* pxhi ${Dn},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxhi_s_s1_immediate, { 0x14000000 }
+  },
+/* pxhi ${Dn},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxhi_s_s1_indirect_with_index_4, { 0x14000300 }
+  },
+/* pxhi ${Dn},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxhi_s_s1_indirect_with_offset_4, { 0x14000400 }
+  },
+/* pxhi ${Dn},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxhi_s_s1_indirect_4, { 0x14000400 }
+  },
+/* pxhi ${Dn},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxhi_s_s1_indirect_with_post_increment_4, { 0x14000200 }
+  },
+/* pxhi ${Dn},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DN), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxhi_s_s1_indirect_with_pre_increment_4, { 0x14000210 }
+  },
+/* pxvi.s ${d-direct-addr},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_direct, { 0xa9008100 }
+  },
+/* pxvi.s #${d-imm8},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_direct, { 0xa8008100 }
+  },
+/* pxvi.s (${d-An},${d-r}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_direct, { 0xab008100 }
+  },
+/* pxvi.s ${d-imm7-4}(${d-An}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_direct, { 0xac008100 }
+  },
+/* pxvi.s (${d-An}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_direct, { 0xac008100 }
+  },
+/* pxvi.s (${d-An})${d-i4-4}++,${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_direct, { 0xaa008100 }
+  },
+/* pxvi.s ${d-i4-4}(${d-An})++,${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_direct, { 0xaa108100 }
+  },
+/* pxvi.s ${d-direct-addr},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_immediate, { 0xa9008000 }
+  },
+/* pxvi.s #${d-imm8},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_immediate, { 0xa8008000 }
+  },
+/* pxvi.s (${d-An},${d-r}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_immediate, { 0xab008000 }
+  },
+/* pxvi.s ${d-imm7-4}(${d-An}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_immediate, { 0xac008000 }
+  },
+/* pxvi.s (${d-An}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_immediate, { 0xac008000 }
+  },
+/* pxvi.s (${d-An})${d-i4-4}++,#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_immediate, { 0xaa008000 }
+  },
+/* pxvi.s ${d-i4-4}(${d-An})++,#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_immediate, { 0xaa108000 }
+  },
+/* pxvi.s ${d-direct-addr},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_with_index_4, { 0xa9008300 }
+  },
+/* pxvi.s #${d-imm8},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_indirect_with_index_4, { 0xa8008300 }
+  },
+/* pxvi.s (${d-An},${d-r}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_indirect_with_index_4, { 0xab008300 }
+  },
+/* pxvi.s ${d-imm7-4}(${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_indirect_with_index_4, { 0xac008300 }
+  },
+/* pxvi.s (${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_indirect_with_index_4, { 0xac008300 }
+  },
+/* pxvi.s (${d-An})${d-i4-4}++,(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_indirect_with_index_4, { 0xaa008300 }
+  },
+/* pxvi.s ${d-i4-4}(${d-An})++,(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_indirect_with_index_4, { 0xaa108300 }
+  },
+/* pxvi.s ${d-direct-addr},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_with_offset_4, { 0xa9008400 }
+  },
+/* pxvi.s #${d-imm8},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_indirect_with_offset_4, { 0xa8008400 }
+  },
+/* pxvi.s (${d-An},${d-r}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_indirect_with_offset_4, { 0xab008400 }
+  },
+/* pxvi.s ${d-imm7-4}(${d-An}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_indirect_with_offset_4, { 0xac008400 }
+  },
+/* pxvi.s (${d-An}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_indirect_with_offset_4, { 0xac008400 }
+  },
+/* pxvi.s (${d-An})${d-i4-4}++,${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_indirect_with_offset_4, { 0xaa008400 }
+  },
+/* pxvi.s ${d-i4-4}(${d-An})++,${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_indirect_with_offset_4, { 0xaa108400 }
+  },
+/* pxvi.s ${d-direct-addr},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_4, { 0xa9008400 }
+  },
+/* pxvi.s #${d-imm8},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_indirect_4, { 0xa8008400 }
+  },
+/* pxvi.s (${d-An},${d-r}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_indirect_4, { 0xab008400 }
+  },
+/* pxvi.s ${d-imm7-4}(${d-An}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_indirect_4, { 0xac008400 }
+  },
+/* pxvi.s (${d-An}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_indirect_4, { 0xac008400 }
+  },
+/* pxvi.s (${d-An})${d-i4-4}++,(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_indirect_4, { 0xaa008400 }
+  },
+/* pxvi.s ${d-i4-4}(${d-An})++,(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_indirect_4, { 0xaa108400 }
+  },
+/* pxvi.s ${d-direct-addr},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_with_post_increment_4, { 0xa9008200 }
+  },
+/* pxvi.s #${d-imm8},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_indirect_with_post_increment_4, { 0xa8008200 }
+  },
+/* pxvi.s (${d-An},${d-r}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_indirect_with_post_increment_4, { 0xab008200 }
+  },
+/* pxvi.s ${d-imm7-4}(${d-An}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_indirect_with_post_increment_4, { 0xac008200 }
+  },
+/* pxvi.s (${d-An}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_indirect_with_post_increment_4, { 0xac008200 }
+  },
+/* pxvi.s (${d-An})${d-i4-4}++,(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_indirect_with_post_increment_4, { 0xaa008200 }
+  },
+/* pxvi.s ${d-i4-4}(${d-An})++,(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_indirect_with_post_increment_4, { 0xaa108200 }
+  },
+/* pxvi.s ${d-direct-addr},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_with_pre_increment_4, { 0xa9008210 }
+  },
+/* pxvi.s #${d-imm8},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_indirect_with_pre_increment_4, { 0xa8008210 }
+  },
+/* pxvi.s (${d-An},${d-r}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_indirect_with_pre_increment_4, { 0xab008210 }
+  },
+/* pxvi.s ${d-imm7-4}(${d-An}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_indirect_with_pre_increment_4, { 0xac008210 }
+  },
+/* pxvi.s (${d-An}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_indirect_with_pre_increment_4, { 0xac008210 }
+  },
+/* pxvi.s (${d-An})${d-i4-4}++,${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_indirect_with_pre_increment_4, { 0xaa008210 }
+  },
+/* pxvi.s ${d-i4-4}(${d-An})++,${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_indirect_with_pre_increment_4, { 0xaa108210 }
+  },
+/* pxvi ${d-direct-addr},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_direct, { 0xa9000100 }
+  },
+/* pxvi #${d-imm8},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_direct, { 0xa8000100 }
+  },
+/* pxvi (${d-An},${d-r}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_direct, { 0xab000100 }
+  },
+/* pxvi ${d-imm7-4}(${d-An}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_direct, { 0xac000100 }
+  },
+/* pxvi (${d-An}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_direct, { 0xac000100 }
+  },
+/* pxvi (${d-An})${d-i4-4}++,${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_direct, { 0xaa000100 }
+  },
+/* pxvi ${d-i4-4}(${d-An})++,${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_direct, { 0xaa100100 }
+  },
+/* pxvi ${d-direct-addr},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_immediate, { 0xa9000000 }
+  },
+/* pxvi #${d-imm8},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_immediate, { 0xa8000000 }
+  },
+/* pxvi (${d-An},${d-r}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_immediate, { 0xab000000 }
+  },
+/* pxvi ${d-imm7-4}(${d-An}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_immediate, { 0xac000000 }
+  },
+/* pxvi (${d-An}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_immediate, { 0xac000000 }
+  },
+/* pxvi (${d-An})${d-i4-4}++,#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_immediate, { 0xaa000000 }
+  },
+/* pxvi ${d-i4-4}(${d-An})++,#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_immediate, { 0xaa100000 }
+  },
+/* pxvi ${d-direct-addr},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_with_index_4, { 0xa9000300 }
+  },
+/* pxvi #${d-imm8},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_indirect_with_index_4, { 0xa8000300 }
+  },
+/* pxvi (${d-An},${d-r}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_indirect_with_index_4, { 0xab000300 }
+  },
+/* pxvi ${d-imm7-4}(${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_indirect_with_index_4, { 0xac000300 }
+  },
+/* pxvi (${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_indirect_with_index_4, { 0xac000300 }
+  },
+/* pxvi (${d-An})${d-i4-4}++,(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_indirect_with_index_4, { 0xaa000300 }
+  },
+/* pxvi ${d-i4-4}(${d-An})++,(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_indirect_with_index_4, { 0xaa100300 }
+  },
+/* pxvi ${d-direct-addr},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_with_offset_4, { 0xa9000400 }
+  },
+/* pxvi #${d-imm8},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_indirect_with_offset_4, { 0xa8000400 }
+  },
+/* pxvi (${d-An},${d-r}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_indirect_with_offset_4, { 0xab000400 }
+  },
+/* pxvi ${d-imm7-4}(${d-An}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_indirect_with_offset_4, { 0xac000400 }
+  },
+/* pxvi (${d-An}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_indirect_with_offset_4, { 0xac000400 }
+  },
+/* pxvi (${d-An})${d-i4-4}++,${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_indirect_with_offset_4, { 0xaa000400 }
+  },
+/* pxvi ${d-i4-4}(${d-An})++,${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_indirect_with_offset_4, { 0xaa100400 }
+  },
+/* pxvi ${d-direct-addr},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_4, { 0xa9000400 }
+  },
+/* pxvi #${d-imm8},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_indirect_4, { 0xa8000400 }
+  },
+/* pxvi (${d-An},${d-r}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_indirect_4, { 0xab000400 }
+  },
+/* pxvi ${d-imm7-4}(${d-An}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_indirect_4, { 0xac000400 }
+  },
+/* pxvi (${d-An}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_indirect_4, { 0xac000400 }
+  },
+/* pxvi (${d-An})${d-i4-4}++,(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_indirect_4, { 0xaa000400 }
+  },
+/* pxvi ${d-i4-4}(${d-An})++,(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_indirect_4, { 0xaa100400 }
+  },
+/* pxvi ${d-direct-addr},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_with_post_increment_4, { 0xa9000200 }
+  },
+/* pxvi #${d-imm8},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_indirect_with_post_increment_4, { 0xa8000200 }
+  },
+/* pxvi (${d-An},${d-r}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_indirect_with_post_increment_4, { 0xab000200 }
+  },
+/* pxvi ${d-imm7-4}(${d-An}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_indirect_with_post_increment_4, { 0xac000200 }
+  },
+/* pxvi (${d-An}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_indirect_with_post_increment_4, { 0xac000200 }
+  },
+/* pxvi (${d-An})${d-i4-4}++,(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_indirect_with_post_increment_4, { 0xaa000200 }
+  },
+/* pxvi ${d-i4-4}(${d-An})++,(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_indirect_with_post_increment_4, { 0xaa100200 }
+  },
+/* pxvi ${d-direct-addr},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_with_pre_increment_4, { 0xa9000210 }
+  },
+/* pxvi #${d-imm8},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_indirect_with_pre_increment_4, { 0xa8000210 }
+  },
+/* pxvi (${d-An},${d-r}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_indirect_with_pre_increment_4, { 0xab000210 }
+  },
+/* pxvi ${d-imm7-4}(${d-An}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_indirect_with_pre_increment_4, { 0xac000210 }
+  },
+/* pxvi (${d-An}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_indirect_with_pre_increment_4, { 0xac000210 }
+  },
+/* pxvi (${d-An})${d-i4-4}++,${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_indirect_with_pre_increment_4, { 0xaa000210 }
+  },
+/* pxvi ${d-i4-4}(${d-An})++,${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_indirect_with_pre_increment_4, { 0xaa100210 }
+  },
+/* pxblend.t ${d-direct-addr},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_direct, { 0xa1008100 }
+  },
+/* pxblend.t #${d-imm8},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_direct, { 0xa0008100 }
+  },
+/* pxblend.t (${d-An},${d-r}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_direct, { 0xa3008100 }
+  },
+/* pxblend.t ${d-imm7-4}(${d-An}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_direct, { 0xa4008100 }
+  },
+/* pxblend.t (${d-An}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_direct, { 0xa4008100 }
+  },
+/* pxblend.t (${d-An})${d-i4-4}++,${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_direct, { 0xa2008100 }
+  },
+/* pxblend.t ${d-i4-4}(${d-An})++,${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_direct, { 0xa2108100 }
+  },
+/* pxblend.t ${d-direct-addr},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_immediate, { 0xa1008000 }
+  },
+/* pxblend.t #${d-imm8},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_immediate, { 0xa0008000 }
+  },
+/* pxblend.t (${d-An},${d-r}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_immediate, { 0xa3008000 }
+  },
+/* pxblend.t ${d-imm7-4}(${d-An}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_immediate, { 0xa4008000 }
+  },
+/* pxblend.t (${d-An}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_immediate, { 0xa4008000 }
+  },
+/* pxblend.t (${d-An})${d-i4-4}++,#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_immediate, { 0xa2008000 }
+  },
+/* pxblend.t ${d-i4-4}(${d-An})++,#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_immediate, { 0xa2108000 }
+  },
+/* pxblend.t ${d-direct-addr},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_with_index_4, { 0xa1008300 }
+  },
+/* pxblend.t #${d-imm8},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_indirect_with_index_4, { 0xa0008300 }
+  },
+/* pxblend.t (${d-An},${d-r}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_indirect_with_index_4, { 0xa3008300 }
+  },
+/* pxblend.t ${d-imm7-4}(${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_indirect_with_index_4, { 0xa4008300 }
+  },
+/* pxblend.t (${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_indirect_with_index_4, { 0xa4008300 }
+  },
+/* pxblend.t (${d-An})${d-i4-4}++,(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_indirect_with_index_4, { 0xa2008300 }
+  },
+/* pxblend.t ${d-i4-4}(${d-An})++,(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_indirect_with_index_4, { 0xa2108300 }
+  },
+/* pxblend.t ${d-direct-addr},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_with_offset_4, { 0xa1008400 }
+  },
+/* pxblend.t #${d-imm8},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_indirect_with_offset_4, { 0xa0008400 }
+  },
+/* pxblend.t (${d-An},${d-r}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_indirect_with_offset_4, { 0xa3008400 }
+  },
+/* pxblend.t ${d-imm7-4}(${d-An}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_indirect_with_offset_4, { 0xa4008400 }
+  },
+/* pxblend.t (${d-An}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_indirect_with_offset_4, { 0xa4008400 }
+  },
+/* pxblend.t (${d-An})${d-i4-4}++,${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_indirect_with_offset_4, { 0xa2008400 }
+  },
+/* pxblend.t ${d-i4-4}(${d-An})++,${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_indirect_with_offset_4, { 0xa2108400 }
+  },
+/* pxblend.t ${d-direct-addr},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_4, { 0xa1008400 }
+  },
+/* pxblend.t #${d-imm8},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_indirect_4, { 0xa0008400 }
+  },
+/* pxblend.t (${d-An},${d-r}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_indirect_4, { 0xa3008400 }
+  },
+/* pxblend.t ${d-imm7-4}(${d-An}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_indirect_4, { 0xa4008400 }
+  },
+/* pxblend.t (${d-An}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_indirect_4, { 0xa4008400 }
+  },
+/* pxblend.t (${d-An})${d-i4-4}++,(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_indirect_4, { 0xa2008400 }
+  },
+/* pxblend.t ${d-i4-4}(${d-An})++,(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_indirect_4, { 0xa2108400 }
+  },
+/* pxblend.t ${d-direct-addr},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_with_post_increment_4, { 0xa1008200 }
+  },
+/* pxblend.t #${d-imm8},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_indirect_with_post_increment_4, { 0xa0008200 }
+  },
+/* pxblend.t (${d-An},${d-r}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_indirect_with_post_increment_4, { 0xa3008200 }
+  },
+/* pxblend.t ${d-imm7-4}(${d-An}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_indirect_with_post_increment_4, { 0xa4008200 }
+  },
+/* pxblend.t (${d-An}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_indirect_with_post_increment_4, { 0xa4008200 }
+  },
+/* pxblend.t (${d-An})${d-i4-4}++,(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_indirect_with_post_increment_4, { 0xa2008200 }
+  },
+/* pxblend.t ${d-i4-4}(${d-An})++,(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_indirect_with_post_increment_4, { 0xa2108200 }
+  },
+/* pxblend.t ${d-direct-addr},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_with_pre_increment_4, { 0xa1008210 }
+  },
+/* pxblend.t #${d-imm8},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_indirect_with_pre_increment_4, { 0xa0008210 }
+  },
+/* pxblend.t (${d-An},${d-r}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_indirect_with_pre_increment_4, { 0xa3008210 }
+  },
+/* pxblend.t ${d-imm7-4}(${d-An}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_indirect_with_pre_increment_4, { 0xa4008210 }
+  },
+/* pxblend.t (${d-An}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_indirect_with_pre_increment_4, { 0xa4008210 }
+  },
+/* pxblend.t (${d-An})${d-i4-4}++,${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_indirect_with_pre_increment_4, { 0xa2008210 }
+  },
+/* pxblend.t ${d-i4-4}(${d-An})++,${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_indirect_with_pre_increment_4, { 0xa2108210 }
+  },
+/* pxblend ${d-direct-addr},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_direct, { 0xa1000100 }
+  },
+/* pxblend #${d-imm8},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_direct, { 0xa0000100 }
+  },
+/* pxblend (${d-An},${d-r}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_direct, { 0xa3000100 }
+  },
+/* pxblend ${d-imm7-4}(${d-An}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_direct, { 0xa4000100 }
+  },
+/* pxblend (${d-An}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_direct, { 0xa4000100 }
+  },
+/* pxblend (${d-An})${d-i4-4}++,${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_direct, { 0xa2000100 }
+  },
+/* pxblend ${d-i4-4}(${d-An})++,${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_direct, { 0xa2100100 }
+  },
+/* pxblend ${d-direct-addr},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_immediate, { 0xa1000000 }
+  },
+/* pxblend #${d-imm8},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_immediate, { 0xa0000000 }
+  },
+/* pxblend (${d-An},${d-r}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_immediate, { 0xa3000000 }
+  },
+/* pxblend ${d-imm7-4}(${d-An}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_immediate, { 0xa4000000 }
+  },
+/* pxblend (${d-An}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_immediate, { 0xa4000000 }
+  },
+/* pxblend (${d-An})${d-i4-4}++,#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_immediate, { 0xa2000000 }
+  },
+/* pxblend ${d-i4-4}(${d-An})++,#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_immediate, { 0xa2100000 }
+  },
+/* pxblend ${d-direct-addr},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_with_index_4, { 0xa1000300 }
+  },
+/* pxblend #${d-imm8},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_indirect_with_index_4, { 0xa0000300 }
+  },
+/* pxblend (${d-An},${d-r}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_indirect_with_index_4, { 0xa3000300 }
+  },
+/* pxblend ${d-imm7-4}(${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_indirect_with_index_4, { 0xa4000300 }
+  },
+/* pxblend (${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_indirect_with_index_4, { 0xa4000300 }
+  },
+/* pxblend (${d-An})${d-i4-4}++,(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_indirect_with_index_4, { 0xa2000300 }
+  },
+/* pxblend ${d-i4-4}(${d-An})++,(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_indirect_with_index_4, { 0xa2100300 }
+  },
+/* pxblend ${d-direct-addr},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_with_offset_4, { 0xa1000400 }
+  },
+/* pxblend #${d-imm8},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_indirect_with_offset_4, { 0xa0000400 }
+  },
+/* pxblend (${d-An},${d-r}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_indirect_with_offset_4, { 0xa3000400 }
+  },
+/* pxblend ${d-imm7-4}(${d-An}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_indirect_with_offset_4, { 0xa4000400 }
+  },
+/* pxblend (${d-An}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_indirect_with_offset_4, { 0xa4000400 }
+  },
+/* pxblend (${d-An})${d-i4-4}++,${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_indirect_with_offset_4, { 0xa2000400 }
+  },
+/* pxblend ${d-i4-4}(${d-An})++,${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_indirect_with_offset_4, { 0xa2100400 }
+  },
+/* pxblend ${d-direct-addr},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_4, { 0xa1000400 }
+  },
+/* pxblend #${d-imm8},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_indirect_4, { 0xa0000400 }
+  },
+/* pxblend (${d-An},${d-r}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_indirect_4, { 0xa3000400 }
+  },
+/* pxblend ${d-imm7-4}(${d-An}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_indirect_4, { 0xa4000400 }
+  },
+/* pxblend (${d-An}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_indirect_4, { 0xa4000400 }
+  },
+/* pxblend (${d-An})${d-i4-4}++,(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_indirect_4, { 0xa2000400 }
+  },
+/* pxblend ${d-i4-4}(${d-An})++,(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_indirect_4, { 0xa2100400 }
+  },
+/* pxblend ${d-direct-addr},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_with_post_increment_4, { 0xa1000200 }
+  },
+/* pxblend #${d-imm8},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_indirect_with_post_increment_4, { 0xa0000200 }
+  },
+/* pxblend (${d-An},${d-r}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_indirect_with_post_increment_4, { 0xa3000200 }
+  },
+/* pxblend ${d-imm7-4}(${d-An}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_indirect_with_post_increment_4, { 0xa4000200 }
+  },
+/* pxblend (${d-An}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_indirect_with_post_increment_4, { 0xa4000200 }
+  },
+/* pxblend (${d-An})${d-i4-4}++,(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_indirect_with_post_increment_4, { 0xa2000200 }
+  },
+/* pxblend ${d-i4-4}(${d-An})++,(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_indirect_with_post_increment_4, { 0xa2100200 }
+  },
+/* pxblend ${d-direct-addr},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_with_pre_increment_4, { 0xa1000210 }
+  },
+/* pxblend #${d-imm8},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_indirect_with_pre_increment_4, { 0xa0000210 }
+  },
+/* pxblend (${d-An},${d-r}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_indirect_with_pre_increment_4, { 0xa3000210 }
+  },
+/* pxblend ${d-imm7-4}(${d-An}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_indirect_with_pre_increment_4, { 0xa4000210 }
+  },
+/* pxblend (${d-An}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_indirect_with_pre_increment_4, { 0xa4000210 }
+  },
+/* pxblend (${d-An})${d-i4-4}++,${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_indirect_with_pre_increment_4, { 0xa2000210 }
+  },
+/* pxblend ${d-i4-4}(${d-An})++,${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_indirect_with_pre_increment_4, { 0xa2100210 }
+  },
+/* pxcnv.t ${d-direct-addr},${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_sysret_d_direct_s1_direct, { 0x100d900 }
+  },
+/* pxcnv.t #${d-imm8},${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_move_2_d_immediate_2_s1_direct, { 0xd900 }
+  },
+/* pxcnv.t (${d-An},${d-r}),${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_move_2_d_indirect_with_index_2_s1_direct, { 0x300d900 }
+  },
+/* pxcnv.t ${d-imm7-2}(${d-An}),${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_move_2_d_indirect_with_offset_2_s1_direct, { 0x400d900 }
+  },
+/* pxcnv.t (${d-An}),${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_move_2_d_indirect_2_s1_direct, { 0x400d900 }
+  },
+/* pxcnv.t (${d-An})${d-i4-2}++,${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_move_2_d_indirect_with_post_increment_2_s1_direct, { 0x200d900 }
+  },
+/* pxcnv.t ${d-i4-2}(${d-An})++,${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_move_2_d_indirect_with_pre_increment_2_s1_direct, { 0x210d900 }
+  },
+/* pxcnv.t ${d-direct-addr},#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_sysret_d_direct_s1_immediate, { 0x100d800 }
+  },
+/* pxcnv.t #${d-imm8},#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_move_2_d_immediate_2_s1_immediate, { 0xd800 }
+  },
+/* pxcnv.t (${d-An},${d-r}),#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_move_2_d_indirect_with_index_2_s1_immediate, { 0x300d800 }
+  },
+/* pxcnv.t ${d-imm7-2}(${d-An}),#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_move_2_d_indirect_with_offset_2_s1_immediate, { 0x400d800 }
+  },
+/* pxcnv.t (${d-An}),#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_move_2_d_indirect_2_s1_immediate, { 0x400d800 }
+  },
+/* pxcnv.t (${d-An})${d-i4-2}++,#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_move_2_d_indirect_with_post_increment_2_s1_immediate, { 0x200d800 }
+  },
+/* pxcnv.t ${d-i4-2}(${d-An})++,#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_move_2_d_indirect_with_pre_increment_2_s1_immediate, { 0x210d800 }
+  },
+/* pxcnv.t ${d-direct-addr},(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_sysret_d_direct_s1_indirect_with_index_4, { 0x100db00 }
+  },
+/* pxcnv.t #${d-imm8},(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_pxcnv_t_d_immediate_2_s1_indirect_with_index_4, { 0xdb00 }
+  },
+/* pxcnv.t (${d-An},${d-r}),(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_pxcnv_t_d_indirect_with_index_2_s1_indirect_with_index_4, { 0x300db00 }
+  },
+/* pxcnv.t ${d-imm7-2}(${d-An}),(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_pxcnv_t_d_indirect_with_offset_2_s1_indirect_with_index_4, { 0x400db00 }
+  },
+/* pxcnv.t (${d-An}),(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_pxcnv_t_d_indirect_2_s1_indirect_with_index_4, { 0x400db00 }
+  },
+/* pxcnv.t (${d-An})${d-i4-2}++,(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_pxcnv_t_d_indirect_with_post_increment_2_s1_indirect_with_index_4, { 0x200db00 }
+  },
+/* pxcnv.t ${d-i4-2}(${d-An})++,(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_pxcnv_t_d_indirect_with_pre_increment_2_s1_indirect_with_index_4, { 0x210db00 }
+  },
+/* pxcnv.t ${d-direct-addr},${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_direct_s1_indirect_with_offset_4, { 0x100dc00 }
+  },
+/* pxcnv.t #${d-imm8},${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_pxcnv_t_d_immediate_2_s1_indirect_with_offset_4, { 0xdc00 }
+  },
+/* pxcnv.t (${d-An},${d-r}),${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_pxcnv_t_d_indirect_with_index_2_s1_indirect_with_offset_4, { 0x300dc00 }
+  },
+/* pxcnv.t ${d-imm7-2}(${d-An}),${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_pxcnv_t_d_indirect_with_offset_2_s1_indirect_with_offset_4, { 0x400dc00 }
+  },
+/* pxcnv.t (${d-An}),${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_pxcnv_t_d_indirect_2_s1_indirect_with_offset_4, { 0x400dc00 }
+  },
+/* pxcnv.t (${d-An})${d-i4-2}++,${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_pxcnv_t_d_indirect_with_post_increment_2_s1_indirect_with_offset_4, { 0x200dc00 }
+  },
+/* pxcnv.t ${d-i4-2}(${d-An})++,${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_pxcnv_t_d_indirect_with_pre_increment_2_s1_indirect_with_offset_4, { 0x210dc00 }
+  },
+/* pxcnv.t ${d-direct-addr},(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_direct_s1_indirect_4, { 0x100dc00 }
+  },
+/* pxcnv.t #${d-imm8},(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_pxcnv_t_d_immediate_2_s1_indirect_4, { 0xdc00 }
+  },
+/* pxcnv.t (${d-An},${d-r}),(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_pxcnv_t_d_indirect_with_index_2_s1_indirect_4, { 0x300dc00 }
+  },
+/* pxcnv.t ${d-imm7-2}(${d-An}),(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_pxcnv_t_d_indirect_with_offset_2_s1_indirect_4, { 0x400dc00 }
+  },
+/* pxcnv.t (${d-An}),(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_pxcnv_t_d_indirect_2_s1_indirect_4, { 0x400dc00 }
+  },
+/* pxcnv.t (${d-An})${d-i4-2}++,(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_pxcnv_t_d_indirect_with_post_increment_2_s1_indirect_4, { 0x200dc00 }
+  },
+/* pxcnv.t ${d-i4-2}(${d-An})++,(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_pxcnv_t_d_indirect_with_pre_increment_2_s1_indirect_4, { 0x210dc00 }
+  },
+/* pxcnv.t ${d-direct-addr},(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_sysret_d_direct_s1_indirect_with_post_increment_4, { 0x100da00 }
+  },
+/* pxcnv.t #${d-imm8},(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_pxcnv_t_d_immediate_2_s1_indirect_with_post_increment_4, { 0xda00 }
+  },
+/* pxcnv.t (${d-An},${d-r}),(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_pxcnv_t_d_indirect_with_index_2_s1_indirect_with_post_increment_4, { 0x300da00 }
+  },
+/* pxcnv.t ${d-imm7-2}(${d-An}),(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_pxcnv_t_d_indirect_with_offset_2_s1_indirect_with_post_increment_4, { 0x400da00 }
+  },
+/* pxcnv.t (${d-An}),(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_pxcnv_t_d_indirect_2_s1_indirect_with_post_increment_4, { 0x400da00 }
+  },
+/* pxcnv.t (${d-An})${d-i4-2}++,(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_pxcnv_t_d_indirect_with_post_increment_2_s1_indirect_with_post_increment_4, { 0x200da00 }
+  },
+/* pxcnv.t ${d-i4-2}(${d-An})++,(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_pxcnv_t_d_indirect_with_pre_increment_2_s1_indirect_with_post_increment_4, { 0x210da00 }
+  },
+/* pxcnv.t ${d-direct-addr},${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_sysret_d_direct_s1_indirect_with_pre_increment_4, { 0x100da10 }
+  },
+/* pxcnv.t #${d-imm8},${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_pxcnv_t_d_immediate_2_s1_indirect_with_pre_increment_4, { 0xda10 }
+  },
+/* pxcnv.t (${d-An},${d-r}),${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_pxcnv_t_d_indirect_with_index_2_s1_indirect_with_pre_increment_4, { 0x300da10 }
+  },
+/* pxcnv.t ${d-imm7-2}(${d-An}),${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_pxcnv_t_d_indirect_with_offset_2_s1_indirect_with_pre_increment_4, { 0x400da10 }
+  },
+/* pxcnv.t (${d-An}),${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_pxcnv_t_d_indirect_2_s1_indirect_with_pre_increment_4, { 0x400da10 }
+  },
+/* pxcnv.t (${d-An})${d-i4-2}++,${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_pxcnv_t_d_indirect_with_post_increment_2_s1_indirect_with_pre_increment_4, { 0x200da10 }
+  },
+/* pxcnv.t ${d-i4-2}(${d-An})++,${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_pxcnv_t_d_indirect_with_pre_increment_2_s1_indirect_with_pre_increment_4, { 0x210da10 }
+  },
+/* pxcnv ${d-direct-addr},${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_sysret_d_direct_s1_direct, { 0x100d100 }
+  },
+/* pxcnv #${d-imm8},${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_move_2_d_immediate_2_s1_direct, { 0xd100 }
+  },
+/* pxcnv (${d-An},${d-r}),${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_move_2_d_indirect_with_index_2_s1_direct, { 0x300d100 }
+  },
+/* pxcnv ${d-imm7-2}(${d-An}),${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_move_2_d_indirect_with_offset_2_s1_direct, { 0x400d100 }
+  },
+/* pxcnv (${d-An}),${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_move_2_d_indirect_2_s1_direct, { 0x400d100 }
+  },
+/* pxcnv (${d-An})${d-i4-2}++,${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_move_2_d_indirect_with_post_increment_2_s1_direct, { 0x200d100 }
+  },
+/* pxcnv ${d-i4-2}(${d-An})++,${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_move_2_d_indirect_with_pre_increment_2_s1_direct, { 0x210d100 }
+  },
+/* pxcnv ${d-direct-addr},#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_sysret_d_direct_s1_immediate, { 0x100d000 }
+  },
+/* pxcnv #${d-imm8},#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_move_2_d_immediate_2_s1_immediate, { 0xd000 }
+  },
+/* pxcnv (${d-An},${d-r}),#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_move_2_d_indirect_with_index_2_s1_immediate, { 0x300d000 }
+  },
+/* pxcnv ${d-imm7-2}(${d-An}),#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_move_2_d_indirect_with_offset_2_s1_immediate, { 0x400d000 }
+  },
+/* pxcnv (${d-An}),#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_move_2_d_indirect_2_s1_immediate, { 0x400d000 }
+  },
+/* pxcnv (${d-An})${d-i4-2}++,#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_move_2_d_indirect_with_post_increment_2_s1_immediate, { 0x200d000 }
+  },
+/* pxcnv ${d-i4-2}(${d-An})++,#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_move_2_d_indirect_with_pre_increment_2_s1_immediate, { 0x210d000 }
+  },
+/* pxcnv ${d-direct-addr},(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_sysret_d_direct_s1_indirect_with_index_4, { 0x100d300 }
+  },
+/* pxcnv #${d-imm8},(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_pxcnv_t_d_immediate_2_s1_indirect_with_index_4, { 0xd300 }
+  },
+/* pxcnv (${d-An},${d-r}),(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_pxcnv_t_d_indirect_with_index_2_s1_indirect_with_index_4, { 0x300d300 }
+  },
+/* pxcnv ${d-imm7-2}(${d-An}),(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_pxcnv_t_d_indirect_with_offset_2_s1_indirect_with_index_4, { 0x400d300 }
+  },
+/* pxcnv (${d-An}),(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_pxcnv_t_d_indirect_2_s1_indirect_with_index_4, { 0x400d300 }
+  },
+/* pxcnv (${d-An})${d-i4-2}++,(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_pxcnv_t_d_indirect_with_post_increment_2_s1_indirect_with_index_4, { 0x200d300 }
+  },
+/* pxcnv ${d-i4-2}(${d-An})++,(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_pxcnv_t_d_indirect_with_pre_increment_2_s1_indirect_with_index_4, { 0x210d300 }
+  },
+/* pxcnv ${d-direct-addr},${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_direct_s1_indirect_with_offset_4, { 0x100d400 }
+  },
+/* pxcnv #${d-imm8},${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_pxcnv_t_d_immediate_2_s1_indirect_with_offset_4, { 0xd400 }
+  },
+/* pxcnv (${d-An},${d-r}),${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_pxcnv_t_d_indirect_with_index_2_s1_indirect_with_offset_4, { 0x300d400 }
+  },
+/* pxcnv ${d-imm7-2}(${d-An}),${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_pxcnv_t_d_indirect_with_offset_2_s1_indirect_with_offset_4, { 0x400d400 }
+  },
+/* pxcnv (${d-An}),${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_pxcnv_t_d_indirect_2_s1_indirect_with_offset_4, { 0x400d400 }
+  },
+/* pxcnv (${d-An})${d-i4-2}++,${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_pxcnv_t_d_indirect_with_post_increment_2_s1_indirect_with_offset_4, { 0x200d400 }
+  },
+/* pxcnv ${d-i4-2}(${d-An})++,${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_pxcnv_t_d_indirect_with_pre_increment_2_s1_indirect_with_offset_4, { 0x210d400 }
+  },
+/* pxcnv ${d-direct-addr},(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_direct_s1_indirect_4, { 0x100d400 }
+  },
+/* pxcnv #${d-imm8},(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_pxcnv_t_d_immediate_2_s1_indirect_4, { 0xd400 }
+  },
+/* pxcnv (${d-An},${d-r}),(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_pxcnv_t_d_indirect_with_index_2_s1_indirect_4, { 0x300d400 }
+  },
+/* pxcnv ${d-imm7-2}(${d-An}),(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_pxcnv_t_d_indirect_with_offset_2_s1_indirect_4, { 0x400d400 }
+  },
+/* pxcnv (${d-An}),(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_pxcnv_t_d_indirect_2_s1_indirect_4, { 0x400d400 }
+  },
+/* pxcnv (${d-An})${d-i4-2}++,(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_pxcnv_t_d_indirect_with_post_increment_2_s1_indirect_4, { 0x200d400 }
+  },
+/* pxcnv ${d-i4-2}(${d-An})++,(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_pxcnv_t_d_indirect_with_pre_increment_2_s1_indirect_4, { 0x210d400 }
+  },
+/* pxcnv ${d-direct-addr},(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_sysret_d_direct_s1_indirect_with_post_increment_4, { 0x100d200 }
+  },
+/* pxcnv #${d-imm8},(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_pxcnv_t_d_immediate_2_s1_indirect_with_post_increment_4, { 0xd200 }
+  },
+/* pxcnv (${d-An},${d-r}),(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_pxcnv_t_d_indirect_with_index_2_s1_indirect_with_post_increment_4, { 0x300d200 }
+  },
+/* pxcnv ${d-imm7-2}(${d-An}),(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_pxcnv_t_d_indirect_with_offset_2_s1_indirect_with_post_increment_4, { 0x400d200 }
+  },
+/* pxcnv (${d-An}),(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_pxcnv_t_d_indirect_2_s1_indirect_with_post_increment_4, { 0x400d200 }
+  },
+/* pxcnv (${d-An})${d-i4-2}++,(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_pxcnv_t_d_indirect_with_post_increment_2_s1_indirect_with_post_increment_4, { 0x200d200 }
+  },
+/* pxcnv ${d-i4-2}(${d-An})++,(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_pxcnv_t_d_indirect_with_pre_increment_2_s1_indirect_with_post_increment_4, { 0x210d200 }
+  },
+/* pxcnv ${d-direct-addr},${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_sysret_d_direct_s1_indirect_with_pre_increment_4, { 0x100d210 }
+  },
+/* pxcnv #${d-imm8},${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_pxcnv_t_d_immediate_2_s1_indirect_with_pre_increment_4, { 0xd210 }
+  },
+/* pxcnv (${d-An},${d-r}),${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_pxcnv_t_d_indirect_with_index_2_s1_indirect_with_pre_increment_4, { 0x300d210 }
+  },
+/* pxcnv ${d-imm7-2}(${d-An}),${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_pxcnv_t_d_indirect_with_offset_2_s1_indirect_with_pre_increment_4, { 0x400d210 }
+  },
+/* pxcnv (${d-An}),${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_pxcnv_t_d_indirect_2_s1_indirect_with_pre_increment_4, { 0x400d210 }
+  },
+/* pxcnv (${d-An})${d-i4-2}++,${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_pxcnv_t_d_indirect_with_post_increment_2_s1_indirect_with_pre_increment_4, { 0x200d210 }
+  },
+/* pxcnv ${d-i4-2}(${d-An})++,${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_pxcnv_t_d_indirect_with_pre_increment_2_s1_indirect_with_pre_increment_4, { 0x210d210 }
+  },
+/* subc ${d-direct-addr},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_direct, { 0x99000100 }
+  },
+/* subc #${d-imm8},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_direct, { 0x98000100 }
+  },
+/* subc (${d-An},${d-r}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_direct, { 0x9b000100 }
+  },
+/* subc ${d-imm7-4}(${d-An}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_direct, { 0x9c000100 }
+  },
+/* subc (${d-An}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_direct, { 0x9c000100 }
+  },
+/* subc (${d-An})${d-i4-4}++,${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_direct, { 0x9a000100 }
+  },
+/* subc ${d-i4-4}(${d-An})++,${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_direct, { 0x9a100100 }
+  },
+/* subc ${d-direct-addr},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_immediate, { 0x99000000 }
+  },
+/* subc #${d-imm8},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_immediate, { 0x98000000 }
+  },
+/* subc (${d-An},${d-r}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_immediate, { 0x9b000000 }
+  },
+/* subc ${d-imm7-4}(${d-An}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_immediate, { 0x9c000000 }
+  },
+/* subc (${d-An}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_immediate, { 0x9c000000 }
+  },
+/* subc (${d-An})${d-i4-4}++,#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_immediate, { 0x9a000000 }
+  },
+/* subc ${d-i4-4}(${d-An})++,#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_immediate, { 0x9a100000 }
+  },
+/* subc ${d-direct-addr},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_with_index_4, { 0x99000300 }
+  },
+/* subc #${d-imm8},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_indirect_with_index_4, { 0x98000300 }
+  },
+/* subc (${d-An},${d-r}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_indirect_with_index_4, { 0x9b000300 }
+  },
+/* subc ${d-imm7-4}(${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_indirect_with_index_4, { 0x9c000300 }
+  },
+/* subc (${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_indirect_with_index_4, { 0x9c000300 }
+  },
+/* subc (${d-An})${d-i4-4}++,(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_indirect_with_index_4, { 0x9a000300 }
+  },
+/* subc ${d-i4-4}(${d-An})++,(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_indirect_with_index_4, { 0x9a100300 }
+  },
+/* subc ${d-direct-addr},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_with_offset_4, { 0x99000400 }
+  },
+/* subc #${d-imm8},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_indirect_with_offset_4, { 0x98000400 }
+  },
+/* subc (${d-An},${d-r}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_indirect_with_offset_4, { 0x9b000400 }
+  },
+/* subc ${d-imm7-4}(${d-An}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_indirect_with_offset_4, { 0x9c000400 }
+  },
+/* subc (${d-An}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_indirect_with_offset_4, { 0x9c000400 }
+  },
+/* subc (${d-An})${d-i4-4}++,${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_indirect_with_offset_4, { 0x9a000400 }
+  },
+/* subc ${d-i4-4}(${d-An})++,${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_indirect_with_offset_4, { 0x9a100400 }
+  },
+/* subc ${d-direct-addr},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_4, { 0x99000400 }
+  },
+/* subc #${d-imm8},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_indirect_4, { 0x98000400 }
+  },
+/* subc (${d-An},${d-r}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_indirect_4, { 0x9b000400 }
+  },
+/* subc ${d-imm7-4}(${d-An}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_indirect_4, { 0x9c000400 }
+  },
+/* subc (${d-An}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_indirect_4, { 0x9c000400 }
+  },
+/* subc (${d-An})${d-i4-4}++,(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_indirect_4, { 0x9a000400 }
+  },
+/* subc ${d-i4-4}(${d-An})++,(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_indirect_4, { 0x9a100400 }
+  },
+/* subc ${d-direct-addr},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_with_post_increment_4, { 0x99000200 }
+  },
+/* subc #${d-imm8},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_indirect_with_post_increment_4, { 0x98000200 }
+  },
+/* subc (${d-An},${d-r}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_indirect_with_post_increment_4, { 0x9b000200 }
+  },
+/* subc ${d-imm7-4}(${d-An}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_indirect_with_post_increment_4, { 0x9c000200 }
+  },
+/* subc (${d-An}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_indirect_with_post_increment_4, { 0x9c000200 }
+  },
+/* subc (${d-An})${d-i4-4}++,(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_indirect_with_post_increment_4, { 0x9a000200 }
+  },
+/* subc ${d-i4-4}(${d-An})++,(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_indirect_with_post_increment_4, { 0x9a100200 }
+  },
+/* subc ${d-direct-addr},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_with_pre_increment_4, { 0x99000210 }
+  },
+/* subc #${d-imm8},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_indirect_with_pre_increment_4, { 0x98000210 }
+  },
+/* subc (${d-An},${d-r}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_indirect_with_pre_increment_4, { 0x9b000210 }
+  },
+/* subc ${d-imm7-4}(${d-An}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_indirect_with_pre_increment_4, { 0x9c000210 }
+  },
+/* subc (${d-An}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_indirect_with_pre_increment_4, { 0x9c000210 }
+  },
+/* subc (${d-An})${d-i4-4}++,${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_indirect_with_pre_increment_4, { 0x9a000210 }
+  },
+/* subc ${d-i4-4}(${d-An})++,${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_indirect_with_pre_increment_4, { 0x9a100210 }
+  },
+/* addc ${d-direct-addr},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_direct, { 0x81000100 }
+  },
+/* addc #${d-imm8},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_direct, { 0x80000100 }
+  },
+/* addc (${d-An},${d-r}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_direct, { 0x83000100 }
+  },
+/* addc ${d-imm7-4}(${d-An}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_direct, { 0x84000100 }
+  },
+/* addc (${d-An}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_direct, { 0x84000100 }
+  },
+/* addc (${d-An})${d-i4-4}++,${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_direct, { 0x82000100 }
+  },
+/* addc ${d-i4-4}(${d-An})++,${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_direct, { 0x82100100 }
+  },
+/* addc ${d-direct-addr},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_immediate, { 0x81000000 }
+  },
+/* addc #${d-imm8},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_immediate, { 0x80000000 }
+  },
+/* addc (${d-An},${d-r}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_immediate, { 0x83000000 }
+  },
+/* addc ${d-imm7-4}(${d-An}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_immediate, { 0x84000000 }
+  },
+/* addc (${d-An}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_immediate, { 0x84000000 }
+  },
+/* addc (${d-An})${d-i4-4}++,#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_immediate, { 0x82000000 }
+  },
+/* addc ${d-i4-4}(${d-An})++,#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_immediate, { 0x82100000 }
+  },
+/* addc ${d-direct-addr},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_with_index_4, { 0x81000300 }
+  },
+/* addc #${d-imm8},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_indirect_with_index_4, { 0x80000300 }
+  },
+/* addc (${d-An},${d-r}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_indirect_with_index_4, { 0x83000300 }
+  },
+/* addc ${d-imm7-4}(${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_indirect_with_index_4, { 0x84000300 }
+  },
+/* addc (${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_indirect_with_index_4, { 0x84000300 }
+  },
+/* addc (${d-An})${d-i4-4}++,(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_indirect_with_index_4, { 0x82000300 }
+  },
+/* addc ${d-i4-4}(${d-An})++,(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_indirect_with_index_4, { 0x82100300 }
+  },
+/* addc ${d-direct-addr},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_with_offset_4, { 0x81000400 }
+  },
+/* addc #${d-imm8},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_indirect_with_offset_4, { 0x80000400 }
+  },
+/* addc (${d-An},${d-r}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_indirect_with_offset_4, { 0x83000400 }
+  },
+/* addc ${d-imm7-4}(${d-An}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_indirect_with_offset_4, { 0x84000400 }
+  },
+/* addc (${d-An}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_indirect_with_offset_4, { 0x84000400 }
+  },
+/* addc (${d-An})${d-i4-4}++,${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_indirect_with_offset_4, { 0x82000400 }
+  },
+/* addc ${d-i4-4}(${d-An})++,${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_indirect_with_offset_4, { 0x82100400 }
+  },
+/* addc ${d-direct-addr},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_4, { 0x81000400 }
+  },
+/* addc #${d-imm8},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_indirect_4, { 0x80000400 }
+  },
+/* addc (${d-An},${d-r}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_indirect_4, { 0x83000400 }
+  },
+/* addc ${d-imm7-4}(${d-An}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_indirect_4, { 0x84000400 }
+  },
+/* addc (${d-An}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_indirect_4, { 0x84000400 }
+  },
+/* addc (${d-An})${d-i4-4}++,(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_indirect_4, { 0x82000400 }
+  },
+/* addc ${d-i4-4}(${d-An})++,(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_indirect_4, { 0x82100400 }
+  },
+/* addc ${d-direct-addr},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_with_post_increment_4, { 0x81000200 }
+  },
+/* addc #${d-imm8},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_indirect_with_post_increment_4, { 0x80000200 }
+  },
+/* addc (${d-An},${d-r}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_indirect_with_post_increment_4, { 0x83000200 }
+  },
+/* addc ${d-imm7-4}(${d-An}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_indirect_with_post_increment_4, { 0x84000200 }
+  },
+/* addc (${d-An}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_indirect_with_post_increment_4, { 0x84000200 }
+  },
+/* addc (${d-An})${d-i4-4}++,(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_indirect_with_post_increment_4, { 0x82000200 }
+  },
+/* addc ${d-i4-4}(${d-An})++,(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_indirect_with_post_increment_4, { 0x82100200 }
+  },
+/* addc ${d-direct-addr},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_with_pre_increment_4, { 0x81000210 }
+  },
+/* addc #${d-imm8},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_indirect_with_pre_increment_4, { 0x80000210 }
+  },
+/* addc (${d-An},${d-r}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_indirect_with_pre_increment_4, { 0x83000210 }
+  },
+/* addc ${d-imm7-4}(${d-An}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_indirect_with_pre_increment_4, { 0x84000210 }
+  },
+/* addc (${d-An}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_indirect_with_pre_increment_4, { 0x84000210 }
+  },
+/* addc (${d-An})${d-i4-4}++,${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_indirect_with_pre_increment_4, { 0x82000210 }
+  },
+/* addc ${d-i4-4}(${d-An})++,${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_indirect_with_pre_increment_4, { 0x82100210 }
+  },
+/* sub.1 ${d-direct-addr},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_direct, { 0x89008100 }
+  },
+/* sub.1 #${d-imm8},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_immediate_1_s1_direct, { 0x88008100 }
+  },
+/* sub.1 (${d-An},${d-r}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_index_1_s1_direct, { 0x8b008100 }
+  },
+/* sub.1 ${d-imm7-1}(${d-An}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_1), '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_offset_1_s1_direct, { 0x8c008100 }
+  },
+/* sub.1 (${d-An}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_1_s1_direct, { 0x8c008100 }
+  },
+/* sub.1 (${d-An})${d-i4-1}++,${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_1), '+', '+', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_post_increment_1_s1_direct, { 0x8a008100 }
+  },
+/* sub.1 ${d-i4-1}(${d-An})++,${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_1), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_pre_increment_1_s1_direct, { 0x8a108100 }
+  },
+/* sub.1 ${d-direct-addr},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_immediate, { 0x89008000 }
+  },
+/* sub.1 #${d-imm8},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_immediate_1_s1_immediate, { 0x88008000 }
+  },
+/* sub.1 (${d-An},${d-r}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_index_1_s1_immediate, { 0x8b008000 }
+  },
+/* sub.1 ${d-imm7-1}(${d-An}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_1), '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_offset_1_s1_immediate, { 0x8c008000 }
+  },
+/* sub.1 (${d-An}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_1_s1_immediate, { 0x8c008000 }
+  },
+/* sub.1 (${d-An})${d-i4-1}++,#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_1), '+', '+', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_post_increment_1_s1_immediate, { 0x8a008000 }
+  },
+/* sub.1 ${d-i4-1}(${d-An})++,#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_1), '(', OP (D_AN), ')', '+', '+', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_pre_increment_1_s1_immediate, { 0x8a108000 }
+  },
+/* sub.1 ${d-direct-addr},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_direct_s1_indirect_with_index_1, { 0x89008300 }
+  },
+/* sub.1 #${d-imm8},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_immediate_1_s1_indirect_with_index_1, { 0x88008300 }
+  },
+/* sub.1 (${d-An},${d-r}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_index_1_s1_indirect_with_index_1, { 0x8b008300 }
+  },
+/* sub.1 ${d-imm7-1}(${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_1), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_offset_1_s1_indirect_with_index_1, { 0x8c008300 }
+  },
+/* sub.1 (${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_1_s1_indirect_with_index_1, { 0x8c008300 }
+  },
+/* sub.1 (${d-An})${d-i4-1}++,(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_1), '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_post_increment_1_s1_indirect_with_index_1, { 0x8a008300 }
+  },
+/* sub.1 ${d-i4-1}(${d-An})++,(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_1), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_pre_increment_1_s1_indirect_with_index_1, { 0x8a108300 }
+  },
+/* sub.1 ${d-direct-addr},${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_direct_s1_indirect_with_offset_1, { 0x89008400 }
+  },
+/* sub.1 #${d-imm8},${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_immediate_1_s1_indirect_with_offset_1, { 0x88008400 }
+  },
+/* sub.1 (${d-An},${d-r}),${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_index_1_s1_indirect_with_offset_1, { 0x8b008400 }
+  },
+/* sub.1 ${d-imm7-1}(${d-An}),${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_1), '(', OP (D_AN), ')', ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_offset_1_s1_indirect_with_offset_1, { 0x8c008400 }
+  },
+/* sub.1 (${d-An}),${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_1_s1_indirect_with_offset_1, { 0x8c008400 }
+  },
+/* sub.1 (${d-An})${d-i4-1}++,${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_1), '+', '+', ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_post_increment_1_s1_indirect_with_offset_1, { 0x8a008400 }
+  },
+/* sub.1 ${d-i4-1}(${d-An})++,${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_1), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_pre_increment_1_s1_indirect_with_offset_1, { 0x8a108400 }
+  },
+/* sub.1 ${d-direct-addr},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_direct_s1_indirect_1, { 0x89008400 }
+  },
+/* sub.1 #${d-imm8},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_immediate_1_s1_indirect_1, { 0x88008400 }
+  },
+/* sub.1 (${d-An},${d-r}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_index_1_s1_indirect_1, { 0x8b008400 }
+  },
+/* sub.1 ${d-imm7-1}(${d-An}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_1), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_offset_1_s1_indirect_1, { 0x8c008400 }
+  },
+/* sub.1 (${d-An}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_1_s1_indirect_1, { 0x8c008400 }
+  },
+/* sub.1 (${d-An})${d-i4-1}++,(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_1), '+', '+', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_post_increment_1_s1_indirect_1, { 0x8a008400 }
+  },
+/* sub.1 ${d-i4-1}(${d-An})++,(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_1), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_pre_increment_1_s1_indirect_1, { 0x8a108400 }
+  },
+/* sub.1 ${d-direct-addr},(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_direct_s1_indirect_with_post_increment_1, { 0x89008200 }
+  },
+/* sub.1 #${d-imm8},(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_immediate_1_s1_indirect_with_post_increment_1, { 0x88008200 }
+  },
+/* sub.1 (${d-An},${d-r}),(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_index_1_s1_indirect_with_post_increment_1, { 0x8b008200 }
+  },
+/* sub.1 ${d-imm7-1}(${d-An}),(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_1), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_offset_1_s1_indirect_with_post_increment_1, { 0x8c008200 }
+  },
+/* sub.1 (${d-An}),(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_1_s1_indirect_with_post_increment_1, { 0x8c008200 }
+  },
+/* sub.1 (${d-An})${d-i4-1}++,(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_1), '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_post_increment_1_s1_indirect_with_post_increment_1, { 0x8a008200 }
+  },
+/* sub.1 ${d-i4-1}(${d-An})++,(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_1), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_pre_increment_1_s1_indirect_with_post_increment_1, { 0x8a108200 }
+  },
+/* sub.1 ${d-direct-addr},${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_direct_s1_indirect_with_pre_increment_1, { 0x89008210 }
+  },
+/* sub.1 #${d-imm8},${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_immediate_1_s1_indirect_with_pre_increment_1, { 0x88008210 }
+  },
+/* sub.1 (${d-An},${d-r}),${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_index_1_s1_indirect_with_pre_increment_1, { 0x8b008210 }
+  },
+/* sub.1 ${d-imm7-1}(${d-An}),${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_1), '(', OP (D_AN), ')', ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_offset_1_s1_indirect_with_pre_increment_1, { 0x8c008210 }
+  },
+/* sub.1 (${d-An}),${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_1_s1_indirect_with_pre_increment_1, { 0x8c008210 }
+  },
+/* sub.1 (${d-An})${d-i4-1}++,${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_1), '+', '+', ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_post_increment_1_s1_indirect_with_pre_increment_1, { 0x8a008210 }
+  },
+/* sub.1 ${d-i4-1}(${d-An})++,${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_1), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_pre_increment_1_s1_indirect_with_pre_increment_1, { 0x8a108210 }
+  },
+/* sub.4 ${d-direct-addr},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_direct, { 0x91000100 }
+  },
+/* sub.4 #${d-imm8},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_direct, { 0x90000100 }
+  },
+/* sub.4 (${d-An},${d-r}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_direct, { 0x93000100 }
+  },
+/* sub.4 ${d-imm7-4}(${d-An}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_direct, { 0x94000100 }
+  },
+/* sub.4 (${d-An}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_direct, { 0x94000100 }
+  },
+/* sub.4 (${d-An})${d-i4-4}++,${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_direct, { 0x92000100 }
+  },
+/* sub.4 ${d-i4-4}(${d-An})++,${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_direct, { 0x92100100 }
+  },
+/* sub.4 ${d-direct-addr},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_immediate, { 0x91000000 }
+  },
+/* sub.4 #${d-imm8},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_immediate, { 0x90000000 }
+  },
+/* sub.4 (${d-An},${d-r}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_immediate, { 0x93000000 }
+  },
+/* sub.4 ${d-imm7-4}(${d-An}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_immediate, { 0x94000000 }
+  },
+/* sub.4 (${d-An}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_immediate, { 0x94000000 }
+  },
+/* sub.4 (${d-An})${d-i4-4}++,#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_immediate, { 0x92000000 }
+  },
+/* sub.4 ${d-i4-4}(${d-An})++,#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_immediate, { 0x92100000 }
+  },
+/* sub.4 ${d-direct-addr},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_with_index_4, { 0x91000300 }
+  },
+/* sub.4 #${d-imm8},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_indirect_with_index_4, { 0x90000300 }
+  },
+/* sub.4 (${d-An},${d-r}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_indirect_with_index_4, { 0x93000300 }
+  },
+/* sub.4 ${d-imm7-4}(${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_indirect_with_index_4, { 0x94000300 }
+  },
+/* sub.4 (${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_indirect_with_index_4, { 0x94000300 }
+  },
+/* sub.4 (${d-An})${d-i4-4}++,(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_indirect_with_index_4, { 0x92000300 }
+  },
+/* sub.4 ${d-i4-4}(${d-An})++,(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_indirect_with_index_4, { 0x92100300 }
+  },
+/* sub.4 ${d-direct-addr},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_with_offset_4, { 0x91000400 }
+  },
+/* sub.4 #${d-imm8},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_indirect_with_offset_4, { 0x90000400 }
+  },
+/* sub.4 (${d-An},${d-r}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_indirect_with_offset_4, { 0x93000400 }
+  },
+/* sub.4 ${d-imm7-4}(${d-An}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_indirect_with_offset_4, { 0x94000400 }
+  },
+/* sub.4 (${d-An}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_indirect_with_offset_4, { 0x94000400 }
+  },
+/* sub.4 (${d-An})${d-i4-4}++,${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_indirect_with_offset_4, { 0x92000400 }
+  },
+/* sub.4 ${d-i4-4}(${d-An})++,${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_indirect_with_offset_4, { 0x92100400 }
+  },
+/* sub.4 ${d-direct-addr},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_4, { 0x91000400 }
+  },
+/* sub.4 #${d-imm8},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_indirect_4, { 0x90000400 }
+  },
+/* sub.4 (${d-An},${d-r}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_indirect_4, { 0x93000400 }
+  },
+/* sub.4 ${d-imm7-4}(${d-An}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_indirect_4, { 0x94000400 }
+  },
+/* sub.4 (${d-An}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_indirect_4, { 0x94000400 }
+  },
+/* sub.4 (${d-An})${d-i4-4}++,(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_indirect_4, { 0x92000400 }
+  },
+/* sub.4 ${d-i4-4}(${d-An})++,(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_indirect_4, { 0x92100400 }
+  },
+/* sub.4 ${d-direct-addr},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_with_post_increment_4, { 0x91000200 }
+  },
+/* sub.4 #${d-imm8},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_indirect_with_post_increment_4, { 0x90000200 }
+  },
+/* sub.4 (${d-An},${d-r}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_indirect_with_post_increment_4, { 0x93000200 }
+  },
+/* sub.4 ${d-imm7-4}(${d-An}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_indirect_with_post_increment_4, { 0x94000200 }
+  },
+/* sub.4 (${d-An}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_indirect_with_post_increment_4, { 0x94000200 }
+  },
+/* sub.4 (${d-An})${d-i4-4}++,(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_indirect_with_post_increment_4, { 0x92000200 }
+  },
+/* sub.4 ${d-i4-4}(${d-An})++,(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_indirect_with_post_increment_4, { 0x92100200 }
+  },
+/* sub.4 ${d-direct-addr},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_with_pre_increment_4, { 0x91000210 }
+  },
+/* sub.4 #${d-imm8},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_indirect_with_pre_increment_4, { 0x90000210 }
+  },
+/* sub.4 (${d-An},${d-r}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_indirect_with_pre_increment_4, { 0x93000210 }
+  },
+/* sub.4 ${d-imm7-4}(${d-An}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_indirect_with_pre_increment_4, { 0x94000210 }
+  },
+/* sub.4 (${d-An}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_indirect_with_pre_increment_4, { 0x94000210 }
+  },
+/* sub.4 (${d-An})${d-i4-4}++,${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_indirect_with_pre_increment_4, { 0x92000210 }
+  },
+/* sub.4 ${d-i4-4}(${d-An})++,${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_indirect_with_pre_increment_4, { 0x92100210 }
+  },
+/* sub.2 ${d-direct-addr},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_direct, { 0x89000100 }
+  },
+/* sub.2 #${d-imm8},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_immediate_2_s1_direct, { 0x88000100 }
+  },
+/* sub.2 (${d-An},${d-r}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_index_2_s1_direct, { 0x8b000100 }
+  },
+/* sub.2 ${d-imm7-2}(${d-An}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_offset_2_s1_direct, { 0x8c000100 }
+  },
+/* sub.2 (${d-An}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_2_s1_direct, { 0x8c000100 }
+  },
+/* sub.2 (${d-An})${d-i4-2}++,${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_post_increment_2_s1_direct, { 0x8a000100 }
+  },
+/* sub.2 ${d-i4-2}(${d-An})++,${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_pre_increment_2_s1_direct, { 0x8a100100 }
+  },
+/* sub.2 ${d-direct-addr},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_immediate, { 0x89000000 }
+  },
+/* sub.2 #${d-imm8},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_immediate_2_s1_immediate, { 0x88000000 }
+  },
+/* sub.2 (${d-An},${d-r}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_index_2_s1_immediate, { 0x8b000000 }
+  },
+/* sub.2 ${d-imm7-2}(${d-An}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_offset_2_s1_immediate, { 0x8c000000 }
+  },
+/* sub.2 (${d-An}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_2_s1_immediate, { 0x8c000000 }
+  },
+/* sub.2 (${d-An})${d-i4-2}++,#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_post_increment_2_s1_immediate, { 0x8a000000 }
+  },
+/* sub.2 ${d-i4-2}(${d-An})++,#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_pre_increment_2_s1_immediate, { 0x8a100000 }
+  },
+/* sub.2 ${d-direct-addr},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_direct_s1_indirect_with_index_2, { 0x89000300 }
+  },
+/* sub.2 #${d-imm8},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_immediate_2_s1_indirect_with_index_2, { 0x88000300 }
+  },
+/* sub.2 (${d-An},${d-r}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_index_2_s1_indirect_with_index_2, { 0x8b000300 }
+  },
+/* sub.2 ${d-imm7-2}(${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_offset_2_s1_indirect_with_index_2, { 0x8c000300 }
+  },
+/* sub.2 (${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_2_s1_indirect_with_index_2, { 0x8c000300 }
+  },
+/* sub.2 (${d-An})${d-i4-2}++,(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_post_increment_2_s1_indirect_with_index_2, { 0x8a000300 }
+  },
+/* sub.2 ${d-i4-2}(${d-An})++,(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_pre_increment_2_s1_indirect_with_index_2, { 0x8a100300 }
+  },
+/* sub.2 ${d-direct-addr},${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_direct_s1_indirect_with_offset_2, { 0x89000400 }
+  },
+/* sub.2 #${d-imm8},${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_immediate_2_s1_indirect_with_offset_2, { 0x88000400 }
+  },
+/* sub.2 (${d-An},${d-r}),${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_index_2_s1_indirect_with_offset_2, { 0x8b000400 }
+  },
+/* sub.2 ${d-imm7-2}(${d-An}),${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_offset_2_s1_indirect_with_offset_2, { 0x8c000400 }
+  },
+/* sub.2 (${d-An}),${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_2_s1_indirect_with_offset_2, { 0x8c000400 }
+  },
+/* sub.2 (${d-An})${d-i4-2}++,${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_post_increment_2_s1_indirect_with_offset_2, { 0x8a000400 }
+  },
+/* sub.2 ${d-i4-2}(${d-An})++,${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_pre_increment_2_s1_indirect_with_offset_2, { 0x8a100400 }
+  },
+/* sub.2 ${d-direct-addr},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_direct_s1_indirect_2, { 0x89000400 }
+  },
+/* sub.2 #${d-imm8},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_immediate_2_s1_indirect_2, { 0x88000400 }
+  },
+/* sub.2 (${d-An},${d-r}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_index_2_s1_indirect_2, { 0x8b000400 }
+  },
+/* sub.2 ${d-imm7-2}(${d-An}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_offset_2_s1_indirect_2, { 0x8c000400 }
+  },
+/* sub.2 (${d-An}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_2_s1_indirect_2, { 0x8c000400 }
+  },
+/* sub.2 (${d-An})${d-i4-2}++,(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_post_increment_2_s1_indirect_2, { 0x8a000400 }
+  },
+/* sub.2 ${d-i4-2}(${d-An})++,(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_pre_increment_2_s1_indirect_2, { 0x8a100400 }
+  },
+/* sub.2 ${d-direct-addr},(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_direct_s1_indirect_with_post_increment_2, { 0x89000200 }
+  },
+/* sub.2 #${d-imm8},(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_immediate_2_s1_indirect_with_post_increment_2, { 0x88000200 }
+  },
+/* sub.2 (${d-An},${d-r}),(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_index_2_s1_indirect_with_post_increment_2, { 0x8b000200 }
+  },
+/* sub.2 ${d-imm7-2}(${d-An}),(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_offset_2_s1_indirect_with_post_increment_2, { 0x8c000200 }
+  },
+/* sub.2 (${d-An}),(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_2_s1_indirect_with_post_increment_2, { 0x8c000200 }
+  },
+/* sub.2 (${d-An})${d-i4-2}++,(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_post_increment_2_s1_indirect_with_post_increment_2, { 0x8a000200 }
+  },
+/* sub.2 ${d-i4-2}(${d-An})++,(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_pre_increment_2_s1_indirect_with_post_increment_2, { 0x8a100200 }
+  },
+/* sub.2 ${d-direct-addr},${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_direct_s1_indirect_with_pre_increment_2, { 0x89000210 }
+  },
+/* sub.2 #${d-imm8},${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_immediate_2_s1_indirect_with_pre_increment_2, { 0x88000210 }
+  },
+/* sub.2 (${d-An},${d-r}),${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_index_2_s1_indirect_with_pre_increment_2, { 0x8b000210 }
+  },
+/* sub.2 ${d-imm7-2}(${d-An}),${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_offset_2_s1_indirect_with_pre_increment_2, { 0x8c000210 }
+  },
+/* sub.2 (${d-An}),${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_2_s1_indirect_with_pre_increment_2, { 0x8c000210 }
+  },
+/* sub.2 (${d-An})${d-i4-2}++,${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_post_increment_2_s1_indirect_with_pre_increment_2, { 0x8a000210 }
+  },
+/* sub.2 ${d-i4-2}(${d-An})++,${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_pre_increment_2_s1_indirect_with_pre_increment_2, { 0x8a100210 }
+  },
+/* add.1 ${d-direct-addr},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_direct, { 0x71008100 }
+  },
+/* add.1 #${d-imm8},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_immediate_1_s1_direct, { 0x70008100 }
+  },
+/* add.1 (${d-An},${d-r}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_index_1_s1_direct, { 0x73008100 }
+  },
+/* add.1 ${d-imm7-1}(${d-An}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_1), '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_offset_1_s1_direct, { 0x74008100 }
+  },
+/* add.1 (${d-An}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_1_s1_direct, { 0x74008100 }
+  },
+/* add.1 (${d-An})${d-i4-1}++,${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_1), '+', '+', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_post_increment_1_s1_direct, { 0x72008100 }
+  },
+/* add.1 ${d-i4-1}(${d-An})++,${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_1), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_pre_increment_1_s1_direct, { 0x72108100 }
+  },
+/* add.1 ${d-direct-addr},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_immediate, { 0x71008000 }
+  },
+/* add.1 #${d-imm8},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_immediate_1_s1_immediate, { 0x70008000 }
+  },
+/* add.1 (${d-An},${d-r}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_index_1_s1_immediate, { 0x73008000 }
+  },
+/* add.1 ${d-imm7-1}(${d-An}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_1), '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_offset_1_s1_immediate, { 0x74008000 }
+  },
+/* add.1 (${d-An}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_1_s1_immediate, { 0x74008000 }
+  },
+/* add.1 (${d-An})${d-i4-1}++,#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_1), '+', '+', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_post_increment_1_s1_immediate, { 0x72008000 }
+  },
+/* add.1 ${d-i4-1}(${d-An})++,#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_1), '(', OP (D_AN), ')', '+', '+', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_pre_increment_1_s1_immediate, { 0x72108000 }
+  },
+/* add.1 ${d-direct-addr},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_direct_s1_indirect_with_index_1, { 0x71008300 }
+  },
+/* add.1 #${d-imm8},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_immediate_1_s1_indirect_with_index_1, { 0x70008300 }
+  },
+/* add.1 (${d-An},${d-r}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_index_1_s1_indirect_with_index_1, { 0x73008300 }
+  },
+/* add.1 ${d-imm7-1}(${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_1), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_offset_1_s1_indirect_with_index_1, { 0x74008300 }
+  },
+/* add.1 (${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_1_s1_indirect_with_index_1, { 0x74008300 }
+  },
+/* add.1 (${d-An})${d-i4-1}++,(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_1), '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_post_increment_1_s1_indirect_with_index_1, { 0x72008300 }
+  },
+/* add.1 ${d-i4-1}(${d-An})++,(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_1), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_pre_increment_1_s1_indirect_with_index_1, { 0x72108300 }
+  },
+/* add.1 ${d-direct-addr},${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_direct_s1_indirect_with_offset_1, { 0x71008400 }
+  },
+/* add.1 #${d-imm8},${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_immediate_1_s1_indirect_with_offset_1, { 0x70008400 }
+  },
+/* add.1 (${d-An},${d-r}),${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_index_1_s1_indirect_with_offset_1, { 0x73008400 }
+  },
+/* add.1 ${d-imm7-1}(${d-An}),${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_1), '(', OP (D_AN), ')', ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_offset_1_s1_indirect_with_offset_1, { 0x74008400 }
+  },
+/* add.1 (${d-An}),${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_1_s1_indirect_with_offset_1, { 0x74008400 }
+  },
+/* add.1 (${d-An})${d-i4-1}++,${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_1), '+', '+', ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_post_increment_1_s1_indirect_with_offset_1, { 0x72008400 }
+  },
+/* add.1 ${d-i4-1}(${d-An})++,${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_1), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_pre_increment_1_s1_indirect_with_offset_1, { 0x72108400 }
+  },
+/* add.1 ${d-direct-addr},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_direct_s1_indirect_1, { 0x71008400 }
+  },
+/* add.1 #${d-imm8},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_immediate_1_s1_indirect_1, { 0x70008400 }
+  },
+/* add.1 (${d-An},${d-r}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_index_1_s1_indirect_1, { 0x73008400 }
+  },
+/* add.1 ${d-imm7-1}(${d-An}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_1), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_offset_1_s1_indirect_1, { 0x74008400 }
+  },
+/* add.1 (${d-An}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_1_s1_indirect_1, { 0x74008400 }
+  },
+/* add.1 (${d-An})${d-i4-1}++,(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_1), '+', '+', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_post_increment_1_s1_indirect_1, { 0x72008400 }
+  },
+/* add.1 ${d-i4-1}(${d-An})++,(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_1), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_pre_increment_1_s1_indirect_1, { 0x72108400 }
+  },
+/* add.1 ${d-direct-addr},(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_direct_s1_indirect_with_post_increment_1, { 0x71008200 }
+  },
+/* add.1 #${d-imm8},(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_immediate_1_s1_indirect_with_post_increment_1, { 0x70008200 }
+  },
+/* add.1 (${d-An},${d-r}),(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_index_1_s1_indirect_with_post_increment_1, { 0x73008200 }
+  },
+/* add.1 ${d-imm7-1}(${d-An}),(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_1), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_offset_1_s1_indirect_with_post_increment_1, { 0x74008200 }
+  },
+/* add.1 (${d-An}),(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_1_s1_indirect_with_post_increment_1, { 0x74008200 }
+  },
+/* add.1 (${d-An})${d-i4-1}++,(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_1), '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_post_increment_1_s1_indirect_with_post_increment_1, { 0x72008200 }
+  },
+/* add.1 ${d-i4-1}(${d-An})++,(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_1), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_pre_increment_1_s1_indirect_with_post_increment_1, { 0x72108200 }
+  },
+/* add.1 ${d-direct-addr},${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_direct_s1_indirect_with_pre_increment_1, { 0x71008210 }
+  },
+/* add.1 #${d-imm8},${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_immediate_1_s1_indirect_with_pre_increment_1, { 0x70008210 }
+  },
+/* add.1 (${d-An},${d-r}),${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_index_1_s1_indirect_with_pre_increment_1, { 0x73008210 }
+  },
+/* add.1 ${d-imm7-1}(${d-An}),${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_1), '(', OP (D_AN), ')', ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_offset_1_s1_indirect_with_pre_increment_1, { 0x74008210 }
+  },
+/* add.1 (${d-An}),${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_1_s1_indirect_with_pre_increment_1, { 0x74008210 }
+  },
+/* add.1 (${d-An})${d-i4-1}++,${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_1), '+', '+', ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_post_increment_1_s1_indirect_with_pre_increment_1, { 0x72008210 }
+  },
+/* add.1 ${d-i4-1}(${d-An})++,${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_1), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_pre_increment_1_s1_indirect_with_pre_increment_1, { 0x72108210 }
+  },
+/* add.4 ${d-direct-addr},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_direct, { 0x79000100 }
+  },
+/* add.4 #${d-imm8},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_direct, { 0x78000100 }
+  },
+/* add.4 (${d-An},${d-r}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_direct, { 0x7b000100 }
+  },
+/* add.4 ${d-imm7-4}(${d-An}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_direct, { 0x7c000100 }
+  },
+/* add.4 (${d-An}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_direct, { 0x7c000100 }
+  },
+/* add.4 (${d-An})${d-i4-4}++,${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_direct, { 0x7a000100 }
+  },
+/* add.4 ${d-i4-4}(${d-An})++,${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_direct, { 0x7a100100 }
+  },
+/* add.4 ${d-direct-addr},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_immediate, { 0x79000000 }
+  },
+/* add.4 #${d-imm8},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_immediate, { 0x78000000 }
+  },
+/* add.4 (${d-An},${d-r}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_immediate, { 0x7b000000 }
+  },
+/* add.4 ${d-imm7-4}(${d-An}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_immediate, { 0x7c000000 }
+  },
+/* add.4 (${d-An}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_immediate, { 0x7c000000 }
+  },
+/* add.4 (${d-An})${d-i4-4}++,#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_immediate, { 0x7a000000 }
+  },
+/* add.4 ${d-i4-4}(${d-An})++,#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_immediate, { 0x7a100000 }
+  },
+/* add.4 ${d-direct-addr},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_with_index_4, { 0x79000300 }
+  },
+/* add.4 #${d-imm8},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_indirect_with_index_4, { 0x78000300 }
+  },
+/* add.4 (${d-An},${d-r}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_indirect_with_index_4, { 0x7b000300 }
+  },
+/* add.4 ${d-imm7-4}(${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_indirect_with_index_4, { 0x7c000300 }
+  },
+/* add.4 (${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_indirect_with_index_4, { 0x7c000300 }
+  },
+/* add.4 (${d-An})${d-i4-4}++,(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_indirect_with_index_4, { 0x7a000300 }
+  },
+/* add.4 ${d-i4-4}(${d-An})++,(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_indirect_with_index_4, { 0x7a100300 }
+  },
+/* add.4 ${d-direct-addr},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_with_offset_4, { 0x79000400 }
+  },
+/* add.4 #${d-imm8},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_indirect_with_offset_4, { 0x78000400 }
+  },
+/* add.4 (${d-An},${d-r}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_indirect_with_offset_4, { 0x7b000400 }
+  },
+/* add.4 ${d-imm7-4}(${d-An}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_indirect_with_offset_4, { 0x7c000400 }
+  },
+/* add.4 (${d-An}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_indirect_with_offset_4, { 0x7c000400 }
+  },
+/* add.4 (${d-An})${d-i4-4}++,${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_indirect_with_offset_4, { 0x7a000400 }
+  },
+/* add.4 ${d-i4-4}(${d-An})++,${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_indirect_with_offset_4, { 0x7a100400 }
+  },
+/* add.4 ${d-direct-addr},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_4, { 0x79000400 }
+  },
+/* add.4 #${d-imm8},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_indirect_4, { 0x78000400 }
+  },
+/* add.4 (${d-An},${d-r}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_indirect_4, { 0x7b000400 }
+  },
+/* add.4 ${d-imm7-4}(${d-An}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_indirect_4, { 0x7c000400 }
+  },
+/* add.4 (${d-An}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_indirect_4, { 0x7c000400 }
+  },
+/* add.4 (${d-An})${d-i4-4}++,(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_indirect_4, { 0x7a000400 }
+  },
+/* add.4 ${d-i4-4}(${d-An})++,(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_indirect_4, { 0x7a100400 }
+  },
+/* add.4 ${d-direct-addr},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_with_post_increment_4, { 0x79000200 }
+  },
+/* add.4 #${d-imm8},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_indirect_with_post_increment_4, { 0x78000200 }
+  },
+/* add.4 (${d-An},${d-r}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_indirect_with_post_increment_4, { 0x7b000200 }
+  },
+/* add.4 ${d-imm7-4}(${d-An}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_indirect_with_post_increment_4, { 0x7c000200 }
+  },
+/* add.4 (${d-An}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_indirect_with_post_increment_4, { 0x7c000200 }
+  },
+/* add.4 (${d-An})${d-i4-4}++,(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_indirect_with_post_increment_4, { 0x7a000200 }
+  },
+/* add.4 ${d-i4-4}(${d-An})++,(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_indirect_with_post_increment_4, { 0x7a100200 }
+  },
+/* add.4 ${d-direct-addr},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_with_pre_increment_4, { 0x79000210 }
+  },
+/* add.4 #${d-imm8},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_indirect_with_pre_increment_4, { 0x78000210 }
+  },
+/* add.4 (${d-An},${d-r}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_indirect_with_pre_increment_4, { 0x7b000210 }
+  },
+/* add.4 ${d-imm7-4}(${d-An}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_indirect_with_pre_increment_4, { 0x7c000210 }
+  },
+/* add.4 (${d-An}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_indirect_with_pre_increment_4, { 0x7c000210 }
+  },
+/* add.4 (${d-An})${d-i4-4}++,${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_indirect_with_pre_increment_4, { 0x7a000210 }
+  },
+/* add.4 ${d-i4-4}(${d-An})++,${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_indirect_with_pre_increment_4, { 0x7a100210 }
+  },
+/* add.2 ${d-direct-addr},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_direct, { 0x71000100 }
+  },
+/* add.2 #${d-imm8},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_immediate_2_s1_direct, { 0x70000100 }
+  },
+/* add.2 (${d-An},${d-r}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_index_2_s1_direct, { 0x73000100 }
+  },
+/* add.2 ${d-imm7-2}(${d-An}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_offset_2_s1_direct, { 0x74000100 }
+  },
+/* add.2 (${d-An}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_2_s1_direct, { 0x74000100 }
+  },
+/* add.2 (${d-An})${d-i4-2}++,${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_post_increment_2_s1_direct, { 0x72000100 }
+  },
+/* add.2 ${d-i4-2}(${d-An})++,${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_pre_increment_2_s1_direct, { 0x72100100 }
+  },
+/* add.2 ${d-direct-addr},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_immediate, { 0x71000000 }
+  },
+/* add.2 #${d-imm8},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_immediate_2_s1_immediate, { 0x70000000 }
+  },
+/* add.2 (${d-An},${d-r}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_index_2_s1_immediate, { 0x73000000 }
+  },
+/* add.2 ${d-imm7-2}(${d-An}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_offset_2_s1_immediate, { 0x74000000 }
+  },
+/* add.2 (${d-An}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_2_s1_immediate, { 0x74000000 }
+  },
+/* add.2 (${d-An})${d-i4-2}++,#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_post_increment_2_s1_immediate, { 0x72000000 }
+  },
+/* add.2 ${d-i4-2}(${d-An})++,#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_pre_increment_2_s1_immediate, { 0x72100000 }
+  },
+/* add.2 ${d-direct-addr},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_direct_s1_indirect_with_index_2, { 0x71000300 }
+  },
+/* add.2 #${d-imm8},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_immediate_2_s1_indirect_with_index_2, { 0x70000300 }
+  },
+/* add.2 (${d-An},${d-r}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_index_2_s1_indirect_with_index_2, { 0x73000300 }
+  },
+/* add.2 ${d-imm7-2}(${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_offset_2_s1_indirect_with_index_2, { 0x74000300 }
+  },
+/* add.2 (${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_2_s1_indirect_with_index_2, { 0x74000300 }
+  },
+/* add.2 (${d-An})${d-i4-2}++,(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_post_increment_2_s1_indirect_with_index_2, { 0x72000300 }
+  },
+/* add.2 ${d-i4-2}(${d-An})++,(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_pre_increment_2_s1_indirect_with_index_2, { 0x72100300 }
+  },
+/* add.2 ${d-direct-addr},${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_direct_s1_indirect_with_offset_2, { 0x71000400 }
+  },
+/* add.2 #${d-imm8},${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_immediate_2_s1_indirect_with_offset_2, { 0x70000400 }
+  },
+/* add.2 (${d-An},${d-r}),${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_index_2_s1_indirect_with_offset_2, { 0x73000400 }
+  },
+/* add.2 ${d-imm7-2}(${d-An}),${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_offset_2_s1_indirect_with_offset_2, { 0x74000400 }
+  },
+/* add.2 (${d-An}),${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_2_s1_indirect_with_offset_2, { 0x74000400 }
+  },
+/* add.2 (${d-An})${d-i4-2}++,${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_post_increment_2_s1_indirect_with_offset_2, { 0x72000400 }
+  },
+/* add.2 ${d-i4-2}(${d-An})++,${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_pre_increment_2_s1_indirect_with_offset_2, { 0x72100400 }
+  },
+/* add.2 ${d-direct-addr},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_direct_s1_indirect_2, { 0x71000400 }
+  },
+/* add.2 #${d-imm8},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_immediate_2_s1_indirect_2, { 0x70000400 }
+  },
+/* add.2 (${d-An},${d-r}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_index_2_s1_indirect_2, { 0x73000400 }
+  },
+/* add.2 ${d-imm7-2}(${d-An}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_offset_2_s1_indirect_2, { 0x74000400 }
+  },
+/* add.2 (${d-An}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_2_s1_indirect_2, { 0x74000400 }
+  },
+/* add.2 (${d-An})${d-i4-2}++,(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_post_increment_2_s1_indirect_2, { 0x72000400 }
+  },
+/* add.2 ${d-i4-2}(${d-An})++,(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_pre_increment_2_s1_indirect_2, { 0x72100400 }
+  },
+/* add.2 ${d-direct-addr},(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_direct_s1_indirect_with_post_increment_2, { 0x71000200 }
+  },
+/* add.2 #${d-imm8},(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_immediate_2_s1_indirect_with_post_increment_2, { 0x70000200 }
+  },
+/* add.2 (${d-An},${d-r}),(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_index_2_s1_indirect_with_post_increment_2, { 0x73000200 }
+  },
+/* add.2 ${d-imm7-2}(${d-An}),(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_offset_2_s1_indirect_with_post_increment_2, { 0x74000200 }
+  },
+/* add.2 (${d-An}),(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_2_s1_indirect_with_post_increment_2, { 0x74000200 }
+  },
+/* add.2 (${d-An})${d-i4-2}++,(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_post_increment_2_s1_indirect_with_post_increment_2, { 0x72000200 }
+  },
+/* add.2 ${d-i4-2}(${d-An})++,(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_pre_increment_2_s1_indirect_with_post_increment_2, { 0x72100200 }
+  },
+/* add.2 ${d-direct-addr},${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_direct_s1_indirect_with_pre_increment_2, { 0x71000210 }
+  },
+/* add.2 #${d-imm8},${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_immediate_2_s1_indirect_with_pre_increment_2, { 0x70000210 }
+  },
+/* add.2 (${d-An},${d-r}),${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_index_2_s1_indirect_with_pre_increment_2, { 0x73000210 }
+  },
+/* add.2 ${d-imm7-2}(${d-An}),${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_offset_2_s1_indirect_with_pre_increment_2, { 0x74000210 }
+  },
+/* add.2 (${d-An}),${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_2_s1_indirect_with_pre_increment_2, { 0x74000210 }
+  },
+/* add.2 (${d-An})${d-i4-2}++,${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_post_increment_2_s1_indirect_with_pre_increment_2, { 0x72000210 }
+  },
+/* add.2 ${d-i4-2}(${d-An})++,${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_pre_increment_2_s1_indirect_with_pre_increment_2, { 0x72100210 }
+  },
+/* not.4 ${d-direct-addr},${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_sysret_d_direct_s1_direct, { 0x1005100 }
+  },
+/* not.4 #${d-imm8},${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_sysret_d_immediate_4_s1_direct, { 0x5100 }
+  },
+/* not.4 (${d-An},${d-r}),${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_sysret_d_indirect_with_index_4_s1_direct, { 0x3005100 }
+  },
+/* not.4 ${d-imm7-4}(${d-An}),${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_sysret_d_indirect_with_offset_4_s1_direct, { 0x4005100 }
+  },
+/* not.4 (${d-An}),${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_sysret_d_indirect_4_s1_direct, { 0x4005100 }
+  },
+/* not.4 (${d-An})${d-i4-4}++,${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_sysret_d_indirect_with_post_increment_4_s1_direct, { 0x2005100 }
+  },
+/* not.4 ${d-i4-4}(${d-An})++,${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_sysret_d_indirect_with_pre_increment_4_s1_direct, { 0x2105100 }
+  },
+/* not.4 ${d-direct-addr},#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_sysret_d_direct_s1_immediate, { 0x1005000 }
+  },
+/* not.4 #${d-imm8},#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_sysret_d_immediate_4_s1_immediate, { 0x5000 }
+  },
+/* not.4 (${d-An},${d-r}),#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_sysret_d_indirect_with_index_4_s1_immediate, { 0x3005000 }
+  },
+/* not.4 ${d-imm7-4}(${d-An}),#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_sysret_d_indirect_with_offset_4_s1_immediate, { 0x4005000 }
+  },
+/* not.4 (${d-An}),#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_sysret_d_indirect_4_s1_immediate, { 0x4005000 }
+  },
+/* not.4 (${d-An})${d-i4-4}++,#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_sysret_d_indirect_with_post_increment_4_s1_immediate, { 0x2005000 }
+  },
+/* not.4 ${d-i4-4}(${d-An})++,#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_sysret_d_indirect_with_pre_increment_4_s1_immediate, { 0x2105000 }
+  },
+/* not.4 ${d-direct-addr},(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_sysret_d_direct_s1_indirect_with_index_4, { 0x1005300 }
+  },
+/* not.4 #${d-imm8},(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_sysret_d_immediate_4_s1_indirect_with_index_4, { 0x5300 }
+  },
+/* not.4 (${d-An},${d-r}),(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_index_4_s1_indirect_with_index_4, { 0x3005300 }
+  },
+/* not.4 ${d-imm7-4}(${d-An}),(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_offset_4_s1_indirect_with_index_4, { 0x4005300 }
+  },
+/* not.4 (${d-An}),(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_sysret_d_indirect_4_s1_indirect_with_index_4, { 0x4005300 }
+  },
+/* not.4 (${d-An})${d-i4-4}++,(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_post_increment_4_s1_indirect_with_index_4, { 0x2005300 }
+  },
+/* not.4 ${d-i4-4}(${d-An})++,(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_pre_increment_4_s1_indirect_with_index_4, { 0x2105300 }
+  },
+/* not.4 ${d-direct-addr},${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_direct_s1_indirect_with_offset_4, { 0x1005400 }
+  },
+/* not.4 #${d-imm8},${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_immediate_4_s1_indirect_with_offset_4, { 0x5400 }
+  },
+/* not.4 (${d-An},${d-r}),${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_index_4_s1_indirect_with_offset_4, { 0x3005400 }
+  },
+/* not.4 ${d-imm7-4}(${d-An}),${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_offset_4_s1_indirect_with_offset_4, { 0x4005400 }
+  },
+/* not.4 (${d-An}),${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_4_s1_indirect_with_offset_4, { 0x4005400 }
+  },
+/* not.4 (${d-An})${d-i4-4}++,${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_post_increment_4_s1_indirect_with_offset_4, { 0x2005400 }
+  },
+/* not.4 ${d-i4-4}(${d-An})++,${s1-imm7-4}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_pre_increment_4_s1_indirect_with_offset_4, { 0x2105400 }
+  },
+/* not.4 ${d-direct-addr},(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_direct_s1_indirect_4, { 0x1005400 }
+  },
+/* not.4 #${d-imm8},(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_immediate_4_s1_indirect_4, { 0x5400 }
+  },
+/* not.4 (${d-An},${d-r}),(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_index_4_s1_indirect_4, { 0x3005400 }
+  },
+/* not.4 ${d-imm7-4}(${d-An}),(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_offset_4_s1_indirect_4, { 0x4005400 }
+  },
+/* not.4 (${d-An}),(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_4_s1_indirect_4, { 0x4005400 }
+  },
+/* not.4 (${d-An})${d-i4-4}++,(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_post_increment_4_s1_indirect_4, { 0x2005400 }
+  },
+/* not.4 ${d-i4-4}(${d-An})++,(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_sysret_d_indirect_with_pre_increment_4_s1_indirect_4, { 0x2105400 }
+  },
+/* not.4 ${d-direct-addr},(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_sysret_d_direct_s1_indirect_with_post_increment_4, { 0x1005200 }
+  },
+/* not.4 #${d-imm8},(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_sysret_d_immediate_4_s1_indirect_with_post_increment_4, { 0x5200 }
+  },
+/* not.4 (${d-An},${d-r}),(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_with_index_4_s1_indirect_with_post_increment_4, { 0x3005200 }
+  },
+/* not.4 ${d-imm7-4}(${d-An}),(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_with_offset_4_s1_indirect_with_post_increment_4, { 0x4005200 }
+  },
+/* not.4 (${d-An}),(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_4_s1_indirect_with_post_increment_4, { 0x4005200 }
+  },
+/* not.4 (${d-An})${d-i4-4}++,(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_with_post_increment_4_s1_indirect_with_post_increment_4, { 0x2005200 }
+  },
+/* not.4 ${d-i4-4}(${d-An})++,(${s1-An})${s1-i4-4}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_with_pre_increment_4_s1_indirect_with_post_increment_4, { 0x2105200 }
+  },
+/* not.4 ${d-direct-addr},${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_sysret_d_direct_s1_indirect_with_pre_increment_4, { 0x1005210 }
+  },
+/* not.4 #${d-imm8},${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_sysret_d_immediate_4_s1_indirect_with_pre_increment_4, { 0x5210 }
+  },
+/* not.4 (${d-An},${d-r}),${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_with_index_4_s1_indirect_with_pre_increment_4, { 0x3005210 }
+  },
+/* not.4 ${d-imm7-4}(${d-An}),${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_with_offset_4_s1_indirect_with_pre_increment_4, { 0x4005210 }
+  },
+/* not.4 (${d-An}),${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_4_s1_indirect_with_pre_increment_4, { 0x4005210 }
+  },
+/* not.4 (${d-An})${d-i4-4}++,${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_with_post_increment_4_s1_indirect_with_pre_increment_4, { 0x2005210 }
+  },
+/* not.4 ${d-i4-4}(${d-An})++,${s1-i4-4}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_sysret_d_indirect_with_pre_increment_4_s1_indirect_with_pre_increment_4, { 0x2105210 }
+  },
+/* not.2 ${d-direct-addr},${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_sysret_d_direct_s1_direct, { 0x1005900 }
+  },
+/* not.2 #${d-imm8},${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_move_2_d_immediate_2_s1_direct, { 0x5900 }
+  },
+/* not.2 (${d-An},${d-r}),${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_move_2_d_indirect_with_index_2_s1_direct, { 0x3005900 }
+  },
+/* not.2 ${d-imm7-2}(${d-An}),${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_move_2_d_indirect_with_offset_2_s1_direct, { 0x4005900 }
+  },
+/* not.2 (${d-An}),${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_move_2_d_indirect_2_s1_direct, { 0x4005900 }
+  },
+/* not.2 (${d-An})${d-i4-2}++,${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_move_2_d_indirect_with_post_increment_2_s1_direct, { 0x2005900 }
+  },
+/* not.2 ${d-i4-2}(${d-An})++,${s1-direct-addr} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_DIRECT_ADDR), 0 } },
+    & ifmt_move_2_d_indirect_with_pre_increment_2_s1_direct, { 0x2105900 }
+  },
+/* not.2 ${d-direct-addr},#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_sysret_d_direct_s1_immediate, { 0x1005800 }
+  },
+/* not.2 #${d-imm8},#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_move_2_d_immediate_2_s1_immediate, { 0x5800 }
+  },
+/* not.2 (${d-An},${d-r}),#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_move_2_d_indirect_with_index_2_s1_immediate, { 0x3005800 }
+  },
+/* not.2 ${d-imm7-2}(${d-An}),#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_move_2_d_indirect_with_offset_2_s1_immediate, { 0x4005800 }
+  },
+/* not.2 (${d-An}),#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_move_2_d_indirect_2_s1_immediate, { 0x4005800 }
+  },
+/* not.2 (${d-An})${d-i4-2}++,#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_move_2_d_indirect_with_post_increment_2_s1_immediate, { 0x2005800 }
+  },
+/* not.2 ${d-i4-2}(${d-An})++,#${s1-imm8} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', '#', OP (S1_IMM8), 0 } },
+    & ifmt_move_2_d_indirect_with_pre_increment_2_s1_immediate, { 0x2105800 }
+  },
+/* not.2 ${d-direct-addr},(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_move_2_d_direct_s1_indirect_with_index_2, { 0x1005b00 }
+  },
+/* not.2 #${d-imm8},(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_move_2_d_immediate_2_s1_indirect_with_index_2, { 0x5b00 }
+  },
+/* not.2 (${d-An},${d-r}),(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_move_2_d_indirect_with_index_2_s1_indirect_with_index_2, { 0x3005b00 }
+  },
+/* not.2 ${d-imm7-2}(${d-An}),(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_move_2_d_indirect_with_offset_2_s1_indirect_with_index_2, { 0x4005b00 }
+  },
+/* not.2 (${d-An}),(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_move_2_d_indirect_2_s1_indirect_with_index_2, { 0x4005b00 }
+  },
+/* not.2 (${d-An})${d-i4-2}++,(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_move_2_d_indirect_with_post_increment_2_s1_indirect_with_index_2, { 0x2005b00 }
+  },
+/* not.2 ${d-i4-2}(${d-An})++,(${s1-An},${s1-r}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', 0 } },
+    & ifmt_move_2_d_indirect_with_pre_increment_2_s1_indirect_with_index_2, { 0x2105b00 }
+  },
+/* not.2 ${d-direct-addr},${s1-imm7-2}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_2_d_direct_s1_indirect_with_offset_2, { 0x1005c00 }
+  },
+/* not.2 #${d-imm8},${s1-imm7-2}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_2_d_immediate_2_s1_indirect_with_offset_2, { 0x5c00 }
+  },
+/* not.2 (${d-An},${d-r}),${s1-imm7-2}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_2_d_indirect_with_index_2_s1_indirect_with_offset_2, { 0x3005c00 }
+  },
+/* not.2 ${d-imm7-2}(${d-An}),${s1-imm7-2}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_2_d_indirect_with_offset_2_s1_indirect_with_offset_2, { 0x4005c00 }
+  },
+/* not.2 (${d-An}),${s1-imm7-2}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_2_d_indirect_2_s1_indirect_with_offset_2, { 0x4005c00 }
+  },
+/* not.2 (${d-An})${d-i4-2}++,${s1-imm7-2}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_2_d_indirect_with_post_increment_2_s1_indirect_with_offset_2, { 0x2005c00 }
+  },
+/* not.2 ${d-i4-2}(${d-An})++,${s1-imm7-2}(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_2_d_indirect_with_pre_increment_2_s1_indirect_with_offset_2, { 0x2105c00 }
+  },
+/* not.2 ${d-direct-addr},(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_2_d_direct_s1_indirect_2, { 0x1005c00 }
+  },
+/* not.2 #${d-imm8},(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_2_d_immediate_2_s1_indirect_2, { 0x5c00 }
+  },
+/* not.2 (${d-An},${d-r}),(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_2_d_indirect_with_index_2_s1_indirect_2, { 0x3005c00 }
+  },
+/* not.2 ${d-imm7-2}(${d-An}),(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_2_d_indirect_with_offset_2_s1_indirect_2, { 0x4005c00 }
+  },
+/* not.2 (${d-An}),(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_2_d_indirect_2_s1_indirect_2, { 0x4005c00 }
+  },
+/* not.2 (${d-An})${d-i4-2}++,(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_2_d_indirect_with_post_increment_2_s1_indirect_2, { 0x2005c00 }
+  },
+/* not.2 ${d-i4-2}(${d-An})++,(${s1-An}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', 0 } },
+    & ifmt_move_2_d_indirect_with_pre_increment_2_s1_indirect_2, { 0x2105c00 }
+  },
+/* not.2 ${d-direct-addr},(${s1-An})${s1-i4-2}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', 0 } },
+    & ifmt_move_2_d_direct_s1_indirect_with_post_increment_2, { 0x1005a00 }
+  },
+/* not.2 #${d-imm8},(${s1-An})${s1-i4-2}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', 0 } },
+    & ifmt_move_2_d_immediate_2_s1_indirect_with_post_increment_2, { 0x5a00 }
+  },
+/* not.2 (${d-An},${d-r}),(${s1-An})${s1-i4-2}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', 0 } },
+    & ifmt_move_2_d_indirect_with_index_2_s1_indirect_with_post_increment_2, { 0x3005a00 }
+  },
+/* not.2 ${d-imm7-2}(${d-An}),(${s1-An})${s1-i4-2}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', 0 } },
+    & ifmt_move_2_d_indirect_with_offset_2_s1_indirect_with_post_increment_2, { 0x4005a00 }
+  },
+/* not.2 (${d-An}),(${s1-An})${s1-i4-2}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', 0 } },
+    & ifmt_move_2_d_indirect_2_s1_indirect_with_post_increment_2, { 0x4005a00 }
+  },
+/* not.2 (${d-An})${d-i4-2}++,(${s1-An})${s1-i4-2}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', 0 } },
+    & ifmt_move_2_d_indirect_with_post_increment_2_s1_indirect_with_post_increment_2, { 0x2005a00 }
+  },
+/* not.2 ${d-i4-2}(${d-An})++,(${s1-An})${s1-i4-2}++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', 0 } },
+    & ifmt_move_2_d_indirect_with_pre_increment_2_s1_indirect_with_post_increment_2, { 0x2105a00 }
+  },
+/* not.2 ${d-direct-addr},${s1-i4-2}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_move_2_d_direct_s1_indirect_with_pre_increment_2, { 0x1005a10 }
+  },
+/* not.2 #${d-imm8},${s1-i4-2}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_move_2_d_immediate_2_s1_indirect_with_pre_increment_2, { 0x5a10 }
+  },
+/* not.2 (${d-An},${d-r}),${s1-i4-2}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_move_2_d_indirect_with_index_2_s1_indirect_with_pre_increment_2, { 0x3005a10 }
+  },
+/* not.2 ${d-imm7-2}(${d-An}),${s1-i4-2}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_move_2_d_indirect_with_offset_2_s1_indirect_with_pre_increment_2, { 0x4005a10 }
+  },
+/* not.2 (${d-An}),${s1-i4-2}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_move_2_d_indirect_2_s1_indirect_with_pre_increment_2, { 0x4005a10 }
+  },
+/* not.2 (${d-An})${d-i4-2}++,${s1-i4-2}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_move_2_d_indirect_with_post_increment_2_s1_indirect_with_pre_increment_2, { 0x2005a10 }
+  },
+/* not.2 ${d-i4-2}(${d-An})++,${s1-i4-2}(${s1-An})++ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', 0 } },
+    & ifmt_move_2_d_indirect_with_pre_increment_2_s1_indirect_with_pre_increment_2, { 0x2105a10 }
+  },
+/* xor.1 ${d-direct-addr},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_direct, { 0x61008100 }
+  },
+/* xor.1 #${d-imm8},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_immediate_1_s1_direct, { 0x60008100 }
+  },
+/* xor.1 (${d-An},${d-r}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_index_1_s1_direct, { 0x63008100 }
+  },
+/* xor.1 ${d-imm7-1}(${d-An}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_1), '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_offset_1_s1_direct, { 0x64008100 }
+  },
+/* xor.1 (${d-An}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_1_s1_direct, { 0x64008100 }
+  },
+/* xor.1 (${d-An})${d-i4-1}++,${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_1), '+', '+', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_post_increment_1_s1_direct, { 0x62008100 }
+  },
+/* xor.1 ${d-i4-1}(${d-An})++,${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_1), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_pre_increment_1_s1_direct, { 0x62108100 }
+  },
+/* xor.1 ${d-direct-addr},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_immediate, { 0x61008000 }
+  },
+/* xor.1 #${d-imm8},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_immediate_1_s1_immediate, { 0x60008000 }
+  },
+/* xor.1 (${d-An},${d-r}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_index_1_s1_immediate, { 0x63008000 }
+  },
+/* xor.1 ${d-imm7-1}(${d-An}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_1), '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_offset_1_s1_immediate, { 0x64008000 }
+  },
+/* xor.1 (${d-An}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_1_s1_immediate, { 0x64008000 }
+  },
+/* xor.1 (${d-An})${d-i4-1}++,#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_1), '+', '+', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_post_increment_1_s1_immediate, { 0x62008000 }
+  },
+/* xor.1 ${d-i4-1}(${d-An})++,#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_1), '(', OP (D_AN), ')', '+', '+', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_pre_increment_1_s1_immediate, { 0x62108000 }
+  },
+/* xor.1 ${d-direct-addr},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_direct_s1_indirect_with_index_1, { 0x61008300 }
+  },
+/* xor.1 #${d-imm8},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_immediate_1_s1_indirect_with_index_1, { 0x60008300 }
+  },
+/* xor.1 (${d-An},${d-r}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_index_1_s1_indirect_with_index_1, { 0x63008300 }
+  },
+/* xor.1 ${d-imm7-1}(${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_1), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_offset_1_s1_indirect_with_index_1, { 0x64008300 }
+  },
+/* xor.1 (${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_1_s1_indirect_with_index_1, { 0x64008300 }
+  },
+/* xor.1 (${d-An})${d-i4-1}++,(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_1), '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_post_increment_1_s1_indirect_with_index_1, { 0x62008300 }
+  },
+/* xor.1 ${d-i4-1}(${d-An})++,(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_1), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_pre_increment_1_s1_indirect_with_index_1, { 0x62108300 }
+  },
+/* xor.1 ${d-direct-addr},${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_direct_s1_indirect_with_offset_1, { 0x61008400 }
+  },
+/* xor.1 #${d-imm8},${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_immediate_1_s1_indirect_with_offset_1, { 0x60008400 }
+  },
+/* xor.1 (${d-An},${d-r}),${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_index_1_s1_indirect_with_offset_1, { 0x63008400 }
+  },
+/* xor.1 ${d-imm7-1}(${d-An}),${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_1), '(', OP (D_AN), ')', ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_offset_1_s1_indirect_with_offset_1, { 0x64008400 }
+  },
+/* xor.1 (${d-An}),${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_1_s1_indirect_with_offset_1, { 0x64008400 }
+  },
+/* xor.1 (${d-An})${d-i4-1}++,${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_1), '+', '+', ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_post_increment_1_s1_indirect_with_offset_1, { 0x62008400 }
+  },
+/* xor.1 ${d-i4-1}(${d-An})++,${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_1), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_pre_increment_1_s1_indirect_with_offset_1, { 0x62108400 }
+  },
+/* xor.1 ${d-direct-addr},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_direct_s1_indirect_1, { 0x61008400 }
+  },
+/* xor.1 #${d-imm8},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_immediate_1_s1_indirect_1, { 0x60008400 }
+  },
+/* xor.1 (${d-An},${d-r}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_index_1_s1_indirect_1, { 0x63008400 }
+  },
+/* xor.1 ${d-imm7-1}(${d-An}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_1), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_offset_1_s1_indirect_1, { 0x64008400 }
+  },
+/* xor.1 (${d-An}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_1_s1_indirect_1, { 0x64008400 }
+  },
+/* xor.1 (${d-An})${d-i4-1}++,(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_1), '+', '+', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_post_increment_1_s1_indirect_1, { 0x62008400 }
+  },
+/* xor.1 ${d-i4-1}(${d-An})++,(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_1), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_pre_increment_1_s1_indirect_1, { 0x62108400 }
+  },
+/* xor.1 ${d-direct-addr},(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_direct_s1_indirect_with_post_increment_1, { 0x61008200 }
+  },
+/* xor.1 #${d-imm8},(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_immediate_1_s1_indirect_with_post_increment_1, { 0x60008200 }
+  },
+/* xor.1 (${d-An},${d-r}),(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_index_1_s1_indirect_with_post_increment_1, { 0x63008200 }
+  },
+/* xor.1 ${d-imm7-1}(${d-An}),(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_1), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_offset_1_s1_indirect_with_post_increment_1, { 0x64008200 }
+  },
+/* xor.1 (${d-An}),(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_1_s1_indirect_with_post_increment_1, { 0x64008200 }
+  },
+/* xor.1 (${d-An})${d-i4-1}++,(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_1), '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_post_increment_1_s1_indirect_with_post_increment_1, { 0x62008200 }
+  },
+/* xor.1 ${d-i4-1}(${d-An})++,(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_1), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_pre_increment_1_s1_indirect_with_post_increment_1, { 0x62108200 }
+  },
+/* xor.1 ${d-direct-addr},${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_direct_s1_indirect_with_pre_increment_1, { 0x61008210 }
+  },
+/* xor.1 #${d-imm8},${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_immediate_1_s1_indirect_with_pre_increment_1, { 0x60008210 }
+  },
+/* xor.1 (${d-An},${d-r}),${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_index_1_s1_indirect_with_pre_increment_1, { 0x63008210 }
+  },
+/* xor.1 ${d-imm7-1}(${d-An}),${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_1), '(', OP (D_AN), ')', ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_offset_1_s1_indirect_with_pre_increment_1, { 0x64008210 }
+  },
+/* xor.1 (${d-An}),${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_1_s1_indirect_with_pre_increment_1, { 0x64008210 }
+  },
+/* xor.1 (${d-An})${d-i4-1}++,${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_1), '+', '+', ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_post_increment_1_s1_indirect_with_pre_increment_1, { 0x62008210 }
+  },
+/* xor.1 ${d-i4-1}(${d-An})++,${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_1), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_pre_increment_1_s1_indirect_with_pre_increment_1, { 0x62108210 }
+  },
+/* or.1 ${d-direct-addr},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_direct, { 0x51008100 }
+  },
+/* or.1 #${d-imm8},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_immediate_1_s1_direct, { 0x50008100 }
+  },
+/* or.1 (${d-An},${d-r}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_index_1_s1_direct, { 0x53008100 }
+  },
+/* or.1 ${d-imm7-1}(${d-An}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_1), '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_offset_1_s1_direct, { 0x54008100 }
+  },
+/* or.1 (${d-An}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_1_s1_direct, { 0x54008100 }
+  },
+/* or.1 (${d-An})${d-i4-1}++,${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_1), '+', '+', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_post_increment_1_s1_direct, { 0x52008100 }
+  },
+/* or.1 ${d-i4-1}(${d-An})++,${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_1), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_pre_increment_1_s1_direct, { 0x52108100 }
+  },
+/* or.1 ${d-direct-addr},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_immediate, { 0x51008000 }
+  },
+/* or.1 #${d-imm8},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_immediate_1_s1_immediate, { 0x50008000 }
+  },
+/* or.1 (${d-An},${d-r}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_index_1_s1_immediate, { 0x53008000 }
+  },
+/* or.1 ${d-imm7-1}(${d-An}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_1), '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_offset_1_s1_immediate, { 0x54008000 }
+  },
+/* or.1 (${d-An}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_1_s1_immediate, { 0x54008000 }
+  },
+/* or.1 (${d-An})${d-i4-1}++,#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_1), '+', '+', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_post_increment_1_s1_immediate, { 0x52008000 }
+  },
+/* or.1 ${d-i4-1}(${d-An})++,#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_1), '(', OP (D_AN), ')', '+', '+', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_pre_increment_1_s1_immediate, { 0x52108000 }
+  },
+/* or.1 ${d-direct-addr},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_direct_s1_indirect_with_index_1, { 0x51008300 }
+  },
+/* or.1 #${d-imm8},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_immediate_1_s1_indirect_with_index_1, { 0x50008300 }
+  },
+/* or.1 (${d-An},${d-r}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_index_1_s1_indirect_with_index_1, { 0x53008300 }
+  },
+/* or.1 ${d-imm7-1}(${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_1), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_offset_1_s1_indirect_with_index_1, { 0x54008300 }
+  },
+/* or.1 (${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_1_s1_indirect_with_index_1, { 0x54008300 }
+  },
+/* or.1 (${d-An})${d-i4-1}++,(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_1), '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_post_increment_1_s1_indirect_with_index_1, { 0x52008300 }
+  },
+/* or.1 ${d-i4-1}(${d-An})++,(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_1), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_pre_increment_1_s1_indirect_with_index_1, { 0x52108300 }
+  },
+/* or.1 ${d-direct-addr},${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_direct_s1_indirect_with_offset_1, { 0x51008400 }
+  },
+/* or.1 #${d-imm8},${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_immediate_1_s1_indirect_with_offset_1, { 0x50008400 }
+  },
+/* or.1 (${d-An},${d-r}),${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_index_1_s1_indirect_with_offset_1, { 0x53008400 }
+  },
+/* or.1 ${d-imm7-1}(${d-An}),${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_1), '(', OP (D_AN), ')', ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_offset_1_s1_indirect_with_offset_1, { 0x54008400 }
+  },
+/* or.1 (${d-An}),${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_1_s1_indirect_with_offset_1, { 0x54008400 }
+  },
+/* or.1 (${d-An})${d-i4-1}++,${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_1), '+', '+', ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_post_increment_1_s1_indirect_with_offset_1, { 0x52008400 }
+  },
+/* or.1 ${d-i4-1}(${d-An})++,${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_1), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_pre_increment_1_s1_indirect_with_offset_1, { 0x52108400 }
+  },
+/* or.1 ${d-direct-addr},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_direct_s1_indirect_1, { 0x51008400 }
+  },
+/* or.1 #${d-imm8},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_immediate_1_s1_indirect_1, { 0x50008400 }
+  },
+/* or.1 (${d-An},${d-r}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_index_1_s1_indirect_1, { 0x53008400 }
+  },
+/* or.1 ${d-imm7-1}(${d-An}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_1), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_offset_1_s1_indirect_1, { 0x54008400 }
+  },
+/* or.1 (${d-An}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_1_s1_indirect_1, { 0x54008400 }
+  },
+/* or.1 (${d-An})${d-i4-1}++,(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_1), '+', '+', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_post_increment_1_s1_indirect_1, { 0x52008400 }
+  },
+/* or.1 ${d-i4-1}(${d-An})++,(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_1), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_pre_increment_1_s1_indirect_1, { 0x52108400 }
+  },
+/* or.1 ${d-direct-addr},(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_direct_s1_indirect_with_post_increment_1, { 0x51008200 }
+  },
+/* or.1 #${d-imm8},(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_immediate_1_s1_indirect_with_post_increment_1, { 0x50008200 }
+  },
+/* or.1 (${d-An},${d-r}),(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_index_1_s1_indirect_with_post_increment_1, { 0x53008200 }
+  },
+/* or.1 ${d-imm7-1}(${d-An}),(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_1), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_offset_1_s1_indirect_with_post_increment_1, { 0x54008200 }
+  },
+/* or.1 (${d-An}),(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_1_s1_indirect_with_post_increment_1, { 0x54008200 }
+  },
+/* or.1 (${d-An})${d-i4-1}++,(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_1), '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_post_increment_1_s1_indirect_with_post_increment_1, { 0x52008200 }
+  },
+/* or.1 ${d-i4-1}(${d-An})++,(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_1), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_pre_increment_1_s1_indirect_with_post_increment_1, { 0x52108200 }
+  },
+/* or.1 ${d-direct-addr},${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_direct_s1_indirect_with_pre_increment_1, { 0x51008210 }
+  },
+/* or.1 #${d-imm8},${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_immediate_1_s1_indirect_with_pre_increment_1, { 0x50008210 }
+  },
+/* or.1 (${d-An},${d-r}),${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_index_1_s1_indirect_with_pre_increment_1, { 0x53008210 }
+  },
+/* or.1 ${d-imm7-1}(${d-An}),${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_1), '(', OP (D_AN), ')', ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_offset_1_s1_indirect_with_pre_increment_1, { 0x54008210 }
+  },
+/* or.1 (${d-An}),${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_1_s1_indirect_with_pre_increment_1, { 0x54008210 }
+  },
+/* or.1 (${d-An})${d-i4-1}++,${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_1), '+', '+', ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_post_increment_1_s1_indirect_with_pre_increment_1, { 0x52008210 }
+  },
+/* or.1 ${d-i4-1}(${d-An})++,${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_1), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_pre_increment_1_s1_indirect_with_pre_increment_1, { 0x52108210 }
+  },
+/* and.1 ${d-direct-addr},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_direct, { 0x41008100 }
+  },
+/* and.1 #${d-imm8},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_immediate_1_s1_direct, { 0x40008100 }
+  },
+/* and.1 (${d-An},${d-r}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_index_1_s1_direct, { 0x43008100 }
+  },
+/* and.1 ${d-imm7-1}(${d-An}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_1), '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_offset_1_s1_direct, { 0x44008100 }
+  },
+/* and.1 (${d-An}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_1_s1_direct, { 0x44008100 }
+  },
+/* and.1 (${d-An})${d-i4-1}++,${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_1), '+', '+', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_post_increment_1_s1_direct, { 0x42008100 }
+  },
+/* and.1 ${d-i4-1}(${d-An})++,${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_1), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_pre_increment_1_s1_direct, { 0x42108100 }
+  },
+/* and.1 ${d-direct-addr},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_immediate, { 0x41008000 }
+  },
+/* and.1 #${d-imm8},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_immediate_1_s1_immediate, { 0x40008000 }
+  },
+/* and.1 (${d-An},${d-r}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_index_1_s1_immediate, { 0x43008000 }
+  },
+/* and.1 ${d-imm7-1}(${d-An}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_1), '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_offset_1_s1_immediate, { 0x44008000 }
+  },
+/* and.1 (${d-An}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_1_s1_immediate, { 0x44008000 }
+  },
+/* and.1 (${d-An})${d-i4-1}++,#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_1), '+', '+', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_post_increment_1_s1_immediate, { 0x42008000 }
+  },
+/* and.1 ${d-i4-1}(${d-An})++,#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_1), '(', OP (D_AN), ')', '+', '+', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_pre_increment_1_s1_immediate, { 0x42108000 }
+  },
+/* and.1 ${d-direct-addr},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_direct_s1_indirect_with_index_1, { 0x41008300 }
+  },
+/* and.1 #${d-imm8},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_immediate_1_s1_indirect_with_index_1, { 0x40008300 }
+  },
+/* and.1 (${d-An},${d-r}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_index_1_s1_indirect_with_index_1, { 0x43008300 }
+  },
+/* and.1 ${d-imm7-1}(${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_1), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_offset_1_s1_indirect_with_index_1, { 0x44008300 }
+  },
+/* and.1 (${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_1_s1_indirect_with_index_1, { 0x44008300 }
+  },
+/* and.1 (${d-An})${d-i4-1}++,(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_1), '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_post_increment_1_s1_indirect_with_index_1, { 0x42008300 }
+  },
+/* and.1 ${d-i4-1}(${d-An})++,(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_1), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_pre_increment_1_s1_indirect_with_index_1, { 0x42108300 }
+  },
+/* and.1 ${d-direct-addr},${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_direct_s1_indirect_with_offset_1, { 0x41008400 }
+  },
+/* and.1 #${d-imm8},${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_immediate_1_s1_indirect_with_offset_1, { 0x40008400 }
+  },
+/* and.1 (${d-An},${d-r}),${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_index_1_s1_indirect_with_offset_1, { 0x43008400 }
+  },
+/* and.1 ${d-imm7-1}(${d-An}),${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_1), '(', OP (D_AN), ')', ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_offset_1_s1_indirect_with_offset_1, { 0x44008400 }
+  },
+/* and.1 (${d-An}),${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_1_s1_indirect_with_offset_1, { 0x44008400 }
+  },
+/* and.1 (${d-An})${d-i4-1}++,${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_1), '+', '+', ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_post_increment_1_s1_indirect_with_offset_1, { 0x42008400 }
+  },
+/* and.1 ${d-i4-1}(${d-An})++,${s1-imm7-1}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_1), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_IMM7_1), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_pre_increment_1_s1_indirect_with_offset_1, { 0x42108400 }
+  },
+/* and.1 ${d-direct-addr},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_direct_s1_indirect_1, { 0x41008400 }
+  },
+/* and.1 #${d-imm8},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_immediate_1_s1_indirect_1, { 0x40008400 }
+  },
+/* and.1 (${d-An},${d-r}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_index_1_s1_indirect_1, { 0x43008400 }
+  },
+/* and.1 ${d-imm7-1}(${d-An}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_1), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_offset_1_s1_indirect_1, { 0x44008400 }
+  },
+/* and.1 (${d-An}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_1_s1_indirect_1, { 0x44008400 }
+  },
+/* and.1 (${d-An})${d-i4-1}++,(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_1), '+', '+', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_post_increment_1_s1_indirect_1, { 0x42008400 }
+  },
+/* and.1 ${d-i4-1}(${d-An})++,(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_1), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_pre_increment_1_s1_indirect_1, { 0x42108400 }
+  },
+/* and.1 ${d-direct-addr},(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_direct_s1_indirect_with_post_increment_1, { 0x41008200 }
+  },
+/* and.1 #${d-imm8},(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_immediate_1_s1_indirect_with_post_increment_1, { 0x40008200 }
+  },
+/* and.1 (${d-An},${d-r}),(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_index_1_s1_indirect_with_post_increment_1, { 0x43008200 }
+  },
+/* and.1 ${d-imm7-1}(${d-An}),(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_1), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_offset_1_s1_indirect_with_post_increment_1, { 0x44008200 }
+  },
+/* and.1 (${d-An}),(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_1_s1_indirect_with_post_increment_1, { 0x44008200 }
+  },
+/* and.1 (${d-An})${d-i4-1}++,(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_1), '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_post_increment_1_s1_indirect_with_post_increment_1, { 0x42008200 }
+  },
+/* and.1 ${d-i4-1}(${d-An})++,(${s1-An})${s1-i4-1}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_1), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_1), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_pre_increment_1_s1_indirect_with_post_increment_1, { 0x42108200 }
+  },
+/* and.1 ${d-direct-addr},${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_direct_s1_indirect_with_pre_increment_1, { 0x41008210 }
+  },
+/* and.1 #${d-imm8},${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_immediate_1_s1_indirect_with_pre_increment_1, { 0x40008210 }
+  },
+/* and.1 (${d-An},${d-r}),${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_index_1_s1_indirect_with_pre_increment_1, { 0x43008210 }
+  },
+/* and.1 ${d-imm7-1}(${d-An}),${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_1), '(', OP (D_AN), ')', ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_offset_1_s1_indirect_with_pre_increment_1, { 0x44008210 }
+  },
+/* and.1 (${d-An}),${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_1_s1_indirect_with_pre_increment_1, { 0x44008210 }
+  },
+/* and.1 (${d-An})${d-i4-1}++,${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_1), '+', '+', ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_post_increment_1_s1_indirect_with_pre_increment_1, { 0x42008210 }
+  },
+/* and.1 ${d-i4-1}(${d-An})++,${s1-i4-1}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_1), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_I4_1), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_1_d_indirect_with_pre_increment_1_s1_indirect_with_pre_increment_1, { 0x42108210 }
+  },
+/* xor.4 ${d-direct-addr},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_direct, { 0x69000100 }
+  },
+/* xor.4 #${d-imm8},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_direct, { 0x68000100 }
+  },
+/* xor.4 (${d-An},${d-r}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_direct, { 0x6b000100 }
+  },
+/* xor.4 ${d-imm7-4}(${d-An}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_direct, { 0x6c000100 }
+  },
+/* xor.4 (${d-An}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_direct, { 0x6c000100 }
+  },
+/* xor.4 (${d-An})${d-i4-4}++,${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_direct, { 0x6a000100 }
+  },
+/* xor.4 ${d-i4-4}(${d-An})++,${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_direct, { 0x6a100100 }
+  },
+/* xor.4 ${d-direct-addr},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_immediate, { 0x69000000 }
+  },
+/* xor.4 #${d-imm8},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_immediate, { 0x68000000 }
+  },
+/* xor.4 (${d-An},${d-r}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_immediate, { 0x6b000000 }
+  },
+/* xor.4 ${d-imm7-4}(${d-An}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_immediate, { 0x6c000000 }
+  },
+/* xor.4 (${d-An}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_immediate, { 0x6c000000 }
+  },
+/* xor.4 (${d-An})${d-i4-4}++,#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_immediate, { 0x6a000000 }
+  },
+/* xor.4 ${d-i4-4}(${d-An})++,#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_immediate, { 0x6a100000 }
+  },
+/* xor.4 ${d-direct-addr},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_with_index_4, { 0x69000300 }
+  },
+/* xor.4 #${d-imm8},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_indirect_with_index_4, { 0x68000300 }
+  },
+/* xor.4 (${d-An},${d-r}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_indirect_with_index_4, { 0x6b000300 }
+  },
+/* xor.4 ${d-imm7-4}(${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_indirect_with_index_4, { 0x6c000300 }
+  },
+/* xor.4 (${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_indirect_with_index_4, { 0x6c000300 }
+  },
+/* xor.4 (${d-An})${d-i4-4}++,(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_indirect_with_index_4, { 0x6a000300 }
+  },
+/* xor.4 ${d-i4-4}(${d-An})++,(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_indirect_with_index_4, { 0x6a100300 }
+  },
+/* xor.4 ${d-direct-addr},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_with_offset_4, { 0x69000400 }
+  },
+/* xor.4 #${d-imm8},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_indirect_with_offset_4, { 0x68000400 }
+  },
+/* xor.4 (${d-An},${d-r}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_indirect_with_offset_4, { 0x6b000400 }
+  },
+/* xor.4 ${d-imm7-4}(${d-An}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_indirect_with_offset_4, { 0x6c000400 }
+  },
+/* xor.4 (${d-An}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_indirect_with_offset_4, { 0x6c000400 }
+  },
+/* xor.4 (${d-An})${d-i4-4}++,${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_indirect_with_offset_4, { 0x6a000400 }
+  },
+/* xor.4 ${d-i4-4}(${d-An})++,${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_indirect_with_offset_4, { 0x6a100400 }
+  },
+/* xor.4 ${d-direct-addr},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_4, { 0x69000400 }
+  },
+/* xor.4 #${d-imm8},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_indirect_4, { 0x68000400 }
+  },
+/* xor.4 (${d-An},${d-r}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_indirect_4, { 0x6b000400 }
+  },
+/* xor.4 ${d-imm7-4}(${d-An}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_indirect_4, { 0x6c000400 }
+  },
+/* xor.4 (${d-An}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_indirect_4, { 0x6c000400 }
+  },
+/* xor.4 (${d-An})${d-i4-4}++,(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_indirect_4, { 0x6a000400 }
+  },
+/* xor.4 ${d-i4-4}(${d-An})++,(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_indirect_4, { 0x6a100400 }
+  },
+/* xor.4 ${d-direct-addr},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_with_post_increment_4, { 0x69000200 }
+  },
+/* xor.4 #${d-imm8},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_indirect_with_post_increment_4, { 0x68000200 }
+  },
+/* xor.4 (${d-An},${d-r}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_indirect_with_post_increment_4, { 0x6b000200 }
+  },
+/* xor.4 ${d-imm7-4}(${d-An}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_indirect_with_post_increment_4, { 0x6c000200 }
+  },
+/* xor.4 (${d-An}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_indirect_with_post_increment_4, { 0x6c000200 }
+  },
+/* xor.4 (${d-An})${d-i4-4}++,(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_indirect_with_post_increment_4, { 0x6a000200 }
+  },
+/* xor.4 ${d-i4-4}(${d-An})++,(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_indirect_with_post_increment_4, { 0x6a100200 }
+  },
+/* xor.4 ${d-direct-addr},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_with_pre_increment_4, { 0x69000210 }
+  },
+/* xor.4 #${d-imm8},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_indirect_with_pre_increment_4, { 0x68000210 }
+  },
+/* xor.4 (${d-An},${d-r}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_indirect_with_pre_increment_4, { 0x6b000210 }
+  },
+/* xor.4 ${d-imm7-4}(${d-An}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_indirect_with_pre_increment_4, { 0x6c000210 }
+  },
+/* xor.4 (${d-An}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_indirect_with_pre_increment_4, { 0x6c000210 }
+  },
+/* xor.4 (${d-An})${d-i4-4}++,${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_indirect_with_pre_increment_4, { 0x6a000210 }
+  },
+/* xor.4 ${d-i4-4}(${d-An})++,${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_indirect_with_pre_increment_4, { 0x6a100210 }
+  },
+/* xor.2 ${d-direct-addr},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_direct, { 0x61000100 }
+  },
+/* xor.2 #${d-imm8},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_immediate_2_s1_direct, { 0x60000100 }
+  },
+/* xor.2 (${d-An},${d-r}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_index_2_s1_direct, { 0x63000100 }
+  },
+/* xor.2 ${d-imm7-2}(${d-An}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_offset_2_s1_direct, { 0x64000100 }
+  },
+/* xor.2 (${d-An}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_2_s1_direct, { 0x64000100 }
+  },
+/* xor.2 (${d-An})${d-i4-2}++,${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_post_increment_2_s1_direct, { 0x62000100 }
+  },
+/* xor.2 ${d-i4-2}(${d-An})++,${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_pre_increment_2_s1_direct, { 0x62100100 }
+  },
+/* xor.2 ${d-direct-addr},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_immediate, { 0x61000000 }
+  },
+/* xor.2 #${d-imm8},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_immediate_2_s1_immediate, { 0x60000000 }
+  },
+/* xor.2 (${d-An},${d-r}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_index_2_s1_immediate, { 0x63000000 }
+  },
+/* xor.2 ${d-imm7-2}(${d-An}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_offset_2_s1_immediate, { 0x64000000 }
+  },
+/* xor.2 (${d-An}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_2_s1_immediate, { 0x64000000 }
+  },
+/* xor.2 (${d-An})${d-i4-2}++,#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_post_increment_2_s1_immediate, { 0x62000000 }
+  },
+/* xor.2 ${d-i4-2}(${d-An})++,#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_pre_increment_2_s1_immediate, { 0x62100000 }
+  },
+/* xor.2 ${d-direct-addr},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_direct_s1_indirect_with_index_2, { 0x61000300 }
+  },
+/* xor.2 #${d-imm8},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_immediate_2_s1_indirect_with_index_2, { 0x60000300 }
+  },
+/* xor.2 (${d-An},${d-r}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_index_2_s1_indirect_with_index_2, { 0x63000300 }
+  },
+/* xor.2 ${d-imm7-2}(${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_offset_2_s1_indirect_with_index_2, { 0x64000300 }
+  },
+/* xor.2 (${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_2_s1_indirect_with_index_2, { 0x64000300 }
+  },
+/* xor.2 (${d-An})${d-i4-2}++,(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_post_increment_2_s1_indirect_with_index_2, { 0x62000300 }
+  },
+/* xor.2 ${d-i4-2}(${d-An})++,(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_pre_increment_2_s1_indirect_with_index_2, { 0x62100300 }
+  },
+/* xor.2 ${d-direct-addr},${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_direct_s1_indirect_with_offset_2, { 0x61000400 }
+  },
+/* xor.2 #${d-imm8},${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_immediate_2_s1_indirect_with_offset_2, { 0x60000400 }
+  },
+/* xor.2 (${d-An},${d-r}),${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_index_2_s1_indirect_with_offset_2, { 0x63000400 }
+  },
+/* xor.2 ${d-imm7-2}(${d-An}),${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_offset_2_s1_indirect_with_offset_2, { 0x64000400 }
+  },
+/* xor.2 (${d-An}),${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_2_s1_indirect_with_offset_2, { 0x64000400 }
+  },
+/* xor.2 (${d-An})${d-i4-2}++,${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_post_increment_2_s1_indirect_with_offset_2, { 0x62000400 }
+  },
+/* xor.2 ${d-i4-2}(${d-An})++,${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_pre_increment_2_s1_indirect_with_offset_2, { 0x62100400 }
+  },
+/* xor.2 ${d-direct-addr},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_direct_s1_indirect_2, { 0x61000400 }
+  },
+/* xor.2 #${d-imm8},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_immediate_2_s1_indirect_2, { 0x60000400 }
+  },
+/* xor.2 (${d-An},${d-r}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_index_2_s1_indirect_2, { 0x63000400 }
+  },
+/* xor.2 ${d-imm7-2}(${d-An}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_offset_2_s1_indirect_2, { 0x64000400 }
+  },
+/* xor.2 (${d-An}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_2_s1_indirect_2, { 0x64000400 }
+  },
+/* xor.2 (${d-An})${d-i4-2}++,(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_post_increment_2_s1_indirect_2, { 0x62000400 }
+  },
+/* xor.2 ${d-i4-2}(${d-An})++,(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_pre_increment_2_s1_indirect_2, { 0x62100400 }
+  },
+/* xor.2 ${d-direct-addr},(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_direct_s1_indirect_with_post_increment_2, { 0x61000200 }
+  },
+/* xor.2 #${d-imm8},(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_immediate_2_s1_indirect_with_post_increment_2, { 0x60000200 }
+  },
+/* xor.2 (${d-An},${d-r}),(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_index_2_s1_indirect_with_post_increment_2, { 0x63000200 }
+  },
+/* xor.2 ${d-imm7-2}(${d-An}),(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_offset_2_s1_indirect_with_post_increment_2, { 0x64000200 }
+  },
+/* xor.2 (${d-An}),(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_2_s1_indirect_with_post_increment_2, { 0x64000200 }
+  },
+/* xor.2 (${d-An})${d-i4-2}++,(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_post_increment_2_s1_indirect_with_post_increment_2, { 0x62000200 }
+  },
+/* xor.2 ${d-i4-2}(${d-An})++,(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_pre_increment_2_s1_indirect_with_post_increment_2, { 0x62100200 }
+  },
+/* xor.2 ${d-direct-addr},${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_direct_s1_indirect_with_pre_increment_2, { 0x61000210 }
+  },
+/* xor.2 #${d-imm8},${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_immediate_2_s1_indirect_with_pre_increment_2, { 0x60000210 }
+  },
+/* xor.2 (${d-An},${d-r}),${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_index_2_s1_indirect_with_pre_increment_2, { 0x63000210 }
+  },
+/* xor.2 ${d-imm7-2}(${d-An}),${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_offset_2_s1_indirect_with_pre_increment_2, { 0x64000210 }
+  },
+/* xor.2 (${d-An}),${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_2_s1_indirect_with_pre_increment_2, { 0x64000210 }
+  },
+/* xor.2 (${d-An})${d-i4-2}++,${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_post_increment_2_s1_indirect_with_pre_increment_2, { 0x62000210 }
+  },
+/* xor.2 ${d-i4-2}(${d-An})++,${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_pre_increment_2_s1_indirect_with_pre_increment_2, { 0x62100210 }
+  },
+/* or.4 ${d-direct-addr},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_direct, { 0x59000100 }
+  },
+/* or.4 #${d-imm8},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_direct, { 0x58000100 }
+  },
+/* or.4 (${d-An},${d-r}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_direct, { 0x5b000100 }
+  },
+/* or.4 ${d-imm7-4}(${d-An}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_direct, { 0x5c000100 }
+  },
+/* or.4 (${d-An}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_direct, { 0x5c000100 }
+  },
+/* or.4 (${d-An})${d-i4-4}++,${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_direct, { 0x5a000100 }
+  },
+/* or.4 ${d-i4-4}(${d-An})++,${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_direct, { 0x5a100100 }
+  },
+/* or.4 ${d-direct-addr},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_immediate, { 0x59000000 }
+  },
+/* or.4 #${d-imm8},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_immediate, { 0x58000000 }
+  },
+/* or.4 (${d-An},${d-r}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_immediate, { 0x5b000000 }
+  },
+/* or.4 ${d-imm7-4}(${d-An}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_immediate, { 0x5c000000 }
+  },
+/* or.4 (${d-An}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_immediate, { 0x5c000000 }
+  },
+/* or.4 (${d-An})${d-i4-4}++,#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_immediate, { 0x5a000000 }
+  },
+/* or.4 ${d-i4-4}(${d-An})++,#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_immediate, { 0x5a100000 }
+  },
+/* or.4 ${d-direct-addr},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_with_index_4, { 0x59000300 }
+  },
+/* or.4 #${d-imm8},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_indirect_with_index_4, { 0x58000300 }
+  },
+/* or.4 (${d-An},${d-r}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_indirect_with_index_4, { 0x5b000300 }
+  },
+/* or.4 ${d-imm7-4}(${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_indirect_with_index_4, { 0x5c000300 }
+  },
+/* or.4 (${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_indirect_with_index_4, { 0x5c000300 }
+  },
+/* or.4 (${d-An})${d-i4-4}++,(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_indirect_with_index_4, { 0x5a000300 }
+  },
+/* or.4 ${d-i4-4}(${d-An})++,(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_indirect_with_index_4, { 0x5a100300 }
+  },
+/* or.4 ${d-direct-addr},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_with_offset_4, { 0x59000400 }
+  },
+/* or.4 #${d-imm8},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_indirect_with_offset_4, { 0x58000400 }
+  },
+/* or.4 (${d-An},${d-r}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_indirect_with_offset_4, { 0x5b000400 }
+  },
+/* or.4 ${d-imm7-4}(${d-An}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_indirect_with_offset_4, { 0x5c000400 }
+  },
+/* or.4 (${d-An}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_indirect_with_offset_4, { 0x5c000400 }
+  },
+/* or.4 (${d-An})${d-i4-4}++,${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_indirect_with_offset_4, { 0x5a000400 }
+  },
+/* or.4 ${d-i4-4}(${d-An})++,${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_indirect_with_offset_4, { 0x5a100400 }
+  },
+/* or.4 ${d-direct-addr},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_4, { 0x59000400 }
+  },
+/* or.4 #${d-imm8},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_indirect_4, { 0x58000400 }
+  },
+/* or.4 (${d-An},${d-r}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_indirect_4, { 0x5b000400 }
+  },
+/* or.4 ${d-imm7-4}(${d-An}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_indirect_4, { 0x5c000400 }
+  },
+/* or.4 (${d-An}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_indirect_4, { 0x5c000400 }
+  },
+/* or.4 (${d-An})${d-i4-4}++,(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_indirect_4, { 0x5a000400 }
+  },
+/* or.4 ${d-i4-4}(${d-An})++,(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_indirect_4, { 0x5a100400 }
+  },
+/* or.4 ${d-direct-addr},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_with_post_increment_4, { 0x59000200 }
+  },
+/* or.4 #${d-imm8},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_indirect_with_post_increment_4, { 0x58000200 }
+  },
+/* or.4 (${d-An},${d-r}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_indirect_with_post_increment_4, { 0x5b000200 }
+  },
+/* or.4 ${d-imm7-4}(${d-An}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_indirect_with_post_increment_4, { 0x5c000200 }
+  },
+/* or.4 (${d-An}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_indirect_with_post_increment_4, { 0x5c000200 }
+  },
+/* or.4 (${d-An})${d-i4-4}++,(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_indirect_with_post_increment_4, { 0x5a000200 }
+  },
+/* or.4 ${d-i4-4}(${d-An})++,(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_indirect_with_post_increment_4, { 0x5a100200 }
+  },
+/* or.4 ${d-direct-addr},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_with_pre_increment_4, { 0x59000210 }
+  },
+/* or.4 #${d-imm8},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_indirect_with_pre_increment_4, { 0x58000210 }
+  },
+/* or.4 (${d-An},${d-r}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_indirect_with_pre_increment_4, { 0x5b000210 }
+  },
+/* or.4 ${d-imm7-4}(${d-An}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_indirect_with_pre_increment_4, { 0x5c000210 }
+  },
+/* or.4 (${d-An}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_indirect_with_pre_increment_4, { 0x5c000210 }
+  },
+/* or.4 (${d-An})${d-i4-4}++,${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_indirect_with_pre_increment_4, { 0x5a000210 }
+  },
+/* or.4 ${d-i4-4}(${d-An})++,${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_indirect_with_pre_increment_4, { 0x5a100210 }
+  },
+/* or.2 ${d-direct-addr},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_direct, { 0x51000100 }
+  },
+/* or.2 #${d-imm8},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_immediate_2_s1_direct, { 0x50000100 }
+  },
+/* or.2 (${d-An},${d-r}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_index_2_s1_direct, { 0x53000100 }
+  },
+/* or.2 ${d-imm7-2}(${d-An}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_offset_2_s1_direct, { 0x54000100 }
+  },
+/* or.2 (${d-An}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_2_s1_direct, { 0x54000100 }
+  },
+/* or.2 (${d-An})${d-i4-2}++,${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_post_increment_2_s1_direct, { 0x52000100 }
+  },
+/* or.2 ${d-i4-2}(${d-An})++,${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_pre_increment_2_s1_direct, { 0x52100100 }
+  },
+/* or.2 ${d-direct-addr},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_immediate, { 0x51000000 }
+  },
+/* or.2 #${d-imm8},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_immediate_2_s1_immediate, { 0x50000000 }
+  },
+/* or.2 (${d-An},${d-r}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_index_2_s1_immediate, { 0x53000000 }
+  },
+/* or.2 ${d-imm7-2}(${d-An}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_offset_2_s1_immediate, { 0x54000000 }
+  },
+/* or.2 (${d-An}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_2_s1_immediate, { 0x54000000 }
+  },
+/* or.2 (${d-An})${d-i4-2}++,#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_post_increment_2_s1_immediate, { 0x52000000 }
+  },
+/* or.2 ${d-i4-2}(${d-An})++,#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_pre_increment_2_s1_immediate, { 0x52100000 }
+  },
+/* or.2 ${d-direct-addr},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_direct_s1_indirect_with_index_2, { 0x51000300 }
+  },
+/* or.2 #${d-imm8},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_immediate_2_s1_indirect_with_index_2, { 0x50000300 }
+  },
+/* or.2 (${d-An},${d-r}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_index_2_s1_indirect_with_index_2, { 0x53000300 }
+  },
+/* or.2 ${d-imm7-2}(${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_offset_2_s1_indirect_with_index_2, { 0x54000300 }
+  },
+/* or.2 (${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_2_s1_indirect_with_index_2, { 0x54000300 }
+  },
+/* or.2 (${d-An})${d-i4-2}++,(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_post_increment_2_s1_indirect_with_index_2, { 0x52000300 }
+  },
+/* or.2 ${d-i4-2}(${d-An})++,(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_pre_increment_2_s1_indirect_with_index_2, { 0x52100300 }
+  },
+/* or.2 ${d-direct-addr},${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_direct_s1_indirect_with_offset_2, { 0x51000400 }
+  },
+/* or.2 #${d-imm8},${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_immediate_2_s1_indirect_with_offset_2, { 0x50000400 }
+  },
+/* or.2 (${d-An},${d-r}),${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_index_2_s1_indirect_with_offset_2, { 0x53000400 }
+  },
+/* or.2 ${d-imm7-2}(${d-An}),${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_offset_2_s1_indirect_with_offset_2, { 0x54000400 }
+  },
+/* or.2 (${d-An}),${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_2_s1_indirect_with_offset_2, { 0x54000400 }
+  },
+/* or.2 (${d-An})${d-i4-2}++,${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_post_increment_2_s1_indirect_with_offset_2, { 0x52000400 }
+  },
+/* or.2 ${d-i4-2}(${d-An})++,${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_pre_increment_2_s1_indirect_with_offset_2, { 0x52100400 }
+  },
+/* or.2 ${d-direct-addr},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_direct_s1_indirect_2, { 0x51000400 }
+  },
+/* or.2 #${d-imm8},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_immediate_2_s1_indirect_2, { 0x50000400 }
+  },
+/* or.2 (${d-An},${d-r}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_index_2_s1_indirect_2, { 0x53000400 }
+  },
+/* or.2 ${d-imm7-2}(${d-An}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_offset_2_s1_indirect_2, { 0x54000400 }
+  },
+/* or.2 (${d-An}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_2_s1_indirect_2, { 0x54000400 }
+  },
+/* or.2 (${d-An})${d-i4-2}++,(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_post_increment_2_s1_indirect_2, { 0x52000400 }
+  },
+/* or.2 ${d-i4-2}(${d-An})++,(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_pre_increment_2_s1_indirect_2, { 0x52100400 }
+  },
+/* or.2 ${d-direct-addr},(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_direct_s1_indirect_with_post_increment_2, { 0x51000200 }
+  },
+/* or.2 #${d-imm8},(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_immediate_2_s1_indirect_with_post_increment_2, { 0x50000200 }
+  },
+/* or.2 (${d-An},${d-r}),(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_index_2_s1_indirect_with_post_increment_2, { 0x53000200 }
+  },
+/* or.2 ${d-imm7-2}(${d-An}),(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_offset_2_s1_indirect_with_post_increment_2, { 0x54000200 }
+  },
+/* or.2 (${d-An}),(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_2_s1_indirect_with_post_increment_2, { 0x54000200 }
+  },
+/* or.2 (${d-An})${d-i4-2}++,(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_post_increment_2_s1_indirect_with_post_increment_2, { 0x52000200 }
+  },
+/* or.2 ${d-i4-2}(${d-An})++,(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_pre_increment_2_s1_indirect_with_post_increment_2, { 0x52100200 }
+  },
+/* or.2 ${d-direct-addr},${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_direct_s1_indirect_with_pre_increment_2, { 0x51000210 }
+  },
+/* or.2 #${d-imm8},${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_immediate_2_s1_indirect_with_pre_increment_2, { 0x50000210 }
+  },
+/* or.2 (${d-An},${d-r}),${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_index_2_s1_indirect_with_pre_increment_2, { 0x53000210 }
+  },
+/* or.2 ${d-imm7-2}(${d-An}),${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_offset_2_s1_indirect_with_pre_increment_2, { 0x54000210 }
+  },
+/* or.2 (${d-An}),${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_2_s1_indirect_with_pre_increment_2, { 0x54000210 }
+  },
+/* or.2 (${d-An})${d-i4-2}++,${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_post_increment_2_s1_indirect_with_pre_increment_2, { 0x52000210 }
+  },
+/* or.2 ${d-i4-2}(${d-An})++,${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_pre_increment_2_s1_indirect_with_pre_increment_2, { 0x52100210 }
+  },
+/* and.4 ${d-direct-addr},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_direct, { 0x49000100 }
+  },
+/* and.4 #${d-imm8},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_direct, { 0x48000100 }
+  },
+/* and.4 (${d-An},${d-r}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_direct, { 0x4b000100 }
+  },
+/* and.4 ${d-imm7-4}(${d-An}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_direct, { 0x4c000100 }
+  },
+/* and.4 (${d-An}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_direct, { 0x4c000100 }
+  },
+/* and.4 (${d-An})${d-i4-4}++,${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_direct, { 0x4a000100 }
+  },
+/* and.4 ${d-i4-4}(${d-An})++,${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_direct, { 0x4a100100 }
+  },
+/* and.4 ${d-direct-addr},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_immediate, { 0x49000000 }
+  },
+/* and.4 #${d-imm8},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_immediate, { 0x48000000 }
+  },
+/* and.4 (${d-An},${d-r}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_immediate, { 0x4b000000 }
+  },
+/* and.4 ${d-imm7-4}(${d-An}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_immediate, { 0x4c000000 }
+  },
+/* and.4 (${d-An}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_immediate, { 0x4c000000 }
+  },
+/* and.4 (${d-An})${d-i4-4}++,#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_immediate, { 0x4a000000 }
+  },
+/* and.4 ${d-i4-4}(${d-An})++,#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_immediate, { 0x4a100000 }
+  },
+/* and.4 ${d-direct-addr},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_with_index_4, { 0x49000300 }
+  },
+/* and.4 #${d-imm8},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_indirect_with_index_4, { 0x48000300 }
+  },
+/* and.4 (${d-An},${d-r}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_indirect_with_index_4, { 0x4b000300 }
+  },
+/* and.4 ${d-imm7-4}(${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_indirect_with_index_4, { 0x4c000300 }
+  },
+/* and.4 (${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_indirect_with_index_4, { 0x4c000300 }
+  },
+/* and.4 (${d-An})${d-i4-4}++,(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_indirect_with_index_4, { 0x4a000300 }
+  },
+/* and.4 ${d-i4-4}(${d-An})++,(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_indirect_with_index_4, { 0x4a100300 }
+  },
+/* and.4 ${d-direct-addr},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_with_offset_4, { 0x49000400 }
+  },
+/* and.4 #${d-imm8},${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_indirect_with_offset_4, { 0x48000400 }
+  },
+/* and.4 (${d-An},${d-r}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_indirect_with_offset_4, { 0x4b000400 }
+  },
+/* and.4 ${d-imm7-4}(${d-An}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_indirect_with_offset_4, { 0x4c000400 }
+  },
+/* and.4 (${d-An}),${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_indirect_with_offset_4, { 0x4c000400 }
+  },
+/* and.4 (${d-An})${d-i4-4}++,${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_indirect_with_offset_4, { 0x4a000400 }
+  },
+/* and.4 ${d-i4-4}(${d-An})++,${s1-imm7-4}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_IMM7_4), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_indirect_with_offset_4, { 0x4a100400 }
+  },
+/* and.4 ${d-direct-addr},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_4, { 0x49000400 }
+  },
+/* and.4 #${d-imm8},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_indirect_4, { 0x48000400 }
+  },
+/* and.4 (${d-An},${d-r}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_indirect_4, { 0x4b000400 }
+  },
+/* and.4 ${d-imm7-4}(${d-An}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_indirect_4, { 0x4c000400 }
+  },
+/* and.4 (${d-An}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_indirect_4, { 0x4c000400 }
+  },
+/* and.4 (${d-An})${d-i4-4}++,(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_indirect_4, { 0x4a000400 }
+  },
+/* and.4 ${d-i4-4}(${d-An})++,(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_indirect_4, { 0x4a100400 }
+  },
+/* and.4 ${d-direct-addr},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_with_post_increment_4, { 0x49000200 }
+  },
+/* and.4 #${d-imm8},(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_indirect_with_post_increment_4, { 0x48000200 }
+  },
+/* and.4 (${d-An},${d-r}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_indirect_with_post_increment_4, { 0x4b000200 }
+  },
+/* and.4 ${d-imm7-4}(${d-An}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_indirect_with_post_increment_4, { 0x4c000200 }
+  },
+/* and.4 (${d-An}),(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_indirect_with_post_increment_4, { 0x4c000200 }
+  },
+/* and.4 (${d-An})${d-i4-4}++,(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_indirect_with_post_increment_4, { 0x4a000200 }
+  },
+/* and.4 ${d-i4-4}(${d-An})++,(${s1-An})${s1-i4-4}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_4), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_indirect_with_post_increment_4, { 0x4a100200 }
+  },
+/* and.4 ${d-direct-addr},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_indirect_with_pre_increment_4, { 0x49000210 }
+  },
+/* and.4 #${d-imm8},${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_immediate_4_s1_indirect_with_pre_increment_4, { 0x48000210 }
+  },
+/* and.4 (${d-An},${d-r}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_index_4_s1_indirect_with_pre_increment_4, { 0x4b000210 }
+  },
+/* and.4 ${d-imm7-4}(${d-An}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_4), '(', OP (D_AN), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_offset_4_s1_indirect_with_pre_increment_4, { 0x4c000210 }
+  },
+/* and.4 (${d-An}),${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_4_s1_indirect_with_pre_increment_4, { 0x4c000210 }
+  },
+/* and.4 (${d-An})${d-i4-4}++,${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_4), '+', '+', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_post_increment_4_s1_indirect_with_pre_increment_4, { 0x4a000210 }
+  },
+/* and.4 ${d-i4-4}(${d-An})++,${s1-i4-4}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_4), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_I4_4), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_pxvi_s_d_indirect_with_pre_increment_4_s1_indirect_with_pre_increment_4, { 0x4a100210 }
+  },
+/* and.2 ${d-direct-addr},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_direct, { 0x41000100 }
+  },
+/* and.2 #${d-imm8},${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_immediate_2_s1_direct, { 0x40000100 }
+  },
+/* and.2 (${d-An},${d-r}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_index_2_s1_direct, { 0x43000100 }
+  },
+/* and.2 ${d-imm7-2}(${d-An}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_offset_2_s1_direct, { 0x44000100 }
+  },
+/* and.2 (${d-An}),${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_2_s1_direct, { 0x44000100 }
+  },
+/* and.2 (${d-An})${d-i4-2}++,${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_post_increment_2_s1_direct, { 0x42000100 }
+  },
+/* and.2 ${d-i4-2}(${d-An})++,${s1-direct-addr},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_DIRECT_ADDR), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_pre_increment_2_s1_direct, { 0x42100100 }
+  },
+/* and.2 ${d-direct-addr},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_direct_s1_immediate, { 0x41000000 }
+  },
+/* and.2 #${d-imm8},#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_immediate_2_s1_immediate, { 0x40000000 }
+  },
+/* and.2 (${d-An},${d-r}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_index_2_s1_immediate, { 0x43000000 }
+  },
+/* and.2 ${d-imm7-2}(${d-An}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_offset_2_s1_immediate, { 0x44000000 }
+  },
+/* and.2 (${d-An}),#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_2_s1_immediate, { 0x44000000 }
+  },
+/* and.2 (${d-An})${d-i4-2}++,#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_post_increment_2_s1_immediate, { 0x42000000 }
+  },
+/* and.2 ${d-i4-2}(${d-An})++,#${s1-imm8},${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', '#', OP (S1_IMM8), ',', OP (S2), 0 } },
+    & ifmt_pxadds_u_d_indirect_with_pre_increment_2_s1_immediate, { 0x42100000 }
+  },
+/* and.2 ${d-direct-addr},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_direct_s1_indirect_with_index_2, { 0x41000300 }
+  },
+/* and.2 #${d-imm8},(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_immediate_2_s1_indirect_with_index_2, { 0x40000300 }
+  },
+/* and.2 (${d-An},${d-r}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_index_2_s1_indirect_with_index_2, { 0x43000300 }
+  },
+/* and.2 ${d-imm7-2}(${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_offset_2_s1_indirect_with_index_2, { 0x44000300 }
+  },
+/* and.2 (${d-An}),(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_2_s1_indirect_with_index_2, { 0x44000300 }
+  },
+/* and.2 (${d-An})${d-i4-2}++,(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_post_increment_2_s1_indirect_with_index_2, { 0x42000300 }
+  },
+/* and.2 ${d-i4-2}(${d-An})++,(${s1-An},${s1-r}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ',', OP (S1_R), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_pre_increment_2_s1_indirect_with_index_2, { 0x42100300 }
+  },
+/* and.2 ${d-direct-addr},${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_direct_s1_indirect_with_offset_2, { 0x41000400 }
+  },
+/* and.2 #${d-imm8},${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_immediate_2_s1_indirect_with_offset_2, { 0x40000400 }
+  },
+/* and.2 (${d-An},${d-r}),${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_index_2_s1_indirect_with_offset_2, { 0x43000400 }
+  },
+/* and.2 ${d-imm7-2}(${d-An}),${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_offset_2_s1_indirect_with_offset_2, { 0x44000400 }
+  },
+/* and.2 (${d-An}),${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_2_s1_indirect_with_offset_2, { 0x44000400 }
+  },
+/* and.2 (${d-An})${d-i4-2}++,${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_post_increment_2_s1_indirect_with_offset_2, { 0x42000400 }
+  },
+/* and.2 ${d-i4-2}(${d-An})++,${s1-imm7-2}(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_IMM7_2), '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_pre_increment_2_s1_indirect_with_offset_2, { 0x42100400 }
+  },
+/* and.2 ${d-direct-addr},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_direct_s1_indirect_2, { 0x41000400 }
+  },
+/* and.2 #${d-imm8},(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_immediate_2_s1_indirect_2, { 0x40000400 }
+  },
+/* and.2 (${d-An},${d-r}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_index_2_s1_indirect_2, { 0x43000400 }
+  },
+/* and.2 ${d-imm7-2}(${d-An}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_offset_2_s1_indirect_2, { 0x44000400 }
+  },
+/* and.2 (${d-An}),(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_2_s1_indirect_2, { 0x44000400 }
+  },
+/* and.2 (${d-An})${d-i4-2}++,(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_post_increment_2_s1_indirect_2, { 0x42000400 }
+  },
+/* and.2 ${d-i4-2}(${d-An})++,(${s1-An}),${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_pre_increment_2_s1_indirect_2, { 0x42100400 }
+  },
+/* and.2 ${d-direct-addr},(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_direct_s1_indirect_with_post_increment_2, { 0x41000200 }
+  },
+/* and.2 #${d-imm8},(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_immediate_2_s1_indirect_with_post_increment_2, { 0x40000200 }
+  },
+/* and.2 (${d-An},${d-r}),(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_index_2_s1_indirect_with_post_increment_2, { 0x43000200 }
+  },
+/* and.2 ${d-imm7-2}(${d-An}),(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_offset_2_s1_indirect_with_post_increment_2, { 0x44000200 }
+  },
+/* and.2 (${d-An}),(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_2_s1_indirect_with_post_increment_2, { 0x44000200 }
+  },
+/* and.2 (${d-An})${d-i4-2}++,(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_post_increment_2_s1_indirect_with_post_increment_2, { 0x42000200 }
+  },
+/* and.2 ${d-i4-2}(${d-An})++,(${s1-An})${s1-i4-2}++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', '(', OP (S1_AN), ')', OP (S1_I4_2), '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_pre_increment_2_s1_indirect_with_post_increment_2, { 0x42100200 }
+  },
+/* and.2 ${d-direct-addr},${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_DIRECT_ADDR), ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_direct_s1_indirect_with_pre_increment_2, { 0x41000210 }
+  },
+/* and.2 #${d-imm8},${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '#', OP (D_IMM8), ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_immediate_2_s1_indirect_with_pre_increment_2, { 0x40000210 }
+  },
+/* and.2 (${d-An},${d-r}),${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ',', OP (D_R), ')', ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_index_2_s1_indirect_with_pre_increment_2, { 0x43000210 }
+  },
+/* and.2 ${d-imm7-2}(${d-An}),${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_IMM7_2), '(', OP (D_AN), ')', ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_offset_2_s1_indirect_with_pre_increment_2, { 0x44000210 }
+  },
+/* and.2 (${d-An}),${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_2_s1_indirect_with_pre_increment_2, { 0x44000210 }
+  },
+/* and.2 (${d-An})${d-i4-2}++,${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', '(', OP (D_AN), ')', OP (D_I4_2), '+', '+', ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_post_increment_2_s1_indirect_with_pre_increment_2, { 0x42000210 }
+  },
+/* and.2 ${d-i4-2}(${d-An})++,${s1-i4-2}(${s1-An})++,${s2} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (D_I4_2), '(', OP (D_AN), ')', '+', '+', ',', OP (S1_I4_2), '(', OP (S1_AN), ')', '+', '+', ',', OP (S2), 0 } },
+    & ifmt_sub_2_d_indirect_with_pre_increment_2_s1_indirect_with_pre_increment_2, { 0x42100210 }
+  },
+/* moveai ${An},#${imm25} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (AN), ',', '#', OP (IMM25), 0 } },
+    & ifmt_moveai_v5, { 0xe0000000 }
+  },
+/* moveaih ${An},#${imm24} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (AN), ',', '#', OP (IMM24), 0 } },
+    & ifmt_moveaih, { 0xe8000000 }
+  },
+/* moveai ${An},#${imm24} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (AN), ',', '#', OP (IMM24), 0 } },
+    & ifmt_moveaih, { 0xe0000000 }
+  },
+/* __nop__ */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, 0 } },
+    & ifmt_nop_insn, { 0xc8000000 }
+  },
+/* jmp${cc}${C}${P} $offset21 */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, OP (CC), OP (C), OP (P), ' ', OP (OFFSET21), 0 } },
+    & ifmt_jmpcc, { 0xd0000000 }
+  },
+/* call $An,$offset24 */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (AN), ',', OP (OFFSET24), 0 } },
+    & ifmt_call, { 0xd8000000 }
+  },
+/* calli ${An},${offset16}(${Am}) */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (AN), ',', OP (OFFSET16), '(', OP (AM), ')', 0 } },
+    & ifmt_calli, { 0xf0000000 }
+  },
+/* suspend */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, 0 } },
+    & ifmt_suspend, { 0x800 }
+  },
+/* __clracc__ ${dsp-destA} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), 0 } },
+    & ifmt_dsp_clracc, { 0x36400100 }
+  },
+/* __unused__00_11 */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, 0 } },
+    & ifmt_unused_00_11, { 0x8800 }
+  },
+/* __unused__00_16 */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, 0 } },
+    & ifmt_unused_00_11, { 0xb000 }
+  },
+/* __unused__02_04 */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, 0 } },
+    & ifmt_unused_02_04, { 0x10800000 }
+  },
+/* __unused__02_07 */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, 0 } },
+    & ifmt_unused_02_04, { 0x10e00000 }
+  },
+/* __unused__02_0D */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, 0 } },
+    & ifmt_unused_02_04, { 0x11a00000 }
+  },
+/* __unused__02_0E */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, 0 } },
+    & ifmt_unused_02_04, { 0x11c00000 }
+  },
+/* __unused__02_0F */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, 0 } },
+    & ifmt_unused_02_04, { 0x11e00000 }
+  },
+/* __unused__02_17 */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, 0 } },
+    & ifmt_unused_02_04, { 0x12e00000 }
+  },
+/* __unused__02_19 */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, 0 } },
+    & ifmt_unused_02_04, { 0x13200000 }
+  },
+/* __unused__02_1B */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, 0 } },
+    & ifmt_unused_02_04, { 0x13600000 }
+  },
+/* __unused__02_1D */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, 0 } },
+    & ifmt_unused_02_04, { 0x13a00000 }
+  },
+/* __unused__01 */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, 0 } },
+    & ifmt_unused_01, { 0x8000000 }
+  },
+/* __unused__03 */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, 0 } },
+    & ifmt_unused_01, { 0x18000000 }
+  },
+/* __unused__07 */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, 0 } },
+    & ifmt_unused_01, { 0x38000000 }
+  },
+/* __unused__17 */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, 0 } },
+    & ifmt_unused_01, { 0xb8000000 }
+  },
+/* __unused__1F */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, 0 } },
+    & ifmt_unused_01, { 0xf8000000 }
+  },
+/* __unused__DSP_0c */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, 0 } },
+    & ifmt_unused_DSP_0c, { 0x31800000 }
+  },
+/* __unused__DSP_0d */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, 0 } },
+    & ifmt_unused_DSP_0c, { 0x31a00000 }
+  },
+/* __unused__DSP_0e */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, 0 } },
+    & ifmt_unused_DSP_0c, { 0x31c00000 }
+  },
+/* __unused__DSP_0f */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, 0 } },
+    & ifmt_unused_DSP_0c, { 0x31e00000 }
+  },
+/* __unused__DSP_14 */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, 0 } },
+    & ifmt_unused_DSP_0c, { 0x32800000 }
+  },
+/* __unused__DSP_15 */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, 0 } },
+    & ifmt_unused_DSP_0c, { 0x32a00000 }
+  },
+/* __unused__DSP_16 */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, 0 } },
+    & ifmt_unused_DSP_0c, { 0x32c00000 }
+  },
+/* __unused__DSP_17 */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, 0 } },
+    & ifmt_unused_DSP_0c, { 0x32e00000 }
+  },
+/* __unused__DSP_18 */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, 0 } },
+    & ifmt_unused_DSP_0c, { 0x33000000 }
+  },
+/* __unused__DSP_19 */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, 0 } },
+    & ifmt_unused_DSP_0c, { 0x33200000 }
+  },
+/* __unused__DSP_1a */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, 0 } },
+    & ifmt_unused_DSP_0c, { 0x33400000 }
+  },
+/* __unused__DSP_1b */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, 0 } },
+    & ifmt_unused_DSP_0c, { 0x33600000 }
+  },
+/* __unused__DSP_1c */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, 0 } },
+    & ifmt_unused_DSP_0c, { 0x33800000 }
+  },
+/* __unused__DSP_1d */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, 0 } },
+    & ifmt_unused_DSP_0c, { 0x33a00000 }
+  },
+/* __unused__DSP_1e */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, 0 } },
+    & ifmt_unused_DSP_0c, { 0x33c00000 }
+  },
+/* __unused__DSP_1f */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, 0 } },
+    & ifmt_unused_DSP_0c, { 0x33e00000 }
+  },
+};
+
+#undef A
+#undef OPERAND
+#undef MNEM
+#undef OP
+
+/* Formats for ALIAS macro-insns.  */
+
+#if defined (__STDC__) || defined (ALMOST_STDC) || defined (HAVE_STRINGIZE)
+#define F(f) & ubicom32_cgen_ifld_table[UBICOM32_##f]
+#else
+#define F(f) & ubicom32_cgen_ifld_table[UBICOM32_/**/f]
+#endif
+static const CGEN_IFMT ifmt_nop ATTRIBUTE_UNUSED = {
+  32, 32, 0xffffffff, { { F (F_OP1) }, { F (F_D) }, { F (F_IMM16_2) }, { 0 } }
+};
+
+static const CGEN_IFMT ifmt_dsp_clracc_macro ATTRIBUTE_UNUSED = {
+  32, 32, 0xfffeffff, { { F (F_OP1) }, { F (F_OPEXT) }, { F (F_DSP_DESTA) }, { F (F_S1) }, { F (F_DSP_S2_SEL) }, { F (F_BIT5) }, { F (F_DSP_T) }, { F (F_DSP_C) }, { F (F_BIT26) }, { F (F_DSP_R) }, { 0 } }
+};
+
+#undef F
+
+/* Each non-simple macro entry points to an array of expansion possibilities.  */
+
+#if defined (__STDC__) || defined (ALMOST_STDC) || defined (HAVE_STRINGIZE)
+#define A(a) (1 << CGEN_INSN_##a)
+#else
+#define A(a) (1 << CGEN_INSN_/**/a)
+#endif
+#if defined (__STDC__) || defined (ALMOST_STDC) || defined (HAVE_STRINGIZE)
+#define OPERAND(op) UBICOM32_OPERAND_##op
+#else
+#define OPERAND(op) UBICOM32_OPERAND_/**/op
+#endif
+#define MNEM CGEN_SYNTAX_MNEMONIC /* syntax value for mnemonic */
+#define OP(field) CGEN_SYNTAX_MAKE_FIELD (OPERAND (field))
+
+/* The macro instruction table.  */
+
+static const CGEN_IBASE ubicom32_cgen_macro_insn_table[] =
+{
+/* nop */
+  {
+    -1, "nop", "nop", 32,
+    { 0|A(ALIAS), { { { (1<<MACH_BASE), 0 } } } }
+  },
+/* clracc ${dsp-destA} */
+  {
+    -1, "dsp-clracc-macro", "clracc", 32,
+    { 0|A(ALIAS), { { { (1<<MACH_UBICOM32DSP)|(1<<MACH_UBICOM32_VER4), 0 } } } }
+  },
+};
+
+/* The macro instruction opcode table.  */
+
+static const CGEN_OPCODE ubicom32_cgen_macro_insn_opcode_table[] =
+{
+/* nop */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, 0 } },
+    & ifmt_nop, { 0xc8000000 }
+  },
+/* clracc ${dsp-destA} */
+  {
+    { 0, 0, 0, 0 },
+    { { MNEM, ' ', OP (DSP_DESTA), 0 } },
+    & ifmt_dsp_clracc_macro, { 0x36400100 }
+  },
+};
+
+#undef A
+#undef OPERAND
+#undef MNEM
+#undef OP
+
+#ifndef CGEN_ASM_HASH_P
+#define CGEN_ASM_HASH_P(insn) 1
+#endif
+
+#ifndef CGEN_DIS_HASH_P
+#define CGEN_DIS_HASH_P(insn) 1
+#endif
+
+/* Return non-zero if INSN is to be added to the hash table.
+   Targets are free to override CGEN_{ASM,DIS}_HASH_P in the .opc file.  */
+
+static int
+asm_hash_insn_p (insn)
+     const CGEN_INSN *insn ATTRIBUTE_UNUSED;
+{
+  return CGEN_ASM_HASH_P (insn);
+}
+
+static int
+dis_hash_insn_p (insn)
+     const CGEN_INSN *insn;
+{
+  /* If building the hash table and the NO-DIS attribute is present,
+     ignore.  */
+  if (CGEN_INSN_ATTR_VALUE (insn, CGEN_INSN_NO_DIS))
+    return 0;
+  return CGEN_DIS_HASH_P (insn);
+}
+
+#ifndef CGEN_ASM_HASH
+#define CGEN_ASM_HASH_SIZE 127
+#ifdef CGEN_MNEMONIC_OPERANDS
+#define CGEN_ASM_HASH(mnem) (*(unsigned char *) (mnem) % CGEN_ASM_HASH_SIZE)
+#else
+#define CGEN_ASM_HASH(mnem) (*(unsigned char *) (mnem) % CGEN_ASM_HASH_SIZE) /*FIXME*/
+#endif
+#endif
+
+/* It doesn't make much sense to provide a default here,
+   but while this is under development we do.
+   BUFFER is a pointer to the bytes of the insn, target order.
+   VALUE is the first base_insn_bitsize bits as an int in host order.  */
+
+#ifndef CGEN_DIS_HASH
+#define CGEN_DIS_HASH_SIZE 256
+#define CGEN_DIS_HASH(buf, value) (*(unsigned char *) (buf))
+#endif
+
+/* The result is the hash value of the insn.
+   Targets are free to override CGEN_{ASM,DIS}_HASH in the .opc file.  */
+
+static unsigned int
+asm_hash_insn (mnem)
+     const char * mnem;
+{
+  return CGEN_ASM_HASH (mnem);
+}
+
+/* BUF is a pointer to the bytes of the insn, target order.
+   VALUE is the first base_insn_bitsize bits as an int in host order.  */
+
+static unsigned int
+dis_hash_insn (buf, value)
+     const char * buf ATTRIBUTE_UNUSED;
+     CGEN_INSN_INT value ATTRIBUTE_UNUSED;
+{
+  return CGEN_DIS_HASH (buf, value);
+}
+
+/* Set the recorded length of the insn in the CGEN_FIELDS struct.  */
+
+static void
+set_fields_bitsize (CGEN_FIELDS *fields, int size)
+{
+  CGEN_FIELDS_BITSIZE (fields) = size;
+}
+
+/* Function to call before using the operand instance table.
+   This plugs the opcode entries and macro instructions into the cpu table.  */
+
+void
+ubicom32_cgen_init_opcode_table (CGEN_CPU_DESC cd)
+{
+  int i;
+  int num_macros = (sizeof (ubicom32_cgen_macro_insn_table) /
+		    sizeof (ubicom32_cgen_macro_insn_table[0]));
+  const CGEN_IBASE *ib = & ubicom32_cgen_macro_insn_table[0];
+  const CGEN_OPCODE *oc = & ubicom32_cgen_macro_insn_opcode_table[0];
+  CGEN_INSN *insns = xmalloc (num_macros * sizeof (CGEN_INSN));
+
+  memset (insns, 0, num_macros * sizeof (CGEN_INSN));
+  for (i = 0; i < num_macros; ++i)
+    {
+      insns[i].base = &ib[i];
+      insns[i].opcode = &oc[i];
+      ubicom32_cgen_build_insn_regex (& insns[i]);
+    }
+  cd->macro_insn_table.init_entries = insns;
+  cd->macro_insn_table.entry_size = sizeof (CGEN_IBASE);
+  cd->macro_insn_table.num_init_entries = num_macros;
+
+  oc = & ubicom32_cgen_insn_opcode_table[0];
+  insns = (CGEN_INSN *) cd->insn_table.init_entries;
+  for (i = 0; i < MAX_INSNS; ++i)
+    {
+      insns[i].opcode = &oc[i];
+      ubicom32_cgen_build_insn_regex (& insns[i]);
+    }
+
+  cd->sizeof_fields = sizeof (CGEN_FIELDS);
+  cd->set_fields_bitsize = set_fields_bitsize;
+
+  cd->asm_hash_p = asm_hash_insn_p;
+  cd->asm_hash = asm_hash_insn;
+  cd->asm_hash_size = CGEN_ASM_HASH_SIZE;
+
+  cd->dis_hash_p = dis_hash_insn_p;
+  cd->dis_hash = dis_hash_insn;
+  cd->dis_hash_size = CGEN_DIS_HASH_SIZE;
+}
--- /dev/null
+++ b/opcodes/ubicom32-opc.h
@@ -0,0 +1,923 @@
+/* Instruction opcode header for ubicom32.
+
+THIS FILE IS MACHINE GENERATED WITH CGEN.
+
+Copyright 1996-2007 Free Software Foundation, Inc.
+
+This file is part of the GNU Binutils and/or GDB, the GNU debugger.
+
+   This file is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 3, or (at your option)
+   any later version.
+
+   It is distributed in the hope that it will be useful, but WITHOUT
+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
+   License for more details.
+
+   You should have received a copy of the GNU General Public License along
+   with this program; if not, write to the Free Software Foundation, Inc.,
+   51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.
+
+*/
+
+#ifndef UBICOM32_OPC_H
+#define UBICOM32_OPC_H
+
+/* -- opc.h */
+
+/* Check applicability of instructions against machines.  */
+#define CGEN_VALIDATE_INSN_SUPPORTED
+extern int ubicom32_cgen_insn_supported
+  PARAMS ((CGEN_CPU_DESC, const CGEN_INSN *));
+
+/* Allows reason codes to be output when assembler errors occur.  */
+#define CGEN_VERBOSE_ASSEMBLER_ERRORS
+
+/* Override disassembly hashing */
+
+#define CGEN_DIS_HASH_SIZE 32
+#define CGEN_DIS_HASH(buf,value) ubicom32_dis_hash(buf,value)
+
+#define CGEN_ASM_HASH_SIZE 509
+#define CGEN_ASM_HASH(insn) ubicom32_asm_hash(insn)
+
+extern unsigned int ubicom32_dis_hash (const char *buf, CGEN_INSN_INT value);
+extern unsigned int ubicom32_asm_hash (const char *insn);
+
+/* Structure used to map between directly addressable registers and
+   their human-readable names.  Used by both the assembler and the
+   disassembler.
+*/
+struct ubicom32_cgen_data_space_map {
+	long address;
+	char *name;
+        int  type;
+};
+
+extern struct ubicom32_cgen_data_space_map ubicom32_cgen_data_space_map_mars[];
+extern struct ubicom32_cgen_data_space_map ubicom32_cgen_data_space_map_mercury[];
+
+#define A0_ADDRESS 0x80
+#define A1_ADDRESS (A0_ADDRESS + 4)
+#define A2_ADDRESS (A0_ADDRESS + 8)
+#define A3_ADDRESS (A0_ADDRESS + 12)
+#define A4_ADDRESS (A0_ADDRESS + 16)
+#define A5_ADDRESS (A0_ADDRESS + 20)
+#define A6_ADDRESS (A0_ADDRESS + 24)
+#define A7_ADDRESS (A0_ADDRESS + 28)
+
+/* XXX */
+typedef unsigned char UQI;
+
+
+/* -- opc.c */
+/* Enum declaration for ubicom32 instruction types.  */
+typedef enum cgen_insn_type {
+  UBICOM32_INSN_INVALID, UBICOM32_INSN_DSP_MSUB_2_S1_DIRECT_DSP_SRC2_DATA_REG_ADDSUB2, UBICOM32_INSN_DSP_MSUB_2_S1_IMMEDIATE_DSP_SRC2_DATA_REG_ADDSUB2, UBICOM32_INSN_DSP_MSUB_2_S1_INDIRECT_WITH_INDEX_2_DSP_SRC2_DATA_REG_ADDSUB2
+ , UBICOM32_INSN_DSP_MSUB_2_S1_INDIRECT_WITH_OFFSET_2_DSP_SRC2_DATA_REG_ADDSUB2, UBICOM32_INSN_DSP_MSUB_2_S1_INDIRECT_2_DSP_SRC2_DATA_REG_ADDSUB2, UBICOM32_INSN_DSP_MSUB_2_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_SRC2_DATA_REG_ADDSUB2, UBICOM32_INSN_DSP_MSUB_2_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_SRC2_DATA_REG_ADDSUB2
+ , UBICOM32_INSN_DSP_MSUB_2_S1_DIRECT_DSP_SRC2_REG_ACC_REG_ADDSUB, UBICOM32_INSN_DSP_MSUB_2_S1_IMMEDIATE_DSP_SRC2_REG_ACC_REG_ADDSUB, UBICOM32_INSN_DSP_MSUB_2_S1_INDIRECT_WITH_INDEX_2_DSP_SRC2_REG_ACC_REG_ADDSUB, UBICOM32_INSN_DSP_MSUB_2_S1_INDIRECT_WITH_OFFSET_2_DSP_SRC2_REG_ACC_REG_ADDSUB
+ , UBICOM32_INSN_DSP_MSUB_2_S1_INDIRECT_2_DSP_SRC2_REG_ACC_REG_ADDSUB, UBICOM32_INSN_DSP_MSUB_2_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_SRC2_REG_ACC_REG_ADDSUB, UBICOM32_INSN_DSP_MSUB_2_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_SRC2_REG_ACC_REG_ADDSUB, UBICOM32_INSN_DSP_MSUB_2_S1_DIRECT_DSP_IMM_BIT5_ADDSUB2
+ , UBICOM32_INSN_DSP_MSUB_2_S1_IMMEDIATE_DSP_IMM_BIT5_ADDSUB2, UBICOM32_INSN_DSP_MSUB_2_S1_INDIRECT_WITH_INDEX_2_DSP_IMM_BIT5_ADDSUB2, UBICOM32_INSN_DSP_MSUB_2_S1_INDIRECT_WITH_OFFSET_2_DSP_IMM_BIT5_ADDSUB2, UBICOM32_INSN_DSP_MSUB_2_S1_INDIRECT_2_DSP_IMM_BIT5_ADDSUB2
+ , UBICOM32_INSN_DSP_MSUB_2_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_IMM_BIT5_ADDSUB2, UBICOM32_INSN_DSP_MSUB_2_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_IMM_BIT5_ADDSUB2, UBICOM32_INSN_DSP_MSUB_4_S1_DIRECT_DSP_SRC2_DATA_REG_ADDSUB, UBICOM32_INSN_DSP_MSUB_4_S1_IMMEDIATE_DSP_SRC2_DATA_REG_ADDSUB
+ , UBICOM32_INSN_DSP_MSUB_4_S1_INDIRECT_WITH_INDEX_4_DSP_SRC2_DATA_REG_ADDSUB, UBICOM32_INSN_DSP_MSUB_4_S1_INDIRECT_WITH_OFFSET_4_DSP_SRC2_DATA_REG_ADDSUB, UBICOM32_INSN_DSP_MSUB_4_S1_INDIRECT_4_DSP_SRC2_DATA_REG_ADDSUB, UBICOM32_INSN_DSP_MSUB_4_S1_INDIRECT_WITH_POST_INCREMENT_4_DSP_SRC2_DATA_REG_ADDSUB
+ , UBICOM32_INSN_DSP_MSUB_4_S1_INDIRECT_WITH_PRE_INCREMENT_4_DSP_SRC2_DATA_REG_ADDSUB, UBICOM32_INSN_DSP_MSUB_4_S1_DIRECT_DSP_SRC2_REG_ACC_REG_ADDSUB, UBICOM32_INSN_DSP_MSUB_4_S1_IMMEDIATE_DSP_SRC2_REG_ACC_REG_ADDSUB, UBICOM32_INSN_DSP_MSUB_4_S1_INDIRECT_WITH_INDEX_4_DSP_SRC2_REG_ACC_REG_ADDSUB
+ , UBICOM32_INSN_DSP_MSUB_4_S1_INDIRECT_WITH_OFFSET_4_DSP_SRC2_REG_ACC_REG_ADDSUB, UBICOM32_INSN_DSP_MSUB_4_S1_INDIRECT_4_DSP_SRC2_REG_ACC_REG_ADDSUB, UBICOM32_INSN_DSP_MSUB_4_S1_INDIRECT_WITH_POST_INCREMENT_4_DSP_SRC2_REG_ACC_REG_ADDSUB, UBICOM32_INSN_DSP_MSUB_4_S1_INDIRECT_WITH_PRE_INCREMENT_4_DSP_SRC2_REG_ACC_REG_ADDSUB
+ , UBICOM32_INSN_DSP_MSUB_4_S1_DIRECT_DSP_IMM_BIT5_ADDSUB, UBICOM32_INSN_DSP_MSUB_4_S1_IMMEDIATE_DSP_IMM_BIT5_ADDSUB, UBICOM32_INSN_DSP_MSUB_4_S1_INDIRECT_WITH_INDEX_4_DSP_IMM_BIT5_ADDSUB, UBICOM32_INSN_DSP_MSUB_4_S1_INDIRECT_WITH_OFFSET_4_DSP_IMM_BIT5_ADDSUB
+ , UBICOM32_INSN_DSP_MSUB_4_S1_INDIRECT_4_DSP_IMM_BIT5_ADDSUB, UBICOM32_INSN_DSP_MSUB_4_S1_INDIRECT_WITH_POST_INCREMENT_4_DSP_IMM_BIT5_ADDSUB, UBICOM32_INSN_DSP_MSUB_4_S1_INDIRECT_WITH_PRE_INCREMENT_4_DSP_IMM_BIT5_ADDSUB, UBICOM32_INSN_DSP_MADD_2_S1_DIRECT_DSP_SRC2_DATA_REG_ADDSUB2
+ , UBICOM32_INSN_DSP_MADD_2_S1_IMMEDIATE_DSP_SRC2_DATA_REG_ADDSUB2, UBICOM32_INSN_DSP_MADD_2_S1_INDIRECT_WITH_INDEX_2_DSP_SRC2_DATA_REG_ADDSUB2, UBICOM32_INSN_DSP_MADD_2_S1_INDIRECT_WITH_OFFSET_2_DSP_SRC2_DATA_REG_ADDSUB2, UBICOM32_INSN_DSP_MADD_2_S1_INDIRECT_2_DSP_SRC2_DATA_REG_ADDSUB2
+ , UBICOM32_INSN_DSP_MADD_2_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_SRC2_DATA_REG_ADDSUB2, UBICOM32_INSN_DSP_MADD_2_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_SRC2_DATA_REG_ADDSUB2, UBICOM32_INSN_DSP_MADD_2_S1_DIRECT_DSP_SRC2_REG_ACC_REG_ADDSUB, UBICOM32_INSN_DSP_MADD_2_S1_IMMEDIATE_DSP_SRC2_REG_ACC_REG_ADDSUB
+ , UBICOM32_INSN_DSP_MADD_2_S1_INDIRECT_WITH_INDEX_2_DSP_SRC2_REG_ACC_REG_ADDSUB, UBICOM32_INSN_DSP_MADD_2_S1_INDIRECT_WITH_OFFSET_2_DSP_SRC2_REG_ACC_REG_ADDSUB, UBICOM32_INSN_DSP_MADD_2_S1_INDIRECT_2_DSP_SRC2_REG_ACC_REG_ADDSUB, UBICOM32_INSN_DSP_MADD_2_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_SRC2_REG_ACC_REG_ADDSUB
+ , UBICOM32_INSN_DSP_MADD_2_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_SRC2_REG_ACC_REG_ADDSUB, UBICOM32_INSN_DSP_MADD_2_S1_DIRECT_DSP_IMM_BIT5_ADDSUB2, UBICOM32_INSN_DSP_MADD_2_S1_IMMEDIATE_DSP_IMM_BIT5_ADDSUB2, UBICOM32_INSN_DSP_MADD_2_S1_INDIRECT_WITH_INDEX_2_DSP_IMM_BIT5_ADDSUB2
+ , UBICOM32_INSN_DSP_MADD_2_S1_INDIRECT_WITH_OFFSET_2_DSP_IMM_BIT5_ADDSUB2, UBICOM32_INSN_DSP_MADD_2_S1_INDIRECT_2_DSP_IMM_BIT5_ADDSUB2, UBICOM32_INSN_DSP_MADD_2_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_IMM_BIT5_ADDSUB2, UBICOM32_INSN_DSP_MADD_2_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_IMM_BIT5_ADDSUB2
+ , UBICOM32_INSN_DSP_MADD_4_S1_DIRECT_DSP_SRC2_DATA_REG_ADDSUB, UBICOM32_INSN_DSP_MADD_4_S1_IMMEDIATE_DSP_SRC2_DATA_REG_ADDSUB, UBICOM32_INSN_DSP_MADD_4_S1_INDIRECT_WITH_INDEX_4_DSP_SRC2_DATA_REG_ADDSUB, UBICOM32_INSN_DSP_MADD_4_S1_INDIRECT_WITH_OFFSET_4_DSP_SRC2_DATA_REG_ADDSUB
+ , UBICOM32_INSN_DSP_MADD_4_S1_INDIRECT_4_DSP_SRC2_DATA_REG_ADDSUB, UBICOM32_INSN_DSP_MADD_4_S1_INDIRECT_WITH_POST_INCREMENT_4_DSP_SRC2_DATA_REG_ADDSUB, UBICOM32_INSN_DSP_MADD_4_S1_INDIRECT_WITH_PRE_INCREMENT_4_DSP_SRC2_DATA_REG_ADDSUB, UBICOM32_INSN_DSP_MADD_4_S1_DIRECT_DSP_SRC2_REG_ACC_REG_ADDSUB
+ , UBICOM32_INSN_DSP_MADD_4_S1_IMMEDIATE_DSP_SRC2_REG_ACC_REG_ADDSUB, UBICOM32_INSN_DSP_MADD_4_S1_INDIRECT_WITH_INDEX_4_DSP_SRC2_REG_ACC_REG_ADDSUB, UBICOM32_INSN_DSP_MADD_4_S1_INDIRECT_WITH_OFFSET_4_DSP_SRC2_REG_ACC_REG_ADDSUB, UBICOM32_INSN_DSP_MADD_4_S1_INDIRECT_4_DSP_SRC2_REG_ACC_REG_ADDSUB
+ , UBICOM32_INSN_DSP_MADD_4_S1_INDIRECT_WITH_POST_INCREMENT_4_DSP_SRC2_REG_ACC_REG_ADDSUB, UBICOM32_INSN_DSP_MADD_4_S1_INDIRECT_WITH_PRE_INCREMENT_4_DSP_SRC2_REG_ACC_REG_ADDSUB, UBICOM32_INSN_DSP_MADD_4_S1_DIRECT_DSP_IMM_BIT5_ADDSUB, UBICOM32_INSN_DSP_MADD_4_S1_IMMEDIATE_DSP_IMM_BIT5_ADDSUB
+ , UBICOM32_INSN_DSP_MADD_4_S1_INDIRECT_WITH_INDEX_4_DSP_IMM_BIT5_ADDSUB, UBICOM32_INSN_DSP_MADD_4_S1_INDIRECT_WITH_OFFSET_4_DSP_IMM_BIT5_ADDSUB, UBICOM32_INSN_DSP_MADD_4_S1_INDIRECT_4_DSP_IMM_BIT5_ADDSUB, UBICOM32_INSN_DSP_MADD_4_S1_INDIRECT_WITH_POST_INCREMENT_4_DSP_IMM_BIT5_ADDSUB
+ , UBICOM32_INSN_DSP_MADD_4_S1_INDIRECT_WITH_PRE_INCREMENT_4_DSP_IMM_BIT5_ADDSUB, UBICOM32_INSN_DSP_MSUF_S1_DIRECT_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MSUF_S1_IMMEDIATE_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MSUF_S1_INDIRECT_WITH_INDEX_2_DSP_SRC2_DATA_REG
+ , UBICOM32_INSN_DSP_MSUF_S1_INDIRECT_WITH_OFFSET_2_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MSUF_S1_INDIRECT_2_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MSUF_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MSUF_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_SRC2_DATA_REG
+ , UBICOM32_INSN_DSP_MSUF_S1_DIRECT_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MSUF_S1_IMMEDIATE_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MSUF_S1_INDIRECT_WITH_INDEX_2_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MSUF_S1_INDIRECT_WITH_OFFSET_2_DSP_SRC2_REG_ACC_REG_MUL
+ , UBICOM32_INSN_DSP_MSUF_S1_INDIRECT_2_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MSUF_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MSUF_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MSUF_S1_DIRECT_DSP_IMM_BIT5
+ , UBICOM32_INSN_DSP_MSUF_S1_IMMEDIATE_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MSUF_S1_INDIRECT_WITH_INDEX_2_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MSUF_S1_INDIRECT_WITH_OFFSET_2_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MSUF_S1_INDIRECT_2_DSP_IMM_BIT5
+ , UBICOM32_INSN_DSP_MSUF_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MSUF_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MACUS_S1_DIRECT_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MACUS_S1_IMMEDIATE_DSP_SRC2_DATA_REG
+ , UBICOM32_INSN_DSP_MACUS_S1_INDIRECT_WITH_INDEX_2_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MACUS_S1_INDIRECT_WITH_OFFSET_2_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MACUS_S1_INDIRECT_2_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MACUS_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_SRC2_DATA_REG
+ , UBICOM32_INSN_DSP_MACUS_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MACUS_S1_DIRECT_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MACUS_S1_IMMEDIATE_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MACUS_S1_INDIRECT_WITH_INDEX_2_DSP_SRC2_REG_ACC_REG_MUL
+ , UBICOM32_INSN_DSP_MACUS_S1_INDIRECT_WITH_OFFSET_2_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MACUS_S1_INDIRECT_2_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MACUS_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MACUS_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_SRC2_REG_ACC_REG_MUL
+ , UBICOM32_INSN_DSP_MACUS_S1_DIRECT_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MACUS_S1_IMMEDIATE_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MACUS_S1_INDIRECT_WITH_INDEX_2_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MACUS_S1_INDIRECT_WITH_OFFSET_2_DSP_IMM_BIT5
+ , UBICOM32_INSN_DSP_MACUS_S1_INDIRECT_2_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MACUS_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MACUS_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MACF_S1_DIRECT_DSP_SRC2_DATA_REG
+ , UBICOM32_INSN_DSP_MACF_S1_IMMEDIATE_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MACF_S1_INDIRECT_WITH_INDEX_2_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MACF_S1_INDIRECT_WITH_OFFSET_2_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MACF_S1_INDIRECT_2_DSP_SRC2_DATA_REG
+ , UBICOM32_INSN_DSP_MACF_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MACF_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MACF_S1_DIRECT_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MACF_S1_IMMEDIATE_DSP_SRC2_REG_ACC_REG_MUL
+ , UBICOM32_INSN_DSP_MACF_S1_INDIRECT_WITH_INDEX_2_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MACF_S1_INDIRECT_WITH_OFFSET_2_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MACF_S1_INDIRECT_2_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MACF_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_SRC2_REG_ACC_REG_MUL
+ , UBICOM32_INSN_DSP_MACF_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MACF_S1_DIRECT_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MACF_S1_IMMEDIATE_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MACF_S1_INDIRECT_WITH_INDEX_2_DSP_IMM_BIT5
+ , UBICOM32_INSN_DSP_MACF_S1_INDIRECT_WITH_OFFSET_2_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MACF_S1_INDIRECT_2_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MACF_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MACF_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_IMM_BIT5
+ , UBICOM32_INSN_DSP_MULF_S1_DIRECT_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MULF_S1_IMMEDIATE_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MULF_S1_INDIRECT_WITH_INDEX_2_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MULF_S1_INDIRECT_WITH_OFFSET_2_DSP_SRC2_DATA_REG
+ , UBICOM32_INSN_DSP_MULF_S1_INDIRECT_2_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MULF_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MULF_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MULF_S1_DIRECT_DSP_SRC2_REG_ACC_REG_MUL
+ , UBICOM32_INSN_DSP_MULF_S1_IMMEDIATE_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MULF_S1_INDIRECT_WITH_INDEX_2_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MULF_S1_INDIRECT_WITH_OFFSET_2_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MULF_S1_INDIRECT_2_DSP_SRC2_REG_ACC_REG_MUL
+ , UBICOM32_INSN_DSP_MULF_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MULF_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MULF_S1_DIRECT_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MULF_S1_IMMEDIATE_DSP_IMM_BIT5
+ , UBICOM32_INSN_DSP_MULF_S1_INDIRECT_WITH_INDEX_2_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MULF_S1_INDIRECT_WITH_OFFSET_2_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MULF_S1_INDIRECT_2_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MULF_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_IMM_BIT5
+ , UBICOM32_INSN_DSP_MULF_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MACU_S1_DIRECT_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MACU_S1_IMMEDIATE_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MACU_S1_INDIRECT_WITH_INDEX_2_DSP_SRC2_DATA_REG
+ , UBICOM32_INSN_DSP_MACU_S1_INDIRECT_WITH_OFFSET_2_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MACU_S1_INDIRECT_2_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MACU_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MACU_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_SRC2_DATA_REG
+ , UBICOM32_INSN_DSP_MACU_S1_DIRECT_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MACU_S1_IMMEDIATE_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MACU_S1_INDIRECT_WITH_INDEX_2_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MACU_S1_INDIRECT_WITH_OFFSET_2_DSP_SRC2_REG_ACC_REG_MUL
+ , UBICOM32_INSN_DSP_MACU_S1_INDIRECT_2_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MACU_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MACU_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MACU_S1_DIRECT_DSP_IMM_BIT5
+ , UBICOM32_INSN_DSP_MACU_S1_IMMEDIATE_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MACU_S1_INDIRECT_WITH_INDEX_2_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MACU_S1_INDIRECT_WITH_OFFSET_2_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MACU_S1_INDIRECT_2_DSP_IMM_BIT5
+ , UBICOM32_INSN_DSP_MACU_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MACU_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MACU_4_S1_DIRECT_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MACU_4_S1_IMMEDIATE_DSP_SRC2_DATA_REG
+ , UBICOM32_INSN_DSP_MACU_4_S1_INDIRECT_WITH_INDEX_4_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MACU_4_S1_INDIRECT_WITH_OFFSET_4_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MACU_4_S1_INDIRECT_4_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MACU_4_S1_INDIRECT_WITH_POST_INCREMENT_4_DSP_SRC2_DATA_REG
+ , UBICOM32_INSN_DSP_MACU_4_S1_INDIRECT_WITH_PRE_INCREMENT_4_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MACU_4_S1_DIRECT_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MACU_4_S1_IMMEDIATE_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MACU_4_S1_INDIRECT_WITH_INDEX_4_DSP_SRC2_REG_ACC_REG_MUL
+ , UBICOM32_INSN_DSP_MACU_4_S1_INDIRECT_WITH_OFFSET_4_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MACU_4_S1_INDIRECT_4_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MACU_4_S1_INDIRECT_WITH_POST_INCREMENT_4_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MACU_4_S1_INDIRECT_WITH_PRE_INCREMENT_4_DSP_SRC2_REG_ACC_REG_MUL
+ , UBICOM32_INSN_DSP_MACU_4_S1_DIRECT_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MACU_4_S1_IMMEDIATE_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MACU_4_S1_INDIRECT_WITH_INDEX_4_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MACU_4_S1_INDIRECT_WITH_OFFSET_4_DSP_IMM_BIT5
+ , UBICOM32_INSN_DSP_MACU_4_S1_INDIRECT_4_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MACU_4_S1_INDIRECT_WITH_POST_INCREMENT_4_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MACU_4_S1_INDIRECT_WITH_PRE_INCREMENT_4_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MULU_4_S1_DIRECT_DSP_SRC2_DATA_REG
+ , UBICOM32_INSN_DSP_MULU_4_S1_IMMEDIATE_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MULU_4_S1_INDIRECT_WITH_INDEX_4_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MULU_4_S1_INDIRECT_WITH_OFFSET_4_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MULU_4_S1_INDIRECT_4_DSP_SRC2_DATA_REG
+ , UBICOM32_INSN_DSP_MULU_4_S1_INDIRECT_WITH_POST_INCREMENT_4_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MULU_4_S1_INDIRECT_WITH_PRE_INCREMENT_4_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MULU_4_S1_DIRECT_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MULU_4_S1_IMMEDIATE_DSP_SRC2_REG_ACC_REG_MUL
+ , UBICOM32_INSN_DSP_MULU_4_S1_INDIRECT_WITH_INDEX_4_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MULU_4_S1_INDIRECT_WITH_OFFSET_4_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MULU_4_S1_INDIRECT_4_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MULU_4_S1_INDIRECT_WITH_POST_INCREMENT_4_DSP_SRC2_REG_ACC_REG_MUL
+ , UBICOM32_INSN_DSP_MULU_4_S1_INDIRECT_WITH_PRE_INCREMENT_4_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MULU_4_S1_DIRECT_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MULU_4_S1_IMMEDIATE_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MULU_4_S1_INDIRECT_WITH_INDEX_4_DSP_IMM_BIT5
+ , UBICOM32_INSN_DSP_MULU_4_S1_INDIRECT_WITH_OFFSET_4_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MULU_4_S1_INDIRECT_4_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MULU_4_S1_INDIRECT_WITH_POST_INCREMENT_4_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MULU_4_S1_INDIRECT_WITH_PRE_INCREMENT_4_DSP_IMM_BIT5
+ , UBICOM32_INSN_DSP_MULU_S1_DIRECT_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MULU_S1_IMMEDIATE_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MULU_S1_INDIRECT_WITH_INDEX_2_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MULU_S1_INDIRECT_WITH_OFFSET_2_DSP_SRC2_DATA_REG
+ , UBICOM32_INSN_DSP_MULU_S1_INDIRECT_2_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MULU_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MULU_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MULU_S1_DIRECT_DSP_SRC2_REG_ACC_REG_MUL
+ , UBICOM32_INSN_DSP_MULU_S1_IMMEDIATE_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MULU_S1_INDIRECT_WITH_INDEX_2_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MULU_S1_INDIRECT_WITH_OFFSET_2_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MULU_S1_INDIRECT_2_DSP_SRC2_REG_ACC_REG_MUL
+ , UBICOM32_INSN_DSP_MULU_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MULU_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MULU_S1_DIRECT_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MULU_S1_IMMEDIATE_DSP_IMM_BIT5
+ , UBICOM32_INSN_DSP_MULU_S1_INDIRECT_WITH_INDEX_2_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MULU_S1_INDIRECT_WITH_OFFSET_2_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MULU_S1_INDIRECT_2_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MULU_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_IMM_BIT5
+ , UBICOM32_INSN_DSP_MULU_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MACS_S1_DIRECT_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MACS_S1_IMMEDIATE_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MACS_S1_INDIRECT_WITH_INDEX_2_DSP_SRC2_DATA_REG
+ , UBICOM32_INSN_DSP_MACS_S1_INDIRECT_WITH_OFFSET_2_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MACS_S1_INDIRECT_2_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MACS_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MACS_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_SRC2_DATA_REG
+ , UBICOM32_INSN_DSP_MACS_S1_DIRECT_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MACS_S1_IMMEDIATE_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MACS_S1_INDIRECT_WITH_INDEX_2_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MACS_S1_INDIRECT_WITH_OFFSET_2_DSP_SRC2_REG_ACC_REG_MUL
+ , UBICOM32_INSN_DSP_MACS_S1_INDIRECT_2_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MACS_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MACS_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MACS_S1_DIRECT_DSP_IMM_BIT5
+ , UBICOM32_INSN_DSP_MACS_S1_IMMEDIATE_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MACS_S1_INDIRECT_WITH_INDEX_2_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MACS_S1_INDIRECT_WITH_OFFSET_2_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MACS_S1_INDIRECT_2_DSP_IMM_BIT5
+ , UBICOM32_INSN_DSP_MACS_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MACS_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MACS_4_S1_DIRECT_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MACS_4_S1_IMMEDIATE_DSP_SRC2_DATA_REG
+ , UBICOM32_INSN_DSP_MACS_4_S1_INDIRECT_WITH_INDEX_4_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MACS_4_S1_INDIRECT_WITH_OFFSET_4_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MACS_4_S1_INDIRECT_4_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MACS_4_S1_INDIRECT_WITH_POST_INCREMENT_4_DSP_SRC2_DATA_REG
+ , UBICOM32_INSN_DSP_MACS_4_S1_INDIRECT_WITH_PRE_INCREMENT_4_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MACS_4_S1_DIRECT_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MACS_4_S1_IMMEDIATE_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MACS_4_S1_INDIRECT_WITH_INDEX_4_DSP_SRC2_REG_ACC_REG_MUL
+ , UBICOM32_INSN_DSP_MACS_4_S1_INDIRECT_WITH_OFFSET_4_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MACS_4_S1_INDIRECT_4_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MACS_4_S1_INDIRECT_WITH_POST_INCREMENT_4_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MACS_4_S1_INDIRECT_WITH_PRE_INCREMENT_4_DSP_SRC2_REG_ACC_REG_MUL
+ , UBICOM32_INSN_DSP_MACS_4_S1_DIRECT_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MACS_4_S1_IMMEDIATE_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MACS_4_S1_INDIRECT_WITH_INDEX_4_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MACS_4_S1_INDIRECT_WITH_OFFSET_4_DSP_IMM_BIT5
+ , UBICOM32_INSN_DSP_MACS_4_S1_INDIRECT_4_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MACS_4_S1_INDIRECT_WITH_POST_INCREMENT_4_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MACS_4_S1_INDIRECT_WITH_PRE_INCREMENT_4_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MULS_4_S1_DIRECT_DSP_SRC2_DATA_REG
+ , UBICOM32_INSN_DSP_MULS_4_S1_IMMEDIATE_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MULS_4_S1_INDIRECT_WITH_INDEX_4_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MULS_4_S1_INDIRECT_WITH_OFFSET_4_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MULS_4_S1_INDIRECT_4_DSP_SRC2_DATA_REG
+ , UBICOM32_INSN_DSP_MULS_4_S1_INDIRECT_WITH_POST_INCREMENT_4_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MULS_4_S1_INDIRECT_WITH_PRE_INCREMENT_4_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MULS_4_S1_DIRECT_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MULS_4_S1_IMMEDIATE_DSP_SRC2_REG_ACC_REG_MUL
+ , UBICOM32_INSN_DSP_MULS_4_S1_INDIRECT_WITH_INDEX_4_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MULS_4_S1_INDIRECT_WITH_OFFSET_4_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MULS_4_S1_INDIRECT_4_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MULS_4_S1_INDIRECT_WITH_POST_INCREMENT_4_DSP_SRC2_REG_ACC_REG_MUL
+ , UBICOM32_INSN_DSP_MULS_4_S1_INDIRECT_WITH_PRE_INCREMENT_4_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MULS_4_S1_DIRECT_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MULS_4_S1_IMMEDIATE_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MULS_4_S1_INDIRECT_WITH_INDEX_4_DSP_IMM_BIT5
+ , UBICOM32_INSN_DSP_MULS_4_S1_INDIRECT_WITH_OFFSET_4_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MULS_4_S1_INDIRECT_4_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MULS_4_S1_INDIRECT_WITH_POST_INCREMENT_4_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MULS_4_S1_INDIRECT_WITH_PRE_INCREMENT_4_DSP_IMM_BIT5
+ , UBICOM32_INSN_DSP_MULS_S1_DIRECT_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MULS_S1_IMMEDIATE_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MULS_S1_INDIRECT_WITH_INDEX_2_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MULS_S1_INDIRECT_WITH_OFFSET_2_DSP_SRC2_DATA_REG
+ , UBICOM32_INSN_DSP_MULS_S1_INDIRECT_2_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MULS_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MULS_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_SRC2_DATA_REG, UBICOM32_INSN_DSP_MULS_S1_DIRECT_DSP_SRC2_REG_ACC_REG_MUL
+ , UBICOM32_INSN_DSP_MULS_S1_IMMEDIATE_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MULS_S1_INDIRECT_WITH_INDEX_2_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MULS_S1_INDIRECT_WITH_OFFSET_2_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MULS_S1_INDIRECT_2_DSP_SRC2_REG_ACC_REG_MUL
+ , UBICOM32_INSN_DSP_MULS_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MULS_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_SRC2_REG_ACC_REG_MUL, UBICOM32_INSN_DSP_MULS_S1_DIRECT_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MULS_S1_IMMEDIATE_DSP_IMM_BIT5
+ , UBICOM32_INSN_DSP_MULS_S1_INDIRECT_WITH_INDEX_2_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MULS_S1_INDIRECT_WITH_OFFSET_2_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MULS_S1_INDIRECT_2_DSP_IMM_BIT5, UBICOM32_INSN_DSP_MULS_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_IMM_BIT5
+ , UBICOM32_INSN_DSP_MULS_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_IMM_BIT5, UBICOM32_INSN_SYSRET_D_DIRECT_S1_DIRECT, UBICOM32_INSN_SYSRET_D_IMMEDIATE_4_S1_DIRECT, UBICOM32_INSN_SYSRET_D_INDIRECT_WITH_INDEX_4_S1_DIRECT
+ , UBICOM32_INSN_SYSRET_D_INDIRECT_WITH_OFFSET_4_S1_DIRECT, UBICOM32_INSN_SYSRET_D_INDIRECT_4_S1_DIRECT, UBICOM32_INSN_SYSRET_D_INDIRECT_WITH_POST_INCREMENT_4_S1_DIRECT, UBICOM32_INSN_SYSRET_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_DIRECT
+ , UBICOM32_INSN_SYSRET_D_DIRECT_S1_IMMEDIATE, UBICOM32_INSN_SYSRET_D_IMMEDIATE_4_S1_IMMEDIATE, UBICOM32_INSN_SYSRET_D_INDIRECT_WITH_INDEX_4_S1_IMMEDIATE, UBICOM32_INSN_SYSRET_D_INDIRECT_WITH_OFFSET_4_S1_IMMEDIATE
+ , UBICOM32_INSN_SYSRET_D_INDIRECT_4_S1_IMMEDIATE, UBICOM32_INSN_SYSRET_D_INDIRECT_WITH_POST_INCREMENT_4_S1_IMMEDIATE, UBICOM32_INSN_SYSRET_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_IMMEDIATE, UBICOM32_INSN_SYSRET_D_DIRECT_S1_INDIRECT_WITH_INDEX_4
+ , UBICOM32_INSN_SYSRET_D_IMMEDIATE_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_SYSRET_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_SYSRET_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_SYSRET_D_INDIRECT_4_S1_INDIRECT_WITH_INDEX_4
+ , UBICOM32_INSN_SYSRET_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_SYSRET_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_SYSRET_D_DIRECT_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_SYSRET_D_IMMEDIATE_4_S1_INDIRECT_WITH_OFFSET_4
+ , UBICOM32_INSN_SYSRET_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_SYSRET_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_SYSRET_D_INDIRECT_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_SYSRET_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4
+ , UBICOM32_INSN_SYSRET_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_SYSRET_D_DIRECT_S1_INDIRECT_4, UBICOM32_INSN_SYSRET_D_IMMEDIATE_4_S1_INDIRECT_4, UBICOM32_INSN_SYSRET_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_4
+ , UBICOM32_INSN_SYSRET_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_4, UBICOM32_INSN_SYSRET_D_INDIRECT_4_S1_INDIRECT_4, UBICOM32_INSN_SYSRET_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_4, UBICOM32_INSN_SYSRET_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_4
+ , UBICOM32_INSN_SYSRET_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_SYSRET_D_IMMEDIATE_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_SYSRET_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_SYSRET_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_POST_INCREMENT_4
+ , UBICOM32_INSN_SYSRET_D_INDIRECT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_SYSRET_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_SYSRET_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_SYSRET_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_4
+ , UBICOM32_INSN_SYSRET_D_IMMEDIATE_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_SYSRET_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_SYSRET_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_SYSRET_D_INDIRECT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4
+ , UBICOM32_INSN_SYSRET_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_SYSRET_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_SYSCALL_D_DIRECT, UBICOM32_INSN_SYSCALL_D_IMMEDIATE_4
+ , UBICOM32_INSN_SYSCALL_D_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_SYSCALL_D_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_SYSCALL_D_INDIRECT_4, UBICOM32_INSN_SYSCALL_D_INDIRECT_WITH_POST_INCREMENT_4
+ , UBICOM32_INSN_SYSCALL_D_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_PREFETCH_D_DIRECT, UBICOM32_INSN_PREFETCH_D_IMMEDIATE_4, UBICOM32_INSN_PREFETCH_D_INDIRECT_WITH_INDEX_4
+ , UBICOM32_INSN_PREFETCH_D_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_PREFETCH_D_INDIRECT_4, UBICOM32_INSN_PREFETCH_D_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_PREFETCH_D_INDIRECT_WITH_PRE_INCREMENT_4
+ , UBICOM32_INSN_SYNC_D_DIRECT, UBICOM32_INSN_SYNC_D_IMMEDIATE_4, UBICOM32_INSN_SYNC_D_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_SYNC_D_INDIRECT_WITH_OFFSET_4
+ , UBICOM32_INSN_SYNC_D_INDIRECT_4, UBICOM32_INSN_SYNC_D_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_SYNC_D_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_FLUSH_D_DIRECT
+ , UBICOM32_INSN_FLUSH_D_IMMEDIATE_4, UBICOM32_INSN_FLUSH_D_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_FLUSH_D_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_FLUSH_D_INDIRECT_4
+ , UBICOM32_INSN_FLUSH_D_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_FLUSH_D_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_IREAD_S1_EA_INDIRECT, UBICOM32_INSN_IREAD_S1_EA_INDIRECT_WITH_INDEX_4
+ , UBICOM32_INSN_IREAD_S1_EA_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_IREAD_S1_EA_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_IREAD_S1_EA_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_WITH_INDEX_S1_DIRECT
+ , UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_WITH_OFFSET_S1_DIRECT, UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_S1_DIRECT, UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_WITH_POST_INCREMENT_S1_DIRECT, UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_WITH_PRE_INCREMENT_S1_DIRECT
+ , UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_WITH_INDEX_S1_IMMEDIATE, UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_WITH_OFFSET_S1_IMMEDIATE, UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_S1_IMMEDIATE, UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_WITH_POST_INCREMENT_S1_IMMEDIATE
+ , UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_WITH_PRE_INCREMENT_S1_IMMEDIATE, UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_WITH_INDEX_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_WITH_OFFSET_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_S1_INDIRECT_WITH_INDEX_4
+ , UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_WITH_POST_INCREMENT_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_WITH_PRE_INCREMENT_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_WITH_INDEX_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_WITH_OFFSET_S1_INDIRECT_WITH_OFFSET_4
+ , UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_WITH_POST_INCREMENT_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_WITH_PRE_INCREMENT_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_WITH_INDEX_S1_INDIRECT_4
+ , UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_WITH_OFFSET_S1_INDIRECT_4, UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_S1_INDIRECT_4, UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_WITH_POST_INCREMENT_S1_INDIRECT_4, UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_WITH_PRE_INCREMENT_S1_INDIRECT_4
+ , UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_WITH_INDEX_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_WITH_OFFSET_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_WITH_POST_INCREMENT_S1_INDIRECT_WITH_POST_INCREMENT_4
+ , UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_WITH_PRE_INCREMENT_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_WITH_INDEX_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_WITH_OFFSET_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_4
+ , UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_WITH_POST_INCREMENT_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_IWRITE_D_PEA_INDIRECT_WITH_PRE_INCREMENT_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_TBCLR_D_DIRECT_S1_DIRECT, UBICOM32_INSN_TBCLR_D_IMMEDIATE_4_S1_DIRECT
+ , UBICOM32_INSN_TBCLR_D_INDIRECT_WITH_INDEX_4_S1_DIRECT, UBICOM32_INSN_TBCLR_D_INDIRECT_WITH_OFFSET_4_S1_DIRECT, UBICOM32_INSN_TBCLR_D_INDIRECT_4_S1_DIRECT, UBICOM32_INSN_TBCLR_D_INDIRECT_WITH_POST_INCREMENT_4_S1_DIRECT
+ , UBICOM32_INSN_TBCLR_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_DIRECT, UBICOM32_INSN_TBCLR_D_DIRECT_S1_IMMEDIATE, UBICOM32_INSN_TBCLR_D_IMMEDIATE_4_S1_IMMEDIATE, UBICOM32_INSN_TBCLR_D_INDIRECT_WITH_INDEX_4_S1_IMMEDIATE
+ , UBICOM32_INSN_TBCLR_D_INDIRECT_WITH_OFFSET_4_S1_IMMEDIATE, UBICOM32_INSN_TBCLR_D_INDIRECT_4_S1_IMMEDIATE, UBICOM32_INSN_TBCLR_D_INDIRECT_WITH_POST_INCREMENT_4_S1_IMMEDIATE, UBICOM32_INSN_TBCLR_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_IMMEDIATE
+ , UBICOM32_INSN_TBCLR_D_DIRECT_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_TBCLR_D_IMMEDIATE_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_TBCLR_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_TBCLR_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_INDEX_4
+ , UBICOM32_INSN_TBCLR_D_INDIRECT_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_TBCLR_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_TBCLR_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_TBCLR_D_DIRECT_S1_INDIRECT_WITH_OFFSET_4
+ , UBICOM32_INSN_TBCLR_D_IMMEDIATE_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_TBCLR_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_TBCLR_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_TBCLR_D_INDIRECT_4_S1_INDIRECT_WITH_OFFSET_4
+ , UBICOM32_INSN_TBCLR_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_TBCLR_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_TBCLR_D_DIRECT_S1_INDIRECT_4, UBICOM32_INSN_TBCLR_D_IMMEDIATE_4_S1_INDIRECT_4
+ , UBICOM32_INSN_TBCLR_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_4, UBICOM32_INSN_TBCLR_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_4, UBICOM32_INSN_TBCLR_D_INDIRECT_4_S1_INDIRECT_4, UBICOM32_INSN_TBCLR_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_4
+ , UBICOM32_INSN_TBCLR_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_4, UBICOM32_INSN_TBCLR_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_TBCLR_D_IMMEDIATE_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_TBCLR_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_POST_INCREMENT_4
+ , UBICOM32_INSN_TBCLR_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_TBCLR_D_INDIRECT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_TBCLR_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_TBCLR_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4
+ , UBICOM32_INSN_TBCLR_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_TBCLR_D_IMMEDIATE_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_TBCLR_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_TBCLR_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_PRE_INCREMENT_4
+ , UBICOM32_INSN_TBCLR_D_INDIRECT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_TBCLR_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_TBCLR_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_TBSET_D_DIRECT_S1_DIRECT
+ , UBICOM32_INSN_TBSET_D_IMMEDIATE_4_S1_DIRECT, UBICOM32_INSN_TBSET_D_INDIRECT_WITH_INDEX_4_S1_DIRECT, UBICOM32_INSN_TBSET_D_INDIRECT_WITH_OFFSET_4_S1_DIRECT, UBICOM32_INSN_TBSET_D_INDIRECT_4_S1_DIRECT
+ , UBICOM32_INSN_TBSET_D_INDIRECT_WITH_POST_INCREMENT_4_S1_DIRECT, UBICOM32_INSN_TBSET_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_DIRECT, UBICOM32_INSN_TBSET_D_DIRECT_S1_IMMEDIATE, UBICOM32_INSN_TBSET_D_IMMEDIATE_4_S1_IMMEDIATE
+ , UBICOM32_INSN_TBSET_D_INDIRECT_WITH_INDEX_4_S1_IMMEDIATE, UBICOM32_INSN_TBSET_D_INDIRECT_WITH_OFFSET_4_S1_IMMEDIATE, UBICOM32_INSN_TBSET_D_INDIRECT_4_S1_IMMEDIATE, UBICOM32_INSN_TBSET_D_INDIRECT_WITH_POST_INCREMENT_4_S1_IMMEDIATE
+ , UBICOM32_INSN_TBSET_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_IMMEDIATE, UBICOM32_INSN_TBSET_D_DIRECT_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_TBSET_D_IMMEDIATE_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_TBSET_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_INDEX_4
+ , UBICOM32_INSN_TBSET_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_TBSET_D_INDIRECT_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_TBSET_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_TBSET_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4
+ , UBICOM32_INSN_TBSET_D_DIRECT_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_TBSET_D_IMMEDIATE_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_TBSET_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_TBSET_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_OFFSET_4
+ , UBICOM32_INSN_TBSET_D_INDIRECT_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_TBSET_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_TBSET_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_TBSET_D_DIRECT_S1_INDIRECT_4
+ , UBICOM32_INSN_TBSET_D_IMMEDIATE_4_S1_INDIRECT_4, UBICOM32_INSN_TBSET_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_4, UBICOM32_INSN_TBSET_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_4, UBICOM32_INSN_TBSET_D_INDIRECT_4_S1_INDIRECT_4
+ , UBICOM32_INSN_TBSET_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_4, UBICOM32_INSN_TBSET_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_4, UBICOM32_INSN_TBSET_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_TBSET_D_IMMEDIATE_4_S1_INDIRECT_WITH_POST_INCREMENT_4
+ , UBICOM32_INSN_TBSET_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_TBSET_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_TBSET_D_INDIRECT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_TBSET_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4
+ , UBICOM32_INSN_TBSET_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_TBSET_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_TBSET_D_IMMEDIATE_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_TBSET_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_PRE_INCREMENT_4
+ , UBICOM32_INSN_TBSET_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_TBSET_D_INDIRECT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_TBSET_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_TBSET_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4
+ , UBICOM32_INSN_SETCSR_S1_DIRECT, UBICOM32_INSN_SETCSR_S1_IMMEDIATE, UBICOM32_INSN_SETCSR_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_SETCSR_S1_INDIRECT_WITH_OFFSET_4
+ , UBICOM32_INSN_SETCSR_S1_INDIRECT_4, UBICOM32_INSN_SETCSR_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_SETCSR_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_BKPT_S1_DIRECT
+ , UBICOM32_INSN_BKPT_S1_IMMEDIATE, UBICOM32_INSN_BKPT_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_BKPT_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_BKPT_S1_INDIRECT_4
+ , UBICOM32_INSN_BKPT_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_BKPT_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_RET_S1_DIRECT, UBICOM32_INSN_RET_S1_IMMEDIATE
+ , UBICOM32_INSN_RET_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_RET_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_RET_S1_INDIRECT_4, UBICOM32_INSN_RET_S1_INDIRECT_WITH_POST_INCREMENT_4
+ , UBICOM32_INSN_RET_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_MOVEA_D_DIRECT_S1_DIRECT, UBICOM32_INSN_MOVEA_D_IMMEDIATE_4_S1_DIRECT, UBICOM32_INSN_MOVEA_D_INDIRECT_WITH_INDEX_4_S1_DIRECT
+ , UBICOM32_INSN_MOVEA_D_INDIRECT_WITH_OFFSET_4_S1_DIRECT, UBICOM32_INSN_MOVEA_D_INDIRECT_4_S1_DIRECT, UBICOM32_INSN_MOVEA_D_INDIRECT_WITH_POST_INCREMENT_4_S1_DIRECT, UBICOM32_INSN_MOVEA_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_DIRECT
+ , UBICOM32_INSN_MOVEA_D_DIRECT_S1_IMMEDIATE, UBICOM32_INSN_MOVEA_D_IMMEDIATE_4_S1_IMMEDIATE, UBICOM32_INSN_MOVEA_D_INDIRECT_WITH_INDEX_4_S1_IMMEDIATE, UBICOM32_INSN_MOVEA_D_INDIRECT_WITH_OFFSET_4_S1_IMMEDIATE
+ , UBICOM32_INSN_MOVEA_D_INDIRECT_4_S1_IMMEDIATE, UBICOM32_INSN_MOVEA_D_INDIRECT_WITH_POST_INCREMENT_4_S1_IMMEDIATE, UBICOM32_INSN_MOVEA_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_IMMEDIATE, UBICOM32_INSN_MOVEA_D_DIRECT_S1_INDIRECT_WITH_INDEX_4
+ , UBICOM32_INSN_MOVEA_D_IMMEDIATE_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_MOVEA_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_MOVEA_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_MOVEA_D_INDIRECT_4_S1_INDIRECT_WITH_INDEX_4
+ , UBICOM32_INSN_MOVEA_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_MOVEA_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_MOVEA_D_DIRECT_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_MOVEA_D_IMMEDIATE_4_S1_INDIRECT_WITH_OFFSET_4
+ , UBICOM32_INSN_MOVEA_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_MOVEA_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_MOVEA_D_INDIRECT_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_MOVEA_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4
+ , UBICOM32_INSN_MOVEA_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_MOVEA_D_DIRECT_S1_INDIRECT_4, UBICOM32_INSN_MOVEA_D_IMMEDIATE_4_S1_INDIRECT_4, UBICOM32_INSN_MOVEA_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_4
+ , UBICOM32_INSN_MOVEA_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_4, UBICOM32_INSN_MOVEA_D_INDIRECT_4_S1_INDIRECT_4, UBICOM32_INSN_MOVEA_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_4, UBICOM32_INSN_MOVEA_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_4
+ , UBICOM32_INSN_MOVEA_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_MOVEA_D_IMMEDIATE_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_MOVEA_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_MOVEA_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_POST_INCREMENT_4
+ , UBICOM32_INSN_MOVEA_D_INDIRECT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_MOVEA_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_MOVEA_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_MOVEA_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_4
+ , UBICOM32_INSN_MOVEA_D_IMMEDIATE_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_MOVEA_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_MOVEA_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_MOVEA_D_INDIRECT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4
+ , UBICOM32_INSN_MOVEA_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_MOVEA_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_MOVE_4_D_DIRECT_S1_DIRECT, UBICOM32_INSN_MOVE_4_D_IMMEDIATE_4_S1_DIRECT
+ , UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_INDEX_4_S1_DIRECT, UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_OFFSET_4_S1_DIRECT, UBICOM32_INSN_MOVE_4_D_INDIRECT_4_S1_DIRECT, UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_DIRECT
+ , UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_DIRECT, UBICOM32_INSN_MOVE_4_D_DIRECT_S1_IMMEDIATE, UBICOM32_INSN_MOVE_4_D_IMMEDIATE_4_S1_IMMEDIATE, UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_INDEX_4_S1_IMMEDIATE
+ , UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_OFFSET_4_S1_IMMEDIATE, UBICOM32_INSN_MOVE_4_D_INDIRECT_4_S1_IMMEDIATE, UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_IMMEDIATE, UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_IMMEDIATE
+ , UBICOM32_INSN_MOVE_4_D_DIRECT_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_MOVE_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_INDEX_4
+ , UBICOM32_INSN_MOVE_4_D_INDIRECT_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_MOVE_4_D_DIRECT_S1_INDIRECT_WITH_OFFSET_4
+ , UBICOM32_INSN_MOVE_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_MOVE_4_D_INDIRECT_4_S1_INDIRECT_WITH_OFFSET_4
+ , UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_MOVE_4_D_DIRECT_S1_INDIRECT_4, UBICOM32_INSN_MOVE_4_D_IMMEDIATE_4_S1_INDIRECT_4
+ , UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_4, UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_4, UBICOM32_INSN_MOVE_4_D_INDIRECT_4_S1_INDIRECT_4, UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_4
+ , UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_4, UBICOM32_INSN_MOVE_4_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_MOVE_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_POST_INCREMENT_4
+ , UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_MOVE_4_D_INDIRECT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4
+ , UBICOM32_INSN_MOVE_4_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_MOVE_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_PRE_INCREMENT_4
+ , UBICOM32_INSN_MOVE_4_D_INDIRECT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_MOVE_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_COMPATIBILITY_IREAD_S1_EA_INDIRECT
+ , UBICOM32_INSN_COMPATIBILITY_IREAD_S1_EA_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_COMPATIBILITY_IREAD_S1_EA_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_COMPATIBILITY_IREAD_S1_EA_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_COMPATIBILITY_IREAD_S1_EA_INDIRECT_WITH_OFFSET_4
+ , UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_WITH_INDEX_S1_DIRECT, UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_WITH_OFFSET_S1_DIRECT, UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_S1_DIRECT, UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_WITH_POST_INCREMENT_S1_DIRECT
+ , UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_WITH_PRE_INCREMENT_S1_DIRECT, UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_WITH_INDEX_S1_IMMEDIATE, UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_WITH_OFFSET_S1_IMMEDIATE, UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_S1_IMMEDIATE
+ , UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_WITH_POST_INCREMENT_S1_IMMEDIATE, UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_WITH_PRE_INCREMENT_S1_IMMEDIATE, UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_WITH_INDEX_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_WITH_OFFSET_S1_INDIRECT_WITH_INDEX_4
+ , UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_WITH_POST_INCREMENT_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_WITH_PRE_INCREMENT_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_WITH_INDEX_S1_INDIRECT_WITH_OFFSET_4
+ , UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_WITH_OFFSET_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_WITH_POST_INCREMENT_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_WITH_PRE_INCREMENT_S1_INDIRECT_WITH_OFFSET_4
+ , UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_WITH_INDEX_S1_INDIRECT_4, UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_WITH_OFFSET_S1_INDIRECT_4, UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_S1_INDIRECT_4, UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_WITH_POST_INCREMENT_S1_INDIRECT_4
+ , UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_WITH_PRE_INCREMENT_S1_INDIRECT_4, UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_WITH_INDEX_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_WITH_OFFSET_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_S1_INDIRECT_WITH_POST_INCREMENT_4
+ , UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_WITH_POST_INCREMENT_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_WITH_PRE_INCREMENT_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_WITH_INDEX_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_WITH_OFFSET_S1_INDIRECT_WITH_PRE_INCREMENT_4
+ , UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_WITH_POST_INCREMENT_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_COMPATIBILITY_IWRITE_D_PEA_INDIRECT_WITH_PRE_INCREMENT_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_MOVE_2_D_DIRECT_S1_DIRECT
+ , UBICOM32_INSN_MOVE_2_D_IMMEDIATE_2_S1_DIRECT, UBICOM32_INSN_MOVE_2_D_INDIRECT_WITH_INDEX_2_S1_DIRECT, UBICOM32_INSN_MOVE_2_D_INDIRECT_WITH_OFFSET_2_S1_DIRECT, UBICOM32_INSN_MOVE_2_D_INDIRECT_2_S1_DIRECT
+ , UBICOM32_INSN_MOVE_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_DIRECT, UBICOM32_INSN_MOVE_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_DIRECT, UBICOM32_INSN_MOVE_2_D_DIRECT_S1_IMMEDIATE, UBICOM32_INSN_MOVE_2_D_IMMEDIATE_2_S1_IMMEDIATE
+ , UBICOM32_INSN_MOVE_2_D_INDIRECT_WITH_INDEX_2_S1_IMMEDIATE, UBICOM32_INSN_MOVE_2_D_INDIRECT_WITH_OFFSET_2_S1_IMMEDIATE, UBICOM32_INSN_MOVE_2_D_INDIRECT_2_S1_IMMEDIATE, UBICOM32_INSN_MOVE_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_IMMEDIATE
+ , UBICOM32_INSN_MOVE_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_IMMEDIATE, UBICOM32_INSN_MOVE_2_D_DIRECT_S1_INDIRECT_WITH_INDEX_2, UBICOM32_INSN_MOVE_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_INDEX_2, UBICOM32_INSN_MOVE_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_INDEX_2
+ , UBICOM32_INSN_MOVE_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_INDEX_2, UBICOM32_INSN_MOVE_2_D_INDIRECT_2_S1_INDIRECT_WITH_INDEX_2, UBICOM32_INSN_MOVE_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_INDEX_2, UBICOM32_INSN_MOVE_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_INDEX_2
+ , UBICOM32_INSN_MOVE_2_D_DIRECT_S1_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_MOVE_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_MOVE_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_MOVE_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_OFFSET_2
+ , UBICOM32_INSN_MOVE_2_D_INDIRECT_2_S1_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_MOVE_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_MOVE_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_MOVE_2_D_DIRECT_S1_INDIRECT_2
+ , UBICOM32_INSN_MOVE_2_D_IMMEDIATE_2_S1_INDIRECT_2, UBICOM32_INSN_MOVE_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_2, UBICOM32_INSN_MOVE_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_2, UBICOM32_INSN_MOVE_2_D_INDIRECT_2_S1_INDIRECT_2
+ , UBICOM32_INSN_MOVE_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_2, UBICOM32_INSN_MOVE_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_2, UBICOM32_INSN_MOVE_2_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_INSN_MOVE_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_POST_INCREMENT_2
+ , UBICOM32_INSN_MOVE_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_INSN_MOVE_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_INSN_MOVE_2_D_INDIRECT_2_S1_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_INSN_MOVE_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_POST_INCREMENT_2
+ , UBICOM32_INSN_MOVE_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_INSN_MOVE_2_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_2, UBICOM32_INSN_MOVE_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, UBICOM32_INSN_MOVE_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_PRE_INCREMENT_2
+ , UBICOM32_INSN_MOVE_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, UBICOM32_INSN_MOVE_2_D_INDIRECT_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, UBICOM32_INSN_MOVE_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, UBICOM32_INSN_MOVE_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_PRE_INCREMENT_2
+ , UBICOM32_INSN_MOVE_1_D_DIRECT_S1_DIRECT, UBICOM32_INSN_MOVE_1_D_IMMEDIATE_1_S1_DIRECT, UBICOM32_INSN_MOVE_1_D_INDIRECT_WITH_INDEX_1_S1_DIRECT, UBICOM32_INSN_MOVE_1_D_INDIRECT_WITH_OFFSET_1_S1_DIRECT
+ , UBICOM32_INSN_MOVE_1_D_INDIRECT_1_S1_DIRECT, UBICOM32_INSN_MOVE_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_DIRECT, UBICOM32_INSN_MOVE_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_DIRECT, UBICOM32_INSN_MOVE_1_D_DIRECT_S1_IMMEDIATE
+ , UBICOM32_INSN_MOVE_1_D_IMMEDIATE_1_S1_IMMEDIATE, UBICOM32_INSN_MOVE_1_D_INDIRECT_WITH_INDEX_1_S1_IMMEDIATE, UBICOM32_INSN_MOVE_1_D_INDIRECT_WITH_OFFSET_1_S1_IMMEDIATE, UBICOM32_INSN_MOVE_1_D_INDIRECT_1_S1_IMMEDIATE
+ , UBICOM32_INSN_MOVE_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_IMMEDIATE, UBICOM32_INSN_MOVE_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_IMMEDIATE, UBICOM32_INSN_MOVE_1_D_DIRECT_S1_INDIRECT_WITH_INDEX_1, UBICOM32_INSN_MOVE_1_D_IMMEDIATE_1_S1_INDIRECT_WITH_INDEX_1
+ , UBICOM32_INSN_MOVE_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_WITH_INDEX_1, UBICOM32_INSN_MOVE_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_WITH_INDEX_1, UBICOM32_INSN_MOVE_1_D_INDIRECT_1_S1_INDIRECT_WITH_INDEX_1, UBICOM32_INSN_MOVE_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_WITH_INDEX_1
+ , UBICOM32_INSN_MOVE_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_WITH_INDEX_1, UBICOM32_INSN_MOVE_1_D_DIRECT_S1_INDIRECT_WITH_OFFSET_1, UBICOM32_INSN_MOVE_1_D_IMMEDIATE_1_S1_INDIRECT_WITH_OFFSET_1, UBICOM32_INSN_MOVE_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_WITH_OFFSET_1
+ , UBICOM32_INSN_MOVE_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_WITH_OFFSET_1, UBICOM32_INSN_MOVE_1_D_INDIRECT_1_S1_INDIRECT_WITH_OFFSET_1, UBICOM32_INSN_MOVE_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_WITH_OFFSET_1, UBICOM32_INSN_MOVE_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_WITH_OFFSET_1
+ , UBICOM32_INSN_MOVE_1_D_DIRECT_S1_INDIRECT_1, UBICOM32_INSN_MOVE_1_D_IMMEDIATE_1_S1_INDIRECT_1, UBICOM32_INSN_MOVE_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_1, UBICOM32_INSN_MOVE_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_1
+ , UBICOM32_INSN_MOVE_1_D_INDIRECT_1_S1_INDIRECT_1, UBICOM32_INSN_MOVE_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_1, UBICOM32_INSN_MOVE_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_1, UBICOM32_INSN_MOVE_1_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_1
+ , UBICOM32_INSN_MOVE_1_D_IMMEDIATE_1_S1_INDIRECT_WITH_POST_INCREMENT_1, UBICOM32_INSN_MOVE_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_WITH_POST_INCREMENT_1, UBICOM32_INSN_MOVE_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_WITH_POST_INCREMENT_1, UBICOM32_INSN_MOVE_1_D_INDIRECT_1_S1_INDIRECT_WITH_POST_INCREMENT_1
+ , UBICOM32_INSN_MOVE_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_WITH_POST_INCREMENT_1, UBICOM32_INSN_MOVE_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_WITH_POST_INCREMENT_1, UBICOM32_INSN_MOVE_1_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_1, UBICOM32_INSN_MOVE_1_D_IMMEDIATE_1_S1_INDIRECT_WITH_PRE_INCREMENT_1
+ , UBICOM32_INSN_MOVE_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, UBICOM32_INSN_MOVE_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, UBICOM32_INSN_MOVE_1_D_INDIRECT_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, UBICOM32_INSN_MOVE_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_WITH_PRE_INCREMENT_1
+ , UBICOM32_INSN_MOVE_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, UBICOM32_INSN_EXT_2_D_DIRECT_S1_DIRECT, UBICOM32_INSN_EXT_2_D_IMMEDIATE_2_S1_DIRECT, UBICOM32_INSN_EXT_2_D_INDIRECT_WITH_INDEX_2_S1_DIRECT
+ , UBICOM32_INSN_EXT_2_D_INDIRECT_WITH_OFFSET_2_S1_DIRECT, UBICOM32_INSN_EXT_2_D_INDIRECT_2_S1_DIRECT, UBICOM32_INSN_EXT_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_DIRECT, UBICOM32_INSN_EXT_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_DIRECT
+ , UBICOM32_INSN_EXT_2_D_DIRECT_S1_IMMEDIATE, UBICOM32_INSN_EXT_2_D_IMMEDIATE_2_S1_IMMEDIATE, UBICOM32_INSN_EXT_2_D_INDIRECT_WITH_INDEX_2_S1_IMMEDIATE, UBICOM32_INSN_EXT_2_D_INDIRECT_WITH_OFFSET_2_S1_IMMEDIATE
+ , UBICOM32_INSN_EXT_2_D_INDIRECT_2_S1_IMMEDIATE, UBICOM32_INSN_EXT_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_IMMEDIATE, UBICOM32_INSN_EXT_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_IMMEDIATE, UBICOM32_INSN_EXT_2_D_DIRECT_S1_INDIRECT_WITH_INDEX_2
+ , UBICOM32_INSN_EXT_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_INDEX_2, UBICOM32_INSN_EXT_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_INDEX_2, UBICOM32_INSN_EXT_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_INDEX_2, UBICOM32_INSN_EXT_2_D_INDIRECT_2_S1_INDIRECT_WITH_INDEX_2
+ , UBICOM32_INSN_EXT_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_INDEX_2, UBICOM32_INSN_EXT_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_INDEX_2, UBICOM32_INSN_EXT_2_D_DIRECT_S1_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_EXT_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_OFFSET_2
+ , UBICOM32_INSN_EXT_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_EXT_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_EXT_2_D_INDIRECT_2_S1_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_EXT_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_OFFSET_2
+ , UBICOM32_INSN_EXT_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_EXT_2_D_DIRECT_S1_INDIRECT_2, UBICOM32_INSN_EXT_2_D_IMMEDIATE_2_S1_INDIRECT_2, UBICOM32_INSN_EXT_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_2
+ , UBICOM32_INSN_EXT_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_2, UBICOM32_INSN_EXT_2_D_INDIRECT_2_S1_INDIRECT_2, UBICOM32_INSN_EXT_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_2, UBICOM32_INSN_EXT_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_2
+ , UBICOM32_INSN_EXT_2_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_INSN_EXT_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_INSN_EXT_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_INSN_EXT_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_POST_INCREMENT_2
+ , UBICOM32_INSN_EXT_2_D_INDIRECT_2_S1_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_INSN_EXT_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_INSN_EXT_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_INSN_EXT_2_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_2
+ , UBICOM32_INSN_EXT_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, UBICOM32_INSN_EXT_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, UBICOM32_INSN_EXT_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, UBICOM32_INSN_EXT_2_D_INDIRECT_2_S1_INDIRECT_WITH_PRE_INCREMENT_2
+ , UBICOM32_INSN_EXT_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, UBICOM32_INSN_EXT_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, UBICOM32_INSN_EXT_1_D_DIRECT_S1_DIRECT, UBICOM32_INSN_EXT_1_D_IMMEDIATE_1_S1_DIRECT
+ , UBICOM32_INSN_EXT_1_D_INDIRECT_WITH_INDEX_1_S1_DIRECT, UBICOM32_INSN_EXT_1_D_INDIRECT_WITH_OFFSET_1_S1_DIRECT, UBICOM32_INSN_EXT_1_D_INDIRECT_1_S1_DIRECT, UBICOM32_INSN_EXT_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_DIRECT
+ , UBICOM32_INSN_EXT_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_DIRECT, UBICOM32_INSN_EXT_1_D_DIRECT_S1_IMMEDIATE, UBICOM32_INSN_EXT_1_D_IMMEDIATE_1_S1_IMMEDIATE, UBICOM32_INSN_EXT_1_D_INDIRECT_WITH_INDEX_1_S1_IMMEDIATE
+ , UBICOM32_INSN_EXT_1_D_INDIRECT_WITH_OFFSET_1_S1_IMMEDIATE, UBICOM32_INSN_EXT_1_D_INDIRECT_1_S1_IMMEDIATE, UBICOM32_INSN_EXT_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_IMMEDIATE, UBICOM32_INSN_EXT_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_IMMEDIATE
+ , UBICOM32_INSN_EXT_1_D_DIRECT_S1_INDIRECT_WITH_INDEX_1, UBICOM32_INSN_EXT_1_D_IMMEDIATE_1_S1_INDIRECT_WITH_INDEX_1, UBICOM32_INSN_EXT_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_WITH_INDEX_1, UBICOM32_INSN_EXT_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_WITH_INDEX_1
+ , UBICOM32_INSN_EXT_1_D_INDIRECT_1_S1_INDIRECT_WITH_INDEX_1, UBICOM32_INSN_EXT_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_WITH_INDEX_1, UBICOM32_INSN_EXT_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_WITH_INDEX_1, UBICOM32_INSN_EXT_1_D_DIRECT_S1_INDIRECT_WITH_OFFSET_1
+ , UBICOM32_INSN_EXT_1_D_IMMEDIATE_1_S1_INDIRECT_WITH_OFFSET_1, UBICOM32_INSN_EXT_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_WITH_OFFSET_1, UBICOM32_INSN_EXT_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_WITH_OFFSET_1, UBICOM32_INSN_EXT_1_D_INDIRECT_1_S1_INDIRECT_WITH_OFFSET_1
+ , UBICOM32_INSN_EXT_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_WITH_OFFSET_1, UBICOM32_INSN_EXT_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_WITH_OFFSET_1, UBICOM32_INSN_EXT_1_D_DIRECT_S1_INDIRECT_1, UBICOM32_INSN_EXT_1_D_IMMEDIATE_1_S1_INDIRECT_1
+ , UBICOM32_INSN_EXT_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_1, UBICOM32_INSN_EXT_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_1, UBICOM32_INSN_EXT_1_D_INDIRECT_1_S1_INDIRECT_1, UBICOM32_INSN_EXT_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_1
+ , UBICOM32_INSN_EXT_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_1, UBICOM32_INSN_EXT_1_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_1, UBICOM32_INSN_EXT_1_D_IMMEDIATE_1_S1_INDIRECT_WITH_POST_INCREMENT_1, UBICOM32_INSN_EXT_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_WITH_POST_INCREMENT_1
+ , UBICOM32_INSN_EXT_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_WITH_POST_INCREMENT_1, UBICOM32_INSN_EXT_1_D_INDIRECT_1_S1_INDIRECT_WITH_POST_INCREMENT_1, UBICOM32_INSN_EXT_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_WITH_POST_INCREMENT_1, UBICOM32_INSN_EXT_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_WITH_POST_INCREMENT_1
+ , UBICOM32_INSN_EXT_1_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_1, UBICOM32_INSN_EXT_1_D_IMMEDIATE_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, UBICOM32_INSN_EXT_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, UBICOM32_INSN_EXT_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_WITH_PRE_INCREMENT_1
+ , UBICOM32_INSN_EXT_1_D_INDIRECT_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, UBICOM32_INSN_EXT_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, UBICOM32_INSN_EXT_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, UBICOM32_INSN_MOVEI_D_DIRECT
+ , UBICOM32_INSN_MOVEI_D_IMMEDIATE_2, UBICOM32_INSN_MOVEI_D_INDIRECT_WITH_INDEX_2, UBICOM32_INSN_MOVEI_D_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_MOVEI_D_INDIRECT_2
+ , UBICOM32_INSN_MOVEI_D_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_INSN_MOVEI_D_INDIRECT_WITH_PRE_INCREMENT_2, UBICOM32_INSN_BCLR_D_DIRECT_S1_DIRECT, UBICOM32_INSN_BCLR_D_IMMEDIATE_4_S1_DIRECT
+ , UBICOM32_INSN_BCLR_D_INDIRECT_WITH_INDEX_4_S1_DIRECT, UBICOM32_INSN_BCLR_D_INDIRECT_WITH_OFFSET_4_S1_DIRECT, UBICOM32_INSN_BCLR_D_INDIRECT_4_S1_DIRECT, UBICOM32_INSN_BCLR_D_INDIRECT_WITH_POST_INCREMENT_4_S1_DIRECT
+ , UBICOM32_INSN_BCLR_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_DIRECT, UBICOM32_INSN_BCLR_D_DIRECT_S1_IMMEDIATE, UBICOM32_INSN_BCLR_D_IMMEDIATE_4_S1_IMMEDIATE, UBICOM32_INSN_BCLR_D_INDIRECT_WITH_INDEX_4_S1_IMMEDIATE
+ , UBICOM32_INSN_BCLR_D_INDIRECT_WITH_OFFSET_4_S1_IMMEDIATE, UBICOM32_INSN_BCLR_D_INDIRECT_4_S1_IMMEDIATE, UBICOM32_INSN_BCLR_D_INDIRECT_WITH_POST_INCREMENT_4_S1_IMMEDIATE, UBICOM32_INSN_BCLR_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_IMMEDIATE
+ , UBICOM32_INSN_BCLR_D_DIRECT_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_BCLR_D_IMMEDIATE_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_BCLR_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_BCLR_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_INDEX_4
+ , UBICOM32_INSN_BCLR_D_INDIRECT_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_BCLR_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_BCLR_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_BCLR_D_DIRECT_S1_INDIRECT_WITH_OFFSET_4
+ , UBICOM32_INSN_BCLR_D_IMMEDIATE_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_BCLR_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_BCLR_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_BCLR_D_INDIRECT_4_S1_INDIRECT_WITH_OFFSET_4
+ , UBICOM32_INSN_BCLR_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_BCLR_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_BCLR_D_DIRECT_S1_INDIRECT_4, UBICOM32_INSN_BCLR_D_IMMEDIATE_4_S1_INDIRECT_4
+ , UBICOM32_INSN_BCLR_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_4, UBICOM32_INSN_BCLR_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_4, UBICOM32_INSN_BCLR_D_INDIRECT_4_S1_INDIRECT_4, UBICOM32_INSN_BCLR_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_4
+ , UBICOM32_INSN_BCLR_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_4, UBICOM32_INSN_BCLR_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_BCLR_D_IMMEDIATE_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_BCLR_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_POST_INCREMENT_4
+ , UBICOM32_INSN_BCLR_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_BCLR_D_INDIRECT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_BCLR_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_BCLR_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4
+ , UBICOM32_INSN_BCLR_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_BCLR_D_IMMEDIATE_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_BCLR_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_BCLR_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_PRE_INCREMENT_4
+ , UBICOM32_INSN_BCLR_D_INDIRECT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_BCLR_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_BCLR_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_BSET_D_DIRECT_S1_DIRECT
+ , UBICOM32_INSN_BSET_D_IMMEDIATE_4_S1_DIRECT, UBICOM32_INSN_BSET_D_INDIRECT_WITH_INDEX_4_S1_DIRECT, UBICOM32_INSN_BSET_D_INDIRECT_WITH_OFFSET_4_S1_DIRECT, UBICOM32_INSN_BSET_D_INDIRECT_4_S1_DIRECT
+ , UBICOM32_INSN_BSET_D_INDIRECT_WITH_POST_INCREMENT_4_S1_DIRECT, UBICOM32_INSN_BSET_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_DIRECT, UBICOM32_INSN_BSET_D_DIRECT_S1_IMMEDIATE, UBICOM32_INSN_BSET_D_IMMEDIATE_4_S1_IMMEDIATE
+ , UBICOM32_INSN_BSET_D_INDIRECT_WITH_INDEX_4_S1_IMMEDIATE, UBICOM32_INSN_BSET_D_INDIRECT_WITH_OFFSET_4_S1_IMMEDIATE, UBICOM32_INSN_BSET_D_INDIRECT_4_S1_IMMEDIATE, UBICOM32_INSN_BSET_D_INDIRECT_WITH_POST_INCREMENT_4_S1_IMMEDIATE
+ , UBICOM32_INSN_BSET_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_IMMEDIATE, UBICOM32_INSN_BSET_D_DIRECT_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_BSET_D_IMMEDIATE_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_BSET_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_INDEX_4
+ , UBICOM32_INSN_BSET_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_BSET_D_INDIRECT_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_BSET_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_BSET_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4
+ , UBICOM32_INSN_BSET_D_DIRECT_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_BSET_D_IMMEDIATE_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_BSET_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_BSET_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_OFFSET_4
+ , UBICOM32_INSN_BSET_D_INDIRECT_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_BSET_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_BSET_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_BSET_D_DIRECT_S1_INDIRECT_4
+ , UBICOM32_INSN_BSET_D_IMMEDIATE_4_S1_INDIRECT_4, UBICOM32_INSN_BSET_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_4, UBICOM32_INSN_BSET_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_4, UBICOM32_INSN_BSET_D_INDIRECT_4_S1_INDIRECT_4
+ , UBICOM32_INSN_BSET_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_4, UBICOM32_INSN_BSET_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_4, UBICOM32_INSN_BSET_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_BSET_D_IMMEDIATE_4_S1_INDIRECT_WITH_POST_INCREMENT_4
+ , UBICOM32_INSN_BSET_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_BSET_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_BSET_D_INDIRECT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_BSET_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4
+ , UBICOM32_INSN_BSET_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_BSET_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_BSET_D_IMMEDIATE_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_BSET_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_PRE_INCREMENT_4
+ , UBICOM32_INSN_BSET_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_BSET_D_INDIRECT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_BSET_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_BSET_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4
+ , UBICOM32_INSN_BTST_S1_DIRECT_IMM_BIT5, UBICOM32_INSN_BTST_S1_IMMEDIATE_IMM_BIT5, UBICOM32_INSN_BTST_S1_INDIRECT_WITH_INDEX_4_IMM_BIT5, UBICOM32_INSN_BTST_S1_INDIRECT_WITH_OFFSET_4_IMM_BIT5
+ , UBICOM32_INSN_BTST_S1_INDIRECT_4_IMM_BIT5, UBICOM32_INSN_BTST_S1_INDIRECT_WITH_POST_INCREMENT_4_IMM_BIT5, UBICOM32_INSN_BTST_S1_INDIRECT_WITH_PRE_INCREMENT_4_IMM_BIT5, UBICOM32_INSN_BTST_S1_DIRECT_DYN_REG
+ , UBICOM32_INSN_BTST_S1_IMMEDIATE_DYN_REG, UBICOM32_INSN_BTST_S1_INDIRECT_WITH_INDEX_4_DYN_REG, UBICOM32_INSN_BTST_S1_INDIRECT_WITH_OFFSET_4_DYN_REG, UBICOM32_INSN_BTST_S1_INDIRECT_4_DYN_REG
+ , UBICOM32_INSN_BTST_S1_INDIRECT_WITH_POST_INCREMENT_4_DYN_REG, UBICOM32_INSN_BTST_S1_INDIRECT_WITH_PRE_INCREMENT_4_DYN_REG, UBICOM32_INSN_SHMRG_2_IMM_BIT5_S1_DIRECT, UBICOM32_INSN_SHMRG_2_DYN_REG_S1_DIRECT
+ , UBICOM32_INSN_SHMRG_2_IMM_BIT5_S1_IMMEDIATE, UBICOM32_INSN_SHMRG_2_DYN_REG_S1_IMMEDIATE, UBICOM32_INSN_SHMRG_2_IMM_BIT5_S1_INDIRECT_WITH_INDEX_2, UBICOM32_INSN_SHMRG_2_DYN_REG_S1_INDIRECT_WITH_INDEX_2
+ , UBICOM32_INSN_SHMRG_2_IMM_BIT5_S1_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_SHMRG_2_DYN_REG_S1_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_SHMRG_2_IMM_BIT5_S1_INDIRECT_2, UBICOM32_INSN_SHMRG_2_DYN_REG_S1_INDIRECT_2
+ , UBICOM32_INSN_SHMRG_2_IMM_BIT5_S1_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_INSN_SHMRG_2_DYN_REG_S1_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_INSN_SHMRG_2_IMM_BIT5_S1_INDIRECT_WITH_PRE_INCREMENT_2, UBICOM32_INSN_SHMRG_2_DYN_REG_S1_INDIRECT_WITH_PRE_INCREMENT_2
+ , UBICOM32_INSN_SHMRG_1_IMM_BIT5_S1_DIRECT, UBICOM32_INSN_SHMRG_1_DYN_REG_S1_DIRECT, UBICOM32_INSN_SHMRG_1_IMM_BIT5_S1_IMMEDIATE, UBICOM32_INSN_SHMRG_1_DYN_REG_S1_IMMEDIATE
+ , UBICOM32_INSN_SHMRG_1_IMM_BIT5_S1_INDIRECT_WITH_INDEX_1, UBICOM32_INSN_SHMRG_1_DYN_REG_S1_INDIRECT_WITH_INDEX_1, UBICOM32_INSN_SHMRG_1_IMM_BIT5_S1_INDIRECT_WITH_OFFSET_1, UBICOM32_INSN_SHMRG_1_DYN_REG_S1_INDIRECT_WITH_OFFSET_1
+ , UBICOM32_INSN_SHMRG_1_IMM_BIT5_S1_INDIRECT_1, UBICOM32_INSN_SHMRG_1_DYN_REG_S1_INDIRECT_1, UBICOM32_INSN_SHMRG_1_IMM_BIT5_S1_INDIRECT_WITH_POST_INCREMENT_1, UBICOM32_INSN_SHMRG_1_DYN_REG_S1_INDIRECT_WITH_POST_INCREMENT_1
+ , UBICOM32_INSN_SHMRG_1_IMM_BIT5_S1_INDIRECT_WITH_PRE_INCREMENT_1, UBICOM32_INSN_SHMRG_1_DYN_REG_S1_INDIRECT_WITH_PRE_INCREMENT_1, UBICOM32_INSN_CRCGEN_S1_DIRECT_IMM_BIT5, UBICOM32_INSN_CRCGEN_S1_IMMEDIATE_IMM_BIT5
+ , UBICOM32_INSN_CRCGEN_S1_INDIRECT_WITH_INDEX_1_IMM_BIT5, UBICOM32_INSN_CRCGEN_S1_INDIRECT_WITH_OFFSET_1_IMM_BIT5, UBICOM32_INSN_CRCGEN_S1_INDIRECT_1_IMM_BIT5, UBICOM32_INSN_CRCGEN_S1_INDIRECT_WITH_POST_INCREMENT_1_IMM_BIT5
+ , UBICOM32_INSN_CRCGEN_S1_INDIRECT_WITH_PRE_INCREMENT_1_IMM_BIT5, UBICOM32_INSN_CRCGEN_S1_DIRECT_DYN_REG, UBICOM32_INSN_CRCGEN_S1_IMMEDIATE_DYN_REG, UBICOM32_INSN_CRCGEN_S1_INDIRECT_WITH_INDEX_1_DYN_REG
+ , UBICOM32_INSN_CRCGEN_S1_INDIRECT_WITH_OFFSET_1_DYN_REG, UBICOM32_INSN_CRCGEN_S1_INDIRECT_1_DYN_REG, UBICOM32_INSN_CRCGEN_S1_INDIRECT_WITH_POST_INCREMENT_1_DYN_REG, UBICOM32_INSN_CRCGEN_S1_INDIRECT_WITH_PRE_INCREMENT_1_DYN_REG
+ , UBICOM32_INSN_BFEXTU_S1_DIRECT_IMM_BIT5, UBICOM32_INSN_BFEXTU_S1_IMMEDIATE_IMM_BIT5, UBICOM32_INSN_BFEXTU_S1_INDIRECT_WITH_INDEX_4_IMM_BIT5, UBICOM32_INSN_BFEXTU_S1_INDIRECT_WITH_OFFSET_4_IMM_BIT5
+ , UBICOM32_INSN_BFEXTU_S1_INDIRECT_4_IMM_BIT5, UBICOM32_INSN_BFEXTU_S1_INDIRECT_WITH_POST_INCREMENT_4_IMM_BIT5, UBICOM32_INSN_BFEXTU_S1_INDIRECT_WITH_PRE_INCREMENT_4_IMM_BIT5, UBICOM32_INSN_BFEXTU_S1_DIRECT_DYN_REG
+ , UBICOM32_INSN_BFEXTU_S1_IMMEDIATE_DYN_REG, UBICOM32_INSN_BFEXTU_S1_INDIRECT_WITH_INDEX_4_DYN_REG, UBICOM32_INSN_BFEXTU_S1_INDIRECT_WITH_OFFSET_4_DYN_REG, UBICOM32_INSN_BFEXTU_S1_INDIRECT_4_DYN_REG
+ , UBICOM32_INSN_BFEXTU_S1_INDIRECT_WITH_POST_INCREMENT_4_DYN_REG, UBICOM32_INSN_BFEXTU_S1_INDIRECT_WITH_PRE_INCREMENT_4_DYN_REG, UBICOM32_INSN_BFRVRS_S1_DIRECT_IMM_BIT5, UBICOM32_INSN_BFRVRS_S1_IMMEDIATE_IMM_BIT5
+ , UBICOM32_INSN_BFRVRS_S1_INDIRECT_WITH_INDEX_4_IMM_BIT5, UBICOM32_INSN_BFRVRS_S1_INDIRECT_WITH_OFFSET_4_IMM_BIT5, UBICOM32_INSN_BFRVRS_S1_INDIRECT_4_IMM_BIT5, UBICOM32_INSN_BFRVRS_S1_INDIRECT_WITH_POST_INCREMENT_4_IMM_BIT5
+ , UBICOM32_INSN_BFRVRS_S1_INDIRECT_WITH_PRE_INCREMENT_4_IMM_BIT5, UBICOM32_INSN_BFRVRS_S1_DIRECT_DYN_REG, UBICOM32_INSN_BFRVRS_S1_IMMEDIATE_DYN_REG, UBICOM32_INSN_BFRVRS_S1_INDIRECT_WITH_INDEX_4_DYN_REG
+ , UBICOM32_INSN_BFRVRS_S1_INDIRECT_WITH_OFFSET_4_DYN_REG, UBICOM32_INSN_BFRVRS_S1_INDIRECT_4_DYN_REG, UBICOM32_INSN_BFRVRS_S1_INDIRECT_WITH_POST_INCREMENT_4_DYN_REG, UBICOM32_INSN_BFRVRS_S1_INDIRECT_WITH_PRE_INCREMENT_4_DYN_REG
+ , UBICOM32_INSN_MERGE_S1_DIRECT_IMM_BIT5, UBICOM32_INSN_MERGE_S1_IMMEDIATE_IMM_BIT5, UBICOM32_INSN_MERGE_S1_INDIRECT_WITH_INDEX_4_IMM_BIT5, UBICOM32_INSN_MERGE_S1_INDIRECT_WITH_OFFSET_4_IMM_BIT5
+ , UBICOM32_INSN_MERGE_S1_INDIRECT_4_IMM_BIT5, UBICOM32_INSN_MERGE_S1_INDIRECT_WITH_POST_INCREMENT_4_IMM_BIT5, UBICOM32_INSN_MERGE_S1_INDIRECT_WITH_PRE_INCREMENT_4_IMM_BIT5, UBICOM32_INSN_MERGE_S1_DIRECT_DYN_REG
+ , UBICOM32_INSN_MERGE_S1_IMMEDIATE_DYN_REG, UBICOM32_INSN_MERGE_S1_INDIRECT_WITH_INDEX_4_DYN_REG, UBICOM32_INSN_MERGE_S1_INDIRECT_WITH_OFFSET_4_DYN_REG, UBICOM32_INSN_MERGE_S1_INDIRECT_4_DYN_REG
+ , UBICOM32_INSN_MERGE_S1_INDIRECT_WITH_POST_INCREMENT_4_DYN_REG, UBICOM32_INSN_MERGE_S1_INDIRECT_WITH_PRE_INCREMENT_4_DYN_REG, UBICOM32_INSN_SHFTD_S1_DIRECT_IMM_BIT5, UBICOM32_INSN_SHFTD_S1_IMMEDIATE_IMM_BIT5
+ , UBICOM32_INSN_SHFTD_S1_INDIRECT_WITH_INDEX_4_IMM_BIT5, UBICOM32_INSN_SHFTD_S1_INDIRECT_WITH_OFFSET_4_IMM_BIT5, UBICOM32_INSN_SHFTD_S1_INDIRECT_4_IMM_BIT5, UBICOM32_INSN_SHFTD_S1_INDIRECT_WITH_POST_INCREMENT_4_IMM_BIT5
+ , UBICOM32_INSN_SHFTD_S1_INDIRECT_WITH_PRE_INCREMENT_4_IMM_BIT5, UBICOM32_INSN_SHFTD_S1_DIRECT_DYN_REG, UBICOM32_INSN_SHFTD_S1_IMMEDIATE_DYN_REG, UBICOM32_INSN_SHFTD_S1_INDIRECT_WITH_INDEX_4_DYN_REG
+ , UBICOM32_INSN_SHFTD_S1_INDIRECT_WITH_OFFSET_4_DYN_REG, UBICOM32_INSN_SHFTD_S1_INDIRECT_4_DYN_REG, UBICOM32_INSN_SHFTD_S1_INDIRECT_WITH_POST_INCREMENT_4_DYN_REG, UBICOM32_INSN_SHFTD_S1_INDIRECT_WITH_PRE_INCREMENT_4_DYN_REG
+ , UBICOM32_INSN_ASR_1_IMM_BIT5_S1_DIRECT, UBICOM32_INSN_ASR_1_DYN_REG_S1_DIRECT, UBICOM32_INSN_ASR_1_IMM_BIT5_S1_IMMEDIATE, UBICOM32_INSN_ASR_1_DYN_REG_S1_IMMEDIATE
+ , UBICOM32_INSN_ASR_1_IMM_BIT5_S1_INDIRECT_WITH_INDEX_1, UBICOM32_INSN_ASR_1_DYN_REG_S1_INDIRECT_WITH_INDEX_1, UBICOM32_INSN_ASR_1_IMM_BIT5_S1_INDIRECT_WITH_OFFSET_1, UBICOM32_INSN_ASR_1_DYN_REG_S1_INDIRECT_WITH_OFFSET_1
+ , UBICOM32_INSN_ASR_1_IMM_BIT5_S1_INDIRECT_1, UBICOM32_INSN_ASR_1_DYN_REG_S1_INDIRECT_1, UBICOM32_INSN_ASR_1_IMM_BIT5_S1_INDIRECT_WITH_POST_INCREMENT_1, UBICOM32_INSN_ASR_1_DYN_REG_S1_INDIRECT_WITH_POST_INCREMENT_1
+ , UBICOM32_INSN_ASR_1_IMM_BIT5_S1_INDIRECT_WITH_PRE_INCREMENT_1, UBICOM32_INSN_ASR_1_DYN_REG_S1_INDIRECT_WITH_PRE_INCREMENT_1, UBICOM32_INSN_LSL_1_IMM_BIT5_S1_DIRECT, UBICOM32_INSN_LSL_1_DYN_REG_S1_DIRECT
+ , UBICOM32_INSN_LSL_1_IMM_BIT5_S1_IMMEDIATE, UBICOM32_INSN_LSL_1_DYN_REG_S1_IMMEDIATE, UBICOM32_INSN_LSL_1_IMM_BIT5_S1_INDIRECT_WITH_INDEX_1, UBICOM32_INSN_LSL_1_DYN_REG_S1_INDIRECT_WITH_INDEX_1
+ , UBICOM32_INSN_LSL_1_IMM_BIT5_S1_INDIRECT_WITH_OFFSET_1, UBICOM32_INSN_LSL_1_DYN_REG_S1_INDIRECT_WITH_OFFSET_1, UBICOM32_INSN_LSL_1_IMM_BIT5_S1_INDIRECT_1, UBICOM32_INSN_LSL_1_DYN_REG_S1_INDIRECT_1
+ , UBICOM32_INSN_LSL_1_IMM_BIT5_S1_INDIRECT_WITH_POST_INCREMENT_1, UBICOM32_INSN_LSL_1_DYN_REG_S1_INDIRECT_WITH_POST_INCREMENT_1, UBICOM32_INSN_LSL_1_IMM_BIT5_S1_INDIRECT_WITH_PRE_INCREMENT_1, UBICOM32_INSN_LSL_1_DYN_REG_S1_INDIRECT_WITH_PRE_INCREMENT_1
+ , UBICOM32_INSN_LSR_1_IMM_BIT5_S1_DIRECT, UBICOM32_INSN_LSR_1_DYN_REG_S1_DIRECT, UBICOM32_INSN_LSR_1_IMM_BIT5_S1_IMMEDIATE, UBICOM32_INSN_LSR_1_DYN_REG_S1_IMMEDIATE
+ , UBICOM32_INSN_LSR_1_IMM_BIT5_S1_INDIRECT_WITH_INDEX_1, UBICOM32_INSN_LSR_1_DYN_REG_S1_INDIRECT_WITH_INDEX_1, UBICOM32_INSN_LSR_1_IMM_BIT5_S1_INDIRECT_WITH_OFFSET_1, UBICOM32_INSN_LSR_1_DYN_REG_S1_INDIRECT_WITH_OFFSET_1
+ , UBICOM32_INSN_LSR_1_IMM_BIT5_S1_INDIRECT_1, UBICOM32_INSN_LSR_1_DYN_REG_S1_INDIRECT_1, UBICOM32_INSN_LSR_1_IMM_BIT5_S1_INDIRECT_WITH_POST_INCREMENT_1, UBICOM32_INSN_LSR_1_DYN_REG_S1_INDIRECT_WITH_POST_INCREMENT_1
+ , UBICOM32_INSN_LSR_1_IMM_BIT5_S1_INDIRECT_WITH_PRE_INCREMENT_1, UBICOM32_INSN_LSR_1_DYN_REG_S1_INDIRECT_WITH_PRE_INCREMENT_1, UBICOM32_INSN_ASR_2_IMM_BIT5_S1_DIRECT, UBICOM32_INSN_ASR_2_DYN_REG_S1_DIRECT
+ , UBICOM32_INSN_ASR_2_IMM_BIT5_S1_IMMEDIATE, UBICOM32_INSN_ASR_2_DYN_REG_S1_IMMEDIATE, UBICOM32_INSN_ASR_2_IMM_BIT5_S1_INDIRECT_WITH_INDEX_2, UBICOM32_INSN_ASR_2_DYN_REG_S1_INDIRECT_WITH_INDEX_2
+ , UBICOM32_INSN_ASR_2_IMM_BIT5_S1_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_ASR_2_DYN_REG_S1_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_ASR_2_IMM_BIT5_S1_INDIRECT_2, UBICOM32_INSN_ASR_2_DYN_REG_S1_INDIRECT_2
+ , UBICOM32_INSN_ASR_2_IMM_BIT5_S1_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_INSN_ASR_2_DYN_REG_S1_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_INSN_ASR_2_IMM_BIT5_S1_INDIRECT_WITH_PRE_INCREMENT_2, UBICOM32_INSN_ASR_2_DYN_REG_S1_INDIRECT_WITH_PRE_INCREMENT_2
+ , UBICOM32_INSN_LSL_2_IMM_BIT5_S1_DIRECT, UBICOM32_INSN_LSL_2_DYN_REG_S1_DIRECT, UBICOM32_INSN_LSL_2_IMM_BIT5_S1_IMMEDIATE, UBICOM32_INSN_LSL_2_DYN_REG_S1_IMMEDIATE
+ , UBICOM32_INSN_LSL_2_IMM_BIT5_S1_INDIRECT_WITH_INDEX_2, UBICOM32_INSN_LSL_2_DYN_REG_S1_INDIRECT_WITH_INDEX_2, UBICOM32_INSN_LSL_2_IMM_BIT5_S1_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_LSL_2_DYN_REG_S1_INDIRECT_WITH_OFFSET_2
+ , UBICOM32_INSN_LSL_2_IMM_BIT5_S1_INDIRECT_2, UBICOM32_INSN_LSL_2_DYN_REG_S1_INDIRECT_2, UBICOM32_INSN_LSL_2_IMM_BIT5_S1_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_INSN_LSL_2_DYN_REG_S1_INDIRECT_WITH_POST_INCREMENT_2
+ , UBICOM32_INSN_LSL_2_IMM_BIT5_S1_INDIRECT_WITH_PRE_INCREMENT_2, UBICOM32_INSN_LSL_2_DYN_REG_S1_INDIRECT_WITH_PRE_INCREMENT_2, UBICOM32_INSN_LSR_2_IMM_BIT5_S1_DIRECT, UBICOM32_INSN_LSR_2_DYN_REG_S1_DIRECT
+ , UBICOM32_INSN_LSR_2_IMM_BIT5_S1_IMMEDIATE, UBICOM32_INSN_LSR_2_DYN_REG_S1_IMMEDIATE, UBICOM32_INSN_LSR_2_IMM_BIT5_S1_INDIRECT_WITH_INDEX_2, UBICOM32_INSN_LSR_2_DYN_REG_S1_INDIRECT_WITH_INDEX_2
+ , UBICOM32_INSN_LSR_2_IMM_BIT5_S1_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_LSR_2_DYN_REG_S1_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_LSR_2_IMM_BIT5_S1_INDIRECT_2, UBICOM32_INSN_LSR_2_DYN_REG_S1_INDIRECT_2
+ , UBICOM32_INSN_LSR_2_IMM_BIT5_S1_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_INSN_LSR_2_DYN_REG_S1_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_INSN_LSR_2_IMM_BIT5_S1_INDIRECT_WITH_PRE_INCREMENT_2, UBICOM32_INSN_LSR_2_DYN_REG_S1_INDIRECT_WITH_PRE_INCREMENT_2
+ , UBICOM32_INSN_ASR_4_IMM_BIT5_S1_DIRECT, UBICOM32_INSN_ASR_4_DYN_REG_S1_DIRECT, UBICOM32_INSN_ASR_4_IMM_BIT5_S1_IMMEDIATE, UBICOM32_INSN_ASR_4_DYN_REG_S1_IMMEDIATE
+ , UBICOM32_INSN_ASR_4_IMM_BIT5_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_ASR_4_DYN_REG_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_ASR_4_IMM_BIT5_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_ASR_4_DYN_REG_S1_INDIRECT_WITH_OFFSET_4
+ , UBICOM32_INSN_ASR_4_IMM_BIT5_S1_INDIRECT_4, UBICOM32_INSN_ASR_4_DYN_REG_S1_INDIRECT_4, UBICOM32_INSN_ASR_4_IMM_BIT5_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_ASR_4_DYN_REG_S1_INDIRECT_WITH_POST_INCREMENT_4
+ , UBICOM32_INSN_ASR_4_IMM_BIT5_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_ASR_4_DYN_REG_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_LSL_4_IMM_BIT5_S1_DIRECT, UBICOM32_INSN_LSL_4_DYN_REG_S1_DIRECT
+ , UBICOM32_INSN_LSL_4_IMM_BIT5_S1_IMMEDIATE, UBICOM32_INSN_LSL_4_DYN_REG_S1_IMMEDIATE, UBICOM32_INSN_LSL_4_IMM_BIT5_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_LSL_4_DYN_REG_S1_INDIRECT_WITH_INDEX_4
+ , UBICOM32_INSN_LSL_4_IMM_BIT5_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_LSL_4_DYN_REG_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_LSL_4_IMM_BIT5_S1_INDIRECT_4, UBICOM32_INSN_LSL_4_DYN_REG_S1_INDIRECT_4
+ , UBICOM32_INSN_LSL_4_IMM_BIT5_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_LSL_4_DYN_REG_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_LSL_4_IMM_BIT5_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_LSL_4_DYN_REG_S1_INDIRECT_WITH_PRE_INCREMENT_4
+ , UBICOM32_INSN_LSR_4_IMM_BIT5_S1_DIRECT, UBICOM32_INSN_LSR_4_DYN_REG_S1_DIRECT, UBICOM32_INSN_LSR_4_IMM_BIT5_S1_IMMEDIATE, UBICOM32_INSN_LSR_4_DYN_REG_S1_IMMEDIATE
+ , UBICOM32_INSN_LSR_4_IMM_BIT5_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_LSR_4_DYN_REG_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_LSR_4_IMM_BIT5_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_LSR_4_DYN_REG_S1_INDIRECT_WITH_OFFSET_4
+ , UBICOM32_INSN_LSR_4_IMM_BIT5_S1_INDIRECT_4, UBICOM32_INSN_LSR_4_DYN_REG_S1_INDIRECT_4, UBICOM32_INSN_LSR_4_IMM_BIT5_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_LSR_4_DYN_REG_S1_INDIRECT_WITH_POST_INCREMENT_4
+ , UBICOM32_INSN_LSR_4_IMM_BIT5_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_LSR_4_DYN_REG_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_COMPATIBILITY_MAC_S1_DIRECT_DSP_SRC2_DATA_REG, UBICOM32_INSN_COMPATIBILITY_MAC_S1_IMMEDIATE_DSP_SRC2_DATA_REG
+ , UBICOM32_INSN_COMPATIBILITY_MAC_S1_INDIRECT_WITH_INDEX_2_DSP_SRC2_DATA_REG, UBICOM32_INSN_COMPATIBILITY_MAC_S1_INDIRECT_WITH_OFFSET_2_DSP_SRC2_DATA_REG, UBICOM32_INSN_COMPATIBILITY_MAC_S1_INDIRECT_2_DSP_SRC2_DATA_REG, UBICOM32_INSN_COMPATIBILITY_MAC_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_SRC2_DATA_REG
+ , UBICOM32_INSN_COMPATIBILITY_MAC_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_SRC2_DATA_REG, UBICOM32_INSN_COMPATIBILITY_MAC_S1_DIRECT_DSP_IMM_BIT5, UBICOM32_INSN_COMPATIBILITY_MAC_S1_IMMEDIATE_DSP_IMM_BIT5, UBICOM32_INSN_COMPATIBILITY_MAC_S1_INDIRECT_WITH_INDEX_2_DSP_IMM_BIT5
+ , UBICOM32_INSN_COMPATIBILITY_MAC_S1_INDIRECT_WITH_OFFSET_2_DSP_IMM_BIT5, UBICOM32_INSN_COMPATIBILITY_MAC_S1_INDIRECT_2_DSP_IMM_BIT5, UBICOM32_INSN_COMPATIBILITY_MAC_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_IMM_BIT5, UBICOM32_INSN_COMPATIBILITY_MAC_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_IMM_BIT5
+ , UBICOM32_INSN_MAC_S1_DIRECT_IMM_BIT5, UBICOM32_INSN_MAC_S1_IMMEDIATE_IMM_BIT5, UBICOM32_INSN_MAC_S1_INDIRECT_WITH_INDEX_2_IMM_BIT5, UBICOM32_INSN_MAC_S1_INDIRECT_WITH_OFFSET_2_IMM_BIT5
+ , UBICOM32_INSN_MAC_S1_INDIRECT_2_IMM_BIT5, UBICOM32_INSN_MAC_S1_INDIRECT_WITH_POST_INCREMENT_2_IMM_BIT5, UBICOM32_INSN_MAC_S1_INDIRECT_WITH_PRE_INCREMENT_2_IMM_BIT5, UBICOM32_INSN_MAC_S1_DIRECT_DYN_REG
+ , UBICOM32_INSN_MAC_S1_IMMEDIATE_DYN_REG, UBICOM32_INSN_MAC_S1_INDIRECT_WITH_INDEX_2_DYN_REG, UBICOM32_INSN_MAC_S1_INDIRECT_WITH_OFFSET_2_DYN_REG, UBICOM32_INSN_MAC_S1_INDIRECT_2_DYN_REG
+ , UBICOM32_INSN_MAC_S1_INDIRECT_WITH_POST_INCREMENT_2_DYN_REG, UBICOM32_INSN_MAC_S1_INDIRECT_WITH_PRE_INCREMENT_2_DYN_REG, UBICOM32_INSN_COMPATIBILITY_MULF_S1_DIRECT_DSP_SRC2_DATA_REG, UBICOM32_INSN_COMPATIBILITY_MULF_S1_IMMEDIATE_DSP_SRC2_DATA_REG
+ , UBICOM32_INSN_COMPATIBILITY_MULF_S1_INDIRECT_WITH_INDEX_2_DSP_SRC2_DATA_REG, UBICOM32_INSN_COMPATIBILITY_MULF_S1_INDIRECT_WITH_OFFSET_2_DSP_SRC2_DATA_REG, UBICOM32_INSN_COMPATIBILITY_MULF_S1_INDIRECT_2_DSP_SRC2_DATA_REG, UBICOM32_INSN_COMPATIBILITY_MULF_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_SRC2_DATA_REG
+ , UBICOM32_INSN_COMPATIBILITY_MULF_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_SRC2_DATA_REG, UBICOM32_INSN_COMPATIBILITY_MULF_S1_DIRECT_DSP_IMM_BIT5, UBICOM32_INSN_COMPATIBILITY_MULF_S1_IMMEDIATE_DSP_IMM_BIT5, UBICOM32_INSN_COMPATIBILITY_MULF_S1_INDIRECT_WITH_INDEX_2_DSP_IMM_BIT5
+ , UBICOM32_INSN_COMPATIBILITY_MULF_S1_INDIRECT_WITH_OFFSET_2_DSP_IMM_BIT5, UBICOM32_INSN_COMPATIBILITY_MULF_S1_INDIRECT_2_DSP_IMM_BIT5, UBICOM32_INSN_COMPATIBILITY_MULF_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_IMM_BIT5, UBICOM32_INSN_COMPATIBILITY_MULF_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_IMM_BIT5
+ , UBICOM32_INSN_MULF_S1_DIRECT_IMM_BIT5, UBICOM32_INSN_MULF_S1_IMMEDIATE_IMM_BIT5, UBICOM32_INSN_MULF_S1_INDIRECT_WITH_INDEX_2_IMM_BIT5, UBICOM32_INSN_MULF_S1_INDIRECT_WITH_OFFSET_2_IMM_BIT5
+ , UBICOM32_INSN_MULF_S1_INDIRECT_2_IMM_BIT5, UBICOM32_INSN_MULF_S1_INDIRECT_WITH_POST_INCREMENT_2_IMM_BIT5, UBICOM32_INSN_MULF_S1_INDIRECT_WITH_PRE_INCREMENT_2_IMM_BIT5, UBICOM32_INSN_MULF_S1_DIRECT_DYN_REG
+ , UBICOM32_INSN_MULF_S1_IMMEDIATE_DYN_REG, UBICOM32_INSN_MULF_S1_INDIRECT_WITH_INDEX_2_DYN_REG, UBICOM32_INSN_MULF_S1_INDIRECT_WITH_OFFSET_2_DYN_REG, UBICOM32_INSN_MULF_S1_INDIRECT_2_DYN_REG
+ , UBICOM32_INSN_MULF_S1_INDIRECT_WITH_POST_INCREMENT_2_DYN_REG, UBICOM32_INSN_MULF_S1_INDIRECT_WITH_PRE_INCREMENT_2_DYN_REG, UBICOM32_INSN_COMPATIBILITY_MULU_S1_DIRECT_DSP_SRC2_DATA_REG, UBICOM32_INSN_COMPATIBILITY_MULU_S1_IMMEDIATE_DSP_SRC2_DATA_REG
+ , UBICOM32_INSN_COMPATIBILITY_MULU_S1_INDIRECT_WITH_INDEX_2_DSP_SRC2_DATA_REG, UBICOM32_INSN_COMPATIBILITY_MULU_S1_INDIRECT_WITH_OFFSET_2_DSP_SRC2_DATA_REG, UBICOM32_INSN_COMPATIBILITY_MULU_S1_INDIRECT_2_DSP_SRC2_DATA_REG, UBICOM32_INSN_COMPATIBILITY_MULU_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_SRC2_DATA_REG
+ , UBICOM32_INSN_COMPATIBILITY_MULU_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_SRC2_DATA_REG, UBICOM32_INSN_COMPATIBILITY_MULU_S1_DIRECT_DSP_IMM_BIT5, UBICOM32_INSN_COMPATIBILITY_MULU_S1_IMMEDIATE_DSP_IMM_BIT5, UBICOM32_INSN_COMPATIBILITY_MULU_S1_INDIRECT_WITH_INDEX_2_DSP_IMM_BIT5
+ , UBICOM32_INSN_COMPATIBILITY_MULU_S1_INDIRECT_WITH_OFFSET_2_DSP_IMM_BIT5, UBICOM32_INSN_COMPATIBILITY_MULU_S1_INDIRECT_2_DSP_IMM_BIT5, UBICOM32_INSN_COMPATIBILITY_MULU_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_IMM_BIT5, UBICOM32_INSN_COMPATIBILITY_MULU_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_IMM_BIT5
+ , UBICOM32_INSN_MULU_S1_DIRECT_IMM_BIT5, UBICOM32_INSN_MULU_S1_IMMEDIATE_IMM_BIT5, UBICOM32_INSN_MULU_S1_INDIRECT_WITH_INDEX_2_IMM_BIT5, UBICOM32_INSN_MULU_S1_INDIRECT_WITH_OFFSET_2_IMM_BIT5
+ , UBICOM32_INSN_MULU_S1_INDIRECT_2_IMM_BIT5, UBICOM32_INSN_MULU_S1_INDIRECT_WITH_POST_INCREMENT_2_IMM_BIT5, UBICOM32_INSN_MULU_S1_INDIRECT_WITH_PRE_INCREMENT_2_IMM_BIT5, UBICOM32_INSN_MULU_S1_DIRECT_DYN_REG
+ , UBICOM32_INSN_MULU_S1_IMMEDIATE_DYN_REG, UBICOM32_INSN_MULU_S1_INDIRECT_WITH_INDEX_2_DYN_REG, UBICOM32_INSN_MULU_S1_INDIRECT_WITH_OFFSET_2_DYN_REG, UBICOM32_INSN_MULU_S1_INDIRECT_2_DYN_REG
+ , UBICOM32_INSN_MULU_S1_INDIRECT_WITH_POST_INCREMENT_2_DYN_REG, UBICOM32_INSN_MULU_S1_INDIRECT_WITH_PRE_INCREMENT_2_DYN_REG, UBICOM32_INSN_COMPATIBILITY_MULS_S1_DIRECT_DSP_SRC2_DATA_REG, UBICOM32_INSN_COMPATIBILITY_MULS_S1_IMMEDIATE_DSP_SRC2_DATA_REG
+ , UBICOM32_INSN_COMPATIBILITY_MULS_S1_INDIRECT_WITH_INDEX_2_DSP_SRC2_DATA_REG, UBICOM32_INSN_COMPATIBILITY_MULS_S1_INDIRECT_WITH_OFFSET_2_DSP_SRC2_DATA_REG, UBICOM32_INSN_COMPATIBILITY_MULS_S1_INDIRECT_2_DSP_SRC2_DATA_REG, UBICOM32_INSN_COMPATIBILITY_MULS_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_SRC2_DATA_REG
+ , UBICOM32_INSN_COMPATIBILITY_MULS_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_SRC2_DATA_REG, UBICOM32_INSN_COMPATIBILITY_MULS_S1_DIRECT_DSP_IMM_BIT5, UBICOM32_INSN_COMPATIBILITY_MULS_S1_IMMEDIATE_DSP_IMM_BIT5, UBICOM32_INSN_COMPATIBILITY_MULS_S1_INDIRECT_WITH_INDEX_2_DSP_IMM_BIT5
+ , UBICOM32_INSN_COMPATIBILITY_MULS_S1_INDIRECT_WITH_OFFSET_2_DSP_IMM_BIT5, UBICOM32_INSN_COMPATIBILITY_MULS_S1_INDIRECT_2_DSP_IMM_BIT5, UBICOM32_INSN_COMPATIBILITY_MULS_S1_INDIRECT_WITH_POST_INCREMENT_2_DSP_IMM_BIT5, UBICOM32_INSN_COMPATIBILITY_MULS_S1_INDIRECT_WITH_PRE_INCREMENT_2_DSP_IMM_BIT5
+ , UBICOM32_INSN_MULS_S1_DIRECT_IMM_BIT5, UBICOM32_INSN_MULS_S1_IMMEDIATE_IMM_BIT5, UBICOM32_INSN_MULS_S1_INDIRECT_WITH_INDEX_2_IMM_BIT5, UBICOM32_INSN_MULS_S1_INDIRECT_WITH_OFFSET_2_IMM_BIT5
+ , UBICOM32_INSN_MULS_S1_INDIRECT_2_IMM_BIT5, UBICOM32_INSN_MULS_S1_INDIRECT_WITH_POST_INCREMENT_2_IMM_BIT5, UBICOM32_INSN_MULS_S1_INDIRECT_WITH_PRE_INCREMENT_2_IMM_BIT5, UBICOM32_INSN_MULS_S1_DIRECT_DYN_REG
+ , UBICOM32_INSN_MULS_S1_IMMEDIATE_DYN_REG, UBICOM32_INSN_MULS_S1_INDIRECT_WITH_INDEX_2_DYN_REG, UBICOM32_INSN_MULS_S1_INDIRECT_WITH_OFFSET_2_DYN_REG, UBICOM32_INSN_MULS_S1_INDIRECT_2_DYN_REG
+ , UBICOM32_INSN_MULS_S1_INDIRECT_WITH_POST_INCREMENT_2_DYN_REG, UBICOM32_INSN_MULS_S1_INDIRECT_WITH_PRE_INCREMENT_2_DYN_REG, UBICOM32_INSN_SWAPB_4_D_DIRECT_S1_DIRECT, UBICOM32_INSN_SWAPB_4_D_IMMEDIATE_4_S1_DIRECT
+ , UBICOM32_INSN_SWAPB_4_D_INDIRECT_WITH_INDEX_4_S1_DIRECT, UBICOM32_INSN_SWAPB_4_D_INDIRECT_WITH_OFFSET_4_S1_DIRECT, UBICOM32_INSN_SWAPB_4_D_INDIRECT_4_S1_DIRECT, UBICOM32_INSN_SWAPB_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_DIRECT
+ , UBICOM32_INSN_SWAPB_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_DIRECT, UBICOM32_INSN_SWAPB_4_D_DIRECT_S1_IMMEDIATE, UBICOM32_INSN_SWAPB_4_D_IMMEDIATE_4_S1_IMMEDIATE, UBICOM32_INSN_SWAPB_4_D_INDIRECT_WITH_INDEX_4_S1_IMMEDIATE
+ , UBICOM32_INSN_SWAPB_4_D_INDIRECT_WITH_OFFSET_4_S1_IMMEDIATE, UBICOM32_INSN_SWAPB_4_D_INDIRECT_4_S1_IMMEDIATE, UBICOM32_INSN_SWAPB_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_IMMEDIATE, UBICOM32_INSN_SWAPB_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_IMMEDIATE
+ , UBICOM32_INSN_SWAPB_4_D_DIRECT_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_SWAPB_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_SWAPB_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_SWAPB_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_INDEX_4
+ , UBICOM32_INSN_SWAPB_4_D_INDIRECT_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_SWAPB_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_SWAPB_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_SWAPB_4_D_DIRECT_S1_INDIRECT_WITH_OFFSET_4
+ , UBICOM32_INSN_SWAPB_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_SWAPB_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_SWAPB_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_SWAPB_4_D_INDIRECT_4_S1_INDIRECT_WITH_OFFSET_4
+ , UBICOM32_INSN_SWAPB_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_SWAPB_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_SWAPB_4_D_DIRECT_S1_INDIRECT_4, UBICOM32_INSN_SWAPB_4_D_IMMEDIATE_4_S1_INDIRECT_4
+ , UBICOM32_INSN_SWAPB_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_4, UBICOM32_INSN_SWAPB_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_4, UBICOM32_INSN_SWAPB_4_D_INDIRECT_4_S1_INDIRECT_4, UBICOM32_INSN_SWAPB_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_4
+ , UBICOM32_INSN_SWAPB_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_4, UBICOM32_INSN_SWAPB_4_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_SWAPB_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_SWAPB_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_POST_INCREMENT_4
+ , UBICOM32_INSN_SWAPB_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_SWAPB_4_D_INDIRECT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_SWAPB_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_SWAPB_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4
+ , UBICOM32_INSN_SWAPB_4_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_SWAPB_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_SWAPB_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_SWAPB_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_PRE_INCREMENT_4
+ , UBICOM32_INSN_SWAPB_4_D_INDIRECT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_SWAPB_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_SWAPB_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_SWAPB_2_D_DIRECT_S1_DIRECT
+ , UBICOM32_INSN_SWAPB_2_D_IMMEDIATE_2_S1_DIRECT, UBICOM32_INSN_SWAPB_2_D_INDIRECT_WITH_INDEX_2_S1_DIRECT, UBICOM32_INSN_SWAPB_2_D_INDIRECT_WITH_OFFSET_2_S1_DIRECT, UBICOM32_INSN_SWAPB_2_D_INDIRECT_2_S1_DIRECT
+ , UBICOM32_INSN_SWAPB_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_DIRECT, UBICOM32_INSN_SWAPB_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_DIRECT, UBICOM32_INSN_SWAPB_2_D_DIRECT_S1_IMMEDIATE, UBICOM32_INSN_SWAPB_2_D_IMMEDIATE_2_S1_IMMEDIATE
+ , UBICOM32_INSN_SWAPB_2_D_INDIRECT_WITH_INDEX_2_S1_IMMEDIATE, UBICOM32_INSN_SWAPB_2_D_INDIRECT_WITH_OFFSET_2_S1_IMMEDIATE, UBICOM32_INSN_SWAPB_2_D_INDIRECT_2_S1_IMMEDIATE, UBICOM32_INSN_SWAPB_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_IMMEDIATE
+ , UBICOM32_INSN_SWAPB_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_IMMEDIATE, UBICOM32_INSN_SWAPB_2_D_DIRECT_S1_INDIRECT_WITH_INDEX_2, UBICOM32_INSN_SWAPB_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_INDEX_2, UBICOM32_INSN_SWAPB_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_INDEX_2
+ , UBICOM32_INSN_SWAPB_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_INDEX_2, UBICOM32_INSN_SWAPB_2_D_INDIRECT_2_S1_INDIRECT_WITH_INDEX_2, UBICOM32_INSN_SWAPB_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_INDEX_2, UBICOM32_INSN_SWAPB_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_INDEX_2
+ , UBICOM32_INSN_SWAPB_2_D_DIRECT_S1_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_SWAPB_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_SWAPB_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_SWAPB_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_OFFSET_2
+ , UBICOM32_INSN_SWAPB_2_D_INDIRECT_2_S1_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_SWAPB_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_SWAPB_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_SWAPB_2_D_DIRECT_S1_INDIRECT_2
+ , UBICOM32_INSN_SWAPB_2_D_IMMEDIATE_2_S1_INDIRECT_2, UBICOM32_INSN_SWAPB_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_2, UBICOM32_INSN_SWAPB_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_2, UBICOM32_INSN_SWAPB_2_D_INDIRECT_2_S1_INDIRECT_2
+ , UBICOM32_INSN_SWAPB_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_2, UBICOM32_INSN_SWAPB_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_2, UBICOM32_INSN_SWAPB_2_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_INSN_SWAPB_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_POST_INCREMENT_2
+ , UBICOM32_INSN_SWAPB_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_INSN_SWAPB_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_INSN_SWAPB_2_D_INDIRECT_2_S1_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_INSN_SWAPB_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_POST_INCREMENT_2
+ , UBICOM32_INSN_SWAPB_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_INSN_SWAPB_2_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_2, UBICOM32_INSN_SWAPB_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, UBICOM32_INSN_SWAPB_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_PRE_INCREMENT_2
+ , UBICOM32_INSN_SWAPB_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, UBICOM32_INSN_SWAPB_2_D_INDIRECT_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, UBICOM32_INSN_SWAPB_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, UBICOM32_INSN_SWAPB_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_PRE_INCREMENT_2
+ , UBICOM32_INSN_PDEC_D_DIRECT_PDEC_S1_EA_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_PDEC_D_IMMEDIATE_4_PDEC_S1_EA_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_PDEC_D_INDIRECT_WITH_INDEX_4_PDEC_S1_EA_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_PDEC_D_INDIRECT_WITH_OFFSET_4_PDEC_S1_EA_INDIRECT_WITH_OFFSET_4
+ , UBICOM32_INSN_PDEC_D_INDIRECT_4_PDEC_S1_EA_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_PDEC_D_INDIRECT_WITH_POST_INCREMENT_4_PDEC_S1_EA_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_PDEC_D_INDIRECT_WITH_PRE_INCREMENT_4_PDEC_S1_EA_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_LEA_4_D_DIRECT_S1_EA_INDIRECT
+ , UBICOM32_INSN_LEA_4_D_IMMEDIATE_4_S1_EA_INDIRECT, UBICOM32_INSN_LEA_4_D_INDIRECT_WITH_INDEX_4_S1_EA_INDIRECT, UBICOM32_INSN_LEA_4_D_INDIRECT_WITH_OFFSET_4_S1_EA_INDIRECT, UBICOM32_INSN_LEA_4_D_INDIRECT_4_S1_EA_INDIRECT
+ , UBICOM32_INSN_LEA_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_EA_INDIRECT, UBICOM32_INSN_LEA_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_EA_INDIRECT, UBICOM32_INSN_LEA_4_D_DIRECT_S1_EA_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_LEA_4_D_IMMEDIATE_4_S1_EA_INDIRECT_WITH_OFFSET_4
+ , UBICOM32_INSN_LEA_4_D_INDIRECT_WITH_INDEX_4_S1_EA_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_LEA_4_D_INDIRECT_WITH_OFFSET_4_S1_EA_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_LEA_4_D_INDIRECT_4_S1_EA_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_LEA_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_EA_INDIRECT_WITH_OFFSET_4
+ , UBICOM32_INSN_LEA_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_EA_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_LEA_4_D_DIRECT_S1_EA_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_LEA_4_D_IMMEDIATE_4_S1_EA_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_LEA_4_D_INDIRECT_WITH_INDEX_4_S1_EA_INDIRECT_WITH_INDEX_4
+ , UBICOM32_INSN_LEA_4_D_INDIRECT_WITH_OFFSET_4_S1_EA_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_LEA_4_D_INDIRECT_4_S1_EA_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_LEA_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_EA_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_LEA_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_EA_INDIRECT_WITH_INDEX_4
+ , UBICOM32_INSN_LEA_4_D_DIRECT_S1_EA_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_LEA_4_D_IMMEDIATE_4_S1_EA_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_LEA_4_D_INDIRECT_WITH_INDEX_4_S1_EA_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_LEA_4_D_INDIRECT_WITH_OFFSET_4_S1_EA_INDIRECT_WITH_POST_INCREMENT_4
+ , UBICOM32_INSN_LEA_4_D_INDIRECT_4_S1_EA_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_LEA_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_EA_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_LEA_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_EA_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_LEA_4_D_DIRECT_S1_EA_INDIRECT_WITH_PRE_INCREMENT_4
+ , UBICOM32_INSN_LEA_4_D_IMMEDIATE_4_S1_EA_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_LEA_4_D_INDIRECT_WITH_INDEX_4_S1_EA_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_LEA_4_D_INDIRECT_WITH_OFFSET_4_S1_EA_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_LEA_4_D_INDIRECT_4_S1_EA_INDIRECT_WITH_PRE_INCREMENT_4
+ , UBICOM32_INSN_LEA_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_EA_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_LEA_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_EA_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_LEA_4_D_DIRECT_S1_EA_IMMEDIATE, UBICOM32_INSN_LEA_4_D_IMMEDIATE_4_S1_EA_IMMEDIATE
+ , UBICOM32_INSN_LEA_4_D_INDIRECT_WITH_INDEX_4_S1_EA_IMMEDIATE, UBICOM32_INSN_LEA_4_D_INDIRECT_WITH_OFFSET_4_S1_EA_IMMEDIATE, UBICOM32_INSN_LEA_4_D_INDIRECT_4_S1_EA_IMMEDIATE, UBICOM32_INSN_LEA_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_EA_IMMEDIATE
+ , UBICOM32_INSN_LEA_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_EA_IMMEDIATE, UBICOM32_INSN_LEA_2_D_DIRECT_S1_EA_INDIRECT, UBICOM32_INSN_LEA_2_D_IMMEDIATE_4_S1_EA_INDIRECT, UBICOM32_INSN_LEA_2_D_INDIRECT_WITH_INDEX_4_S1_EA_INDIRECT
+ , UBICOM32_INSN_LEA_2_D_INDIRECT_WITH_OFFSET_4_S1_EA_INDIRECT, UBICOM32_INSN_LEA_2_D_INDIRECT_4_S1_EA_INDIRECT, UBICOM32_INSN_LEA_2_D_INDIRECT_WITH_POST_INCREMENT_4_S1_EA_INDIRECT, UBICOM32_INSN_LEA_2_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_EA_INDIRECT
+ , UBICOM32_INSN_LEA_2_D_DIRECT_S1_EA_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_LEA_2_D_IMMEDIATE_4_S1_EA_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_LEA_2_D_INDIRECT_WITH_INDEX_4_S1_EA_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_LEA_2_D_INDIRECT_WITH_OFFSET_4_S1_EA_INDIRECT_WITH_OFFSET_2
+ , UBICOM32_INSN_LEA_2_D_INDIRECT_4_S1_EA_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_LEA_2_D_INDIRECT_WITH_POST_INCREMENT_4_S1_EA_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_LEA_2_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_EA_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_LEA_2_D_DIRECT_S1_EA_INDIRECT_WITH_INDEX_2
+ , UBICOM32_INSN_LEA_2_D_IMMEDIATE_4_S1_EA_INDIRECT_WITH_INDEX_2, UBICOM32_INSN_LEA_2_D_INDIRECT_WITH_INDEX_4_S1_EA_INDIRECT_WITH_INDEX_2, UBICOM32_INSN_LEA_2_D_INDIRECT_WITH_OFFSET_4_S1_EA_INDIRECT_WITH_INDEX_2, UBICOM32_INSN_LEA_2_D_INDIRECT_4_S1_EA_INDIRECT_WITH_INDEX_2
+ , UBICOM32_INSN_LEA_2_D_INDIRECT_WITH_POST_INCREMENT_4_S1_EA_INDIRECT_WITH_INDEX_2, UBICOM32_INSN_LEA_2_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_EA_INDIRECT_WITH_INDEX_2, UBICOM32_INSN_LEA_2_D_DIRECT_S1_EA_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_INSN_LEA_2_D_IMMEDIATE_4_S1_EA_INDIRECT_WITH_POST_INCREMENT_2
+ , UBICOM32_INSN_LEA_2_D_INDIRECT_WITH_INDEX_4_S1_EA_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_INSN_LEA_2_D_INDIRECT_WITH_OFFSET_4_S1_EA_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_INSN_LEA_2_D_INDIRECT_4_S1_EA_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_INSN_LEA_2_D_INDIRECT_WITH_POST_INCREMENT_4_S1_EA_INDIRECT_WITH_POST_INCREMENT_2
+ , UBICOM32_INSN_LEA_2_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_EA_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_INSN_LEA_2_D_DIRECT_S1_EA_INDIRECT_WITH_PRE_INCREMENT_2, UBICOM32_INSN_LEA_2_D_IMMEDIATE_4_S1_EA_INDIRECT_WITH_PRE_INCREMENT_2, UBICOM32_INSN_LEA_2_D_INDIRECT_WITH_INDEX_4_S1_EA_INDIRECT_WITH_PRE_INCREMENT_2
+ , UBICOM32_INSN_LEA_2_D_INDIRECT_WITH_OFFSET_4_S1_EA_INDIRECT_WITH_PRE_INCREMENT_2, UBICOM32_INSN_LEA_2_D_INDIRECT_4_S1_EA_INDIRECT_WITH_PRE_INCREMENT_2, UBICOM32_INSN_LEA_2_D_INDIRECT_WITH_POST_INCREMENT_4_S1_EA_INDIRECT_WITH_PRE_INCREMENT_2, UBICOM32_INSN_LEA_2_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_EA_INDIRECT_WITH_PRE_INCREMENT_2
+ , UBICOM32_INSN_LEA_2_D_DIRECT_S1_EA_IMMEDIATE, UBICOM32_INSN_LEA_2_D_IMMEDIATE_4_S1_EA_IMMEDIATE, UBICOM32_INSN_LEA_2_D_INDIRECT_WITH_INDEX_4_S1_EA_IMMEDIATE, UBICOM32_INSN_LEA_2_D_INDIRECT_WITH_OFFSET_4_S1_EA_IMMEDIATE
+ , UBICOM32_INSN_LEA_2_D_INDIRECT_4_S1_EA_IMMEDIATE, UBICOM32_INSN_LEA_2_D_INDIRECT_WITH_POST_INCREMENT_4_S1_EA_IMMEDIATE, UBICOM32_INSN_LEA_2_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_EA_IMMEDIATE, UBICOM32_INSN_LEA_1_D_DIRECT_S1_EA_INDIRECT
+ , UBICOM32_INSN_LEA_1_D_IMMEDIATE_4_S1_EA_INDIRECT, UBICOM32_INSN_LEA_1_D_INDIRECT_WITH_INDEX_4_S1_EA_INDIRECT, UBICOM32_INSN_LEA_1_D_INDIRECT_WITH_OFFSET_4_S1_EA_INDIRECT, UBICOM32_INSN_LEA_1_D_INDIRECT_4_S1_EA_INDIRECT
+ , UBICOM32_INSN_LEA_1_D_INDIRECT_WITH_POST_INCREMENT_4_S1_EA_INDIRECT, UBICOM32_INSN_LEA_1_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_EA_INDIRECT, UBICOM32_INSN_LEA_1_D_DIRECT_S1_EA_INDIRECT_WITH_OFFSET_1, UBICOM32_INSN_LEA_1_D_IMMEDIATE_4_S1_EA_INDIRECT_WITH_OFFSET_1
+ , UBICOM32_INSN_LEA_1_D_INDIRECT_WITH_INDEX_4_S1_EA_INDIRECT_WITH_OFFSET_1, UBICOM32_INSN_LEA_1_D_INDIRECT_WITH_OFFSET_4_S1_EA_INDIRECT_WITH_OFFSET_1, UBICOM32_INSN_LEA_1_D_INDIRECT_4_S1_EA_INDIRECT_WITH_OFFSET_1, UBICOM32_INSN_LEA_1_D_INDIRECT_WITH_POST_INCREMENT_4_S1_EA_INDIRECT_WITH_OFFSET_1
+ , UBICOM32_INSN_LEA_1_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_EA_INDIRECT_WITH_OFFSET_1, UBICOM32_INSN_LEA_1_D_DIRECT_S1_EA_INDIRECT_WITH_INDEX_1, UBICOM32_INSN_LEA_1_D_IMMEDIATE_4_S1_EA_INDIRECT_WITH_INDEX_1, UBICOM32_INSN_LEA_1_D_INDIRECT_WITH_INDEX_4_S1_EA_INDIRECT_WITH_INDEX_1
+ , UBICOM32_INSN_LEA_1_D_INDIRECT_WITH_OFFSET_4_S1_EA_INDIRECT_WITH_INDEX_1, UBICOM32_INSN_LEA_1_D_INDIRECT_4_S1_EA_INDIRECT_WITH_INDEX_1, UBICOM32_INSN_LEA_1_D_INDIRECT_WITH_POST_INCREMENT_4_S1_EA_INDIRECT_WITH_INDEX_1, UBICOM32_INSN_LEA_1_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_EA_INDIRECT_WITH_INDEX_1
+ , UBICOM32_INSN_LEA_1_D_DIRECT_S1_EA_INDIRECT_WITH_POST_INCREMENT_1, UBICOM32_INSN_LEA_1_D_IMMEDIATE_4_S1_EA_INDIRECT_WITH_POST_INCREMENT_1, UBICOM32_INSN_LEA_1_D_INDIRECT_WITH_INDEX_4_S1_EA_INDIRECT_WITH_POST_INCREMENT_1, UBICOM32_INSN_LEA_1_D_INDIRECT_WITH_OFFSET_4_S1_EA_INDIRECT_WITH_POST_INCREMENT_1
+ , UBICOM32_INSN_LEA_1_D_INDIRECT_4_S1_EA_INDIRECT_WITH_POST_INCREMENT_1, UBICOM32_INSN_LEA_1_D_INDIRECT_WITH_POST_INCREMENT_4_S1_EA_INDIRECT_WITH_POST_INCREMENT_1, UBICOM32_INSN_LEA_1_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_EA_INDIRECT_WITH_POST_INCREMENT_1, UBICOM32_INSN_LEA_1_D_DIRECT_S1_EA_INDIRECT_WITH_PRE_INCREMENT_1
+ , UBICOM32_INSN_LEA_1_D_IMMEDIATE_4_S1_EA_INDIRECT_WITH_PRE_INCREMENT_1, UBICOM32_INSN_LEA_1_D_INDIRECT_WITH_INDEX_4_S1_EA_INDIRECT_WITH_PRE_INCREMENT_1, UBICOM32_INSN_LEA_1_D_INDIRECT_WITH_OFFSET_4_S1_EA_INDIRECT_WITH_PRE_INCREMENT_1, UBICOM32_INSN_LEA_1_D_INDIRECT_4_S1_EA_INDIRECT_WITH_PRE_INCREMENT_1
+ , UBICOM32_INSN_LEA_1_D_INDIRECT_WITH_POST_INCREMENT_4_S1_EA_INDIRECT_WITH_PRE_INCREMENT_1, UBICOM32_INSN_LEA_1_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_EA_INDIRECT_WITH_PRE_INCREMENT_1, UBICOM32_INSN_LEA_1_D_DIRECT_S1_EA_IMMEDIATE, UBICOM32_INSN_LEA_1_D_IMMEDIATE_4_S1_EA_IMMEDIATE
+ , UBICOM32_INSN_LEA_1_D_INDIRECT_WITH_INDEX_4_S1_EA_IMMEDIATE, UBICOM32_INSN_LEA_1_D_INDIRECT_WITH_OFFSET_4_S1_EA_IMMEDIATE, UBICOM32_INSN_LEA_1_D_INDIRECT_4_S1_EA_IMMEDIATE, UBICOM32_INSN_LEA_1_D_INDIRECT_WITH_POST_INCREMENT_4_S1_EA_IMMEDIATE
+ , UBICOM32_INSN_LEA_1_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_EA_IMMEDIATE, UBICOM32_INSN_CMPI_S1_DIRECT, UBICOM32_INSN_CMPI_S1_IMMEDIATE, UBICOM32_INSN_CMPI_S1_INDIRECT_WITH_INDEX_2
+ , UBICOM32_INSN_CMPI_S1_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_CMPI_S1_INDIRECT_2, UBICOM32_INSN_CMPI_S1_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_INSN_CMPI_S1_INDIRECT_WITH_PRE_INCREMENT_2
+ , UBICOM32_INSN_PXADDS_U_D_DIRECT_S1_DIRECT, UBICOM32_INSN_PXADDS_U_D_IMMEDIATE_2_S1_DIRECT, UBICOM32_INSN_PXADDS_U_D_INDIRECT_WITH_INDEX_2_S1_DIRECT, UBICOM32_INSN_PXADDS_U_D_INDIRECT_WITH_OFFSET_2_S1_DIRECT
+ , UBICOM32_INSN_PXADDS_U_D_INDIRECT_2_S1_DIRECT, UBICOM32_INSN_PXADDS_U_D_INDIRECT_WITH_POST_INCREMENT_2_S1_DIRECT, UBICOM32_INSN_PXADDS_U_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_DIRECT, UBICOM32_INSN_PXADDS_U_D_DIRECT_S1_IMMEDIATE
+ , UBICOM32_INSN_PXADDS_U_D_IMMEDIATE_2_S1_IMMEDIATE, UBICOM32_INSN_PXADDS_U_D_INDIRECT_WITH_INDEX_2_S1_IMMEDIATE, UBICOM32_INSN_PXADDS_U_D_INDIRECT_WITH_OFFSET_2_S1_IMMEDIATE, UBICOM32_INSN_PXADDS_U_D_INDIRECT_2_S1_IMMEDIATE
+ , UBICOM32_INSN_PXADDS_U_D_INDIRECT_WITH_POST_INCREMENT_2_S1_IMMEDIATE, UBICOM32_INSN_PXADDS_U_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_IMMEDIATE, UBICOM32_INSN_PXADDS_U_D_DIRECT_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_PXADDS_U_D_IMMEDIATE_2_S1_INDIRECT_WITH_INDEX_4
+ , UBICOM32_INSN_PXADDS_U_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_PXADDS_U_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_PXADDS_U_D_INDIRECT_2_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_PXADDS_U_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_INDEX_4
+ , UBICOM32_INSN_PXADDS_U_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_PXADDS_U_D_DIRECT_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_PXADDS_U_D_IMMEDIATE_2_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_PXADDS_U_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_OFFSET_4
+ , UBICOM32_INSN_PXADDS_U_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_PXADDS_U_D_INDIRECT_2_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_PXADDS_U_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_PXADDS_U_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_OFFSET_4
+ , UBICOM32_INSN_PXADDS_U_D_DIRECT_S1_INDIRECT_4, UBICOM32_INSN_PXADDS_U_D_IMMEDIATE_2_S1_INDIRECT_4, UBICOM32_INSN_PXADDS_U_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_4, UBICOM32_INSN_PXADDS_U_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_4
+ , UBICOM32_INSN_PXADDS_U_D_INDIRECT_2_S1_INDIRECT_4, UBICOM32_INSN_PXADDS_U_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_4, UBICOM32_INSN_PXADDS_U_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_4, UBICOM32_INSN_PXADDS_U_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_4
+ , UBICOM32_INSN_PXADDS_U_D_IMMEDIATE_2_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_PXADDS_U_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_PXADDS_U_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_PXADDS_U_D_INDIRECT_2_S1_INDIRECT_WITH_POST_INCREMENT_4
+ , UBICOM32_INSN_PXADDS_U_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_PXADDS_U_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_PXADDS_U_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_PXADDS_U_D_IMMEDIATE_2_S1_INDIRECT_WITH_PRE_INCREMENT_4
+ , UBICOM32_INSN_PXADDS_U_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_PXADDS_U_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_PXADDS_U_D_INDIRECT_2_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_PXADDS_U_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_PRE_INCREMENT_4
+ , UBICOM32_INSN_PXADDS_U_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_PXADDS_D_DIRECT_S1_DIRECT, UBICOM32_INSN_PXADDS_D_IMMEDIATE_2_S1_DIRECT, UBICOM32_INSN_PXADDS_D_INDIRECT_WITH_INDEX_2_S1_DIRECT
+ , UBICOM32_INSN_PXADDS_D_INDIRECT_WITH_OFFSET_2_S1_DIRECT, UBICOM32_INSN_PXADDS_D_INDIRECT_2_S1_DIRECT, UBICOM32_INSN_PXADDS_D_INDIRECT_WITH_POST_INCREMENT_2_S1_DIRECT, UBICOM32_INSN_PXADDS_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_DIRECT
+ , UBICOM32_INSN_PXADDS_D_DIRECT_S1_IMMEDIATE, UBICOM32_INSN_PXADDS_D_IMMEDIATE_2_S1_IMMEDIATE, UBICOM32_INSN_PXADDS_D_INDIRECT_WITH_INDEX_2_S1_IMMEDIATE, UBICOM32_INSN_PXADDS_D_INDIRECT_WITH_OFFSET_2_S1_IMMEDIATE
+ , UBICOM32_INSN_PXADDS_D_INDIRECT_2_S1_IMMEDIATE, UBICOM32_INSN_PXADDS_D_INDIRECT_WITH_POST_INCREMENT_2_S1_IMMEDIATE, UBICOM32_INSN_PXADDS_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_IMMEDIATE, UBICOM32_INSN_PXADDS_D_DIRECT_S1_INDIRECT_WITH_INDEX_4
+ , UBICOM32_INSN_PXADDS_D_IMMEDIATE_2_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_PXADDS_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_PXADDS_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_PXADDS_D_INDIRECT_2_S1_INDIRECT_WITH_INDEX_4
+ , UBICOM32_INSN_PXADDS_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_PXADDS_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_PXADDS_D_DIRECT_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_PXADDS_D_IMMEDIATE_2_S1_INDIRECT_WITH_OFFSET_4
+ , UBICOM32_INSN_PXADDS_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_PXADDS_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_PXADDS_D_INDIRECT_2_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_PXADDS_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_OFFSET_4
+ , UBICOM32_INSN_PXADDS_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_PXADDS_D_DIRECT_S1_INDIRECT_4, UBICOM32_INSN_PXADDS_D_IMMEDIATE_2_S1_INDIRECT_4, UBICOM32_INSN_PXADDS_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_4
+ , UBICOM32_INSN_PXADDS_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_4, UBICOM32_INSN_PXADDS_D_INDIRECT_2_S1_INDIRECT_4, UBICOM32_INSN_PXADDS_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_4, UBICOM32_INSN_PXADDS_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_4
+ , UBICOM32_INSN_PXADDS_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_PXADDS_D_IMMEDIATE_2_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_PXADDS_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_PXADDS_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_POST_INCREMENT_4
+ , UBICOM32_INSN_PXADDS_D_INDIRECT_2_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_PXADDS_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_PXADDS_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_PXADDS_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_4
+ , UBICOM32_INSN_PXADDS_D_IMMEDIATE_2_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_PXADDS_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_PXADDS_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_PXADDS_D_INDIRECT_2_S1_INDIRECT_WITH_PRE_INCREMENT_4
+ , UBICOM32_INSN_PXADDS_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_PXADDS_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_PXHI_S_S1_DIRECT, UBICOM32_INSN_PXHI_S_S1_IMMEDIATE
+ , UBICOM32_INSN_PXHI_S_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_PXHI_S_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_PXHI_S_S1_INDIRECT_4, UBICOM32_INSN_PXHI_S_S1_INDIRECT_WITH_POST_INCREMENT_4
+ , UBICOM32_INSN_PXHI_S_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_PXHI_S1_DIRECT, UBICOM32_INSN_PXHI_S1_IMMEDIATE, UBICOM32_INSN_PXHI_S1_INDIRECT_WITH_INDEX_4
+ , UBICOM32_INSN_PXHI_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_PXHI_S1_INDIRECT_4, UBICOM32_INSN_PXHI_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_PXHI_S1_INDIRECT_WITH_PRE_INCREMENT_4
+ , UBICOM32_INSN_PXVI_S_D_DIRECT_S1_DIRECT, UBICOM32_INSN_PXVI_S_D_IMMEDIATE_4_S1_DIRECT, UBICOM32_INSN_PXVI_S_D_INDIRECT_WITH_INDEX_4_S1_DIRECT, UBICOM32_INSN_PXVI_S_D_INDIRECT_WITH_OFFSET_4_S1_DIRECT
+ , UBICOM32_INSN_PXVI_S_D_INDIRECT_4_S1_DIRECT, UBICOM32_INSN_PXVI_S_D_INDIRECT_WITH_POST_INCREMENT_4_S1_DIRECT, UBICOM32_INSN_PXVI_S_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_DIRECT, UBICOM32_INSN_PXVI_S_D_DIRECT_S1_IMMEDIATE
+ , UBICOM32_INSN_PXVI_S_D_IMMEDIATE_4_S1_IMMEDIATE, UBICOM32_INSN_PXVI_S_D_INDIRECT_WITH_INDEX_4_S1_IMMEDIATE, UBICOM32_INSN_PXVI_S_D_INDIRECT_WITH_OFFSET_4_S1_IMMEDIATE, UBICOM32_INSN_PXVI_S_D_INDIRECT_4_S1_IMMEDIATE
+ , UBICOM32_INSN_PXVI_S_D_INDIRECT_WITH_POST_INCREMENT_4_S1_IMMEDIATE, UBICOM32_INSN_PXVI_S_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_IMMEDIATE, UBICOM32_INSN_PXVI_S_D_DIRECT_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_PXVI_S_D_IMMEDIATE_4_S1_INDIRECT_WITH_INDEX_4
+ , UBICOM32_INSN_PXVI_S_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_PXVI_S_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_PXVI_S_D_INDIRECT_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_PXVI_S_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4
+ , UBICOM32_INSN_PXVI_S_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_PXVI_S_D_DIRECT_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_PXVI_S_D_IMMEDIATE_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_PXVI_S_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_OFFSET_4
+ , UBICOM32_INSN_PXVI_S_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_PXVI_S_D_INDIRECT_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_PXVI_S_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_PXVI_S_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4
+ , UBICOM32_INSN_PXVI_S_D_DIRECT_S1_INDIRECT_4, UBICOM32_INSN_PXVI_S_D_IMMEDIATE_4_S1_INDIRECT_4, UBICOM32_INSN_PXVI_S_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_4, UBICOM32_INSN_PXVI_S_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_4
+ , UBICOM32_INSN_PXVI_S_D_INDIRECT_4_S1_INDIRECT_4, UBICOM32_INSN_PXVI_S_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_4, UBICOM32_INSN_PXVI_S_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_4, UBICOM32_INSN_PXVI_S_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_4
+ , UBICOM32_INSN_PXVI_S_D_IMMEDIATE_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_PXVI_S_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_PXVI_S_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_PXVI_S_D_INDIRECT_4_S1_INDIRECT_WITH_POST_INCREMENT_4
+ , UBICOM32_INSN_PXVI_S_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_PXVI_S_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_PXVI_S_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_PXVI_S_D_IMMEDIATE_4_S1_INDIRECT_WITH_PRE_INCREMENT_4
+ , UBICOM32_INSN_PXVI_S_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_PXVI_S_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_PXVI_S_D_INDIRECT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_PXVI_S_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4
+ , UBICOM32_INSN_PXVI_S_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_PXVI_D_DIRECT_S1_DIRECT, UBICOM32_INSN_PXVI_D_IMMEDIATE_4_S1_DIRECT, UBICOM32_INSN_PXVI_D_INDIRECT_WITH_INDEX_4_S1_DIRECT
+ , UBICOM32_INSN_PXVI_D_INDIRECT_WITH_OFFSET_4_S1_DIRECT, UBICOM32_INSN_PXVI_D_INDIRECT_4_S1_DIRECT, UBICOM32_INSN_PXVI_D_INDIRECT_WITH_POST_INCREMENT_4_S1_DIRECT, UBICOM32_INSN_PXVI_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_DIRECT
+ , UBICOM32_INSN_PXVI_D_DIRECT_S1_IMMEDIATE, UBICOM32_INSN_PXVI_D_IMMEDIATE_4_S1_IMMEDIATE, UBICOM32_INSN_PXVI_D_INDIRECT_WITH_INDEX_4_S1_IMMEDIATE, UBICOM32_INSN_PXVI_D_INDIRECT_WITH_OFFSET_4_S1_IMMEDIATE
+ , UBICOM32_INSN_PXVI_D_INDIRECT_4_S1_IMMEDIATE, UBICOM32_INSN_PXVI_D_INDIRECT_WITH_POST_INCREMENT_4_S1_IMMEDIATE, UBICOM32_INSN_PXVI_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_IMMEDIATE, UBICOM32_INSN_PXVI_D_DIRECT_S1_INDIRECT_WITH_INDEX_4
+ , UBICOM32_INSN_PXVI_D_IMMEDIATE_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_PXVI_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_PXVI_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_PXVI_D_INDIRECT_4_S1_INDIRECT_WITH_INDEX_4
+ , UBICOM32_INSN_PXVI_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_PXVI_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_PXVI_D_DIRECT_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_PXVI_D_IMMEDIATE_4_S1_INDIRECT_WITH_OFFSET_4
+ , UBICOM32_INSN_PXVI_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_PXVI_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_PXVI_D_INDIRECT_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_PXVI_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4
+ , UBICOM32_INSN_PXVI_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_PXVI_D_DIRECT_S1_INDIRECT_4, UBICOM32_INSN_PXVI_D_IMMEDIATE_4_S1_INDIRECT_4, UBICOM32_INSN_PXVI_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_4
+ , UBICOM32_INSN_PXVI_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_4, UBICOM32_INSN_PXVI_D_INDIRECT_4_S1_INDIRECT_4, UBICOM32_INSN_PXVI_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_4, UBICOM32_INSN_PXVI_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_4
+ , UBICOM32_INSN_PXVI_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_PXVI_D_IMMEDIATE_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_PXVI_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_PXVI_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_POST_INCREMENT_4
+ , UBICOM32_INSN_PXVI_D_INDIRECT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_PXVI_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_PXVI_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_PXVI_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_4
+ , UBICOM32_INSN_PXVI_D_IMMEDIATE_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_PXVI_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_PXVI_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_PXVI_D_INDIRECT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4
+ , UBICOM32_INSN_PXVI_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_PXVI_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_PXBLEND_T_D_DIRECT_S1_DIRECT, UBICOM32_INSN_PXBLEND_T_D_IMMEDIATE_4_S1_DIRECT
+ , UBICOM32_INSN_PXBLEND_T_D_INDIRECT_WITH_INDEX_4_S1_DIRECT, UBICOM32_INSN_PXBLEND_T_D_INDIRECT_WITH_OFFSET_4_S1_DIRECT, UBICOM32_INSN_PXBLEND_T_D_INDIRECT_4_S1_DIRECT, UBICOM32_INSN_PXBLEND_T_D_INDIRECT_WITH_POST_INCREMENT_4_S1_DIRECT
+ , UBICOM32_INSN_PXBLEND_T_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_DIRECT, UBICOM32_INSN_PXBLEND_T_D_DIRECT_S1_IMMEDIATE, UBICOM32_INSN_PXBLEND_T_D_IMMEDIATE_4_S1_IMMEDIATE, UBICOM32_INSN_PXBLEND_T_D_INDIRECT_WITH_INDEX_4_S1_IMMEDIATE
+ , UBICOM32_INSN_PXBLEND_T_D_INDIRECT_WITH_OFFSET_4_S1_IMMEDIATE, UBICOM32_INSN_PXBLEND_T_D_INDIRECT_4_S1_IMMEDIATE, UBICOM32_INSN_PXBLEND_T_D_INDIRECT_WITH_POST_INCREMENT_4_S1_IMMEDIATE, UBICOM32_INSN_PXBLEND_T_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_IMMEDIATE
+ , UBICOM32_INSN_PXBLEND_T_D_DIRECT_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_PXBLEND_T_D_IMMEDIATE_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_PXBLEND_T_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_PXBLEND_T_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_INDEX_4
+ , UBICOM32_INSN_PXBLEND_T_D_INDIRECT_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_PXBLEND_T_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_PXBLEND_T_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_PXBLEND_T_D_DIRECT_S1_INDIRECT_WITH_OFFSET_4
+ , UBICOM32_INSN_PXBLEND_T_D_IMMEDIATE_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_PXBLEND_T_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_PXBLEND_T_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_PXBLEND_T_D_INDIRECT_4_S1_INDIRECT_WITH_OFFSET_4
+ , UBICOM32_INSN_PXBLEND_T_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_PXBLEND_T_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_PXBLEND_T_D_DIRECT_S1_INDIRECT_4, UBICOM32_INSN_PXBLEND_T_D_IMMEDIATE_4_S1_INDIRECT_4
+ , UBICOM32_INSN_PXBLEND_T_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_4, UBICOM32_INSN_PXBLEND_T_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_4, UBICOM32_INSN_PXBLEND_T_D_INDIRECT_4_S1_INDIRECT_4, UBICOM32_INSN_PXBLEND_T_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_4
+ , UBICOM32_INSN_PXBLEND_T_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_4, UBICOM32_INSN_PXBLEND_T_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_PXBLEND_T_D_IMMEDIATE_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_PXBLEND_T_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_POST_INCREMENT_4
+ , UBICOM32_INSN_PXBLEND_T_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_PXBLEND_T_D_INDIRECT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_PXBLEND_T_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_PXBLEND_T_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4
+ , UBICOM32_INSN_PXBLEND_T_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_PXBLEND_T_D_IMMEDIATE_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_PXBLEND_T_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_PXBLEND_T_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_PRE_INCREMENT_4
+ , UBICOM32_INSN_PXBLEND_T_D_INDIRECT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_PXBLEND_T_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_PXBLEND_T_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_PXBLEND_D_DIRECT_S1_DIRECT
+ , UBICOM32_INSN_PXBLEND_D_IMMEDIATE_4_S1_DIRECT, UBICOM32_INSN_PXBLEND_D_INDIRECT_WITH_INDEX_4_S1_DIRECT, UBICOM32_INSN_PXBLEND_D_INDIRECT_WITH_OFFSET_4_S1_DIRECT, UBICOM32_INSN_PXBLEND_D_INDIRECT_4_S1_DIRECT
+ , UBICOM32_INSN_PXBLEND_D_INDIRECT_WITH_POST_INCREMENT_4_S1_DIRECT, UBICOM32_INSN_PXBLEND_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_DIRECT, UBICOM32_INSN_PXBLEND_D_DIRECT_S1_IMMEDIATE, UBICOM32_INSN_PXBLEND_D_IMMEDIATE_4_S1_IMMEDIATE
+ , UBICOM32_INSN_PXBLEND_D_INDIRECT_WITH_INDEX_4_S1_IMMEDIATE, UBICOM32_INSN_PXBLEND_D_INDIRECT_WITH_OFFSET_4_S1_IMMEDIATE, UBICOM32_INSN_PXBLEND_D_INDIRECT_4_S1_IMMEDIATE, UBICOM32_INSN_PXBLEND_D_INDIRECT_WITH_POST_INCREMENT_4_S1_IMMEDIATE
+ , UBICOM32_INSN_PXBLEND_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_IMMEDIATE, UBICOM32_INSN_PXBLEND_D_DIRECT_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_PXBLEND_D_IMMEDIATE_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_PXBLEND_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_INDEX_4
+ , UBICOM32_INSN_PXBLEND_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_PXBLEND_D_INDIRECT_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_PXBLEND_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_PXBLEND_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4
+ , UBICOM32_INSN_PXBLEND_D_DIRECT_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_PXBLEND_D_IMMEDIATE_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_PXBLEND_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_PXBLEND_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_OFFSET_4
+ , UBICOM32_INSN_PXBLEND_D_INDIRECT_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_PXBLEND_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_PXBLEND_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_PXBLEND_D_DIRECT_S1_INDIRECT_4
+ , UBICOM32_INSN_PXBLEND_D_IMMEDIATE_4_S1_INDIRECT_4, UBICOM32_INSN_PXBLEND_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_4, UBICOM32_INSN_PXBLEND_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_4, UBICOM32_INSN_PXBLEND_D_INDIRECT_4_S1_INDIRECT_4
+ , UBICOM32_INSN_PXBLEND_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_4, UBICOM32_INSN_PXBLEND_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_4, UBICOM32_INSN_PXBLEND_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_PXBLEND_D_IMMEDIATE_4_S1_INDIRECT_WITH_POST_INCREMENT_4
+ , UBICOM32_INSN_PXBLEND_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_PXBLEND_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_PXBLEND_D_INDIRECT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_PXBLEND_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4
+ , UBICOM32_INSN_PXBLEND_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_PXBLEND_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_PXBLEND_D_IMMEDIATE_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_PXBLEND_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_PRE_INCREMENT_4
+ , UBICOM32_INSN_PXBLEND_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_PXBLEND_D_INDIRECT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_PXBLEND_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_PXBLEND_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4
+ , UBICOM32_INSN_PXCNV_T_D_DIRECT_S1_DIRECT, UBICOM32_INSN_PXCNV_T_D_IMMEDIATE_2_S1_DIRECT, UBICOM32_INSN_PXCNV_T_D_INDIRECT_WITH_INDEX_2_S1_DIRECT, UBICOM32_INSN_PXCNV_T_D_INDIRECT_WITH_OFFSET_2_S1_DIRECT
+ , UBICOM32_INSN_PXCNV_T_D_INDIRECT_2_S1_DIRECT, UBICOM32_INSN_PXCNV_T_D_INDIRECT_WITH_POST_INCREMENT_2_S1_DIRECT, UBICOM32_INSN_PXCNV_T_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_DIRECT, UBICOM32_INSN_PXCNV_T_D_DIRECT_S1_IMMEDIATE
+ , UBICOM32_INSN_PXCNV_T_D_IMMEDIATE_2_S1_IMMEDIATE, UBICOM32_INSN_PXCNV_T_D_INDIRECT_WITH_INDEX_2_S1_IMMEDIATE, UBICOM32_INSN_PXCNV_T_D_INDIRECT_WITH_OFFSET_2_S1_IMMEDIATE, UBICOM32_INSN_PXCNV_T_D_INDIRECT_2_S1_IMMEDIATE
+ , UBICOM32_INSN_PXCNV_T_D_INDIRECT_WITH_POST_INCREMENT_2_S1_IMMEDIATE, UBICOM32_INSN_PXCNV_T_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_IMMEDIATE, UBICOM32_INSN_PXCNV_T_D_DIRECT_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_PXCNV_T_D_IMMEDIATE_2_S1_INDIRECT_WITH_INDEX_4
+ , UBICOM32_INSN_PXCNV_T_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_PXCNV_T_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_PXCNV_T_D_INDIRECT_2_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_PXCNV_T_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_INDEX_4
+ , UBICOM32_INSN_PXCNV_T_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_PXCNV_T_D_DIRECT_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_PXCNV_T_D_IMMEDIATE_2_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_PXCNV_T_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_OFFSET_4
+ , UBICOM32_INSN_PXCNV_T_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_PXCNV_T_D_INDIRECT_2_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_PXCNV_T_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_PXCNV_T_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_OFFSET_4
+ , UBICOM32_INSN_PXCNV_T_D_DIRECT_S1_INDIRECT_4, UBICOM32_INSN_PXCNV_T_D_IMMEDIATE_2_S1_INDIRECT_4, UBICOM32_INSN_PXCNV_T_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_4, UBICOM32_INSN_PXCNV_T_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_4
+ , UBICOM32_INSN_PXCNV_T_D_INDIRECT_2_S1_INDIRECT_4, UBICOM32_INSN_PXCNV_T_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_4, UBICOM32_INSN_PXCNV_T_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_4, UBICOM32_INSN_PXCNV_T_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_4
+ , UBICOM32_INSN_PXCNV_T_D_IMMEDIATE_2_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_PXCNV_T_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_PXCNV_T_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_PXCNV_T_D_INDIRECT_2_S1_INDIRECT_WITH_POST_INCREMENT_4
+ , UBICOM32_INSN_PXCNV_T_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_PXCNV_T_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_PXCNV_T_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_PXCNV_T_D_IMMEDIATE_2_S1_INDIRECT_WITH_PRE_INCREMENT_4
+ , UBICOM32_INSN_PXCNV_T_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_PXCNV_T_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_PXCNV_T_D_INDIRECT_2_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_PXCNV_T_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_PRE_INCREMENT_4
+ , UBICOM32_INSN_PXCNV_T_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_PXCNV_D_DIRECT_S1_DIRECT, UBICOM32_INSN_PXCNV_D_IMMEDIATE_2_S1_DIRECT, UBICOM32_INSN_PXCNV_D_INDIRECT_WITH_INDEX_2_S1_DIRECT
+ , UBICOM32_INSN_PXCNV_D_INDIRECT_WITH_OFFSET_2_S1_DIRECT, UBICOM32_INSN_PXCNV_D_INDIRECT_2_S1_DIRECT, UBICOM32_INSN_PXCNV_D_INDIRECT_WITH_POST_INCREMENT_2_S1_DIRECT, UBICOM32_INSN_PXCNV_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_DIRECT
+ , UBICOM32_INSN_PXCNV_D_DIRECT_S1_IMMEDIATE, UBICOM32_INSN_PXCNV_D_IMMEDIATE_2_S1_IMMEDIATE, UBICOM32_INSN_PXCNV_D_INDIRECT_WITH_INDEX_2_S1_IMMEDIATE, UBICOM32_INSN_PXCNV_D_INDIRECT_WITH_OFFSET_2_S1_IMMEDIATE
+ , UBICOM32_INSN_PXCNV_D_INDIRECT_2_S1_IMMEDIATE, UBICOM32_INSN_PXCNV_D_INDIRECT_WITH_POST_INCREMENT_2_S1_IMMEDIATE, UBICOM32_INSN_PXCNV_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_IMMEDIATE, UBICOM32_INSN_PXCNV_D_DIRECT_S1_INDIRECT_WITH_INDEX_4
+ , UBICOM32_INSN_PXCNV_D_IMMEDIATE_2_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_PXCNV_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_PXCNV_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_PXCNV_D_INDIRECT_2_S1_INDIRECT_WITH_INDEX_4
+ , UBICOM32_INSN_PXCNV_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_PXCNV_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_PXCNV_D_DIRECT_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_PXCNV_D_IMMEDIATE_2_S1_INDIRECT_WITH_OFFSET_4
+ , UBICOM32_INSN_PXCNV_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_PXCNV_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_PXCNV_D_INDIRECT_2_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_PXCNV_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_OFFSET_4
+ , UBICOM32_INSN_PXCNV_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_PXCNV_D_DIRECT_S1_INDIRECT_4, UBICOM32_INSN_PXCNV_D_IMMEDIATE_2_S1_INDIRECT_4, UBICOM32_INSN_PXCNV_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_4
+ , UBICOM32_INSN_PXCNV_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_4, UBICOM32_INSN_PXCNV_D_INDIRECT_2_S1_INDIRECT_4, UBICOM32_INSN_PXCNV_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_4, UBICOM32_INSN_PXCNV_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_4
+ , UBICOM32_INSN_PXCNV_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_PXCNV_D_IMMEDIATE_2_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_PXCNV_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_PXCNV_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_POST_INCREMENT_4
+ , UBICOM32_INSN_PXCNV_D_INDIRECT_2_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_PXCNV_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_PXCNV_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_PXCNV_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_4
+ , UBICOM32_INSN_PXCNV_D_IMMEDIATE_2_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_PXCNV_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_PXCNV_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_PXCNV_D_INDIRECT_2_S1_INDIRECT_WITH_PRE_INCREMENT_4
+ , UBICOM32_INSN_PXCNV_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_PXCNV_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_SUBC_D_DIRECT_S1_DIRECT, UBICOM32_INSN_SUBC_D_IMMEDIATE_4_S1_DIRECT
+ , UBICOM32_INSN_SUBC_D_INDIRECT_WITH_INDEX_4_S1_DIRECT, UBICOM32_INSN_SUBC_D_INDIRECT_WITH_OFFSET_4_S1_DIRECT, UBICOM32_INSN_SUBC_D_INDIRECT_4_S1_DIRECT, UBICOM32_INSN_SUBC_D_INDIRECT_WITH_POST_INCREMENT_4_S1_DIRECT
+ , UBICOM32_INSN_SUBC_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_DIRECT, UBICOM32_INSN_SUBC_D_DIRECT_S1_IMMEDIATE, UBICOM32_INSN_SUBC_D_IMMEDIATE_4_S1_IMMEDIATE, UBICOM32_INSN_SUBC_D_INDIRECT_WITH_INDEX_4_S1_IMMEDIATE
+ , UBICOM32_INSN_SUBC_D_INDIRECT_WITH_OFFSET_4_S1_IMMEDIATE, UBICOM32_INSN_SUBC_D_INDIRECT_4_S1_IMMEDIATE, UBICOM32_INSN_SUBC_D_INDIRECT_WITH_POST_INCREMENT_4_S1_IMMEDIATE, UBICOM32_INSN_SUBC_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_IMMEDIATE
+ , UBICOM32_INSN_SUBC_D_DIRECT_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_SUBC_D_IMMEDIATE_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_SUBC_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_SUBC_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_INDEX_4
+ , UBICOM32_INSN_SUBC_D_INDIRECT_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_SUBC_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_SUBC_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_SUBC_D_DIRECT_S1_INDIRECT_WITH_OFFSET_4
+ , UBICOM32_INSN_SUBC_D_IMMEDIATE_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_SUBC_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_SUBC_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_SUBC_D_INDIRECT_4_S1_INDIRECT_WITH_OFFSET_4
+ , UBICOM32_INSN_SUBC_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_SUBC_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_SUBC_D_DIRECT_S1_INDIRECT_4, UBICOM32_INSN_SUBC_D_IMMEDIATE_4_S1_INDIRECT_4
+ , UBICOM32_INSN_SUBC_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_4, UBICOM32_INSN_SUBC_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_4, UBICOM32_INSN_SUBC_D_INDIRECT_4_S1_INDIRECT_4, UBICOM32_INSN_SUBC_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_4
+ , UBICOM32_INSN_SUBC_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_4, UBICOM32_INSN_SUBC_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_SUBC_D_IMMEDIATE_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_SUBC_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_POST_INCREMENT_4
+ , UBICOM32_INSN_SUBC_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_SUBC_D_INDIRECT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_SUBC_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_SUBC_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4
+ , UBICOM32_INSN_SUBC_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_SUBC_D_IMMEDIATE_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_SUBC_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_SUBC_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_PRE_INCREMENT_4
+ , UBICOM32_INSN_SUBC_D_INDIRECT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_SUBC_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_SUBC_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_ADDC_D_DIRECT_S1_DIRECT
+ , UBICOM32_INSN_ADDC_D_IMMEDIATE_4_S1_DIRECT, UBICOM32_INSN_ADDC_D_INDIRECT_WITH_INDEX_4_S1_DIRECT, UBICOM32_INSN_ADDC_D_INDIRECT_WITH_OFFSET_4_S1_DIRECT, UBICOM32_INSN_ADDC_D_INDIRECT_4_S1_DIRECT
+ , UBICOM32_INSN_ADDC_D_INDIRECT_WITH_POST_INCREMENT_4_S1_DIRECT, UBICOM32_INSN_ADDC_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_DIRECT, UBICOM32_INSN_ADDC_D_DIRECT_S1_IMMEDIATE, UBICOM32_INSN_ADDC_D_IMMEDIATE_4_S1_IMMEDIATE
+ , UBICOM32_INSN_ADDC_D_INDIRECT_WITH_INDEX_4_S1_IMMEDIATE, UBICOM32_INSN_ADDC_D_INDIRECT_WITH_OFFSET_4_S1_IMMEDIATE, UBICOM32_INSN_ADDC_D_INDIRECT_4_S1_IMMEDIATE, UBICOM32_INSN_ADDC_D_INDIRECT_WITH_POST_INCREMENT_4_S1_IMMEDIATE
+ , UBICOM32_INSN_ADDC_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_IMMEDIATE, UBICOM32_INSN_ADDC_D_DIRECT_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_ADDC_D_IMMEDIATE_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_ADDC_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_INDEX_4
+ , UBICOM32_INSN_ADDC_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_ADDC_D_INDIRECT_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_ADDC_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_ADDC_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4
+ , UBICOM32_INSN_ADDC_D_DIRECT_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_ADDC_D_IMMEDIATE_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_ADDC_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_ADDC_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_OFFSET_4
+ , UBICOM32_INSN_ADDC_D_INDIRECT_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_ADDC_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_ADDC_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_ADDC_D_DIRECT_S1_INDIRECT_4
+ , UBICOM32_INSN_ADDC_D_IMMEDIATE_4_S1_INDIRECT_4, UBICOM32_INSN_ADDC_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_4, UBICOM32_INSN_ADDC_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_4, UBICOM32_INSN_ADDC_D_INDIRECT_4_S1_INDIRECT_4
+ , UBICOM32_INSN_ADDC_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_4, UBICOM32_INSN_ADDC_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_4, UBICOM32_INSN_ADDC_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_ADDC_D_IMMEDIATE_4_S1_INDIRECT_WITH_POST_INCREMENT_4
+ , UBICOM32_INSN_ADDC_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_ADDC_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_ADDC_D_INDIRECT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_ADDC_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4
+ , UBICOM32_INSN_ADDC_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_ADDC_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_ADDC_D_IMMEDIATE_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_ADDC_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_PRE_INCREMENT_4
+ , UBICOM32_INSN_ADDC_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_ADDC_D_INDIRECT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_ADDC_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_ADDC_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4
+ , UBICOM32_INSN_SUB_1_D_DIRECT_S1_DIRECT, UBICOM32_INSN_SUB_1_D_IMMEDIATE_1_S1_DIRECT, UBICOM32_INSN_SUB_1_D_INDIRECT_WITH_INDEX_1_S1_DIRECT, UBICOM32_INSN_SUB_1_D_INDIRECT_WITH_OFFSET_1_S1_DIRECT
+ , UBICOM32_INSN_SUB_1_D_INDIRECT_1_S1_DIRECT, UBICOM32_INSN_SUB_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_DIRECT, UBICOM32_INSN_SUB_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_DIRECT, UBICOM32_INSN_SUB_1_D_DIRECT_S1_IMMEDIATE
+ , UBICOM32_INSN_SUB_1_D_IMMEDIATE_1_S1_IMMEDIATE, UBICOM32_INSN_SUB_1_D_INDIRECT_WITH_INDEX_1_S1_IMMEDIATE, UBICOM32_INSN_SUB_1_D_INDIRECT_WITH_OFFSET_1_S1_IMMEDIATE, UBICOM32_INSN_SUB_1_D_INDIRECT_1_S1_IMMEDIATE
+ , UBICOM32_INSN_SUB_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_IMMEDIATE, UBICOM32_INSN_SUB_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_IMMEDIATE, UBICOM32_INSN_SUB_1_D_DIRECT_S1_INDIRECT_WITH_INDEX_1, UBICOM32_INSN_SUB_1_D_IMMEDIATE_1_S1_INDIRECT_WITH_INDEX_1
+ , UBICOM32_INSN_SUB_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_WITH_INDEX_1, UBICOM32_INSN_SUB_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_WITH_INDEX_1, UBICOM32_INSN_SUB_1_D_INDIRECT_1_S1_INDIRECT_WITH_INDEX_1, UBICOM32_INSN_SUB_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_WITH_INDEX_1
+ , UBICOM32_INSN_SUB_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_WITH_INDEX_1, UBICOM32_INSN_SUB_1_D_DIRECT_S1_INDIRECT_WITH_OFFSET_1, UBICOM32_INSN_SUB_1_D_IMMEDIATE_1_S1_INDIRECT_WITH_OFFSET_1, UBICOM32_INSN_SUB_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_WITH_OFFSET_1
+ , UBICOM32_INSN_SUB_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_WITH_OFFSET_1, UBICOM32_INSN_SUB_1_D_INDIRECT_1_S1_INDIRECT_WITH_OFFSET_1, UBICOM32_INSN_SUB_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_WITH_OFFSET_1, UBICOM32_INSN_SUB_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_WITH_OFFSET_1
+ , UBICOM32_INSN_SUB_1_D_DIRECT_S1_INDIRECT_1, UBICOM32_INSN_SUB_1_D_IMMEDIATE_1_S1_INDIRECT_1, UBICOM32_INSN_SUB_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_1, UBICOM32_INSN_SUB_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_1
+ , UBICOM32_INSN_SUB_1_D_INDIRECT_1_S1_INDIRECT_1, UBICOM32_INSN_SUB_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_1, UBICOM32_INSN_SUB_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_1, UBICOM32_INSN_SUB_1_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_1
+ , UBICOM32_INSN_SUB_1_D_IMMEDIATE_1_S1_INDIRECT_WITH_POST_INCREMENT_1, UBICOM32_INSN_SUB_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_WITH_POST_INCREMENT_1, UBICOM32_INSN_SUB_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_WITH_POST_INCREMENT_1, UBICOM32_INSN_SUB_1_D_INDIRECT_1_S1_INDIRECT_WITH_POST_INCREMENT_1
+ , UBICOM32_INSN_SUB_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_WITH_POST_INCREMENT_1, UBICOM32_INSN_SUB_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_WITH_POST_INCREMENT_1, UBICOM32_INSN_SUB_1_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_1, UBICOM32_INSN_SUB_1_D_IMMEDIATE_1_S1_INDIRECT_WITH_PRE_INCREMENT_1
+ , UBICOM32_INSN_SUB_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, UBICOM32_INSN_SUB_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, UBICOM32_INSN_SUB_1_D_INDIRECT_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, UBICOM32_INSN_SUB_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_WITH_PRE_INCREMENT_1
+ , UBICOM32_INSN_SUB_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, UBICOM32_INSN_SUB_4_D_DIRECT_S1_DIRECT, UBICOM32_INSN_SUB_4_D_IMMEDIATE_4_S1_DIRECT, UBICOM32_INSN_SUB_4_D_INDIRECT_WITH_INDEX_4_S1_DIRECT
+ , UBICOM32_INSN_SUB_4_D_INDIRECT_WITH_OFFSET_4_S1_DIRECT, UBICOM32_INSN_SUB_4_D_INDIRECT_4_S1_DIRECT, UBICOM32_INSN_SUB_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_DIRECT, UBICOM32_INSN_SUB_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_DIRECT
+ , UBICOM32_INSN_SUB_4_D_DIRECT_S1_IMMEDIATE, UBICOM32_INSN_SUB_4_D_IMMEDIATE_4_S1_IMMEDIATE, UBICOM32_INSN_SUB_4_D_INDIRECT_WITH_INDEX_4_S1_IMMEDIATE, UBICOM32_INSN_SUB_4_D_INDIRECT_WITH_OFFSET_4_S1_IMMEDIATE
+ , UBICOM32_INSN_SUB_4_D_INDIRECT_4_S1_IMMEDIATE, UBICOM32_INSN_SUB_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_IMMEDIATE, UBICOM32_INSN_SUB_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_IMMEDIATE, UBICOM32_INSN_SUB_4_D_DIRECT_S1_INDIRECT_WITH_INDEX_4
+ , UBICOM32_INSN_SUB_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_SUB_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_SUB_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_SUB_4_D_INDIRECT_4_S1_INDIRECT_WITH_INDEX_4
+ , UBICOM32_INSN_SUB_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_SUB_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_SUB_4_D_DIRECT_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_SUB_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_OFFSET_4
+ , UBICOM32_INSN_SUB_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_SUB_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_SUB_4_D_INDIRECT_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_SUB_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4
+ , UBICOM32_INSN_SUB_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_SUB_4_D_DIRECT_S1_INDIRECT_4, UBICOM32_INSN_SUB_4_D_IMMEDIATE_4_S1_INDIRECT_4, UBICOM32_INSN_SUB_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_4
+ , UBICOM32_INSN_SUB_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_4, UBICOM32_INSN_SUB_4_D_INDIRECT_4_S1_INDIRECT_4, UBICOM32_INSN_SUB_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_4, UBICOM32_INSN_SUB_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_4
+ , UBICOM32_INSN_SUB_4_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_SUB_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_SUB_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_SUB_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_POST_INCREMENT_4
+ , UBICOM32_INSN_SUB_4_D_INDIRECT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_SUB_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_SUB_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_SUB_4_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_4
+ , UBICOM32_INSN_SUB_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_SUB_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_SUB_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_SUB_4_D_INDIRECT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4
+ , UBICOM32_INSN_SUB_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_SUB_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_SUB_2_D_DIRECT_S1_DIRECT, UBICOM32_INSN_SUB_2_D_IMMEDIATE_2_S1_DIRECT
+ , UBICOM32_INSN_SUB_2_D_INDIRECT_WITH_INDEX_2_S1_DIRECT, UBICOM32_INSN_SUB_2_D_INDIRECT_WITH_OFFSET_2_S1_DIRECT, UBICOM32_INSN_SUB_2_D_INDIRECT_2_S1_DIRECT, UBICOM32_INSN_SUB_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_DIRECT
+ , UBICOM32_INSN_SUB_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_DIRECT, UBICOM32_INSN_SUB_2_D_DIRECT_S1_IMMEDIATE, UBICOM32_INSN_SUB_2_D_IMMEDIATE_2_S1_IMMEDIATE, UBICOM32_INSN_SUB_2_D_INDIRECT_WITH_INDEX_2_S1_IMMEDIATE
+ , UBICOM32_INSN_SUB_2_D_INDIRECT_WITH_OFFSET_2_S1_IMMEDIATE, UBICOM32_INSN_SUB_2_D_INDIRECT_2_S1_IMMEDIATE, UBICOM32_INSN_SUB_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_IMMEDIATE, UBICOM32_INSN_SUB_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_IMMEDIATE
+ , UBICOM32_INSN_SUB_2_D_DIRECT_S1_INDIRECT_WITH_INDEX_2, UBICOM32_INSN_SUB_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_INDEX_2, UBICOM32_INSN_SUB_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_INDEX_2, UBICOM32_INSN_SUB_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_INDEX_2
+ , UBICOM32_INSN_SUB_2_D_INDIRECT_2_S1_INDIRECT_WITH_INDEX_2, UBICOM32_INSN_SUB_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_INDEX_2, UBICOM32_INSN_SUB_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_INDEX_2, UBICOM32_INSN_SUB_2_D_DIRECT_S1_INDIRECT_WITH_OFFSET_2
+ , UBICOM32_INSN_SUB_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_SUB_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_SUB_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_SUB_2_D_INDIRECT_2_S1_INDIRECT_WITH_OFFSET_2
+ , UBICOM32_INSN_SUB_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_SUB_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_SUB_2_D_DIRECT_S1_INDIRECT_2, UBICOM32_INSN_SUB_2_D_IMMEDIATE_2_S1_INDIRECT_2
+ , UBICOM32_INSN_SUB_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_2, UBICOM32_INSN_SUB_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_2, UBICOM32_INSN_SUB_2_D_INDIRECT_2_S1_INDIRECT_2, UBICOM32_INSN_SUB_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_2
+ , UBICOM32_INSN_SUB_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_2, UBICOM32_INSN_SUB_2_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_INSN_SUB_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_INSN_SUB_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_POST_INCREMENT_2
+ , UBICOM32_INSN_SUB_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_INSN_SUB_2_D_INDIRECT_2_S1_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_INSN_SUB_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_INSN_SUB_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_POST_INCREMENT_2
+ , UBICOM32_INSN_SUB_2_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_2, UBICOM32_INSN_SUB_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, UBICOM32_INSN_SUB_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, UBICOM32_INSN_SUB_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_PRE_INCREMENT_2
+ , UBICOM32_INSN_SUB_2_D_INDIRECT_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, UBICOM32_INSN_SUB_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, UBICOM32_INSN_SUB_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, UBICOM32_INSN_ADD_1_D_DIRECT_S1_DIRECT
+ , UBICOM32_INSN_ADD_1_D_IMMEDIATE_1_S1_DIRECT, UBICOM32_INSN_ADD_1_D_INDIRECT_WITH_INDEX_1_S1_DIRECT, UBICOM32_INSN_ADD_1_D_INDIRECT_WITH_OFFSET_1_S1_DIRECT, UBICOM32_INSN_ADD_1_D_INDIRECT_1_S1_DIRECT
+ , UBICOM32_INSN_ADD_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_DIRECT, UBICOM32_INSN_ADD_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_DIRECT, UBICOM32_INSN_ADD_1_D_DIRECT_S1_IMMEDIATE, UBICOM32_INSN_ADD_1_D_IMMEDIATE_1_S1_IMMEDIATE
+ , UBICOM32_INSN_ADD_1_D_INDIRECT_WITH_INDEX_1_S1_IMMEDIATE, UBICOM32_INSN_ADD_1_D_INDIRECT_WITH_OFFSET_1_S1_IMMEDIATE, UBICOM32_INSN_ADD_1_D_INDIRECT_1_S1_IMMEDIATE, UBICOM32_INSN_ADD_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_IMMEDIATE
+ , UBICOM32_INSN_ADD_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_IMMEDIATE, UBICOM32_INSN_ADD_1_D_DIRECT_S1_INDIRECT_WITH_INDEX_1, UBICOM32_INSN_ADD_1_D_IMMEDIATE_1_S1_INDIRECT_WITH_INDEX_1, UBICOM32_INSN_ADD_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_WITH_INDEX_1
+ , UBICOM32_INSN_ADD_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_WITH_INDEX_1, UBICOM32_INSN_ADD_1_D_INDIRECT_1_S1_INDIRECT_WITH_INDEX_1, UBICOM32_INSN_ADD_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_WITH_INDEX_1, UBICOM32_INSN_ADD_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_WITH_INDEX_1
+ , UBICOM32_INSN_ADD_1_D_DIRECT_S1_INDIRECT_WITH_OFFSET_1, UBICOM32_INSN_ADD_1_D_IMMEDIATE_1_S1_INDIRECT_WITH_OFFSET_1, UBICOM32_INSN_ADD_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_WITH_OFFSET_1, UBICOM32_INSN_ADD_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_WITH_OFFSET_1
+ , UBICOM32_INSN_ADD_1_D_INDIRECT_1_S1_INDIRECT_WITH_OFFSET_1, UBICOM32_INSN_ADD_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_WITH_OFFSET_1, UBICOM32_INSN_ADD_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_WITH_OFFSET_1, UBICOM32_INSN_ADD_1_D_DIRECT_S1_INDIRECT_1
+ , UBICOM32_INSN_ADD_1_D_IMMEDIATE_1_S1_INDIRECT_1, UBICOM32_INSN_ADD_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_1, UBICOM32_INSN_ADD_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_1, UBICOM32_INSN_ADD_1_D_INDIRECT_1_S1_INDIRECT_1
+ , UBICOM32_INSN_ADD_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_1, UBICOM32_INSN_ADD_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_1, UBICOM32_INSN_ADD_1_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_1, UBICOM32_INSN_ADD_1_D_IMMEDIATE_1_S1_INDIRECT_WITH_POST_INCREMENT_1
+ , UBICOM32_INSN_ADD_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_WITH_POST_INCREMENT_1, UBICOM32_INSN_ADD_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_WITH_POST_INCREMENT_1, UBICOM32_INSN_ADD_1_D_INDIRECT_1_S1_INDIRECT_WITH_POST_INCREMENT_1, UBICOM32_INSN_ADD_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_WITH_POST_INCREMENT_1
+ , UBICOM32_INSN_ADD_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_WITH_POST_INCREMENT_1, UBICOM32_INSN_ADD_1_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_1, UBICOM32_INSN_ADD_1_D_IMMEDIATE_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, UBICOM32_INSN_ADD_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_WITH_PRE_INCREMENT_1
+ , UBICOM32_INSN_ADD_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, UBICOM32_INSN_ADD_1_D_INDIRECT_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, UBICOM32_INSN_ADD_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, UBICOM32_INSN_ADD_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_WITH_PRE_INCREMENT_1
+ , UBICOM32_INSN_ADD_4_D_DIRECT_S1_DIRECT, UBICOM32_INSN_ADD_4_D_IMMEDIATE_4_S1_DIRECT, UBICOM32_INSN_ADD_4_D_INDIRECT_WITH_INDEX_4_S1_DIRECT, UBICOM32_INSN_ADD_4_D_INDIRECT_WITH_OFFSET_4_S1_DIRECT
+ , UBICOM32_INSN_ADD_4_D_INDIRECT_4_S1_DIRECT, UBICOM32_INSN_ADD_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_DIRECT, UBICOM32_INSN_ADD_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_DIRECT, UBICOM32_INSN_ADD_4_D_DIRECT_S1_IMMEDIATE
+ , UBICOM32_INSN_ADD_4_D_IMMEDIATE_4_S1_IMMEDIATE, UBICOM32_INSN_ADD_4_D_INDIRECT_WITH_INDEX_4_S1_IMMEDIATE, UBICOM32_INSN_ADD_4_D_INDIRECT_WITH_OFFSET_4_S1_IMMEDIATE, UBICOM32_INSN_ADD_4_D_INDIRECT_4_S1_IMMEDIATE
+ , UBICOM32_INSN_ADD_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_IMMEDIATE, UBICOM32_INSN_ADD_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_IMMEDIATE, UBICOM32_INSN_ADD_4_D_DIRECT_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_ADD_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_INDEX_4
+ , UBICOM32_INSN_ADD_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_ADD_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_ADD_4_D_INDIRECT_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_ADD_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4
+ , UBICOM32_INSN_ADD_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_ADD_4_D_DIRECT_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_ADD_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_ADD_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_OFFSET_4
+ , UBICOM32_INSN_ADD_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_ADD_4_D_INDIRECT_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_ADD_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_ADD_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4
+ , UBICOM32_INSN_ADD_4_D_DIRECT_S1_INDIRECT_4, UBICOM32_INSN_ADD_4_D_IMMEDIATE_4_S1_INDIRECT_4, UBICOM32_INSN_ADD_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_4, UBICOM32_INSN_ADD_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_4
+ , UBICOM32_INSN_ADD_4_D_INDIRECT_4_S1_INDIRECT_4, UBICOM32_INSN_ADD_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_4, UBICOM32_INSN_ADD_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_4, UBICOM32_INSN_ADD_4_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_4
+ , UBICOM32_INSN_ADD_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_ADD_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_ADD_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_ADD_4_D_INDIRECT_4_S1_INDIRECT_WITH_POST_INCREMENT_4
+ , UBICOM32_INSN_ADD_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_ADD_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_ADD_4_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_ADD_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_PRE_INCREMENT_4
+ , UBICOM32_INSN_ADD_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_ADD_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_ADD_4_D_INDIRECT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_ADD_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4
+ , UBICOM32_INSN_ADD_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_ADD_2_D_DIRECT_S1_DIRECT, UBICOM32_INSN_ADD_2_D_IMMEDIATE_2_S1_DIRECT, UBICOM32_INSN_ADD_2_D_INDIRECT_WITH_INDEX_2_S1_DIRECT
+ , UBICOM32_INSN_ADD_2_D_INDIRECT_WITH_OFFSET_2_S1_DIRECT, UBICOM32_INSN_ADD_2_D_INDIRECT_2_S1_DIRECT, UBICOM32_INSN_ADD_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_DIRECT, UBICOM32_INSN_ADD_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_DIRECT
+ , UBICOM32_INSN_ADD_2_D_DIRECT_S1_IMMEDIATE, UBICOM32_INSN_ADD_2_D_IMMEDIATE_2_S1_IMMEDIATE, UBICOM32_INSN_ADD_2_D_INDIRECT_WITH_INDEX_2_S1_IMMEDIATE, UBICOM32_INSN_ADD_2_D_INDIRECT_WITH_OFFSET_2_S1_IMMEDIATE
+ , UBICOM32_INSN_ADD_2_D_INDIRECT_2_S1_IMMEDIATE, UBICOM32_INSN_ADD_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_IMMEDIATE, UBICOM32_INSN_ADD_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_IMMEDIATE, UBICOM32_INSN_ADD_2_D_DIRECT_S1_INDIRECT_WITH_INDEX_2
+ , UBICOM32_INSN_ADD_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_INDEX_2, UBICOM32_INSN_ADD_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_INDEX_2, UBICOM32_INSN_ADD_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_INDEX_2, UBICOM32_INSN_ADD_2_D_INDIRECT_2_S1_INDIRECT_WITH_INDEX_2
+ , UBICOM32_INSN_ADD_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_INDEX_2, UBICOM32_INSN_ADD_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_INDEX_2, UBICOM32_INSN_ADD_2_D_DIRECT_S1_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_ADD_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_OFFSET_2
+ , UBICOM32_INSN_ADD_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_ADD_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_ADD_2_D_INDIRECT_2_S1_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_ADD_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_OFFSET_2
+ , UBICOM32_INSN_ADD_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_ADD_2_D_DIRECT_S1_INDIRECT_2, UBICOM32_INSN_ADD_2_D_IMMEDIATE_2_S1_INDIRECT_2, UBICOM32_INSN_ADD_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_2
+ , UBICOM32_INSN_ADD_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_2, UBICOM32_INSN_ADD_2_D_INDIRECT_2_S1_INDIRECT_2, UBICOM32_INSN_ADD_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_2, UBICOM32_INSN_ADD_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_2
+ , UBICOM32_INSN_ADD_2_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_INSN_ADD_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_INSN_ADD_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_INSN_ADD_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_POST_INCREMENT_2
+ , UBICOM32_INSN_ADD_2_D_INDIRECT_2_S1_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_INSN_ADD_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_INSN_ADD_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_INSN_ADD_2_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_2
+ , UBICOM32_INSN_ADD_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, UBICOM32_INSN_ADD_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, UBICOM32_INSN_ADD_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, UBICOM32_INSN_ADD_2_D_INDIRECT_2_S1_INDIRECT_WITH_PRE_INCREMENT_2
+ , UBICOM32_INSN_ADD_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, UBICOM32_INSN_ADD_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, UBICOM32_INSN_NOT_4_D_DIRECT_S1_DIRECT, UBICOM32_INSN_NOT_4_D_IMMEDIATE_4_S1_DIRECT
+ , UBICOM32_INSN_NOT_4_D_INDIRECT_WITH_INDEX_4_S1_DIRECT, UBICOM32_INSN_NOT_4_D_INDIRECT_WITH_OFFSET_4_S1_DIRECT, UBICOM32_INSN_NOT_4_D_INDIRECT_4_S1_DIRECT, UBICOM32_INSN_NOT_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_DIRECT
+ , UBICOM32_INSN_NOT_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_DIRECT, UBICOM32_INSN_NOT_4_D_DIRECT_S1_IMMEDIATE, UBICOM32_INSN_NOT_4_D_IMMEDIATE_4_S1_IMMEDIATE, UBICOM32_INSN_NOT_4_D_INDIRECT_WITH_INDEX_4_S1_IMMEDIATE
+ , UBICOM32_INSN_NOT_4_D_INDIRECT_WITH_OFFSET_4_S1_IMMEDIATE, UBICOM32_INSN_NOT_4_D_INDIRECT_4_S1_IMMEDIATE, UBICOM32_INSN_NOT_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_IMMEDIATE, UBICOM32_INSN_NOT_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_IMMEDIATE
+ , UBICOM32_INSN_NOT_4_D_DIRECT_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_NOT_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_NOT_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_NOT_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_INDEX_4
+ , UBICOM32_INSN_NOT_4_D_INDIRECT_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_NOT_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_NOT_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_NOT_4_D_DIRECT_S1_INDIRECT_WITH_OFFSET_4
+ , UBICOM32_INSN_NOT_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_NOT_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_NOT_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_NOT_4_D_INDIRECT_4_S1_INDIRECT_WITH_OFFSET_4
+ , UBICOM32_INSN_NOT_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_NOT_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_NOT_4_D_DIRECT_S1_INDIRECT_4, UBICOM32_INSN_NOT_4_D_IMMEDIATE_4_S1_INDIRECT_4
+ , UBICOM32_INSN_NOT_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_4, UBICOM32_INSN_NOT_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_4, UBICOM32_INSN_NOT_4_D_INDIRECT_4_S1_INDIRECT_4, UBICOM32_INSN_NOT_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_4
+ , UBICOM32_INSN_NOT_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_4, UBICOM32_INSN_NOT_4_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_NOT_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_NOT_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_POST_INCREMENT_4
+ , UBICOM32_INSN_NOT_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_NOT_4_D_INDIRECT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_NOT_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_NOT_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4
+ , UBICOM32_INSN_NOT_4_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_NOT_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_NOT_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_NOT_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_PRE_INCREMENT_4
+ , UBICOM32_INSN_NOT_4_D_INDIRECT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_NOT_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_NOT_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_NOT_2_D_DIRECT_S1_DIRECT
+ , UBICOM32_INSN_NOT_2_D_IMMEDIATE_2_S1_DIRECT, UBICOM32_INSN_NOT_2_D_INDIRECT_WITH_INDEX_2_S1_DIRECT, UBICOM32_INSN_NOT_2_D_INDIRECT_WITH_OFFSET_2_S1_DIRECT, UBICOM32_INSN_NOT_2_D_INDIRECT_2_S1_DIRECT
+ , UBICOM32_INSN_NOT_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_DIRECT, UBICOM32_INSN_NOT_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_DIRECT, UBICOM32_INSN_NOT_2_D_DIRECT_S1_IMMEDIATE, UBICOM32_INSN_NOT_2_D_IMMEDIATE_2_S1_IMMEDIATE
+ , UBICOM32_INSN_NOT_2_D_INDIRECT_WITH_INDEX_2_S1_IMMEDIATE, UBICOM32_INSN_NOT_2_D_INDIRECT_WITH_OFFSET_2_S1_IMMEDIATE, UBICOM32_INSN_NOT_2_D_INDIRECT_2_S1_IMMEDIATE, UBICOM32_INSN_NOT_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_IMMEDIATE
+ , UBICOM32_INSN_NOT_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_IMMEDIATE, UBICOM32_INSN_NOT_2_D_DIRECT_S1_INDIRECT_WITH_INDEX_2, UBICOM32_INSN_NOT_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_INDEX_2, UBICOM32_INSN_NOT_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_INDEX_2
+ , UBICOM32_INSN_NOT_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_INDEX_2, UBICOM32_INSN_NOT_2_D_INDIRECT_2_S1_INDIRECT_WITH_INDEX_2, UBICOM32_INSN_NOT_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_INDEX_2, UBICOM32_INSN_NOT_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_INDEX_2
+ , UBICOM32_INSN_NOT_2_D_DIRECT_S1_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_NOT_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_NOT_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_NOT_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_OFFSET_2
+ , UBICOM32_INSN_NOT_2_D_INDIRECT_2_S1_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_NOT_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_NOT_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_NOT_2_D_DIRECT_S1_INDIRECT_2
+ , UBICOM32_INSN_NOT_2_D_IMMEDIATE_2_S1_INDIRECT_2, UBICOM32_INSN_NOT_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_2, UBICOM32_INSN_NOT_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_2, UBICOM32_INSN_NOT_2_D_INDIRECT_2_S1_INDIRECT_2
+ , UBICOM32_INSN_NOT_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_2, UBICOM32_INSN_NOT_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_2, UBICOM32_INSN_NOT_2_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_INSN_NOT_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_POST_INCREMENT_2
+ , UBICOM32_INSN_NOT_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_INSN_NOT_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_INSN_NOT_2_D_INDIRECT_2_S1_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_INSN_NOT_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_POST_INCREMENT_2
+ , UBICOM32_INSN_NOT_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_INSN_NOT_2_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_2, UBICOM32_INSN_NOT_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, UBICOM32_INSN_NOT_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_PRE_INCREMENT_2
+ , UBICOM32_INSN_NOT_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, UBICOM32_INSN_NOT_2_D_INDIRECT_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, UBICOM32_INSN_NOT_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, UBICOM32_INSN_NOT_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_PRE_INCREMENT_2
+ , UBICOM32_INSN_XOR_1_D_DIRECT_S1_DIRECT, UBICOM32_INSN_XOR_1_D_IMMEDIATE_1_S1_DIRECT, UBICOM32_INSN_XOR_1_D_INDIRECT_WITH_INDEX_1_S1_DIRECT, UBICOM32_INSN_XOR_1_D_INDIRECT_WITH_OFFSET_1_S1_DIRECT
+ , UBICOM32_INSN_XOR_1_D_INDIRECT_1_S1_DIRECT, UBICOM32_INSN_XOR_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_DIRECT, UBICOM32_INSN_XOR_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_DIRECT, UBICOM32_INSN_XOR_1_D_DIRECT_S1_IMMEDIATE
+ , UBICOM32_INSN_XOR_1_D_IMMEDIATE_1_S1_IMMEDIATE, UBICOM32_INSN_XOR_1_D_INDIRECT_WITH_INDEX_1_S1_IMMEDIATE, UBICOM32_INSN_XOR_1_D_INDIRECT_WITH_OFFSET_1_S1_IMMEDIATE, UBICOM32_INSN_XOR_1_D_INDIRECT_1_S1_IMMEDIATE
+ , UBICOM32_INSN_XOR_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_IMMEDIATE, UBICOM32_INSN_XOR_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_IMMEDIATE, UBICOM32_INSN_XOR_1_D_DIRECT_S1_INDIRECT_WITH_INDEX_1, UBICOM32_INSN_XOR_1_D_IMMEDIATE_1_S1_INDIRECT_WITH_INDEX_1
+ , UBICOM32_INSN_XOR_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_WITH_INDEX_1, UBICOM32_INSN_XOR_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_WITH_INDEX_1, UBICOM32_INSN_XOR_1_D_INDIRECT_1_S1_INDIRECT_WITH_INDEX_1, UBICOM32_INSN_XOR_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_WITH_INDEX_1
+ , UBICOM32_INSN_XOR_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_WITH_INDEX_1, UBICOM32_INSN_XOR_1_D_DIRECT_S1_INDIRECT_WITH_OFFSET_1, UBICOM32_INSN_XOR_1_D_IMMEDIATE_1_S1_INDIRECT_WITH_OFFSET_1, UBICOM32_INSN_XOR_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_WITH_OFFSET_1
+ , UBICOM32_INSN_XOR_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_WITH_OFFSET_1, UBICOM32_INSN_XOR_1_D_INDIRECT_1_S1_INDIRECT_WITH_OFFSET_1, UBICOM32_INSN_XOR_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_WITH_OFFSET_1, UBICOM32_INSN_XOR_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_WITH_OFFSET_1
+ , UBICOM32_INSN_XOR_1_D_DIRECT_S1_INDIRECT_1, UBICOM32_INSN_XOR_1_D_IMMEDIATE_1_S1_INDIRECT_1, UBICOM32_INSN_XOR_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_1, UBICOM32_INSN_XOR_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_1
+ , UBICOM32_INSN_XOR_1_D_INDIRECT_1_S1_INDIRECT_1, UBICOM32_INSN_XOR_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_1, UBICOM32_INSN_XOR_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_1, UBICOM32_INSN_XOR_1_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_1
+ , UBICOM32_INSN_XOR_1_D_IMMEDIATE_1_S1_INDIRECT_WITH_POST_INCREMENT_1, UBICOM32_INSN_XOR_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_WITH_POST_INCREMENT_1, UBICOM32_INSN_XOR_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_WITH_POST_INCREMENT_1, UBICOM32_INSN_XOR_1_D_INDIRECT_1_S1_INDIRECT_WITH_POST_INCREMENT_1
+ , UBICOM32_INSN_XOR_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_WITH_POST_INCREMENT_1, UBICOM32_INSN_XOR_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_WITH_POST_INCREMENT_1, UBICOM32_INSN_XOR_1_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_1, UBICOM32_INSN_XOR_1_D_IMMEDIATE_1_S1_INDIRECT_WITH_PRE_INCREMENT_1
+ , UBICOM32_INSN_XOR_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, UBICOM32_INSN_XOR_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, UBICOM32_INSN_XOR_1_D_INDIRECT_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, UBICOM32_INSN_XOR_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_WITH_PRE_INCREMENT_1
+ , UBICOM32_INSN_XOR_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, UBICOM32_INSN_OR_1_D_DIRECT_S1_DIRECT, UBICOM32_INSN_OR_1_D_IMMEDIATE_1_S1_DIRECT, UBICOM32_INSN_OR_1_D_INDIRECT_WITH_INDEX_1_S1_DIRECT
+ , UBICOM32_INSN_OR_1_D_INDIRECT_WITH_OFFSET_1_S1_DIRECT, UBICOM32_INSN_OR_1_D_INDIRECT_1_S1_DIRECT, UBICOM32_INSN_OR_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_DIRECT, UBICOM32_INSN_OR_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_DIRECT
+ , UBICOM32_INSN_OR_1_D_DIRECT_S1_IMMEDIATE, UBICOM32_INSN_OR_1_D_IMMEDIATE_1_S1_IMMEDIATE, UBICOM32_INSN_OR_1_D_INDIRECT_WITH_INDEX_1_S1_IMMEDIATE, UBICOM32_INSN_OR_1_D_INDIRECT_WITH_OFFSET_1_S1_IMMEDIATE
+ , UBICOM32_INSN_OR_1_D_INDIRECT_1_S1_IMMEDIATE, UBICOM32_INSN_OR_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_IMMEDIATE, UBICOM32_INSN_OR_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_IMMEDIATE, UBICOM32_INSN_OR_1_D_DIRECT_S1_INDIRECT_WITH_INDEX_1
+ , UBICOM32_INSN_OR_1_D_IMMEDIATE_1_S1_INDIRECT_WITH_INDEX_1, UBICOM32_INSN_OR_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_WITH_INDEX_1, UBICOM32_INSN_OR_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_WITH_INDEX_1, UBICOM32_INSN_OR_1_D_INDIRECT_1_S1_INDIRECT_WITH_INDEX_1
+ , UBICOM32_INSN_OR_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_WITH_INDEX_1, UBICOM32_INSN_OR_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_WITH_INDEX_1, UBICOM32_INSN_OR_1_D_DIRECT_S1_INDIRECT_WITH_OFFSET_1, UBICOM32_INSN_OR_1_D_IMMEDIATE_1_S1_INDIRECT_WITH_OFFSET_1
+ , UBICOM32_INSN_OR_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_WITH_OFFSET_1, UBICOM32_INSN_OR_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_WITH_OFFSET_1, UBICOM32_INSN_OR_1_D_INDIRECT_1_S1_INDIRECT_WITH_OFFSET_1, UBICOM32_INSN_OR_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_WITH_OFFSET_1
+ , UBICOM32_INSN_OR_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_WITH_OFFSET_1, UBICOM32_INSN_OR_1_D_DIRECT_S1_INDIRECT_1, UBICOM32_INSN_OR_1_D_IMMEDIATE_1_S1_INDIRECT_1, UBICOM32_INSN_OR_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_1
+ , UBICOM32_INSN_OR_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_1, UBICOM32_INSN_OR_1_D_INDIRECT_1_S1_INDIRECT_1, UBICOM32_INSN_OR_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_1, UBICOM32_INSN_OR_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_1
+ , UBICOM32_INSN_OR_1_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_1, UBICOM32_INSN_OR_1_D_IMMEDIATE_1_S1_INDIRECT_WITH_POST_INCREMENT_1, UBICOM32_INSN_OR_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_WITH_POST_INCREMENT_1, UBICOM32_INSN_OR_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_WITH_POST_INCREMENT_1
+ , UBICOM32_INSN_OR_1_D_INDIRECT_1_S1_INDIRECT_WITH_POST_INCREMENT_1, UBICOM32_INSN_OR_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_WITH_POST_INCREMENT_1, UBICOM32_INSN_OR_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_WITH_POST_INCREMENT_1, UBICOM32_INSN_OR_1_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_1
+ , UBICOM32_INSN_OR_1_D_IMMEDIATE_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, UBICOM32_INSN_OR_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, UBICOM32_INSN_OR_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, UBICOM32_INSN_OR_1_D_INDIRECT_1_S1_INDIRECT_WITH_PRE_INCREMENT_1
+ , UBICOM32_INSN_OR_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, UBICOM32_INSN_OR_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, UBICOM32_INSN_AND_1_D_DIRECT_S1_DIRECT, UBICOM32_INSN_AND_1_D_IMMEDIATE_1_S1_DIRECT
+ , UBICOM32_INSN_AND_1_D_INDIRECT_WITH_INDEX_1_S1_DIRECT, UBICOM32_INSN_AND_1_D_INDIRECT_WITH_OFFSET_1_S1_DIRECT, UBICOM32_INSN_AND_1_D_INDIRECT_1_S1_DIRECT, UBICOM32_INSN_AND_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_DIRECT
+ , UBICOM32_INSN_AND_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_DIRECT, UBICOM32_INSN_AND_1_D_DIRECT_S1_IMMEDIATE, UBICOM32_INSN_AND_1_D_IMMEDIATE_1_S1_IMMEDIATE, UBICOM32_INSN_AND_1_D_INDIRECT_WITH_INDEX_1_S1_IMMEDIATE
+ , UBICOM32_INSN_AND_1_D_INDIRECT_WITH_OFFSET_1_S1_IMMEDIATE, UBICOM32_INSN_AND_1_D_INDIRECT_1_S1_IMMEDIATE, UBICOM32_INSN_AND_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_IMMEDIATE, UBICOM32_INSN_AND_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_IMMEDIATE
+ , UBICOM32_INSN_AND_1_D_DIRECT_S1_INDIRECT_WITH_INDEX_1, UBICOM32_INSN_AND_1_D_IMMEDIATE_1_S1_INDIRECT_WITH_INDEX_1, UBICOM32_INSN_AND_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_WITH_INDEX_1, UBICOM32_INSN_AND_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_WITH_INDEX_1
+ , UBICOM32_INSN_AND_1_D_INDIRECT_1_S1_INDIRECT_WITH_INDEX_1, UBICOM32_INSN_AND_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_WITH_INDEX_1, UBICOM32_INSN_AND_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_WITH_INDEX_1, UBICOM32_INSN_AND_1_D_DIRECT_S1_INDIRECT_WITH_OFFSET_1
+ , UBICOM32_INSN_AND_1_D_IMMEDIATE_1_S1_INDIRECT_WITH_OFFSET_1, UBICOM32_INSN_AND_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_WITH_OFFSET_1, UBICOM32_INSN_AND_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_WITH_OFFSET_1, UBICOM32_INSN_AND_1_D_INDIRECT_1_S1_INDIRECT_WITH_OFFSET_1
+ , UBICOM32_INSN_AND_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_WITH_OFFSET_1, UBICOM32_INSN_AND_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_WITH_OFFSET_1, UBICOM32_INSN_AND_1_D_DIRECT_S1_INDIRECT_1, UBICOM32_INSN_AND_1_D_IMMEDIATE_1_S1_INDIRECT_1
+ , UBICOM32_INSN_AND_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_1, UBICOM32_INSN_AND_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_1, UBICOM32_INSN_AND_1_D_INDIRECT_1_S1_INDIRECT_1, UBICOM32_INSN_AND_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_1
+ , UBICOM32_INSN_AND_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_1, UBICOM32_INSN_AND_1_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_1, UBICOM32_INSN_AND_1_D_IMMEDIATE_1_S1_INDIRECT_WITH_POST_INCREMENT_1, UBICOM32_INSN_AND_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_WITH_POST_INCREMENT_1
+ , UBICOM32_INSN_AND_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_WITH_POST_INCREMENT_1, UBICOM32_INSN_AND_1_D_INDIRECT_1_S1_INDIRECT_WITH_POST_INCREMENT_1, UBICOM32_INSN_AND_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_WITH_POST_INCREMENT_1, UBICOM32_INSN_AND_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_WITH_POST_INCREMENT_1
+ , UBICOM32_INSN_AND_1_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_1, UBICOM32_INSN_AND_1_D_IMMEDIATE_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, UBICOM32_INSN_AND_1_D_INDIRECT_WITH_INDEX_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, UBICOM32_INSN_AND_1_D_INDIRECT_WITH_OFFSET_1_S1_INDIRECT_WITH_PRE_INCREMENT_1
+ , UBICOM32_INSN_AND_1_D_INDIRECT_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, UBICOM32_INSN_AND_1_D_INDIRECT_WITH_POST_INCREMENT_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, UBICOM32_INSN_AND_1_D_INDIRECT_WITH_PRE_INCREMENT_1_S1_INDIRECT_WITH_PRE_INCREMENT_1, UBICOM32_INSN_XOR_4_D_DIRECT_S1_DIRECT
+ , UBICOM32_INSN_XOR_4_D_IMMEDIATE_4_S1_DIRECT, UBICOM32_INSN_XOR_4_D_INDIRECT_WITH_INDEX_4_S1_DIRECT, UBICOM32_INSN_XOR_4_D_INDIRECT_WITH_OFFSET_4_S1_DIRECT, UBICOM32_INSN_XOR_4_D_INDIRECT_4_S1_DIRECT
+ , UBICOM32_INSN_XOR_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_DIRECT, UBICOM32_INSN_XOR_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_DIRECT, UBICOM32_INSN_XOR_4_D_DIRECT_S1_IMMEDIATE, UBICOM32_INSN_XOR_4_D_IMMEDIATE_4_S1_IMMEDIATE
+ , UBICOM32_INSN_XOR_4_D_INDIRECT_WITH_INDEX_4_S1_IMMEDIATE, UBICOM32_INSN_XOR_4_D_INDIRECT_WITH_OFFSET_4_S1_IMMEDIATE, UBICOM32_INSN_XOR_4_D_INDIRECT_4_S1_IMMEDIATE, UBICOM32_INSN_XOR_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_IMMEDIATE
+ , UBICOM32_INSN_XOR_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_IMMEDIATE, UBICOM32_INSN_XOR_4_D_DIRECT_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_XOR_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_XOR_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_INDEX_4
+ , UBICOM32_INSN_XOR_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_XOR_4_D_INDIRECT_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_XOR_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_XOR_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4
+ , UBICOM32_INSN_XOR_4_D_DIRECT_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_XOR_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_XOR_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_XOR_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_OFFSET_4
+ , UBICOM32_INSN_XOR_4_D_INDIRECT_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_XOR_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_XOR_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_XOR_4_D_DIRECT_S1_INDIRECT_4
+ , UBICOM32_INSN_XOR_4_D_IMMEDIATE_4_S1_INDIRECT_4, UBICOM32_INSN_XOR_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_4, UBICOM32_INSN_XOR_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_4, UBICOM32_INSN_XOR_4_D_INDIRECT_4_S1_INDIRECT_4
+ , UBICOM32_INSN_XOR_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_4, UBICOM32_INSN_XOR_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_4, UBICOM32_INSN_XOR_4_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_XOR_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_POST_INCREMENT_4
+ , UBICOM32_INSN_XOR_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_XOR_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_XOR_4_D_INDIRECT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_XOR_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4
+ , UBICOM32_INSN_XOR_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_XOR_4_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_XOR_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_XOR_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_PRE_INCREMENT_4
+ , UBICOM32_INSN_XOR_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_XOR_4_D_INDIRECT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_XOR_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_XOR_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4
+ , UBICOM32_INSN_XOR_2_D_DIRECT_S1_DIRECT, UBICOM32_INSN_XOR_2_D_IMMEDIATE_2_S1_DIRECT, UBICOM32_INSN_XOR_2_D_INDIRECT_WITH_INDEX_2_S1_DIRECT, UBICOM32_INSN_XOR_2_D_INDIRECT_WITH_OFFSET_2_S1_DIRECT
+ , UBICOM32_INSN_XOR_2_D_INDIRECT_2_S1_DIRECT, UBICOM32_INSN_XOR_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_DIRECT, UBICOM32_INSN_XOR_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_DIRECT, UBICOM32_INSN_XOR_2_D_DIRECT_S1_IMMEDIATE
+ , UBICOM32_INSN_XOR_2_D_IMMEDIATE_2_S1_IMMEDIATE, UBICOM32_INSN_XOR_2_D_INDIRECT_WITH_INDEX_2_S1_IMMEDIATE, UBICOM32_INSN_XOR_2_D_INDIRECT_WITH_OFFSET_2_S1_IMMEDIATE, UBICOM32_INSN_XOR_2_D_INDIRECT_2_S1_IMMEDIATE
+ , UBICOM32_INSN_XOR_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_IMMEDIATE, UBICOM32_INSN_XOR_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_IMMEDIATE, UBICOM32_INSN_XOR_2_D_DIRECT_S1_INDIRECT_WITH_INDEX_2, UBICOM32_INSN_XOR_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_INDEX_2
+ , UBICOM32_INSN_XOR_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_INDEX_2, UBICOM32_INSN_XOR_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_INDEX_2, UBICOM32_INSN_XOR_2_D_INDIRECT_2_S1_INDIRECT_WITH_INDEX_2, UBICOM32_INSN_XOR_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_INDEX_2
+ , UBICOM32_INSN_XOR_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_INDEX_2, UBICOM32_INSN_XOR_2_D_DIRECT_S1_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_XOR_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_XOR_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_OFFSET_2
+ , UBICOM32_INSN_XOR_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_XOR_2_D_INDIRECT_2_S1_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_XOR_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_XOR_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_OFFSET_2
+ , UBICOM32_INSN_XOR_2_D_DIRECT_S1_INDIRECT_2, UBICOM32_INSN_XOR_2_D_IMMEDIATE_2_S1_INDIRECT_2, UBICOM32_INSN_XOR_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_2, UBICOM32_INSN_XOR_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_2
+ , UBICOM32_INSN_XOR_2_D_INDIRECT_2_S1_INDIRECT_2, UBICOM32_INSN_XOR_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_2, UBICOM32_INSN_XOR_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_2, UBICOM32_INSN_XOR_2_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_2
+ , UBICOM32_INSN_XOR_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_INSN_XOR_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_INSN_XOR_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_INSN_XOR_2_D_INDIRECT_2_S1_INDIRECT_WITH_POST_INCREMENT_2
+ , UBICOM32_INSN_XOR_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_INSN_XOR_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_INSN_XOR_2_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_2, UBICOM32_INSN_XOR_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_PRE_INCREMENT_2
+ , UBICOM32_INSN_XOR_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, UBICOM32_INSN_XOR_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, UBICOM32_INSN_XOR_2_D_INDIRECT_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, UBICOM32_INSN_XOR_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_PRE_INCREMENT_2
+ , UBICOM32_INSN_XOR_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, UBICOM32_INSN_OR_4_D_DIRECT_S1_DIRECT, UBICOM32_INSN_OR_4_D_IMMEDIATE_4_S1_DIRECT, UBICOM32_INSN_OR_4_D_INDIRECT_WITH_INDEX_4_S1_DIRECT
+ , UBICOM32_INSN_OR_4_D_INDIRECT_WITH_OFFSET_4_S1_DIRECT, UBICOM32_INSN_OR_4_D_INDIRECT_4_S1_DIRECT, UBICOM32_INSN_OR_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_DIRECT, UBICOM32_INSN_OR_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_DIRECT
+ , UBICOM32_INSN_OR_4_D_DIRECT_S1_IMMEDIATE, UBICOM32_INSN_OR_4_D_IMMEDIATE_4_S1_IMMEDIATE, UBICOM32_INSN_OR_4_D_INDIRECT_WITH_INDEX_4_S1_IMMEDIATE, UBICOM32_INSN_OR_4_D_INDIRECT_WITH_OFFSET_4_S1_IMMEDIATE
+ , UBICOM32_INSN_OR_4_D_INDIRECT_4_S1_IMMEDIATE, UBICOM32_INSN_OR_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_IMMEDIATE, UBICOM32_INSN_OR_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_IMMEDIATE, UBICOM32_INSN_OR_4_D_DIRECT_S1_INDIRECT_WITH_INDEX_4
+ , UBICOM32_INSN_OR_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_OR_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_OR_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_OR_4_D_INDIRECT_4_S1_INDIRECT_WITH_INDEX_4
+ , UBICOM32_INSN_OR_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_OR_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_OR_4_D_DIRECT_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_OR_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_OFFSET_4
+ , UBICOM32_INSN_OR_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_OR_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_OR_4_D_INDIRECT_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_OR_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4
+ , UBICOM32_INSN_OR_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_OR_4_D_DIRECT_S1_INDIRECT_4, UBICOM32_INSN_OR_4_D_IMMEDIATE_4_S1_INDIRECT_4, UBICOM32_INSN_OR_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_4
+ , UBICOM32_INSN_OR_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_4, UBICOM32_INSN_OR_4_D_INDIRECT_4_S1_INDIRECT_4, UBICOM32_INSN_OR_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_4, UBICOM32_INSN_OR_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_4
+ , UBICOM32_INSN_OR_4_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_OR_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_OR_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_OR_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_POST_INCREMENT_4
+ , UBICOM32_INSN_OR_4_D_INDIRECT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_OR_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_OR_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_OR_4_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_4
+ , UBICOM32_INSN_OR_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_OR_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_OR_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_OR_4_D_INDIRECT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4
+ , UBICOM32_INSN_OR_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_OR_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_OR_2_D_DIRECT_S1_DIRECT, UBICOM32_INSN_OR_2_D_IMMEDIATE_2_S1_DIRECT
+ , UBICOM32_INSN_OR_2_D_INDIRECT_WITH_INDEX_2_S1_DIRECT, UBICOM32_INSN_OR_2_D_INDIRECT_WITH_OFFSET_2_S1_DIRECT, UBICOM32_INSN_OR_2_D_INDIRECT_2_S1_DIRECT, UBICOM32_INSN_OR_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_DIRECT
+ , UBICOM32_INSN_OR_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_DIRECT, UBICOM32_INSN_OR_2_D_DIRECT_S1_IMMEDIATE, UBICOM32_INSN_OR_2_D_IMMEDIATE_2_S1_IMMEDIATE, UBICOM32_INSN_OR_2_D_INDIRECT_WITH_INDEX_2_S1_IMMEDIATE
+ , UBICOM32_INSN_OR_2_D_INDIRECT_WITH_OFFSET_2_S1_IMMEDIATE, UBICOM32_INSN_OR_2_D_INDIRECT_2_S1_IMMEDIATE, UBICOM32_INSN_OR_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_IMMEDIATE, UBICOM32_INSN_OR_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_IMMEDIATE
+ , UBICOM32_INSN_OR_2_D_DIRECT_S1_INDIRECT_WITH_INDEX_2, UBICOM32_INSN_OR_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_INDEX_2, UBICOM32_INSN_OR_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_INDEX_2, UBICOM32_INSN_OR_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_INDEX_2
+ , UBICOM32_INSN_OR_2_D_INDIRECT_2_S1_INDIRECT_WITH_INDEX_2, UBICOM32_INSN_OR_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_INDEX_2, UBICOM32_INSN_OR_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_INDEX_2, UBICOM32_INSN_OR_2_D_DIRECT_S1_INDIRECT_WITH_OFFSET_2
+ , UBICOM32_INSN_OR_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_OR_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_OR_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_OR_2_D_INDIRECT_2_S1_INDIRECT_WITH_OFFSET_2
+ , UBICOM32_INSN_OR_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_OR_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_OR_2_D_DIRECT_S1_INDIRECT_2, UBICOM32_INSN_OR_2_D_IMMEDIATE_2_S1_INDIRECT_2
+ , UBICOM32_INSN_OR_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_2, UBICOM32_INSN_OR_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_2, UBICOM32_INSN_OR_2_D_INDIRECT_2_S1_INDIRECT_2, UBICOM32_INSN_OR_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_2
+ , UBICOM32_INSN_OR_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_2, UBICOM32_INSN_OR_2_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_INSN_OR_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_INSN_OR_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_POST_INCREMENT_2
+ , UBICOM32_INSN_OR_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_INSN_OR_2_D_INDIRECT_2_S1_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_INSN_OR_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_INSN_OR_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_POST_INCREMENT_2
+ , UBICOM32_INSN_OR_2_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_2, UBICOM32_INSN_OR_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, UBICOM32_INSN_OR_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, UBICOM32_INSN_OR_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_PRE_INCREMENT_2
+ , UBICOM32_INSN_OR_2_D_INDIRECT_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, UBICOM32_INSN_OR_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, UBICOM32_INSN_OR_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, UBICOM32_INSN_AND_4_D_DIRECT_S1_DIRECT
+ , UBICOM32_INSN_AND_4_D_IMMEDIATE_4_S1_DIRECT, UBICOM32_INSN_AND_4_D_INDIRECT_WITH_INDEX_4_S1_DIRECT, UBICOM32_INSN_AND_4_D_INDIRECT_WITH_OFFSET_4_S1_DIRECT, UBICOM32_INSN_AND_4_D_INDIRECT_4_S1_DIRECT
+ , UBICOM32_INSN_AND_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_DIRECT, UBICOM32_INSN_AND_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_DIRECT, UBICOM32_INSN_AND_4_D_DIRECT_S1_IMMEDIATE, UBICOM32_INSN_AND_4_D_IMMEDIATE_4_S1_IMMEDIATE
+ , UBICOM32_INSN_AND_4_D_INDIRECT_WITH_INDEX_4_S1_IMMEDIATE, UBICOM32_INSN_AND_4_D_INDIRECT_WITH_OFFSET_4_S1_IMMEDIATE, UBICOM32_INSN_AND_4_D_INDIRECT_4_S1_IMMEDIATE, UBICOM32_INSN_AND_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_IMMEDIATE
+ , UBICOM32_INSN_AND_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_IMMEDIATE, UBICOM32_INSN_AND_4_D_DIRECT_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_AND_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_AND_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_INDEX_4
+ , UBICOM32_INSN_AND_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_AND_4_D_INDIRECT_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_AND_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4, UBICOM32_INSN_AND_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_INDEX_4
+ , UBICOM32_INSN_AND_4_D_DIRECT_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_AND_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_AND_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_AND_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_OFFSET_4
+ , UBICOM32_INSN_AND_4_D_INDIRECT_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_AND_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_AND_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_OFFSET_4, UBICOM32_INSN_AND_4_D_DIRECT_S1_INDIRECT_4
+ , UBICOM32_INSN_AND_4_D_IMMEDIATE_4_S1_INDIRECT_4, UBICOM32_INSN_AND_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_4, UBICOM32_INSN_AND_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_4, UBICOM32_INSN_AND_4_D_INDIRECT_4_S1_INDIRECT_4
+ , UBICOM32_INSN_AND_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_4, UBICOM32_INSN_AND_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_4, UBICOM32_INSN_AND_4_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_AND_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_POST_INCREMENT_4
+ , UBICOM32_INSN_AND_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_AND_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_AND_4_D_INDIRECT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_AND_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4
+ , UBICOM32_INSN_AND_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_POST_INCREMENT_4, UBICOM32_INSN_AND_4_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_AND_4_D_IMMEDIATE_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_AND_4_D_INDIRECT_WITH_INDEX_4_S1_INDIRECT_WITH_PRE_INCREMENT_4
+ , UBICOM32_INSN_AND_4_D_INDIRECT_WITH_OFFSET_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_AND_4_D_INDIRECT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_AND_4_D_INDIRECT_WITH_POST_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4, UBICOM32_INSN_AND_4_D_INDIRECT_WITH_PRE_INCREMENT_4_S1_INDIRECT_WITH_PRE_INCREMENT_4
+ , UBICOM32_INSN_AND_2_D_DIRECT_S1_DIRECT, UBICOM32_INSN_AND_2_D_IMMEDIATE_2_S1_DIRECT, UBICOM32_INSN_AND_2_D_INDIRECT_WITH_INDEX_2_S1_DIRECT, UBICOM32_INSN_AND_2_D_INDIRECT_WITH_OFFSET_2_S1_DIRECT
+ , UBICOM32_INSN_AND_2_D_INDIRECT_2_S1_DIRECT, UBICOM32_INSN_AND_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_DIRECT, UBICOM32_INSN_AND_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_DIRECT, UBICOM32_INSN_AND_2_D_DIRECT_S1_IMMEDIATE
+ , UBICOM32_INSN_AND_2_D_IMMEDIATE_2_S1_IMMEDIATE, UBICOM32_INSN_AND_2_D_INDIRECT_WITH_INDEX_2_S1_IMMEDIATE, UBICOM32_INSN_AND_2_D_INDIRECT_WITH_OFFSET_2_S1_IMMEDIATE, UBICOM32_INSN_AND_2_D_INDIRECT_2_S1_IMMEDIATE
+ , UBICOM32_INSN_AND_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_IMMEDIATE, UBICOM32_INSN_AND_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_IMMEDIATE, UBICOM32_INSN_AND_2_D_DIRECT_S1_INDIRECT_WITH_INDEX_2, UBICOM32_INSN_AND_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_INDEX_2
+ , UBICOM32_INSN_AND_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_INDEX_2, UBICOM32_INSN_AND_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_INDEX_2, UBICOM32_INSN_AND_2_D_INDIRECT_2_S1_INDIRECT_WITH_INDEX_2, UBICOM32_INSN_AND_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_INDEX_2
+ , UBICOM32_INSN_AND_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_INDEX_2, UBICOM32_INSN_AND_2_D_DIRECT_S1_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_AND_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_AND_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_OFFSET_2
+ , UBICOM32_INSN_AND_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_AND_2_D_INDIRECT_2_S1_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_AND_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_OFFSET_2, UBICOM32_INSN_AND_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_OFFSET_2
+ , UBICOM32_INSN_AND_2_D_DIRECT_S1_INDIRECT_2, UBICOM32_INSN_AND_2_D_IMMEDIATE_2_S1_INDIRECT_2, UBICOM32_INSN_AND_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_2, UBICOM32_INSN_AND_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_2
+ , UBICOM32_INSN_AND_2_D_INDIRECT_2_S1_INDIRECT_2, UBICOM32_INSN_AND_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_2, UBICOM32_INSN_AND_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_2, UBICOM32_INSN_AND_2_D_DIRECT_S1_INDIRECT_WITH_POST_INCREMENT_2
+ , UBICOM32_INSN_AND_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_INSN_AND_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_INSN_AND_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_INSN_AND_2_D_INDIRECT_2_S1_INDIRECT_WITH_POST_INCREMENT_2
+ , UBICOM32_INSN_AND_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_INSN_AND_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_POST_INCREMENT_2, UBICOM32_INSN_AND_2_D_DIRECT_S1_INDIRECT_WITH_PRE_INCREMENT_2, UBICOM32_INSN_AND_2_D_IMMEDIATE_2_S1_INDIRECT_WITH_PRE_INCREMENT_2
+ , UBICOM32_INSN_AND_2_D_INDIRECT_WITH_INDEX_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, UBICOM32_INSN_AND_2_D_INDIRECT_WITH_OFFSET_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, UBICOM32_INSN_AND_2_D_INDIRECT_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, UBICOM32_INSN_AND_2_D_INDIRECT_WITH_POST_INCREMENT_2_S1_INDIRECT_WITH_PRE_INCREMENT_2
+ , UBICOM32_INSN_AND_2_D_INDIRECT_WITH_PRE_INCREMENT_2_S1_INDIRECT_WITH_PRE_INCREMENT_2, UBICOM32_INSN_MOVEAI_V5, UBICOM32_INSN_MOVEAIH, UBICOM32_INSN_MOVEAI
+ , UBICOM32_INSN_NOP_INSN, UBICOM32_INSN_JMPCC, UBICOM32_INSN_CALL, UBICOM32_INSN_CALLI
+ , UBICOM32_INSN_SUSPEND, UBICOM32_INSN_DSP_CLRACC, UBICOM32_INSN_UNUSED_00_11, UBICOM32_INSN_UNUSED_00_16
+ , UBICOM32_INSN_UNUSED_02_04, UBICOM32_INSN_UNUSED_02_07, UBICOM32_INSN_UNUSED_02_0D, UBICOM32_INSN_UNUSED_02_0E
+ , UBICOM32_INSN_UNUSED_02_0F, UBICOM32_INSN_UNUSED_02_17, UBICOM32_INSN_UNUSED_02_19, UBICOM32_INSN_UNUSED_02_1B
+ , UBICOM32_INSN_UNUSED_02_1D, UBICOM32_INSN_UNUSED_01, UBICOM32_INSN_UNUSED_03, UBICOM32_INSN_UNUSED_07
+ , UBICOM32_INSN_UNUSED_17, UBICOM32_INSN_UNUSED_1F, UBICOM32_INSN_UNUSED_DSP_0C, UBICOM32_INSN_UNUSED_DSP_0D
+ , UBICOM32_INSN_UNUSED_DSP_0E, UBICOM32_INSN_UNUSED_DSP_0F, UBICOM32_INSN_UNUSED_DSP_14, UBICOM32_INSN_UNUSED_DSP_15
+ , UBICOM32_INSN_UNUSED_DSP_16, UBICOM32_INSN_UNUSED_DSP_17, UBICOM32_INSN_UNUSED_DSP_18, UBICOM32_INSN_UNUSED_DSP_19
+ , UBICOM32_INSN_UNUSED_DSP_1A, UBICOM32_INSN_UNUSED_DSP_1B, UBICOM32_INSN_UNUSED_DSP_1C, UBICOM32_INSN_UNUSED_DSP_1D
+ , UBICOM32_INSN_UNUSED_DSP_1E, UBICOM32_INSN_UNUSED_DSP_1F
+} CGEN_INSN_TYPE;
+
+/* Index of `invalid' insn place holder.  */
+#define CGEN_INSN_INVALID UBICOM32_INSN_INVALID
+
+/* Total number of insns in table.  */
+#define MAX_INSNS ((int) UBICOM32_INSN_UNUSED_DSP_1F + 1)
+
+/* This struct records data prior to insertion or after extraction.  */
+struct cgen_fields
+{
+  int length;
+  long f_nil;
+  long f_anyof;
+  long f_d;
+  long f_d_bit10;
+  long f_d_type;
+  long f_d_r;
+  long f_d_M;
+  long f_d_i4_1;
+  long f_d_i4_2;
+  long f_d_i4_4;
+  long f_d_An;
+  long f_d_direct;
+  long f_d_imm8;
+  long f_d_imm7_t;
+  long f_d_imm7_b;
+  long f_d_imm7_1;
+  long f_d_imm7_2;
+  long f_d_imm7_4;
+  long f_s1;
+  long f_s1_bit10;
+  long f_s1_type;
+  long f_s1_r;
+  long f_s1_M;
+  long f_s1_i4_1;
+  long f_s1_i4_2;
+  long f_s1_i4_4;
+  long f_s1_An;
+  long f_s1_direct;
+  long f_s1_imm8;
+  long f_s1_imm7_t;
+  long f_s1_imm7_b;
+  long f_s1_imm7_1;
+  long f_s1_imm7_2;
+  long f_s1_imm7_4;
+  long f_op1;
+  long f_opmoveai;
+  long f_op2;
+  long f_bit26;
+  long f_opext;
+  long f_cond;
+  long f_imm16_1;
+  long f_imm16_2;
+  long f_o21;
+  long f_o23_21;
+  long f_o20_0;
+  long f_o24;
+  long f_imm23_21;
+  long f_imm24;
+  long f_imm24_21;
+  long f_imm25;
+  long f_o15_13;
+  long f_o12_8;
+  long f_o7_5;
+  long f_o4_0;
+  long f_o16;
+  long f_An;
+  long f_Am;
+  long f_Dn;
+  long f_bit5;
+  long f_P;
+  long f_C;
+  long f_int;
+  long f_dsp_C;
+  long f_dsp_T;
+  long f_dsp_S2_sel;
+  long f_dsp_R;
+  long f_dsp_destA;
+  long f_dsp_b15;
+  long f_dsp_S2;
+  long f_dsp_J;
+  long f_s2;
+  long f_b15;
+};
+
+#define CGEN_INIT_PARSE(od) \
+{\
+}
+#define CGEN_INIT_INSERT(od) \
+{\
+}
+#define CGEN_INIT_EXTRACT(od) \
+{\
+}
+#define CGEN_INIT_PRINT(od) \
+{\
+}
+
+
+#endif /* UBICOM32_OPC_H */
--- a/gdb/configure.host
+++ b/gdb/configure.host
@@ -174,6 +174,8 @@ m32r*-*-linux*)          gdb_host=linux 
 
 xtensa*-*-linux*)	gdb_host=linux ;;
 
+ubicom32-*-linux*)	gdb_host=linux ;;
+
 esac
 
 
--- /dev/null
+++ b/gdb/config/ubicom32/linux.mh
@@ -0,0 +1,7 @@
+# Host: Ubicom32
+
+MH_CFLAGS= -I../ -static
+
+# The dynamically loaded libthread_db needs access to symbols in the
+# gdb executable.
+LOADLIBES = -ldl -rdynamic
--- /dev/null
+++ b/gdb/config/ubicom32/linux.mt
@@ -0,0 +1 @@
+# Target: Ubicom32
--- a/gdb/gdbserver/linux-low.c
+++ b/gdb/gdbserver/linux-low.c
@@ -268,7 +268,7 @@ linux_create_inferior (char *program, ch
   pid = fork ();
 #endif
   if (pid < 0)
-    perror_with_name ("fork");
+    perror_with_name ("vfork");
 
   if (pid == 0)
     {
@@ -1662,7 +1662,7 @@ linux_read_memory (CORE_ADDR memaddr, un
 #ifdef HAVE_PREAD64
       if (pread64 (fd, myaddr, len, memaddr) != len)
 #else
-      if (lseek (fd, memaddr, SEEK_SET) == -1 || read (fd, memaddr, len) != len)
+      if (lseek (fd, memaddr, SEEK_SET) == -1 || read (fd, (char *)myaddr, len) != len)
 #endif
 	{
 	  close (fd);
@@ -1709,7 +1709,17 @@ linux_write_memory (CORE_ADDR memaddr, c
 
   if (debug_threads)
     {
-      fprintf (stderr, "Writing %02x to %08lx\n", (unsigned)myaddr[0], (long)memaddr);
+      const unsigned char *m = (const unsigned char *)myaddr;
+      int l = len;
+      char buf[100], *p = buf;
+      while (l > 0 && p < buf + sizeof buf - 10)
+	{
+	  p += sprintf (p, "%s0x%02x", p > buf ? ", " : "", *m++);
+	  l--;
+	}
+      if (l > 0)
+	strcpy (p, "...");
+      fprintf (stderr, "Writing %s to %0lx\n", buf, (long)memaddr);
     }
 
   /* Fill start and end extra bytes of buffer with existing memory data.  */
